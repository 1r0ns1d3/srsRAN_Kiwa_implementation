include:
  - project: softwareradiosystems/testing-tools
    ref: "1.0.0"
    file: .gitlab/ci-shared/workflow.yml
  - project: softwareradiosystems/testing-tools
    ref: "1.0.0"
    file: .gitlab/ci-shared/srs_tools.yml

variables:
  # Input variables
  os_type: ubuntu
  os_version: "22.04"
  compiler: gcc
  docker_version: "1.1.0"
  run_unit_tests: "true"

stages:
  - build
  - unit tests

.build_and_unit:
  image: registry.gitlab.com/softwareradiosystems/testing-tools/srs-builder-gnb-${os_type}-${os_version}:$docker_version

# Build

.build:
  stage: build
  extends: .build_and_unit
  needs: []
  script:
    - |
      if [ $run_unit_tests = "true" ]; then
        EXTRA_BUILD_ARGS="-DENABLE_GCOV=True"
      fi
    - builder.sh -c $compiler $EXTRA_BUILD_ARGS .
  cache: &build_cache
    key: ${os_type}-${os_version}-${docker_version}-${compiler}
    paths:
      - ccache
  artifacts: &build_artifacts
    paths:
      - build/CTestTestfile.cmake
      - build/unittests
      - build/apps/cu-up/cu-up
    expire_in: 10 minutes

build [cached]:
  # The job will use the cache for latest compilation
  extends: .build
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR == "true"
  cache:
    <<: *build_cache
    policy: pull

build [clean and update cache]:
  # A clean build will be done and the job will push a new fresh cache
  extends: .build
  rules:
    - if: $ON_SCHEDULE
  cache:
    <<: *build_cache
    policy: push
  artifacts:
    <<: *build_artifacts
    expire_in: 7 days

build [clean]:
  # Fresh build with no interacton with the cache
  extends: .build
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
  cache: []

# Unit tests

unit test:
  stage: unit tests
  extends: .build_and_unit
  rules:
    - if: $ON_DEFAULT_BRANCH
      when: never
    - if: $run_unit_tests == "true"
  needs:
    - job: build [cached]
      artifacts: true
      optional: true
    - job: build [clean and update cache]
      artifacts: true
      optional: true
    - job: build [clean]
      artifacts: true
      optional: true
  script:
    # Tests
    - cd build
    - ctest -j "$(nproc --all)" --schedule-random --output-junit xunit.xml
    # Code coverage
    - GCOVR_ARGS="--exclude-unreachable-branches --root ${CI_PROJECT_DIR}"
    - gcovr --xml-pretty --print-summary $GCOVR_ARGS -o coverage.xml
    # Generate coverage html
    # - mkdir coverage
    # - gcovr --html --html-details        $GCOVR_ARGS -o coverage/index.html
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    reports:
      junit: build/xunit.xml
      coverage_report:
        coverage_format: cobertura
        path: build/coverage.xml
    # Save coverage html
    # paths:
    #   - build/coverage/*
