
#ifndef SRSGNB_MAC_MAC_CELL_RESULT_H
#define SRSGNB_MAC_MAC_CELL_RESULT_H

#include "sched_result.h"
#include "srsgnb/adt/byte_buffer.h"
#include "srsgnb/adt/static_vector.h"
#include "srsgnb/ran/slot_point.h"

namespace srsgnb {

constexpr size_t MAX_DL_PDUS_PER_SLOT = 16;

struct dl_ssb_pdu {
  // TODO: Compute necessary size.
  byte_buffer payload;
};

// TODO: Compute necessary size.
using mac_dl_dci_payload = byte_buffer;

struct pdcch_pdu {
  mac_dl_dci_payload dci_payload;
};

/// DL Scheduling Request generated by the MAC and received by the PHY.
/// \remark This struct will be used in FAPI to generate DL_TTI.Request.
struct mac_dl_sched_result {
  const dl_sched_result*                         dl_res;
  optional<dl_ssb_pdu>                           ssb_pdu;
  static_vector<pdcch_pdu, MAX_DL_PDUS_PER_SLOT> pdcch_pdus;
};

/// List of DL PDUs produced by MAC in a given slot and cell.
struct mac_dl_data_result {
  slot_point                                       slot;
  static_vector<byte_buffer, MAX_DL_PDUS_PER_SLOT> pdus;
};

struct mac_ul_sched_result {
  const ul_sched_result* ul_res;
};

class mac_cell_result_notifier
{
public:
  virtual ~mac_cell_result_notifier() = default;

  /// Notifies scheduled SSB/PDCCH/PDSCH grants.
  virtual void on_new_downlink_scheduler_results(const mac_dl_sched_result& dl_res) = 0;

  /// Notifies scheduled PDSCH PDUs.
  virtual void on_new_downlink_data(const mac_dl_data_result& dl_data) = 0;

  /// Notifies slot scheduled PUCCH/PUSCH grants.
  virtual void on_new_uplink_scheduler_results(const mac_ul_sched_result& ul_res) = 0;
};

class mac_result_notifier
{
public:
  virtual ~mac_result_notifier()                                         = default;
  virtual mac_cell_result_notifier& get_cell(du_cell_index_t cell_index) = 0;
};

} // namespace srsgnb

#endif // SRSGNB_MAC_MAC_CELL_RESULT_H
