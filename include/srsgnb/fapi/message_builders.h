#ifndef SRSGNB_FAPI_MESSAGE_BUILDERS_H
#define SRSGNB_FAPI_MESSAGE_BUILDERS_H

#include "srsgnb/adt/optional.h"
#include "srsgnb/adt/span.h"
#include "srsgnb/fapi/messages.h"
#include "srsgnb/support/math_utils.h"
#include <algorithm>

namespace srsgnb {
namespace fapi {

/// Helper class to fill in the DL SSB PDU parameters specified in SCF-222 v4.0 section 3.4.2.4.
class dl_ssb_pdu_builder
{
public:
  explicit dl_ssb_pdu_builder(dl_ssb_pdu& pdu) : pdu(pdu), v3(pdu.ssb_maintenance_v3)
  {
    v3.ss_pbch_block_power_scaling = std::numeric_limits<int16_t>::min();
    v3.beta_pss_profile_sss        = std::numeric_limits<int16_t>::min();
  }

  /// Sets the basic parameters for the fields of the SSB/PBCH PDU.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.4, in table SSB/PBCH PDU.
  dl_ssb_pdu_builder& set_basic_parameters(pci_t                 phys_cell_id,
                                           beta_pss_profile_type beta_pss_profile_nr,
                                           uint8_t               ssb_block_index,
                                           uint8_t               ssb_subcarrier_offset,
                                           uint16_t              ssb_offset_pointA)
  {
    pdu.phys_cell_id          = phys_cell_id;
    pdu.beta_pss_profile_nr   = beta_pss_profile_nr;
    pdu.ssb_block_index       = ssb_block_index;
    pdu.ssb_subcarrier_offset = ssb_subcarrier_offset;
    pdu.ssb_offset_pointA     = ssb_offset_pointA;

    return *this;
  }

  /// Sets the BCH payload configured by the MAC and returns a reference to the builder.
  /// \note Use this function when the MAC generates the full PBCH payload.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.4, in table MAC generated MIB PDU.
  /// \note This function assumes that given bch_payload value is codified as: a0,a1,a2,...,a29,a30,a31, with the most
  /// significant bit being the leftmost (in this case a0 in position 31 of the uint32_t).
  dl_ssb_pdu_builder& set_bch_payload_mac_full(uint32_t bch_payload)
  {
    // Configure the BCH payload as fully generated by the MAC.
    pdu.bch_payload_flag        = bch_payload_type::mac_full;
    pdu.bch_payload.bch_payload = bch_payload;

    return *this;
  }

  /// Sets the BCH payload and returns a reference to the builder. PHY configures the timing PBCH bits.
  /// \note Use this function when the PHY generates the timing PBCH information.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.4, in table MAC generated MIB PDU.
  /// \note This function assumes that given bch_payload value is codified as: 0,0,0,0,0,0,0,0,a0,a1,a2,...,a21,a22,a23,
  /// with the most significant bit being the leftmost (in this case a0 in position 24 of the uint32_t).
  dl_ssb_pdu_builder& set_bch_payload_phy_timing_info(uint32_t bch_payload)
  {
    pdu.bch_payload_flag = bch_payload_type::phy_timing_info;
    // Only use the 24 least significant bits.
    pdu.bch_payload.bch_payload = (bch_payload & 0xFFFFFF);

    return *this;
  }

  /// Sets the BCH payload configured by the PHY and returns a reference to the builder.
  /// \note Use this function when the PHY generates the full PBCH payload.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.4, in table PHY generated MIB PDU.
  dl_ssb_pdu_builder& set_bch_payload_phy_full(uint8_t dmrs_type_a_position,
                                               uint8_t pdcch_config_sib1,
                                               bool    cell_barred,
                                               bool    intra_freq_reselection)
  {
    pdu.bch_payload_flag                              = bch_payload_type::phy_full;
    pdu.bch_payload.phy_mib_pdu.dmrs_typeA_position   = dmrs_type_a_position;
    pdu.bch_payload.phy_mib_pdu.pdcch_config_sib1     = pdcch_config_sib1;
    pdu.bch_payload.phy_mib_pdu.cell_barred           = cell_barred ? 0 : 1;
    pdu.bch_payload.phy_mib_pdu.intrafreq_reselection = intra_freq_reselection ? 0 : 1;

    return *this;
  }

  /// Sets the maintenance v3 basic parameters and returns a reference to the builder.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.4, in table SSB/PBCH PDU maintenance FAPIv3.
  /// \note ssbPduIndex field is automatically filled when adding a new SSB PDU to the DL TTI request message.
  dl_ssb_pdu_builder&
  set_maintenance_v3_basic_parameters(ssb_pattern_case case_type, subcarrier_spacing scs, uint8_t l_max)
  {
    v3.case_type = case_type;
    v3.scs       = scs;
    v3.lmax      = l_max;

    return *this;
  }

  /// Sets the SSB power information and returns a reference to the builder.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.4, in table SSB/PBCH PDU maintenance FAPIv3.
  dl_ssb_pdu_builder& set_maintenance_v3_tx_power_info(optional<float> power_scaling_ss_pbch_dB,
                                                       optional<float> pss_to_sss_ratio_dB)
  {
    // Power scaling in SS-PBCH in hundredths of dBs.
    int ss_block_power = (power_scaling_ss_pbch_dB) ? static_cast<int>(power_scaling_ss_pbch_dB.value() * 100) : -32768;
    srsran_assert(ss_block_power <= std::numeric_limits<int16_t>::max(),
                  "SS PBCH block power scaling ({}) exceeds the maximum ({}).",
                  ss_block_power,
                  std::numeric_limits<int16_t>::max());
    srsran_assert(ss_block_power >= std::numeric_limits<int16_t>::min(),
                  "SS PBCH block power scaling ({}) does not reach the minimum ({}).",
                  ss_block_power,
                  std::numeric_limits<int16_t>::min());
    v3.ss_pbch_block_power_scaling = static_cast<int16_t>(ss_block_power);

    // SSS to PSS ratio in thousandths of dBs.
    int beta_pss = (pss_to_sss_ratio_dB) ? static_cast<int>(pss_to_sss_ratio_dB.value() * 1000) : -32768;
    srsran_assert(beta_pss <= std::numeric_limits<int16_t>::max(),
                  "PSS to SSS ratio ({}) exceeds the maximum ({}).",
                  beta_pss,
                  std::numeric_limits<int16_t>::max());
    srsran_assert(beta_pss >= std::numeric_limits<int16_t>::min(),
                  "PSS to SSS ratio ({}) does not reach the minimum ({}).",
                  beta_pss,
                  std::numeric_limits<int16_t>::min());

    v3.beta_pss_profile_sss = static_cast<int16_t>(beta_pss);

    return *this;
  }

  //: TODO: params v4 - MU-MIMO.
  // :TODO: beamforming.
private:
  dl_ssb_pdu&            pdu;
  dl_ssb_maintenance_v3& v3;
};

/// Helper class to fill in the DL DCI PDU parameters specified in SCF-222 v4.0 section 3.4.2.1, including the PDCCH PDU
/// maintenance FAPIv3 and PDCCH PDU FAPIv4 parameters.
class dl_dci_pdu_builder
{
public:
  dl_dci_pdu_builder(dl_dci_pdu&                                    pdu,
                     dl_pdcch_pdu_maintenance_v3::maintenance_info& pdu_v3,
                     dl_pdcch_pdu_parameters_v4::dci_params&        pdu_v4) :
    pdu(pdu), pdu_v3(pdu_v3), pdu_v4(pdu_v4)
  {
    pdu_v3.pdcch_data_power_offset_profile_sss = std::numeric_limits<int16_t>::min();
    pdu_v3.pdcch_dmrs_power_offset_profile_sss = std::numeric_limits<int16_t>::min();
  }

  /// Sets the basic parameters for the fields of the DL DCI PDU.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.1, in table DL DCI PDU.
  dl_dci_pdu_builder& set_basic_parameters(rnti_t   rnti,
                                           uint16_t nid_pdcch_data,
                                           uint16_t nrnti_pdcch_data,
                                           uint8_t  cce_index,
                                           uint8_t  aggregation_level)
  {
    pdu.rnti              = rnti;
    pdu.nid_pdcch_data    = nid_pdcch_data;
    pdu.nrnti_pdcch_data  = nrnti_pdcch_data;
    pdu.cce_index         = cce_index;
    pdu.aggregation_level = aggregation_level;

    return *this;
  }

  /// Sets the transmission power info parameters for the fields of the DL DCI PDU.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.1, in table DL DCI PDU.
  dl_dci_pdu_builder& set_tx_power_info_parameter(optional<float> power_control_offset_ss_profile_nr_dB)
  {
    int value = (power_control_offset_ss_profile_nr_dB)
                    ? static_cast<int>(power_control_offset_ss_profile_nr_dB.value())
                    : -127;

    srsran_assert(value <= std::numeric_limits<int8_t>::max(),
                  "SS profile NR ({}) exceeds the maximum ({}).",
                  value,
                  std::numeric_limits<int8_t>::max());
    srsran_assert(value >= std::numeric_limits<int8_t>::min(),
                  "SS profile NR ({}) does not reach the minimum ({}).",
                  value,
                  std::numeric_limits<int8_t>::min());

    pdu.power_control_offset_ss_profile_nr = static_cast<int8_t>(value);

    return *this;
  }

  /// Sets the payload of the DL DCI PDU.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.1, in table DL DCI PDU.
  dl_dci_pdu_builder& set_payload(span<const uint8_t> payload)
  {
    // :TODO: Confirm that the bit order is: bit0-bit7 are mapped to first byte of MSB - LSB.
    srsran_assert(payload.size() <= pdu.payload.capacity(), "Payload size exceeds maximum expected size");
    std::copy(payload.begin(), payload.end(), pdu.payload.begin());

    return *this;
  }

  // :TODO: Beamforming.

  /// Sets the maintenance v3 DCI parameters of the PDCCH PDU.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.1, in table PDCCH PDU maintenance FAPIv3.
  dl_dci_pdu_builder& set_maintenance_v3_dci_parameters(bool            collocated_al16_candidate_present,
                                                        optional<float> pdcch_dmrs_power_offset_profile_sss_dB,
                                                        optional<float> pdcch_data_power_offset_profile_sss_dB)
  {
    pdu_v3.collocated_AL16_candidate = (collocated_al16_candidate_present) ? 1U : 0U;

    static constexpr int USE_OTHER_FIELDS = std::numeric_limits<int16_t>::min();

    int value = (pdcch_dmrs_power_offset_profile_sss_dB)
                    ? static_cast<int>(pdcch_dmrs_power_offset_profile_sss_dB.value() * 1000)
                    : USE_OTHER_FIELDS;

    srsran_assert(value <= std::numeric_limits<int16_t>::max(),
                  "PDCCH DMRS power offset profile SSS ({}) exceeds the maximum ({}).",
                  value,
                  std::numeric_limits<int16_t>::max());
    srsran_assert(value >= std::numeric_limits<int16_t>::min(),
                  "PDCCH DMRS power offset profile SSS ({}) exceeds the minimum ({}).",
                  value,
                  std::numeric_limits<int16_t>::min());

    pdu_v3.pdcch_dmrs_power_offset_profile_sss = static_cast<int16_t>(value);

    value = (pdcch_data_power_offset_profile_sss_dB)
                ? static_cast<int>(pdcch_data_power_offset_profile_sss_dB.value() * 1000)
                : USE_OTHER_FIELDS;

    srsran_assert(value <= std::numeric_limits<int16_t>::max(),
                  "PDCCH data power offset profile SSS ({}) exceeds the maximum ({}).",
                  value,
                  std::numeric_limits<int16_t>::max());
    srsran_assert(value >= std::numeric_limits<int16_t>::min(),
                  "PDCCH data power offset profile SSS ({}) exceeds the minimum ({}).",
                  value,
                  std::numeric_limits<int16_t>::min());

    pdu_v3.pdcch_data_power_offset_profile_sss = static_cast<int16_t>(value);

    return *this;
  }

  /// Sets the DCI parameters of the PDCCH parameters v4.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.1, in table PDCCH PDU parameters FAPIv4.
  dl_dci_pdu_builder& set_parameters_v4_dci(uint16_t nid_pdcch_dmrs)
  {
    pdu_v4.nid_pdcch_dmrs = nid_pdcch_dmrs;

    return *this;
  }

private:
  dl_dci_pdu&                                    pdu;
  dl_pdcch_pdu_maintenance_v3::maintenance_info& pdu_v3;
  dl_pdcch_pdu_parameters_v4::dci_params&        pdu_v4;
};

/// Helper class to fill in the DL PDCCH PDU parameters specified in SCF-222 v4.0 section 3.4.2.1.
class dl_pdcch_pdu_builder
{
public:
  explicit dl_pdcch_pdu_builder(dl_pdcch_pdu& pdu) : pdu(pdu) {}

  /// Sets the BWP parameters for the fields of the PDCCH PDU.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.1, in table PDCCH PDU.
  dl_pdcch_pdu_builder& set_bwp_parameters(uint16_t           coreset_bwp_size,
                                           uint16_t           coreset_bwp_start,
                                           subcarrier_spacing scs,
                                           cyclic_prefix_type prefix)
  {
    pdu.coreset_bwp_size  = coreset_bwp_size;
    pdu.coreset_bwp_start = coreset_bwp_start;
    pdu.scs               = scs;
    pdu.cyclic_prefix     = prefix;

    return *this;
  }

  /// Sets the coreset parameters for the fields of the PDCCH PDU.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.1, in table PDCCH PDU.
  dl_pdcch_pdu_builder& set_coreset_parameters(uint8_t                   start_symbol_index,
                                               uint8_t                   duration_symbols,
                                               span<const uint8_t>       freq_domain_resource,
                                               cce_to_reg_mapping_type   cce_req_mapping_type,
                                               uint8_t                   reg_bundle_size,
                                               uint8_t                   interleaver_size,
                                               pdcch_coreset_type        coreset_type,
                                               uint16_t                  shift_index,
                                               precoder_granularity_type precoder_granularity)
  {
    pdu.start_symbol_index   = start_symbol_index;
    pdu.duration_symbols     = duration_symbols;
    pdu.cce_reg_mapping_type = cce_req_mapping_type;
    pdu.reg_bundle_size      = reg_bundle_size;
    pdu.interleaver_size     = interleaver_size;
    pdu.coreset_type         = coreset_type;
    pdu.shift_index          = shift_index;
    pdu.precoder_granularity = precoder_granularity;

    // :TODO: confirm the format of the freq_domain_resource. Here it's expecting the LSB of the first Byte of the array
    // to contain the first bit of the frequency domain resources, and so on.
    srsran_assert(freq_domain_resource.size() == pdu.freq_domain_resource.size(), "Unexpected size mismatch");
    std::copy(freq_domain_resource.begin(), freq_domain_resource.end(), pdu.freq_domain_resource.begin());

    return *this;
  }

  /// Adds a DL DCI PDU to the PDCCH PDU.
  /// \note These parameters are specified in SCF-222 v4.0 section 3.4.2.1, in table PDCCH PDU.
  dl_dci_pdu_builder add_dl_dci()
  {
    // Save the size as the index value for the DL DCI.
    unsigned dci_id = pdu.dl_dci.size();

    pdu.dl_dci.emplace_back();
    pdu.maintenance_v3.info.emplace_back();
    pdu.parameters_v4.params.emplace_back();

    // Set the DL DCI index.
    dl_pdcch_pdu_maintenance_v3::maintenance_info& info = pdu.maintenance_v3.info.back();
    info.dci_index                                      = dci_id;

    dl_dci_pdu_builder builder(pdu.dl_dci.back(), info, pdu.parameters_v4.params.back());

    return builder;
  }

private:
  dl_pdcch_pdu& pdu;
};

/// Helper class to fill in the DL PDSCH PDU parameters specified in SCF-222 v4.0 section 3.4.2.2.
class dl_pdsch_pdu_builder
{
public:
  explicit dl_pdsch_pdu_builder(dl_pdsch_pdu& pdu) : pdu(pdu) {}

  // :TODO: add rest of parameters.
  dl_pdsch_pdu_builder& set_basic_parameters(subcarrier_spacing scs)
  {
    pdu.scs = scs;

    return *this;
  }

private:
  dl_pdsch_pdu& pdu;
};

/// Helper class to fill in the DL CSI-RS PDU parameters specified in SCF-222 v4.0 section 3.4.2.3.
class dl_csi_rs_pdu_builder
{
public:
  explicit dl_csi_rs_pdu_builder(dl_csi_rs_pdu& pdu) : pdu(pdu) {}

  // :TODO: add rest of parameters.
  dl_csi_rs_pdu_builder& set_basic_parameters(subcarrier_spacing scs)
  {
    pdu.scs = scs;

    return *this;
  }

private:
  dl_csi_rs_pdu& pdu;
};

/// DL_TTI.request message builder that helps to fill in the parameters specified in SCF-222 v4.0 section 3.4.2.
class dl_tti_request_message_builder
{
  /// Maximum number of DL PDU types supported. The value is specified in SCF-222 v4.0 section 3.4.2.
  static constexpr unsigned NUM_DL_TYPES = 5;

public:
  /// Constructs a builder that will help to fill the given DL TTI request message.
  explicit dl_tti_request_message_builder(dl_tti_request_message& msg) : msg(msg) { msg.num_dl_types = NUM_DL_TYPES; }

  /// Sets the DL TTI request basic parameters and returns a reference to the builder.
  /// \note nPDUs and nPDUsOfEachType properties are filled by the add_*_pdu() functions.
  /// \note these parameters are specified in SCF-222 v4.0 section 3.4.2 in table DL_TTI.request message body.
  dl_tti_request_message_builder& set_basic_parameters(uint16_t sfn, uint16_t slot, uint16_t n_group)
  {
    msg.sfn        = sfn;
    msg.slot       = slot;
    msg.num_groups = n_group;

    return *this;
  }

  /// Adds a PDCCH PDU to the message, fills its basic parameters using the given arguments and returns a PDCCH PDU
  /// builder.
  dl_pdcch_pdu_builder add_pdcch_pdu()
  {
    // Add a new pdu.
    msg.pdus.emplace_back();
    dl_tti_request_pdu& pdu = msg.pdus.back();

    // Fill the pdcch pdu index value. The index value will be the index of the pdu in the array of PDCCH pdus.
    dl_pdcch_pdu_maintenance_v3& info          = pdu.pdcch_pdu.maintenance_v3;
    auto&                        num_pdcch_pdu = msg.num_pdus_of_each_type[static_cast<int>(dl_pdu_type::PDCCH)];
    info.pdcch_pdu_index                       = num_pdcch_pdu;

    // Increase the number of SSB pdus in the request.
    ++num_pdcch_pdu;

    pdu.pdu_type = dl_pdu_type::PDCCH;

    dl_pdcch_pdu_builder builder(pdu.pdcch_pdu);

    return builder;
  }

  /// Adds a PDSCH PDU to the message and returns a PDSCH PDU builder.
  dl_pdsch_pdu_builder add_pdsch_pdu()
  {
    ++msg.num_pdus_of_each_type[static_cast<int>(dl_pdu_type::PDSCH)];

    // Add a new PDU.
    msg.pdus.emplace_back();
    dl_tti_request_pdu& pdu = msg.pdus.back();
    pdu.pdu_type            = dl_pdu_type::PDSCH;

    dl_pdsch_pdu_builder builder(pdu.pdsch_pdu);

    return builder;
  }

  /// Adds a CSI-RS PDU to the message and returns a CSI-RS PDU builder.
  dl_csi_rs_pdu_builder add_csi_rs_pdu()
  {
    ++msg.num_pdus_of_each_type[static_cast<int>(dl_pdu_type::CSI_RS)];

    // Add a new PDU.
    msg.pdus.emplace_back();
    dl_tti_request_pdu& pdu = msg.pdus.back();
    pdu.pdu_type            = dl_pdu_type::CSI_RS;

    dl_csi_rs_pdu_builder builder(pdu.csi_rs_pdu);

    return builder;
  }

  /// Adds a SSB PDU to the message, fills its basic parameters using the given arguments and returns a SSB PDU builder.
  dl_ssb_pdu_builder add_ssb_pdu(pci_t                 phys_cell_id,
                                 beta_pss_profile_type beta_pss_profile_nr,
                                 uint8_t               ssb_block_index,
                                 uint8_t               ssb_subcarrier_offset,
                                 uint16_t              ssb_offset_pointA)
  {
    // Add a new PDU.
    msg.pdus.emplace_back();
    dl_tti_request_pdu& pdu = msg.pdus.back();

    // Fill the SSB PDU index value. The index value will be the index of the PDU in the array of SSB pdus.
    dl_ssb_maintenance_v3& info        = pdu.ssb_pdu.ssb_maintenance_v3;
    auto&                  num_ssb_pdu = msg.num_pdus_of_each_type[static_cast<int>(dl_pdu_type::SSB)];
    info.ssb_pdu_index                 = num_ssb_pdu;

    // Increase the number of SSB PDUs in the request.
    ++num_ssb_pdu;

    pdu.pdu_type = dl_pdu_type::SSB;

    dl_ssb_pdu_builder builder(pdu.ssb_pdu);

    // Fill the PDU basic parameters.
    builder.set_basic_parameters(
        phys_cell_id, beta_pss_profile_nr, ssb_block_index, ssb_subcarrier_offset, ssb_offset_pointA);

    return builder;
  }

  //: TODO: groups array
  //: TODO: top level rate match patterns

private:
  dl_tti_request_message& msg;
};

} // namespace fapi
} // namespace srsgnb

#endif // SRSGNB_FAPI_MESSAGE_BUILDERS_H
