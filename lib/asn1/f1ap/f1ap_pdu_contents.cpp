/*
 *
 * Copyright 2021-2023 Software Radio Systems Limited
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the distribution.
 *
 */

#include "srsran/asn1/f1ap/f1ap_pdu_contents.h"
#include <sstream>

using namespace asn1;
using namespace asn1::f1ap;

/*******************************************************************************
 *                                Struct Methods
 ******************************************************************************/

// AccessAndMobilityIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t access_and_mob_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 359, 360, 443};
  return map_enum_number(names, 4, idx, "id");
}
bool access_and_mob_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 359, 360, 443};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e access_and_mob_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 359:
      return crit_e::ignore;
    case 360:
      return crit_e::ignore;
    case 443:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
access_and_mob_ind_ies_o::value_c access_and_mob_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 359:
      ret.set(value_c::types::rach_report_info_list);
      break;
    case 360:
      ret.set(value_c::types::rlf_report_info_list);
      break;
    case 443:
      ret.set(value_c::types::successful_ho_report_info_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e access_and_mob_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 359:
      return presence_e::optional;
    case 360:
      return presence_e::optional;
    case 443:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void access_and_mob_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::rach_report_info_list:
      c.destroy<rach_report_info_list_l>();
      break;
    case types::rlf_report_info_list:
      c.destroy<rlf_report_info_list_l>();
      break;
    case types::successful_ho_report_info_list:
      c.destroy<successful_ho_report_info_list_l>();
      break;
    default:
      break;
  }
}
void access_and_mob_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::rach_report_info_list:
      c.init<rach_report_info_list_l>();
      break;
    case types::rlf_report_info_list:
      c.init<rlf_report_info_list_l>();
      break;
    case types::successful_ho_report_info_list:
      c.init<successful_ho_report_info_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "access_and_mob_ind_ies_o::value_c");
  }
}
access_and_mob_ind_ies_o::value_c::value_c(const access_and_mob_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::rach_report_info_list:
      c.init(other.c.get<rach_report_info_list_l>());
      break;
    case types::rlf_report_info_list:
      c.init(other.c.get<rlf_report_info_list_l>());
      break;
    case types::successful_ho_report_info_list:
      c.init(other.c.get<successful_ho_report_info_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "access_and_mob_ind_ies_o::value_c");
  }
}
access_and_mob_ind_ies_o::value_c&
access_and_mob_ind_ies_o::value_c::operator=(const access_and_mob_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::rach_report_info_list:
      c.set(other.c.get<rach_report_info_list_l>());
      break;
    case types::rlf_report_info_list:
      c.set(other.c.get<rlf_report_info_list_l>());
      break;
    case types::successful_ho_report_info_list:
      c.set(other.c.get<successful_ho_report_info_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "access_and_mob_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& access_and_mob_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
rach_report_info_list_l& access_and_mob_ind_ies_o::value_c::rach_report_info_list()
{
  assert_choice_type(types::rach_report_info_list, type_, "Value");
  return c.get<rach_report_info_list_l>();
}
rlf_report_info_list_l& access_and_mob_ind_ies_o::value_c::rlf_report_info_list()
{
  assert_choice_type(types::rlf_report_info_list, type_, "Value");
  return c.get<rlf_report_info_list_l>();
}
successful_ho_report_info_list_l& access_and_mob_ind_ies_o::value_c::successful_ho_report_info_list()
{
  assert_choice_type(types::successful_ho_report_info_list, type_, "Value");
  return c.get<successful_ho_report_info_list_l>();
}
const uint16_t& access_and_mob_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const rach_report_info_list_l& access_and_mob_ind_ies_o::value_c::rach_report_info_list() const
{
  assert_choice_type(types::rach_report_info_list, type_, "Value");
  return c.get<rach_report_info_list_l>();
}
const rlf_report_info_list_l& access_and_mob_ind_ies_o::value_c::rlf_report_info_list() const
{
  assert_choice_type(types::rlf_report_info_list, type_, "Value");
  return c.get<rlf_report_info_list_l>();
}
const successful_ho_report_info_list_l& access_and_mob_ind_ies_o::value_c::successful_ho_report_info_list() const
{
  assert_choice_type(types::successful_ho_report_info_list, type_, "Value");
  return c.get<successful_ho_report_info_list_l>();
}
void access_and_mob_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::rach_report_info_list:
      j.start_array("RACHReportInformationList");
      for (const auto& e1 : c.get<rach_report_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::rlf_report_info_list:
      j.start_array("RLFReportInformationList");
      for (const auto& e1 : c.get<rlf_report_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::successful_ho_report_info_list:
      j.start_array("SuccessfulHOReportInformationList");
      for (const auto& e1 : c.get<successful_ho_report_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "access_and_mob_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE access_and_mob_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::rach_report_info_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<rach_report_info_list_l>(), 1, 64, true));
      break;
    case types::rlf_report_info_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<rlf_report_info_list_l>(), 1, 64, true));
      break;
    case types::successful_ho_report_info_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<successful_ho_report_info_list_l>(), 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "access_and_mob_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE access_and_mob_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::rach_report_info_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<rach_report_info_list_l>(), bref, 1, 64, true));
      break;
    case types::rlf_report_info_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<rlf_report_info_list_l>(), bref, 1, 64, true));
      break;
    case types::successful_ho_report_info_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<successful_ho_report_info_list_l>(), bref, 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "access_and_mob_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

access_and_mob_ind_ies_container::access_and_mob_ind_ies_container() :
  transaction_id(78, crit_e::reject),
  rach_report_info_list(359, crit_e::ignore),
  rlf_report_info_list(360, crit_e::ignore),
  successful_ho_report_info_list(443, crit_e::ignore)
{
}
SRSASN_CODE access_and_mob_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += rach_report_info_list_present ? 1 : 0;
  nof_ies += rlf_report_info_list_present ? 1 : 0;
  nof_ies += successful_ho_report_info_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (rach_report_info_list_present) {
    HANDLE_CODE(rach_report_info_list.pack(bref));
  }
  if (rlf_report_info_list_present) {
    HANDLE_CODE(rlf_report_info_list.pack(bref));
  }
  if (successful_ho_report_info_list_present) {
    HANDLE_CODE(successful_ho_report_info_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE access_and_mob_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 359: {
        rach_report_info_list_present = true;
        rach_report_info_list.id      = id;
        HANDLE_CODE(rach_report_info_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rach_report_info_list.value.unpack(bref));
        break;
      }
      case 360: {
        rlf_report_info_list_present = true;
        rlf_report_info_list.id      = id;
        HANDLE_CODE(rlf_report_info_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rlf_report_info_list.value.unpack(bref));
        break;
      }
      case 443: {
        successful_ho_report_info_list_present = true;
        successful_ho_report_info_list.id      = id;
        HANDLE_CODE(successful_ho_report_info_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(successful_ho_report_info_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void access_and_mob_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (rach_report_info_list_present) {
    j.write_fieldname("");
    rach_report_info_list.to_json(j);
  }
  if (rlf_report_info_list_present) {
    j.write_fieldname("");
    rlf_report_info_list.to_json(j);
  }
  if (successful_ho_report_info_list_present) {
    j.write_fieldname("");
    successful_ho_report_info_list.to_json(j);
  }
  j.end_obj();
}

// AccessSuccessIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t access_success_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 111};
  return map_enum_number(names, 3, idx, "id");
}
bool access_success_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 111};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e access_success_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 111:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
access_success_ies_o::value_c access_success_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 111:
      ret.set(value_c::types::nr_cgi);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e access_success_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 111:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void access_success_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::nr_cgi:
      c.destroy<nr_cgi_s>();
      break;
    default:
      break;
  }
}
void access_success_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::nr_cgi:
      c.init<nr_cgi_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "access_success_ies_o::value_c");
  }
}
access_success_ies_o::value_c::value_c(const access_success_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::nr_cgi:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "access_success_ies_o::value_c");
  }
}
access_success_ies_o::value_c& access_success_ies_o::value_c::operator=(const access_success_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::nr_cgi:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "access_success_ies_o::value_c");
  }

  return *this;
}
uint64_t& access_success_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& access_success_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
nr_cgi_s& access_success_ies_o::value_c::nr_cgi()
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
const uint64_t& access_success_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& access_success_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const nr_cgi_s& access_success_ies_o::value_c::nr_cgi() const
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
void access_success_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::nr_cgi:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "access_success_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE access_success_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "access_success_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE access_success_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "access_success_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

access_success_ies_container::access_success_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject), gnb_du_ue_f1ap_id(41, crit_e::reject), nr_cgi(111, crit_e::reject)
{
}
SRSASN_CODE access_success_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(nr_cgi.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE access_success_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 111: {
        nof_mandatory_ies--;
        nr_cgi.id = id;
        HANDLE_CODE(nr_cgi.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_cgi.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void access_success_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  nr_cgi.to_json(j);
  j.end_obj();
}

// AperiodicSRS ::= SEQUENCE
SRSASN_CODE aperiodic_srs_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(srs_res_trigger_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(aperiodic.pack(bref));
  if (srs_res_trigger_present) {
    HANDLE_CODE(srs_res_trigger.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE aperiodic_srs_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(srs_res_trigger_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(aperiodic.unpack(bref));
  if (srs_res_trigger_present) {
    HANDLE_CODE(srs_res_trigger.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void aperiodic_srs_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("aperiodic", "true");
  if (srs_res_trigger_present) {
    j.write_fieldname("sRSResourceTrigger");
    srs_res_trigger.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

const char* aperiodic_srs_s::aperiodic_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "aperiodic_srs_s::aperiodic_e_");
}

// Associated-SCell-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t associated_scell_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {200};
  return map_enum_number(names, 1, idx, "id");
}
bool associated_scell_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 200 == id;
}
crit_e associated_scell_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 200) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
associated_scell_item_ies_o::value_c associated_scell_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 200) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e associated_scell_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 200) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void associated_scell_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Associated-SCell-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE associated_scell_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE associated_scell_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<associated_scell_item_ies_o>;

// BAP-Header-Rewriting-Added-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bap_hdr_rewriting_added_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {515};
  return map_enum_number(names, 1, idx, "id");
}
bool bap_hdr_rewriting_added_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 515 == id;
}
crit_e bap_hdr_rewriting_added_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 515) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bap_hdr_rewriting_added_list_item_ies_o::value_c bap_hdr_rewriting_added_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 515) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bap_hdr_rewriting_added_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 515) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bap_hdr_rewriting_added_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BAP-Header-Rewriting-Added-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bap_hdr_rewriting_added_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_hdr_rewriting_added_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bap_hdr_rewriting_added_list_item_ies_o>;

// BAP-Header-Rewriting-Removed-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bap_hdr_rewriting_remd_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {642};
  return map_enum_number(names, 1, idx, "id");
}
bool bap_hdr_rewriting_remd_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 642 == id;
}
crit_e bap_hdr_rewriting_remd_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 642) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bap_hdr_rewriting_remd_list_item_ies_o::value_c bap_hdr_rewriting_remd_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 642) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bap_hdr_rewriting_remd_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 642) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bap_hdr_rewriting_remd_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BAP-Header-Rewriting-Removed-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bap_hdr_rewriting_remd_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_hdr_rewriting_remd_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bap_hdr_rewriting_remd_list_item_ies_o>;

// BH-Routing-Information-Added-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bh_routing_info_added_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {284};
  return map_enum_number(names, 1, idx, "id");
}
bool bh_routing_info_added_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 284 == id;
}
crit_e bh_routing_info_added_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 284) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bh_routing_info_added_list_item_ies_o::value_c bh_routing_info_added_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 284) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bh_routing_info_added_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 284) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bh_routing_info_added_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BH-Routing-Information-Added-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bh_routing_info_added_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_routing_info_added_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// BH-Routing-Information-Removed-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bh_routing_info_remd_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {286};
  return map_enum_number(names, 1, idx, "id");
}
bool bh_routing_info_remd_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 286 == id;
}
crit_e bh_routing_info_remd_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 286) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bh_routing_info_remd_list_item_ies_o::value_c bh_routing_info_remd_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 286) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bh_routing_info_remd_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 286) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bh_routing_info_remd_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BH-Routing-Information-Removed-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bh_routing_info_remd_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_routing_info_remd_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bh_routing_info_added_list_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<bh_routing_info_remd_list_item_ies_o>;

// BAPMappingConfiguration-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bap_map_cfg_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 283, 285, 299, 512, 514, 516, 641};
  return map_enum_number(names, 8, idx, "id");
}
bool bap_map_cfg_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 283, 285, 299, 512, 514, 516, 641};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e bap_map_cfg_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 283:
      return crit_e::ignore;
    case 285:
      return crit_e::ignore;
    case 299:
      return crit_e::ignore;
    case 512:
      return crit_e::ignore;
    case 514:
      return crit_e::ignore;
    case 516:
      return crit_e::ignore;
    case 641:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
bap_map_cfg_ies_o::value_c bap_map_cfg_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 283:
      ret.set(value_c::types::bh_routing_info_added_list);
      break;
    case 285:
      ret.set(value_c::types::bh_routing_info_remd_list);
      break;
    case 299:
      ret.set(value_c::types::traffic_map_info);
      break;
    case 512:
      ret.set(value_c::types::buffer_size_thresh);
      break;
    case 514:
      ret.set(value_c::types::bap_hdr_rewriting_added_list);
      break;
    case 516:
      ret.set(value_c::types::re_routing_enable_ind);
      break;
    case 641:
      ret.set(value_c::types::bap_hdr_rewriting_remd_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bap_map_cfg_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 283:
      return presence_e::optional;
    case 285:
      return presence_e::optional;
    case 299:
      return presence_e::optional;
    case 512:
      return presence_e::optional;
    case 514:
      return presence_e::optional;
    case 516:
      return presence_e::optional;
    case 641:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void bap_map_cfg_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::bh_routing_info_added_list:
      c.destroy<bh_routing_info_added_list_l>();
      break;
    case types::bh_routing_info_remd_list:
      c.destroy<bh_routing_info_remd_list_l>();
      break;
    case types::traffic_map_info:
      c.destroy<traffic_map_info_c>();
      break;
    case types::bap_hdr_rewriting_added_list:
      c.destroy<bap_hdr_rewriting_added_list_l>();
      break;
    case types::bap_hdr_rewriting_remd_list:
      c.destroy<bap_hdr_rewriting_remd_list_l>();
      break;
    default:
      break;
  }
}
void bap_map_cfg_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::bh_routing_info_added_list:
      c.init<bh_routing_info_added_list_l>();
      break;
    case types::bh_routing_info_remd_list:
      c.init<bh_routing_info_remd_list_l>();
      break;
    case types::traffic_map_info:
      c.init<traffic_map_info_c>();
      break;
    case types::buffer_size_thresh:
      break;
    case types::bap_hdr_rewriting_added_list:
      c.init<bap_hdr_rewriting_added_list_l>();
      break;
    case types::re_routing_enable_ind:
      break;
    case types::bap_hdr_rewriting_remd_list:
      c.init<bap_hdr_rewriting_remd_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ies_o::value_c");
  }
}
bap_map_cfg_ies_o::value_c::value_c(const bap_map_cfg_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::bh_routing_info_added_list:
      c.init(other.c.get<bh_routing_info_added_list_l>());
      break;
    case types::bh_routing_info_remd_list:
      c.init(other.c.get<bh_routing_info_remd_list_l>());
      break;
    case types::traffic_map_info:
      c.init(other.c.get<traffic_map_info_c>());
      break;
    case types::buffer_size_thresh:
      c.init(other.c.get<uint32_t>());
      break;
    case types::bap_hdr_rewriting_added_list:
      c.init(other.c.get<bap_hdr_rewriting_added_list_l>());
      break;
    case types::re_routing_enable_ind:
      c.init(other.c.get<re_routing_enable_ind_e>());
      break;
    case types::bap_hdr_rewriting_remd_list:
      c.init(other.c.get<bap_hdr_rewriting_remd_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ies_o::value_c");
  }
}
bap_map_cfg_ies_o::value_c& bap_map_cfg_ies_o::value_c::operator=(const bap_map_cfg_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::bh_routing_info_added_list:
      c.set(other.c.get<bh_routing_info_added_list_l>());
      break;
    case types::bh_routing_info_remd_list:
      c.set(other.c.get<bh_routing_info_remd_list_l>());
      break;
    case types::traffic_map_info:
      c.set(other.c.get<traffic_map_info_c>());
      break;
    case types::buffer_size_thresh:
      c.set(other.c.get<uint32_t>());
      break;
    case types::bap_hdr_rewriting_added_list:
      c.set(other.c.get<bap_hdr_rewriting_added_list_l>());
      break;
    case types::re_routing_enable_ind:
      c.set(other.c.get<re_routing_enable_ind_e>());
      break;
    case types::bap_hdr_rewriting_remd_list:
      c.set(other.c.get<bap_hdr_rewriting_remd_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ies_o::value_c");
  }

  return *this;
}
uint16_t& bap_map_cfg_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
bh_routing_info_added_list_l& bap_map_cfg_ies_o::value_c::bh_routing_info_added_list()
{
  assert_choice_type(types::bh_routing_info_added_list, type_, "Value");
  return c.get<bh_routing_info_added_list_l>();
}
bh_routing_info_remd_list_l& bap_map_cfg_ies_o::value_c::bh_routing_info_remd_list()
{
  assert_choice_type(types::bh_routing_info_remd_list, type_, "Value");
  return c.get<bh_routing_info_remd_list_l>();
}
traffic_map_info_c& bap_map_cfg_ies_o::value_c::traffic_map_info()
{
  assert_choice_type(types::traffic_map_info, type_, "Value");
  return c.get<traffic_map_info_c>();
}
uint32_t& bap_map_cfg_ies_o::value_c::buffer_size_thresh()
{
  assert_choice_type(types::buffer_size_thresh, type_, "Value");
  return c.get<uint32_t>();
}
bap_hdr_rewriting_added_list_l& bap_map_cfg_ies_o::value_c::bap_hdr_rewriting_added_list()
{
  assert_choice_type(types::bap_hdr_rewriting_added_list, type_, "Value");
  return c.get<bap_hdr_rewriting_added_list_l>();
}
re_routing_enable_ind_e& bap_map_cfg_ies_o::value_c::re_routing_enable_ind()
{
  assert_choice_type(types::re_routing_enable_ind, type_, "Value");
  return c.get<re_routing_enable_ind_e>();
}
bap_hdr_rewriting_remd_list_l& bap_map_cfg_ies_o::value_c::bap_hdr_rewriting_remd_list()
{
  assert_choice_type(types::bap_hdr_rewriting_remd_list, type_, "Value");
  return c.get<bap_hdr_rewriting_remd_list_l>();
}
const uint16_t& bap_map_cfg_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const bh_routing_info_added_list_l& bap_map_cfg_ies_o::value_c::bh_routing_info_added_list() const
{
  assert_choice_type(types::bh_routing_info_added_list, type_, "Value");
  return c.get<bh_routing_info_added_list_l>();
}
const bh_routing_info_remd_list_l& bap_map_cfg_ies_o::value_c::bh_routing_info_remd_list() const
{
  assert_choice_type(types::bh_routing_info_remd_list, type_, "Value");
  return c.get<bh_routing_info_remd_list_l>();
}
const traffic_map_info_c& bap_map_cfg_ies_o::value_c::traffic_map_info() const
{
  assert_choice_type(types::traffic_map_info, type_, "Value");
  return c.get<traffic_map_info_c>();
}
const uint32_t& bap_map_cfg_ies_o::value_c::buffer_size_thresh() const
{
  assert_choice_type(types::buffer_size_thresh, type_, "Value");
  return c.get<uint32_t>();
}
const bap_hdr_rewriting_added_list_l& bap_map_cfg_ies_o::value_c::bap_hdr_rewriting_added_list() const
{
  assert_choice_type(types::bap_hdr_rewriting_added_list, type_, "Value");
  return c.get<bap_hdr_rewriting_added_list_l>();
}
const re_routing_enable_ind_e& bap_map_cfg_ies_o::value_c::re_routing_enable_ind() const
{
  assert_choice_type(types::re_routing_enable_ind, type_, "Value");
  return c.get<re_routing_enable_ind_e>();
}
const bap_hdr_rewriting_remd_list_l& bap_map_cfg_ies_o::value_c::bap_hdr_rewriting_remd_list() const
{
  assert_choice_type(types::bap_hdr_rewriting_remd_list, type_, "Value");
  return c.get<bap_hdr_rewriting_remd_list_l>();
}
void bap_map_cfg_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::bh_routing_info_added_list:
      j.start_array("BH-Routing-Information-Added-List");
      for (const auto& e1 : c.get<bh_routing_info_added_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::bh_routing_info_remd_list:
      j.start_array("BH-Routing-Information-Removed-List");
      for (const auto& e1 : c.get<bh_routing_info_remd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::traffic_map_info:
      j.write_fieldname("TrafficMappingInfo");
      c.get<traffic_map_info_c>().to_json(j);
      break;
    case types::buffer_size_thresh:
      j.write_int("INTEGER (0..16777215)", c.get<uint32_t>());
      break;
    case types::bap_hdr_rewriting_added_list:
      j.start_array("BAP-Header-Rewriting-Added-List");
      for (const auto& e1 : c.get<bap_hdr_rewriting_added_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::re_routing_enable_ind:
      j.write_str("Re-routingEnableIndicator", c.get<re_routing_enable_ind_e>().to_string());
      break;
    case types::bap_hdr_rewriting_remd_list:
      j.start_array("BAP-Header-Rewriting-Removed-List");
      for (const auto& e1 : c.get<bap_hdr_rewriting_remd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE bap_map_cfg_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::bh_routing_info_added_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_routing_info_added_list_l>(), 1, 1024, true));
      break;
    case types::bh_routing_info_remd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_routing_info_remd_list_l>(), 1, 1024, true));
      break;
    case types::traffic_map_info:
      HANDLE_CODE(c.get<traffic_map_info_c>().pack(bref));
      break;
    case types::buffer_size_thresh:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)16777215u, false, true));
      break;
    case types::bap_hdr_rewriting_added_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bap_hdr_rewriting_added_list_l>(), 1, 1024, true));
      break;
    case types::re_routing_enable_ind:
      HANDLE_CODE(c.get<re_routing_enable_ind_e>().pack(bref));
      break;
    case types::bap_hdr_rewriting_remd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bap_hdr_rewriting_remd_list_l>(), 1, 1024, true));
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_map_cfg_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::bh_routing_info_added_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_routing_info_added_list_l>(), bref, 1, 1024, true));
      break;
    case types::bh_routing_info_remd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_routing_info_remd_list_l>(), bref, 1, 1024, true));
      break;
    case types::traffic_map_info:
      HANDLE_CODE(c.get<traffic_map_info_c>().unpack(bref));
      break;
    case types::buffer_size_thresh:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)16777215u, false, true));
      break;
    case types::bap_hdr_rewriting_added_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bap_hdr_rewriting_added_list_l>(), bref, 1, 1024, true));
      break;
    case types::re_routing_enable_ind:
      HANDLE_CODE(c.get<re_routing_enable_ind_e>().unpack(bref));
      break;
    case types::bap_hdr_rewriting_remd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bap_hdr_rewriting_remd_list_l>(), bref, 1, 1024, true));
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

bap_map_cfg_ies_container::bap_map_cfg_ies_container() :
  transaction_id(78, crit_e::reject),
  bh_routing_info_added_list(283, crit_e::ignore),
  bh_routing_info_remd_list(285, crit_e::ignore),
  traffic_map_info(299, crit_e::ignore),
  buffer_size_thresh(512, crit_e::ignore),
  bap_hdr_rewriting_added_list(514, crit_e::ignore),
  re_routing_enable_ind(516, crit_e::ignore),
  bap_hdr_rewriting_remd_list(641, crit_e::ignore)
{
}
SRSASN_CODE bap_map_cfg_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += bh_routing_info_added_list_present ? 1 : 0;
  nof_ies += bh_routing_info_remd_list_present ? 1 : 0;
  nof_ies += traffic_map_info_present ? 1 : 0;
  nof_ies += buffer_size_thresh_present ? 1 : 0;
  nof_ies += bap_hdr_rewriting_added_list_present ? 1 : 0;
  nof_ies += re_routing_enable_ind_present ? 1 : 0;
  nof_ies += bap_hdr_rewriting_remd_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (bh_routing_info_added_list_present) {
    HANDLE_CODE(bh_routing_info_added_list.pack(bref));
  }
  if (bh_routing_info_remd_list_present) {
    HANDLE_CODE(bh_routing_info_remd_list.pack(bref));
  }
  if (traffic_map_info_present) {
    HANDLE_CODE(traffic_map_info.pack(bref));
  }
  if (buffer_size_thresh_present) {
    HANDLE_CODE(buffer_size_thresh.pack(bref));
  }
  if (bap_hdr_rewriting_added_list_present) {
    HANDLE_CODE(bap_hdr_rewriting_added_list.pack(bref));
  }
  if (re_routing_enable_ind_present) {
    HANDLE_CODE(re_routing_enable_ind.pack(bref));
  }
  if (bap_hdr_rewriting_remd_list_present) {
    HANDLE_CODE(bap_hdr_rewriting_remd_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_map_cfg_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 283: {
        bh_routing_info_added_list_present = true;
        bh_routing_info_added_list.id      = id;
        HANDLE_CODE(bh_routing_info_added_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bh_routing_info_added_list.value.unpack(bref));
        break;
      }
      case 285: {
        bh_routing_info_remd_list_present = true;
        bh_routing_info_remd_list.id      = id;
        HANDLE_CODE(bh_routing_info_remd_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bh_routing_info_remd_list.value.unpack(bref));
        break;
      }
      case 299: {
        traffic_map_info_present = true;
        traffic_map_info.id      = id;
        HANDLE_CODE(traffic_map_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(traffic_map_info.value.unpack(bref));
        break;
      }
      case 512: {
        buffer_size_thresh_present = true;
        buffer_size_thresh.id      = id;
        HANDLE_CODE(buffer_size_thresh.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(buffer_size_thresh.value.unpack(bref));
        break;
      }
      case 514: {
        bap_hdr_rewriting_added_list_present = true;
        bap_hdr_rewriting_added_list.id      = id;
        HANDLE_CODE(bap_hdr_rewriting_added_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bap_hdr_rewriting_added_list.value.unpack(bref));
        break;
      }
      case 516: {
        re_routing_enable_ind_present = true;
        re_routing_enable_ind.id      = id;
        HANDLE_CODE(re_routing_enable_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(re_routing_enable_ind.value.unpack(bref));
        break;
      }
      case 641: {
        bap_hdr_rewriting_remd_list_present = true;
        bap_hdr_rewriting_remd_list.id      = id;
        HANDLE_CODE(bap_hdr_rewriting_remd_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bap_hdr_rewriting_remd_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void bap_map_cfg_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (bh_routing_info_added_list_present) {
    j.write_fieldname("");
    bh_routing_info_added_list.to_json(j);
  }
  if (bh_routing_info_remd_list_present) {
    j.write_fieldname("");
    bh_routing_info_remd_list.to_json(j);
  }
  if (traffic_map_info_present) {
    j.write_fieldname("");
    traffic_map_info.to_json(j);
  }
  if (buffer_size_thresh_present) {
    j.write_fieldname("");
    buffer_size_thresh.to_json(j);
  }
  if (bap_hdr_rewriting_added_list_present) {
    j.write_fieldname("");
    bap_hdr_rewriting_added_list.to_json(j);
  }
  if (re_routing_enable_ind_present) {
    j.write_fieldname("");
    re_routing_enable_ind.to_json(j);
  }
  if (bap_hdr_rewriting_remd_list_present) {
    j.write_fieldname("");
    bap_hdr_rewriting_remd_list.to_json(j);
  }
  j.end_obj();
}

// BAPMappingConfigurationAcknowledge-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bap_map_cfg_ack_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 7};
  return map_enum_number(names, 2, idx, "id");
}
bool bap_map_cfg_ack_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e bap_map_cfg_ack_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
bap_map_cfg_ack_ies_o::value_c bap_map_cfg_ack_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bap_map_cfg_ack_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void bap_map_cfg_ack_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void bap_map_cfg_ack_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ack_ies_o::value_c");
  }
}
bap_map_cfg_ack_ies_o::value_c::value_c(const bap_map_cfg_ack_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ack_ies_o::value_c");
  }
}
bap_map_cfg_ack_ies_o::value_c& bap_map_cfg_ack_ies_o::value_c::operator=(const bap_map_cfg_ack_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ack_ies_o::value_c");
  }

  return *this;
}
uint16_t& bap_map_cfg_ack_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
crit_diagnostics_s& bap_map_cfg_ack_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& bap_map_cfg_ack_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const crit_diagnostics_s& bap_map_cfg_ack_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void bap_map_cfg_ack_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ack_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE bap_map_cfg_ack_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ack_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_map_cfg_ack_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ack_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

bap_map_cfg_ack_ies_container::bap_map_cfg_ack_ies_container() :
  transaction_id(78, crit_e::reject), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE bap_map_cfg_ack_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_map_cfg_ack_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void bap_map_cfg_ack_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// BAPMappingConfigurationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bap_map_cfg_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool bap_map_cfg_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e bap_map_cfg_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
bap_map_cfg_fail_ies_o::value_c bap_map_cfg_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bap_map_cfg_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void bap_map_cfg_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void bap_map_cfg_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_fail_ies_o::value_c");
  }
}
bap_map_cfg_fail_ies_o::value_c::value_c(const bap_map_cfg_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_fail_ies_o::value_c");
  }
}
bap_map_cfg_fail_ies_o::value_c&
bap_map_cfg_fail_ies_o::value_c::operator=(const bap_map_cfg_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& bap_map_cfg_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& bap_map_cfg_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& bap_map_cfg_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& bap_map_cfg_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& bap_map_cfg_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& bap_map_cfg_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& bap_map_cfg_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& bap_map_cfg_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void bap_map_cfg_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE bap_map_cfg_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_map_cfg_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

bap_map_cfg_fail_ies_container::bap_map_cfg_fail_ies_container() :
  transaction_id(78, crit_e::reject),
  cause(0, crit_e::ignore),
  time_to_wait(77, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE bap_map_cfg_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (time_to_wait_present) {
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_map_cfg_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        time_to_wait.id      = id;
        HANDLE_CODE(time_to_wait.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void bap_map_cfg_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_fieldname("");
    time_to_wait.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// BHChannels-FailedToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bh_chs_failed_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {268};
  return map_enum_number(names, 1, idx, "id");
}
bool bh_chs_failed_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 268 == id;
}
crit_e bh_chs_failed_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 268) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bh_chs_failed_to_be_modified_item_ies_o::value_c bh_chs_failed_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 268) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bh_chs_failed_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 268) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bh_chs_failed_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BHChannels-FailedToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bh_chs_failed_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_chs_failed_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bh_chs_failed_to_be_modified_item_ies_o>;

// BHChannels-FailedToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bh_chs_failed_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {278};
  return map_enum_number(names, 1, idx, "id");
}
bool bh_chs_failed_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 278 == id;
}
crit_e bh_chs_failed_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 278) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bh_chs_failed_to_be_setup_item_ies_o::value_c bh_chs_failed_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 278) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bh_chs_failed_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 278) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bh_chs_failed_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BHChannels-FailedToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bh_chs_failed_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_chs_failed_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bh_chs_failed_to_be_setup_item_ies_o>;

// BHChannels-FailedToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bh_chs_failed_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {270};
  return map_enum_number(names, 1, idx, "id");
}
bool bh_chs_failed_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 270 == id;
}
crit_e bh_chs_failed_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 270) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bh_chs_failed_to_be_setup_mod_item_ies_o::value_c
bh_chs_failed_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 270) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bh_chs_failed_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 270) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bh_chs_failed_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BHChannels-FailedToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bh_chs_failed_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_chs_failed_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bh_chs_failed_to_be_setup_mod_item_ies_o>;

// BHChannels-Modified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bh_chs_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {272};
  return map_enum_number(names, 1, idx, "id");
}
bool bh_chs_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 272 == id;
}
crit_e bh_chs_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 272) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bh_chs_modified_item_ies_o::value_c bh_chs_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 272) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bh_chs_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 272) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bh_chs_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BHChannels-Modified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bh_chs_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_chs_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bh_chs_modified_item_ies_o>;

// BHChannels-Required-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bh_chs_required_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {276};
  return map_enum_number(names, 1, idx, "id");
}
bool bh_chs_required_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 276 == id;
}
crit_e bh_chs_required_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 276) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bh_chs_required_to_be_released_item_ies_o::value_c
bh_chs_required_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 276) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bh_chs_required_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 276) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bh_chs_required_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BHChannels-Required-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bh_chs_required_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_chs_required_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bh_chs_required_to_be_released_item_ies_o>;

// BHChannels-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bh_chs_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {261};
  return map_enum_number(names, 1, idx, "id");
}
bool bh_chs_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 261 == id;
}
crit_e bh_chs_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 261) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bh_chs_setup_item_ies_o::value_c bh_chs_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 261) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bh_chs_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 261) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bh_chs_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BHChannels-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bh_chs_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_chs_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bh_chs_setup_item_ies_o>;

// BHChannels-SetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bh_chs_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {274};
  return map_enum_number(names, 1, idx, "id");
}
bool bh_chs_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 274 == id;
}
crit_e bh_chs_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 274) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bh_chs_setup_mod_item_ies_o::value_c bh_chs_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 274) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bh_chs_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 274) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bh_chs_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BHChannels-SetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bh_chs_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_chs_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bh_chs_setup_mod_item_ies_o>;

// BHChannels-ToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bh_chs_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {262};
  return map_enum_number(names, 1, idx, "id");
}
bool bh_chs_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 262 == id;
}
crit_e bh_chs_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 262) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bh_chs_to_be_modified_item_ies_o::value_c bh_chs_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 262) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bh_chs_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 262) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bh_chs_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BHChannels-ToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bh_chs_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_chs_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bh_chs_to_be_modified_item_ies_o>;

// BHChannels-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bh_chs_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {264};
  return map_enum_number(names, 1, idx, "id");
}
bool bh_chs_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 264 == id;
}
crit_e bh_chs_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 264) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bh_chs_to_be_released_item_ies_o::value_c bh_chs_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 264) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bh_chs_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 264) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bh_chs_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BHChannels-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bh_chs_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_chs_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bh_chs_to_be_released_item_ies_o>;

// BHChannels-ToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bh_chs_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {259};
  return map_enum_number(names, 1, idx, "id");
}
bool bh_chs_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 259 == id;
}
crit_e bh_chs_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 259) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bh_chs_to_be_setup_item_ies_o::value_c bh_chs_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 259) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bh_chs_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 259) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bh_chs_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BHChannels-ToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bh_chs_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_chs_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bh_chs_to_be_setup_item_ies_o>;

// BHChannels-ToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bh_chs_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {266};
  return map_enum_number(names, 1, idx, "id");
}
bool bh_chs_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 266 == id;
}
crit_e bh_chs_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 266) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
bh_chs_to_be_setup_mod_item_ies_o::value_c bh_chs_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 266) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bh_chs_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 266) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void bh_chs_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BHChannels-ToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE bh_chs_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_chs_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<bh_chs_to_be_setup_mod_item_ies_o>;

// Broadcast-To-Be-Cancelled-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_to_be_cancelled_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {149};
  return map_enum_number(names, 1, idx, "id");
}
bool broadcast_to_be_cancelled_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 149 == id;
}
crit_e broadcast_to_be_cancelled_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 149) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
broadcast_to_be_cancelled_list_item_ies_o::value_c
broadcast_to_be_cancelled_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 149) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_to_be_cancelled_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 149) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void broadcast_to_be_cancelled_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Broadcast-To-Be-Cancelled-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE broadcast_to_be_cancelled_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_to_be_cancelled_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<broadcast_to_be_cancelled_list_item_ies_o>;

// BroadcastContextModificationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_mod_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool broadcast_context_mod_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_mod_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_mod_fail_ies_o::value_c broadcast_context_mod_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_mod_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_mod_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void broadcast_context_mod_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_fail_ies_o::value_c");
  }
}
broadcast_context_mod_fail_ies_o::value_c::value_c(const broadcast_context_mod_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_fail_ies_o::value_c");
  }
}
broadcast_context_mod_fail_ies_o::value_c&
broadcast_context_mod_fail_ies_o::value_c::operator=(const broadcast_context_mod_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_mod_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_mod_fail_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& broadcast_context_mod_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& broadcast_context_mod_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& broadcast_context_mod_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_mod_fail_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& broadcast_context_mod_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& broadcast_context_mod_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void broadcast_context_mod_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_mod_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_mod_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

broadcast_context_mod_fail_ies_container::broadcast_context_mod_fail_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::reject),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE broadcast_context_mod_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_mod_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_mod_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// BroadcastMRBs-ToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_m_rbs_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {471};
  return map_enum_number(names, 1, idx, "id");
}
bool broadcast_m_rbs_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 471 == id;
}
crit_e broadcast_m_rbs_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 471) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
broadcast_m_rbs_to_be_modified_item_ies_o::value_c
broadcast_m_rbs_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 471) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_m_rbs_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 471) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void broadcast_m_rbs_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BroadcastMRBs-ToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE broadcast_m_rbs_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_m_rbs_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// BroadcastMRBs-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_m_rbs_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {473};
  return map_enum_number(names, 1, idx, "id");
}
bool broadcast_m_rbs_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 473 == id;
}
crit_e broadcast_m_rbs_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 473) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
broadcast_m_rbs_to_be_released_item_ies_o::value_c
broadcast_m_rbs_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 473) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_m_rbs_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 473) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void broadcast_m_rbs_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BroadcastMRBs-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE broadcast_m_rbs_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_m_rbs_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// BroadcastMRBs-ToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_m_rbs_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {477};
  return map_enum_number(names, 1, idx, "id");
}
bool broadcast_m_rbs_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 477 == id;
}
crit_e broadcast_m_rbs_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 477) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
broadcast_m_rbs_to_be_setup_mod_item_ies_o::value_c
broadcast_m_rbs_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 477) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_m_rbs_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 477) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void broadcast_m_rbs_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BroadcastMRBs-ToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE broadcast_m_rbs_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_m_rbs_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<broadcast_m_rbs_to_be_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<broadcast_m_rbs_to_be_released_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<broadcast_m_rbs_to_be_setup_mod_item_ies_o>;

// BroadcastContextModificationRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_mod_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 481, 454, 476, 470, 472};
  return map_enum_number(names, 7, idx, "id");
}
bool broadcast_context_mod_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 481, 454, 476, 470, 472};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_mod_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 481:
      return crit_e::reject;
    case 454:
      return crit_e::reject;
    case 476:
      return crit_e::reject;
    case 470:
      return crit_e::reject;
    case 472:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_mod_request_ies_o::value_c broadcast_context_mod_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 481:
      ret.set(value_c::types::mbs_service_area);
      break;
    case 454:
      ret.set(value_c::types::mbs_cu_to_du_rrc_info);
      break;
    case 476:
      ret.set(value_c::types::broadcast_m_rbs_to_be_setup_mod_list);
      break;
    case 470:
      ret.set(value_c::types::broadcast_m_rbs_to_be_modified_list);
      break;
    case 472:
      ret.set(value_c::types::broadcast_m_rbs_to_be_released_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_mod_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 481:
      return presence_e::optional;
    case 454:
      return presence_e::mandatory;
    case 476:
      return presence_e::optional;
    case 470:
      return presence_e::optional;
    case 472:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_mod_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_service_area:
      c.destroy<mbs_service_area_c>();
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.destroy<mbs_cu_to_du_rrc_info_s>();
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      c.destroy<broadcast_m_rbs_to_be_setup_mod_list_l>();
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      c.destroy<broadcast_m_rbs_to_be_modified_list_l>();
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      c.destroy<broadcast_m_rbs_to_be_released_list_l>();
      break;
    default:
      break;
  }
}
void broadcast_context_mod_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_service_area:
      c.init<mbs_service_area_c>();
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.init<mbs_cu_to_du_rrc_info_s>();
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      c.init<broadcast_m_rbs_to_be_setup_mod_list_l>();
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      c.init<broadcast_m_rbs_to_be_modified_list_l>();
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      c.init<broadcast_m_rbs_to_be_released_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_request_ies_o::value_c");
  }
}
broadcast_context_mod_request_ies_o::value_c::value_c(const broadcast_context_mod_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_service_area:
      c.init(other.c.get<mbs_service_area_c>());
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.init(other.c.get<mbs_cu_to_du_rrc_info_s>());
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      c.init(other.c.get<broadcast_m_rbs_to_be_setup_mod_list_l>());
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      c.init(other.c.get<broadcast_m_rbs_to_be_modified_list_l>());
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      c.init(other.c.get<broadcast_m_rbs_to_be_released_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_request_ies_o::value_c");
  }
}
broadcast_context_mod_request_ies_o::value_c&
broadcast_context_mod_request_ies_o::value_c::operator=(const broadcast_context_mod_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_service_area:
      c.set(other.c.get<mbs_service_area_c>());
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.set(other.c.get<mbs_cu_to_du_rrc_info_s>());
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      c.set(other.c.get<broadcast_m_rbs_to_be_setup_mod_list_l>());
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      c.set(other.c.get<broadcast_m_rbs_to_be_modified_list_l>());
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      c.set(other.c.get<broadcast_m_rbs_to_be_released_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_mod_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_mod_request_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_service_area_c& broadcast_context_mod_request_ies_o::value_c::mbs_service_area()
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
mbs_cu_to_du_rrc_info_s& broadcast_context_mod_request_ies_o::value_c::mbs_cu_to_du_rrc_info()
{
  assert_choice_type(types::mbs_cu_to_du_rrc_info, type_, "Value");
  return c.get<mbs_cu_to_du_rrc_info_s>();
}
broadcast_m_rbs_to_be_setup_mod_list_l&
broadcast_context_mod_request_ies_o::value_c::broadcast_m_rbs_to_be_setup_mod_list()
{
  assert_choice_type(types::broadcast_m_rbs_to_be_setup_mod_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_setup_mod_list_l>();
}
broadcast_m_rbs_to_be_modified_list_l&
broadcast_context_mod_request_ies_o::value_c::broadcast_m_rbs_to_be_modified_list()
{
  assert_choice_type(types::broadcast_m_rbs_to_be_modified_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_modified_list_l>();
}
broadcast_m_rbs_to_be_released_list_l&
broadcast_context_mod_request_ies_o::value_c::broadcast_m_rbs_to_be_released_list()
{
  assert_choice_type(types::broadcast_m_rbs_to_be_released_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_released_list_l>();
}
const uint64_t& broadcast_context_mod_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_mod_request_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_service_area_c& broadcast_context_mod_request_ies_o::value_c::mbs_service_area() const
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
const mbs_cu_to_du_rrc_info_s& broadcast_context_mod_request_ies_o::value_c::mbs_cu_to_du_rrc_info() const
{
  assert_choice_type(types::mbs_cu_to_du_rrc_info, type_, "Value");
  return c.get<mbs_cu_to_du_rrc_info_s>();
}
const broadcast_m_rbs_to_be_setup_mod_list_l&
broadcast_context_mod_request_ies_o::value_c::broadcast_m_rbs_to_be_setup_mod_list() const
{
  assert_choice_type(types::broadcast_m_rbs_to_be_setup_mod_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_setup_mod_list_l>();
}
const broadcast_m_rbs_to_be_modified_list_l&
broadcast_context_mod_request_ies_o::value_c::broadcast_m_rbs_to_be_modified_list() const
{
  assert_choice_type(types::broadcast_m_rbs_to_be_modified_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_modified_list_l>();
}
const broadcast_m_rbs_to_be_released_list_l&
broadcast_context_mod_request_ies_o::value_c::broadcast_m_rbs_to_be_released_list() const
{
  assert_choice_type(types::broadcast_m_rbs_to_be_released_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_released_list_l>();
}
void broadcast_context_mod_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_service_area:
      j.write_fieldname("MBS-ServiceArea");
      c.get<mbs_service_area_c>().to_json(j);
      break;
    case types::mbs_cu_to_du_rrc_info:
      j.write_fieldname("MBS-CUtoDURRCInformation");
      c.get<mbs_cu_to_du_rrc_info_s>().to_json(j);
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      j.start_array("BroadcastMRBs-ToBeSetupMod-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      j.start_array("BroadcastMRBs-ToBeModified-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      j.start_array("BroadcastMRBs-ToBeReleased-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_mod_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().pack(bref));
      break;
    case types::mbs_cu_to_du_rrc_info:
      HANDLE_CODE(c.get<mbs_cu_to_du_rrc_info_s>().pack(bref));
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_to_be_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_to_be_modified_list_l>(), 1, 32, true));
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_to_be_released_list_l>(), 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_mod_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().unpack(bref));
      break;
    case types::mbs_cu_to_du_rrc_info:
      HANDLE_CODE(c.get<mbs_cu_to_du_rrc_info_s>().unpack(bref));
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_to_be_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_to_be_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_to_be_released_list_l>(), bref, 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

broadcast_context_mod_request_ies_container::broadcast_context_mod_request_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::reject),
  mbs_service_area(481, crit_e::reject),
  mbs_cu_to_du_rrc_info(454, crit_e::reject),
  broadcast_m_rbs_to_be_setup_mod_list(476, crit_e::reject),
  broadcast_m_rbs_to_be_modified_list(470, crit_e::reject),
  broadcast_m_rbs_to_be_released_list(472, crit_e::reject)
{
}
SRSASN_CODE broadcast_context_mod_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += mbs_service_area_present ? 1 : 0;
  nof_ies += broadcast_m_rbs_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += broadcast_m_rbs_to_be_modified_list_present ? 1 : 0;
  nof_ies += broadcast_m_rbs_to_be_released_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  if (mbs_service_area_present) {
    HANDLE_CODE(mbs_service_area.pack(bref));
  }
  HANDLE_CODE(mbs_cu_to_du_rrc_info.pack(bref));
  if (broadcast_m_rbs_to_be_setup_mod_list_present) {
    HANDLE_CODE(broadcast_m_rbs_to_be_setup_mod_list.pack(bref));
  }
  if (broadcast_m_rbs_to_be_modified_list_present) {
    HANDLE_CODE(broadcast_m_rbs_to_be_modified_list.pack(bref));
  }
  if (broadcast_m_rbs_to_be_released_list_present) {
    HANDLE_CODE(broadcast_m_rbs_to_be_released_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_mod_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 481: {
        mbs_service_area_present = true;
        mbs_service_area.id      = id;
        HANDLE_CODE(mbs_service_area.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_service_area.value.unpack(bref));
        break;
      }
      case 454: {
        nof_mandatory_ies--;
        mbs_cu_to_du_rrc_info.id = id;
        HANDLE_CODE(mbs_cu_to_du_rrc_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_cu_to_du_rrc_info.value.unpack(bref));
        break;
      }
      case 476: {
        broadcast_m_rbs_to_be_setup_mod_list_present = true;
        broadcast_m_rbs_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(broadcast_m_rbs_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_m_rbs_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 470: {
        broadcast_m_rbs_to_be_modified_list_present = true;
        broadcast_m_rbs_to_be_modified_list.id      = id;
        HANDLE_CODE(broadcast_m_rbs_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_m_rbs_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 472: {
        broadcast_m_rbs_to_be_released_list_present = true;
        broadcast_m_rbs_to_be_released_list.id      = id;
        HANDLE_CODE(broadcast_m_rbs_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_m_rbs_to_be_released_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_mod_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  if (mbs_service_area_present) {
    j.write_fieldname("");
    mbs_service_area.to_json(j);
  }
  j.write_fieldname("");
  mbs_cu_to_du_rrc_info.to_json(j);
  if (broadcast_m_rbs_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    broadcast_m_rbs_to_be_setup_mod_list.to_json(j);
  }
  if (broadcast_m_rbs_to_be_modified_list_present) {
    j.write_fieldname("");
    broadcast_m_rbs_to_be_modified_list.to_json(j);
  }
  if (broadcast_m_rbs_to_be_released_list_present) {
    j.write_fieldname("");
    broadcast_m_rbs_to_be_released_list.to_json(j);
  }
  j.end_obj();
}

// BroadcastMRBs-FailedToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_m_rbs_failed_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {459};
  return map_enum_number(names, 1, idx, "id");
}
bool broadcast_m_rbs_failed_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 459 == id;
}
crit_e broadcast_m_rbs_failed_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 459) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
broadcast_m_rbs_failed_to_be_modified_item_ies_o::value_c
broadcast_m_rbs_failed_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 459) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_m_rbs_failed_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 459) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void broadcast_m_rbs_failed_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BroadcastMRBs-FailedToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE broadcast_m_rbs_failed_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_m_rbs_failed_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// BroadcastMRBs-FailedToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_m_rbs_failed_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {463};
  return map_enum_number(names, 1, idx, "id");
}
bool broadcast_m_rbs_failed_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 463 == id;
}
crit_e broadcast_m_rbs_failed_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 463) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
broadcast_m_rbs_failed_to_be_setup_mod_item_ies_o::value_c
broadcast_m_rbs_failed_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 463) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_m_rbs_failed_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 463) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void broadcast_m_rbs_failed_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BroadcastMRBs-FailedToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE broadcast_m_rbs_failed_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_m_rbs_failed_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// BroadcastMRBs-Modified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_m_rbs_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {465};
  return map_enum_number(names, 1, idx, "id");
}
bool broadcast_m_rbs_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 465 == id;
}
crit_e broadcast_m_rbs_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 465) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
broadcast_m_rbs_modified_item_ies_o::value_c broadcast_m_rbs_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 465) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_m_rbs_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 465) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void broadcast_m_rbs_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BroadcastMRBs-Modified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE broadcast_m_rbs_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_m_rbs_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// BroadcastMRBs-SetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_m_rbs_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {469};
  return map_enum_number(names, 1, idx, "id");
}
bool broadcast_m_rbs_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 469 == id;
}
crit_e broadcast_m_rbs_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 469) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
broadcast_m_rbs_setup_mod_item_ies_o::value_c broadcast_m_rbs_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 469) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_m_rbs_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 469) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void broadcast_m_rbs_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BroadcastMRBs-SetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE broadcast_m_rbs_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_m_rbs_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<broadcast_m_rbs_failed_to_be_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<broadcast_m_rbs_failed_to_be_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<broadcast_m_rbs_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<broadcast_m_rbs_setup_mod_item_ies_o>;

// BroadcastContextModificationResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_mod_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 468, 462, 464, 458, 7};
  return map_enum_number(names, 7, idx, "id");
}
bool broadcast_context_mod_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 468, 462, 464, 458, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_mod_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 468:
      return crit_e::reject;
    case 462:
      return crit_e::ignore;
    case 464:
      return crit_e::reject;
    case 458:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_mod_resp_ies_o::value_c broadcast_context_mod_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 468:
      ret.set(value_c::types::broadcast_m_rbs_setup_mod_list);
      break;
    case 462:
      ret.set(value_c::types::broadcast_m_rbs_failed_to_be_setup_mod_list);
      break;
    case 464:
      ret.set(value_c::types::broadcast_m_rbs_modified_list);
      break;
    case 458:
      ret.set(value_c::types::broadcast_m_rbs_failed_to_be_modified_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_mod_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 468:
      return presence_e::optional;
    case 462:
      return presence_e::optional;
    case 464:
      return presence_e::optional;
    case 458:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_mod_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::broadcast_m_rbs_setup_mod_list:
      c.destroy<broadcast_m_rbs_setup_mod_list_l>();
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      c.destroy<broadcast_m_rbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::broadcast_m_rbs_modified_list:
      c.destroy<broadcast_m_rbs_modified_list_l>();
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      c.destroy<broadcast_m_rbs_failed_to_be_modified_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void broadcast_context_mod_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::broadcast_m_rbs_setup_mod_list:
      c.init<broadcast_m_rbs_setup_mod_list_l>();
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      c.init<broadcast_m_rbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::broadcast_m_rbs_modified_list:
      c.init<broadcast_m_rbs_modified_list_l>();
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      c.init<broadcast_m_rbs_failed_to_be_modified_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_resp_ies_o::value_c");
  }
}
broadcast_context_mod_resp_ies_o::value_c::value_c(const broadcast_context_mod_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::broadcast_m_rbs_setup_mod_list:
      c.init(other.c.get<broadcast_m_rbs_setup_mod_list_l>());
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      c.init(other.c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::broadcast_m_rbs_modified_list:
      c.init(other.c.get<broadcast_m_rbs_modified_list_l>());
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      c.init(other.c.get<broadcast_m_rbs_failed_to_be_modified_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_resp_ies_o::value_c");
  }
}
broadcast_context_mod_resp_ies_o::value_c&
broadcast_context_mod_resp_ies_o::value_c::operator=(const broadcast_context_mod_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::broadcast_m_rbs_setup_mod_list:
      c.set(other.c.get<broadcast_m_rbs_setup_mod_list_l>());
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      c.set(other.c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::broadcast_m_rbs_modified_list:
      c.set(other.c.get<broadcast_m_rbs_modified_list_l>());
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      c.set(other.c.get<broadcast_m_rbs_failed_to_be_modified_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_mod_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_mod_resp_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
broadcast_m_rbs_setup_mod_list_l& broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_setup_mod_list()
{
  assert_choice_type(types::broadcast_m_rbs_setup_mod_list, type_, "Value");
  return c.get<broadcast_m_rbs_setup_mod_list_l>();
}
broadcast_m_rbs_failed_to_be_setup_mod_list_l&
broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_failed_to_be_setup_mod_list()
{
  assert_choice_type(types::broadcast_m_rbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>();
}
broadcast_m_rbs_modified_list_l& broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_modified_list()
{
  assert_choice_type(types::broadcast_m_rbs_modified_list, type_, "Value");
  return c.get<broadcast_m_rbs_modified_list_l>();
}
broadcast_m_rbs_failed_to_be_modified_list_l&
broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_failed_to_be_modified_list()
{
  assert_choice_type(types::broadcast_m_rbs_failed_to_be_modified_list, type_, "Value");
  return c.get<broadcast_m_rbs_failed_to_be_modified_list_l>();
}
crit_diagnostics_s& broadcast_context_mod_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& broadcast_context_mod_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_mod_resp_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const broadcast_m_rbs_setup_mod_list_l&
broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_setup_mod_list() const
{
  assert_choice_type(types::broadcast_m_rbs_setup_mod_list, type_, "Value");
  return c.get<broadcast_m_rbs_setup_mod_list_l>();
}
const broadcast_m_rbs_failed_to_be_setup_mod_list_l&
broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_failed_to_be_setup_mod_list() const
{
  assert_choice_type(types::broadcast_m_rbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>();
}
const broadcast_m_rbs_modified_list_l& broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_modified_list() const
{
  assert_choice_type(types::broadcast_m_rbs_modified_list, type_, "Value");
  return c.get<broadcast_m_rbs_modified_list_l>();
}
const broadcast_m_rbs_failed_to_be_modified_list_l&
broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_failed_to_be_modified_list() const
{
  assert_choice_type(types::broadcast_m_rbs_failed_to_be_modified_list, type_, "Value");
  return c.get<broadcast_m_rbs_failed_to_be_modified_list_l>();
}
const crit_diagnostics_s& broadcast_context_mod_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void broadcast_context_mod_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::broadcast_m_rbs_setup_mod_list:
      j.start_array("BroadcastMRBs-SetupMod-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      j.start_array("BroadcastMRBs-FailedToBeSetupMod-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_m_rbs_modified_list:
      j.start_array("BroadcastMRBs-Modified-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      j.start_array("BroadcastMRBs-FailedToBeModified-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_failed_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_mod_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::broadcast_m_rbs_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::broadcast_m_rbs_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_modified_list_l>(), 1, 32, true));
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_failed_to_be_modified_list_l>(), 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_mod_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::broadcast_m_rbs_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_m_rbs_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_failed_to_be_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

broadcast_context_mod_resp_ies_container::broadcast_context_mod_resp_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::reject),
  broadcast_m_rbs_setup_mod_list(468, crit_e::reject),
  broadcast_m_rbs_failed_to_be_setup_mod_list(462, crit_e::ignore),
  broadcast_m_rbs_modified_list(464, crit_e::reject),
  broadcast_m_rbs_failed_to_be_modified_list(458, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE broadcast_context_mod_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += broadcast_m_rbs_setup_mod_list_present ? 1 : 0;
  nof_ies += broadcast_m_rbs_failed_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += broadcast_m_rbs_modified_list_present ? 1 : 0;
  nof_ies += broadcast_m_rbs_failed_to_be_modified_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  if (broadcast_m_rbs_setup_mod_list_present) {
    HANDLE_CODE(broadcast_m_rbs_setup_mod_list.pack(bref));
  }
  if (broadcast_m_rbs_failed_to_be_setup_mod_list_present) {
    HANDLE_CODE(broadcast_m_rbs_failed_to_be_setup_mod_list.pack(bref));
  }
  if (broadcast_m_rbs_modified_list_present) {
    HANDLE_CODE(broadcast_m_rbs_modified_list.pack(bref));
  }
  if (broadcast_m_rbs_failed_to_be_modified_list_present) {
    HANDLE_CODE(broadcast_m_rbs_failed_to_be_modified_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_mod_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 468: {
        broadcast_m_rbs_setup_mod_list_present = true;
        broadcast_m_rbs_setup_mod_list.id      = id;
        HANDLE_CODE(broadcast_m_rbs_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_m_rbs_setup_mod_list.value.unpack(bref));
        break;
      }
      case 462: {
        broadcast_m_rbs_failed_to_be_setup_mod_list_present = true;
        broadcast_m_rbs_failed_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(broadcast_m_rbs_failed_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_m_rbs_failed_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 464: {
        broadcast_m_rbs_modified_list_present = true;
        broadcast_m_rbs_modified_list.id      = id;
        HANDLE_CODE(broadcast_m_rbs_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_m_rbs_modified_list.value.unpack(bref));
        break;
      }
      case 458: {
        broadcast_m_rbs_failed_to_be_modified_list_present = true;
        broadcast_m_rbs_failed_to_be_modified_list.id      = id;
        HANDLE_CODE(broadcast_m_rbs_failed_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_m_rbs_failed_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_mod_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  if (broadcast_m_rbs_setup_mod_list_present) {
    j.write_fieldname("");
    broadcast_m_rbs_setup_mod_list.to_json(j);
  }
  if (broadcast_m_rbs_failed_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    broadcast_m_rbs_failed_to_be_setup_mod_list.to_json(j);
  }
  if (broadcast_m_rbs_modified_list_present) {
    j.write_fieldname("");
    broadcast_m_rbs_modified_list.to_json(j);
  }
  if (broadcast_m_rbs_failed_to_be_modified_list_present) {
    j.write_fieldname("");
    broadcast_m_rbs_failed_to_be_modified_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// BroadcastContextReleaseCommandIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_release_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0};
  return map_enum_number(names, 3, idx, "id");
}
bool broadcast_context_release_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_release_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_release_cmd_ies_o::value_c broadcast_context_release_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_release_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_release_cmd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void broadcast_context_release_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_cmd_ies_o::value_c");
  }
}
broadcast_context_release_cmd_ies_o::value_c::value_c(const broadcast_context_release_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_cmd_ies_o::value_c");
  }
}
broadcast_context_release_cmd_ies_o::value_c&
broadcast_context_release_cmd_ies_o::value_c::operator=(const broadcast_context_release_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_cmd_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_release_cmd_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_release_cmd_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& broadcast_context_release_cmd_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& broadcast_context_release_cmd_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_release_cmd_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& broadcast_context_release_cmd_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void broadcast_context_release_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_release_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_release_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

broadcast_context_release_cmd_ies_container::broadcast_context_release_cmd_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject), gnb_du_mbs_f1ap_id(452, crit_e::reject), cause(0, crit_e::ignore)
{
}
SRSASN_CODE broadcast_context_release_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_release_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_release_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  j.end_obj();
}

// BroadcastContextReleaseCompleteIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_release_complete_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool broadcast_context_release_complete_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_release_complete_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_release_complete_ies_o::value_c
broadcast_context_release_complete_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_release_complete_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_release_complete_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void broadcast_context_release_complete_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_complete_ies_o::value_c");
  }
}
broadcast_context_release_complete_ies_o::value_c::value_c(
    const broadcast_context_release_complete_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_complete_ies_o::value_c");
  }
}
broadcast_context_release_complete_ies_o::value_c& broadcast_context_release_complete_ies_o::value_c::operator=(
    const broadcast_context_release_complete_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_complete_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_release_complete_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_release_complete_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
crit_diagnostics_s& broadcast_context_release_complete_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& broadcast_context_release_complete_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_release_complete_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const crit_diagnostics_s& broadcast_context_release_complete_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void broadcast_context_release_complete_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_complete_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_release_complete_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_complete_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_release_complete_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_complete_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

broadcast_context_release_complete_ies_container::broadcast_context_release_complete_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject), gnb_du_mbs_f1ap_id(452, crit_e::reject), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE broadcast_context_release_complete_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_release_complete_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_release_complete_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// BroadcastContextReleaseRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_release_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0};
  return map_enum_number(names, 3, idx, "id");
}
bool broadcast_context_release_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_release_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_release_request_ies_o::value_c broadcast_context_release_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_release_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_release_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void broadcast_context_release_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_request_ies_o::value_c");
  }
}
broadcast_context_release_request_ies_o::value_c::value_c(const broadcast_context_release_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_request_ies_o::value_c");
  }
}
broadcast_context_release_request_ies_o::value_c& broadcast_context_release_request_ies_o::value_c::operator=(
    const broadcast_context_release_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_release_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_release_request_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& broadcast_context_release_request_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& broadcast_context_release_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_release_request_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& broadcast_context_release_request_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void broadcast_context_release_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_release_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_release_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

broadcast_context_release_request_ies_container::broadcast_context_release_request_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject), gnb_du_mbs_f1ap_id(452, crit_e::reject), cause(0, crit_e::ignore)
{
}
SRSASN_CODE broadcast_context_release_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_release_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_release_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  j.end_obj();
}

// BroadcastContextSetupFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_setup_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool broadcast_context_setup_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_setup_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_setup_fail_ies_o::value_c broadcast_context_setup_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_setup_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::optional;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_setup_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void broadcast_context_setup_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_fail_ies_o::value_c");
  }
}
broadcast_context_setup_fail_ies_o::value_c::value_c(const broadcast_context_setup_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_fail_ies_o::value_c");
  }
}
broadcast_context_setup_fail_ies_o::value_c&
broadcast_context_setup_fail_ies_o::value_c::operator=(const broadcast_context_setup_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_setup_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_setup_fail_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& broadcast_context_setup_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& broadcast_context_setup_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& broadcast_context_setup_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_setup_fail_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& broadcast_context_setup_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& broadcast_context_setup_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void broadcast_context_setup_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_setup_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_setup_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

broadcast_context_setup_fail_ies_container::broadcast_context_setup_fail_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::ignore),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE broadcast_context_setup_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += gnb_du_mbs_f1ap_id_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  if (gnb_du_mbs_f1ap_id_present) {
    HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  }
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_setup_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        gnb_du_mbs_f1ap_id_present = true;
        gnb_du_mbs_f1ap_id.id      = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_setup_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  if (gnb_du_mbs_f1ap_id_present) {
    j.write_fieldname("");
    gnb_du_mbs_f1ap_id.to_json(j);
  }
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// BroadcastMRBs-ToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_m_rbs_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {475};
  return map_enum_number(names, 1, idx, "id");
}
bool broadcast_m_rbs_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 475 == id;
}
crit_e broadcast_m_rbs_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 475) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
broadcast_m_rbs_to_be_setup_item_ies_o::value_c broadcast_m_rbs_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 475) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_m_rbs_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 475) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void broadcast_m_rbs_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BroadcastMRBs-ToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE broadcast_m_rbs_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_m_rbs_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<broadcast_m_rbs_to_be_setup_item_ies_o>;

// BroadcastContextSetupRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_setup_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 455, 481, 454, 456, 474};
  return map_enum_number(names, 6, idx, "id");
}
bool broadcast_context_setup_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 455, 481, 454, 456, 474};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_setup_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 455:
      return crit_e::reject;
    case 481:
      return crit_e::reject;
    case 454:
      return crit_e::reject;
    case 456:
      return crit_e::reject;
    case 474:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_setup_request_ies_o::value_c broadcast_context_setup_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 455:
      ret.set(value_c::types::mbs_session_id);
      break;
    case 481:
      ret.set(value_c::types::mbs_service_area);
      break;
    case 454:
      ret.set(value_c::types::mbs_cu_to_du_rrc_info);
      break;
    case 456:
      ret.set(value_c::types::snssai);
      break;
    case 474:
      ret.set(value_c::types::broadcast_m_rbs_to_be_setup_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_setup_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 455:
      return presence_e::mandatory;
    case 481:
      return presence_e::optional;
    case 454:
      return presence_e::mandatory;
    case 456:
      return presence_e::mandatory;
    case 474:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_setup_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_session_id:
      c.destroy<mbs_session_id_s>();
      break;
    case types::mbs_service_area:
      c.destroy<mbs_service_area_c>();
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.destroy<mbs_cu_to_du_rrc_info_s>();
      break;
    case types::snssai:
      c.destroy<snssai_s>();
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      c.destroy<broadcast_m_rbs_to_be_setup_list_l>();
      break;
    default:
      break;
  }
}
void broadcast_context_setup_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::mbs_session_id:
      c.init<mbs_session_id_s>();
      break;
    case types::mbs_service_area:
      c.init<mbs_service_area_c>();
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.init<mbs_cu_to_du_rrc_info_s>();
      break;
    case types::snssai:
      c.init<snssai_s>();
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      c.init<broadcast_m_rbs_to_be_setup_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_request_ies_o::value_c");
  }
}
broadcast_context_setup_request_ies_o::value_c::value_c(const broadcast_context_setup_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_session_id:
      c.init(other.c.get<mbs_session_id_s>());
      break;
    case types::mbs_service_area:
      c.init(other.c.get<mbs_service_area_c>());
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.init(other.c.get<mbs_cu_to_du_rrc_info_s>());
      break;
    case types::snssai:
      c.init(other.c.get<snssai_s>());
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      c.init(other.c.get<broadcast_m_rbs_to_be_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_request_ies_o::value_c");
  }
}
broadcast_context_setup_request_ies_o::value_c&
broadcast_context_setup_request_ies_o::value_c::operator=(const broadcast_context_setup_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_session_id:
      c.set(other.c.get<mbs_session_id_s>());
      break;
    case types::mbs_service_area:
      c.set(other.c.get<mbs_service_area_c>());
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.set(other.c.get<mbs_cu_to_du_rrc_info_s>());
      break;
    case types::snssai:
      c.set(other.c.get<snssai_s>());
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      c.set(other.c.get<broadcast_m_rbs_to_be_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_setup_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_session_id_s& broadcast_context_setup_request_ies_o::value_c::mbs_session_id()
{
  assert_choice_type(types::mbs_session_id, type_, "Value");
  return c.get<mbs_session_id_s>();
}
mbs_service_area_c& broadcast_context_setup_request_ies_o::value_c::mbs_service_area()
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
mbs_cu_to_du_rrc_info_s& broadcast_context_setup_request_ies_o::value_c::mbs_cu_to_du_rrc_info()
{
  assert_choice_type(types::mbs_cu_to_du_rrc_info, type_, "Value");
  return c.get<mbs_cu_to_du_rrc_info_s>();
}
snssai_s& broadcast_context_setup_request_ies_o::value_c::snssai()
{
  assert_choice_type(types::snssai, type_, "Value");
  return c.get<snssai_s>();
}
broadcast_m_rbs_to_be_setup_list_l& broadcast_context_setup_request_ies_o::value_c::broadcast_m_rbs_to_be_setup_list()
{
  assert_choice_type(types::broadcast_m_rbs_to_be_setup_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_setup_list_l>();
}
const uint64_t& broadcast_context_setup_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_session_id_s& broadcast_context_setup_request_ies_o::value_c::mbs_session_id() const
{
  assert_choice_type(types::mbs_session_id, type_, "Value");
  return c.get<mbs_session_id_s>();
}
const mbs_service_area_c& broadcast_context_setup_request_ies_o::value_c::mbs_service_area() const
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
const mbs_cu_to_du_rrc_info_s& broadcast_context_setup_request_ies_o::value_c::mbs_cu_to_du_rrc_info() const
{
  assert_choice_type(types::mbs_cu_to_du_rrc_info, type_, "Value");
  return c.get<mbs_cu_to_du_rrc_info_s>();
}
const snssai_s& broadcast_context_setup_request_ies_o::value_c::snssai() const
{
  assert_choice_type(types::snssai, type_, "Value");
  return c.get<snssai_s>();
}
const broadcast_m_rbs_to_be_setup_list_l&
broadcast_context_setup_request_ies_o::value_c::broadcast_m_rbs_to_be_setup_list() const
{
  assert_choice_type(types::broadcast_m_rbs_to_be_setup_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_setup_list_l>();
}
void broadcast_context_setup_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_session_id:
      j.write_fieldname("MBS-Session-ID");
      c.get<mbs_session_id_s>().to_json(j);
      break;
    case types::mbs_service_area:
      j.write_fieldname("MBS-ServiceArea");
      c.get<mbs_service_area_c>().to_json(j);
      break;
    case types::mbs_cu_to_du_rrc_info:
      j.write_fieldname("MBS-CUtoDURRCInformation");
      c.get<mbs_cu_to_du_rrc_info_s>().to_json(j);
      break;
    case types::snssai:
      j.write_fieldname("SNSSAI");
      c.get<snssai_s>().to_json(j);
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      j.start_array("BroadcastMRBs-ToBeSetup-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_setup_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_session_id:
      HANDLE_CODE(c.get<mbs_session_id_s>().pack(bref));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().pack(bref));
      break;
    case types::mbs_cu_to_du_rrc_info:
      HANDLE_CODE(c.get<mbs_cu_to_du_rrc_info_s>().pack(bref));
      break;
    case types::snssai:
      HANDLE_CODE(c.get<snssai_s>().pack(bref));
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_to_be_setup_list_l>(), 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_setup_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_session_id:
      HANDLE_CODE(c.get<mbs_session_id_s>().unpack(bref));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().unpack(bref));
      break;
    case types::mbs_cu_to_du_rrc_info:
      HANDLE_CODE(c.get<mbs_cu_to_du_rrc_info_s>().unpack(bref));
      break;
    case types::snssai:
      HANDLE_CODE(c.get<snssai_s>().unpack(bref));
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

broadcast_context_setup_request_ies_container::broadcast_context_setup_request_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  mbs_session_id(455, crit_e::reject),
  mbs_service_area(481, crit_e::reject),
  mbs_cu_to_du_rrc_info(454, crit_e::reject),
  snssai(456, crit_e::reject),
  broadcast_m_rbs_to_be_setup_list(474, crit_e::reject)
{
}
SRSASN_CODE broadcast_context_setup_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  nof_ies += mbs_service_area_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(mbs_session_id.pack(bref));
  if (mbs_service_area_present) {
    HANDLE_CODE(mbs_service_area.pack(bref));
  }
  HANDLE_CODE(mbs_cu_to_du_rrc_info.pack(bref));
  HANDLE_CODE(snssai.pack(bref));
  HANDLE_CODE(broadcast_m_rbs_to_be_setup_list.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_setup_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 455: {
        nof_mandatory_ies--;
        mbs_session_id.id = id;
        HANDLE_CODE(mbs_session_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_session_id.value.unpack(bref));
        break;
      }
      case 481: {
        mbs_service_area_present = true;
        mbs_service_area.id      = id;
        HANDLE_CODE(mbs_service_area.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_service_area.value.unpack(bref));
        break;
      }
      case 454: {
        nof_mandatory_ies--;
        mbs_cu_to_du_rrc_info.id = id;
        HANDLE_CODE(mbs_cu_to_du_rrc_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_cu_to_du_rrc_info.value.unpack(bref));
        break;
      }
      case 456: {
        nof_mandatory_ies--;
        snssai.id = id;
        HANDLE_CODE(snssai.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(snssai.value.unpack(bref));
        break;
      }
      case 474: {
        nof_mandatory_ies--;
        broadcast_m_rbs_to_be_setup_list.id = id;
        HANDLE_CODE(broadcast_m_rbs_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_m_rbs_to_be_setup_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_setup_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  mbs_session_id.to_json(j);
  if (mbs_service_area_present) {
    j.write_fieldname("");
    mbs_service_area.to_json(j);
  }
  j.write_fieldname("");
  mbs_cu_to_du_rrc_info.to_json(j);
  j.write_fieldname("");
  snssai.to_json(j);
  j.write_fieldname("");
  broadcast_m_rbs_to_be_setup_list.to_json(j);
  j.end_obj();
}

// BroadcastMRBs-FailedToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_m_rbs_failed_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {461};
  return map_enum_number(names, 1, idx, "id");
}
bool broadcast_m_rbs_failed_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 461 == id;
}
crit_e broadcast_m_rbs_failed_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 461) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
broadcast_m_rbs_failed_to_be_setup_item_ies_o::value_c
broadcast_m_rbs_failed_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 461) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_m_rbs_failed_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 461) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void broadcast_m_rbs_failed_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BroadcastMRBs-FailedToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE broadcast_m_rbs_failed_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_m_rbs_failed_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// BroadcastMRBs-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_m_rbs_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {467};
  return map_enum_number(names, 1, idx, "id");
}
bool broadcast_m_rbs_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 467 == id;
}
crit_e broadcast_m_rbs_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 467) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
broadcast_m_rbs_setup_item_ies_o::value_c broadcast_m_rbs_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 467) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_m_rbs_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 467) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void broadcast_m_rbs_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("BroadcastMRBs-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE broadcast_m_rbs_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_m_rbs_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<broadcast_m_rbs_failed_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<broadcast_m_rbs_setup_item_ies_o>;

// BroadcastContextSetupResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_setup_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 466, 460, 646, 7};
  return map_enum_number(names, 6, idx, "id");
}
bool broadcast_context_setup_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 466, 460, 646, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_setup_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 466:
      return crit_e::reject;
    case 460:
      return crit_e::ignore;
    case 646:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_setup_resp_ies_o::value_c broadcast_context_setup_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 466:
      ret.set(value_c::types::broadcast_m_rbs_setup_list);
      break;
    case 460:
      ret.set(value_c::types::broadcast_m_rbs_failed_to_be_setup_list);
      break;
    case 646:
      ret.set(value_c::types::broadcast_area_scope);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_setup_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 466:
      return presence_e::mandatory;
    case 460:
      return presence_e::optional;
    case 646:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_setup_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::broadcast_m_rbs_setup_list:
      c.destroy<broadcast_m_rbs_setup_list_l>();
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      c.destroy<broadcast_m_rbs_failed_to_be_setup_list_l>();
      break;
    case types::broadcast_area_scope:
      c.destroy<broadcast_area_scope_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void broadcast_context_setup_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::broadcast_m_rbs_setup_list:
      c.init<broadcast_m_rbs_setup_list_l>();
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      c.init<broadcast_m_rbs_failed_to_be_setup_list_l>();
      break;
    case types::broadcast_area_scope:
      c.init<broadcast_area_scope_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_resp_ies_o::value_c");
  }
}
broadcast_context_setup_resp_ies_o::value_c::value_c(const broadcast_context_setup_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::broadcast_m_rbs_setup_list:
      c.init(other.c.get<broadcast_m_rbs_setup_list_l>());
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      c.init(other.c.get<broadcast_m_rbs_failed_to_be_setup_list_l>());
      break;
    case types::broadcast_area_scope:
      c.init(other.c.get<broadcast_area_scope_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_resp_ies_o::value_c");
  }
}
broadcast_context_setup_resp_ies_o::value_c&
broadcast_context_setup_resp_ies_o::value_c::operator=(const broadcast_context_setup_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::broadcast_m_rbs_setup_list:
      c.set(other.c.get<broadcast_m_rbs_setup_list_l>());
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      c.set(other.c.get<broadcast_m_rbs_failed_to_be_setup_list_l>());
      break;
    case types::broadcast_area_scope:
      c.set(other.c.get<broadcast_area_scope_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_setup_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_setup_resp_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
broadcast_m_rbs_setup_list_l& broadcast_context_setup_resp_ies_o::value_c::broadcast_m_rbs_setup_list()
{
  assert_choice_type(types::broadcast_m_rbs_setup_list, type_, "Value");
  return c.get<broadcast_m_rbs_setup_list_l>();
}
broadcast_m_rbs_failed_to_be_setup_list_l&
broadcast_context_setup_resp_ies_o::value_c::broadcast_m_rbs_failed_to_be_setup_list()
{
  assert_choice_type(types::broadcast_m_rbs_failed_to_be_setup_list, type_, "Value");
  return c.get<broadcast_m_rbs_failed_to_be_setup_list_l>();
}
broadcast_area_scope_c& broadcast_context_setup_resp_ies_o::value_c::broadcast_area_scope()
{
  assert_choice_type(types::broadcast_area_scope, type_, "Value");
  return c.get<broadcast_area_scope_c>();
}
crit_diagnostics_s& broadcast_context_setup_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& broadcast_context_setup_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_setup_resp_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const broadcast_m_rbs_setup_list_l& broadcast_context_setup_resp_ies_o::value_c::broadcast_m_rbs_setup_list() const
{
  assert_choice_type(types::broadcast_m_rbs_setup_list, type_, "Value");
  return c.get<broadcast_m_rbs_setup_list_l>();
}
const broadcast_m_rbs_failed_to_be_setup_list_l&
broadcast_context_setup_resp_ies_o::value_c::broadcast_m_rbs_failed_to_be_setup_list() const
{
  assert_choice_type(types::broadcast_m_rbs_failed_to_be_setup_list, type_, "Value");
  return c.get<broadcast_m_rbs_failed_to_be_setup_list_l>();
}
const broadcast_area_scope_c& broadcast_context_setup_resp_ies_o::value_c::broadcast_area_scope() const
{
  assert_choice_type(types::broadcast_area_scope, type_, "Value");
  return c.get<broadcast_area_scope_c>();
}
const crit_diagnostics_s& broadcast_context_setup_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void broadcast_context_setup_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::broadcast_m_rbs_setup_list:
      j.start_array("BroadcastMRBs-Setup-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      j.start_array("BroadcastMRBs-FailedToBeSetup-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_area_scope:
      j.write_fieldname("BroadcastAreaScope");
      c.get<broadcast_area_scope_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_setup_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::broadcast_m_rbs_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_setup_list_l>(), 1, 32, true));
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_failed_to_be_setup_list_l>(), 1, 32, true));
      break;
    case types::broadcast_area_scope:
      HANDLE_CODE(c.get<broadcast_area_scope_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_setup_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::broadcast_m_rbs_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_failed_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_area_scope:
      HANDLE_CODE(c.get<broadcast_area_scope_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

broadcast_context_setup_resp_ies_container::broadcast_context_setup_resp_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::reject),
  broadcast_m_rbs_setup_list(466, crit_e::reject),
  broadcast_m_rbs_failed_to_be_setup_list(460, crit_e::ignore),
  broadcast_area_scope(646, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE broadcast_context_setup_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += broadcast_m_rbs_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += broadcast_area_scope_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(broadcast_m_rbs_setup_list.pack(bref));
  if (broadcast_m_rbs_failed_to_be_setup_list_present) {
    HANDLE_CODE(broadcast_m_rbs_failed_to_be_setup_list.pack(bref));
  }
  if (broadcast_area_scope_present) {
    HANDLE_CODE(broadcast_area_scope.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_setup_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 466: {
        nof_mandatory_ies--;
        broadcast_m_rbs_setup_list.id = id;
        HANDLE_CODE(broadcast_m_rbs_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_m_rbs_setup_list.value.unpack(bref));
        break;
      }
      case 460: {
        broadcast_m_rbs_failed_to_be_setup_list_present = true;
        broadcast_m_rbs_failed_to_be_setup_list.id      = id;
        HANDLE_CODE(broadcast_m_rbs_failed_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_m_rbs_failed_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 646: {
        broadcast_area_scope_present = true;
        broadcast_area_scope.id      = id;
        HANDLE_CODE(broadcast_area_scope.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_area_scope.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_setup_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  broadcast_m_rbs_setup_list.to_json(j);
  if (broadcast_m_rbs_failed_to_be_setup_list_present) {
    j.write_fieldname("");
    broadcast_m_rbs_failed_to_be_setup_list.to_json(j);
  }
  if (broadcast_area_scope_present) {
    j.write_fieldname("");
    broadcast_area_scope.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// CUDURadioInformationTransferIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cu_du_radio_info_transfer_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 250};
  return map_enum_number(names, 2, idx, "id");
}
bool cu_du_radio_info_transfer_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 250};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e cu_du_radio_info_transfer_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 250:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
cu_du_radio_info_transfer_ies_o::value_c cu_du_radio_info_transfer_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 250:
      ret.set(value_c::types::cu_du_radio_info_type);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cu_du_radio_info_transfer_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 250:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void cu_du_radio_info_transfer_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cu_du_radio_info_type:
      c.destroy<cu_du_radio_info_type_c>();
      break;
    default:
      break;
  }
}
void cu_du_radio_info_transfer_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cu_du_radio_info_type:
      c.init<cu_du_radio_info_type_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cu_du_radio_info_transfer_ies_o::value_c");
  }
}
cu_du_radio_info_transfer_ies_o::value_c::value_c(const cu_du_radio_info_transfer_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cu_du_radio_info_type:
      c.init(other.c.get<cu_du_radio_info_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cu_du_radio_info_transfer_ies_o::value_c");
  }
}
cu_du_radio_info_transfer_ies_o::value_c&
cu_du_radio_info_transfer_ies_o::value_c::operator=(const cu_du_radio_info_transfer_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cu_du_radio_info_type:
      c.set(other.c.get<cu_du_radio_info_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cu_du_radio_info_transfer_ies_o::value_c");
  }

  return *this;
}
uint16_t& cu_du_radio_info_transfer_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cu_du_radio_info_type_c& cu_du_radio_info_transfer_ies_o::value_c::cu_du_radio_info_type()
{
  assert_choice_type(types::cu_du_radio_info_type, type_, "Value");
  return c.get<cu_du_radio_info_type_c>();
}
const uint16_t& cu_du_radio_info_transfer_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cu_du_radio_info_type_c& cu_du_radio_info_transfer_ies_o::value_c::cu_du_radio_info_type() const
{
  assert_choice_type(types::cu_du_radio_info_type, type_, "Value");
  return c.get<cu_du_radio_info_type_c>();
}
void cu_du_radio_info_transfer_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cu_du_radio_info_type:
      j.write_fieldname("CUDURadioInformationType");
      c.get<cu_du_radio_info_type_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "cu_du_radio_info_transfer_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE cu_du_radio_info_transfer_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cu_du_radio_info_type:
      HANDLE_CODE(c.get<cu_du_radio_info_type_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cu_du_radio_info_transfer_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cu_du_radio_info_transfer_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cu_du_radio_info_type:
      HANDLE_CODE(c.get<cu_du_radio_info_type_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cu_du_radio_info_transfer_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

cu_du_radio_info_transfer_ies_container::cu_du_radio_info_transfer_ies_container() :
  transaction_id(78, crit_e::reject), cu_du_radio_info_type(250, crit_e::ignore)
{
}
SRSASN_CODE cu_du_radio_info_transfer_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cu_du_radio_info_type.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cu_du_radio_info_transfer_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 250: {
        nof_mandatory_ies--;
        cu_du_radio_info_type.id = id;
        HANDLE_CODE(cu_du_radio_info_type.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cu_du_radio_info_type.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void cu_du_radio_info_transfer_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cu_du_radio_info_type.to_json(j);
  j.end_obj();
}

// Candidate-SpCell-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t candidate_sp_cell_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {91};
  return map_enum_number(names, 1, idx, "id");
}
bool candidate_sp_cell_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 91 == id;
}
crit_e candidate_sp_cell_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 91) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
candidate_sp_cell_item_ies_o::value_c candidate_sp_cell_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 91) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e candidate_sp_cell_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 91) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void candidate_sp_cell_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Candidate-SpCell-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE candidate_sp_cell_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE candidate_sp_cell_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<candidate_sp_cell_item_ies_o>;

// CellTrafficTraceIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cell_traffic_trace_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 243, 378, 379, 380};
  return map_enum_number(names, 6, idx, "id");
}
bool cell_traffic_trace_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 243, 378, 379, 380};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e cell_traffic_trace_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 243:
      return crit_e::ignore;
    case 378:
      return crit_e::ignore;
    case 379:
      return crit_e::ignore;
    case 380:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
cell_traffic_trace_ies_o::value_c cell_traffic_trace_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 243:
      ret.set(value_c::types::trace_id);
      break;
    case 378:
      ret.set(value_c::types::trace_collection_entity_ip_address);
      break;
    case 379:
      ret.set(value_c::types::privacy_ind);
      break;
    case 380:
      ret.set(value_c::types::trace_collection_entity_uri);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cell_traffic_trace_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 243:
      return presence_e::mandatory;
    case 378:
      return presence_e::mandatory;
    case 379:
      return presence_e::optional;
    case 380:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void cell_traffic_trace_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trace_id:
      c.destroy<fixed_octstring<8, true>>();
      break;
    case types::trace_collection_entity_ip_address:
      c.destroy<bounded_bitstring<1, 160, true, true>>();
      break;
    case types::trace_collection_entity_uri:
      c.destroy<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>();
      break;
    default:
      break;
  }
}
void cell_traffic_trace_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::trace_id:
      c.init<fixed_octstring<8, true>>();
      break;
    case types::trace_collection_entity_ip_address:
      c.init<bounded_bitstring<1, 160, true, true>>();
      break;
    case types::privacy_ind:
      break;
    case types::trace_collection_entity_uri:
      c.init<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cell_traffic_trace_ies_o::value_c");
  }
}
cell_traffic_trace_ies_o::value_c::value_c(const cell_traffic_trace_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::trace_id:
      c.init(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::trace_collection_entity_ip_address:
      c.init(other.c.get<bounded_bitstring<1, 160, true, true>>());
      break;
    case types::privacy_ind:
      c.init(other.c.get<privacy_ind_e>());
      break;
    case types::trace_collection_entity_uri:
      c.init(other.c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cell_traffic_trace_ies_o::value_c");
  }
}
cell_traffic_trace_ies_o::value_c&
cell_traffic_trace_ies_o::value_c::operator=(const cell_traffic_trace_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::trace_id:
      c.set(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::trace_collection_entity_ip_address:
      c.set(other.c.get<bounded_bitstring<1, 160, true, true>>());
      break;
    case types::privacy_ind:
      c.set(other.c.get<privacy_ind_e>());
      break;
    case types::trace_collection_entity_uri:
      c.set(other.c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cell_traffic_trace_ies_o::value_c");
  }

  return *this;
}
uint64_t& cell_traffic_trace_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& cell_traffic_trace_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
fixed_octstring<8, true>& cell_traffic_trace_ies_o::value_c::trace_id()
{
  assert_choice_type(types::trace_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
bounded_bitstring<1, 160, true, true>& cell_traffic_trace_ies_o::value_c::trace_collection_entity_ip_address()
{
  assert_choice_type(types::trace_collection_entity_ip_address, type_, "Value");
  return c.get<bounded_bitstring<1, 160, true, true>>();
}
privacy_ind_e& cell_traffic_trace_ies_o::value_c::privacy_ind()
{
  assert_choice_type(types::privacy_ind, type_, "Value");
  return c.get<privacy_ind_e>();
}
visible_string<0, MAX_ASN_STRING_LENGTH, false, true>& cell_traffic_trace_ies_o::value_c::trace_collection_entity_uri()
{
  assert_choice_type(types::trace_collection_entity_uri, type_, "Value");
  return c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>();
}
const uint64_t& cell_traffic_trace_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& cell_traffic_trace_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const fixed_octstring<8, true>& cell_traffic_trace_ies_o::value_c::trace_id() const
{
  assert_choice_type(types::trace_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
const bounded_bitstring<1, 160, true, true>&
cell_traffic_trace_ies_o::value_c::trace_collection_entity_ip_address() const
{
  assert_choice_type(types::trace_collection_entity_ip_address, type_, "Value");
  return c.get<bounded_bitstring<1, 160, true, true>>();
}
const privacy_ind_e& cell_traffic_trace_ies_o::value_c::privacy_ind() const
{
  assert_choice_type(types::privacy_ind, type_, "Value");
  return c.get<privacy_ind_e>();
}
const visible_string<0, MAX_ASN_STRING_LENGTH, false, true>&
cell_traffic_trace_ies_o::value_c::trace_collection_entity_uri() const
{
  assert_choice_type(types::trace_collection_entity_uri, type_, "Value");
  return c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>();
}
void cell_traffic_trace_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::trace_id:
      j.write_str("OCTET STRING", c.get<fixed_octstring<8, true>>().to_string());
      break;
    case types::trace_collection_entity_ip_address:
      j.write_str("BIT STRING", c.get<bounded_bitstring<1, 160, true, true>>().to_string());
      break;
    case types::privacy_ind:
      j.write_str("PrivacyIndicator", c.get<privacy_ind_e>().to_string());
      break;
    case types::trace_collection_entity_uri:
      j.write_str("VisibleString", c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "cell_traffic_trace_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE cell_traffic_trace_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trace_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().pack(bref)));
      break;
    case types::trace_collection_entity_ip_address:
      HANDLE_CODE((c.get<bounded_bitstring<1, 160, true, true>>().pack(bref)));
      break;
    case types::privacy_ind:
      HANDLE_CODE(c.get<privacy_ind_e>().pack(bref));
      break;
    case types::trace_collection_entity_uri:
      HANDLE_CODE((c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "cell_traffic_trace_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cell_traffic_trace_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trace_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().unpack(bref)));
      break;
    case types::trace_collection_entity_ip_address:
      HANDLE_CODE((c.get<bounded_bitstring<1, 160, true, true>>().unpack(bref)));
      break;
    case types::privacy_ind:
      HANDLE_CODE(c.get<privacy_ind_e>().unpack(bref));
      break;
    case types::trace_collection_entity_uri:
      HANDLE_CODE((c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "cell_traffic_trace_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

cell_traffic_trace_ies_container::cell_traffic_trace_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  trace_id(243, crit_e::ignore),
  trace_collection_entity_ip_address(378, crit_e::ignore),
  privacy_ind(379, crit_e::ignore),
  trace_collection_entity_uri(380, crit_e::ignore)
{
}
SRSASN_CODE cell_traffic_trace_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += privacy_ind_present ? 1 : 0;
  nof_ies += trace_collection_entity_uri_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(trace_id.pack(bref));
  HANDLE_CODE(trace_collection_entity_ip_address.pack(bref));
  if (privacy_ind_present) {
    HANDLE_CODE(privacy_ind.pack(bref));
  }
  if (trace_collection_entity_uri_present) {
    HANDLE_CODE(trace_collection_entity_uri.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cell_traffic_trace_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 243: {
        nof_mandatory_ies--;
        trace_id.id = id;
        HANDLE_CODE(trace_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trace_id.value.unpack(bref));
        break;
      }
      case 378: {
        nof_mandatory_ies--;
        trace_collection_entity_ip_address.id = id;
        HANDLE_CODE(trace_collection_entity_ip_address.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trace_collection_entity_ip_address.value.unpack(bref));
        break;
      }
      case 379: {
        privacy_ind_present = true;
        privacy_ind.id      = id;
        HANDLE_CODE(privacy_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(privacy_ind.value.unpack(bref));
        break;
      }
      case 380: {
        trace_collection_entity_uri_present = true;
        trace_collection_entity_uri.id      = id;
        HANDLE_CODE(trace_collection_entity_uri.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trace_collection_entity_uri.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void cell_traffic_trace_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  trace_id.to_json(j);
  j.write_fieldname("");
  trace_collection_entity_ip_address.to_json(j);
  if (privacy_ind_present) {
    j.write_fieldname("");
    privacy_ind.to_json(j);
  }
  if (trace_collection_entity_uri_present) {
    j.write_fieldname("");
    trace_collection_entity_uri.to_json(j);
  }
  j.end_obj();
}

// Cells-Broadcast-Cancelled-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_broadcast_cancelled_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {151};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_broadcast_cancelled_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 151 == id;
}
crit_e cells_broadcast_cancelled_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 151) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_broadcast_cancelled_list_item_ies_o::value_c
cells_broadcast_cancelled_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 151) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_broadcast_cancelled_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 151) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_broadcast_cancelled_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-Broadcast-Cancelled-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_broadcast_cancelled_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_broadcast_cancelled_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<cells_broadcast_cancelled_list_item_ies_o>;

// Cells-Broadcast-Completed-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_broadcast_completed_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {147};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_broadcast_completed_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 147 == id;
}
crit_e cells_broadcast_completed_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 147) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_broadcast_completed_list_item_ies_o::value_c
cells_broadcast_completed_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 147) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_broadcast_completed_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 147) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_broadcast_completed_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-Broadcast-Completed-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_broadcast_completed_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_broadcast_completed_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<cells_broadcast_completed_list_item_ies_o>;

// Cells-Failed-to-be-Activated-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_failed_to_be_activ_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {2};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_failed_to_be_activ_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 2 == id;
}
crit_e cells_failed_to_be_activ_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 2) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_failed_to_be_activ_list_item_ies_o::value_c
cells_failed_to_be_activ_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 2) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_failed_to_be_activ_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 2) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_failed_to_be_activ_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-Failed-to-be-Activated-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_failed_to_be_activ_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_failed_to_be_activ_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<cells_failed_to_be_activ_list_item_ies_o>;

// Cells-Status-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_status_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {88};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_status_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 88 == id;
}
crit_e cells_status_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 88) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_status_item_ies_o::value_c cells_status_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 88) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_status_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 88) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_status_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-Status-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_status_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_status_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<cells_status_item_ies_o>;

// Cells-To-Be-Broadcast-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_to_be_broadcast_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {145};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_to_be_broadcast_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 145 == id;
}
crit_e cells_to_be_broadcast_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 145) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_to_be_broadcast_list_item_ies_o::value_c cells_to_be_broadcast_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 145) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_to_be_broadcast_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 145) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_to_be_broadcast_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-To-Be-Broadcast-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_to_be_broadcast_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_broadcast_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<cells_to_be_broadcast_list_item_ies_o>;

// Cells-to-be-Activated-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_to_be_activ_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {4};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_to_be_activ_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 4 == id;
}
crit_e cells_to_be_activ_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 4) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_to_be_activ_list_item_ies_o::value_c cells_to_be_activ_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 4) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_to_be_activ_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 4) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_to_be_activ_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-to-be-Activated-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_to_be_activ_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_activ_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<cells_to_be_activ_list_item_ies_o>;

// Cells-to-be-Barred-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_to_be_barred_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {130};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_to_be_barred_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 130 == id;
}
crit_e cells_to_be_barred_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 130) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_to_be_barred_item_ies_o::value_c cells_to_be_barred_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 130) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_to_be_barred_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 130) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_to_be_barred_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-to-be-Barred-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_to_be_barred_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_barred_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<cells_to_be_barred_item_ies_o>;

// Cells-to-be-Deactivated-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_to_be_deactiv_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {6};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_to_be_deactiv_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 6 == id;
}
crit_e cells_to_be_deactiv_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 6) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_to_be_deactiv_list_item_ies_o::value_c cells_to_be_deactiv_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 6) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_to_be_deactiv_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 6) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_to_be_deactiv_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-to-be-Deactivated-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_to_be_deactiv_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_deactiv_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<cells_to_be_deactiv_list_item_ies_o>;

// DL-UP-TNL-Address-to-Update-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t dl_up_tnl_address_to_upd_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {305};
  return map_enum_number(names, 1, idx, "id");
}
bool dl_up_tnl_address_to_upd_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 305 == id;
}
crit_e dl_up_tnl_address_to_upd_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 305) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
dl_up_tnl_address_to_upd_list_item_ies_o::value_c
dl_up_tnl_address_to_upd_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 305) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e dl_up_tnl_address_to_upd_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 305) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void dl_up_tnl_address_to_upd_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DL-UP-TNL-Address-to-Update-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE dl_up_tnl_address_to_upd_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_up_tnl_address_to_upd_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<dl_up_tnl_address_to_upd_list_item_ies_o>;

// DLRRCMessageTransferIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t dl_rrc_msg_transfer_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 47, 64, 109, 50, 108, 184, 222, 218, 221, 217, 248, 597};
  return map_enum_number(names, 14, idx, "id");
}
bool dl_rrc_msg_transfer_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 47, 64, 109, 50, 108, 184, 222, 218, 221, 217, 248, 597};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e dl_rrc_msg_transfer_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 47:
      return crit_e::reject;
    case 64:
      return crit_e::reject;
    case 109:
      return crit_e::ignore;
    case 50:
      return crit_e::reject;
    case 108:
      return crit_e::reject;
    case 184:
      return crit_e::ignore;
    case 222:
      return crit_e::reject;
    case 218:
      return crit_e::reject;
    case 221:
      return crit_e::ignore;
    case 217:
      return crit_e::reject;
    case 248:
      return crit_e::ignore;
    case 597:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
dl_rrc_msg_transfer_ies_o::value_c dl_rrc_msg_transfer_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 47:
      ret.set(value_c::types::old_gnb_du_ue_f1ap_id);
      break;
    case 64:
      ret.set(value_c::types::srb_id);
      break;
    case 109:
      ret.set(value_c::types::execute_dupl);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 108:
      ret.set(value_c::types::rat_freq_prio_info);
      break;
    case 184:
      ret.set(value_c::types::rrc_delivery_status_request);
      break;
    case 222:
      ret.set(value_c::types::ue_context_not_retrievable);
      break;
    case 218:
      ret.set(value_c::types::redirected_rrc_msg);
      break;
    case 221:
      ret.set(value_c::types::plmn_assist_info_for_net_shar);
      break;
    case 217:
      ret.set(value_c::types::new_gnb_cu_ue_f1ap_id);
      break;
    case 248:
      ret.set(value_c::types::add_rrm_prio_idx);
      break;
    case 597:
      ret.set(value_c::types::srb_map_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e dl_rrc_msg_transfer_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 47:
      return presence_e::optional;
    case 64:
      return presence_e::mandatory;
    case 109:
      return presence_e::optional;
    case 50:
      return presence_e::mandatory;
    case 108:
      return presence_e::optional;
    case 184:
      return presence_e::optional;
    case 222:
      return presence_e::optional;
    case 218:
      return presence_e::optional;
    case 221:
      return presence_e::optional;
    case 217:
      return presence_e::optional;
    case 248:
      return presence_e::optional;
    case 597:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void dl_rrc_msg_transfer_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::rat_freq_prio_info:
      c.destroy<rat_freq_prio_info_c>();
      break;
    case types::redirected_rrc_msg:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::plmn_assist_info_for_net_shar:
      c.destroy<fixed_octstring<3, true>>();
      break;
    case types::add_rrm_prio_idx:
      c.destroy<fixed_bitstring<32, false, true>>();
      break;
    case types::srb_map_info:
      c.destroy<fixed_bitstring<16, false, true>>();
      break;
    default:
      break;
  }
}
void dl_rrc_msg_transfer_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::old_gnb_du_ue_f1ap_id:
      break;
    case types::srb_id:
      break;
    case types::execute_dupl:
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::rat_freq_prio_info:
      c.init<rat_freq_prio_info_c>();
      break;
    case types::rrc_delivery_status_request:
      break;
    case types::ue_context_not_retrievable:
      break;
    case types::redirected_rrc_msg:
      c.init<unbounded_octstring<true>>();
      break;
    case types::plmn_assist_info_for_net_shar:
      c.init<fixed_octstring<3, true>>();
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      break;
    case types::add_rrm_prio_idx:
      c.init<fixed_bitstring<32, false, true>>();
      break;
    case types::srb_map_info:
      c.init<fixed_bitstring<16, false, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "dl_rrc_msg_transfer_ies_o::value_c");
  }
}
dl_rrc_msg_transfer_ies_o::value_c::value_c(const dl_rrc_msg_transfer_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::old_gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::srb_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::execute_dupl:
      c.init(other.c.get<execute_dupl_e>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::rat_freq_prio_info:
      c.init(other.c.get<rat_freq_prio_info_c>());
      break;
    case types::rrc_delivery_status_request:
      c.init(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::ue_context_not_retrievable:
      c.init(other.c.get<ue_context_not_retrievable_e>());
      break;
    case types::redirected_rrc_msg:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::plmn_assist_info_for_net_shar:
      c.init(other.c.get<fixed_octstring<3, true>>());
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::add_rrm_prio_idx:
      c.init(other.c.get<fixed_bitstring<32, false, true>>());
      break;
    case types::srb_map_info:
      c.init(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "dl_rrc_msg_transfer_ies_o::value_c");
  }
}
dl_rrc_msg_transfer_ies_o::value_c&
dl_rrc_msg_transfer_ies_o::value_c::operator=(const dl_rrc_msg_transfer_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::old_gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::srb_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::execute_dupl:
      c.set(other.c.get<execute_dupl_e>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::rat_freq_prio_info:
      c.set(other.c.get<rat_freq_prio_info_c>());
      break;
    case types::rrc_delivery_status_request:
      c.set(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::ue_context_not_retrievable:
      c.set(other.c.get<ue_context_not_retrievable_e>());
      break;
    case types::redirected_rrc_msg:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::plmn_assist_info_for_net_shar:
      c.set(other.c.get<fixed_octstring<3, true>>());
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::add_rrm_prio_idx:
      c.set(other.c.get<fixed_bitstring<32, false, true>>());
      break;
    case types::srb_map_info:
      c.set(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "dl_rrc_msg_transfer_ies_o::value_c");
  }

  return *this;
}
uint64_t& dl_rrc_msg_transfer_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& dl_rrc_msg_transfer_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& dl_rrc_msg_transfer_ies_o::value_c::old_gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::old_gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& dl_rrc_msg_transfer_ies_o::value_c::srb_id()
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
execute_dupl_e& dl_rrc_msg_transfer_ies_o::value_c::execute_dupl()
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
unbounded_octstring<true>& dl_rrc_msg_transfer_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
rat_freq_prio_info_c& dl_rrc_msg_transfer_ies_o::value_c::rat_freq_prio_info()
{
  assert_choice_type(types::rat_freq_prio_info, type_, "Value");
  return c.get<rat_freq_prio_info_c>();
}
rrc_delivery_status_request_e& dl_rrc_msg_transfer_ies_o::value_c::rrc_delivery_status_request()
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
ue_context_not_retrievable_e& dl_rrc_msg_transfer_ies_o::value_c::ue_context_not_retrievable()
{
  assert_choice_type(types::ue_context_not_retrievable, type_, "Value");
  return c.get<ue_context_not_retrievable_e>();
}
unbounded_octstring<true>& dl_rrc_msg_transfer_ies_o::value_c::redirected_rrc_msg()
{
  assert_choice_type(types::redirected_rrc_msg, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
fixed_octstring<3, true>& dl_rrc_msg_transfer_ies_o::value_c::plmn_assist_info_for_net_shar()
{
  assert_choice_type(types::plmn_assist_info_for_net_shar, type_, "Value");
  return c.get<fixed_octstring<3, true>>();
}
uint64_t& dl_rrc_msg_transfer_ies_o::value_c::new_gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::new_gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
fixed_bitstring<32, false, true>& dl_rrc_msg_transfer_ies_o::value_c::add_rrm_prio_idx()
{
  assert_choice_type(types::add_rrm_prio_idx, type_, "Value");
  return c.get<fixed_bitstring<32, false, true>>();
}
fixed_bitstring<16, false, true>& dl_rrc_msg_transfer_ies_o::value_c::srb_map_info()
{
  assert_choice_type(types::srb_map_info, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
const uint64_t& dl_rrc_msg_transfer_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& dl_rrc_msg_transfer_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& dl_rrc_msg_transfer_ies_o::value_c::old_gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::old_gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& dl_rrc_msg_transfer_ies_o::value_c::srb_id() const
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
const execute_dupl_e& dl_rrc_msg_transfer_ies_o::value_c::execute_dupl() const
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
const unbounded_octstring<true>& dl_rrc_msg_transfer_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const rat_freq_prio_info_c& dl_rrc_msg_transfer_ies_o::value_c::rat_freq_prio_info() const
{
  assert_choice_type(types::rat_freq_prio_info, type_, "Value");
  return c.get<rat_freq_prio_info_c>();
}
const rrc_delivery_status_request_e& dl_rrc_msg_transfer_ies_o::value_c::rrc_delivery_status_request() const
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
const ue_context_not_retrievable_e& dl_rrc_msg_transfer_ies_o::value_c::ue_context_not_retrievable() const
{
  assert_choice_type(types::ue_context_not_retrievable, type_, "Value");
  return c.get<ue_context_not_retrievable_e>();
}
const unbounded_octstring<true>& dl_rrc_msg_transfer_ies_o::value_c::redirected_rrc_msg() const
{
  assert_choice_type(types::redirected_rrc_msg, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const fixed_octstring<3, true>& dl_rrc_msg_transfer_ies_o::value_c::plmn_assist_info_for_net_shar() const
{
  assert_choice_type(types::plmn_assist_info_for_net_shar, type_, "Value");
  return c.get<fixed_octstring<3, true>>();
}
const uint64_t& dl_rrc_msg_transfer_ies_o::value_c::new_gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::new_gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const fixed_bitstring<32, false, true>& dl_rrc_msg_transfer_ies_o::value_c::add_rrm_prio_idx() const
{
  assert_choice_type(types::add_rrm_prio_idx, type_, "Value");
  return c.get<fixed_bitstring<32, false, true>>();
}
const fixed_bitstring<16, false, true>& dl_rrc_msg_transfer_ies_o::value_c::srb_map_info() const
{
  assert_choice_type(types::srb_map_info, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
void dl_rrc_msg_transfer_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::old_gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::srb_id:
      j.write_int("INTEGER (0..3,...)", c.get<uint8_t>());
      break;
    case types::execute_dupl:
      j.write_str("ExecuteDuplication", "true");
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::rat_freq_prio_info:
      j.write_fieldname("RAT-FrequencyPriorityInformation");
      c.get<rat_freq_prio_info_c>().to_json(j);
      break;
    case types::rrc_delivery_status_request:
      j.write_str("RRCDeliveryStatusRequest", "true");
      break;
    case types::ue_context_not_retrievable:
      j.write_str("UEContextNotRetrievable", "true");
      break;
    case types::redirected_rrc_msg:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::plmn_assist_info_for_net_shar:
      j.write_str("OCTET STRING", c.get<fixed_octstring<3, true>>().to_string());
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::add_rrm_prio_idx:
      j.write_str("BIT STRING", c.get<fixed_bitstring<32, false, true>>().to_string());
      break;
    case types::srb_map_info:
      j.write_str("BIT STRING", c.get<fixed_bitstring<16, false, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "dl_rrc_msg_transfer_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE dl_rrc_msg_transfer_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::old_gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srb_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().pack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::rat_freq_prio_info:
      HANDLE_CODE(c.get<rat_freq_prio_info_c>().pack(bref));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().pack(bref));
      break;
    case types::ue_context_not_retrievable:
      HANDLE_CODE(c.get<ue_context_not_retrievable_e>().pack(bref));
      break;
    case types::redirected_rrc_msg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::plmn_assist_info_for_net_shar:
      HANDLE_CODE((c.get<fixed_octstring<3, true>>().pack(bref)));
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::add_rrm_prio_idx:
      HANDLE_CODE((c.get<fixed_bitstring<32, false, true>>().pack(bref)));
      break;
    case types::srb_map_info:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "dl_rrc_msg_transfer_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_rrc_msg_transfer_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::old_gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srb_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().unpack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::rat_freq_prio_info:
      HANDLE_CODE(c.get<rat_freq_prio_info_c>().unpack(bref));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().unpack(bref));
      break;
    case types::ue_context_not_retrievable:
      HANDLE_CODE(c.get<ue_context_not_retrievable_e>().unpack(bref));
      break;
    case types::redirected_rrc_msg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::plmn_assist_info_for_net_shar:
      HANDLE_CODE((c.get<fixed_octstring<3, true>>().unpack(bref)));
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::add_rrm_prio_idx:
      HANDLE_CODE((c.get<fixed_bitstring<32, false, true>>().unpack(bref)));
      break;
    case types::srb_map_info:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "dl_rrc_msg_transfer_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

dl_rrc_msg_transfer_ies_container::dl_rrc_msg_transfer_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  old_gnb_du_ue_f1ap_id(47, crit_e::reject),
  srb_id(64, crit_e::reject),
  execute_dupl(109, crit_e::ignore),
  rrc_container(50, crit_e::reject),
  rat_freq_prio_info(108, crit_e::reject),
  rrc_delivery_status_request(184, crit_e::ignore),
  ue_context_not_retrievable(222, crit_e::reject),
  redirected_rrc_msg(218, crit_e::reject),
  plmn_assist_info_for_net_shar(221, crit_e::ignore),
  new_gnb_cu_ue_f1ap_id(217, crit_e::reject),
  add_rrm_prio_idx(248, crit_e::ignore),
  srb_map_info(597, crit_e::ignore)
{
}
SRSASN_CODE dl_rrc_msg_transfer_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += old_gnb_du_ue_f1ap_id_present ? 1 : 0;
  nof_ies += execute_dupl_present ? 1 : 0;
  nof_ies += rat_freq_prio_info_present ? 1 : 0;
  nof_ies += rrc_delivery_status_request_present ? 1 : 0;
  nof_ies += ue_context_not_retrievable_present ? 1 : 0;
  nof_ies += redirected_rrc_msg_present ? 1 : 0;
  nof_ies += plmn_assist_info_for_net_shar_present ? 1 : 0;
  nof_ies += new_gnb_cu_ue_f1ap_id_present ? 1 : 0;
  nof_ies += add_rrm_prio_idx_present ? 1 : 0;
  nof_ies += srb_map_info_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (old_gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(old_gnb_du_ue_f1ap_id.pack(bref));
  }
  HANDLE_CODE(srb_id.pack(bref));
  if (execute_dupl_present) {
    HANDLE_CODE(execute_dupl.pack(bref));
  }
  HANDLE_CODE(rrc_container.pack(bref));
  if (rat_freq_prio_info_present) {
    HANDLE_CODE(rat_freq_prio_info.pack(bref));
  }
  if (rrc_delivery_status_request_present) {
    HANDLE_CODE(rrc_delivery_status_request.pack(bref));
  }
  if (ue_context_not_retrievable_present) {
    HANDLE_CODE(ue_context_not_retrievable.pack(bref));
  }
  if (redirected_rrc_msg_present) {
    HANDLE_CODE(redirected_rrc_msg.pack(bref));
  }
  if (plmn_assist_info_for_net_shar_present) {
    HANDLE_CODE(plmn_assist_info_for_net_shar.pack(bref));
  }
  if (new_gnb_cu_ue_f1ap_id_present) {
    HANDLE_CODE(new_gnb_cu_ue_f1ap_id.pack(bref));
  }
  if (add_rrm_prio_idx_present) {
    HANDLE_CODE(add_rrm_prio_idx.pack(bref));
  }
  if (srb_map_info_present) {
    HANDLE_CODE(srb_map_info.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_rrc_msg_transfer_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 47: {
        old_gnb_du_ue_f1ap_id_present = true;
        old_gnb_du_ue_f1ap_id.id      = id;
        HANDLE_CODE(old_gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(old_gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 64: {
        nof_mandatory_ies--;
        srb_id.id = id;
        HANDLE_CODE(srb_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srb_id.value.unpack(bref));
        break;
      }
      case 109: {
        execute_dupl_present = true;
        execute_dupl.id      = id;
        HANDLE_CODE(execute_dupl.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(execute_dupl.value.unpack(bref));
        break;
      }
      case 50: {
        nof_mandatory_ies--;
        rrc_container.id = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 108: {
        rat_freq_prio_info_present = true;
        rat_freq_prio_info.id      = id;
        HANDLE_CODE(rat_freq_prio_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rat_freq_prio_info.value.unpack(bref));
        break;
      }
      case 184: {
        rrc_delivery_status_request_present = true;
        rrc_delivery_status_request.id      = id;
        HANDLE_CODE(rrc_delivery_status_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_delivery_status_request.value.unpack(bref));
        break;
      }
      case 222: {
        ue_context_not_retrievable_present = true;
        ue_context_not_retrievable.id      = id;
        HANDLE_CODE(ue_context_not_retrievable.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_context_not_retrievable.value.unpack(bref));
        break;
      }
      case 218: {
        redirected_rrc_msg_present = true;
        redirected_rrc_msg.id      = id;
        HANDLE_CODE(redirected_rrc_msg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(redirected_rrc_msg.value.unpack(bref));
        break;
      }
      case 221: {
        plmn_assist_info_for_net_shar_present = true;
        plmn_assist_info_for_net_shar.id      = id;
        HANDLE_CODE(plmn_assist_info_for_net_shar.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(plmn_assist_info_for_net_shar.value.unpack(bref));
        break;
      }
      case 217: {
        new_gnb_cu_ue_f1ap_id_present = true;
        new_gnb_cu_ue_f1ap_id.id      = id;
        HANDLE_CODE(new_gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(new_gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 248: {
        add_rrm_prio_idx_present = true;
        add_rrm_prio_idx.id      = id;
        HANDLE_CODE(add_rrm_prio_idx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(add_rrm_prio_idx.value.unpack(bref));
        break;
      }
      case 597: {
        srb_map_info_present = true;
        srb_map_info.id      = id;
        HANDLE_CODE(srb_map_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srb_map_info.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void dl_rrc_msg_transfer_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (old_gnb_du_ue_f1ap_id_present) {
    j.write_fieldname("");
    old_gnb_du_ue_f1ap_id.to_json(j);
  }
  j.write_fieldname("");
  srb_id.to_json(j);
  if (execute_dupl_present) {
    j.write_fieldname("");
    execute_dupl.to_json(j);
  }
  j.write_fieldname("");
  rrc_container.to_json(j);
  if (rat_freq_prio_info_present) {
    j.write_fieldname("");
    rat_freq_prio_info.to_json(j);
  }
  if (rrc_delivery_status_request_present) {
    j.write_fieldname("");
    rrc_delivery_status_request.to_json(j);
  }
  if (ue_context_not_retrievable_present) {
    j.write_fieldname("");
    ue_context_not_retrievable.to_json(j);
  }
  if (redirected_rrc_msg_present) {
    j.write_fieldname("");
    redirected_rrc_msg.to_json(j);
  }
  if (plmn_assist_info_for_net_shar_present) {
    j.write_fieldname("");
    plmn_assist_info_for_net_shar.to_json(j);
  }
  if (new_gnb_cu_ue_f1ap_id_present) {
    j.write_fieldname("");
    new_gnb_cu_ue_f1ap_id.to_json(j);
  }
  if (add_rrm_prio_idx_present) {
    j.write_fieldname("");
    add_rrm_prio_idx.to_json(j);
  }
  if (srb_map_info_present) {
    j.write_fieldname("");
    srb_map_info.to_json(j);
  }
  j.end_obj();
}

// DRB-Activity-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drb_activity_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {99};
  return map_enum_number(names, 1, idx, "id");
}
bool drb_activity_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 99 == id;
}
crit_e drb_activity_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 99) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drb_activity_item_ies_o::value_c drb_activity_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 99) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drb_activity_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 99) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drb_activity_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRB-Activity-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drb_activity_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drb_activity_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drb_activity_item_ies_o>;

// DRB-Notify-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drb_notify_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {136};
  return map_enum_number(names, 1, idx, "id");
}
bool drb_notify_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 136 == id;
}
crit_e drb_notify_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 136) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drb_notify_item_ies_o::value_c drb_notify_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 136) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drb_notify_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 136) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drb_notify_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRB-Notify-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drb_notify_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drb_notify_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drb_notify_item_ies_o>;

// DRBs-FailedToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_failed_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {12};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_failed_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 12 == id;
}
crit_e drbs_failed_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 12) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_failed_to_be_modified_item_ies_o::value_c drbs_failed_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 12) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_failed_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 12) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_failed_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-FailedToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_failed_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_failed_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drbs_failed_to_be_modified_item_ies_o>;

// DRBs-FailedToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_failed_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {14};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_failed_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 14 == id;
}
crit_e drbs_failed_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 14) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_failed_to_be_setup_item_ies_o::value_c drbs_failed_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 14) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_failed_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 14) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_failed_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-FailedToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_failed_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_failed_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drbs_failed_to_be_setup_item_ies_o>;

// DRBs-FailedToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_failed_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {16};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_failed_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 16 == id;
}
crit_e drbs_failed_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 16) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_failed_to_be_setup_mod_item_ies_o::value_c drbs_failed_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 16) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_failed_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 16) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_failed_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-FailedToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_failed_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_failed_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drbs_failed_to_be_setup_mod_item_ies_o>;

// DRBs-Modified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {20};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 20 == id;
}
crit_e drbs_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 20) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_modified_item_ies_o::value_c drbs_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 20) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 20) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-Modified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drbs_modified_item_ies_o>;

// DRBs-ModifiedConf-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_modified_conf_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {18};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_modified_conf_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 18 == id;
}
crit_e drbs_modified_conf_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 18) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_modified_conf_item_ies_o::value_c drbs_modified_conf_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 18) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_modified_conf_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 18) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_modified_conf_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-ModifiedConf-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_modified_conf_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_modified_conf_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drbs_modified_conf_item_ies_o>;

// DRBs-Required-ToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_required_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {22};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_required_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 22 == id;
}
crit_e drbs_required_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 22) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_required_to_be_modified_item_ies_o::value_c drbs_required_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 22) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_required_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 22) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_required_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-Required-ToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_required_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_required_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drbs_required_to_be_modified_item_ies_o>;

// DRBs-Required-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_required_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {24};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_required_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 24 == id;
}
crit_e drbs_required_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 24) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_required_to_be_released_item_ies_o::value_c drbs_required_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 24) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_required_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 24) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_required_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-Required-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_required_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_required_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drbs_required_to_be_released_item_ies_o>;

// DRBs-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {26};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 26 == id;
}
crit_e drbs_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 26) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_setup_item_ies_o::value_c drbs_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 26) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 26) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drbs_setup_item_ies_o>;

// DRBs-SetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {28};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 28 == id;
}
crit_e drbs_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 28) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_setup_mod_item_ies_o::value_c drbs_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 28) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 28) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-SetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drbs_setup_mod_item_ies_o>;

// DRBs-ToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {30};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 30 == id;
}
crit_e drbs_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 30) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_to_be_modified_item_ies_o::value_c drbs_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 30) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 30) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-ToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drbs_to_be_modified_item_ies_o>;

// DRBs-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {32};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 32 == id;
}
crit_e drbs_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 32) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_to_be_released_item_ies_o::value_c drbs_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 32) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 32) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drbs_to_be_released_item_ies_o>;

// DRBs-ToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {34};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 34 == id;
}
crit_e drbs_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 34) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_to_be_setup_item_ies_o::value_c drbs_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 34) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 34) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-ToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drbs_to_be_setup_item_ies_o>;

// DRBs-ToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {36};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 36 == id;
}
crit_e drbs_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 36) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_to_be_setup_mod_item_ies_o::value_c drbs_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 36) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 36) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-ToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<drbs_to_be_setup_mod_item_ies_o>;

// DUCURadioInformationTransferIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t du_cu_radio_info_transfer_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 249};
  return map_enum_number(names, 2, idx, "id");
}
bool du_cu_radio_info_transfer_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 249};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e du_cu_radio_info_transfer_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 249:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
du_cu_radio_info_transfer_ies_o::value_c du_cu_radio_info_transfer_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 249:
      ret.set(value_c::types::du_cu_radio_info_type);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e du_cu_radio_info_transfer_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 249:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void du_cu_radio_info_transfer_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::du_cu_radio_info_type:
      c.destroy<du_cu_radio_info_type_c>();
      break;
    default:
      break;
  }
}
void du_cu_radio_info_transfer_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::du_cu_radio_info_type:
      c.init<du_cu_radio_info_type_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "du_cu_radio_info_transfer_ies_o::value_c");
  }
}
du_cu_radio_info_transfer_ies_o::value_c::value_c(const du_cu_radio_info_transfer_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::du_cu_radio_info_type:
      c.init(other.c.get<du_cu_radio_info_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "du_cu_radio_info_transfer_ies_o::value_c");
  }
}
du_cu_radio_info_transfer_ies_o::value_c&
du_cu_radio_info_transfer_ies_o::value_c::operator=(const du_cu_radio_info_transfer_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::du_cu_radio_info_type:
      c.set(other.c.get<du_cu_radio_info_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "du_cu_radio_info_transfer_ies_o::value_c");
  }

  return *this;
}
uint16_t& du_cu_radio_info_transfer_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
du_cu_radio_info_type_c& du_cu_radio_info_transfer_ies_o::value_c::du_cu_radio_info_type()
{
  assert_choice_type(types::du_cu_radio_info_type, type_, "Value");
  return c.get<du_cu_radio_info_type_c>();
}
const uint16_t& du_cu_radio_info_transfer_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const du_cu_radio_info_type_c& du_cu_radio_info_transfer_ies_o::value_c::du_cu_radio_info_type() const
{
  assert_choice_type(types::du_cu_radio_info_type, type_, "Value");
  return c.get<du_cu_radio_info_type_c>();
}
void du_cu_radio_info_transfer_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::du_cu_radio_info_type:
      j.write_fieldname("DUCURadioInformationType");
      c.get<du_cu_radio_info_type_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "du_cu_radio_info_transfer_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE du_cu_radio_info_transfer_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::du_cu_radio_info_type:
      HANDLE_CODE(c.get<du_cu_radio_info_type_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "du_cu_radio_info_transfer_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE du_cu_radio_info_transfer_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::du_cu_radio_info_type:
      HANDLE_CODE(c.get<du_cu_radio_info_type_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "du_cu_radio_info_transfer_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

du_cu_radio_info_transfer_ies_container::du_cu_radio_info_transfer_ies_container() :
  transaction_id(78, crit_e::reject), du_cu_radio_info_type(249, crit_e::ignore)
{
}
SRSASN_CODE du_cu_radio_info_transfer_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(du_cu_radio_info_type.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE du_cu_radio_info_transfer_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 249: {
        nof_mandatory_ies--;
        du_cu_radio_info_type.id = id;
        HANDLE_CODE(du_cu_radio_info_type.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(du_cu_radio_info_type.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void du_cu_radio_info_transfer_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  du_cu_radio_info_type.to_json(j);
  j.end_obj();
}

// DeactivateTraceIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t deactiv_trace_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 243};
  return map_enum_number(names, 3, idx, "id");
}
bool deactiv_trace_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 243};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e deactiv_trace_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 243:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
deactiv_trace_ies_o::value_c deactiv_trace_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 243:
      ret.set(value_c::types::trace_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e deactiv_trace_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 243:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void deactiv_trace_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trace_id:
      c.destroy<fixed_octstring<8, true>>();
      break;
    default:
      break;
  }
}
void deactiv_trace_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::trace_id:
      c.init<fixed_octstring<8, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "deactiv_trace_ies_o::value_c");
  }
}
deactiv_trace_ies_o::value_c::value_c(const deactiv_trace_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::trace_id:
      c.init(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "deactiv_trace_ies_o::value_c");
  }
}
deactiv_trace_ies_o::value_c& deactiv_trace_ies_o::value_c::operator=(const deactiv_trace_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::trace_id:
      c.set(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "deactiv_trace_ies_o::value_c");
  }

  return *this;
}
uint64_t& deactiv_trace_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& deactiv_trace_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
fixed_octstring<8, true>& deactiv_trace_ies_o::value_c::trace_id()
{
  assert_choice_type(types::trace_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
const uint64_t& deactiv_trace_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& deactiv_trace_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const fixed_octstring<8, true>& deactiv_trace_ies_o::value_c::trace_id() const
{
  assert_choice_type(types::trace_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
void deactiv_trace_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::trace_id:
      j.write_str("OCTET STRING", c.get<fixed_octstring<8, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "deactiv_trace_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE deactiv_trace_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trace_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "deactiv_trace_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE deactiv_trace_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trace_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "deactiv_trace_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

deactiv_trace_ies_container::deactiv_trace_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject), gnb_du_ue_f1ap_id(41, crit_e::reject), trace_id(243, crit_e::ignore)
{
}
SRSASN_CODE deactiv_trace_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(trace_id.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE deactiv_trace_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 243: {
        nof_mandatory_ies--;
        trace_id.id = id;
        HANDLE_CODE(trace_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trace_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void deactiv_trace_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  trace_id.to_json(j);
  j.end_obj();
}

// Dedicated-SIDelivery-NeededUE-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ded_si_delivery_needed_ue_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {190};
  return map_enum_number(names, 1, idx, "id");
}
bool ded_si_delivery_needed_ue_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 190 == id;
}
crit_e ded_si_delivery_needed_ue_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 190) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ded_si_delivery_needed_ue_item_ies_o::value_c ded_si_delivery_needed_ue_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 190) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ded_si_delivery_needed_ue_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 190) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ded_si_delivery_needed_ue_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Dedicated-SIDelivery-NeededUE-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ded_si_delivery_needed_ue_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ded_si_delivery_needed_ue_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<ded_si_delivery_needed_ue_item_ies_o>;

// E-CIDMeasurementFailureIndication-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t e_c_id_meas_fail_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 412, 413, 0};
  return map_enum_number(names, 5, idx, "id");
}
bool e_c_id_meas_fail_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 412, 413, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e e_c_id_meas_fail_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 412:
      return crit_e::reject;
    case 413:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
e_c_id_meas_fail_ind_ies_o::value_c e_c_id_meas_fail_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 412:
      ret.set(value_c::types::lmf_ue_meas_id);
      break;
    case 413:
      ret.set(value_c::types::ran_ue_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e e_c_id_meas_fail_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 412:
      return presence_e::mandatory;
    case 413:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void e_c_id_meas_fail_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void e_c_id_meas_fail_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::lmf_ue_meas_id:
      break;
    case types::ran_ue_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_fail_ind_ies_o::value_c");
  }
}
e_c_id_meas_fail_ind_ies_o::value_c::value_c(const e_c_id_meas_fail_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_fail_ind_ies_o::value_c");
  }
}
e_c_id_meas_fail_ind_ies_o::value_c&
e_c_id_meas_fail_ind_ies_o::value_c::operator=(const e_c_id_meas_fail_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_fail_ind_ies_o::value_c");
  }

  return *this;
}
uint64_t& e_c_id_meas_fail_ind_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& e_c_id_meas_fail_ind_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& e_c_id_meas_fail_ind_ies_o::value_c::lmf_ue_meas_id()
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& e_c_id_meas_fail_ind_ies_o::value_c::ran_ue_meas_id()
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& e_c_id_meas_fail_ind_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& e_c_id_meas_fail_ind_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& e_c_id_meas_fail_ind_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& e_c_id_meas_fail_ind_ies_o::value_c::lmf_ue_meas_id() const
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& e_c_id_meas_fail_ind_ies_o::value_c::ran_ue_meas_id() const
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& e_c_id_meas_fail_ind_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void e_c_id_meas_fail_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_fail_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE e_c_id_meas_fail_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_fail_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

e_c_id_meas_fail_ind_ies_container::e_c_id_meas_fail_ind_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  lmf_ue_meas_id(412, crit_e::reject),
  ran_ue_meas_id(413, crit_e::reject),
  cause(0, crit_e::ignore)
{
}
SRSASN_CODE e_c_id_meas_fail_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(lmf_ue_meas_id.pack(bref));
  HANDLE_CODE(ran_ue_meas_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_fail_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 412: {
        nof_mandatory_ies--;
        lmf_ue_meas_id.id = id;
        HANDLE_CODE(lmf_ue_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lmf_ue_meas_id.value.unpack(bref));
        break;
      }
      case 413: {
        nof_mandatory_ies--;
        ran_ue_meas_id.id = id;
        HANDLE_CODE(ran_ue_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_meas_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void e_c_id_meas_fail_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  lmf_ue_meas_id.to_json(j);
  j.write_fieldname("");
  ran_ue_meas_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  j.end_obj();
}

// E-CIDMeasurementInitiationFailure-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t e_c_id_meas_initiation_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 412, 413, 0, 7};
  return map_enum_number(names, 6, idx, "id");
}
bool e_c_id_meas_initiation_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 412, 413, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e e_c_id_meas_initiation_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 412:
      return crit_e::reject;
    case 413:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
e_c_id_meas_initiation_fail_ies_o::value_c e_c_id_meas_initiation_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 412:
      ret.set(value_c::types::lmf_ue_meas_id);
      break;
    case 413:
      ret.set(value_c::types::ran_ue_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e e_c_id_meas_initiation_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 412:
      return presence_e::mandatory;
    case 413:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void e_c_id_meas_initiation_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void e_c_id_meas_initiation_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::lmf_ue_meas_id:
      break;
    case types::ran_ue_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_fail_ies_o::value_c");
  }
}
e_c_id_meas_initiation_fail_ies_o::value_c::value_c(const e_c_id_meas_initiation_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_fail_ies_o::value_c");
  }
}
e_c_id_meas_initiation_fail_ies_o::value_c&
e_c_id_meas_initiation_fail_ies_o::value_c::operator=(const e_c_id_meas_initiation_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& e_c_id_meas_initiation_fail_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& e_c_id_meas_initiation_fail_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& e_c_id_meas_initiation_fail_ies_o::value_c::lmf_ue_meas_id()
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& e_c_id_meas_initiation_fail_ies_o::value_c::ran_ue_meas_id()
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& e_c_id_meas_initiation_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& e_c_id_meas_initiation_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& e_c_id_meas_initiation_fail_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& e_c_id_meas_initiation_fail_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& e_c_id_meas_initiation_fail_ies_o::value_c::lmf_ue_meas_id() const
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& e_c_id_meas_initiation_fail_ies_o::value_c::ran_ue_meas_id() const
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& e_c_id_meas_initiation_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& e_c_id_meas_initiation_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void e_c_id_meas_initiation_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE e_c_id_meas_initiation_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_initiation_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

e_c_id_meas_initiation_fail_ies_container::e_c_id_meas_initiation_fail_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  lmf_ue_meas_id(412, crit_e::reject),
  ran_ue_meas_id(413, crit_e::reject),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE e_c_id_meas_initiation_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(lmf_ue_meas_id.pack(bref));
  HANDLE_CODE(ran_ue_meas_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_initiation_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 412: {
        nof_mandatory_ies--;
        lmf_ue_meas_id.id = id;
        HANDLE_CODE(lmf_ue_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lmf_ue_meas_id.value.unpack(bref));
        break;
      }
      case 413: {
        nof_mandatory_ies--;
        ran_ue_meas_id.id = id;
        HANDLE_CODE(ran_ue_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_meas_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void e_c_id_meas_initiation_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  lmf_ue_meas_id.to_json(j);
  j.write_fieldname("");
  ran_ue_meas_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// E-CIDMeasurementInitiationRequest-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t e_c_id_meas_initiation_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 412, 413, 424, 416, 414, 672};
  return map_enum_number(names, 8, idx, "id");
}
bool e_c_id_meas_initiation_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 412, 413, 424, 416, 414, 672};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e e_c_id_meas_initiation_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 412:
      return crit_e::reject;
    case 413:
      return crit_e::reject;
    case 424:
      return crit_e::reject;
    case 416:
      return crit_e::reject;
    case 414:
      return crit_e::reject;
    case 672:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
e_c_id_meas_initiation_request_ies_o::value_c e_c_id_meas_initiation_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 412:
      ret.set(value_c::types::lmf_ue_meas_id);
      break;
    case 413:
      ret.set(value_c::types::ran_ue_meas_id);
      break;
    case 424:
      ret.set(value_c::types::e_c_id_report_characteristics);
      break;
    case 416:
      ret.set(value_c::types::e_c_id_meas_periodicity);
      break;
    case 414:
      ret.set(value_c::types::e_c_id_meas_quantities);
      break;
    case 672:
      ret.set(value_c::types::pos_meas_periodicity_nr_ao_a);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e e_c_id_meas_initiation_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 412:
      return presence_e::mandatory;
    case 413:
      return presence_e::mandatory;
    case 424:
      return presence_e::mandatory;
    case 416:
      return presence_e::conditional;
    case 414:
      return presence_e::mandatory;
    case 672:
      return presence_e::conditional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void e_c_id_meas_initiation_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::e_c_id_meas_quantities:
      c.destroy<e_c_id_meas_quantities_l>();
      break;
    default:
      break;
  }
}
void e_c_id_meas_initiation_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::lmf_ue_meas_id:
      break;
    case types::ran_ue_meas_id:
      break;
    case types::e_c_id_report_characteristics:
      break;
    case types::e_c_id_meas_periodicity:
      break;
    case types::e_c_id_meas_quantities:
      c.init<e_c_id_meas_quantities_l>();
      break;
    case types::pos_meas_periodicity_nr_ao_a:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_request_ies_o::value_c");
  }
}
e_c_id_meas_initiation_request_ies_o::value_c::value_c(const e_c_id_meas_initiation_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::e_c_id_report_characteristics:
      c.init(other.c.get<e_c_id_report_characteristics_e>());
      break;
    case types::e_c_id_meas_periodicity:
      c.init(other.c.get<meas_periodicity_e>());
      break;
    case types::e_c_id_meas_quantities:
      c.init(other.c.get<e_c_id_meas_quantities_l>());
      break;
    case types::pos_meas_periodicity_nr_ao_a:
      c.init(other.c.get<pos_meas_periodicity_nr_ao_a_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_request_ies_o::value_c");
  }
}
e_c_id_meas_initiation_request_ies_o::value_c&
e_c_id_meas_initiation_request_ies_o::value_c::operator=(const e_c_id_meas_initiation_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::e_c_id_report_characteristics:
      c.set(other.c.get<e_c_id_report_characteristics_e>());
      break;
    case types::e_c_id_meas_periodicity:
      c.set(other.c.get<meas_periodicity_e>());
      break;
    case types::e_c_id_meas_quantities:
      c.set(other.c.get<e_c_id_meas_quantities_l>());
      break;
    case types::pos_meas_periodicity_nr_ao_a:
      c.set(other.c.get<pos_meas_periodicity_nr_ao_a_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& e_c_id_meas_initiation_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& e_c_id_meas_initiation_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& e_c_id_meas_initiation_request_ies_o::value_c::lmf_ue_meas_id()
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& e_c_id_meas_initiation_request_ies_o::value_c::ran_ue_meas_id()
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
e_c_id_report_characteristics_e& e_c_id_meas_initiation_request_ies_o::value_c::e_c_id_report_characteristics()
{
  assert_choice_type(types::e_c_id_report_characteristics, type_, "Value");
  return c.get<e_c_id_report_characteristics_e>();
}
meas_periodicity_e& e_c_id_meas_initiation_request_ies_o::value_c::e_c_id_meas_periodicity()
{
  assert_choice_type(types::e_c_id_meas_periodicity, type_, "Value");
  return c.get<meas_periodicity_e>();
}
e_c_id_meas_quantities_l& e_c_id_meas_initiation_request_ies_o::value_c::e_c_id_meas_quantities()
{
  assert_choice_type(types::e_c_id_meas_quantities, type_, "Value");
  return c.get<e_c_id_meas_quantities_l>();
}
pos_meas_periodicity_nr_ao_a_e& e_c_id_meas_initiation_request_ies_o::value_c::pos_meas_periodicity_nr_ao_a()
{
  assert_choice_type(types::pos_meas_periodicity_nr_ao_a, type_, "Value");
  return c.get<pos_meas_periodicity_nr_ao_a_e>();
}
const uint64_t& e_c_id_meas_initiation_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& e_c_id_meas_initiation_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& e_c_id_meas_initiation_request_ies_o::value_c::lmf_ue_meas_id() const
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& e_c_id_meas_initiation_request_ies_o::value_c::ran_ue_meas_id() const
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const e_c_id_report_characteristics_e&
e_c_id_meas_initiation_request_ies_o::value_c::e_c_id_report_characteristics() const
{
  assert_choice_type(types::e_c_id_report_characteristics, type_, "Value");
  return c.get<e_c_id_report_characteristics_e>();
}
const meas_periodicity_e& e_c_id_meas_initiation_request_ies_o::value_c::e_c_id_meas_periodicity() const
{
  assert_choice_type(types::e_c_id_meas_periodicity, type_, "Value");
  return c.get<meas_periodicity_e>();
}
const e_c_id_meas_quantities_l& e_c_id_meas_initiation_request_ies_o::value_c::e_c_id_meas_quantities() const
{
  assert_choice_type(types::e_c_id_meas_quantities, type_, "Value");
  return c.get<e_c_id_meas_quantities_l>();
}
const pos_meas_periodicity_nr_ao_a_e&
e_c_id_meas_initiation_request_ies_o::value_c::pos_meas_periodicity_nr_ao_a() const
{
  assert_choice_type(types::pos_meas_periodicity_nr_ao_a, type_, "Value");
  return c.get<pos_meas_periodicity_nr_ao_a_e>();
}
void e_c_id_meas_initiation_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::e_c_id_report_characteristics:
      j.write_str("E-CID-ReportCharacteristics", c.get<e_c_id_report_characteristics_e>().to_string());
      break;
    case types::e_c_id_meas_periodicity:
      j.write_str("MeasurementPeriodicity", c.get<meas_periodicity_e>().to_string());
      break;
    case types::e_c_id_meas_quantities:
      j.start_array("E-CID-MeasurementQuantities");
      for (const auto& e1 : c.get<e_c_id_meas_quantities_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pos_meas_periodicity_nr_ao_a:
      j.write_str("PosMeasurementPeriodicityNR-AoA", c.get<pos_meas_periodicity_nr_ao_a_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE e_c_id_meas_initiation_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::e_c_id_report_characteristics:
      HANDLE_CODE(c.get<e_c_id_report_characteristics_e>().pack(bref));
      break;
    case types::e_c_id_meas_periodicity:
      HANDLE_CODE(c.get<meas_periodicity_e>().pack(bref));
      break;
    case types::e_c_id_meas_quantities:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<e_c_id_meas_quantities_l>(), 1, 64, true));
      break;
    case types::pos_meas_periodicity_nr_ao_a:
      HANDLE_CODE(c.get<pos_meas_periodicity_nr_ao_a_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_initiation_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::e_c_id_report_characteristics:
      HANDLE_CODE(c.get<e_c_id_report_characteristics_e>().unpack(bref));
      break;
    case types::e_c_id_meas_periodicity:
      HANDLE_CODE(c.get<meas_periodicity_e>().unpack(bref));
      break;
    case types::e_c_id_meas_quantities:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<e_c_id_meas_quantities_l>(), bref, 1, 64, true));
      break;
    case types::pos_meas_periodicity_nr_ao_a:
      HANDLE_CODE(c.get<pos_meas_periodicity_nr_ao_a_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

e_c_id_meas_initiation_request_ies_container::e_c_id_meas_initiation_request_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  lmf_ue_meas_id(412, crit_e::reject),
  ran_ue_meas_id(413, crit_e::reject),
  e_c_id_report_characteristics(424, crit_e::reject),
  e_c_id_meas_periodicity(416, crit_e::reject),
  e_c_id_meas_quantities(414, crit_e::reject),
  pos_meas_periodicity_nr_ao_a(672, crit_e::reject)
{
}
SRSASN_CODE e_c_id_meas_initiation_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 6;
  nof_ies += e_c_id_meas_periodicity_present ? 1 : 0;
  nof_ies += pos_meas_periodicity_nr_ao_a_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(lmf_ue_meas_id.pack(bref));
  HANDLE_CODE(ran_ue_meas_id.pack(bref));
  HANDLE_CODE(e_c_id_report_characteristics.pack(bref));
  if (e_c_id_meas_periodicity_present) {
    HANDLE_CODE(e_c_id_meas_periodicity.pack(bref));
  }
  HANDLE_CODE(e_c_id_meas_quantities.pack(bref));
  if (pos_meas_periodicity_nr_ao_a_present) {
    HANDLE_CODE(pos_meas_periodicity_nr_ao_a.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_initiation_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 6;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 412: {
        nof_mandatory_ies--;
        lmf_ue_meas_id.id = id;
        HANDLE_CODE(lmf_ue_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lmf_ue_meas_id.value.unpack(bref));
        break;
      }
      case 413: {
        nof_mandatory_ies--;
        ran_ue_meas_id.id = id;
        HANDLE_CODE(ran_ue_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_meas_id.value.unpack(bref));
        break;
      }
      case 424: {
        nof_mandatory_ies--;
        e_c_id_report_characteristics.id = id;
        HANDLE_CODE(e_c_id_report_characteristics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(e_c_id_report_characteristics.value.unpack(bref));
        break;
      }
      case 416: {
        e_c_id_meas_periodicity_present = true;
        e_c_id_meas_periodicity.id      = id;
        HANDLE_CODE(e_c_id_meas_periodicity.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(e_c_id_meas_periodicity.value.unpack(bref));
        break;
      }
      case 414: {
        nof_mandatory_ies--;
        e_c_id_meas_quantities.id = id;
        HANDLE_CODE(e_c_id_meas_quantities.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(e_c_id_meas_quantities.value.unpack(bref));
        break;
      }
      case 672: {
        pos_meas_periodicity_nr_ao_a_present = true;
        pos_meas_periodicity_nr_ao_a.id      = id;
        HANDLE_CODE(pos_meas_periodicity_nr_ao_a.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_meas_periodicity_nr_ao_a.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void e_c_id_meas_initiation_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  lmf_ue_meas_id.to_json(j);
  j.write_fieldname("");
  ran_ue_meas_id.to_json(j);
  j.write_fieldname("");
  e_c_id_report_characteristics.to_json(j);
  if (e_c_id_meas_periodicity_present) {
    j.write_fieldname("");
    e_c_id_meas_periodicity.to_json(j);
  }
  j.write_fieldname("");
  e_c_id_meas_quantities.to_json(j);
  if (pos_meas_periodicity_nr_ao_a_present) {
    j.write_fieldname("");
    pos_meas_periodicity_nr_ao_a.to_json(j);
  }
  j.end_obj();
}

// E-CIDMeasurementInitiationResponse-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t e_c_id_meas_initiation_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 412, 413, 417, 418, 7};
  return map_enum_number(names, 7, idx, "id");
}
bool e_c_id_meas_initiation_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 412, 413, 417, 418, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e e_c_id_meas_initiation_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 412:
      return crit_e::reject;
    case 413:
      return crit_e::reject;
    case 417:
      return crit_e::ignore;
    case 418:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
e_c_id_meas_initiation_resp_ies_o::value_c e_c_id_meas_initiation_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 412:
      ret.set(value_c::types::lmf_ue_meas_id);
      break;
    case 413:
      ret.set(value_c::types::ran_ue_meas_id);
      break;
    case 417:
      ret.set(value_c::types::e_c_id_meas_result);
      break;
    case 418:
      ret.set(value_c::types::cell_portion_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e e_c_id_meas_initiation_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 412:
      return presence_e::mandatory;
    case 413:
      return presence_e::mandatory;
    case 417:
      return presence_e::optional;
    case 418:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void e_c_id_meas_initiation_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::e_c_id_meas_result:
      c.destroy<e_c_id_meas_result_s>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void e_c_id_meas_initiation_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::lmf_ue_meas_id:
      break;
    case types::ran_ue_meas_id:
      break;
    case types::e_c_id_meas_result:
      c.init<e_c_id_meas_result_s>();
      break;
    case types::cell_portion_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_resp_ies_o::value_c");
  }
}
e_c_id_meas_initiation_resp_ies_o::value_c::value_c(const e_c_id_meas_initiation_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::e_c_id_meas_result:
      c.init(other.c.get<e_c_id_meas_result_s>());
      break;
    case types::cell_portion_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_resp_ies_o::value_c");
  }
}
e_c_id_meas_initiation_resp_ies_o::value_c&
e_c_id_meas_initiation_resp_ies_o::value_c::operator=(const e_c_id_meas_initiation_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::e_c_id_meas_result:
      c.set(other.c.get<e_c_id_meas_result_s>());
      break;
    case types::cell_portion_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& e_c_id_meas_initiation_resp_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& e_c_id_meas_initiation_resp_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& e_c_id_meas_initiation_resp_ies_o::value_c::lmf_ue_meas_id()
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& e_c_id_meas_initiation_resp_ies_o::value_c::ran_ue_meas_id()
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
e_c_id_meas_result_s& e_c_id_meas_initiation_resp_ies_o::value_c::e_c_id_meas_result()
{
  assert_choice_type(types::e_c_id_meas_result, type_, "Value");
  return c.get<e_c_id_meas_result_s>();
}
uint16_t& e_c_id_meas_initiation_resp_ies_o::value_c::cell_portion_id()
{
  assert_choice_type(types::cell_portion_id, type_, "Value");
  return c.get<uint16_t>();
}
crit_diagnostics_s& e_c_id_meas_initiation_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& e_c_id_meas_initiation_resp_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& e_c_id_meas_initiation_resp_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& e_c_id_meas_initiation_resp_ies_o::value_c::lmf_ue_meas_id() const
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& e_c_id_meas_initiation_resp_ies_o::value_c::ran_ue_meas_id() const
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const e_c_id_meas_result_s& e_c_id_meas_initiation_resp_ies_o::value_c::e_c_id_meas_result() const
{
  assert_choice_type(types::e_c_id_meas_result, type_, "Value");
  return c.get<e_c_id_meas_result_s>();
}
const uint16_t& e_c_id_meas_initiation_resp_ies_o::value_c::cell_portion_id() const
{
  assert_choice_type(types::cell_portion_id, type_, "Value");
  return c.get<uint16_t>();
}
const crit_diagnostics_s& e_c_id_meas_initiation_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void e_c_id_meas_initiation_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::e_c_id_meas_result:
      j.write_fieldname("E-CID-MeasurementResult");
      c.get<e_c_id_meas_result_s>().to_json(j);
      break;
    case types::cell_portion_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE e_c_id_meas_initiation_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::e_c_id_meas_result:
      HANDLE_CODE(c.get<e_c_id_meas_result_s>().pack(bref));
      break;
    case types::cell_portion_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_initiation_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::e_c_id_meas_result:
      HANDLE_CODE(c.get<e_c_id_meas_result_s>().unpack(bref));
      break;
    case types::cell_portion_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

e_c_id_meas_initiation_resp_ies_container::e_c_id_meas_initiation_resp_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  lmf_ue_meas_id(412, crit_e::reject),
  ran_ue_meas_id(413, crit_e::reject),
  e_c_id_meas_result(417, crit_e::ignore),
  cell_portion_id(418, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE e_c_id_meas_initiation_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += e_c_id_meas_result_present ? 1 : 0;
  nof_ies += cell_portion_id_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(lmf_ue_meas_id.pack(bref));
  HANDLE_CODE(ran_ue_meas_id.pack(bref));
  if (e_c_id_meas_result_present) {
    HANDLE_CODE(e_c_id_meas_result.pack(bref));
  }
  if (cell_portion_id_present) {
    HANDLE_CODE(cell_portion_id.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_initiation_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 412: {
        nof_mandatory_ies--;
        lmf_ue_meas_id.id = id;
        HANDLE_CODE(lmf_ue_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lmf_ue_meas_id.value.unpack(bref));
        break;
      }
      case 413: {
        nof_mandatory_ies--;
        ran_ue_meas_id.id = id;
        HANDLE_CODE(ran_ue_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_meas_id.value.unpack(bref));
        break;
      }
      case 417: {
        e_c_id_meas_result_present = true;
        e_c_id_meas_result.id      = id;
        HANDLE_CODE(e_c_id_meas_result.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(e_c_id_meas_result.value.unpack(bref));
        break;
      }
      case 418: {
        cell_portion_id_present = true;
        cell_portion_id.id      = id;
        HANDLE_CODE(cell_portion_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cell_portion_id.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void e_c_id_meas_initiation_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  lmf_ue_meas_id.to_json(j);
  j.write_fieldname("");
  ran_ue_meas_id.to_json(j);
  if (e_c_id_meas_result_present) {
    j.write_fieldname("");
    e_c_id_meas_result.to_json(j);
  }
  if (cell_portion_id_present) {
    j.write_fieldname("");
    cell_portion_id.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// E-CIDMeasurementReport-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t e_c_id_meas_report_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 412, 413, 417, 418};
  return map_enum_number(names, 6, idx, "id");
}
bool e_c_id_meas_report_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 412, 413, 417, 418};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e e_c_id_meas_report_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 412:
      return crit_e::reject;
    case 413:
      return crit_e::reject;
    case 417:
      return crit_e::ignore;
    case 418:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
e_c_id_meas_report_ies_o::value_c e_c_id_meas_report_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 412:
      ret.set(value_c::types::lmf_ue_meas_id);
      break;
    case 413:
      ret.set(value_c::types::ran_ue_meas_id);
      break;
    case 417:
      ret.set(value_c::types::e_c_id_meas_result);
      break;
    case 418:
      ret.set(value_c::types::cell_portion_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e e_c_id_meas_report_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 412:
      return presence_e::mandatory;
    case 413:
      return presence_e::mandatory;
    case 417:
      return presence_e::mandatory;
    case 418:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void e_c_id_meas_report_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::e_c_id_meas_result:
      c.destroy<e_c_id_meas_result_s>();
      break;
    default:
      break;
  }
}
void e_c_id_meas_report_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::lmf_ue_meas_id:
      break;
    case types::ran_ue_meas_id:
      break;
    case types::e_c_id_meas_result:
      c.init<e_c_id_meas_result_s>();
      break;
    case types::cell_portion_id:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_report_ies_o::value_c");
  }
}
e_c_id_meas_report_ies_o::value_c::value_c(const e_c_id_meas_report_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::e_c_id_meas_result:
      c.init(other.c.get<e_c_id_meas_result_s>());
      break;
    case types::cell_portion_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_report_ies_o::value_c");
  }
}
e_c_id_meas_report_ies_o::value_c&
e_c_id_meas_report_ies_o::value_c::operator=(const e_c_id_meas_report_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::e_c_id_meas_result:
      c.set(other.c.get<e_c_id_meas_result_s>());
      break;
    case types::cell_portion_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_report_ies_o::value_c");
  }

  return *this;
}
uint64_t& e_c_id_meas_report_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& e_c_id_meas_report_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& e_c_id_meas_report_ies_o::value_c::lmf_ue_meas_id()
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& e_c_id_meas_report_ies_o::value_c::ran_ue_meas_id()
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
e_c_id_meas_result_s& e_c_id_meas_report_ies_o::value_c::e_c_id_meas_result()
{
  assert_choice_type(types::e_c_id_meas_result, type_, "Value");
  return c.get<e_c_id_meas_result_s>();
}
uint16_t& e_c_id_meas_report_ies_o::value_c::cell_portion_id()
{
  assert_choice_type(types::cell_portion_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint64_t& e_c_id_meas_report_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& e_c_id_meas_report_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& e_c_id_meas_report_ies_o::value_c::lmf_ue_meas_id() const
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& e_c_id_meas_report_ies_o::value_c::ran_ue_meas_id() const
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const e_c_id_meas_result_s& e_c_id_meas_report_ies_o::value_c::e_c_id_meas_result() const
{
  assert_choice_type(types::e_c_id_meas_result, type_, "Value");
  return c.get<e_c_id_meas_result_s>();
}
const uint16_t& e_c_id_meas_report_ies_o::value_c::cell_portion_id() const
{
  assert_choice_type(types::cell_portion_id, type_, "Value");
  return c.get<uint16_t>();
}
void e_c_id_meas_report_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::e_c_id_meas_result:
      j.write_fieldname("E-CID-MeasurementResult");
      c.get<e_c_id_meas_result_s>().to_json(j);
      break;
    case types::cell_portion_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_report_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE e_c_id_meas_report_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::e_c_id_meas_result:
      HANDLE_CODE(c.get<e_c_id_meas_result_s>().pack(bref));
      break;
    case types::cell_portion_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_report_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_report_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::e_c_id_meas_result:
      HANDLE_CODE(c.get<e_c_id_meas_result_s>().unpack(bref));
      break;
    case types::cell_portion_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_report_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

e_c_id_meas_report_ies_container::e_c_id_meas_report_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  lmf_ue_meas_id(412, crit_e::reject),
  ran_ue_meas_id(413, crit_e::reject),
  e_c_id_meas_result(417, crit_e::ignore),
  cell_portion_id(418, crit_e::ignore)
{
}
SRSASN_CODE e_c_id_meas_report_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  nof_ies += cell_portion_id_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(lmf_ue_meas_id.pack(bref));
  HANDLE_CODE(ran_ue_meas_id.pack(bref));
  HANDLE_CODE(e_c_id_meas_result.pack(bref));
  if (cell_portion_id_present) {
    HANDLE_CODE(cell_portion_id.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_report_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 412: {
        nof_mandatory_ies--;
        lmf_ue_meas_id.id = id;
        HANDLE_CODE(lmf_ue_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lmf_ue_meas_id.value.unpack(bref));
        break;
      }
      case 413: {
        nof_mandatory_ies--;
        ran_ue_meas_id.id = id;
        HANDLE_CODE(ran_ue_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_meas_id.value.unpack(bref));
        break;
      }
      case 417: {
        nof_mandatory_ies--;
        e_c_id_meas_result.id = id;
        HANDLE_CODE(e_c_id_meas_result.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(e_c_id_meas_result.value.unpack(bref));
        break;
      }
      case 418: {
        cell_portion_id_present = true;
        cell_portion_id.id      = id;
        HANDLE_CODE(cell_portion_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cell_portion_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void e_c_id_meas_report_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  lmf_ue_meas_id.to_json(j);
  j.write_fieldname("");
  ran_ue_meas_id.to_json(j);
  j.write_fieldname("");
  e_c_id_meas_result.to_json(j);
  if (cell_portion_id_present) {
    j.write_fieldname("");
    cell_portion_id.to_json(j);
  }
  j.end_obj();
}

// E-CIDMeasurementTerminationCommand-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t e_c_id_meas_termination_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 412, 413};
  return map_enum_number(names, 4, idx, "id");
}
bool e_c_id_meas_termination_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 412, 413};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e e_c_id_meas_termination_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 412:
      return crit_e::reject;
    case 413:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
e_c_id_meas_termination_cmd_ies_o::value_c e_c_id_meas_termination_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 412:
      ret.set(value_c::types::lmf_ue_meas_id);
      break;
    case 413:
      ret.set(value_c::types::ran_ue_meas_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e e_c_id_meas_termination_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 412:
      return presence_e::mandatory;
    case 413:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void e_c_id_meas_termination_cmd_ies_o::value_c::destroy_() {}
void e_c_id_meas_termination_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
e_c_id_meas_termination_cmd_ies_o::value_c::value_c(const e_c_id_meas_termination_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_termination_cmd_ies_o::value_c");
  }
}
e_c_id_meas_termination_cmd_ies_o::value_c&
e_c_id_meas_termination_cmd_ies_o::value_c::operator=(const e_c_id_meas_termination_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_termination_cmd_ies_o::value_c");
  }

  return *this;
}
uint64_t& e_c_id_meas_termination_cmd_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& e_c_id_meas_termination_cmd_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& e_c_id_meas_termination_cmd_ies_o::value_c::lmf_ue_meas_id()
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& e_c_id_meas_termination_cmd_ies_o::value_c::ran_ue_meas_id()
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint64_t& e_c_id_meas_termination_cmd_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& e_c_id_meas_termination_cmd_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& e_c_id_meas_termination_cmd_ies_o::value_c::lmf_ue_meas_id() const
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& e_c_id_meas_termination_cmd_ies_o::value_c::ran_ue_meas_id() const
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
void e_c_id_meas_termination_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_termination_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE e_c_id_meas_termination_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_termination_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_termination_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_termination_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

e_c_id_meas_termination_cmd_ies_container::e_c_id_meas_termination_cmd_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  lmf_ue_meas_id(412, crit_e::reject),
  ran_ue_meas_id(413, crit_e::reject)
{
}
SRSASN_CODE e_c_id_meas_termination_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(lmf_ue_meas_id.pack(bref));
  HANDLE_CODE(ran_ue_meas_id.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_termination_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 412: {
        nof_mandatory_ies--;
        lmf_ue_meas_id.id = id;
        HANDLE_CODE(lmf_ue_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lmf_ue_meas_id.value.unpack(bref));
        break;
      }
      case 413: {
        nof_mandatory_ies--;
        ran_ue_meas_id.id = id;
        HANDLE_CODE(ran_ue_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_meas_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void e_c_id_meas_termination_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  lmf_ue_meas_id.to_json(j);
  j.write_fieldname("");
  ran_ue_meas_id.to_json(j);
  j.end_obj();
}

// ErrorIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t error_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 40, 41, 0, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool error_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 40, 41, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e error_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 40:
      return crit_e::ignore;
    case 41:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
error_ind_ies_o::value_c error_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e error_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 40:
      return presence_e::optional;
    case 41:
      return presence_e::optional;
    case 0:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void error_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void error_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
  }
}
error_ind_ies_o::value_c::value_c(const error_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
  }
}
error_ind_ies_o::value_c& error_ind_ies_o::value_c::operator=(const error_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& error_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint64_t& error_ind_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& error_ind_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& error_ind_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& error_ind_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& error_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint64_t& error_ind_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& error_ind_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& error_ind_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& error_ind_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void error_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE error_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE error_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

error_ind_ies_container::error_ind_ies_container() :
  transaction_id(78, crit_e::reject),
  gnb_cu_ue_f1ap_id(40, crit_e::ignore),
  gnb_du_ue_f1ap_id(41, crit_e::ignore),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE error_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += gnb_cu_ue_f1ap_id_present ? 1 : 0;
  nof_ies += gnb_du_ue_f1ap_id_present ? 1 : 0;
  nof_ies += cause_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (gnb_cu_ue_f1ap_id_present) {
    HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  }
  if (gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  }
  if (cause_present) {
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE error_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 40: {
        gnb_cu_ue_f1ap_id_present = true;
        gnb_cu_ue_f1ap_id.id      = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        gnb_du_ue_f1ap_id_present = true;
        gnb_du_ue_f1ap_id.id      = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        cause_present = true;
        cause.id      = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void error_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (gnb_cu_ue_f1ap_id_present) {
    j.write_fieldname("");
    gnb_cu_ue_f1ap_id.to_json(j);
  }
  if (gnb_du_ue_f1ap_id_present) {
    j.write_fieldname("");
    gnb_du_ue_f1ap_id.to_json(j);
  }
  if (cause_present) {
    j.write_fieldname("");
    cause.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// SemipersistentSRS-ExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t semipersistent_srs_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {435};
  return map_enum_number(names, 1, idx, "id");
}
bool semipersistent_srs_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 435 == id;
}
crit_e semipersistent_srs_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 435) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
semipersistent_srs_ext_ies_o::ext_c semipersistent_srs_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 435) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e semipersistent_srs_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 435) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void semipersistent_srs_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SpatialRelationPerSRSResource");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE semipersistent_srs_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE semipersistent_srs_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// UE-associatedLogicalF1-ConnectionItemRes ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_associated_lc_f1_conn_item_res_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {80};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_associated_lc_f1_conn_item_res_o::is_id_valid(const uint32_t& id)
{
  return 80 == id;
}
crit_e ue_associated_lc_f1_conn_item_res_o::get_crit(const uint32_t& id)
{
  if (id == 80) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_associated_lc_f1_conn_item_res_o::value_c ue_associated_lc_f1_conn_item_res_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 80) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_associated_lc_f1_conn_item_res_o::get_presence(const uint32_t& id)
{
  if (id == 80) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_associated_lc_f1_conn_item_res_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UE-associatedLogicalF1-ConnectionItem");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_associated_lc_f1_conn_item_res_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_associated_lc_f1_conn_item_res_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// GNB-CU-TNL-Association-Failed-To-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {135};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 135 == id;
}
crit_e gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 135) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::value_c
gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 135) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 135) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-CU-TNL-Association-Failed-To-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// GNB-CU-TNL-Association-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_tnl_assoc_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {133};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_cu_tnl_assoc_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 133 == id;
}
crit_e gnb_cu_tnl_assoc_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 133) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_cu_tnl_assoc_setup_item_ies_o::value_c gnb_cu_tnl_assoc_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 133) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_tnl_assoc_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 133) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_tnl_assoc_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-CU-TNL-Association-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_cu_tnl_assoc_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// GNB-CU-TNL-Association-To-Add-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_tnl_assoc_to_add_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {120};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_cu_tnl_assoc_to_add_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 120 == id;
}
crit_e gnb_cu_tnl_assoc_to_add_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 120) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_cu_tnl_assoc_to_add_item_ies_o::value_c gnb_cu_tnl_assoc_to_add_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 120) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_tnl_assoc_to_add_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 120) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_tnl_assoc_to_add_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-CU-TNL-Association-To-Add-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_cu_tnl_assoc_to_add_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_to_add_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// GNB-CU-TNL-Association-To-Remove-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_tnl_assoc_to_rem_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {122};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_cu_tnl_assoc_to_rem_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 122 == id;
}
crit_e gnb_cu_tnl_assoc_to_rem_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 122) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_cu_tnl_assoc_to_rem_item_ies_o::value_c gnb_cu_tnl_assoc_to_rem_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 122) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_tnl_assoc_to_rem_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 122) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_tnl_assoc_to_rem_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-CU-TNL-Association-To-Remove-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_cu_tnl_assoc_to_rem_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_to_rem_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// GNB-CU-TNL-Association-To-Update-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_tnl_assoc_to_upd_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {124};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_cu_tnl_assoc_to_upd_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 124 == id;
}
crit_e gnb_cu_tnl_assoc_to_upd_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 124) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_cu_tnl_assoc_to_upd_item_ies_o::value_c gnb_cu_tnl_assoc_to_upd_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 124) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_tnl_assoc_to_upd_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 124) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_tnl_assoc_to_upd_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-CU-TNL-Association-To-Update-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_cu_tnl_assoc_to_upd_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_to_upd_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// GNB-DU-Served-Cells-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_served_cells_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {43};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_du_served_cells_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 43 == id;
}
crit_e gnb_du_served_cells_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 43) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_du_served_cells_item_ies_o::value_c gnb_du_served_cells_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 43) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_served_cells_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 43) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_served_cells_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-DU-Served-Cells-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_du_served_cells_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_served_cells_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// GNB-DU-TNL-Association-To-Remove-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_tnl_assoc_to_rem_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {227};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_du_tnl_assoc_to_rem_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 227 == id;
}
crit_e gnb_du_tnl_assoc_to_rem_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 227) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_du_tnl_assoc_to_rem_item_ies_o::value_c gnb_du_tnl_assoc_to_rem_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 227) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_tnl_assoc_to_rem_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 227) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_tnl_assoc_to_rem_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-DU-TNL-Association-To-Remove-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_du_tnl_assoc_to_rem_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_tnl_assoc_to_rem_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// IAB-Allocated-TNL-Address-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_allocated_tnl_address_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {295};
  return map_enum_number(names, 1, idx, "id");
}
bool iab_allocated_tnl_address_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 295 == id;
}
crit_e iab_allocated_tnl_address_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 295) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
iab_allocated_tnl_address_list_item_ies_o::value_c
iab_allocated_tnl_address_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 295) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_allocated_tnl_address_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 295) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void iab_allocated_tnl_address_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("IAB-Allocated-TNL-Address-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE iab_allocated_tnl_address_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_allocated_tnl_address_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// IAB-TNL-Addresses-To-Remove-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_tnl_addresses_to_rem_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {293};
  return map_enum_number(names, 1, idx, "id");
}
bool iab_tnl_addresses_to_rem_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 293 == id;
}
crit_e iab_tnl_addresses_to_rem_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 293) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
iab_tnl_addresses_to_rem_item_ies_o::value_c iab_tnl_addresses_to_rem_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 293) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_tnl_addresses_to_rem_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 293) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void iab_tnl_addresses_to_rem_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("IAB-TNL-Addresses-To-Remove-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE iab_tnl_addresses_to_rem_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_tnl_addresses_to_rem_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MC-PagingCell-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t mc_paging_cell_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {688};
  return map_enum_number(names, 1, idx, "id");
}
bool mc_paging_cell_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 688 == id;
}
crit_e mc_paging_cell_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 688) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
mc_paging_cell_item_ies_o::value_c mc_paging_cell_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 688) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e mc_paging_cell_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 688) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void mc_paging_cell_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MC-PagingCell-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE mc_paging_cell_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE mc_paging_cell_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MulticastF1UContext-FailedToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_f1_u_context_failed_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {508};
  return map_enum_number(names, 1, idx, "id");
}
bool multicast_f1_u_context_failed_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 508 == id;
}
crit_e multicast_f1_u_context_failed_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 508) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
multicast_f1_u_context_failed_to_be_setup_item_ies_o::value_c
multicast_f1_u_context_failed_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 508) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_f1_u_context_failed_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 508) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void multicast_f1_u_context_failed_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MulticastF1UContext-FailedToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE multicast_f1_u_context_failed_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_f1_u_context_failed_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MulticastF1UContext-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_f1_u_context_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {506};
  return map_enum_number(names, 1, idx, "id");
}
bool multicast_f1_u_context_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 506 == id;
}
crit_e multicast_f1_u_context_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 506) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
multicast_f1_u_context_setup_item_ies_o::value_c multicast_f1_u_context_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 506) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_f1_u_context_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 506) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void multicast_f1_u_context_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MulticastF1UContext-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE multicast_f1_u_context_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_f1_u_context_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MulticastF1UContext-ToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_f1_u_context_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {504};
  return map_enum_number(names, 1, idx, "id");
}
bool multicast_f1_u_context_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 504 == id;
}
crit_e multicast_f1_u_context_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 504) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
multicast_f1_u_context_to_be_setup_item_ies_o::value_c
multicast_f1_u_context_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 504) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_f1_u_context_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 504) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void multicast_f1_u_context_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MulticastF1UContext-ToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE multicast_f1_u_context_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_f1_u_context_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MulticastMRBs-FailedToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_m_rbs_failed_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {483};
  return map_enum_number(names, 1, idx, "id");
}
bool multicast_m_rbs_failed_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 483 == id;
}
crit_e multicast_m_rbs_failed_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 483) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
multicast_m_rbs_failed_to_be_modified_item_ies_o::value_c
multicast_m_rbs_failed_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 483) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_m_rbs_failed_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 483) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void multicast_m_rbs_failed_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MulticastMRBs-FailedToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE multicast_m_rbs_failed_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_m_rbs_failed_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MulticastMRBs-FailedToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_m_rbs_failed_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {485};
  return map_enum_number(names, 1, idx, "id");
}
bool multicast_m_rbs_failed_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 485 == id;
}
crit_e multicast_m_rbs_failed_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 485) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
multicast_m_rbs_failed_to_be_setup_item_ies_o::value_c
multicast_m_rbs_failed_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 485) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_m_rbs_failed_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 485) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void multicast_m_rbs_failed_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MulticastMRBs-FailedToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE multicast_m_rbs_failed_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_m_rbs_failed_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MulticastMRBs-FailedToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_m_rbs_failed_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {487};
  return map_enum_number(names, 1, idx, "id");
}
bool multicast_m_rbs_failed_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 487 == id;
}
crit_e multicast_m_rbs_failed_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 487) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
multicast_m_rbs_failed_to_be_setup_mod_item_ies_o::value_c
multicast_m_rbs_failed_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 487) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_m_rbs_failed_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 487) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void multicast_m_rbs_failed_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MulticastMRBs-FailedToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE multicast_m_rbs_failed_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_m_rbs_failed_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MulticastMRBs-Modified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_m_rbs_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {489};
  return map_enum_number(names, 1, idx, "id");
}
bool multicast_m_rbs_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 489 == id;
}
crit_e multicast_m_rbs_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 489) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
multicast_m_rbs_modified_item_ies_o::value_c multicast_m_rbs_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 489) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_m_rbs_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 489) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void multicast_m_rbs_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MulticastMRBs-Modified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE multicast_m_rbs_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_m_rbs_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MulticastMRBs-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_m_rbs_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {491};
  return map_enum_number(names, 1, idx, "id");
}
bool multicast_m_rbs_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 491 == id;
}
crit_e multicast_m_rbs_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 491) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
multicast_m_rbs_setup_item_ies_o::value_c multicast_m_rbs_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 491) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_m_rbs_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 491) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void multicast_m_rbs_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MulticastMRBs-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE multicast_m_rbs_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_m_rbs_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MulticastMRBs-SetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_m_rbs_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {493};
  return map_enum_number(names, 1, idx, "id");
}
bool multicast_m_rbs_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 493 == id;
}
crit_e multicast_m_rbs_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 493) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
multicast_m_rbs_setup_mod_item_ies_o::value_c multicast_m_rbs_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 493) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_m_rbs_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 493) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void multicast_m_rbs_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MulticastMRBs-SetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE multicast_m_rbs_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_m_rbs_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MulticastMRBs-ToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_m_rbs_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {495};
  return map_enum_number(names, 1, idx, "id");
}
bool multicast_m_rbs_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 495 == id;
}
crit_e multicast_m_rbs_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 495) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
multicast_m_rbs_to_be_modified_item_ies_o::value_c
multicast_m_rbs_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 495) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_m_rbs_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 495) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void multicast_m_rbs_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MulticastMRBs-ToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE multicast_m_rbs_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_m_rbs_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MulticastMRBs-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_m_rbs_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {497};
  return map_enum_number(names, 1, idx, "id");
}
bool multicast_m_rbs_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 497 == id;
}
crit_e multicast_m_rbs_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 497) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
multicast_m_rbs_to_be_released_item_ies_o::value_c
multicast_m_rbs_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 497) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_m_rbs_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 497) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void multicast_m_rbs_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MulticastMRBs-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE multicast_m_rbs_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_m_rbs_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MulticastMRBs-ToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_m_rbs_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {499};
  return map_enum_number(names, 1, idx, "id");
}
bool multicast_m_rbs_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 499 == id;
}
crit_e multicast_m_rbs_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 499) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
multicast_m_rbs_to_be_setup_item_ies_o::value_c multicast_m_rbs_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 499) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_m_rbs_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 499) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void multicast_m_rbs_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MulticastMRBs-ToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE multicast_m_rbs_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_m_rbs_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// MulticastMRBs-ToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_m_rbs_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {501};
  return map_enum_number(names, 1, idx, "id");
}
bool multicast_m_rbs_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 501 == id;
}
crit_e multicast_m_rbs_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 501) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
multicast_m_rbs_to_be_setup_mod_item_ies_o::value_c
multicast_m_rbs_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 501) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_m_rbs_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 501) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void multicast_m_rbs_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("MulticastMRBs-ToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE multicast_m_rbs_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_m_rbs_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// NR-CGI-List-For-Restart-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t nr_cgi_list_for_restart_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {153};
  return map_enum_number(names, 1, idx, "id");
}
bool nr_cgi_list_for_restart_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 153 == id;
}
crit_e nr_cgi_list_for_restart_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 153) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
nr_cgi_list_for_restart_list_item_ies_o::value_c nr_cgi_list_for_restart_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 153) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e nr_cgi_list_for_restart_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 153) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void nr_cgi_list_for_restart_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("NR-CGI-List-For-Restart-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE nr_cgi_list_for_restart_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE nr_cgi_list_for_restart_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// Neighbour-Cell-Information-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t neighbour_cell_info_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {255};
  return map_enum_number(names, 1, idx, "id");
}
bool neighbour_cell_info_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 255 == id;
}
crit_e neighbour_cell_info_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 255) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
neighbour_cell_info_item_ies_o::value_c neighbour_cell_info_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 255) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e neighbour_cell_info_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 255) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void neighbour_cell_info_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Neighbour-Cell-Information-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE neighbour_cell_info_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE neighbour_cell_info_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// PWS-Failed-NR-CGI-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_failed_nr_cgi_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {155};
  return map_enum_number(names, 1, idx, "id");
}
bool pws_failed_nr_cgi_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 155 == id;
}
crit_e pws_failed_nr_cgi_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 155) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
pws_failed_nr_cgi_list_item_ies_o::value_c pws_failed_nr_cgi_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 155) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_failed_nr_cgi_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 155) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void pws_failed_nr_cgi_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("PWS-Failed-NR-CGI-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE pws_failed_nr_cgi_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_failed_nr_cgi_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// PagingCell-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t paging_cell_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {112};
  return map_enum_number(names, 1, idx, "id");
}
bool paging_cell_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 112 == id;
}
crit_e paging_cell_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 112) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
paging_cell_item_ies_o::value_c paging_cell_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 112) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e paging_cell_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 112) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void paging_cell_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("PagingCell-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE paging_cell_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_cell_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// Potential-SpCell-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t potential_sp_cell_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {93};
  return map_enum_number(names, 1, idx, "id");
}
bool potential_sp_cell_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 93 == id;
}
crit_e potential_sp_cell_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 93) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
potential_sp_cell_item_ies_o::value_c potential_sp_cell_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 93) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e potential_sp_cell_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 93) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void potential_sp_cell_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Potential-SpCell-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE potential_sp_cell_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE potential_sp_cell_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// Protected-EUTRA-Resources-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t protected_eutra_res_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {168};
  return map_enum_number(names, 1, idx, "id");
}
bool protected_eutra_res_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 168 == id;
}
crit_e protected_eutra_res_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 168) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
protected_eutra_res_item_ies_o::value_c protected_eutra_res_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 168) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e protected_eutra_res_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 168) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void protected_eutra_res_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Protected-EUTRA-Resources-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE protected_eutra_res_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE protected_eutra_res_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// ResetAll ::= ENUMERATED
const char* reset_all_opts::to_string() const
{
  static const char* names[] = {"reset-all"};
  return convert_enum_idx(names, 1, value, "reset_all_e");
}

// SCell-FailedtoSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t scell_failedto_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {84};
  return map_enum_number(names, 1, idx, "id");
}
bool scell_failedto_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 84 == id;
}
crit_e scell_failedto_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 84) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
scell_failedto_setup_item_ies_o::value_c scell_failedto_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 84) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e scell_failedto_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 84) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void scell_failedto_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SCell-FailedtoSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE scell_failedto_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_failedto_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SCell-FailedtoSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t scell_failedto_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {86};
  return map_enum_number(names, 1, idx, "id");
}
bool scell_failedto_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 86 == id;
}
crit_e scell_failedto_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 86) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
scell_failedto_setup_mod_item_ies_o::value_c scell_failedto_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 86) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e scell_failedto_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 86) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void scell_failedto_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SCell-FailedtoSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE scell_failedto_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_failedto_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SCell-ToBeRemoved-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t scell_to_be_remd_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {51};
  return map_enum_number(names, 1, idx, "id");
}
bool scell_to_be_remd_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 51 == id;
}
crit_e scell_to_be_remd_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 51) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
scell_to_be_remd_item_ies_o::value_c scell_to_be_remd_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 51) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e scell_to_be_remd_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 51) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void scell_to_be_remd_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SCell-ToBeRemoved-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE scell_to_be_remd_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_to_be_remd_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SCell-ToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t scell_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {53};
  return map_enum_number(names, 1, idx, "id");
}
bool scell_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 53 == id;
}
crit_e scell_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 53) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
scell_to_be_setup_item_ies_o::value_c scell_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 53) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e scell_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 53) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void scell_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SCell-ToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE scell_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SCell-ToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t scell_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {55};
  return map_enum_number(names, 1, idx, "id");
}
bool scell_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 55 == id;
}
crit_e scell_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 55) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
scell_to_be_setup_mod_item_ies_o::value_c scell_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 55) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e scell_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 55) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void scell_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SCell-ToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE scell_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SLDRBs-FailedToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sl_drbs_failed_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {313};
  return map_enum_number(names, 1, idx, "id");
}
bool sl_drbs_failed_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 313 == id;
}
crit_e sl_drbs_failed_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 313) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sl_drbs_failed_to_be_modified_item_ies_o::value_c
sl_drbs_failed_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 313) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sl_drbs_failed_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 313) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void sl_drbs_failed_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SLDRBs-FailedToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE sl_drbs_failed_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drbs_failed_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SLDRBs-FailedToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sl_drbs_failed_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {315};
  return map_enum_number(names, 1, idx, "id");
}
bool sl_drbs_failed_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 315 == id;
}
crit_e sl_drbs_failed_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 315) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sl_drbs_failed_to_be_setup_item_ies_o::value_c sl_drbs_failed_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 315) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sl_drbs_failed_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 315) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void sl_drbs_failed_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SLDRBs-FailedToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE sl_drbs_failed_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drbs_failed_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SLDRBs-FailedToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sl_drbs_failed_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {336};
  return map_enum_number(names, 1, idx, "id");
}
bool sl_drbs_failed_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 336 == id;
}
crit_e sl_drbs_failed_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 336) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sl_drbs_failed_to_be_setup_mod_item_ies_o::value_c
sl_drbs_failed_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 336) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sl_drbs_failed_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 336) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void sl_drbs_failed_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SLDRBs-FailedToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE sl_drbs_failed_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drbs_failed_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SLDRBs-Modified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sl_drbs_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {317};
  return map_enum_number(names, 1, idx, "id");
}
bool sl_drbs_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 317 == id;
}
crit_e sl_drbs_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 317) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sl_drbs_modified_item_ies_o::value_c sl_drbs_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 317) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sl_drbs_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 317) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void sl_drbs_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SLDRBs-Modified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE sl_drbs_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drbs_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SLDRBs-ModifiedConf-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sl_drbs_modified_conf_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {338};
  return map_enum_number(names, 1, idx, "id");
}
bool sl_drbs_modified_conf_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 338 == id;
}
crit_e sl_drbs_modified_conf_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 338) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sl_drbs_modified_conf_item_ies_o::value_c sl_drbs_modified_conf_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 338) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sl_drbs_modified_conf_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 338) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void sl_drbs_modified_conf_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SLDRBs-ModifiedConf-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE sl_drbs_modified_conf_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drbs_modified_conf_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SLDRBs-Required-ToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sl_drbs_required_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {319};
  return map_enum_number(names, 1, idx, "id");
}
bool sl_drbs_required_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 319 == id;
}
crit_e sl_drbs_required_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 319) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sl_drbs_required_to_be_modified_item_ies_o::value_c
sl_drbs_required_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 319) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sl_drbs_required_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 319) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void sl_drbs_required_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SLDRBs-Required-ToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE sl_drbs_required_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drbs_required_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SLDRBs-Required-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sl_drbs_required_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {321};
  return map_enum_number(names, 1, idx, "id");
}
bool sl_drbs_required_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 321 == id;
}
crit_e sl_drbs_required_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 321) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sl_drbs_required_to_be_released_item_ies_o::value_c
sl_drbs_required_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 321) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sl_drbs_required_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 321) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void sl_drbs_required_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SLDRBs-Required-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE sl_drbs_required_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drbs_required_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SLDRBs-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sl_drbs_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {323};
  return map_enum_number(names, 1, idx, "id");
}
bool sl_drbs_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 323 == id;
}
crit_e sl_drbs_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 323) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sl_drbs_setup_item_ies_o::value_c sl_drbs_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 323) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sl_drbs_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 323) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void sl_drbs_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SLDRBs-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE sl_drbs_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drbs_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SLDRBs-SetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sl_drbs_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {335};
  return map_enum_number(names, 1, idx, "id");
}
bool sl_drbs_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 335 == id;
}
crit_e sl_drbs_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 335) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sl_drbs_setup_mod_item_ies_o::value_c sl_drbs_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 335) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sl_drbs_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 335) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void sl_drbs_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SLDRBs-SetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE sl_drbs_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drbs_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SLDRBs-ToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sl_drbs_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {325};
  return map_enum_number(names, 1, idx, "id");
}
bool sl_drbs_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 325 == id;
}
crit_e sl_drbs_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 325) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sl_drbs_to_be_modified_item_ies_o::value_c sl_drbs_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 325) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sl_drbs_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 325) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void sl_drbs_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SLDRBs-ToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE sl_drbs_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drbs_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SLDRBs-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sl_drbs_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {327};
  return map_enum_number(names, 1, idx, "id");
}
bool sl_drbs_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 327 == id;
}
crit_e sl_drbs_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 327) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sl_drbs_to_be_released_item_ies_o::value_c sl_drbs_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 327) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sl_drbs_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 327) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void sl_drbs_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SLDRBs-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE sl_drbs_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drbs_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SLDRBs-ToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sl_drbs_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {329};
  return map_enum_number(names, 1, idx, "id");
}
bool sl_drbs_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 329 == id;
}
crit_e sl_drbs_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 329) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sl_drbs_to_be_setup_item_ies_o::value_c sl_drbs_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 329) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sl_drbs_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 329) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void sl_drbs_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SLDRBs-ToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE sl_drbs_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drbs_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SLDRBs-ToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sl_drbs_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {331};
  return map_enum_number(names, 1, idx, "id");
}
bool sl_drbs_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 331 == id;
}
crit_e sl_drbs_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 331) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sl_drbs_to_be_setup_mod_item_ies_o::value_c sl_drbs_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 331) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sl_drbs_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 331) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void sl_drbs_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SLDRBs-ToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE sl_drbs_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drbs_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SRBs-FailedToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_failed_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {65};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_failed_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 65 == id;
}
crit_e srbs_failed_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 65) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_failed_to_be_setup_item_ies_o::value_c srbs_failed_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 65) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_failed_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 65) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_failed_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-FailedToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_failed_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_failed_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SRBs-FailedToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_failed_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {67};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_failed_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 67 == id;
}
crit_e srbs_failed_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 67) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_failed_to_be_setup_mod_item_ies_o::value_c srbs_failed_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 67) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_failed_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 67) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_failed_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-FailedToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_failed_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_failed_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SRBs-Modified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {207};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 207 == id;
}
crit_e srbs_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 207) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_modified_item_ies_o::value_c srbs_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 207) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 207) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-Modified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SRBs-Required-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_required_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {69};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_required_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 69 == id;
}
crit_e srbs_required_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 69) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_required_to_be_released_item_ies_o::value_c srbs_required_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 69) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_required_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 69) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_required_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-Required-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_required_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_required_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SRBs-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {203};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 203 == id;
}
crit_e srbs_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 203) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_setup_item_ies_o::value_c srbs_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 203) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 203) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SRBs-SetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {205};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 205 == id;
}
crit_e srbs_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 205) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_setup_mod_item_ies_o::value_c srbs_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 205) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 205) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-SetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SRBs-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {71};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 71 == id;
}
crit_e srbs_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 71) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_to_be_released_item_ies_o::value_c srbs_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 71) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 71) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SRBs-ToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {73};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 73 == id;
}
crit_e srbs_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 73) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_to_be_setup_item_ies_o::value_c srbs_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 73) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 73) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-ToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SRBs-ToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {75};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 75 == id;
}
crit_e srbs_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 75) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_to_be_setup_mod_item_ies_o::value_c srbs_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 75) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 75) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-ToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// SemipersistentSRS ::= SEQUENCE
SRSASN_CODE semipersistent_srs_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(srs_spatial_relation_present, 1));
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, srs_res_set_id, (uint8_t)0u, (uint8_t)15u, true, true));
  if (srs_spatial_relation_present) {
    HANDLE_CODE(srs_spatial_relation.pack(bref));
  }
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE semipersistent_srs_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(srs_spatial_relation_present, 1));
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(srs_res_set_id, bref, (uint8_t)0u, (uint8_t)15u, true, true));
  if (srs_spatial_relation_present) {
    HANDLE_CODE(srs_spatial_relation.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void semipersistent_srs_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sRSResourceSetID", srs_res_set_id);
  if (srs_spatial_relation_present) {
    j.write_fieldname("sRSSpatialRelation");
    srs_spatial_relation.to_json(j);
  }
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// Served-Cells-To-Add-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t served_cells_to_add_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {57};
  return map_enum_number(names, 1, idx, "id");
}
bool served_cells_to_add_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 57 == id;
}
crit_e served_cells_to_add_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 57) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
served_cells_to_add_item_ies_o::value_c served_cells_to_add_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 57) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e served_cells_to_add_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 57) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void served_cells_to_add_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Served-Cells-To-Add-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE served_cells_to_add_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE served_cells_to_add_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// Served-Cells-To-Delete-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t served_cells_to_delete_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {59};
  return map_enum_number(names, 1, idx, "id");
}
bool served_cells_to_delete_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 59 == id;
}
crit_e served_cells_to_delete_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 59) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
served_cells_to_delete_item_ies_o::value_c served_cells_to_delete_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 59) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e served_cells_to_delete_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 59) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void served_cells_to_delete_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Served-Cells-To-Delete-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE served_cells_to_delete_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE served_cells_to_delete_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// Served-Cells-To-Modify-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t served_cells_to_modify_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {61};
  return map_enum_number(names, 1, idx, "id");
}
bool served_cells_to_modify_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 61 == id;
}
crit_e served_cells_to_modify_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 61) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
served_cells_to_modify_item_ies_o::value_c served_cells_to_modify_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 61) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e served_cells_to_modify_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 61) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void served_cells_to_modify_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Served-Cells-To-Modify-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE served_cells_to_modify_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE served_cells_to_modify_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// ServingCellMO-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t serving_cell_mo_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {696};
  return map_enum_number(names, 1, idx, "id");
}
bool serving_cell_mo_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 696 == id;
}
crit_e serving_cell_mo_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 696) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
serving_cell_mo_list_item_ies_o::value_c serving_cell_mo_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 696) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e serving_cell_mo_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 696) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void serving_cell_mo_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("ServingCellMO-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE serving_cell_mo_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE serving_cell_mo_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// TRPInformationItemTRPResp ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t trp_info_item_trp_resp_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {401};
  return map_enum_number(names, 1, idx, "id");
}
bool trp_info_item_trp_resp_o::is_id_valid(const uint32_t& id)
{
  return 401 == id;
}
crit_e trp_info_item_trp_resp_o::get_crit(const uint32_t& id)
{
  if (id == 401) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
trp_info_item_trp_resp_o::value_c trp_info_item_trp_resp_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 401) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e trp_info_item_trp_resp_o::get_presence(const uint32_t& id)
{
  if (id == 401) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void trp_info_item_trp_resp_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("TRPInformationItem");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE trp_info_item_trp_resp_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_item_trp_resp_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// TRPInformationTypeItemTRPReq ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t trp_info_type_item_trp_req_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {399};
  return map_enum_number(names, 1, idx, "id");
}
bool trp_info_type_item_trp_req_o::is_id_valid(const uint32_t& id)
{
  return 399 == id;
}
crit_e trp_info_type_item_trp_req_o::get_crit(const uint32_t& id)
{
  if (id == 399) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
trp_info_type_item_trp_req_o::value_c trp_info_type_item_trp_req_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 399) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e trp_info_type_item_trp_req_o::get_presence(const uint32_t& id)
{
  if (id == 399) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void trp_info_type_item_trp_req_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("TRPInformationTypeItem", c.to_string());
  j.end_obj();
}
SRSASN_CODE trp_info_type_item_trp_req_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_type_item_trp_req_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// UE-MulticastMRBs-ConfirmedToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_multicast_m_rbs_confirmed_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {654};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_multicast_m_rbs_confirmed_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 654 == id;
}
crit_e ue_multicast_m_rbs_confirmed_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 654) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_multicast_m_rbs_confirmed_to_be_modified_item_ies_o::value_c
ue_multicast_m_rbs_confirmed_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 654) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_multicast_m_rbs_confirmed_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 654) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_multicast_m_rbs_confirmed_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UE-MulticastMRBs-ConfirmedToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_multicast_m_rbs_confirmed_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_multicast_m_rbs_confirmed_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// UE-MulticastMRBs-RequiredToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_multicast_m_rbs_required_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {656};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_multicast_m_rbs_required_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 656 == id;
}
crit_e ue_multicast_m_rbs_required_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 656) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_multicast_m_rbs_required_to_be_modified_item_ies_o::value_c
ue_multicast_m_rbs_required_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 656) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_multicast_m_rbs_required_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 656) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_multicast_m_rbs_required_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UE-MulticastMRBs-RequiredToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_multicast_m_rbs_required_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_multicast_m_rbs_required_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// UE-MulticastMRBs-RequiredToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_multicast_m_rbs_required_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {658};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_multicast_m_rbs_required_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 658 == id;
}
crit_e ue_multicast_m_rbs_required_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 658) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_multicast_m_rbs_required_to_be_released_item_ies_o::value_c
ue_multicast_m_rbs_required_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 658) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_multicast_m_rbs_required_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 658) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_multicast_m_rbs_required_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UE-MulticastMRBs-RequiredToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_multicast_m_rbs_required_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_multicast_m_rbs_required_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// UE-MulticastMRBs-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_multicast_m_rbs_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {680};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_multicast_m_rbs_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 680 == id;
}
crit_e ue_multicast_m_rbs_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 680) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_multicast_m_rbs_setup_item_ies_o::value_c ue_multicast_m_rbs_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 680) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_multicast_m_rbs_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 680) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_multicast_m_rbs_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UE-MulticastMRBs-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_multicast_m_rbs_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_multicast_m_rbs_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// UE-MulticastMRBs-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_multicast_m_rbs_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {629};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_multicast_m_rbs_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 629 == id;
}
crit_e ue_multicast_m_rbs_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 629) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_multicast_m_rbs_to_be_released_item_ies_o::value_c
ue_multicast_m_rbs_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 629) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_multicast_m_rbs_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 629) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_multicast_m_rbs_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UE-MulticastMRBs-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_multicast_m_rbs_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_multicast_m_rbs_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// UE-MulticastMRBs-ToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_multicast_m_rbs_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {631};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_multicast_m_rbs_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 631 == id;
}
crit_e ue_multicast_m_rbs_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 631) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_multicast_m_rbs_to_be_setup_item_ies_o::value_c
ue_multicast_m_rbs_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 631) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_multicast_m_rbs_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 631) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_multicast_m_rbs_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UE-MulticastMRBs-ToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_multicast_m_rbs_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_multicast_m_rbs_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// UE-MulticastMRBs-ToBeSetup-atModify-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_multicast_m_rbs_to_be_setup_at_modify_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {686};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_multicast_m_rbs_to_be_setup_at_modify_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 686 == id;
}
crit_e ue_multicast_m_rbs_to_be_setup_at_modify_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 686) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_multicast_m_rbs_to_be_setup_at_modify_item_ies_o::value_c
ue_multicast_m_rbs_to_be_setup_at_modify_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 686) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_multicast_m_rbs_to_be_setup_at_modify_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 686) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_multicast_m_rbs_to_be_setup_at_modify_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UE-MulticastMRBs-ToBeSetup-atModify-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_multicast_m_rbs_to_be_setup_at_modify_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_multicast_m_rbs_to_be_setup_at_modify_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// UE-associatedLogicalF1-ConnectionItemResAck ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_associated_lc_f1_conn_item_res_ack_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {80};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_associated_lc_f1_conn_item_res_ack_o::is_id_valid(const uint32_t& id)
{
  return 80 == id;
}
crit_e ue_associated_lc_f1_conn_item_res_ack_o::get_crit(const uint32_t& id)
{
  if (id == 80) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_associated_lc_f1_conn_item_res_ack_o::value_c ue_associated_lc_f1_conn_item_res_ack_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 80) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_associated_lc_f1_conn_item_res_ack_o::get_presence(const uint32_t& id)
{
  if (id == 80) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_associated_lc_f1_conn_item_res_ack_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UE-associatedLogicalF1-ConnectionItem");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_associated_lc_f1_conn_item_res_ack_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_associated_lc_f1_conn_item_res_ack_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<ue_associated_lc_f1_conn_item_res_o>;

// UEIdentity-List-For-Paging-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_id_list_for_paging_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {480};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_id_list_for_paging_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 480 == id;
}
crit_e ue_id_list_for_paging_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 480) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_id_list_for_paging_item_ies_o::value_c ue_id_list_for_paging_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 480) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_id_list_for_paging_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 480) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_id_list_for_paging_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UEIdentity-List-For-Paging-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_id_list_for_paging_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_id_list_for_paging_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// UL-UP-TNL-Address-to-Update-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ul_up_tnl_address_to_upd_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {303};
  return map_enum_number(names, 1, idx, "id");
}
bool ul_up_tnl_address_to_upd_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 303 == id;
}
crit_e ul_up_tnl_address_to_upd_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 303) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ul_up_tnl_address_to_upd_list_item_ies_o::value_c
ul_up_tnl_address_to_upd_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 303) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ul_up_tnl_address_to_upd_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 303) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ul_up_tnl_address_to_upd_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UL-UP-TNL-Address-to-Update-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ul_up_tnl_address_to_upd_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_up_tnl_address_to_upd_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// UL-UP-TNL-Information-to-Update-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ul_up_tnl_info_to_upd_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {301};
  return map_enum_number(names, 1, idx, "id");
}
bool ul_up_tnl_info_to_upd_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 301 == id;
}
crit_e ul_up_tnl_info_to_upd_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 301) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ul_up_tnl_info_to_upd_list_item_ies_o::value_c ul_up_tnl_info_to_upd_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 301) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ul_up_tnl_info_to_upd_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 301) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ul_up_tnl_info_to_upd_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UL-UP-TNL-Information-to-Update-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ul_up_tnl_info_to_upd_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_up_tnl_info_to_upd_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<gnb_cu_tnl_assoc_failed_to_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<gnb_cu_tnl_assoc_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<gnb_cu_tnl_assoc_to_add_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<gnb_cu_tnl_assoc_to_rem_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<gnb_cu_tnl_assoc_to_upd_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<gnb_du_served_cells_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<gnb_du_tnl_assoc_to_rem_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<iab_allocated_tnl_address_list_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<iab_tnl_addresses_to_rem_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<mc_paging_cell_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<multicast_f1_u_context_failed_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<multicast_f1_u_context_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<multicast_f1_u_context_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<multicast_m_rbs_failed_to_be_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<multicast_m_rbs_failed_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<multicast_m_rbs_failed_to_be_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<multicast_m_rbs_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<multicast_m_rbs_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<multicast_m_rbs_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<multicast_m_rbs_to_be_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<multicast_m_rbs_to_be_released_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<multicast_m_rbs_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<multicast_m_rbs_to_be_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<nr_cgi_list_for_restart_list_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<neighbour_cell_info_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<pws_failed_nr_cgi_list_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<paging_cell_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<potential_sp_cell_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<protected_eutra_res_item_ies_o>;

// ResetType ::= CHOICE
void reset_type_c::destroy_()
{
  switch (type_) {
    case types::part_of_f1_interface:
      c.destroy<ue_associated_lc_f1_conn_list_res_l>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<reset_type_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void reset_type_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::f1_interface:
      break;
    case types::part_of_f1_interface:
      c.init<ue_associated_lc_f1_conn_list_res_l>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<reset_type_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
  }
}
reset_type_c::reset_type_c(const reset_type_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::f1_interface:
      c.init(other.c.get<reset_all_e>());
      break;
    case types::part_of_f1_interface:
      c.init(other.c.get<ue_associated_lc_f1_conn_list_res_l>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
  }
}
reset_type_c& reset_type_c::operator=(const reset_type_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::f1_interface:
      c.set(other.c.get<reset_all_e>());
      break;
    case types::part_of_f1_interface:
      c.set(other.c.get<ue_associated_lc_f1_conn_list_res_l>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
  }

  return *this;
}
reset_all_e& reset_type_c::set_f1_interface()
{
  set(types::f1_interface);
  return c.get<reset_all_e>();
}
ue_associated_lc_f1_conn_list_res_l& reset_type_c::set_part_of_f1_interface()
{
  set(types::part_of_f1_interface);
  return c.get<ue_associated_lc_f1_conn_list_res_l>();
}
protocol_ie_single_container_s<reset_type_ext_ies_o>& reset_type_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>();
}
void reset_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::f1_interface:
      j.write_str("f1-Interface", "reset-all");
      break;
    case types::part_of_f1_interface:
      j.start_array("partOfF1-Interface");
      for (const auto& e1 : c.get<ue_associated_lc_f1_conn_list_res_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
  }
  j.end_obj();
}
SRSASN_CODE reset_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::f1_interface:
      HANDLE_CODE(c.get<reset_all_e>().pack(bref));
      break;
    case types::part_of_f1_interface:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_associated_lc_f1_conn_list_res_l>(), 1, 65536, true));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::f1_interface:
      HANDLE_CODE(c.get<reset_all_e>().unpack(bref));
      break;
    case types::part_of_f1_interface:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_associated_lc_f1_conn_list_res_l>(), bref, 1, 65536, true));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* reset_type_c::types_opts::to_string() const
{
  static const char* names[] = {"f1-Interface", "partOfF1-Interface", "choice-extension"};
  return convert_enum_idx(names, 3, value, "reset_type_c::types");
}

template struct asn1::protocol_ie_single_container_s<scell_failedto_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<scell_failedto_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<scell_to_be_remd_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<scell_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<scell_to_be_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<sl_drbs_failed_to_be_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<sl_drbs_failed_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<sl_drbs_failed_to_be_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<sl_drbs_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<sl_drbs_modified_conf_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<sl_drbs_required_to_be_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<sl_drbs_required_to_be_released_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<sl_drbs_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<sl_drbs_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<sl_drbs_to_be_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<sl_drbs_to_be_released_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<sl_drbs_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<sl_drbs_to_be_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_failed_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_failed_to_be_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_required_to_be_released_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_to_be_released_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_to_be_setup_mod_item_ies_o>;

// SRSType ::= CHOICE
void srs_type_c::destroy_()
{
  switch (type_) {
    case types::semipersistent_srs:
      c.destroy<semipersistent_srs_s>();
      break;
    case types::aperiodic_srs:
      c.destroy<aperiodic_srs_s>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<srs_type_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void srs_type_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::semipersistent_srs:
      c.init<semipersistent_srs_s>();
      break;
    case types::aperiodic_srs:
      c.init<aperiodic_srs_s>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<srs_type_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "srs_type_c");
  }
}
srs_type_c::srs_type_c(const srs_type_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::semipersistent_srs:
      c.init(other.c.get<semipersistent_srs_s>());
      break;
    case types::aperiodic_srs:
      c.init(other.c.get<aperiodic_srs_s>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<srs_type_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "srs_type_c");
  }
}
srs_type_c& srs_type_c::operator=(const srs_type_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::semipersistent_srs:
      c.set(other.c.get<semipersistent_srs_s>());
      break;
    case types::aperiodic_srs:
      c.set(other.c.get<aperiodic_srs_s>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<srs_type_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "srs_type_c");
  }

  return *this;
}
semipersistent_srs_s& srs_type_c::set_semipersistent_srs()
{
  set(types::semipersistent_srs);
  return c.get<semipersistent_srs_s>();
}
aperiodic_srs_s& srs_type_c::set_aperiodic_srs()
{
  set(types::aperiodic_srs);
  return c.get<aperiodic_srs_s>();
}
protocol_ie_single_container_s<srs_type_ext_ies_o>& srs_type_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<srs_type_ext_ies_o>>();
}
void srs_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::semipersistent_srs:
      j.write_fieldname("semipersistentSRS");
      c.get<semipersistent_srs_s>().to_json(j);
      break;
    case types::aperiodic_srs:
      j.write_fieldname("aperiodicSRS");
      c.get<aperiodic_srs_s>().to_json(j);
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<srs_type_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "srs_type_c");
  }
  j.end_obj();
}
SRSASN_CODE srs_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::semipersistent_srs:
      HANDLE_CODE(c.get<semipersistent_srs_s>().pack(bref));
      break;
    case types::aperiodic_srs:
      HANDLE_CODE(c.get<aperiodic_srs_s>().pack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<srs_type_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "srs_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE srs_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::semipersistent_srs:
      HANDLE_CODE(c.get<semipersistent_srs_s>().unpack(bref));
      break;
    case types::aperiodic_srs:
      HANDLE_CODE(c.get<aperiodic_srs_s>().unpack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<srs_type_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "srs_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* srs_type_c::types_opts::to_string() const
{
  static const char* names[] = {"semipersistentSRS", "aperiodicSRS", "choice-extension"};
  return convert_enum_idx(names, 3, value, "srs_type_c::types");
}

template struct asn1::protocol_ie_single_container_s<served_cells_to_add_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<served_cells_to_delete_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<served_cells_to_modify_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<serving_cell_mo_list_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<trp_info_item_trp_resp_o>;

template struct asn1::protocol_ie_single_container_s<trp_info_type_item_trp_req_o>;

template struct asn1::protocol_ie_single_container_s<ue_multicast_m_rbs_confirmed_to_be_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<ue_multicast_m_rbs_required_to_be_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<ue_multicast_m_rbs_required_to_be_released_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<ue_multicast_m_rbs_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<ue_multicast_m_rbs_to_be_released_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<ue_multicast_m_rbs_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<ue_multicast_m_rbs_to_be_setup_at_modify_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<ue_associated_lc_f1_conn_item_res_ack_o>;

template struct asn1::protocol_ie_single_container_s<ue_id_list_for_paging_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<ul_up_tnl_address_to_upd_list_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<ul_up_tnl_info_to_upd_list_item_ies_o>;

// F1RemovalFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_removal_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool f1_removal_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_removal_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_removal_fail_ies_o::value_c f1_removal_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_removal_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_removal_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void f1_removal_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
  }
}
f1_removal_fail_ies_o::value_c::value_c(const f1_removal_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
  }
}
f1_removal_fail_ies_o::value_c& f1_removal_fail_ies_o::value_c::operator=(const f1_removal_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_removal_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& f1_removal_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& f1_removal_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& f1_removal_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& f1_removal_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& f1_removal_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void f1_removal_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_removal_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// F1RemovalRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_removal_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78};
  return map_enum_number(names, 1, idx, "id");
}
bool f1_removal_request_ies_o::is_id_valid(const uint32_t& id)
{
  return 78 == id;
}
crit_e f1_removal_request_ies_o::get_crit(const uint32_t& id)
{
  if (id == 78) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
f1_removal_request_ies_o::value_c f1_removal_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 78) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_removal_request_ies_o::get_presence(const uint32_t& id)
{
  if (id == 78) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void f1_removal_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("INTEGER (0..255,...)", c);
  j.end_obj();
}
SRSASN_CODE f1_removal_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(pack_integer(bref, c, (uint16_t)0u, (uint16_t)255u, true, true));
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(unpack_integer(c, bref, (uint16_t)0u, (uint16_t)255u, true, true));
  return SRSASN_SUCCESS;
}

// F1RemovalResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_removal_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 7};
  return map_enum_number(names, 2, idx, "id");
}
bool f1_removal_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_removal_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_removal_resp_ies_o::value_c f1_removal_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_removal_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_removal_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void f1_removal_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
  }
}
f1_removal_resp_ies_o::value_c::value_c(const f1_removal_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
  }
}
f1_removal_resp_ies_o::value_c& f1_removal_resp_ies_o::value_c::operator=(const f1_removal_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_removal_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
crit_diagnostics_s& f1_removal_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& f1_removal_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const crit_diagnostics_s& f1_removal_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void f1_removal_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_removal_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// F1SetupFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_setup_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool f1_setup_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_setup_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_setup_fail_ies_o::value_c f1_setup_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_setup_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_setup_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void f1_setup_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
  }
}
f1_setup_fail_ies_o::value_c::value_c(const f1_setup_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
  }
}
f1_setup_fail_ies_o::value_c& f1_setup_fail_ies_o::value_c::operator=(const f1_setup_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_setup_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& f1_setup_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& f1_setup_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& f1_setup_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& f1_setup_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& f1_setup_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& f1_setup_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& f1_setup_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void f1_setup_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_setup_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// F1SetupRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_setup_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 42, 45, 44, 171, 254, 281, 427};
  return map_enum_number(names, 8, idx, "id");
}
bool f1_setup_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 42, 45, 44, 171, 254, 281, 427};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_setup_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 42:
      return crit_e::reject;
    case 45:
      return crit_e::ignore;
    case 44:
      return crit_e::reject;
    case 171:
      return crit_e::reject;
    case 254:
      return crit_e::ignore;
    case 281:
      return crit_e::ignore;
    case 427:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_setup_request_ies_o::value_c f1_setup_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 42:
      ret.set(value_c::types::gnb_du_id);
      break;
    case 45:
      ret.set(value_c::types::gnb_du_name);
      break;
    case 44:
      ret.set(value_c::types::gnb_du_served_cells_list);
      break;
    case 171:
      ret.set(value_c::types::gnb_du_rrc_version);
      break;
    case 254:
      ret.set(value_c::types::transport_layer_address_info);
      break;
    case 281:
      ret.set(value_c::types::bap_address);
      break;
    case 427:
      ret.set(value_c::types::extended_gnb_du_name);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_setup_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 42:
      return presence_e::mandatory;
    case 45:
      return presence_e::optional;
    case 44:
      return presence_e::optional;
    case 171:
      return presence_e::mandatory;
    case 254:
      return presence_e::optional;
    case 281:
      return presence_e::optional;
    case 427:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_setup_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::gnb_du_name:
      c.destroy<printable_string<1, 150, true, true>>();
      break;
    case types::gnb_du_served_cells_list:
      c.destroy<gnb_du_served_cells_list_l>();
      break;
    case types::gnb_du_rrc_version:
      c.destroy<rrc_version_s>();
      break;
    case types::transport_layer_address_info:
      c.destroy<transport_layer_address_info_s>();
      break;
    case types::bap_address:
      c.destroy<fixed_bitstring<10, false, true>>();
      break;
    case types::extended_gnb_du_name:
      c.destroy<extended_gnb_du_name_s>();
      break;
    default:
      break;
  }
}
void f1_setup_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_du_id:
      break;
    case types::gnb_du_name:
      c.init<printable_string<1, 150, true, true>>();
      break;
    case types::gnb_du_served_cells_list:
      c.init<gnb_du_served_cells_list_l>();
      break;
    case types::gnb_du_rrc_version:
      c.init<rrc_version_s>();
      break;
    case types::transport_layer_address_info:
      c.init<transport_layer_address_info_s>();
      break;
    case types::bap_address:
      c.init<fixed_bitstring<10, false, true>>();
      break;
    case types::extended_gnb_du_name:
      c.init<extended_gnb_du_name_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
  }
}
f1_setup_request_ies_o::value_c::value_c(const f1_setup_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_name:
      c.init(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::gnb_du_served_cells_list:
      c.init(other.c.get<gnb_du_served_cells_list_l>());
      break;
    case types::gnb_du_rrc_version:
      c.init(other.c.get<rrc_version_s>());
      break;
    case types::transport_layer_address_info:
      c.init(other.c.get<transport_layer_address_info_s>());
      break;
    case types::bap_address:
      c.init(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::extended_gnb_du_name:
      c.init(other.c.get<extended_gnb_du_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
  }
}
f1_setup_request_ies_o::value_c&
f1_setup_request_ies_o::value_c::operator=(const f1_setup_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_name:
      c.set(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::gnb_du_served_cells_list:
      c.set(other.c.get<gnb_du_served_cells_list_l>());
      break;
    case types::gnb_du_rrc_version:
      c.set(other.c.get<rrc_version_s>());
      break;
    case types::transport_layer_address_info:
      c.set(other.c.get<transport_layer_address_info_s>());
      break;
    case types::bap_address:
      c.set(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::extended_gnb_du_name:
      c.set(other.c.get<extended_gnb_du_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_setup_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint64_t& f1_setup_request_ies_o::value_c::gnb_du_id()
{
  assert_choice_type(types::gnb_du_id, type_, "Value");
  return c.get<uint64_t>();
}
printable_string<1, 150, true, true>& f1_setup_request_ies_o::value_c::gnb_du_name()
{
  assert_choice_type(types::gnb_du_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
gnb_du_served_cells_list_l& f1_setup_request_ies_o::value_c::gnb_du_served_cells_list()
{
  assert_choice_type(types::gnb_du_served_cells_list, type_, "Value");
  return c.get<gnb_du_served_cells_list_l>();
}
rrc_version_s& f1_setup_request_ies_o::value_c::gnb_du_rrc_version()
{
  assert_choice_type(types::gnb_du_rrc_version, type_, "Value");
  return c.get<rrc_version_s>();
}
transport_layer_address_info_s& f1_setup_request_ies_o::value_c::transport_layer_address_info()
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
fixed_bitstring<10, false, true>& f1_setup_request_ies_o::value_c::bap_address()
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
extended_gnb_du_name_s& f1_setup_request_ies_o::value_c::extended_gnb_du_name()
{
  assert_choice_type(types::extended_gnb_du_name, type_, "Value");
  return c.get<extended_gnb_du_name_s>();
}
const uint16_t& f1_setup_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint64_t& f1_setup_request_ies_o::value_c::gnb_du_id() const
{
  assert_choice_type(types::gnb_du_id, type_, "Value");
  return c.get<uint64_t>();
}
const printable_string<1, 150, true, true>& f1_setup_request_ies_o::value_c::gnb_du_name() const
{
  assert_choice_type(types::gnb_du_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
const gnb_du_served_cells_list_l& f1_setup_request_ies_o::value_c::gnb_du_served_cells_list() const
{
  assert_choice_type(types::gnb_du_served_cells_list, type_, "Value");
  return c.get<gnb_du_served_cells_list_l>();
}
const rrc_version_s& f1_setup_request_ies_o::value_c::gnb_du_rrc_version() const
{
  assert_choice_type(types::gnb_du_rrc_version, type_, "Value");
  return c.get<rrc_version_s>();
}
const transport_layer_address_info_s& f1_setup_request_ies_o::value_c::transport_layer_address_info() const
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
const fixed_bitstring<10, false, true>& f1_setup_request_ies_o::value_c::bap_address() const
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
const extended_gnb_du_name_s& f1_setup_request_ies_o::value_c::extended_gnb_du_name() const
{
  assert_choice_type(types::extended_gnb_du_name, type_, "Value");
  return c.get<extended_gnb_du_name_s>();
}
void f1_setup_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_id:
      j.write_int("INTEGER (0..68719476735)", c.get<uint64_t>());
      break;
    case types::gnb_du_name:
      j.write_str("PrintableString", c.get<printable_string<1, 150, true, true>>().to_string());
      break;
    case types::gnb_du_served_cells_list:
      j.start_array("GNB-DU-Served-Cells-List");
      for (const auto& e1 : c.get<gnb_du_served_cells_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_du_rrc_version:
      j.write_fieldname("RRC-Version");
      c.get<rrc_version_s>().to_json(j);
      break;
    case types::transport_layer_address_info:
      j.write_fieldname("Transport-Layer-Address-Info");
      c.get<transport_layer_address_info_s>().to_json(j);
      break;
    case types::bap_address:
      j.write_str("BIT STRING", c.get<fixed_bitstring<10, false, true>>().to_string());
      break;
    case types::extended_gnb_du_name:
      j.write_fieldname("Extended-GNB-DU-Name");
      c.get<extended_gnb_du_name_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_setup_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_du_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)68719476735u, false, true));
      break;
    case types::gnb_du_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().pack(bref)));
      break;
    case types::gnb_du_served_cells_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_du_served_cells_list_l>(), 1, 512, true));
      break;
    case types::gnb_du_rrc_version:
      HANDLE_CODE(c.get<rrc_version_s>().pack(bref));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().pack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().pack(bref)));
      break;
    case types::extended_gnb_du_name:
      HANDLE_CODE(c.get<extended_gnb_du_name_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_du_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)68719476735u, false, true));
      break;
    case types::gnb_du_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().unpack(bref)));
      break;
    case types::gnb_du_served_cells_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_du_served_cells_list_l>(), bref, 1, 512, true));
      break;
    case types::gnb_du_rrc_version:
      HANDLE_CODE(c.get<rrc_version_s>().unpack(bref));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().unpack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().unpack(bref)));
      break;
    case types::extended_gnb_du_name:
      HANDLE_CODE(c.get<extended_gnb_du_name_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// F1SetupResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_setup_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 82, 3, 170, 254, 287, 281, 426};
  return map_enum_number(names, 8, idx, "id");
}
bool f1_setup_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 82, 3, 170, 254, 287, 281, 426};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_setup_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 82:
      return crit_e::ignore;
    case 3:
      return crit_e::reject;
    case 170:
      return crit_e::reject;
    case 254:
      return crit_e::ignore;
    case 287:
      return crit_e::reject;
    case 281:
      return crit_e::ignore;
    case 426:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_setup_resp_ies_o::value_c f1_setup_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 82:
      ret.set(value_c::types::gnb_cu_name);
      break;
    case 3:
      ret.set(value_c::types::cells_to_be_activ_list);
      break;
    case 170:
      ret.set(value_c::types::gnb_cu_rrc_version);
      break;
    case 254:
      ret.set(value_c::types::transport_layer_address_info);
      break;
    case 287:
      ret.set(value_c::types::ul_bh_non_up_traffic_map);
      break;
    case 281:
      ret.set(value_c::types::bap_address);
      break;
    case 426:
      ret.set(value_c::types::extended_gnb_cu_name);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_setup_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 82:
      return presence_e::optional;
    case 3:
      return presence_e::optional;
    case 170:
      return presence_e::mandatory;
    case 254:
      return presence_e::optional;
    case 287:
      return presence_e::optional;
    case 281:
      return presence_e::optional;
    case 426:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_setup_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::gnb_cu_name:
      c.destroy<printable_string<1, 150, true, true>>();
      break;
    case types::cells_to_be_activ_list:
      c.destroy<cells_to_be_activ_list_l>();
      break;
    case types::gnb_cu_rrc_version:
      c.destroy<rrc_version_s>();
      break;
    case types::transport_layer_address_info:
      c.destroy<transport_layer_address_info_s>();
      break;
    case types::ul_bh_non_up_traffic_map:
      c.destroy<ul_bh_non_up_traffic_map_s>();
      break;
    case types::bap_address:
      c.destroy<fixed_bitstring<10, false, true>>();
      break;
    case types::extended_gnb_cu_name:
      c.destroy<extended_gnb_cu_name_s>();
      break;
    default:
      break;
  }
}
void f1_setup_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_name:
      c.init<printable_string<1, 150, true, true>>();
      break;
    case types::cells_to_be_activ_list:
      c.init<cells_to_be_activ_list_l>();
      break;
    case types::gnb_cu_rrc_version:
      c.init<rrc_version_s>();
      break;
    case types::transport_layer_address_info:
      c.init<transport_layer_address_info_s>();
      break;
    case types::ul_bh_non_up_traffic_map:
      c.init<ul_bh_non_up_traffic_map_s>();
      break;
    case types::bap_address:
      c.init<fixed_bitstring<10, false, true>>();
      break;
    case types::extended_gnb_cu_name:
      c.init<extended_gnb_cu_name_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
  }
}
f1_setup_resp_ies_o::value_c::value_c(const f1_setup_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_name:
      c.init(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::cells_to_be_activ_list:
      c.init(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::gnb_cu_rrc_version:
      c.init(other.c.get<rrc_version_s>());
      break;
    case types::transport_layer_address_info:
      c.init(other.c.get<transport_layer_address_info_s>());
      break;
    case types::ul_bh_non_up_traffic_map:
      c.init(other.c.get<ul_bh_non_up_traffic_map_s>());
      break;
    case types::bap_address:
      c.init(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::extended_gnb_cu_name:
      c.init(other.c.get<extended_gnb_cu_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
  }
}
f1_setup_resp_ies_o::value_c& f1_setup_resp_ies_o::value_c::operator=(const f1_setup_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_name:
      c.set(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::cells_to_be_activ_list:
      c.set(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::gnb_cu_rrc_version:
      c.set(other.c.get<rrc_version_s>());
      break;
    case types::transport_layer_address_info:
      c.set(other.c.get<transport_layer_address_info_s>());
      break;
    case types::ul_bh_non_up_traffic_map:
      c.set(other.c.get<ul_bh_non_up_traffic_map_s>());
      break;
    case types::bap_address:
      c.set(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::extended_gnb_cu_name:
      c.set(other.c.get<extended_gnb_cu_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_setup_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
printable_string<1, 150, true, true>& f1_setup_resp_ies_o::value_c::gnb_cu_name()
{
  assert_choice_type(types::gnb_cu_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
cells_to_be_activ_list_l& f1_setup_resp_ies_o::value_c::cells_to_be_activ_list()
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
rrc_version_s& f1_setup_resp_ies_o::value_c::gnb_cu_rrc_version()
{
  assert_choice_type(types::gnb_cu_rrc_version, type_, "Value");
  return c.get<rrc_version_s>();
}
transport_layer_address_info_s& f1_setup_resp_ies_o::value_c::transport_layer_address_info()
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
ul_bh_non_up_traffic_map_s& f1_setup_resp_ies_o::value_c::ul_bh_non_up_traffic_map()
{
  assert_choice_type(types::ul_bh_non_up_traffic_map, type_, "Value");
  return c.get<ul_bh_non_up_traffic_map_s>();
}
fixed_bitstring<10, false, true>& f1_setup_resp_ies_o::value_c::bap_address()
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
extended_gnb_cu_name_s& f1_setup_resp_ies_o::value_c::extended_gnb_cu_name()
{
  assert_choice_type(types::extended_gnb_cu_name, type_, "Value");
  return c.get<extended_gnb_cu_name_s>();
}
const uint16_t& f1_setup_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const printable_string<1, 150, true, true>& f1_setup_resp_ies_o::value_c::gnb_cu_name() const
{
  assert_choice_type(types::gnb_cu_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
const cells_to_be_activ_list_l& f1_setup_resp_ies_o::value_c::cells_to_be_activ_list() const
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
const rrc_version_s& f1_setup_resp_ies_o::value_c::gnb_cu_rrc_version() const
{
  assert_choice_type(types::gnb_cu_rrc_version, type_, "Value");
  return c.get<rrc_version_s>();
}
const transport_layer_address_info_s& f1_setup_resp_ies_o::value_c::transport_layer_address_info() const
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
const ul_bh_non_up_traffic_map_s& f1_setup_resp_ies_o::value_c::ul_bh_non_up_traffic_map() const
{
  assert_choice_type(types::ul_bh_non_up_traffic_map, type_, "Value");
  return c.get<ul_bh_non_up_traffic_map_s>();
}
const fixed_bitstring<10, false, true>& f1_setup_resp_ies_o::value_c::bap_address() const
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
const extended_gnb_cu_name_s& f1_setup_resp_ies_o::value_c::extended_gnb_cu_name() const
{
  assert_choice_type(types::extended_gnb_cu_name, type_, "Value");
  return c.get<extended_gnb_cu_name_s>();
}
void f1_setup_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_name:
      j.write_str("PrintableString", c.get<printable_string<1, 150, true, true>>().to_string());
      break;
    case types::cells_to_be_activ_list:
      j.start_array("Cells-to-be-Activated-List");
      for (const auto& e1 : c.get<cells_to_be_activ_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_rrc_version:
      j.write_fieldname("RRC-Version");
      c.get<rrc_version_s>().to_json(j);
      break;
    case types::transport_layer_address_info:
      j.write_fieldname("Transport-Layer-Address-Info");
      c.get<transport_layer_address_info_s>().to_json(j);
      break;
    case types::ul_bh_non_up_traffic_map:
      j.write_fieldname("UL-BH-Non-UP-Traffic-Mapping");
      c.get<ul_bh_non_up_traffic_map_s>().to_json(j);
      break;
    case types::bap_address:
      j.write_str("BIT STRING", c.get<fixed_bitstring<10, false, true>>().to_string());
      break;
    case types::extended_gnb_cu_name:
      j.write_fieldname("Extended-GNB-CU-Name");
      c.get<extended_gnb_cu_name_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_setup_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().pack(bref)));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_activ_list_l>(), 1, 512, true));
      break;
    case types::gnb_cu_rrc_version:
      HANDLE_CODE(c.get<rrc_version_s>().pack(bref));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().pack(bref));
      break;
    case types::ul_bh_non_up_traffic_map:
      HANDLE_CODE(c.get<ul_bh_non_up_traffic_map_s>().pack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().pack(bref)));
      break;
    case types::extended_gnb_cu_name:
      HANDLE_CODE(c.get<extended_gnb_cu_name_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().unpack(bref)));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_activ_list_l>(), bref, 1, 512, true));
      break;
    case types::gnb_cu_rrc_version:
      HANDLE_CODE(c.get<rrc_version_s>().unpack(bref));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().unpack(bref));
      break;
    case types::ul_bh_non_up_traffic_map:
      HANDLE_CODE(c.get<ul_bh_non_up_traffic_map_s>().unpack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().unpack(bref)));
      break;
    case types::extended_gnb_cu_name:
      HANDLE_CODE(c.get<extended_gnb_cu_name_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBCUConfigurationUpdateAcknowledgeIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_cfg_upd_ack_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 1, 7, 132, 134, 189, 254};
  return map_enum_number(names, 7, idx, "id");
}
bool gnb_cu_cfg_upd_ack_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 1, 7, 132, 134, 189, 254};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_cu_cfg_upd_ack_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 1:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 132:
      return crit_e::ignore;
    case 134:
      return crit_e::ignore;
    case 189:
      return crit_e::ignore;
    case 254:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_cu_cfg_upd_ack_ies_o::value_c gnb_cu_cfg_upd_ack_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 1:
      ret.set(value_c::types::cells_failed_to_be_activ_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 132:
      ret.set(value_c::types::gnb_cu_tnl_assoc_setup_list);
      break;
    case 134:
      ret.set(value_c::types::gnb_cu_tnl_assoc_failed_to_setup_list);
      break;
    case 189:
      ret.set(value_c::types::ded_si_delivery_needed_ue_list);
      break;
    case 254:
      ret.set(value_c::types::transport_layer_address_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_cfg_upd_ack_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 1:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 132:
      return presence_e::optional;
    case 134:
      return presence_e::optional;
    case 189:
      return presence_e::optional;
    case 254:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_cfg_upd_ack_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_failed_to_be_activ_list:
      c.destroy<cells_failed_to_be_activ_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      c.destroy<gnb_cu_tnl_assoc_setup_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      c.destroy<gnb_cu_tnl_assoc_failed_to_setup_list_l>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.destroy<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::transport_layer_address_info:
      c.destroy<transport_layer_address_info_s>();
      break;
    default:
      break;
  }
}
void gnb_cu_cfg_upd_ack_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_failed_to_be_activ_list:
      c.init<cells_failed_to_be_activ_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      c.init<gnb_cu_tnl_assoc_setup_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      c.init<gnb_cu_tnl_assoc_failed_to_setup_list_l>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::transport_layer_address_info:
      c.init<transport_layer_address_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_ack_ies_o::value_c::value_c(const gnb_cu_cfg_upd_ack_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_failed_to_be_activ_list:
      c.init(other.c.get<cells_failed_to_be_activ_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_setup_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::transport_layer_address_info:
      c.init(other.c.get<transport_layer_address_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_ack_ies_o::value_c&
gnb_cu_cfg_upd_ack_ies_o::value_c::operator=(const gnb_cu_cfg_upd_ack_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_failed_to_be_activ_list:
      c.set(other.c.get<cells_failed_to_be_activ_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_setup_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.set(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::transport_layer_address_info:
      c.set(other.c.get<transport_layer_address_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_cu_cfg_upd_ack_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_failed_to_be_activ_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::cells_failed_to_be_activ_list()
{
  assert_choice_type(types::cells_failed_to_be_activ_list, type_, "Value");
  return c.get<cells_failed_to_be_activ_list_l>();
}
crit_diagnostics_s& gnb_cu_cfg_upd_ack_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
gnb_cu_tnl_assoc_setup_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::gnb_cu_tnl_assoc_setup_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_setup_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_setup_list_l>();
}
gnb_cu_tnl_assoc_failed_to_setup_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::gnb_cu_tnl_assoc_failed_to_setup_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_failed_to_setup_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>();
}
ded_si_delivery_needed_ue_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::ded_si_delivery_needed_ue_list()
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
transport_layer_address_info_s& gnb_cu_cfg_upd_ack_ies_o::value_c::transport_layer_address_info()
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
const uint16_t& gnb_cu_cfg_upd_ack_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_failed_to_be_activ_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::cells_failed_to_be_activ_list() const
{
  assert_choice_type(types::cells_failed_to_be_activ_list, type_, "Value");
  return c.get<cells_failed_to_be_activ_list_l>();
}
const crit_diagnostics_s& gnb_cu_cfg_upd_ack_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const gnb_cu_tnl_assoc_setup_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::gnb_cu_tnl_assoc_setup_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_setup_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_setup_list_l>();
}
const gnb_cu_tnl_assoc_failed_to_setup_list_l&
gnb_cu_cfg_upd_ack_ies_o::value_c::gnb_cu_tnl_assoc_failed_to_setup_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_failed_to_setup_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>();
}
const ded_si_delivery_needed_ue_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::ded_si_delivery_needed_ue_list() const
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
const transport_layer_address_info_s& gnb_cu_cfg_upd_ack_ies_o::value_c::transport_layer_address_info() const
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
void gnb_cu_cfg_upd_ack_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_failed_to_be_activ_list:
      j.start_array("Cells-Failed-to-be-Activated-List");
      for (const auto& e1 : c.get<cells_failed_to_be_activ_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      j.start_array("GNB-CU-TNL-Association-Setup-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      j.start_array("GNB-CU-TNL-Association-Failed-To-Setup-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ded_si_delivery_needed_ue_list:
      j.start_array("Dedicated-SIDelivery-NeededUE-List");
      for (const auto& e1 : c.get<ded_si_delivery_needed_ue_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::transport_layer_address_info:
      j.write_fieldname("Transport-Layer-Address-Info");
      c.get<transport_layer_address_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_cu_cfg_upd_ack_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_failed_to_be_activ_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_failed_to_be_activ_list_l>(), 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_setup_list_l>(), 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>(), 1, 32, true));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ded_si_delivery_needed_ue_list_l>(), 1, 65536, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_ack_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_failed_to_be_activ_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_failed_to_be_activ_list_l>(), bref, 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ded_si_delivery_needed_ue_list_l>(), bref, 1, 65536, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBCUConfigurationUpdateFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_cfg_upd_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool gnb_cu_cfg_upd_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_cu_cfg_upd_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_cu_cfg_upd_fail_ies_o::value_c gnb_cu_cfg_upd_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_cfg_upd_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_cfg_upd_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void gnb_cu_cfg_upd_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_fail_ies_o::value_c::value_c(const gnb_cu_cfg_upd_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_fail_ies_o::value_c&
gnb_cu_cfg_upd_fail_ies_o::value_c::operator=(const gnb_cu_cfg_upd_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_cu_cfg_upd_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& gnb_cu_cfg_upd_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& gnb_cu_cfg_upd_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& gnb_cu_cfg_upd_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& gnb_cu_cfg_upd_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& gnb_cu_cfg_upd_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& gnb_cu_cfg_upd_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& gnb_cu_cfg_upd_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void gnb_cu_cfg_upd_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_cu_cfg_upd_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBCUConfigurationUpdateIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_cfg_upd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 3, 5, 121, 123, 125, 129, 105, 244, 254, 287, 281, 447, 449, 82, 426};
  return map_enum_number(names, 16, idx, "id");
}
bool gnb_cu_cfg_upd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 3, 5, 121, 123, 125, 129, 105, 244, 254, 287, 281, 447, 449, 82, 426};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_cu_cfg_upd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 3:
      return crit_e::reject;
    case 5:
      return crit_e::reject;
    case 121:
      return crit_e::ignore;
    case 123:
      return crit_e::ignore;
    case 125:
      return crit_e::ignore;
    case 129:
      return crit_e::ignore;
    case 105:
      return crit_e::reject;
    case 244:
      return crit_e::ignore;
    case 254:
      return crit_e::ignore;
    case 287:
      return crit_e::reject;
    case 281:
      return crit_e::ignore;
    case 447:
      return crit_e::ignore;
    case 449:
      return crit_e::ignore;
    case 82:
      return crit_e::ignore;
    case 426:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_cu_cfg_upd_ies_o::value_c gnb_cu_cfg_upd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 3:
      ret.set(value_c::types::cells_to_be_activ_list);
      break;
    case 5:
      ret.set(value_c::types::cells_to_be_deactiv_list);
      break;
    case 121:
      ret.set(value_c::types::gnb_cu_tnl_assoc_to_add_list);
      break;
    case 123:
      ret.set(value_c::types::gnb_cu_tnl_assoc_to_rem_list);
      break;
    case 125:
      ret.set(value_c::types::gnb_cu_tnl_assoc_to_upd_list);
      break;
    case 129:
      ret.set(value_c::types::cells_to_be_barred_list);
      break;
    case 105:
      ret.set(value_c::types::protected_eutra_res_list);
      break;
    case 244:
      ret.set(value_c::types::neighbour_cell_info_list);
      break;
    case 254:
      ret.set(value_c::types::transport_layer_address_info);
      break;
    case 287:
      ret.set(value_c::types::ul_bh_non_up_traffic_map);
      break;
    case 281:
      ret.set(value_c::types::bap_address);
      break;
    case 447:
      ret.set(value_c::types::cco_assist_info);
      break;
    case 449:
      ret.set(value_c::types::cells_for_son_list);
      break;
    case 82:
      ret.set(value_c::types::gnb_cu_name);
      break;
    case 426:
      ret.set(value_c::types::extended_gnb_cu_name);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_cfg_upd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 3:
      return presence_e::optional;
    case 5:
      return presence_e::optional;
    case 121:
      return presence_e::optional;
    case 123:
      return presence_e::optional;
    case 125:
      return presence_e::optional;
    case 129:
      return presence_e::optional;
    case 105:
      return presence_e::optional;
    case 244:
      return presence_e::optional;
    case 254:
      return presence_e::optional;
    case 287:
      return presence_e::optional;
    case 281:
      return presence_e::optional;
    case 447:
      return presence_e::optional;
    case 449:
      return presence_e::optional;
    case 82:
      return presence_e::optional;
    case 426:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_cfg_upd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_to_be_activ_list:
      c.destroy<cells_to_be_activ_list_l>();
      break;
    case types::cells_to_be_deactiv_list:
      c.destroy<cells_to_be_deactiv_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      c.destroy<gnb_cu_tnl_assoc_to_add_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      c.destroy<gnb_cu_tnl_assoc_to_rem_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      c.destroy<gnb_cu_tnl_assoc_to_upd_list_l>();
      break;
    case types::cells_to_be_barred_list:
      c.destroy<cells_to_be_barred_list_l>();
      break;
    case types::protected_eutra_res_list:
      c.destroy<protected_eutra_res_list_l>();
      break;
    case types::neighbour_cell_info_list:
      c.destroy<neighbour_cell_info_list_l>();
      break;
    case types::transport_layer_address_info:
      c.destroy<transport_layer_address_info_s>();
      break;
    case types::ul_bh_non_up_traffic_map:
      c.destroy<ul_bh_non_up_traffic_map_s>();
      break;
    case types::bap_address:
      c.destroy<fixed_bitstring<10, false, true>>();
      break;
    case types::cco_assist_info:
      c.destroy<cco_assist_info_s>();
      break;
    case types::cells_for_son_list:
      c.destroy<cells_for_son_list_l>();
      break;
    case types::gnb_cu_name:
      c.destroy<printable_string<1, 150, true, true>>();
      break;
    case types::extended_gnb_cu_name:
      c.destroy<extended_gnb_cu_name_s>();
      break;
    default:
      break;
  }
}
void gnb_cu_cfg_upd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_to_be_activ_list:
      c.init<cells_to_be_activ_list_l>();
      break;
    case types::cells_to_be_deactiv_list:
      c.init<cells_to_be_deactiv_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      c.init<gnb_cu_tnl_assoc_to_add_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      c.init<gnb_cu_tnl_assoc_to_rem_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      c.init<gnb_cu_tnl_assoc_to_upd_list_l>();
      break;
    case types::cells_to_be_barred_list:
      c.init<cells_to_be_barred_list_l>();
      break;
    case types::protected_eutra_res_list:
      c.init<protected_eutra_res_list_l>();
      break;
    case types::neighbour_cell_info_list:
      c.init<neighbour_cell_info_list_l>();
      break;
    case types::transport_layer_address_info:
      c.init<transport_layer_address_info_s>();
      break;
    case types::ul_bh_non_up_traffic_map:
      c.init<ul_bh_non_up_traffic_map_s>();
      break;
    case types::bap_address:
      c.init<fixed_bitstring<10, false, true>>();
      break;
    case types::cco_assist_info:
      c.init<cco_assist_info_s>();
      break;
    case types::cells_for_son_list:
      c.init<cells_for_son_list_l>();
      break;
    case types::gnb_cu_name:
      c.init<printable_string<1, 150, true, true>>();
      break;
    case types::extended_gnb_cu_name:
      c.init<extended_gnb_cu_name_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_ies_o::value_c::value_c(const gnb_cu_cfg_upd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      c.init(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::cells_to_be_deactiv_list:
      c.init(other.c.get<cells_to_be_deactiv_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_to_add_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_to_rem_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_to_upd_list_l>());
      break;
    case types::cells_to_be_barred_list:
      c.init(other.c.get<cells_to_be_barred_list_l>());
      break;
    case types::protected_eutra_res_list:
      c.init(other.c.get<protected_eutra_res_list_l>());
      break;
    case types::neighbour_cell_info_list:
      c.init(other.c.get<neighbour_cell_info_list_l>());
      break;
    case types::transport_layer_address_info:
      c.init(other.c.get<transport_layer_address_info_s>());
      break;
    case types::ul_bh_non_up_traffic_map:
      c.init(other.c.get<ul_bh_non_up_traffic_map_s>());
      break;
    case types::bap_address:
      c.init(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::cco_assist_info:
      c.init(other.c.get<cco_assist_info_s>());
      break;
    case types::cells_for_son_list:
      c.init(other.c.get<cells_for_son_list_l>());
      break;
    case types::gnb_cu_name:
      c.init(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::extended_gnb_cu_name:
      c.init(other.c.get<extended_gnb_cu_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_ies_o::value_c& gnb_cu_cfg_upd_ies_o::value_c::operator=(const gnb_cu_cfg_upd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      c.set(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::cells_to_be_deactiv_list:
      c.set(other.c.get<cells_to_be_deactiv_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_to_add_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_to_rem_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_to_upd_list_l>());
      break;
    case types::cells_to_be_barred_list:
      c.set(other.c.get<cells_to_be_barred_list_l>());
      break;
    case types::protected_eutra_res_list:
      c.set(other.c.get<protected_eutra_res_list_l>());
      break;
    case types::neighbour_cell_info_list:
      c.set(other.c.get<neighbour_cell_info_list_l>());
      break;
    case types::transport_layer_address_info:
      c.set(other.c.get<transport_layer_address_info_s>());
      break;
    case types::ul_bh_non_up_traffic_map:
      c.set(other.c.get<ul_bh_non_up_traffic_map_s>());
      break;
    case types::bap_address:
      c.set(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::cco_assist_info:
      c.set(other.c.get<cco_assist_info_s>());
      break;
    case types::cells_for_son_list:
      c.set(other.c.get<cells_for_son_list_l>());
      break;
    case types::gnb_cu_name:
      c.set(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::extended_gnb_cu_name:
      c.set(other.c.get<extended_gnb_cu_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_cu_cfg_upd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_to_be_activ_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_activ_list()
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
cells_to_be_deactiv_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_deactiv_list()
{
  assert_choice_type(types::cells_to_be_deactiv_list, type_, "Value");
  return c.get<cells_to_be_deactiv_list_l>();
}
gnb_cu_tnl_assoc_to_add_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_add_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_add_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_add_list_l>();
}
gnb_cu_tnl_assoc_to_rem_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_rem_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_rem_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_rem_list_l>();
}
gnb_cu_tnl_assoc_to_upd_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_upd_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_upd_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_upd_list_l>();
}
cells_to_be_barred_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_barred_list()
{
  assert_choice_type(types::cells_to_be_barred_list, type_, "Value");
  return c.get<cells_to_be_barred_list_l>();
}
protected_eutra_res_list_l& gnb_cu_cfg_upd_ies_o::value_c::protected_eutra_res_list()
{
  assert_choice_type(types::protected_eutra_res_list, type_, "Value");
  return c.get<protected_eutra_res_list_l>();
}
neighbour_cell_info_list_l& gnb_cu_cfg_upd_ies_o::value_c::neighbour_cell_info_list()
{
  assert_choice_type(types::neighbour_cell_info_list, type_, "Value");
  return c.get<neighbour_cell_info_list_l>();
}
transport_layer_address_info_s& gnb_cu_cfg_upd_ies_o::value_c::transport_layer_address_info()
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
ul_bh_non_up_traffic_map_s& gnb_cu_cfg_upd_ies_o::value_c::ul_bh_non_up_traffic_map()
{
  assert_choice_type(types::ul_bh_non_up_traffic_map, type_, "Value");
  return c.get<ul_bh_non_up_traffic_map_s>();
}
fixed_bitstring<10, false, true>& gnb_cu_cfg_upd_ies_o::value_c::bap_address()
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
cco_assist_info_s& gnb_cu_cfg_upd_ies_o::value_c::cco_assist_info()
{
  assert_choice_type(types::cco_assist_info, type_, "Value");
  return c.get<cco_assist_info_s>();
}
cells_for_son_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_for_son_list()
{
  assert_choice_type(types::cells_for_son_list, type_, "Value");
  return c.get<cells_for_son_list_l>();
}
printable_string<1, 150, true, true>& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_name()
{
  assert_choice_type(types::gnb_cu_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
extended_gnb_cu_name_s& gnb_cu_cfg_upd_ies_o::value_c::extended_gnb_cu_name()
{
  assert_choice_type(types::extended_gnb_cu_name, type_, "Value");
  return c.get<extended_gnb_cu_name_s>();
}
const uint16_t& gnb_cu_cfg_upd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_to_be_activ_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_activ_list() const
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
const cells_to_be_deactiv_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_deactiv_list() const
{
  assert_choice_type(types::cells_to_be_deactiv_list, type_, "Value");
  return c.get<cells_to_be_deactiv_list_l>();
}
const gnb_cu_tnl_assoc_to_add_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_add_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_add_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_add_list_l>();
}
const gnb_cu_tnl_assoc_to_rem_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_rem_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_rem_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_rem_list_l>();
}
const gnb_cu_tnl_assoc_to_upd_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_upd_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_upd_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_upd_list_l>();
}
const cells_to_be_barred_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_barred_list() const
{
  assert_choice_type(types::cells_to_be_barred_list, type_, "Value");
  return c.get<cells_to_be_barred_list_l>();
}
const protected_eutra_res_list_l& gnb_cu_cfg_upd_ies_o::value_c::protected_eutra_res_list() const
{
  assert_choice_type(types::protected_eutra_res_list, type_, "Value");
  return c.get<protected_eutra_res_list_l>();
}
const neighbour_cell_info_list_l& gnb_cu_cfg_upd_ies_o::value_c::neighbour_cell_info_list() const
{
  assert_choice_type(types::neighbour_cell_info_list, type_, "Value");
  return c.get<neighbour_cell_info_list_l>();
}
const transport_layer_address_info_s& gnb_cu_cfg_upd_ies_o::value_c::transport_layer_address_info() const
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
const ul_bh_non_up_traffic_map_s& gnb_cu_cfg_upd_ies_o::value_c::ul_bh_non_up_traffic_map() const
{
  assert_choice_type(types::ul_bh_non_up_traffic_map, type_, "Value");
  return c.get<ul_bh_non_up_traffic_map_s>();
}
const fixed_bitstring<10, false, true>& gnb_cu_cfg_upd_ies_o::value_c::bap_address() const
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
const cco_assist_info_s& gnb_cu_cfg_upd_ies_o::value_c::cco_assist_info() const
{
  assert_choice_type(types::cco_assist_info, type_, "Value");
  return c.get<cco_assist_info_s>();
}
const cells_for_son_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_for_son_list() const
{
  assert_choice_type(types::cells_for_son_list, type_, "Value");
  return c.get<cells_for_son_list_l>();
}
const printable_string<1, 150, true, true>& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_name() const
{
  assert_choice_type(types::gnb_cu_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
const extended_gnb_cu_name_s& gnb_cu_cfg_upd_ies_o::value_c::extended_gnb_cu_name() const
{
  assert_choice_type(types::extended_gnb_cu_name, type_, "Value");
  return c.get<extended_gnb_cu_name_s>();
}
void gnb_cu_cfg_upd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      j.start_array("Cells-to-be-Activated-List");
      for (const auto& e1 : c.get<cells_to_be_activ_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cells_to_be_deactiv_list:
      j.start_array("Cells-to-be-Deactivated-List");
      for (const auto& e1 : c.get<cells_to_be_deactiv_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      j.start_array("GNB-CU-TNL-Association-To-Add-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_to_add_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      j.start_array("GNB-CU-TNL-Association-To-Remove-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_to_rem_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      j.start_array("GNB-CU-TNL-Association-To-Update-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_to_upd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cells_to_be_barred_list:
      j.start_array("Cells-to-be-Barred-List");
      for (const auto& e1 : c.get<cells_to_be_barred_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::protected_eutra_res_list:
      j.start_array("Protected-EUTRA-Resources-List");
      for (const auto& e1 : c.get<protected_eutra_res_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::neighbour_cell_info_list:
      j.start_array("Neighbour-Cell-Information-List");
      for (const auto& e1 : c.get<neighbour_cell_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::transport_layer_address_info:
      j.write_fieldname("Transport-Layer-Address-Info");
      c.get<transport_layer_address_info_s>().to_json(j);
      break;
    case types::ul_bh_non_up_traffic_map:
      j.write_fieldname("UL-BH-Non-UP-Traffic-Mapping");
      c.get<ul_bh_non_up_traffic_map_s>().to_json(j);
      break;
    case types::bap_address:
      j.write_str("BIT STRING", c.get<fixed_bitstring<10, false, true>>().to_string());
      break;
    case types::cco_assist_info:
      j.write_fieldname("CCO-Assistance-Information");
      c.get<cco_assist_info_s>().to_json(j);
      break;
    case types::cells_for_son_list:
      j.start_array("CellsForSON-List");
      for (const auto& e1 : c.get<cells_for_son_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_name:
      j.write_str("PrintableString", c.get<printable_string<1, 150, true, true>>().to_string());
      break;
    case types::extended_gnb_cu_name:
      j.write_fieldname("Extended-GNB-CU-Name");
      c.get<extended_gnb_cu_name_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_cu_cfg_upd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_activ_list_l>(), 1, 512, true));
      break;
    case types::cells_to_be_deactiv_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_deactiv_list_l>(), 1, 512, true));
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_to_add_list_l>(), 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_to_rem_list_l>(), 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_to_upd_list_l>(), 1, 32, true));
      break;
    case types::cells_to_be_barred_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_barred_list_l>(), 1, 512, true));
      break;
    case types::protected_eutra_res_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<protected_eutra_res_list_l>(), 1, 256, true));
      break;
    case types::neighbour_cell_info_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<neighbour_cell_info_list_l>(), 1, 512, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().pack(bref));
      break;
    case types::ul_bh_non_up_traffic_map:
      HANDLE_CODE(c.get<ul_bh_non_up_traffic_map_s>().pack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().pack(bref)));
      break;
    case types::cco_assist_info:
      HANDLE_CODE(c.get<cco_assist_info_s>().pack(bref));
      break;
    case types::cells_for_son_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_for_son_list_l>(), 1, 256, true));
      break;
    case types::gnb_cu_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().pack(bref)));
      break;
    case types::extended_gnb_cu_name:
      HANDLE_CODE(c.get<extended_gnb_cu_name_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_activ_list_l>(), bref, 1, 512, true));
      break;
    case types::cells_to_be_deactiv_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_deactiv_list_l>(), bref, 1, 512, true));
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_to_add_list_l>(), bref, 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_to_rem_list_l>(), bref, 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_to_upd_list_l>(), bref, 1, 32, true));
      break;
    case types::cells_to_be_barred_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_barred_list_l>(), bref, 1, 512, true));
      break;
    case types::protected_eutra_res_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<protected_eutra_res_list_l>(), bref, 1, 256, true));
      break;
    case types::neighbour_cell_info_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<neighbour_cell_info_list_l>(), bref, 1, 512, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().unpack(bref));
      break;
    case types::ul_bh_non_up_traffic_map:
      HANDLE_CODE(c.get<ul_bh_non_up_traffic_map_s>().unpack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().unpack(bref)));
      break;
    case types::cco_assist_info:
      HANDLE_CODE(c.get<cco_assist_info_s>().unpack(bref));
      break;
    case types::cells_for_son_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_for_son_list_l>(), bref, 1, 256, true));
      break;
    case types::gnb_cu_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().unpack(bref)));
      break;
    case types::extended_gnb_cu_name:
      HANDLE_CODE(c.get<extended_gnb_cu_name_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUConfigurationUpdateAcknowledgeIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_cfg_upd_ack_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 3, 7, 5, 254, 287, 281, 449};
  return map_enum_number(names, 8, idx, "id");
}
bool gnb_du_cfg_upd_ack_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 3, 7, 5, 254, 287, 281, 449};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_cfg_upd_ack_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 3:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 5:
      return crit_e::reject;
    case 254:
      return crit_e::ignore;
    case 287:
      return crit_e::reject;
    case 281:
      return crit_e::ignore;
    case 449:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_cfg_upd_ack_ies_o::value_c gnb_du_cfg_upd_ack_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 3:
      ret.set(value_c::types::cells_to_be_activ_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 5:
      ret.set(value_c::types::cells_to_be_deactiv_list);
      break;
    case 254:
      ret.set(value_c::types::transport_layer_address_info);
      break;
    case 287:
      ret.set(value_c::types::ul_bh_non_up_traffic_map);
      break;
    case 281:
      ret.set(value_c::types::bap_address);
      break;
    case 449:
      ret.set(value_c::types::cells_for_son_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_cfg_upd_ack_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 3:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 5:
      return presence_e::optional;
    case 254:
      return presence_e::optional;
    case 287:
      return presence_e::optional;
    case 281:
      return presence_e::optional;
    case 449:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_cfg_upd_ack_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_to_be_activ_list:
      c.destroy<cells_to_be_activ_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::cells_to_be_deactiv_list:
      c.destroy<cells_to_be_deactiv_list_l>();
      break;
    case types::transport_layer_address_info:
      c.destroy<transport_layer_address_info_s>();
      break;
    case types::ul_bh_non_up_traffic_map:
      c.destroy<ul_bh_non_up_traffic_map_s>();
      break;
    case types::bap_address:
      c.destroy<fixed_bitstring<10, false, true>>();
      break;
    case types::cells_for_son_list:
      c.destroy<cells_for_son_list_l>();
      break;
    default:
      break;
  }
}
void gnb_du_cfg_upd_ack_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_to_be_activ_list:
      c.init<cells_to_be_activ_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::cells_to_be_deactiv_list:
      c.init<cells_to_be_deactiv_list_l>();
      break;
    case types::transport_layer_address_info:
      c.init<transport_layer_address_info_s>();
      break;
    case types::ul_bh_non_up_traffic_map:
      c.init<ul_bh_non_up_traffic_map_s>();
      break;
    case types::bap_address:
      c.init<fixed_bitstring<10, false, true>>();
      break;
    case types::cells_for_son_list:
      c.init<cells_for_son_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
  }
}
gnb_du_cfg_upd_ack_ies_o::value_c::value_c(const gnb_du_cfg_upd_ack_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      c.init(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::cells_to_be_deactiv_list:
      c.init(other.c.get<cells_to_be_deactiv_list_l>());
      break;
    case types::transport_layer_address_info:
      c.init(other.c.get<transport_layer_address_info_s>());
      break;
    case types::ul_bh_non_up_traffic_map:
      c.init(other.c.get<ul_bh_non_up_traffic_map_s>());
      break;
    case types::bap_address:
      c.init(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::cells_for_son_list:
      c.init(other.c.get<cells_for_son_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
  }
}
gnb_du_cfg_upd_ack_ies_o::value_c&
gnb_du_cfg_upd_ack_ies_o::value_c::operator=(const gnb_du_cfg_upd_ack_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      c.set(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::cells_to_be_deactiv_list:
      c.set(other.c.get<cells_to_be_deactiv_list_l>());
      break;
    case types::transport_layer_address_info:
      c.set(other.c.get<transport_layer_address_info_s>());
      break;
    case types::ul_bh_non_up_traffic_map:
      c.set(other.c.get<ul_bh_non_up_traffic_map_s>());
      break;
    case types::bap_address:
      c.set(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::cells_for_son_list:
      c.set(other.c.get<cells_for_son_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_cfg_upd_ack_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_to_be_activ_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_to_be_activ_list()
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
crit_diagnostics_s& gnb_du_cfg_upd_ack_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
cells_to_be_deactiv_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_to_be_deactiv_list()
{
  assert_choice_type(types::cells_to_be_deactiv_list, type_, "Value");
  return c.get<cells_to_be_deactiv_list_l>();
}
transport_layer_address_info_s& gnb_du_cfg_upd_ack_ies_o::value_c::transport_layer_address_info()
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
ul_bh_non_up_traffic_map_s& gnb_du_cfg_upd_ack_ies_o::value_c::ul_bh_non_up_traffic_map()
{
  assert_choice_type(types::ul_bh_non_up_traffic_map, type_, "Value");
  return c.get<ul_bh_non_up_traffic_map_s>();
}
fixed_bitstring<10, false, true>& gnb_du_cfg_upd_ack_ies_o::value_c::bap_address()
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
cells_for_son_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_for_son_list()
{
  assert_choice_type(types::cells_for_son_list, type_, "Value");
  return c.get<cells_for_son_list_l>();
}
const uint16_t& gnb_du_cfg_upd_ack_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_to_be_activ_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_to_be_activ_list() const
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
const crit_diagnostics_s& gnb_du_cfg_upd_ack_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const cells_to_be_deactiv_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_to_be_deactiv_list() const
{
  assert_choice_type(types::cells_to_be_deactiv_list, type_, "Value");
  return c.get<cells_to_be_deactiv_list_l>();
}
const transport_layer_address_info_s& gnb_du_cfg_upd_ack_ies_o::value_c::transport_layer_address_info() const
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
const ul_bh_non_up_traffic_map_s& gnb_du_cfg_upd_ack_ies_o::value_c::ul_bh_non_up_traffic_map() const
{
  assert_choice_type(types::ul_bh_non_up_traffic_map, type_, "Value");
  return c.get<ul_bh_non_up_traffic_map_s>();
}
const fixed_bitstring<10, false, true>& gnb_du_cfg_upd_ack_ies_o::value_c::bap_address() const
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
const cells_for_son_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_for_son_list() const
{
  assert_choice_type(types::cells_for_son_list, type_, "Value");
  return c.get<cells_for_son_list_l>();
}
void gnb_du_cfg_upd_ack_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      j.start_array("Cells-to-be-Activated-List");
      for (const auto& e1 : c.get<cells_to_be_activ_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::cells_to_be_deactiv_list:
      j.start_array("Cells-to-be-Deactivated-List");
      for (const auto& e1 : c.get<cells_to_be_deactiv_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::transport_layer_address_info:
      j.write_fieldname("Transport-Layer-Address-Info");
      c.get<transport_layer_address_info_s>().to_json(j);
      break;
    case types::ul_bh_non_up_traffic_map:
      j.write_fieldname("UL-BH-Non-UP-Traffic-Mapping");
      c.get<ul_bh_non_up_traffic_map_s>().to_json(j);
      break;
    case types::bap_address:
      j.write_str("BIT STRING", c.get<fixed_bitstring<10, false, true>>().to_string());
      break;
    case types::cells_for_son_list:
      j.start_array("CellsForSON-List");
      for (const auto& e1 : c.get<cells_for_son_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_cfg_upd_ack_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_activ_list_l>(), 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::cells_to_be_deactiv_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_deactiv_list_l>(), 1, 512, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().pack(bref));
      break;
    case types::ul_bh_non_up_traffic_map:
      HANDLE_CODE(c.get<ul_bh_non_up_traffic_map_s>().pack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().pack(bref)));
      break;
    case types::cells_for_son_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_for_son_list_l>(), 1, 256, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_ack_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_activ_list_l>(), bref, 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::cells_to_be_deactiv_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_deactiv_list_l>(), bref, 1, 512, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().unpack(bref));
      break;
    case types::ul_bh_non_up_traffic_map:
      HANDLE_CODE(c.get<ul_bh_non_up_traffic_map_s>().unpack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().unpack(bref)));
      break;
    case types::cells_for_son_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_for_son_list_l>(), bref, 1, 256, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUConfigurationUpdateFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_cfg_upd_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool gnb_du_cfg_upd_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_cfg_upd_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_cfg_upd_fail_ies_o::value_c gnb_du_cfg_upd_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_cfg_upd_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_cfg_upd_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void gnb_du_cfg_upd_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
  }
}
gnb_du_cfg_upd_fail_ies_o::value_c::value_c(const gnb_du_cfg_upd_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
  }
}
gnb_du_cfg_upd_fail_ies_o::value_c&
gnb_du_cfg_upd_fail_ies_o::value_c::operator=(const gnb_du_cfg_upd_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_cfg_upd_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& gnb_du_cfg_upd_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& gnb_du_cfg_upd_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& gnb_du_cfg_upd_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& gnb_du_cfg_upd_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& gnb_du_cfg_upd_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& gnb_du_cfg_upd_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& gnb_du_cfg_upd_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void gnb_du_cfg_upd_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_cfg_upd_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUConfigurationUpdateIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_cfg_upd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 58, 62, 60, 89, 189, 42, 228, 254, 446, 45, 427};
  return map_enum_number(names, 12, idx, "id");
}
bool gnb_du_cfg_upd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 58, 62, 60, 89, 189, 42, 228, 254, 446, 45, 427};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_cfg_upd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 58:
      return crit_e::reject;
    case 62:
      return crit_e::reject;
    case 60:
      return crit_e::reject;
    case 89:
      return crit_e::reject;
    case 189:
      return crit_e::ignore;
    case 42:
      return crit_e::reject;
    case 228:
      return crit_e::reject;
    case 254:
      return crit_e::ignore;
    case 446:
      return crit_e::ignore;
    case 45:
      return crit_e::ignore;
    case 427:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_cfg_upd_ies_o::value_c gnb_du_cfg_upd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 58:
      ret.set(value_c::types::served_cells_to_add_list);
      break;
    case 62:
      ret.set(value_c::types::served_cells_to_modify_list);
      break;
    case 60:
      ret.set(value_c::types::served_cells_to_delete_list);
      break;
    case 89:
      ret.set(value_c::types::cells_status_list);
      break;
    case 189:
      ret.set(value_c::types::ded_si_delivery_needed_ue_list);
      break;
    case 42:
      ret.set(value_c::types::gnb_du_id);
      break;
    case 228:
      ret.set(value_c::types::gnb_du_tnl_assoc_to_rem_list);
      break;
    case 254:
      ret.set(value_c::types::transport_layer_address_info);
      break;
    case 446:
      ret.set(value_c::types::coverage_mod_notif);
      break;
    case 45:
      ret.set(value_c::types::gnb_du_name);
      break;
    case 427:
      ret.set(value_c::types::extended_gnb_du_name);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_cfg_upd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 58:
      return presence_e::optional;
    case 62:
      return presence_e::optional;
    case 60:
      return presence_e::optional;
    case 89:
      return presence_e::optional;
    case 189:
      return presence_e::optional;
    case 42:
      return presence_e::optional;
    case 228:
      return presence_e::optional;
    case 254:
      return presence_e::optional;
    case 446:
      return presence_e::optional;
    case 45:
      return presence_e::optional;
    case 427:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_cfg_upd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::served_cells_to_add_list:
      c.destroy<served_cells_to_add_list_l>();
      break;
    case types::served_cells_to_modify_list:
      c.destroy<served_cells_to_modify_list_l>();
      break;
    case types::served_cells_to_delete_list:
      c.destroy<served_cells_to_delete_list_l>();
      break;
    case types::cells_status_list:
      c.destroy<cells_status_list_l>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.destroy<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      c.destroy<gnb_du_tnl_assoc_to_rem_list_l>();
      break;
    case types::transport_layer_address_info:
      c.destroy<transport_layer_address_info_s>();
      break;
    case types::coverage_mod_notif:
      c.destroy<coverage_mod_notif_s>();
      break;
    case types::gnb_du_name:
      c.destroy<printable_string<1, 150, true, true>>();
      break;
    case types::extended_gnb_du_name:
      c.destroy<extended_gnb_du_name_s>();
      break;
    default:
      break;
  }
}
void gnb_du_cfg_upd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::served_cells_to_add_list:
      c.init<served_cells_to_add_list_l>();
      break;
    case types::served_cells_to_modify_list:
      c.init<served_cells_to_modify_list_l>();
      break;
    case types::served_cells_to_delete_list:
      c.init<served_cells_to_delete_list_l>();
      break;
    case types::cells_status_list:
      c.init<cells_status_list_l>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::gnb_du_id:
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      c.init<gnb_du_tnl_assoc_to_rem_list_l>();
      break;
    case types::transport_layer_address_info:
      c.init<transport_layer_address_info_s>();
      break;
    case types::coverage_mod_notif:
      c.init<coverage_mod_notif_s>();
      break;
    case types::gnb_du_name:
      c.init<printable_string<1, 150, true, true>>();
      break;
    case types::extended_gnb_du_name:
      c.init<extended_gnb_du_name_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
  }
}
gnb_du_cfg_upd_ies_o::value_c::value_c(const gnb_du_cfg_upd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::served_cells_to_add_list:
      c.init(other.c.get<served_cells_to_add_list_l>());
      break;
    case types::served_cells_to_modify_list:
      c.init(other.c.get<served_cells_to_modify_list_l>());
      break;
    case types::served_cells_to_delete_list:
      c.init(other.c.get<served_cells_to_delete_list_l>());
      break;
    case types::cells_status_list:
      c.init(other.c.get<cells_status_list_l>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::gnb_du_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      c.init(other.c.get<gnb_du_tnl_assoc_to_rem_list_l>());
      break;
    case types::transport_layer_address_info:
      c.init(other.c.get<transport_layer_address_info_s>());
      break;
    case types::coverage_mod_notif:
      c.init(other.c.get<coverage_mod_notif_s>());
      break;
    case types::gnb_du_name:
      c.init(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::extended_gnb_du_name:
      c.init(other.c.get<extended_gnb_du_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
  }
}
gnb_du_cfg_upd_ies_o::value_c& gnb_du_cfg_upd_ies_o::value_c::operator=(const gnb_du_cfg_upd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::served_cells_to_add_list:
      c.set(other.c.get<served_cells_to_add_list_l>());
      break;
    case types::served_cells_to_modify_list:
      c.set(other.c.get<served_cells_to_modify_list_l>());
      break;
    case types::served_cells_to_delete_list:
      c.set(other.c.get<served_cells_to_delete_list_l>());
      break;
    case types::cells_status_list:
      c.set(other.c.get<cells_status_list_l>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.set(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::gnb_du_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      c.set(other.c.get<gnb_du_tnl_assoc_to_rem_list_l>());
      break;
    case types::transport_layer_address_info:
      c.set(other.c.get<transport_layer_address_info_s>());
      break;
    case types::coverage_mod_notif:
      c.set(other.c.get<coverage_mod_notif_s>());
      break;
    case types::gnb_du_name:
      c.set(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::extended_gnb_du_name:
      c.set(other.c.get<extended_gnb_du_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_cfg_upd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
served_cells_to_add_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_add_list()
{
  assert_choice_type(types::served_cells_to_add_list, type_, "Value");
  return c.get<served_cells_to_add_list_l>();
}
served_cells_to_modify_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_modify_list()
{
  assert_choice_type(types::served_cells_to_modify_list, type_, "Value");
  return c.get<served_cells_to_modify_list_l>();
}
served_cells_to_delete_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_delete_list()
{
  assert_choice_type(types::served_cells_to_delete_list, type_, "Value");
  return c.get<served_cells_to_delete_list_l>();
}
cells_status_list_l& gnb_du_cfg_upd_ies_o::value_c::cells_status_list()
{
  assert_choice_type(types::cells_status_list, type_, "Value");
  return c.get<cells_status_list_l>();
}
ded_si_delivery_needed_ue_list_l& gnb_du_cfg_upd_ies_o::value_c::ded_si_delivery_needed_ue_list()
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
uint64_t& gnb_du_cfg_upd_ies_o::value_c::gnb_du_id()
{
  assert_choice_type(types::gnb_du_id, type_, "Value");
  return c.get<uint64_t>();
}
gnb_du_tnl_assoc_to_rem_list_l& gnb_du_cfg_upd_ies_o::value_c::gnb_du_tnl_assoc_to_rem_list()
{
  assert_choice_type(types::gnb_du_tnl_assoc_to_rem_list, type_, "Value");
  return c.get<gnb_du_tnl_assoc_to_rem_list_l>();
}
transport_layer_address_info_s& gnb_du_cfg_upd_ies_o::value_c::transport_layer_address_info()
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
coverage_mod_notif_s& gnb_du_cfg_upd_ies_o::value_c::coverage_mod_notif()
{
  assert_choice_type(types::coverage_mod_notif, type_, "Value");
  return c.get<coverage_mod_notif_s>();
}
printable_string<1, 150, true, true>& gnb_du_cfg_upd_ies_o::value_c::gnb_du_name()
{
  assert_choice_type(types::gnb_du_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
extended_gnb_du_name_s& gnb_du_cfg_upd_ies_o::value_c::extended_gnb_du_name()
{
  assert_choice_type(types::extended_gnb_du_name, type_, "Value");
  return c.get<extended_gnb_du_name_s>();
}
const uint16_t& gnb_du_cfg_upd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const served_cells_to_add_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_add_list() const
{
  assert_choice_type(types::served_cells_to_add_list, type_, "Value");
  return c.get<served_cells_to_add_list_l>();
}
const served_cells_to_modify_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_modify_list() const
{
  assert_choice_type(types::served_cells_to_modify_list, type_, "Value");
  return c.get<served_cells_to_modify_list_l>();
}
const served_cells_to_delete_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_delete_list() const
{
  assert_choice_type(types::served_cells_to_delete_list, type_, "Value");
  return c.get<served_cells_to_delete_list_l>();
}
const cells_status_list_l& gnb_du_cfg_upd_ies_o::value_c::cells_status_list() const
{
  assert_choice_type(types::cells_status_list, type_, "Value");
  return c.get<cells_status_list_l>();
}
const ded_si_delivery_needed_ue_list_l& gnb_du_cfg_upd_ies_o::value_c::ded_si_delivery_needed_ue_list() const
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
const uint64_t& gnb_du_cfg_upd_ies_o::value_c::gnb_du_id() const
{
  assert_choice_type(types::gnb_du_id, type_, "Value");
  return c.get<uint64_t>();
}
const gnb_du_tnl_assoc_to_rem_list_l& gnb_du_cfg_upd_ies_o::value_c::gnb_du_tnl_assoc_to_rem_list() const
{
  assert_choice_type(types::gnb_du_tnl_assoc_to_rem_list, type_, "Value");
  return c.get<gnb_du_tnl_assoc_to_rem_list_l>();
}
const transport_layer_address_info_s& gnb_du_cfg_upd_ies_o::value_c::transport_layer_address_info() const
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
const coverage_mod_notif_s& gnb_du_cfg_upd_ies_o::value_c::coverage_mod_notif() const
{
  assert_choice_type(types::coverage_mod_notif, type_, "Value");
  return c.get<coverage_mod_notif_s>();
}
const printable_string<1, 150, true, true>& gnb_du_cfg_upd_ies_o::value_c::gnb_du_name() const
{
  assert_choice_type(types::gnb_du_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
const extended_gnb_du_name_s& gnb_du_cfg_upd_ies_o::value_c::extended_gnb_du_name() const
{
  assert_choice_type(types::extended_gnb_du_name, type_, "Value");
  return c.get<extended_gnb_du_name_s>();
}
void gnb_du_cfg_upd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::served_cells_to_add_list:
      j.start_array("Served-Cells-To-Add-List");
      for (const auto& e1 : c.get<served_cells_to_add_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::served_cells_to_modify_list:
      j.start_array("Served-Cells-To-Modify-List");
      for (const auto& e1 : c.get<served_cells_to_modify_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::served_cells_to_delete_list:
      j.start_array("Served-Cells-To-Delete-List");
      for (const auto& e1 : c.get<served_cells_to_delete_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cells_status_list:
      j.start_array("Cells-Status-List");
      for (const auto& e1 : c.get<cells_status_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ded_si_delivery_needed_ue_list:
      j.start_array("Dedicated-SIDelivery-NeededUE-List");
      for (const auto& e1 : c.get<ded_si_delivery_needed_ue_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_du_id:
      j.write_int("INTEGER (0..68719476735)", c.get<uint64_t>());
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      j.start_array("GNB-DU-TNL-Association-To-Remove-List");
      for (const auto& e1 : c.get<gnb_du_tnl_assoc_to_rem_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::transport_layer_address_info:
      j.write_fieldname("Transport-Layer-Address-Info");
      c.get<transport_layer_address_info_s>().to_json(j);
      break;
    case types::coverage_mod_notif:
      j.write_fieldname("Coverage-Modification-Notification");
      c.get<coverage_mod_notif_s>().to_json(j);
      break;
    case types::gnb_du_name:
      j.write_str("PrintableString", c.get<printable_string<1, 150, true, true>>().to_string());
      break;
    case types::extended_gnb_du_name:
      j.write_fieldname("Extended-GNB-DU-Name");
      c.get<extended_gnb_du_name_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_cfg_upd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::served_cells_to_add_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<served_cells_to_add_list_l>(), 1, 512, true));
      break;
    case types::served_cells_to_modify_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<served_cells_to_modify_list_l>(), 1, 512, true));
      break;
    case types::served_cells_to_delete_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<served_cells_to_delete_list_l>(), 1, 512, true));
      break;
    case types::cells_status_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_status_list_l>(), 0, 512, true));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ded_si_delivery_needed_ue_list_l>(), 1, 65536, true));
      break;
    case types::gnb_du_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)68719476735u, false, true));
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_du_tnl_assoc_to_rem_list_l>(), 1, 32, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().pack(bref));
      break;
    case types::coverage_mod_notif:
      HANDLE_CODE(c.get<coverage_mod_notif_s>().pack(bref));
      break;
    case types::gnb_du_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().pack(bref)));
      break;
    case types::extended_gnb_du_name:
      HANDLE_CODE(c.get<extended_gnb_du_name_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::served_cells_to_add_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<served_cells_to_add_list_l>(), bref, 1, 512, true));
      break;
    case types::served_cells_to_modify_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<served_cells_to_modify_list_l>(), bref, 1, 512, true));
      break;
    case types::served_cells_to_delete_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<served_cells_to_delete_list_l>(), bref, 1, 512, true));
      break;
    case types::cells_status_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_status_list_l>(), bref, 0, 512, true));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ded_si_delivery_needed_ue_list_l>(), bref, 1, 65536, true));
      break;
    case types::gnb_du_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)68719476735u, false, true));
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_du_tnl_assoc_to_rem_list_l>(), bref, 1, 32, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().unpack(bref));
      break;
    case types::coverage_mod_notif:
      HANDLE_CODE(c.get<coverage_mod_notif_s>().unpack(bref));
      break;
    case types::gnb_du_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().unpack(bref)));
      break;
    case types::extended_gnb_du_name:
      HANDLE_CODE(c.get<extended_gnb_du_name_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUResourceConfigurationAcknowledgeIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_res_cfg_ack_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 7};
  return map_enum_number(names, 2, idx, "id");
}
bool gnb_du_res_cfg_ack_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_res_cfg_ack_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_res_cfg_ack_ies_o::value_c gnb_du_res_cfg_ack_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_res_cfg_ack_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_res_cfg_ack_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void gnb_du_res_cfg_ack_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ack_ies_o::value_c");
  }
}
gnb_du_res_cfg_ack_ies_o::value_c::value_c(const gnb_du_res_cfg_ack_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ack_ies_o::value_c");
  }
}
gnb_du_res_cfg_ack_ies_o::value_c&
gnb_du_res_cfg_ack_ies_o::value_c::operator=(const gnb_du_res_cfg_ack_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ack_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_res_cfg_ack_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
crit_diagnostics_s& gnb_du_res_cfg_ack_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& gnb_du_res_cfg_ack_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const crit_diagnostics_s& gnb_du_res_cfg_ack_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void gnb_du_res_cfg_ack_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ack_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_res_cfg_ack_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ack_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_cfg_ack_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ack_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUResourceConfigurationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_res_cfg_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool gnb_du_res_cfg_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_res_cfg_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_res_cfg_fail_ies_o::value_c gnb_du_res_cfg_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_res_cfg_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_res_cfg_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void gnb_du_res_cfg_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_fail_ies_o::value_c");
  }
}
gnb_du_res_cfg_fail_ies_o::value_c::value_c(const gnb_du_res_cfg_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_fail_ies_o::value_c");
  }
}
gnb_du_res_cfg_fail_ies_o::value_c&
gnb_du_res_cfg_fail_ies_o::value_c::operator=(const gnb_du_res_cfg_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_res_cfg_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& gnb_du_res_cfg_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& gnb_du_res_cfg_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& gnb_du_res_cfg_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& gnb_du_res_cfg_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& gnb_du_res_cfg_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& gnb_du_res_cfg_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& gnb_du_res_cfg_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void gnb_du_res_cfg_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_res_cfg_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_cfg_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUResourceConfigurationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_res_cfg_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 288, 289, 533, 534};
  return map_enum_number(names, 5, idx, "id");
}
bool gnb_du_res_cfg_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 288, 289, 533, 534};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_res_cfg_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 288:
      return crit_e::reject;
    case 289:
      return crit_e::reject;
    case 533:
      return crit_e::reject;
    case 534:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_res_cfg_ies_o::value_c gnb_du_res_cfg_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 288:
      ret.set(value_c::types::activ_cells_to_be_upd_list);
      break;
    case 289:
      ret.set(value_c::types::child_nodes_list);
      break;
    case 533:
      ret.set(value_c::types::neighbour_node_cells_list);
      break;
    case 534:
      ret.set(value_c::types::serving_cells_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_res_cfg_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 288:
      return presence_e::optional;
    case 289:
      return presence_e::optional;
    case 533:
      return presence_e::optional;
    case 534:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_res_cfg_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::activ_cells_to_be_upd_list:
      c.destroy<activ_cells_to_be_upd_list_l>();
      break;
    case types::child_nodes_list:
      c.destroy<child_nodes_list_l>();
      break;
    case types::neighbour_node_cells_list:
      c.destroy<neighbour_node_cells_list_l>();
      break;
    case types::serving_cells_list:
      c.destroy<serving_cells_list_l>();
      break;
    default:
      break;
  }
}
void gnb_du_res_cfg_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::activ_cells_to_be_upd_list:
      c.init<activ_cells_to_be_upd_list_l>();
      break;
    case types::child_nodes_list:
      c.init<child_nodes_list_l>();
      break;
    case types::neighbour_node_cells_list:
      c.init<neighbour_node_cells_list_l>();
      break;
    case types::serving_cells_list:
      c.init<serving_cells_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ies_o::value_c");
  }
}
gnb_du_res_cfg_ies_o::value_c::value_c(const gnb_du_res_cfg_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::activ_cells_to_be_upd_list:
      c.init(other.c.get<activ_cells_to_be_upd_list_l>());
      break;
    case types::child_nodes_list:
      c.init(other.c.get<child_nodes_list_l>());
      break;
    case types::neighbour_node_cells_list:
      c.init(other.c.get<neighbour_node_cells_list_l>());
      break;
    case types::serving_cells_list:
      c.init(other.c.get<serving_cells_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ies_o::value_c");
  }
}
gnb_du_res_cfg_ies_o::value_c& gnb_du_res_cfg_ies_o::value_c::operator=(const gnb_du_res_cfg_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::activ_cells_to_be_upd_list:
      c.set(other.c.get<activ_cells_to_be_upd_list_l>());
      break;
    case types::child_nodes_list:
      c.set(other.c.get<child_nodes_list_l>());
      break;
    case types::neighbour_node_cells_list:
      c.set(other.c.get<neighbour_node_cells_list_l>());
      break;
    case types::serving_cells_list:
      c.set(other.c.get<serving_cells_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_res_cfg_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
activ_cells_to_be_upd_list_l& gnb_du_res_cfg_ies_o::value_c::activ_cells_to_be_upd_list()
{
  assert_choice_type(types::activ_cells_to_be_upd_list, type_, "Value");
  return c.get<activ_cells_to_be_upd_list_l>();
}
child_nodes_list_l& gnb_du_res_cfg_ies_o::value_c::child_nodes_list()
{
  assert_choice_type(types::child_nodes_list, type_, "Value");
  return c.get<child_nodes_list_l>();
}
neighbour_node_cells_list_l& gnb_du_res_cfg_ies_o::value_c::neighbour_node_cells_list()
{
  assert_choice_type(types::neighbour_node_cells_list, type_, "Value");
  return c.get<neighbour_node_cells_list_l>();
}
serving_cells_list_l& gnb_du_res_cfg_ies_o::value_c::serving_cells_list()
{
  assert_choice_type(types::serving_cells_list, type_, "Value");
  return c.get<serving_cells_list_l>();
}
const uint16_t& gnb_du_res_cfg_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const activ_cells_to_be_upd_list_l& gnb_du_res_cfg_ies_o::value_c::activ_cells_to_be_upd_list() const
{
  assert_choice_type(types::activ_cells_to_be_upd_list, type_, "Value");
  return c.get<activ_cells_to_be_upd_list_l>();
}
const child_nodes_list_l& gnb_du_res_cfg_ies_o::value_c::child_nodes_list() const
{
  assert_choice_type(types::child_nodes_list, type_, "Value");
  return c.get<child_nodes_list_l>();
}
const neighbour_node_cells_list_l& gnb_du_res_cfg_ies_o::value_c::neighbour_node_cells_list() const
{
  assert_choice_type(types::neighbour_node_cells_list, type_, "Value");
  return c.get<neighbour_node_cells_list_l>();
}
const serving_cells_list_l& gnb_du_res_cfg_ies_o::value_c::serving_cells_list() const
{
  assert_choice_type(types::serving_cells_list, type_, "Value");
  return c.get<serving_cells_list_l>();
}
void gnb_du_res_cfg_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::activ_cells_to_be_upd_list:
      j.start_array("Activated-Cells-to-be-Updated-List");
      for (const auto& e1 : c.get<activ_cells_to_be_upd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::child_nodes_list:
      j.start_array("Child-Nodes-List");
      for (const auto& e1 : c.get<child_nodes_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::neighbour_node_cells_list:
      j.start_array("Neighbour-Node-Cells-List");
      for (const auto& e1 : c.get<neighbour_node_cells_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::serving_cells_list:
      j.start_array("Serving-Cells-List");
      for (const auto& e1 : c.get<serving_cells_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_res_cfg_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::activ_cells_to_be_upd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<activ_cells_to_be_upd_list_l>(), 1, 512, true));
      break;
    case types::child_nodes_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<child_nodes_list_l>(), 1, 1024, true));
      break;
    case types::neighbour_node_cells_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<neighbour_node_cells_list_l>(), 1, 1024, true));
      break;
    case types::serving_cells_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<serving_cells_list_l>(), 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_cfg_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::activ_cells_to_be_upd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<activ_cells_to_be_upd_list_l>(), bref, 1, 512, true));
      break;
    case types::child_nodes_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<child_nodes_list_l>(), bref, 1, 1024, true));
      break;
    case types::neighbour_node_cells_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<neighbour_node_cells_list_l>(), bref, 1, 1024, true));
      break;
    case types::serving_cells_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<serving_cells_list_l>(), bref, 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUResourceCoordinationRequest-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_res_coordination_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 106, 101, 213};
  return map_enum_number(names, 4, idx, "id");
}
bool gnb_du_res_coordination_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 106, 101, 213};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_res_coordination_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 106:
      return crit_e::reject;
    case 101:
      return crit_e::reject;
    case 213:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_res_coordination_request_ies_o::value_c gnb_du_res_coordination_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 106:
      ret.set(value_c::types::request_type);
      break;
    case 101:
      ret.set(value_c::types::eutra_nr_cell_res_coordination_req_container);
      break;
    case 213:
      ret.set(value_c::types::ignore_res_coordination_container);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_res_coordination_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 106:
      return presence_e::mandatory;
    case 101:
      return presence_e::mandatory;
    case 213:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_res_coordination_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::eutra_nr_cell_res_coordination_req_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void gnb_du_res_coordination_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::request_type:
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::ignore_res_coordination_container:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
  }
}
gnb_du_res_coordination_request_ies_o::value_c::value_c(const gnb_du_res_coordination_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::request_type:
      c.init(other.c.get<request_type_e>());
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::ignore_res_coordination_container:
      c.init(other.c.get<ignore_res_coordination_container_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
  }
}
gnb_du_res_coordination_request_ies_o::value_c&
gnb_du_res_coordination_request_ies_o::value_c::operator=(const gnb_du_res_coordination_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::request_type:
      c.set(other.c.get<request_type_e>());
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::ignore_res_coordination_container:
      c.set(other.c.get<ignore_res_coordination_container_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_res_coordination_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
request_type_e& gnb_du_res_coordination_request_ies_o::value_c::request_type()
{
  assert_choice_type(types::request_type, type_, "Value");
  return c.get<request_type_e>();
}
unbounded_octstring<true>&
gnb_du_res_coordination_request_ies_o::value_c::eutra_nr_cell_res_coordination_req_container()
{
  assert_choice_type(types::eutra_nr_cell_res_coordination_req_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
ignore_res_coordination_container_e& gnb_du_res_coordination_request_ies_o::value_c::ignore_res_coordination_container()
{
  assert_choice_type(types::ignore_res_coordination_container, type_, "Value");
  return c.get<ignore_res_coordination_container_e>();
}
const uint16_t& gnb_du_res_coordination_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const request_type_e& gnb_du_res_coordination_request_ies_o::value_c::request_type() const
{
  assert_choice_type(types::request_type, type_, "Value");
  return c.get<request_type_e>();
}
const unbounded_octstring<true>&
gnb_du_res_coordination_request_ies_o::value_c::eutra_nr_cell_res_coordination_req_container() const
{
  assert_choice_type(types::eutra_nr_cell_res_coordination_req_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const ignore_res_coordination_container_e&
gnb_du_res_coordination_request_ies_o::value_c::ignore_res_coordination_container() const
{
  assert_choice_type(types::ignore_res_coordination_container, type_, "Value");
  return c.get<ignore_res_coordination_container_e>();
}
void gnb_du_res_coordination_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::request_type:
      j.write_str("RequestType", c.get<request_type_e>().to_string());
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::ignore_res_coordination_container:
      j.write_str("IgnoreResourceCoordinationContainer", "yes");
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_res_coordination_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::request_type:
      HANDLE_CODE(c.get<request_type_e>().pack(bref));
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::ignore_res_coordination_container:
      HANDLE_CODE(c.get<ignore_res_coordination_container_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_coordination_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::request_type:
      HANDLE_CODE(c.get<request_type_e>().unpack(bref));
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::ignore_res_coordination_container:
      HANDLE_CODE(c.get<ignore_res_coordination_container_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUResourceCoordinationResponse-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_res_coordination_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 102};
  return map_enum_number(names, 2, idx, "id");
}
bool gnb_du_res_coordination_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 102};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_res_coordination_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 102:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_res_coordination_resp_ies_o::value_c gnb_du_res_coordination_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 102:
      ret.set(value_c::types::eutra_nr_cell_res_coordination_req_ack_container);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_res_coordination_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 102:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_res_coordination_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void gnb_du_res_coordination_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
  }
}
gnb_du_res_coordination_resp_ies_o::value_c::value_c(const gnb_du_res_coordination_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
  }
}
gnb_du_res_coordination_resp_ies_o::value_c&
gnb_du_res_coordination_resp_ies_o::value_c::operator=(const gnb_du_res_coordination_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_res_coordination_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
unbounded_octstring<true>&
gnb_du_res_coordination_resp_ies_o::value_c::eutra_nr_cell_res_coordination_req_ack_container()
{
  assert_choice_type(types::eutra_nr_cell_res_coordination_req_ack_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const uint16_t& gnb_du_res_coordination_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const unbounded_octstring<true>&
gnb_du_res_coordination_resp_ies_o::value_c::eutra_nr_cell_res_coordination_req_ack_container() const
{
  assert_choice_type(types::eutra_nr_cell_res_coordination_req_ack_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
void gnb_du_res_coordination_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_res_coordination_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_coordination_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUStatusIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_status_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 172, 509};
  return map_enum_number(names, 3, idx, "id");
}
bool gnb_du_status_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 172, 509};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_status_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 172:
      return crit_e::reject;
    case 509:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_status_ind_ies_o::value_c gnb_du_status_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 172:
      ret.set(value_c::types::gnb_du_overload_info);
      break;
    case 509:
      ret.set(value_c::types::iab_congestion_ind);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_status_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 172:
      return presence_e::mandatory;
    case 509:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_status_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::iab_congestion_ind:
      c.destroy<iab_congestion_ind_s>();
      break;
    default:
      break;
  }
}
void gnb_du_status_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_du_overload_info:
      break;
    case types::iab_congestion_ind:
      c.init<iab_congestion_ind_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
  }
}
gnb_du_status_ind_ies_o::value_c::value_c(const gnb_du_status_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_overload_info:
      c.init(other.c.get<gnb_du_overload_info_e>());
      break;
    case types::iab_congestion_ind:
      c.init(other.c.get<iab_congestion_ind_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
  }
}
gnb_du_status_ind_ies_o::value_c&
gnb_du_status_ind_ies_o::value_c::operator=(const gnb_du_status_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_overload_info:
      c.set(other.c.get<gnb_du_overload_info_e>());
      break;
    case types::iab_congestion_ind:
      c.set(other.c.get<iab_congestion_ind_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_status_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
gnb_du_overload_info_e& gnb_du_status_ind_ies_o::value_c::gnb_du_overload_info()
{
  assert_choice_type(types::gnb_du_overload_info, type_, "Value");
  return c.get<gnb_du_overload_info_e>();
}
iab_congestion_ind_s& gnb_du_status_ind_ies_o::value_c::iab_congestion_ind()
{
  assert_choice_type(types::iab_congestion_ind, type_, "Value");
  return c.get<iab_congestion_ind_s>();
}
const uint16_t& gnb_du_status_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const gnb_du_overload_info_e& gnb_du_status_ind_ies_o::value_c::gnb_du_overload_info() const
{
  assert_choice_type(types::gnb_du_overload_info, type_, "Value");
  return c.get<gnb_du_overload_info_e>();
}
const iab_congestion_ind_s& gnb_du_status_ind_ies_o::value_c::iab_congestion_ind() const
{
  assert_choice_type(types::iab_congestion_ind, type_, "Value");
  return c.get<iab_congestion_ind_s>();
}
void gnb_du_status_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_overload_info:
      j.write_str("GNBDUOverloadInformation", c.get<gnb_du_overload_info_e>().to_string());
      break;
    case types::iab_congestion_ind:
      j.write_fieldname("IABCongestionIndication");
      c.get<iab_congestion_ind_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_status_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_du_overload_info:
      HANDLE_CODE(c.get<gnb_du_overload_info_e>().pack(bref));
      break;
    case types::iab_congestion_ind:
      HANDLE_CODE(c.get<iab_congestion_ind_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_status_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_du_overload_info:
      HANDLE_CODE(c.get<gnb_du_overload_info_e>().unpack(bref));
      break;
    case types::iab_congestion_ind:
      HANDLE_CODE(c.get<iab_congestion_ind_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// IABTNLAddressFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_tnl_address_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool iab_tnl_address_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e iab_tnl_address_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
iab_tnl_address_fail_ies_o::value_c iab_tnl_address_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_tnl_address_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void iab_tnl_address_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void iab_tnl_address_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_fail_ies_o::value_c");
  }
}
iab_tnl_address_fail_ies_o::value_c::value_c(const iab_tnl_address_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_fail_ies_o::value_c");
  }
}
iab_tnl_address_fail_ies_o::value_c&
iab_tnl_address_fail_ies_o::value_c::operator=(const iab_tnl_address_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& iab_tnl_address_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& iab_tnl_address_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& iab_tnl_address_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& iab_tnl_address_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& iab_tnl_address_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& iab_tnl_address_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& iab_tnl_address_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& iab_tnl_address_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void iab_tnl_address_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE iab_tnl_address_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_tnl_address_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// IABTNLAddressRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_tnl_address_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 297, 296, 292, 513};
  return map_enum_number(names, 5, idx, "id");
}
bool iab_tnl_address_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 297, 296, 292, 513};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e iab_tnl_address_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 297:
      return crit_e::reject;
    case 296:
      return crit_e::reject;
    case 292:
      return crit_e::reject;
    case 513:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
iab_tnl_address_request_ies_o::value_c iab_tnl_address_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 297:
      ret.set(value_c::types::ia_bv4_addresses_requested);
      break;
    case 296:
      ret.set(value_c::types::iab_ip_v6_request_type);
      break;
    case 292:
      ret.set(value_c::types::iab_tnl_addresses_to_rem_list);
      break;
    case 513:
      ret.set(value_c::types::iab_tnl_addresses_exception);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_tnl_address_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 297:
      return presence_e::optional;
    case 296:
      return presence_e::optional;
    case 292:
      return presence_e::optional;
    case 513:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void iab_tnl_address_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::ia_bv4_addresses_requested:
      c.destroy<ia_bv4_addresses_requested_s>();
      break;
    case types::iab_ip_v6_request_type:
      c.destroy<iab_ip_v6_request_type_c>();
      break;
    case types::iab_tnl_addresses_to_rem_list:
      c.destroy<iab_tnl_addresses_to_rem_list_l>();
      break;
    case types::iab_tnl_addresses_exception:
      c.destroy<iab_tnl_addresses_exception_s>();
      break;
    default:
      break;
  }
}
void iab_tnl_address_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::ia_bv4_addresses_requested:
      c.init<ia_bv4_addresses_requested_s>();
      break;
    case types::iab_ip_v6_request_type:
      c.init<iab_ip_v6_request_type_c>();
      break;
    case types::iab_tnl_addresses_to_rem_list:
      c.init<iab_tnl_addresses_to_rem_list_l>();
      break;
    case types::iab_tnl_addresses_exception:
      c.init<iab_tnl_addresses_exception_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_request_ies_o::value_c");
  }
}
iab_tnl_address_request_ies_o::value_c::value_c(const iab_tnl_address_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ia_bv4_addresses_requested:
      c.init(other.c.get<ia_bv4_addresses_requested_s>());
      break;
    case types::iab_ip_v6_request_type:
      c.init(other.c.get<iab_ip_v6_request_type_c>());
      break;
    case types::iab_tnl_addresses_to_rem_list:
      c.init(other.c.get<iab_tnl_addresses_to_rem_list_l>());
      break;
    case types::iab_tnl_addresses_exception:
      c.init(other.c.get<iab_tnl_addresses_exception_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_request_ies_o::value_c");
  }
}
iab_tnl_address_request_ies_o::value_c&
iab_tnl_address_request_ies_o::value_c::operator=(const iab_tnl_address_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ia_bv4_addresses_requested:
      c.set(other.c.get<ia_bv4_addresses_requested_s>());
      break;
    case types::iab_ip_v6_request_type:
      c.set(other.c.get<iab_ip_v6_request_type_c>());
      break;
    case types::iab_tnl_addresses_to_rem_list:
      c.set(other.c.get<iab_tnl_addresses_to_rem_list_l>());
      break;
    case types::iab_tnl_addresses_exception:
      c.set(other.c.get<iab_tnl_addresses_exception_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& iab_tnl_address_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
ia_bv4_addresses_requested_s& iab_tnl_address_request_ies_o::value_c::ia_bv4_addresses_requested()
{
  assert_choice_type(types::ia_bv4_addresses_requested, type_, "Value");
  return c.get<ia_bv4_addresses_requested_s>();
}
iab_ip_v6_request_type_c& iab_tnl_address_request_ies_o::value_c::iab_ip_v6_request_type()
{
  assert_choice_type(types::iab_ip_v6_request_type, type_, "Value");
  return c.get<iab_ip_v6_request_type_c>();
}
iab_tnl_addresses_to_rem_list_l& iab_tnl_address_request_ies_o::value_c::iab_tnl_addresses_to_rem_list()
{
  assert_choice_type(types::iab_tnl_addresses_to_rem_list, type_, "Value");
  return c.get<iab_tnl_addresses_to_rem_list_l>();
}
iab_tnl_addresses_exception_s& iab_tnl_address_request_ies_o::value_c::iab_tnl_addresses_exception()
{
  assert_choice_type(types::iab_tnl_addresses_exception, type_, "Value");
  return c.get<iab_tnl_addresses_exception_s>();
}
const uint16_t& iab_tnl_address_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const ia_bv4_addresses_requested_s& iab_tnl_address_request_ies_o::value_c::ia_bv4_addresses_requested() const
{
  assert_choice_type(types::ia_bv4_addresses_requested, type_, "Value");
  return c.get<ia_bv4_addresses_requested_s>();
}
const iab_ip_v6_request_type_c& iab_tnl_address_request_ies_o::value_c::iab_ip_v6_request_type() const
{
  assert_choice_type(types::iab_ip_v6_request_type, type_, "Value");
  return c.get<iab_ip_v6_request_type_c>();
}
const iab_tnl_addresses_to_rem_list_l& iab_tnl_address_request_ies_o::value_c::iab_tnl_addresses_to_rem_list() const
{
  assert_choice_type(types::iab_tnl_addresses_to_rem_list, type_, "Value");
  return c.get<iab_tnl_addresses_to_rem_list_l>();
}
const iab_tnl_addresses_exception_s& iab_tnl_address_request_ies_o::value_c::iab_tnl_addresses_exception() const
{
  assert_choice_type(types::iab_tnl_addresses_exception, type_, "Value");
  return c.get<iab_tnl_addresses_exception_s>();
}
void iab_tnl_address_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::ia_bv4_addresses_requested:
      j.write_fieldname("IABv4AddressesRequested");
      c.get<ia_bv4_addresses_requested_s>().to_json(j);
      break;
    case types::iab_ip_v6_request_type:
      j.write_fieldname("IABIPv6RequestType");
      c.get<iab_ip_v6_request_type_c>().to_json(j);
      break;
    case types::iab_tnl_addresses_to_rem_list:
      j.start_array("IAB-TNL-Addresses-To-Remove-List");
      for (const auto& e1 : c.get<iab_tnl_addresses_to_rem_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::iab_tnl_addresses_exception:
      j.write_fieldname("IAB-TNL-Addresses-Exception");
      c.get<iab_tnl_addresses_exception_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE iab_tnl_address_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ia_bv4_addresses_requested:
      HANDLE_CODE(c.get<ia_bv4_addresses_requested_s>().pack(bref));
      break;
    case types::iab_ip_v6_request_type:
      HANDLE_CODE(c.get<iab_ip_v6_request_type_c>().pack(bref));
      break;
    case types::iab_tnl_addresses_to_rem_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<iab_tnl_addresses_to_rem_list_l>(), 1, 1024, true));
      break;
    case types::iab_tnl_addresses_exception:
      HANDLE_CODE(c.get<iab_tnl_addresses_exception_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_tnl_address_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ia_bv4_addresses_requested:
      HANDLE_CODE(c.get<ia_bv4_addresses_requested_s>().unpack(bref));
      break;
    case types::iab_ip_v6_request_type:
      HANDLE_CODE(c.get<iab_ip_v6_request_type_c>().unpack(bref));
      break;
    case types::iab_tnl_addresses_to_rem_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<iab_tnl_addresses_to_rem_list_l>(), bref, 1, 1024, true));
      break;
    case types::iab_tnl_addresses_exception:
      HANDLE_CODE(c.get<iab_tnl_addresses_exception_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// IABTNLAddressResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_tnl_address_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 294};
  return map_enum_number(names, 2, idx, "id");
}
bool iab_tnl_address_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 294};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e iab_tnl_address_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 294:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
iab_tnl_address_resp_ies_o::value_c iab_tnl_address_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 294:
      ret.set(value_c::types::iab_allocated_tnl_address_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_tnl_address_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 294:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void iab_tnl_address_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::iab_allocated_tnl_address_list:
      c.destroy<iab_allocated_tnl_address_list_l>();
      break;
    default:
      break;
  }
}
void iab_tnl_address_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::iab_allocated_tnl_address_list:
      c.init<iab_allocated_tnl_address_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_resp_ies_o::value_c");
  }
}
iab_tnl_address_resp_ies_o::value_c::value_c(const iab_tnl_address_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::iab_allocated_tnl_address_list:
      c.init(other.c.get<iab_allocated_tnl_address_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_resp_ies_o::value_c");
  }
}
iab_tnl_address_resp_ies_o::value_c&
iab_tnl_address_resp_ies_o::value_c::operator=(const iab_tnl_address_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::iab_allocated_tnl_address_list:
      c.set(other.c.get<iab_allocated_tnl_address_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& iab_tnl_address_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
iab_allocated_tnl_address_list_l& iab_tnl_address_resp_ies_o::value_c::iab_allocated_tnl_address_list()
{
  assert_choice_type(types::iab_allocated_tnl_address_list, type_, "Value");
  return c.get<iab_allocated_tnl_address_list_l>();
}
const uint16_t& iab_tnl_address_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const iab_allocated_tnl_address_list_l& iab_tnl_address_resp_ies_o::value_c::iab_allocated_tnl_address_list() const
{
  assert_choice_type(types::iab_allocated_tnl_address_list, type_, "Value");
  return c.get<iab_allocated_tnl_address_list_l>();
}
void iab_tnl_address_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::iab_allocated_tnl_address_list:
      j.start_array("IAB-Allocated-TNL-Address-List");
      for (const auto& e1 : c.get<iab_allocated_tnl_address_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE iab_tnl_address_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::iab_allocated_tnl_address_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<iab_allocated_tnl_address_list_l>(), 1, 1024, true));
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_tnl_address_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::iab_allocated_tnl_address_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<iab_allocated_tnl_address_list_l>(), bref, 1, 1024, true));
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// IABUPConfigurationUpdateFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_up_cfg_upd_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool iab_up_cfg_upd_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e iab_up_cfg_upd_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
iab_up_cfg_upd_fail_ies_o::value_c iab_up_cfg_upd_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_up_cfg_upd_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void iab_up_cfg_upd_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void iab_up_cfg_upd_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_fail_ies_o::value_c");
  }
}
iab_up_cfg_upd_fail_ies_o::value_c::value_c(const iab_up_cfg_upd_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_fail_ies_o::value_c");
  }
}
iab_up_cfg_upd_fail_ies_o::value_c&
iab_up_cfg_upd_fail_ies_o::value_c::operator=(const iab_up_cfg_upd_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& iab_up_cfg_upd_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& iab_up_cfg_upd_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& iab_up_cfg_upd_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& iab_up_cfg_upd_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& iab_up_cfg_upd_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& iab_up_cfg_upd_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& iab_up_cfg_upd_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& iab_up_cfg_upd_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void iab_up_cfg_upd_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE iab_up_cfg_upd_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_up_cfg_upd_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// IABUPConfigurationUpdateRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_up_cfg_upd_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 300, 302};
  return map_enum_number(names, 3, idx, "id");
}
bool iab_up_cfg_upd_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 300, 302};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e iab_up_cfg_upd_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 300:
      return crit_e::ignore;
    case 302:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
iab_up_cfg_upd_request_ies_o::value_c iab_up_cfg_upd_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 300:
      ret.set(value_c::types::ul_up_tnl_info_to_upd_list);
      break;
    case 302:
      ret.set(value_c::types::ul_up_tnl_address_to_upd_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_up_cfg_upd_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 300:
      return presence_e::optional;
    case 302:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void iab_up_cfg_upd_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::ul_up_tnl_info_to_upd_list:
      c.destroy<ul_up_tnl_info_to_upd_list_l>();
      break;
    case types::ul_up_tnl_address_to_upd_list:
      c.destroy<ul_up_tnl_address_to_upd_list_l>();
      break;
    default:
      break;
  }
}
void iab_up_cfg_upd_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::ul_up_tnl_info_to_upd_list:
      c.init<ul_up_tnl_info_to_upd_list_l>();
      break;
    case types::ul_up_tnl_address_to_upd_list:
      c.init<ul_up_tnl_address_to_upd_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_request_ies_o::value_c");
  }
}
iab_up_cfg_upd_request_ies_o::value_c::value_c(const iab_up_cfg_upd_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ul_up_tnl_info_to_upd_list:
      c.init(other.c.get<ul_up_tnl_info_to_upd_list_l>());
      break;
    case types::ul_up_tnl_address_to_upd_list:
      c.init(other.c.get<ul_up_tnl_address_to_upd_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_request_ies_o::value_c");
  }
}
iab_up_cfg_upd_request_ies_o::value_c&
iab_up_cfg_upd_request_ies_o::value_c::operator=(const iab_up_cfg_upd_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ul_up_tnl_info_to_upd_list:
      c.set(other.c.get<ul_up_tnl_info_to_upd_list_l>());
      break;
    case types::ul_up_tnl_address_to_upd_list:
      c.set(other.c.get<ul_up_tnl_address_to_upd_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& iab_up_cfg_upd_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
ul_up_tnl_info_to_upd_list_l& iab_up_cfg_upd_request_ies_o::value_c::ul_up_tnl_info_to_upd_list()
{
  assert_choice_type(types::ul_up_tnl_info_to_upd_list, type_, "Value");
  return c.get<ul_up_tnl_info_to_upd_list_l>();
}
ul_up_tnl_address_to_upd_list_l& iab_up_cfg_upd_request_ies_o::value_c::ul_up_tnl_address_to_upd_list()
{
  assert_choice_type(types::ul_up_tnl_address_to_upd_list, type_, "Value");
  return c.get<ul_up_tnl_address_to_upd_list_l>();
}
const uint16_t& iab_up_cfg_upd_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const ul_up_tnl_info_to_upd_list_l& iab_up_cfg_upd_request_ies_o::value_c::ul_up_tnl_info_to_upd_list() const
{
  assert_choice_type(types::ul_up_tnl_info_to_upd_list, type_, "Value");
  return c.get<ul_up_tnl_info_to_upd_list_l>();
}
const ul_up_tnl_address_to_upd_list_l& iab_up_cfg_upd_request_ies_o::value_c::ul_up_tnl_address_to_upd_list() const
{
  assert_choice_type(types::ul_up_tnl_address_to_upd_list, type_, "Value");
  return c.get<ul_up_tnl_address_to_upd_list_l>();
}
void iab_up_cfg_upd_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::ul_up_tnl_info_to_upd_list:
      j.start_array("UL-UP-TNL-Information-to-Update-List");
      for (const auto& e1 : c.get<ul_up_tnl_info_to_upd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ul_up_tnl_address_to_upd_list:
      j.start_array("UL-UP-TNL-Address-to-Update-List");
      for (const auto& e1 : c.get<ul_up_tnl_address_to_upd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE iab_up_cfg_upd_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ul_up_tnl_info_to_upd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ul_up_tnl_info_to_upd_list_l>(), 1, 32678, true));
      break;
    case types::ul_up_tnl_address_to_upd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ul_up_tnl_address_to_upd_list_l>(), 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_up_cfg_upd_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ul_up_tnl_info_to_upd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ul_up_tnl_info_to_upd_list_l>(), bref, 1, 32678, true));
      break;
    case types::ul_up_tnl_address_to_upd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ul_up_tnl_address_to_upd_list_l>(), bref, 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// IABUPConfigurationUpdateResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_up_cfg_upd_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 7, 304};
  return map_enum_number(names, 3, idx, "id");
}
bool iab_up_cfg_upd_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 7, 304};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e iab_up_cfg_upd_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 304:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
iab_up_cfg_upd_resp_ies_o::value_c iab_up_cfg_upd_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 304:
      ret.set(value_c::types::dl_up_tnl_address_to_upd_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_up_cfg_upd_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    case 304:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void iab_up_cfg_upd_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::dl_up_tnl_address_to_upd_list:
      c.destroy<dl_up_tnl_address_to_upd_list_l>();
      break;
    default:
      break;
  }
}
void iab_up_cfg_upd_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::dl_up_tnl_address_to_upd_list:
      c.init<dl_up_tnl_address_to_upd_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_resp_ies_o::value_c");
  }
}
iab_up_cfg_upd_resp_ies_o::value_c::value_c(const iab_up_cfg_upd_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::dl_up_tnl_address_to_upd_list:
      c.init(other.c.get<dl_up_tnl_address_to_upd_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_resp_ies_o::value_c");
  }
}
iab_up_cfg_upd_resp_ies_o::value_c&
iab_up_cfg_upd_resp_ies_o::value_c::operator=(const iab_up_cfg_upd_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::dl_up_tnl_address_to_upd_list:
      c.set(other.c.get<dl_up_tnl_address_to_upd_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& iab_up_cfg_upd_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
crit_diagnostics_s& iab_up_cfg_upd_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
dl_up_tnl_address_to_upd_list_l& iab_up_cfg_upd_resp_ies_o::value_c::dl_up_tnl_address_to_upd_list()
{
  assert_choice_type(types::dl_up_tnl_address_to_upd_list, type_, "Value");
  return c.get<dl_up_tnl_address_to_upd_list_l>();
}
const uint16_t& iab_up_cfg_upd_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const crit_diagnostics_s& iab_up_cfg_upd_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const dl_up_tnl_address_to_upd_list_l& iab_up_cfg_upd_resp_ies_o::value_c::dl_up_tnl_address_to_upd_list() const
{
  assert_choice_type(types::dl_up_tnl_address_to_upd_list, type_, "Value");
  return c.get<dl_up_tnl_address_to_upd_list_l>();
}
void iab_up_cfg_upd_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::dl_up_tnl_address_to_upd_list:
      j.start_array("DL-UP-TNL-Address-to-Update-List");
      for (const auto& e1 : c.get<dl_up_tnl_address_to_upd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE iab_up_cfg_upd_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::dl_up_tnl_address_to_upd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<dl_up_tnl_address_to_upd_list_l>(), 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_up_cfg_upd_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::dl_up_tnl_address_to_upd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<dl_up_tnl_address_to_upd_list_l>(), bref, 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// InitialULRRCMessageTransferIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t init_ul_rrc_msg_transfer_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {41, 111, 95, 50, 128, 178, 78, 226, 241, 578, 592, 617};
  return map_enum_number(names, 12, idx, "id");
}
bool init_ul_rrc_msg_transfer_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {41, 111, 95, 50, 128, 178, 78, 226, 241, 578, 592, 617};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e init_ul_rrc_msg_transfer_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 41:
      return crit_e::reject;
    case 111:
      return crit_e::reject;
    case 95:
      return crit_e::reject;
    case 50:
      return crit_e::reject;
    case 128:
      return crit_e::reject;
    case 178:
      return crit_e::ignore;
    case 78:
      return crit_e::ignore;
    case 226:
      return crit_e::ignore;
    case 241:
      return crit_e::ignore;
    case 578:
      return crit_e::ignore;
    case 592:
      return crit_e::ignore;
    case 617:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
init_ul_rrc_msg_transfer_ies_o::value_c init_ul_rrc_msg_transfer_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 111:
      ret.set(value_c::types::nr_cgi);
      break;
    case 95:
      ret.set(value_c::types::c_rnti);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 128:
      ret.set(value_c::types::du_to_cu_rrc_container);
      break;
    case 178:
      ret.set(value_c::types::sul_access_ind);
      break;
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 226:
      ret.set(value_c::types::ran_ue_id);
      break;
    case 241:
      ret.set(value_c::types::rrc_container_rrc_setup_complete);
      break;
    case 578:
      ret.set(value_c::types::nr_red_cap_ue_ind);
      break;
    case 592:
      ret.set(value_c::types::sdt_info);
      break;
    case 617:
      ret.set(value_c::types::sidelink_relay_cfg);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e init_ul_rrc_msg_transfer_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 41:
      return presence_e::mandatory;
    case 111:
      return presence_e::mandatory;
    case 95:
      return presence_e::mandatory;
    case 50:
      return presence_e::mandatory;
    case 128:
      return presence_e::optional;
    case 178:
      return presence_e::optional;
    case 78:
      return presence_e::mandatory;
    case 226:
      return presence_e::optional;
    case 241:
      return presence_e::optional;
    case 578:
      return presence_e::optional;
    case 592:
      return presence_e::optional;
    case 617:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void init_ul_rrc_msg_transfer_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::nr_cgi:
      c.destroy<nr_cgi_s>();
      break;
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::du_to_cu_rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::ran_ue_id:
      c.destroy<fixed_octstring<8, true>>();
      break;
    case types::rrc_container_rrc_setup_complete:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::sdt_info:
      c.destroy<sdt_info_s>();
      break;
    case types::sidelink_relay_cfg:
      c.destroy<sidelink_relay_cfg_s>();
      break;
    default:
      break;
  }
}
void init_ul_rrc_msg_transfer_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::nr_cgi:
      c.init<nr_cgi_s>();
      break;
    case types::c_rnti:
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::du_to_cu_rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::sul_access_ind:
      break;
    case types::transaction_id:
      break;
    case types::ran_ue_id:
      c.init<fixed_octstring<8, true>>();
      break;
    case types::rrc_container_rrc_setup_complete:
      c.init<unbounded_octstring<true>>();
      break;
    case types::nr_red_cap_ue_ind:
      break;
    case types::sdt_info:
      c.init<sdt_info_s>();
      break;
    case types::sidelink_relay_cfg:
      c.init<sidelink_relay_cfg_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "init_ul_rrc_msg_transfer_ies_o::value_c");
  }
}
init_ul_rrc_msg_transfer_ies_o::value_c::value_c(const init_ul_rrc_msg_transfer_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::nr_cgi:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::c_rnti:
      c.init(other.c.get<uint32_t>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::du_to_cu_rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::sul_access_ind:
      c.init(other.c.get<sul_access_ind_e>());
      break;
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_id:
      c.init(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::rrc_container_rrc_setup_complete:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nr_red_cap_ue_ind:
      c.init(other.c.get<nr_red_cap_ue_ind_e>());
      break;
    case types::sdt_info:
      c.init(other.c.get<sdt_info_s>());
      break;
    case types::sidelink_relay_cfg:
      c.init(other.c.get<sidelink_relay_cfg_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "init_ul_rrc_msg_transfer_ies_o::value_c");
  }
}
init_ul_rrc_msg_transfer_ies_o::value_c&
init_ul_rrc_msg_transfer_ies_o::value_c::operator=(const init_ul_rrc_msg_transfer_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::nr_cgi:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::c_rnti:
      c.set(other.c.get<uint32_t>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::du_to_cu_rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::sul_access_ind:
      c.set(other.c.get<sul_access_ind_e>());
      break;
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_id:
      c.set(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::rrc_container_rrc_setup_complete:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nr_red_cap_ue_ind:
      c.set(other.c.get<nr_red_cap_ue_ind_e>());
      break;
    case types::sdt_info:
      c.set(other.c.get<sdt_info_s>());
      break;
    case types::sidelink_relay_cfg:
      c.set(other.c.get<sidelink_relay_cfg_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "init_ul_rrc_msg_transfer_ies_o::value_c");
  }

  return *this;
}
uint64_t& init_ul_rrc_msg_transfer_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
nr_cgi_s& init_ul_rrc_msg_transfer_ies_o::value_c::nr_cgi()
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
uint32_t& init_ul_rrc_msg_transfer_ies_o::value_c::c_rnti()
{
  assert_choice_type(types::c_rnti, type_, "Value");
  return c.get<uint32_t>();
}
unbounded_octstring<true>& init_ul_rrc_msg_transfer_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& init_ul_rrc_msg_transfer_ies_o::value_c::du_to_cu_rrc_container()
{
  assert_choice_type(types::du_to_cu_rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
sul_access_ind_e& init_ul_rrc_msg_transfer_ies_o::value_c::sul_access_ind()
{
  assert_choice_type(types::sul_access_ind, type_, "Value");
  return c.get<sul_access_ind_e>();
}
uint16_t& init_ul_rrc_msg_transfer_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
fixed_octstring<8, true>& init_ul_rrc_msg_transfer_ies_o::value_c::ran_ue_id()
{
  assert_choice_type(types::ran_ue_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
unbounded_octstring<true>& init_ul_rrc_msg_transfer_ies_o::value_c::rrc_container_rrc_setup_complete()
{
  assert_choice_type(types::rrc_container_rrc_setup_complete, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
nr_red_cap_ue_ind_e& init_ul_rrc_msg_transfer_ies_o::value_c::nr_red_cap_ue_ind()
{
  assert_choice_type(types::nr_red_cap_ue_ind, type_, "Value");
  return c.get<nr_red_cap_ue_ind_e>();
}
sdt_info_s& init_ul_rrc_msg_transfer_ies_o::value_c::sdt_info()
{
  assert_choice_type(types::sdt_info, type_, "Value");
  return c.get<sdt_info_s>();
}
sidelink_relay_cfg_s& init_ul_rrc_msg_transfer_ies_o::value_c::sidelink_relay_cfg()
{
  assert_choice_type(types::sidelink_relay_cfg, type_, "Value");
  return c.get<sidelink_relay_cfg_s>();
}
const uint64_t& init_ul_rrc_msg_transfer_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const nr_cgi_s& init_ul_rrc_msg_transfer_ies_o::value_c::nr_cgi() const
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
const uint32_t& init_ul_rrc_msg_transfer_ies_o::value_c::c_rnti() const
{
  assert_choice_type(types::c_rnti, type_, "Value");
  return c.get<uint32_t>();
}
const unbounded_octstring<true>& init_ul_rrc_msg_transfer_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& init_ul_rrc_msg_transfer_ies_o::value_c::du_to_cu_rrc_container() const
{
  assert_choice_type(types::du_to_cu_rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const sul_access_ind_e& init_ul_rrc_msg_transfer_ies_o::value_c::sul_access_ind() const
{
  assert_choice_type(types::sul_access_ind, type_, "Value");
  return c.get<sul_access_ind_e>();
}
const uint16_t& init_ul_rrc_msg_transfer_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const fixed_octstring<8, true>& init_ul_rrc_msg_transfer_ies_o::value_c::ran_ue_id() const
{
  assert_choice_type(types::ran_ue_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
const unbounded_octstring<true>& init_ul_rrc_msg_transfer_ies_o::value_c::rrc_container_rrc_setup_complete() const
{
  assert_choice_type(types::rrc_container_rrc_setup_complete, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const nr_red_cap_ue_ind_e& init_ul_rrc_msg_transfer_ies_o::value_c::nr_red_cap_ue_ind() const
{
  assert_choice_type(types::nr_red_cap_ue_ind, type_, "Value");
  return c.get<nr_red_cap_ue_ind_e>();
}
const sdt_info_s& init_ul_rrc_msg_transfer_ies_o::value_c::sdt_info() const
{
  assert_choice_type(types::sdt_info, type_, "Value");
  return c.get<sdt_info_s>();
}
const sidelink_relay_cfg_s& init_ul_rrc_msg_transfer_ies_o::value_c::sidelink_relay_cfg() const
{
  assert_choice_type(types::sidelink_relay_cfg, type_, "Value");
  return c.get<sidelink_relay_cfg_s>();
}
void init_ul_rrc_msg_transfer_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::nr_cgi:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    case types::c_rnti:
      j.write_int("INTEGER (0..65535,...)", c.get<uint32_t>());
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::du_to_cu_rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::sul_access_ind:
      j.write_str("SULAccessIndication", "true");
      break;
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_id:
      j.write_str("OCTET STRING", c.get<fixed_octstring<8, true>>().to_string());
      break;
    case types::rrc_container_rrc_setup_complete:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::nr_red_cap_ue_ind:
      j.write_str("NRRedCapUEIndication", "true");
      break;
    case types::sdt_info:
      j.write_fieldname("SDTInformation");
      c.get<sdt_info_s>().to_json(j);
      break;
    case types::sidelink_relay_cfg:
      j.write_fieldname("SidelinkRelayConfiguration");
      c.get<sidelink_relay_cfg_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "init_ul_rrc_msg_transfer_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE init_ul_rrc_msg_transfer_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    case types::c_rnti:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u, true, true));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::du_to_cu_rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::sul_access_ind:
      HANDLE_CODE(c.get<sul_access_ind_e>().pack(bref));
      break;
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ran_ue_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().pack(bref)));
      break;
    case types::rrc_container_rrc_setup_complete:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::nr_red_cap_ue_ind:
      HANDLE_CODE(c.get<nr_red_cap_ue_ind_e>().pack(bref));
      break;
    case types::sdt_info:
      HANDLE_CODE(c.get<sdt_info_s>().pack(bref));
      break;
    case types::sidelink_relay_cfg:
      HANDLE_CODE(c.get<sidelink_relay_cfg_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "init_ul_rrc_msg_transfer_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE init_ul_rrc_msg_transfer_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    case types::c_rnti:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u, true, true));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::du_to_cu_rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::sul_access_ind:
      HANDLE_CODE(c.get<sul_access_ind_e>().unpack(bref));
      break;
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ran_ue_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().unpack(bref)));
      break;
    case types::rrc_container_rrc_setup_complete:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::nr_red_cap_ue_ind:
      HANDLE_CODE(c.get<nr_red_cap_ue_ind_e>().unpack(bref));
      break;
    case types::sdt_info:
      HANDLE_CODE(c.get<sdt_info_s>().unpack(bref));
      break;
    case types::sidelink_relay_cfg:
      HANDLE_CODE(c.get<sidelink_relay_cfg_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "init_ul_rrc_msg_transfer_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MeasurementActivation-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t meas_activation_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 649, 570};
  return map_enum_number(names, 4, idx, "id");
}
bool meas_activation_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 649, 570};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e meas_activation_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 649:
      return crit_e::reject;
    case 570:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
meas_activation_ies_o::value_c meas_activation_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 649:
      ret.set(value_c::types::activation_request_type);
      break;
    case 570:
      ret.set(value_c::types::prs_meas_info_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e meas_activation_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 649:
      return presence_e::mandatory;
    case 570:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void meas_activation_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::prs_meas_info_list:
      c.destroy<prs_meas_info_list_l>();
      break;
    default:
      break;
  }
}
void meas_activation_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::activation_request_type:
      break;
    case types::prs_meas_info_list:
      c.init<prs_meas_info_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_activation_ies_o::value_c");
  }
}
meas_activation_ies_o::value_c::value_c(const meas_activation_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::activation_request_type:
      c.init(other.c.get<activation_request_type_e>());
      break;
    case types::prs_meas_info_list:
      c.init(other.c.get<prs_meas_info_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_activation_ies_o::value_c");
  }
}
meas_activation_ies_o::value_c& meas_activation_ies_o::value_c::operator=(const meas_activation_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::activation_request_type:
      c.set(other.c.get<activation_request_type_e>());
      break;
    case types::prs_meas_info_list:
      c.set(other.c.get<prs_meas_info_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_activation_ies_o::value_c");
  }

  return *this;
}
uint64_t& meas_activation_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& meas_activation_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
activation_request_type_e& meas_activation_ies_o::value_c::activation_request_type()
{
  assert_choice_type(types::activation_request_type, type_, "Value");
  return c.get<activation_request_type_e>();
}
prs_meas_info_list_l& meas_activation_ies_o::value_c::prs_meas_info_list()
{
  assert_choice_type(types::prs_meas_info_list, type_, "Value");
  return c.get<prs_meas_info_list_l>();
}
const uint64_t& meas_activation_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& meas_activation_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const activation_request_type_e& meas_activation_ies_o::value_c::activation_request_type() const
{
  assert_choice_type(types::activation_request_type, type_, "Value");
  return c.get<activation_request_type_e>();
}
const prs_meas_info_list_l& meas_activation_ies_o::value_c::prs_meas_info_list() const
{
  assert_choice_type(types::prs_meas_info_list, type_, "Value");
  return c.get<prs_meas_info_list_l>();
}
void meas_activation_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::activation_request_type:
      j.write_str("ActivationRequestType", c.get<activation_request_type_e>().to_string());
      break;
    case types::prs_meas_info_list:
      j.start_array("PRS-Measurement-Info-List");
      for (const auto& e1 : c.get<prs_meas_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "meas_activation_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE meas_activation_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::activation_request_type:
      HANDLE_CODE(c.get<activation_request_type_e>().pack(bref));
      break;
    case types::prs_meas_info_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<prs_meas_info_list_l>(), 1, 4, true));
      break;
    default:
      log_invalid_choice_id(type_, "meas_activation_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_activation_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::activation_request_type:
      HANDLE_CODE(c.get<activation_request_type_e>().unpack(bref));
      break;
    case types::prs_meas_info_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<prs_meas_info_list_l>(), bref, 1, 4, true));
      break;
    default:
      log_invalid_choice_id(type_, "meas_activation_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MeasurementPreconfigurationConfirm-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t meas_precfg_confirm_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 650, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool meas_precfg_confirm_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 650, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e meas_precfg_confirm_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 650:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
meas_precfg_confirm_ies_o::value_c meas_precfg_confirm_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 650:
      ret.set(value_c::types::pos_meas_gap_pre_cfg_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e meas_precfg_confirm_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 650:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void meas_precfg_confirm_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pos_meas_gap_pre_cfg_list:
      c.destroy<pos_meas_gap_pre_cfg_list_s>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void meas_precfg_confirm_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::pos_meas_gap_pre_cfg_list:
      c.init<pos_meas_gap_pre_cfg_list_s>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_confirm_ies_o::value_c");
  }
}
meas_precfg_confirm_ies_o::value_c::value_c(const meas_precfg_confirm_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::pos_meas_gap_pre_cfg_list:
      c.init(other.c.get<pos_meas_gap_pre_cfg_list_s>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_confirm_ies_o::value_c");
  }
}
meas_precfg_confirm_ies_o::value_c&
meas_precfg_confirm_ies_o::value_c::operator=(const meas_precfg_confirm_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::pos_meas_gap_pre_cfg_list:
      c.set(other.c.get<pos_meas_gap_pre_cfg_list_s>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_confirm_ies_o::value_c");
  }

  return *this;
}
uint64_t& meas_precfg_confirm_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& meas_precfg_confirm_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
pos_meas_gap_pre_cfg_list_s& meas_precfg_confirm_ies_o::value_c::pos_meas_gap_pre_cfg_list()
{
  assert_choice_type(types::pos_meas_gap_pre_cfg_list, type_, "Value");
  return c.get<pos_meas_gap_pre_cfg_list_s>();
}
crit_diagnostics_s& meas_precfg_confirm_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& meas_precfg_confirm_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& meas_precfg_confirm_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const pos_meas_gap_pre_cfg_list_s& meas_precfg_confirm_ies_o::value_c::pos_meas_gap_pre_cfg_list() const
{
  assert_choice_type(types::pos_meas_gap_pre_cfg_list, type_, "Value");
  return c.get<pos_meas_gap_pre_cfg_list_s>();
}
const crit_diagnostics_s& meas_precfg_confirm_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void meas_precfg_confirm_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::pos_meas_gap_pre_cfg_list:
      j.write_fieldname("PosMeasGapPreConfigList");
      c.get<pos_meas_gap_pre_cfg_list_s>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_confirm_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE meas_precfg_confirm_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::pos_meas_gap_pre_cfg_list:
      HANDLE_CODE(c.get<pos_meas_gap_pre_cfg_list_s>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_confirm_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_precfg_confirm_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::pos_meas_gap_pre_cfg_list:
      HANDLE_CODE(c.get<pos_meas_gap_pre_cfg_list_s>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_confirm_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MeasurementPreconfigurationRefuse-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t meas_precfg_refuse_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool meas_precfg_refuse_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e meas_precfg_refuse_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
meas_precfg_refuse_ies_o::value_c meas_precfg_refuse_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e meas_precfg_refuse_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void meas_precfg_refuse_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void meas_precfg_refuse_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_refuse_ies_o::value_c");
  }
}
meas_precfg_refuse_ies_o::value_c::value_c(const meas_precfg_refuse_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_refuse_ies_o::value_c");
  }
}
meas_precfg_refuse_ies_o::value_c&
meas_precfg_refuse_ies_o::value_c::operator=(const meas_precfg_refuse_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_refuse_ies_o::value_c");
  }

  return *this;
}
uint64_t& meas_precfg_refuse_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& meas_precfg_refuse_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& meas_precfg_refuse_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& meas_precfg_refuse_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& meas_precfg_refuse_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& meas_precfg_refuse_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& meas_precfg_refuse_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& meas_precfg_refuse_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void meas_precfg_refuse_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_refuse_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE meas_precfg_refuse_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_refuse_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_precfg_refuse_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_refuse_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MeasurementPreconfigurationRequired-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t meas_precfg_required_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 569};
  return map_enum_number(names, 3, idx, "id");
}
bool meas_precfg_required_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 569};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e meas_precfg_required_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 569:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
meas_precfg_required_ies_o::value_c meas_precfg_required_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 569:
      ret.set(value_c::types::trp_prs_info_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e meas_precfg_required_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 569:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void meas_precfg_required_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trp_prs_info_list:
      c.destroy<trp_prs_info_list_l>();
      break;
    default:
      break;
  }
}
void meas_precfg_required_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::trp_prs_info_list:
      c.init<trp_prs_info_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_required_ies_o::value_c");
  }
}
meas_precfg_required_ies_o::value_c::value_c(const meas_precfg_required_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::trp_prs_info_list:
      c.init(other.c.get<trp_prs_info_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_required_ies_o::value_c");
  }
}
meas_precfg_required_ies_o::value_c&
meas_precfg_required_ies_o::value_c::operator=(const meas_precfg_required_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::trp_prs_info_list:
      c.set(other.c.get<trp_prs_info_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_required_ies_o::value_c");
  }

  return *this;
}
uint64_t& meas_precfg_required_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& meas_precfg_required_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
trp_prs_info_list_l& meas_precfg_required_ies_o::value_c::trp_prs_info_list()
{
  assert_choice_type(types::trp_prs_info_list, type_, "Value");
  return c.get<trp_prs_info_list_l>();
}
const uint64_t& meas_precfg_required_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& meas_precfg_required_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const trp_prs_info_list_l& meas_precfg_required_ies_o::value_c::trp_prs_info_list() const
{
  assert_choice_type(types::trp_prs_info_list, type_, "Value");
  return c.get<trp_prs_info_list_l>();
}
void meas_precfg_required_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::trp_prs_info_list:
      j.start_array("TRP-PRS-Info-List");
      for (const auto& e1 : c.get<trp_prs_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_required_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE meas_precfg_required_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trp_prs_info_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<trp_prs_info_list_l>(), 1, 256, true));
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_required_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_precfg_required_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trp_prs_info_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<trp_prs_info_list_l>(), bref, 1, 256, true));
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_required_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextModificationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_mod_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool multicast_context_mod_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_mod_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_mod_fail_ies_o::value_c multicast_context_mod_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_mod_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_mod_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_context_mod_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_fail_ies_o::value_c");
  }
}
multicast_context_mod_fail_ies_o::value_c::value_c(const multicast_context_mod_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_fail_ies_o::value_c");
  }
}
multicast_context_mod_fail_ies_o::value_c&
multicast_context_mod_fail_ies_o::value_c::operator=(const multicast_context_mod_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_mod_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_mod_fail_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& multicast_context_mod_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& multicast_context_mod_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_context_mod_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_mod_fail_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& multicast_context_mod_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& multicast_context_mod_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_context_mod_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_mod_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_mod_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextModificationRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_mod_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 481, 500, 494, 496};
  return map_enum_number(names, 6, idx, "id");
}
bool multicast_context_mod_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 481, 500, 494, 496};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_mod_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 481:
      return crit_e::reject;
    case 500:
      return crit_e::reject;
    case 494:
      return crit_e::reject;
    case 496:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_mod_request_ies_o::value_c multicast_context_mod_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 481:
      ret.set(value_c::types::mbs_service_area);
      break;
    case 500:
      ret.set(value_c::types::multicast_m_rbs_to_be_setup_mod_list);
      break;
    case 494:
      ret.set(value_c::types::multicast_m_rbs_to_be_modified_list);
      break;
    case 496:
      ret.set(value_c::types::multicast_m_rbs_to_be_released_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_mod_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 481:
      return presence_e::optional;
    case 500:
      return presence_e::optional;
    case 494:
      return presence_e::optional;
    case 496:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_mod_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_service_area:
      c.destroy<mbs_service_area_c>();
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      c.destroy<multicast_m_rbs_to_be_setup_mod_list_l>();
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      c.destroy<multicast_m_rbs_to_be_modified_list_l>();
      break;
    case types::multicast_m_rbs_to_be_released_list:
      c.destroy<multicast_m_rbs_to_be_released_list_l>();
      break;
    default:
      break;
  }
}
void multicast_context_mod_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_service_area:
      c.init<mbs_service_area_c>();
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      c.init<multicast_m_rbs_to_be_setup_mod_list_l>();
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      c.init<multicast_m_rbs_to_be_modified_list_l>();
      break;
    case types::multicast_m_rbs_to_be_released_list:
      c.init<multicast_m_rbs_to_be_released_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_request_ies_o::value_c");
  }
}
multicast_context_mod_request_ies_o::value_c::value_c(const multicast_context_mod_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_service_area:
      c.init(other.c.get<mbs_service_area_c>());
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      c.init(other.c.get<multicast_m_rbs_to_be_setup_mod_list_l>());
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      c.init(other.c.get<multicast_m_rbs_to_be_modified_list_l>());
      break;
    case types::multicast_m_rbs_to_be_released_list:
      c.init(other.c.get<multicast_m_rbs_to_be_released_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_request_ies_o::value_c");
  }
}
multicast_context_mod_request_ies_o::value_c&
multicast_context_mod_request_ies_o::value_c::operator=(const multicast_context_mod_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_service_area:
      c.set(other.c.get<mbs_service_area_c>());
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      c.set(other.c.get<multicast_m_rbs_to_be_setup_mod_list_l>());
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      c.set(other.c.get<multicast_m_rbs_to_be_modified_list_l>());
      break;
    case types::multicast_m_rbs_to_be_released_list:
      c.set(other.c.get<multicast_m_rbs_to_be_released_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_mod_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_mod_request_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_service_area_c& multicast_context_mod_request_ies_o::value_c::mbs_service_area()
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
multicast_m_rbs_to_be_setup_mod_list_l&
multicast_context_mod_request_ies_o::value_c::multicast_m_rbs_to_be_setup_mod_list()
{
  assert_choice_type(types::multicast_m_rbs_to_be_setup_mod_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_setup_mod_list_l>();
}
multicast_m_rbs_to_be_modified_list_l&
multicast_context_mod_request_ies_o::value_c::multicast_m_rbs_to_be_modified_list()
{
  assert_choice_type(types::multicast_m_rbs_to_be_modified_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_modified_list_l>();
}
multicast_m_rbs_to_be_released_list_l&
multicast_context_mod_request_ies_o::value_c::multicast_m_rbs_to_be_released_list()
{
  assert_choice_type(types::multicast_m_rbs_to_be_released_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_released_list_l>();
}
const uint64_t& multicast_context_mod_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_mod_request_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_service_area_c& multicast_context_mod_request_ies_o::value_c::mbs_service_area() const
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
const multicast_m_rbs_to_be_setup_mod_list_l&
multicast_context_mod_request_ies_o::value_c::multicast_m_rbs_to_be_setup_mod_list() const
{
  assert_choice_type(types::multicast_m_rbs_to_be_setup_mod_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_setup_mod_list_l>();
}
const multicast_m_rbs_to_be_modified_list_l&
multicast_context_mod_request_ies_o::value_c::multicast_m_rbs_to_be_modified_list() const
{
  assert_choice_type(types::multicast_m_rbs_to_be_modified_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_modified_list_l>();
}
const multicast_m_rbs_to_be_released_list_l&
multicast_context_mod_request_ies_o::value_c::multicast_m_rbs_to_be_released_list() const
{
  assert_choice_type(types::multicast_m_rbs_to_be_released_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_released_list_l>();
}
void multicast_context_mod_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_service_area:
      j.write_fieldname("MBS-ServiceArea");
      c.get<mbs_service_area_c>().to_json(j);
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      j.start_array("MulticastMRBs-ToBeSetupMod-List");
      for (const auto& e1 : c.get<multicast_m_rbs_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      j.start_array("MulticastMRBs-ToBeModified-List");
      for (const auto& e1 : c.get<multicast_m_rbs_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_m_rbs_to_be_released_list:
      j.start_array("MulticastMRBs-ToBeReleased-List");
      for (const auto& e1 : c.get<multicast_m_rbs_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_mod_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().pack(bref));
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_to_be_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_to_be_modified_list_l>(), 1, 32, true));
      break;
    case types::multicast_m_rbs_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_to_be_released_list_l>(), 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_mod_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().unpack(bref));
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_to_be_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_to_be_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_m_rbs_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_to_be_released_list_l>(), bref, 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextModificationResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_mod_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 492, 486, 488, 482, 7};
  return map_enum_number(names, 7, idx, "id");
}
bool multicast_context_mod_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 492, 486, 488, 482, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_mod_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 492:
      return crit_e::reject;
    case 486:
      return crit_e::ignore;
    case 488:
      return crit_e::reject;
    case 482:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_mod_resp_ies_o::value_c multicast_context_mod_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 492:
      ret.set(value_c::types::multicast_m_rbs_setup_mod_list);
      break;
    case 486:
      ret.set(value_c::types::multicast_m_rbs_failed_to_be_setup_mod_list);
      break;
    case 488:
      ret.set(value_c::types::multicast_m_rbs_modified_list);
      break;
    case 482:
      ret.set(value_c::types::multicast_m_rbs_failed_to_be_modified_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_mod_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 492:
      return presence_e::optional;
    case 486:
      return presence_e::optional;
    case 488:
      return presence_e::optional;
    case 482:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_mod_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::multicast_m_rbs_setup_mod_list:
      c.destroy<multicast_m_rbs_setup_mod_list_l>();
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      c.destroy<multicast_m_rbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::multicast_m_rbs_modified_list:
      c.destroy<multicast_m_rbs_modified_list_l>();
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      c.destroy<multicast_m_rbs_failed_to_be_modified_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_context_mod_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::multicast_m_rbs_setup_mod_list:
      c.init<multicast_m_rbs_setup_mod_list_l>();
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      c.init<multicast_m_rbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::multicast_m_rbs_modified_list:
      c.init<multicast_m_rbs_modified_list_l>();
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      c.init<multicast_m_rbs_failed_to_be_modified_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_resp_ies_o::value_c");
  }
}
multicast_context_mod_resp_ies_o::value_c::value_c(const multicast_context_mod_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::multicast_m_rbs_setup_mod_list:
      c.init(other.c.get<multicast_m_rbs_setup_mod_list_l>());
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      c.init(other.c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::multicast_m_rbs_modified_list:
      c.init(other.c.get<multicast_m_rbs_modified_list_l>());
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      c.init(other.c.get<multicast_m_rbs_failed_to_be_modified_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_resp_ies_o::value_c");
  }
}
multicast_context_mod_resp_ies_o::value_c&
multicast_context_mod_resp_ies_o::value_c::operator=(const multicast_context_mod_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::multicast_m_rbs_setup_mod_list:
      c.set(other.c.get<multicast_m_rbs_setup_mod_list_l>());
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      c.set(other.c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::multicast_m_rbs_modified_list:
      c.set(other.c.get<multicast_m_rbs_modified_list_l>());
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      c.set(other.c.get<multicast_m_rbs_failed_to_be_modified_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_mod_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_mod_resp_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
multicast_m_rbs_setup_mod_list_l& multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_setup_mod_list()
{
  assert_choice_type(types::multicast_m_rbs_setup_mod_list, type_, "Value");
  return c.get<multicast_m_rbs_setup_mod_list_l>();
}
multicast_m_rbs_failed_to_be_setup_mod_list_l&
multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_failed_to_be_setup_mod_list()
{
  assert_choice_type(types::multicast_m_rbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>();
}
multicast_m_rbs_modified_list_l& multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_modified_list()
{
  assert_choice_type(types::multicast_m_rbs_modified_list, type_, "Value");
  return c.get<multicast_m_rbs_modified_list_l>();
}
multicast_m_rbs_failed_to_be_modified_list_l&
multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_failed_to_be_modified_list()
{
  assert_choice_type(types::multicast_m_rbs_failed_to_be_modified_list, type_, "Value");
  return c.get<multicast_m_rbs_failed_to_be_modified_list_l>();
}
crit_diagnostics_s& multicast_context_mod_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_context_mod_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_mod_resp_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const multicast_m_rbs_setup_mod_list_l&
multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_setup_mod_list() const
{
  assert_choice_type(types::multicast_m_rbs_setup_mod_list, type_, "Value");
  return c.get<multicast_m_rbs_setup_mod_list_l>();
}
const multicast_m_rbs_failed_to_be_setup_mod_list_l&
multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_failed_to_be_setup_mod_list() const
{
  assert_choice_type(types::multicast_m_rbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>();
}
const multicast_m_rbs_modified_list_l& multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_modified_list() const
{
  assert_choice_type(types::multicast_m_rbs_modified_list, type_, "Value");
  return c.get<multicast_m_rbs_modified_list_l>();
}
const multicast_m_rbs_failed_to_be_modified_list_l&
multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_failed_to_be_modified_list() const
{
  assert_choice_type(types::multicast_m_rbs_failed_to_be_modified_list, type_, "Value");
  return c.get<multicast_m_rbs_failed_to_be_modified_list_l>();
}
const crit_diagnostics_s& multicast_context_mod_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_context_mod_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::multicast_m_rbs_setup_mod_list:
      j.start_array("MulticastMRBs-SetupMod-List");
      for (const auto& e1 : c.get<multicast_m_rbs_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      j.start_array("MulticastMRBs-FailedToBeSetupMod-List");
      for (const auto& e1 : c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_m_rbs_modified_list:
      j.start_array("MulticastMRBs-Modified-List");
      for (const auto& e1 : c.get<multicast_m_rbs_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      j.start_array("MulticastMRBs-FailedToBeModified-List");
      for (const auto& e1 : c.get<multicast_m_rbs_failed_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_mod_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::multicast_m_rbs_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::multicast_m_rbs_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_modified_list_l>(), 1, 32, true));
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_failed_to_be_modified_list_l>(), 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_mod_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::multicast_m_rbs_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_m_rbs_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_failed_to_be_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextReleaseCommandIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_release_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0};
  return map_enum_number(names, 3, idx, "id");
}
bool multicast_context_release_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_release_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_release_cmd_ies_o::value_c multicast_context_release_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_release_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_release_cmd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void multicast_context_release_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_cmd_ies_o::value_c");
  }
}
multicast_context_release_cmd_ies_o::value_c::value_c(const multicast_context_release_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_cmd_ies_o::value_c");
  }
}
multicast_context_release_cmd_ies_o::value_c&
multicast_context_release_cmd_ies_o::value_c::operator=(const multicast_context_release_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_cmd_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_release_cmd_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_release_cmd_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& multicast_context_release_cmd_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& multicast_context_release_cmd_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_release_cmd_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& multicast_context_release_cmd_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void multicast_context_release_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_release_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_release_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextReleaseCompleteIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_release_complete_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool multicast_context_release_complete_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_release_complete_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_release_complete_ies_o::value_c
multicast_context_release_complete_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_release_complete_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_release_complete_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_context_release_complete_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_complete_ies_o::value_c");
  }
}
multicast_context_release_complete_ies_o::value_c::value_c(
    const multicast_context_release_complete_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_complete_ies_o::value_c");
  }
}
multicast_context_release_complete_ies_o::value_c& multicast_context_release_complete_ies_o::value_c::operator=(
    const multicast_context_release_complete_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_complete_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_release_complete_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_release_complete_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
crit_diagnostics_s& multicast_context_release_complete_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_context_release_complete_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_release_complete_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const crit_diagnostics_s& multicast_context_release_complete_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_context_release_complete_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_complete_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_release_complete_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_complete_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_release_complete_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_complete_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextReleaseRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_release_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0};
  return map_enum_number(names, 3, idx, "id");
}
bool multicast_context_release_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_release_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_release_request_ies_o::value_c multicast_context_release_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_release_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_release_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void multicast_context_release_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_request_ies_o::value_c");
  }
}
multicast_context_release_request_ies_o::value_c::value_c(const multicast_context_release_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_request_ies_o::value_c");
  }
}
multicast_context_release_request_ies_o::value_c& multicast_context_release_request_ies_o::value_c::operator=(
    const multicast_context_release_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_release_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_release_request_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& multicast_context_release_request_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& multicast_context_release_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_release_request_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& multicast_context_release_request_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void multicast_context_release_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_release_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_release_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextSetupFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_setup_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool multicast_context_setup_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_setup_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_setup_fail_ies_o::value_c multicast_context_setup_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_setup_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::optional;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_setup_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_context_setup_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_fail_ies_o::value_c");
  }
}
multicast_context_setup_fail_ies_o::value_c::value_c(const multicast_context_setup_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_fail_ies_o::value_c");
  }
}
multicast_context_setup_fail_ies_o::value_c&
multicast_context_setup_fail_ies_o::value_c::operator=(const multicast_context_setup_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_setup_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_setup_fail_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& multicast_context_setup_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& multicast_context_setup_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_context_setup_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_setup_fail_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& multicast_context_setup_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& multicast_context_setup_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_context_setup_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_setup_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_setup_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextSetupRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_setup_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 455, 481, 456, 498};
  return map_enum_number(names, 5, idx, "id");
}
bool multicast_context_setup_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 455, 481, 456, 498};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_setup_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 455:
      return crit_e::reject;
    case 481:
      return crit_e::reject;
    case 456:
      return crit_e::reject;
    case 498:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_setup_request_ies_o::value_c multicast_context_setup_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 455:
      ret.set(value_c::types::mbs_session_id);
      break;
    case 481:
      ret.set(value_c::types::mbs_service_area);
      break;
    case 456:
      ret.set(value_c::types::snssai);
      break;
    case 498:
      ret.set(value_c::types::multicast_m_rbs_to_be_setup_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_setup_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 455:
      return presence_e::mandatory;
    case 481:
      return presence_e::optional;
    case 456:
      return presence_e::mandatory;
    case 498:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_setup_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_session_id:
      c.destroy<mbs_session_id_s>();
      break;
    case types::mbs_service_area:
      c.destroy<mbs_service_area_c>();
      break;
    case types::snssai:
      c.destroy<snssai_s>();
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      c.destroy<multicast_m_rbs_to_be_setup_list_l>();
      break;
    default:
      break;
  }
}
void multicast_context_setup_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::mbs_session_id:
      c.init<mbs_session_id_s>();
      break;
    case types::mbs_service_area:
      c.init<mbs_service_area_c>();
      break;
    case types::snssai:
      c.init<snssai_s>();
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      c.init<multicast_m_rbs_to_be_setup_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_request_ies_o::value_c");
  }
}
multicast_context_setup_request_ies_o::value_c::value_c(const multicast_context_setup_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_session_id:
      c.init(other.c.get<mbs_session_id_s>());
      break;
    case types::mbs_service_area:
      c.init(other.c.get<mbs_service_area_c>());
      break;
    case types::snssai:
      c.init(other.c.get<snssai_s>());
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      c.init(other.c.get<multicast_m_rbs_to_be_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_request_ies_o::value_c");
  }
}
multicast_context_setup_request_ies_o::value_c&
multicast_context_setup_request_ies_o::value_c::operator=(const multicast_context_setup_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_session_id:
      c.set(other.c.get<mbs_session_id_s>());
      break;
    case types::mbs_service_area:
      c.set(other.c.get<mbs_service_area_c>());
      break;
    case types::snssai:
      c.set(other.c.get<snssai_s>());
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      c.set(other.c.get<multicast_m_rbs_to_be_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_setup_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_session_id_s& multicast_context_setup_request_ies_o::value_c::mbs_session_id()
{
  assert_choice_type(types::mbs_session_id, type_, "Value");
  return c.get<mbs_session_id_s>();
}
mbs_service_area_c& multicast_context_setup_request_ies_o::value_c::mbs_service_area()
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
snssai_s& multicast_context_setup_request_ies_o::value_c::snssai()
{
  assert_choice_type(types::snssai, type_, "Value");
  return c.get<snssai_s>();
}
multicast_m_rbs_to_be_setup_list_l& multicast_context_setup_request_ies_o::value_c::multicast_m_rbs_to_be_setup_list()
{
  assert_choice_type(types::multicast_m_rbs_to_be_setup_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_setup_list_l>();
}
const uint64_t& multicast_context_setup_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_session_id_s& multicast_context_setup_request_ies_o::value_c::mbs_session_id() const
{
  assert_choice_type(types::mbs_session_id, type_, "Value");
  return c.get<mbs_session_id_s>();
}
const mbs_service_area_c& multicast_context_setup_request_ies_o::value_c::mbs_service_area() const
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
const snssai_s& multicast_context_setup_request_ies_o::value_c::snssai() const
{
  assert_choice_type(types::snssai, type_, "Value");
  return c.get<snssai_s>();
}
const multicast_m_rbs_to_be_setup_list_l&
multicast_context_setup_request_ies_o::value_c::multicast_m_rbs_to_be_setup_list() const
{
  assert_choice_type(types::multicast_m_rbs_to_be_setup_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_setup_list_l>();
}
void multicast_context_setup_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_session_id:
      j.write_fieldname("MBS-Session-ID");
      c.get<mbs_session_id_s>().to_json(j);
      break;
    case types::mbs_service_area:
      j.write_fieldname("MBS-ServiceArea");
      c.get<mbs_service_area_c>().to_json(j);
      break;
    case types::snssai:
      j.write_fieldname("SNSSAI");
      c.get<snssai_s>().to_json(j);
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      j.start_array("MulticastMRBs-ToBeSetup-List");
      for (const auto& e1 : c.get<multicast_m_rbs_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_setup_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_session_id:
      HANDLE_CODE(c.get<mbs_session_id_s>().pack(bref));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().pack(bref));
      break;
    case types::snssai:
      HANDLE_CODE(c.get<snssai_s>().pack(bref));
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_to_be_setup_list_l>(), 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_setup_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_session_id:
      HANDLE_CODE(c.get<mbs_session_id_s>().unpack(bref));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().unpack(bref));
      break;
    case types::snssai:
      HANDLE_CODE(c.get<snssai_s>().unpack(bref));
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextSetupResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_setup_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 490, 484, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool multicast_context_setup_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 490, 484, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_setup_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 490:
      return crit_e::reject;
    case 484:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_setup_resp_ies_o::value_c multicast_context_setup_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 490:
      ret.set(value_c::types::multicast_m_rbs_setup_list);
      break;
    case 484:
      ret.set(value_c::types::multicast_m_rbs_failed_to_be_setup_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_setup_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 490:
      return presence_e::mandatory;
    case 484:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_setup_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::multicast_m_rbs_setup_list:
      c.destroy<multicast_m_rbs_setup_list_l>();
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      c.destroy<multicast_m_rbs_failed_to_be_setup_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_context_setup_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::multicast_m_rbs_setup_list:
      c.init<multicast_m_rbs_setup_list_l>();
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      c.init<multicast_m_rbs_failed_to_be_setup_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_resp_ies_o::value_c");
  }
}
multicast_context_setup_resp_ies_o::value_c::value_c(const multicast_context_setup_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::multicast_m_rbs_setup_list:
      c.init(other.c.get<multicast_m_rbs_setup_list_l>());
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      c.init(other.c.get<multicast_m_rbs_failed_to_be_setup_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_resp_ies_o::value_c");
  }
}
multicast_context_setup_resp_ies_o::value_c&
multicast_context_setup_resp_ies_o::value_c::operator=(const multicast_context_setup_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::multicast_m_rbs_setup_list:
      c.set(other.c.get<multicast_m_rbs_setup_list_l>());
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      c.set(other.c.get<multicast_m_rbs_failed_to_be_setup_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_setup_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_setup_resp_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
multicast_m_rbs_setup_list_l& multicast_context_setup_resp_ies_o::value_c::multicast_m_rbs_setup_list()
{
  assert_choice_type(types::multicast_m_rbs_setup_list, type_, "Value");
  return c.get<multicast_m_rbs_setup_list_l>();
}
multicast_m_rbs_failed_to_be_setup_list_l&
multicast_context_setup_resp_ies_o::value_c::multicast_m_rbs_failed_to_be_setup_list()
{
  assert_choice_type(types::multicast_m_rbs_failed_to_be_setup_list, type_, "Value");
  return c.get<multicast_m_rbs_failed_to_be_setup_list_l>();
}
crit_diagnostics_s& multicast_context_setup_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_context_setup_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_setup_resp_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const multicast_m_rbs_setup_list_l& multicast_context_setup_resp_ies_o::value_c::multicast_m_rbs_setup_list() const
{
  assert_choice_type(types::multicast_m_rbs_setup_list, type_, "Value");
  return c.get<multicast_m_rbs_setup_list_l>();
}
const multicast_m_rbs_failed_to_be_setup_list_l&
multicast_context_setup_resp_ies_o::value_c::multicast_m_rbs_failed_to_be_setup_list() const
{
  assert_choice_type(types::multicast_m_rbs_failed_to_be_setup_list, type_, "Value");
  return c.get<multicast_m_rbs_failed_to_be_setup_list_l>();
}
const crit_diagnostics_s& multicast_context_setup_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_context_setup_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::multicast_m_rbs_setup_list:
      j.start_array("MulticastMRBs-Setup-List");
      for (const auto& e1 : c.get<multicast_m_rbs_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      j.start_array("MulticastMRBs-FailedToBeSetup-List");
      for (const auto& e1 : c.get<multicast_m_rbs_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_setup_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::multicast_m_rbs_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_setup_list_l>(), 1, 32, true));
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_failed_to_be_setup_list_l>(), 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_setup_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::multicast_m_rbs_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_failed_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastDistributionReleaseCommandIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_distribution_release_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 502, 0};
  return map_enum_number(names, 4, idx, "id");
}
bool multicast_distribution_release_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 502, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_distribution_release_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 502:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_distribution_release_cmd_ies_o::value_c
multicast_distribution_release_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 502:
      ret.set(value_c::types::mbs_multicast_f1_u_context_descriptor);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_distribution_release_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 502:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_distribution_release_cmd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_multicast_f1_u_context_descriptor:
      c.destroy<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void multicast_distribution_release_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_cmd_ies_o::value_c");
  }
}
multicast_distribution_release_cmd_ies_o::value_c::value_c(
    const multicast_distribution_release_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_cmd_ies_o::value_c");
  }
}
multicast_distribution_release_cmd_ies_o::value_c& multicast_distribution_release_cmd_ies_o::value_c::operator=(
    const multicast_distribution_release_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.set(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_cmd_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_distribution_release_cmd_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_distribution_release_cmd_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_release_cmd_ies_o::value_c::mbs_multicast_f1_u_context_descriptor()
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
cause_c& multicast_distribution_release_cmd_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& multicast_distribution_release_cmd_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_distribution_release_cmd_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_release_cmd_ies_o::value_c::mbs_multicast_f1_u_context_descriptor() const
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
const cause_c& multicast_distribution_release_cmd_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void multicast_distribution_release_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      j.write_fieldname("MBSMulticastF1UContextDescriptor");
      c.get<mbs_multicast_f1_u_context_descriptor_s>().to_json(j);
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_distribution_release_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().pack(bref));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_release_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().unpack(bref));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastDistributionReleaseCompleteIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_distribution_release_complete_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 502, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool multicast_distribution_release_complete_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 502, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_distribution_release_complete_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 502:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_distribution_release_complete_ies_o::value_c
multicast_distribution_release_complete_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 502:
      ret.set(value_c::types::mbs_multicast_f1_u_context_descriptor);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_distribution_release_complete_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 502:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_distribution_release_complete_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_multicast_f1_u_context_descriptor:
      c.destroy<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_distribution_release_complete_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_complete_ies_o::value_c");
  }
}
multicast_distribution_release_complete_ies_o::value_c::value_c(
    const multicast_distribution_release_complete_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_complete_ies_o::value_c");
  }
}
multicast_distribution_release_complete_ies_o::value_c&
multicast_distribution_release_complete_ies_o::value_c::operator=(
    const multicast_distribution_release_complete_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.set(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_complete_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_distribution_release_complete_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_distribution_release_complete_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_release_complete_ies_o::value_c::mbs_multicast_f1_u_context_descriptor()
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
crit_diagnostics_s& multicast_distribution_release_complete_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_distribution_release_complete_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_distribution_release_complete_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_release_complete_ies_o::value_c::mbs_multicast_f1_u_context_descriptor() const
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
const crit_diagnostics_s& multicast_distribution_release_complete_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_distribution_release_complete_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      j.write_fieldname("MBSMulticastF1UContextDescriptor");
      c.get<mbs_multicast_f1_u_context_descriptor_s>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_complete_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_distribution_release_complete_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_complete_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_release_complete_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_complete_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastDistributionSetupFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_distribution_setup_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 502, 0, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool multicast_distribution_setup_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 502, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_distribution_setup_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::ignore;
    case 502:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_distribution_setup_fail_ies_o::value_c multicast_distribution_setup_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 502:
      ret.set(value_c::types::mbs_multicast_f1_u_context_descriptor);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_distribution_setup_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::optional;
    case 502:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_distribution_setup_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_multicast_f1_u_context_descriptor:
      c.destroy<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_distribution_setup_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_fail_ies_o::value_c");
  }
}
multicast_distribution_setup_fail_ies_o::value_c::value_c(const multicast_distribution_setup_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_fail_ies_o::value_c");
  }
}
multicast_distribution_setup_fail_ies_o::value_c& multicast_distribution_setup_fail_ies_o::value_c::operator=(
    const multicast_distribution_setup_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.set(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_distribution_setup_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_distribution_setup_fail_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_setup_fail_ies_o::value_c::mbs_multicast_f1_u_context_descriptor()
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
cause_c& multicast_distribution_setup_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& multicast_distribution_setup_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_distribution_setup_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_distribution_setup_fail_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_setup_fail_ies_o::value_c::mbs_multicast_f1_u_context_descriptor() const
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
const cause_c& multicast_distribution_setup_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& multicast_distribution_setup_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_distribution_setup_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      j.write_fieldname("MBSMulticastF1UContextDescriptor");
      c.get<mbs_multicast_f1_u_context_descriptor_s>().to_json(j);
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_distribution_setup_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().pack(bref));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_setup_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().unpack(bref));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastDistributionSetupRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_distribution_setup_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 502, 503};
  return map_enum_number(names, 4, idx, "id");
}
bool multicast_distribution_setup_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 502, 503};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_distribution_setup_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 502:
      return crit_e::reject;
    case 503:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_distribution_setup_request_ies_o::value_c
multicast_distribution_setup_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 502:
      ret.set(value_c::types::mbs_multicast_f1_u_context_descriptor);
      break;
    case 503:
      ret.set(value_c::types::multicast_f1_u_context_to_be_setup_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_distribution_setup_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 502:
      return presence_e::mandatory;
    case 503:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_distribution_setup_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_multicast_f1_u_context_descriptor:
      c.destroy<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      c.destroy<multicast_f1_u_context_to_be_setup_list_l>();
      break;
    default:
      break;
  }
}
void multicast_distribution_setup_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      c.init<multicast_f1_u_context_to_be_setup_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_request_ies_o::value_c");
  }
}
multicast_distribution_setup_request_ies_o::value_c::value_c(
    const multicast_distribution_setup_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      c.init(other.c.get<multicast_f1_u_context_to_be_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_request_ies_o::value_c");
  }
}
multicast_distribution_setup_request_ies_o::value_c& multicast_distribution_setup_request_ies_o::value_c::operator=(
    const multicast_distribution_setup_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.set(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      c.set(other.c.get<multicast_f1_u_context_to_be_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_distribution_setup_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_distribution_setup_request_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_setup_request_ies_o::value_c::mbs_multicast_f1_u_context_descriptor()
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
multicast_f1_u_context_to_be_setup_list_l&
multicast_distribution_setup_request_ies_o::value_c::multicast_f1_u_context_to_be_setup_list()
{
  assert_choice_type(types::multicast_f1_u_context_to_be_setup_list, type_, "Value");
  return c.get<multicast_f1_u_context_to_be_setup_list_l>();
}
const uint64_t& multicast_distribution_setup_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_distribution_setup_request_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_setup_request_ies_o::value_c::mbs_multicast_f1_u_context_descriptor() const
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
const multicast_f1_u_context_to_be_setup_list_l&
multicast_distribution_setup_request_ies_o::value_c::multicast_f1_u_context_to_be_setup_list() const
{
  assert_choice_type(types::multicast_f1_u_context_to_be_setup_list, type_, "Value");
  return c.get<multicast_f1_u_context_to_be_setup_list_l>();
}
void multicast_distribution_setup_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      j.write_fieldname("MBSMulticastF1UContextDescriptor");
      c.get<mbs_multicast_f1_u_context_descriptor_s>().to_json(j);
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      j.start_array("MulticastF1UContext-ToBeSetup-List");
      for (const auto& e1 : c.get<multicast_f1_u_context_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_distribution_setup_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().pack(bref));
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_f1_u_context_to_be_setup_list_l>(), 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_setup_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().unpack(bref));
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_f1_u_context_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastDistributionSetupResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_distribution_setup_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 502, 505, 507, 7, 681};
  return map_enum_number(names, 7, idx, "id");
}
bool multicast_distribution_setup_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 502, 505, 507, 7, 681};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_distribution_setup_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 502:
      return crit_e::reject;
    case 505:
      return crit_e::reject;
    case 507:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    case 681:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_distribution_setup_resp_ies_o::value_c multicast_distribution_setup_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 502:
      ret.set(value_c::types::mbs_multicast_f1_u_context_descriptor);
      break;
    case 505:
      ret.set(value_c::types::multicast_f1_u_context_setup_list);
      break;
    case 507:
      ret.set(value_c::types::multicast_f1_u_context_failed_to_be_setup_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 681:
      ret.set(value_c::types::multicast_f1_u_context_ref_cu);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_distribution_setup_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 502:
      return presence_e::mandatory;
    case 505:
      return presence_e::mandatory;
    case 507:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 681:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_distribution_setup_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_multicast_f1_u_context_descriptor:
      c.destroy<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::multicast_f1_u_context_setup_list:
      c.destroy<multicast_f1_u_context_setup_list_l>();
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      c.destroy<multicast_f1_u_context_failed_to_be_setup_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::multicast_f1_u_context_ref_cu:
      c.destroy<fixed_octstring<4, true>>();
      break;
    default:
      break;
  }
}
void multicast_distribution_setup_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::multicast_f1_u_context_setup_list:
      c.init<multicast_f1_u_context_setup_list_l>();
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      c.init<multicast_f1_u_context_failed_to_be_setup_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::multicast_f1_u_context_ref_cu:
      c.init<fixed_octstring<4, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_resp_ies_o::value_c");
  }
}
multicast_distribution_setup_resp_ies_o::value_c::value_c(const multicast_distribution_setup_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::multicast_f1_u_context_setup_list:
      c.init(other.c.get<multicast_f1_u_context_setup_list_l>());
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      c.init(other.c.get<multicast_f1_u_context_failed_to_be_setup_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::multicast_f1_u_context_ref_cu:
      c.init(other.c.get<fixed_octstring<4, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_resp_ies_o::value_c");
  }
}
multicast_distribution_setup_resp_ies_o::value_c& multicast_distribution_setup_resp_ies_o::value_c::operator=(
    const multicast_distribution_setup_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.set(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::multicast_f1_u_context_setup_list:
      c.set(other.c.get<multicast_f1_u_context_setup_list_l>());
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      c.set(other.c.get<multicast_f1_u_context_failed_to_be_setup_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::multicast_f1_u_context_ref_cu:
      c.set(other.c.get<fixed_octstring<4, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_distribution_setup_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_distribution_setup_resp_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_setup_resp_ies_o::value_c::mbs_multicast_f1_u_context_descriptor()
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
multicast_f1_u_context_setup_list_l&
multicast_distribution_setup_resp_ies_o::value_c::multicast_f1_u_context_setup_list()
{
  assert_choice_type(types::multicast_f1_u_context_setup_list, type_, "Value");
  return c.get<multicast_f1_u_context_setup_list_l>();
}
multicast_f1_u_context_failed_to_be_setup_list_l&
multicast_distribution_setup_resp_ies_o::value_c::multicast_f1_u_context_failed_to_be_setup_list()
{
  assert_choice_type(types::multicast_f1_u_context_failed_to_be_setup_list, type_, "Value");
  return c.get<multicast_f1_u_context_failed_to_be_setup_list_l>();
}
crit_diagnostics_s& multicast_distribution_setup_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
fixed_octstring<4, true>& multicast_distribution_setup_resp_ies_o::value_c::multicast_f1_u_context_ref_cu()
{
  assert_choice_type(types::multicast_f1_u_context_ref_cu, type_, "Value");
  return c.get<fixed_octstring<4, true>>();
}
const uint64_t& multicast_distribution_setup_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_distribution_setup_resp_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_setup_resp_ies_o::value_c::mbs_multicast_f1_u_context_descriptor() const
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
const multicast_f1_u_context_setup_list_l&
multicast_distribution_setup_resp_ies_o::value_c::multicast_f1_u_context_setup_list() const
{
  assert_choice_type(types::multicast_f1_u_context_setup_list, type_, "Value");
  return c.get<multicast_f1_u_context_setup_list_l>();
}
const multicast_f1_u_context_failed_to_be_setup_list_l&
multicast_distribution_setup_resp_ies_o::value_c::multicast_f1_u_context_failed_to_be_setup_list() const
{
  assert_choice_type(types::multicast_f1_u_context_failed_to_be_setup_list, type_, "Value");
  return c.get<multicast_f1_u_context_failed_to_be_setup_list_l>();
}
const crit_diagnostics_s& multicast_distribution_setup_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const fixed_octstring<4, true>& multicast_distribution_setup_resp_ies_o::value_c::multicast_f1_u_context_ref_cu() const
{
  assert_choice_type(types::multicast_f1_u_context_ref_cu, type_, "Value");
  return c.get<fixed_octstring<4, true>>();
}
void multicast_distribution_setup_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      j.write_fieldname("MBSMulticastF1UContextDescriptor");
      c.get<mbs_multicast_f1_u_context_descriptor_s>().to_json(j);
      break;
    case types::multicast_f1_u_context_setup_list:
      j.start_array("MulticastF1UContext-Setup-List");
      for (const auto& e1 : c.get<multicast_f1_u_context_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      j.start_array("MulticastF1UContext-FailedToBeSetup-List");
      for (const auto& e1 : c.get<multicast_f1_u_context_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::multicast_f1_u_context_ref_cu:
      j.write_str("OCTET STRING", c.get<fixed_octstring<4, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_distribution_setup_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().pack(bref));
      break;
    case types::multicast_f1_u_context_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_f1_u_context_setup_list_l>(), 1, 32, true));
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_f1_u_context_failed_to_be_setup_list_l>(), 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::multicast_f1_u_context_ref_cu:
      HANDLE_CODE((c.get<fixed_octstring<4, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_setup_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().unpack(bref));
      break;
    case types::multicast_f1_u_context_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_f1_u_context_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_f1_u_context_failed_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::multicast_f1_u_context_ref_cu:
      HANDLE_CODE((c.get<fixed_octstring<4, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastGroupPagingIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_group_paging_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {455, 479, 687};
  return map_enum_number(names, 3, idx, "id");
}
bool multicast_group_paging_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {455, 479, 687};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_group_paging_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 455:
      return crit_e::reject;
    case 479:
      return crit_e::ignore;
    case 687:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_group_paging_ies_o::value_c multicast_group_paging_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 455:
      ret.set(value_c::types::mbs_session_id);
      break;
    case 479:
      ret.set(value_c::types::ue_id_list_for_paging_list);
      break;
    case 687:
      ret.set(value_c::types::mc_paging_cell_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_group_paging_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 455:
      return presence_e::mandatory;
    case 479:
      return presence_e::optional;
    case 687:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_group_paging_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_session_id:
      c.destroy<mbs_session_id_s>();
      break;
    case types::ue_id_list_for_paging_list:
      c.destroy<ue_id_list_for_paging_list_l>();
      break;
    case types::mc_paging_cell_list:
      c.destroy<mc_paging_cell_list_l>();
      break;
    default:
      break;
  }
}
void multicast_group_paging_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::mbs_session_id:
      c.init<mbs_session_id_s>();
      break;
    case types::ue_id_list_for_paging_list:
      c.init<ue_id_list_for_paging_list_l>();
      break;
    case types::mc_paging_cell_list:
      c.init<mc_paging_cell_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_group_paging_ies_o::value_c");
  }
}
multicast_group_paging_ies_o::value_c::value_c(const multicast_group_paging_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::mbs_session_id:
      c.init(other.c.get<mbs_session_id_s>());
      break;
    case types::ue_id_list_for_paging_list:
      c.init(other.c.get<ue_id_list_for_paging_list_l>());
      break;
    case types::mc_paging_cell_list:
      c.init(other.c.get<mc_paging_cell_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_group_paging_ies_o::value_c");
  }
}
multicast_group_paging_ies_o::value_c&
multicast_group_paging_ies_o::value_c::operator=(const multicast_group_paging_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::mbs_session_id:
      c.set(other.c.get<mbs_session_id_s>());
      break;
    case types::ue_id_list_for_paging_list:
      c.set(other.c.get<ue_id_list_for_paging_list_l>());
      break;
    case types::mc_paging_cell_list:
      c.set(other.c.get<mc_paging_cell_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_group_paging_ies_o::value_c");
  }

  return *this;
}
mbs_session_id_s& multicast_group_paging_ies_o::value_c::mbs_session_id()
{
  assert_choice_type(types::mbs_session_id, type_, "Value");
  return c.get<mbs_session_id_s>();
}
ue_id_list_for_paging_list_l& multicast_group_paging_ies_o::value_c::ue_id_list_for_paging_list()
{
  assert_choice_type(types::ue_id_list_for_paging_list, type_, "Value");
  return c.get<ue_id_list_for_paging_list_l>();
}
mc_paging_cell_list_l& multicast_group_paging_ies_o::value_c::mc_paging_cell_list()
{
  assert_choice_type(types::mc_paging_cell_list, type_, "Value");
  return c.get<mc_paging_cell_list_l>();
}
const mbs_session_id_s& multicast_group_paging_ies_o::value_c::mbs_session_id() const
{
  assert_choice_type(types::mbs_session_id, type_, "Value");
  return c.get<mbs_session_id_s>();
}
const ue_id_list_for_paging_list_l& multicast_group_paging_ies_o::value_c::ue_id_list_for_paging_list() const
{
  assert_choice_type(types::ue_id_list_for_paging_list, type_, "Value");
  return c.get<ue_id_list_for_paging_list_l>();
}
const mc_paging_cell_list_l& multicast_group_paging_ies_o::value_c::mc_paging_cell_list() const
{
  assert_choice_type(types::mc_paging_cell_list, type_, "Value");
  return c.get<mc_paging_cell_list_l>();
}
void multicast_group_paging_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::mbs_session_id:
      j.write_fieldname("MBS-Session-ID");
      c.get<mbs_session_id_s>().to_json(j);
      break;
    case types::ue_id_list_for_paging_list:
      j.start_array("UEIdentity-List-For-Paging-List");
      for (const auto& e1 : c.get<ue_id_list_for_paging_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::mc_paging_cell_list:
      j.start_array("MC-PagingCell-list");
      for (const auto& e1 : c.get<mc_paging_cell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "multicast_group_paging_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_group_paging_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::mbs_session_id:
      HANDLE_CODE(c.get<mbs_session_id_s>().pack(bref));
      break;
    case types::ue_id_list_for_paging_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_id_list_for_paging_list_l>(), 1, 4096, true));
      break;
    case types::mc_paging_cell_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<mc_paging_cell_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_group_paging_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_group_paging_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::mbs_session_id:
      HANDLE_CODE(c.get<mbs_session_id_s>().unpack(bref));
      break;
    case types::ue_id_list_for_paging_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_id_list_for_paging_list_l>(), bref, 1, 4096, true));
      break;
    case types::mc_paging_cell_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<mc_paging_cell_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_group_paging_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// NetworkAccessRateReductionIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t network_access_rate_reduction_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 225};
  return map_enum_number(names, 2, idx, "id");
}
bool network_access_rate_reduction_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 225};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e network_access_rate_reduction_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 225:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
network_access_rate_reduction_ies_o::value_c network_access_rate_reduction_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 225:
      ret.set(value_c::types::uac_assist_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e network_access_rate_reduction_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 225:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void network_access_rate_reduction_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::uac_assist_info:
      c.destroy<uac_assist_info_s>();
      break;
    default:
      break;
  }
}
void network_access_rate_reduction_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::uac_assist_info:
      c.init<uac_assist_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
  }
}
network_access_rate_reduction_ies_o::value_c::value_c(const network_access_rate_reduction_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::uac_assist_info:
      c.init(other.c.get<uac_assist_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
  }
}
network_access_rate_reduction_ies_o::value_c&
network_access_rate_reduction_ies_o::value_c::operator=(const network_access_rate_reduction_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::uac_assist_info:
      c.set(other.c.get<uac_assist_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
  }

  return *this;
}
uint16_t& network_access_rate_reduction_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uac_assist_info_s& network_access_rate_reduction_ies_o::value_c::uac_assist_info()
{
  assert_choice_type(types::uac_assist_info, type_, "Value");
  return c.get<uac_assist_info_s>();
}
const uint16_t& network_access_rate_reduction_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uac_assist_info_s& network_access_rate_reduction_ies_o::value_c::uac_assist_info() const
{
  assert_choice_type(types::uac_assist_info, type_, "Value");
  return c.get<uac_assist_info_s>();
}
void network_access_rate_reduction_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::uac_assist_info:
      j.write_fieldname("UAC-Assistance-Info");
      c.get<uac_assist_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE network_access_rate_reduction_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::uac_assist_info:
      HANDLE_CODE(c.get<uac_assist_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE network_access_rate_reduction_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::uac_assist_info:
      HANDLE_CODE(c.get<uac_assist_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// NotifyIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t notify_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 137};
  return map_enum_number(names, 3, idx, "id");
}
bool notify_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 137};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e notify_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 137:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
notify_ies_o::value_c notify_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 137:
      ret.set(value_c::types::drb_notify_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e notify_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 137:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void notify_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::drb_notify_list:
      c.destroy<drb_notify_list_l>();
      break;
    default:
      break;
  }
}
void notify_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::drb_notify_list:
      c.init<drb_notify_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
  }
}
notify_ies_o::value_c::value_c(const notify_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::drb_notify_list:
      c.init(other.c.get<drb_notify_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
  }
}
notify_ies_o::value_c& notify_ies_o::value_c::operator=(const notify_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::drb_notify_list:
      c.set(other.c.get<drb_notify_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
  }

  return *this;
}
uint64_t& notify_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& notify_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
drb_notify_list_l& notify_ies_o::value_c::drb_notify_list()
{
  assert_choice_type(types::drb_notify_list, type_, "Value");
  return c.get<drb_notify_list_l>();
}
const uint64_t& notify_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& notify_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const drb_notify_list_l& notify_ies_o::value_c::drb_notify_list() const
{
  assert_choice_type(types::drb_notify_list, type_, "Value");
  return c.get<drb_notify_list_l>();
}
void notify_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::drb_notify_list:
      j.start_array("DRB-Notify-List");
      for (const auto& e1 : c.get<drb_notify_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE notify_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::drb_notify_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drb_notify_list_l>(), 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE notify_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::drb_notify_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drb_notify_list_l>(), bref, 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PDCMeasurementFailureIndication-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pdc_meas_fail_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 546, 0};
  return map_enum_number(names, 4, idx, "id");
}
bool pdc_meas_fail_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 546, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pdc_meas_fail_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 546:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pdc_meas_fail_ind_ies_o::value_c pdc_meas_fail_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 546:
      ret.set(value_c::types::ran_ue_pdc_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pdc_meas_fail_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 546:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pdc_meas_fail_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void pdc_meas_fail_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::ran_ue_pdc_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_fail_ind_ies_o::value_c");
  }
}
pdc_meas_fail_ind_ies_o::value_c::value_c(const pdc_meas_fail_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_fail_ind_ies_o::value_c");
  }
}
pdc_meas_fail_ind_ies_o::value_c&
pdc_meas_fail_ind_ies_o::value_c::operator=(const pdc_meas_fail_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_fail_ind_ies_o::value_c");
  }

  return *this;
}
uint64_t& pdc_meas_fail_ind_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& pdc_meas_fail_ind_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& pdc_meas_fail_ind_ies_o::value_c::ran_ue_pdc_meas_id()
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
cause_c& pdc_meas_fail_ind_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& pdc_meas_fail_ind_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& pdc_meas_fail_ind_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& pdc_meas_fail_ind_ies_o::value_c::ran_ue_pdc_meas_id() const
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
const cause_c& pdc_meas_fail_ind_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void pdc_meas_fail_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      j.write_int("INTEGER (1..16,...)", c.get<uint8_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_fail_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pdc_meas_fail_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_fail_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PDCMeasurementInitiationFailure-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pdc_meas_initiation_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 546, 0, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool pdc_meas_initiation_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 546, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pdc_meas_initiation_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 546:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pdc_meas_initiation_fail_ies_o::value_c pdc_meas_initiation_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 546:
      ret.set(value_c::types::ran_ue_pdc_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pdc_meas_initiation_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 546:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pdc_meas_initiation_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void pdc_meas_initiation_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::ran_ue_pdc_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_fail_ies_o::value_c");
  }
}
pdc_meas_initiation_fail_ies_o::value_c::value_c(const pdc_meas_initiation_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_fail_ies_o::value_c");
  }
}
pdc_meas_initiation_fail_ies_o::value_c&
pdc_meas_initiation_fail_ies_o::value_c::operator=(const pdc_meas_initiation_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& pdc_meas_initiation_fail_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& pdc_meas_initiation_fail_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& pdc_meas_initiation_fail_ies_o::value_c::ran_ue_pdc_meas_id()
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
cause_c& pdc_meas_initiation_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& pdc_meas_initiation_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& pdc_meas_initiation_fail_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& pdc_meas_initiation_fail_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& pdc_meas_initiation_fail_ies_o::value_c::ran_ue_pdc_meas_id() const
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
const cause_c& pdc_meas_initiation_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& pdc_meas_initiation_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void pdc_meas_initiation_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      j.write_int("INTEGER (1..16,...)", c.get<uint8_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pdc_meas_initiation_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_initiation_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PDCMeasurementInitiationRequest-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pdc_meas_initiation_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 546, 545, 541, 542};
  return map_enum_number(names, 6, idx, "id");
}
bool pdc_meas_initiation_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 546, 545, 541, 542};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pdc_meas_initiation_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 546:
      return crit_e::reject;
    case 545:
      return crit_e::reject;
    case 541:
      return crit_e::reject;
    case 542:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pdc_meas_initiation_request_ies_o::value_c pdc_meas_initiation_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 546:
      ret.set(value_c::types::ran_ue_pdc_meas_id);
      break;
    case 545:
      ret.set(value_c::types::pdc_report_type);
      break;
    case 541:
      ret.set(value_c::types::pdc_meas_periodicity);
      break;
    case 542:
      ret.set(value_c::types::pdc_meas_quantities);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pdc_meas_initiation_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 546:
      return presence_e::mandatory;
    case 545:
      return presence_e::mandatory;
    case 541:
      return presence_e::conditional;
    case 542:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pdc_meas_initiation_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pdc_meas_quantities:
      c.destroy<pdc_meas_quantities_l>();
      break;
    default:
      break;
  }
}
void pdc_meas_initiation_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::ran_ue_pdc_meas_id:
      break;
    case types::pdc_report_type:
      break;
    case types::pdc_meas_periodicity:
      break;
    case types::pdc_meas_quantities:
      c.init<pdc_meas_quantities_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_request_ies_o::value_c");
  }
}
pdc_meas_initiation_request_ies_o::value_c::value_c(const pdc_meas_initiation_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::pdc_report_type:
      c.init(other.c.get<pdc_report_type_e>());
      break;
    case types::pdc_meas_periodicity:
      c.init(other.c.get<pdc_meas_periodicity_e>());
      break;
    case types::pdc_meas_quantities:
      c.init(other.c.get<pdc_meas_quantities_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_request_ies_o::value_c");
  }
}
pdc_meas_initiation_request_ies_o::value_c&
pdc_meas_initiation_request_ies_o::value_c::operator=(const pdc_meas_initiation_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::pdc_report_type:
      c.set(other.c.get<pdc_report_type_e>());
      break;
    case types::pdc_meas_periodicity:
      c.set(other.c.get<pdc_meas_periodicity_e>());
      break;
    case types::pdc_meas_quantities:
      c.set(other.c.get<pdc_meas_quantities_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& pdc_meas_initiation_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& pdc_meas_initiation_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& pdc_meas_initiation_request_ies_o::value_c::ran_ue_pdc_meas_id()
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
pdc_report_type_e& pdc_meas_initiation_request_ies_o::value_c::pdc_report_type()
{
  assert_choice_type(types::pdc_report_type, type_, "Value");
  return c.get<pdc_report_type_e>();
}
pdc_meas_periodicity_e& pdc_meas_initiation_request_ies_o::value_c::pdc_meas_periodicity()
{
  assert_choice_type(types::pdc_meas_periodicity, type_, "Value");
  return c.get<pdc_meas_periodicity_e>();
}
pdc_meas_quantities_l& pdc_meas_initiation_request_ies_o::value_c::pdc_meas_quantities()
{
  assert_choice_type(types::pdc_meas_quantities, type_, "Value");
  return c.get<pdc_meas_quantities_l>();
}
const uint64_t& pdc_meas_initiation_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& pdc_meas_initiation_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& pdc_meas_initiation_request_ies_o::value_c::ran_ue_pdc_meas_id() const
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
const pdc_report_type_e& pdc_meas_initiation_request_ies_o::value_c::pdc_report_type() const
{
  assert_choice_type(types::pdc_report_type, type_, "Value");
  return c.get<pdc_report_type_e>();
}
const pdc_meas_periodicity_e& pdc_meas_initiation_request_ies_o::value_c::pdc_meas_periodicity() const
{
  assert_choice_type(types::pdc_meas_periodicity, type_, "Value");
  return c.get<pdc_meas_periodicity_e>();
}
const pdc_meas_quantities_l& pdc_meas_initiation_request_ies_o::value_c::pdc_meas_quantities() const
{
  assert_choice_type(types::pdc_meas_quantities, type_, "Value");
  return c.get<pdc_meas_quantities_l>();
}
void pdc_meas_initiation_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      j.write_int("INTEGER (1..16,...)", c.get<uint8_t>());
      break;
    case types::pdc_report_type:
      j.write_str("PDCReportType", c.get<pdc_report_type_e>().to_string());
      break;
    case types::pdc_meas_periodicity:
      j.write_str("PDCMeasurementPeriodicity", c.get<pdc_meas_periodicity_e>().to_string());
      break;
    case types::pdc_meas_quantities:
      j.start_array("PDCMeasurementQuantities");
      for (const auto& e1 : c.get<pdc_meas_quantities_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pdc_meas_initiation_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::pdc_report_type:
      HANDLE_CODE(c.get<pdc_report_type_e>().pack(bref));
      break;
    case types::pdc_meas_periodicity:
      HANDLE_CODE(c.get<pdc_meas_periodicity_e>().pack(bref));
      break;
    case types::pdc_meas_quantities:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pdc_meas_quantities_l>(), 1, 16, true));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_initiation_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::pdc_report_type:
      HANDLE_CODE(c.get<pdc_report_type_e>().unpack(bref));
      break;
    case types::pdc_meas_periodicity:
      HANDLE_CODE(c.get<pdc_meas_periodicity_e>().unpack(bref));
      break;
    case types::pdc_meas_quantities:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pdc_meas_quantities_l>(), bref, 1, 16, true));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PDCMeasurementInitiationResponse-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pdc_meas_initiation_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 546, 544, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool pdc_meas_initiation_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 546, 544, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pdc_meas_initiation_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 546:
      return crit_e::reject;
    case 544:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pdc_meas_initiation_resp_ies_o::value_c pdc_meas_initiation_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 546:
      ret.set(value_c::types::ran_ue_pdc_meas_id);
      break;
    case 544:
      ret.set(value_c::types::pdc_meas_result);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pdc_meas_initiation_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 546:
      return presence_e::mandatory;
    case 544:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pdc_meas_initiation_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pdc_meas_result:
      c.destroy<pdc_meas_result_s>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void pdc_meas_initiation_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::ran_ue_pdc_meas_id:
      break;
    case types::pdc_meas_result:
      c.init<pdc_meas_result_s>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_resp_ies_o::value_c");
  }
}
pdc_meas_initiation_resp_ies_o::value_c::value_c(const pdc_meas_initiation_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::pdc_meas_result:
      c.init(other.c.get<pdc_meas_result_s>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_resp_ies_o::value_c");
  }
}
pdc_meas_initiation_resp_ies_o::value_c&
pdc_meas_initiation_resp_ies_o::value_c::operator=(const pdc_meas_initiation_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::pdc_meas_result:
      c.set(other.c.get<pdc_meas_result_s>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& pdc_meas_initiation_resp_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& pdc_meas_initiation_resp_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& pdc_meas_initiation_resp_ies_o::value_c::ran_ue_pdc_meas_id()
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
pdc_meas_result_s& pdc_meas_initiation_resp_ies_o::value_c::pdc_meas_result()
{
  assert_choice_type(types::pdc_meas_result, type_, "Value");
  return c.get<pdc_meas_result_s>();
}
crit_diagnostics_s& pdc_meas_initiation_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& pdc_meas_initiation_resp_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& pdc_meas_initiation_resp_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& pdc_meas_initiation_resp_ies_o::value_c::ran_ue_pdc_meas_id() const
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
const pdc_meas_result_s& pdc_meas_initiation_resp_ies_o::value_c::pdc_meas_result() const
{
  assert_choice_type(types::pdc_meas_result, type_, "Value");
  return c.get<pdc_meas_result_s>();
}
const crit_diagnostics_s& pdc_meas_initiation_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void pdc_meas_initiation_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      j.write_int("INTEGER (1..16,...)", c.get<uint8_t>());
      break;
    case types::pdc_meas_result:
      j.write_fieldname("PDCMeasurementResult");
      c.get<pdc_meas_result_s>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pdc_meas_initiation_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::pdc_meas_result:
      HANDLE_CODE(c.get<pdc_meas_result_s>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_initiation_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::pdc_meas_result:
      HANDLE_CODE(c.get<pdc_meas_result_s>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PDCMeasurementReport-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pdc_meas_report_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 546, 544};
  return map_enum_number(names, 4, idx, "id");
}
bool pdc_meas_report_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 546, 544};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pdc_meas_report_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 546:
      return crit_e::reject;
    case 544:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pdc_meas_report_ies_o::value_c pdc_meas_report_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 546:
      ret.set(value_c::types::ran_ue_pdc_meas_id);
      break;
    case 544:
      ret.set(value_c::types::pdc_meas_result);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pdc_meas_report_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 546:
      return presence_e::mandatory;
    case 544:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pdc_meas_report_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pdc_meas_result:
      c.destroy<pdc_meas_result_s>();
      break;
    default:
      break;
  }
}
void pdc_meas_report_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::ran_ue_pdc_meas_id:
      break;
    case types::pdc_meas_result:
      c.init<pdc_meas_result_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_report_ies_o::value_c");
  }
}
pdc_meas_report_ies_o::value_c::value_c(const pdc_meas_report_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::pdc_meas_result:
      c.init(other.c.get<pdc_meas_result_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_report_ies_o::value_c");
  }
}
pdc_meas_report_ies_o::value_c& pdc_meas_report_ies_o::value_c::operator=(const pdc_meas_report_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::pdc_meas_result:
      c.set(other.c.get<pdc_meas_result_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_report_ies_o::value_c");
  }

  return *this;
}
uint64_t& pdc_meas_report_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& pdc_meas_report_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& pdc_meas_report_ies_o::value_c::ran_ue_pdc_meas_id()
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
pdc_meas_result_s& pdc_meas_report_ies_o::value_c::pdc_meas_result()
{
  assert_choice_type(types::pdc_meas_result, type_, "Value");
  return c.get<pdc_meas_result_s>();
}
const uint64_t& pdc_meas_report_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& pdc_meas_report_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& pdc_meas_report_ies_o::value_c::ran_ue_pdc_meas_id() const
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
const pdc_meas_result_s& pdc_meas_report_ies_o::value_c::pdc_meas_result() const
{
  assert_choice_type(types::pdc_meas_result, type_, "Value");
  return c.get<pdc_meas_result_s>();
}
void pdc_meas_report_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      j.write_int("INTEGER (1..16,...)", c.get<uint8_t>());
      break;
    case types::pdc_meas_result:
      j.write_fieldname("PDCMeasurementResult");
      c.get<pdc_meas_result_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_report_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pdc_meas_report_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::pdc_meas_result:
      HANDLE_CODE(c.get<pdc_meas_result_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_report_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_report_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::pdc_meas_result:
      HANDLE_CODE(c.get<pdc_meas_result_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_report_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PDCMeasurementTerminationCommand-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pdc_meas_termination_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 546};
  return map_enum_number(names, 3, idx, "id");
}
bool pdc_meas_termination_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 546};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pdc_meas_termination_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 546:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pdc_meas_termination_cmd_ies_o::value_c pdc_meas_termination_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 546:
      ret.set(value_c::types::ran_ue_pdc_meas_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pdc_meas_termination_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 546:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pdc_meas_termination_cmd_ies_o::value_c::destroy_() {}
void pdc_meas_termination_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
pdc_meas_termination_cmd_ies_o::value_c::value_c(const pdc_meas_termination_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_termination_cmd_ies_o::value_c");
  }
}
pdc_meas_termination_cmd_ies_o::value_c&
pdc_meas_termination_cmd_ies_o::value_c::operator=(const pdc_meas_termination_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_termination_cmd_ies_o::value_c");
  }

  return *this;
}
uint64_t& pdc_meas_termination_cmd_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& pdc_meas_termination_cmd_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& pdc_meas_termination_cmd_ies_o::value_c::ran_ue_pdc_meas_id()
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
const uint64_t& pdc_meas_termination_cmd_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& pdc_meas_termination_cmd_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& pdc_meas_termination_cmd_ies_o::value_c::ran_ue_pdc_meas_id() const
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
void pdc_meas_termination_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      j.write_int("INTEGER (1..16,...)", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_termination_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pdc_meas_termination_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_termination_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_termination_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_termination_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PRSConfigurationFailure-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t prs_cfg_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool prs_cfg_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e prs_cfg_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
prs_cfg_fail_ies_o::value_c prs_cfg_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e prs_cfg_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void prs_cfg_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void prs_cfg_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_fail_ies_o::value_c");
  }
}
prs_cfg_fail_ies_o::value_c::value_c(const prs_cfg_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_fail_ies_o::value_c");
  }
}
prs_cfg_fail_ies_o::value_c& prs_cfg_fail_ies_o::value_c::operator=(const prs_cfg_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& prs_cfg_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& prs_cfg_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& prs_cfg_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& prs_cfg_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& prs_cfg_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& prs_cfg_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void prs_cfg_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE prs_cfg_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_cfg_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PRSConfigurationRequest-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t prs_cfg_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {571, 549};
  return map_enum_number(names, 2, idx, "id");
}
bool prs_cfg_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {571, 549};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e prs_cfg_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 571:
      return crit_e::reject;
    case 549:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
prs_cfg_request_ies_o::value_c prs_cfg_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 571:
      ret.set(value_c::types::prs_cfg_request_type);
      break;
    case 549:
      ret.set(value_c::types::prstrp_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e prs_cfg_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 571:
      return presence_e::mandatory;
    case 549:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void prs_cfg_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::prstrp_list:
      c.destroy<prstrp_list_l>();
      break;
    default:
      break;
  }
}
void prs_cfg_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::prs_cfg_request_type:
      break;
    case types::prstrp_list:
      c.init<prstrp_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_request_ies_o::value_c");
  }
}
prs_cfg_request_ies_o::value_c::value_c(const prs_cfg_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::prs_cfg_request_type:
      c.init(other.c.get<prs_cfg_request_type_e>());
      break;
    case types::prstrp_list:
      c.init(other.c.get<prstrp_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_request_ies_o::value_c");
  }
}
prs_cfg_request_ies_o::value_c& prs_cfg_request_ies_o::value_c::operator=(const prs_cfg_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::prs_cfg_request_type:
      c.set(other.c.get<prs_cfg_request_type_e>());
      break;
    case types::prstrp_list:
      c.set(other.c.get<prstrp_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_request_ies_o::value_c");
  }

  return *this;
}
prs_cfg_request_type_e& prs_cfg_request_ies_o::value_c::prs_cfg_request_type()
{
  assert_choice_type(types::prs_cfg_request_type, type_, "Value");
  return c.get<prs_cfg_request_type_e>();
}
prstrp_list_l& prs_cfg_request_ies_o::value_c::prstrp_list()
{
  assert_choice_type(types::prstrp_list, type_, "Value");
  return c.get<prstrp_list_l>();
}
const prs_cfg_request_type_e& prs_cfg_request_ies_o::value_c::prs_cfg_request_type() const
{
  assert_choice_type(types::prs_cfg_request_type, type_, "Value");
  return c.get<prs_cfg_request_type_e>();
}
const prstrp_list_l& prs_cfg_request_ies_o::value_c::prstrp_list() const
{
  assert_choice_type(types::prstrp_list, type_, "Value");
  return c.get<prstrp_list_l>();
}
void prs_cfg_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::prs_cfg_request_type:
      j.write_str("PRSConfigRequestType", c.get<prs_cfg_request_type_e>().to_string());
      break;
    case types::prstrp_list:
      j.start_array("PRSTRPList");
      for (const auto& e1 : c.get<prstrp_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE prs_cfg_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::prs_cfg_request_type:
      HANDLE_CODE(c.get<prs_cfg_request_type_e>().pack(bref));
      break;
    case types::prstrp_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<prstrp_list_l>(), 1, 65535, true));
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_cfg_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::prs_cfg_request_type:
      HANDLE_CODE(c.get<prs_cfg_request_type_e>().unpack(bref));
      break;
    case types::prstrp_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<prstrp_list_l>(), bref, 1, 65535, true));
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PRSConfigurationResponse-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t prs_cfg_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 550, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool prs_cfg_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 550, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e prs_cfg_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 550:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
prs_cfg_resp_ies_o::value_c prs_cfg_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 550:
      ret.set(value_c::types::prs_tx_trp_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e prs_cfg_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 550:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void prs_cfg_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::prs_tx_trp_list:
      c.destroy<prs_tx_trp_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void prs_cfg_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::prs_tx_trp_list:
      c.init<prs_tx_trp_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_resp_ies_o::value_c");
  }
}
prs_cfg_resp_ies_o::value_c::value_c(const prs_cfg_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::prs_tx_trp_list:
      c.init(other.c.get<prs_tx_trp_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_resp_ies_o::value_c");
  }
}
prs_cfg_resp_ies_o::value_c& prs_cfg_resp_ies_o::value_c::operator=(const prs_cfg_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::prs_tx_trp_list:
      c.set(other.c.get<prs_tx_trp_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& prs_cfg_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
prs_tx_trp_list_l& prs_cfg_resp_ies_o::value_c::prs_tx_trp_list()
{
  assert_choice_type(types::prs_tx_trp_list, type_, "Value");
  return c.get<prs_tx_trp_list_l>();
}
crit_diagnostics_s& prs_cfg_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& prs_cfg_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const prs_tx_trp_list_l& prs_cfg_resp_ies_o::value_c::prs_tx_trp_list() const
{
  assert_choice_type(types::prs_tx_trp_list, type_, "Value");
  return c.get<prs_tx_trp_list_l>();
}
const crit_diagnostics_s& prs_cfg_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void prs_cfg_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::prs_tx_trp_list:
      j.start_array("PRSTransmissionTRPList");
      for (const auto& e1 : c.get<prs_tx_trp_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE prs_cfg_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::prs_tx_trp_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<prs_tx_trp_list_l>(), 1, 65535, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_cfg_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::prs_tx_trp_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<prs_tx_trp_list_l>(), bref, 1, 65535, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PWSCancelRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_cancel_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 142, 148, 157, 220};
  return map_enum_number(names, 5, idx, "id");
}
bool pws_cancel_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 142, 148, 157, 220};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pws_cancel_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 142:
      return crit_e::reject;
    case 148:
      return crit_e::reject;
    case 157:
      return crit_e::reject;
    case 220:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pws_cancel_request_ies_o::value_c pws_cancel_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 142:
      ret.set(value_c::types::numof_broadcast_request);
      break;
    case 148:
      ret.set(value_c::types::broadcast_to_be_cancelled_list);
      break;
    case 157:
      ret.set(value_c::types::cancel_all_warning_msgs_ind);
      break;
    case 220:
      ret.set(value_c::types::notif_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_cancel_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 142:
      return presence_e::mandatory;
    case 148:
      return presence_e::optional;
    case 157:
      return presence_e::optional;
    case 220:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pws_cancel_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::broadcast_to_be_cancelled_list:
      c.destroy<broadcast_to_be_cancelled_list_l>();
      break;
    case types::notif_info:
      c.destroy<notif_info_s>();
      break;
    default:
      break;
  }
}
void pws_cancel_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::numof_broadcast_request:
      break;
    case types::broadcast_to_be_cancelled_list:
      c.init<broadcast_to_be_cancelled_list_l>();
      break;
    case types::cancel_all_warning_msgs_ind:
      break;
    case types::notif_info:
      c.init<notif_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
  }
}
pws_cancel_request_ies_o::value_c::value_c(const pws_cancel_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::numof_broadcast_request:
      c.init(other.c.get<uint32_t>());
      break;
    case types::broadcast_to_be_cancelled_list:
      c.init(other.c.get<broadcast_to_be_cancelled_list_l>());
      break;
    case types::cancel_all_warning_msgs_ind:
      c.init(other.c.get<cancel_all_warning_msgs_ind_e>());
      break;
    case types::notif_info:
      c.init(other.c.get<notif_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
  }
}
pws_cancel_request_ies_o::value_c&
pws_cancel_request_ies_o::value_c::operator=(const pws_cancel_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::numof_broadcast_request:
      c.set(other.c.get<uint32_t>());
      break;
    case types::broadcast_to_be_cancelled_list:
      c.set(other.c.get<broadcast_to_be_cancelled_list_l>());
      break;
    case types::cancel_all_warning_msgs_ind:
      c.set(other.c.get<cancel_all_warning_msgs_ind_e>());
      break;
    case types::notif_info:
      c.set(other.c.get<notif_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& pws_cancel_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& pws_cancel_request_ies_o::value_c::numof_broadcast_request()
{
  assert_choice_type(types::numof_broadcast_request, type_, "Value");
  return c.get<uint32_t>();
}
broadcast_to_be_cancelled_list_l& pws_cancel_request_ies_o::value_c::broadcast_to_be_cancelled_list()
{
  assert_choice_type(types::broadcast_to_be_cancelled_list, type_, "Value");
  return c.get<broadcast_to_be_cancelled_list_l>();
}
cancel_all_warning_msgs_ind_e& pws_cancel_request_ies_o::value_c::cancel_all_warning_msgs_ind()
{
  assert_choice_type(types::cancel_all_warning_msgs_ind, type_, "Value");
  return c.get<cancel_all_warning_msgs_ind_e>();
}
notif_info_s& pws_cancel_request_ies_o::value_c::notif_info()
{
  assert_choice_type(types::notif_info, type_, "Value");
  return c.get<notif_info_s>();
}
const uint16_t& pws_cancel_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& pws_cancel_request_ies_o::value_c::numof_broadcast_request() const
{
  assert_choice_type(types::numof_broadcast_request, type_, "Value");
  return c.get<uint32_t>();
}
const broadcast_to_be_cancelled_list_l& pws_cancel_request_ies_o::value_c::broadcast_to_be_cancelled_list() const
{
  assert_choice_type(types::broadcast_to_be_cancelled_list, type_, "Value");
  return c.get<broadcast_to_be_cancelled_list_l>();
}
const cancel_all_warning_msgs_ind_e& pws_cancel_request_ies_o::value_c::cancel_all_warning_msgs_ind() const
{
  assert_choice_type(types::cancel_all_warning_msgs_ind, type_, "Value");
  return c.get<cancel_all_warning_msgs_ind_e>();
}
const notif_info_s& pws_cancel_request_ies_o::value_c::notif_info() const
{
  assert_choice_type(types::notif_info, type_, "Value");
  return c.get<notif_info_s>();
}
void pws_cancel_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::numof_broadcast_request:
      j.write_int("INTEGER (0..65535)", c.get<uint32_t>());
      break;
    case types::broadcast_to_be_cancelled_list:
      j.start_array("Broadcast-To-Be-Cancelled-List");
      for (const auto& e1 : c.get<broadcast_to_be_cancelled_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cancel_all_warning_msgs_ind:
      j.write_str("Cancel-all-Warning-Messages-Indicator", "true");
      break;
    case types::notif_info:
      j.write_fieldname("NotificationInformation");
      c.get<notif_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pws_cancel_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::numof_broadcast_request:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::broadcast_to_be_cancelled_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_to_be_cancelled_list_l>(), 1, 512, true));
      break;
    case types::cancel_all_warning_msgs_ind:
      HANDLE_CODE(c.get<cancel_all_warning_msgs_ind_e>().pack(bref));
      break;
    case types::notif_info:
      HANDLE_CODE(c.get<notif_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_cancel_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::numof_broadcast_request:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::broadcast_to_be_cancelled_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_to_be_cancelled_list_l>(), bref, 1, 512, true));
      break;
    case types::cancel_all_warning_msgs_ind:
      HANDLE_CODE(c.get<cancel_all_warning_msgs_ind_e>().unpack(bref));
      break;
    case types::notif_info:
      HANDLE_CODE(c.get<notif_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PWSCancelResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_cancel_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 150, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool pws_cancel_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 150, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pws_cancel_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 150:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pws_cancel_resp_ies_o::value_c pws_cancel_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 150:
      ret.set(value_c::types::cells_broadcast_cancelled_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_cancel_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 150:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pws_cancel_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_broadcast_cancelled_list:
      c.destroy<cells_broadcast_cancelled_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void pws_cancel_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_broadcast_cancelled_list:
      c.init<cells_broadcast_cancelled_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
  }
}
pws_cancel_resp_ies_o::value_c::value_c(const pws_cancel_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_broadcast_cancelled_list:
      c.init(other.c.get<cells_broadcast_cancelled_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
  }
}
pws_cancel_resp_ies_o::value_c& pws_cancel_resp_ies_o::value_c::operator=(const pws_cancel_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_broadcast_cancelled_list:
      c.set(other.c.get<cells_broadcast_cancelled_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& pws_cancel_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_broadcast_cancelled_list_l& pws_cancel_resp_ies_o::value_c::cells_broadcast_cancelled_list()
{
  assert_choice_type(types::cells_broadcast_cancelled_list, type_, "Value");
  return c.get<cells_broadcast_cancelled_list_l>();
}
crit_diagnostics_s& pws_cancel_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& pws_cancel_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_broadcast_cancelled_list_l& pws_cancel_resp_ies_o::value_c::cells_broadcast_cancelled_list() const
{
  assert_choice_type(types::cells_broadcast_cancelled_list, type_, "Value");
  return c.get<cells_broadcast_cancelled_list_l>();
}
const crit_diagnostics_s& pws_cancel_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void pws_cancel_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_broadcast_cancelled_list:
      j.start_array("Cells-Broadcast-Cancelled-List");
      for (const auto& e1 : c.get<cells_broadcast_cancelled_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pws_cancel_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_broadcast_cancelled_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_broadcast_cancelled_list_l>(), 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_cancel_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_broadcast_cancelled_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_broadcast_cancelled_list_l>(), bref, 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PWSFailureIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_fail_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 154};
  return map_enum_number(names, 2, idx, "id");
}
bool pws_fail_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 154};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pws_fail_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 154:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pws_fail_ind_ies_o::value_c pws_fail_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 154:
      ret.set(value_c::types::pws_failed_nr_cgi_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_fail_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 154:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pws_fail_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pws_failed_nr_cgi_list:
      c.destroy<pws_failed_nr_cgi_list_l>();
      break;
    default:
      break;
  }
}
void pws_fail_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::pws_failed_nr_cgi_list:
      c.init<pws_failed_nr_cgi_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
  }
}
pws_fail_ind_ies_o::value_c::value_c(const pws_fail_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::pws_failed_nr_cgi_list:
      c.init(other.c.get<pws_failed_nr_cgi_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
  }
}
pws_fail_ind_ies_o::value_c& pws_fail_ind_ies_o::value_c::operator=(const pws_fail_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::pws_failed_nr_cgi_list:
      c.set(other.c.get<pws_failed_nr_cgi_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& pws_fail_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
pws_failed_nr_cgi_list_l& pws_fail_ind_ies_o::value_c::pws_failed_nr_cgi_list()
{
  assert_choice_type(types::pws_failed_nr_cgi_list, type_, "Value");
  return c.get<pws_failed_nr_cgi_list_l>();
}
const uint16_t& pws_fail_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const pws_failed_nr_cgi_list_l& pws_fail_ind_ies_o::value_c::pws_failed_nr_cgi_list() const
{
  assert_choice_type(types::pws_failed_nr_cgi_list, type_, "Value");
  return c.get<pws_failed_nr_cgi_list_l>();
}
void pws_fail_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::pws_failed_nr_cgi_list:
      j.start_array("PWS-Failed-NR-CGI-List");
      for (const auto& e1 : c.get<pws_failed_nr_cgi_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pws_fail_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pws_failed_nr_cgi_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pws_failed_nr_cgi_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_fail_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pws_failed_nr_cgi_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pws_failed_nr_cgi_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PWSRestartIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_restart_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 152};
  return map_enum_number(names, 2, idx, "id");
}
bool pws_restart_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 152};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pws_restart_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 152:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pws_restart_ind_ies_o::value_c pws_restart_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 152:
      ret.set(value_c::types::nr_cgi_list_for_restart_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_restart_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 152:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pws_restart_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::nr_cgi_list_for_restart_list:
      c.destroy<nr_cgi_list_for_restart_list_l>();
      break;
    default:
      break;
  }
}
void pws_restart_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::nr_cgi_list_for_restart_list:
      c.init<nr_cgi_list_for_restart_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
  }
}
pws_restart_ind_ies_o::value_c::value_c(const pws_restart_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nr_cgi_list_for_restart_list:
      c.init(other.c.get<nr_cgi_list_for_restart_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
  }
}
pws_restart_ind_ies_o::value_c& pws_restart_ind_ies_o::value_c::operator=(const pws_restart_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nr_cgi_list_for_restart_list:
      c.set(other.c.get<nr_cgi_list_for_restart_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& pws_restart_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
nr_cgi_list_for_restart_list_l& pws_restart_ind_ies_o::value_c::nr_cgi_list_for_restart_list()
{
  assert_choice_type(types::nr_cgi_list_for_restart_list, type_, "Value");
  return c.get<nr_cgi_list_for_restart_list_l>();
}
const uint16_t& pws_restart_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const nr_cgi_list_for_restart_list_l& pws_restart_ind_ies_o::value_c::nr_cgi_list_for_restart_list() const
{
  assert_choice_type(types::nr_cgi_list_for_restart_list, type_, "Value");
  return c.get<nr_cgi_list_for_restart_list_l>();
}
void pws_restart_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::nr_cgi_list_for_restart_list:
      j.start_array("NR-CGI-List-For-Restart-List");
      for (const auto& e1 : c.get<nr_cgi_list_for_restart_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pws_restart_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi_list_for_restart_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<nr_cgi_list_for_restart_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_restart_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi_list_for_restart_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<nr_cgi_list_for_restart_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PagingIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t paging_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {117, 127, 114, 115, 113, 216, 580, 581, 582, 583, 620, 622, 623, 694};
  return map_enum_number(names, 14, idx, "id");
}
bool paging_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {117, 127, 114, 115, 113, 216, 580, 581, 582, 583, 620, 622, 623, 694};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e paging_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 117:
      return crit_e::reject;
    case 127:
      return crit_e::reject;
    case 114:
      return crit_e::ignore;
    case 115:
      return crit_e::ignore;
    case 113:
      return crit_e::ignore;
    case 216:
      return crit_e::ignore;
    case 580:
      return crit_e::ignore;
    case 581:
      return crit_e::ignore;
    case 582:
      return crit_e::ignore;
    case 583:
      return crit_e::ignore;
    case 620:
      return crit_e::ignore;
    case 622:
      return crit_e::ignore;
    case 623:
      return crit_e::ignore;
    case 694:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
paging_ies_o::value_c paging_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 117:
      ret.set(value_c::types::ue_id_idx_value);
      break;
    case 127:
      ret.set(value_c::types::paging_id);
      break;
    case 114:
      ret.set(value_c::types::paging_drx);
      break;
    case 115:
      ret.set(value_c::types::paging_prio);
      break;
    case 113:
      ret.set(value_c::types::paging_cell_list);
      break;
    case 216:
      ret.set(value_c::types::paging_origin);
      break;
    case 580:
      ret.set(value_c::types::ran_ue_paging_drx);
      break;
    case 581:
      ret.set(value_c::types::cn_ue_paging_drx);
      break;
    case 582:
      ret.set(value_c::types::nr_paginge_drx_info);
      break;
    case 583:
      ret.set(value_c::types::nr_paginge_drx_infofor_rrc_inactive);
      break;
    case 620:
      ret.set(value_c::types::paging_cause);
      break;
    case 622:
      ret.set(value_c::types::pe_ip_s_assist_info);
      break;
    case 623:
      ret.set(value_c::types::ue_paging_cap);
      break;
    case 694:
      ret.set(value_c::types::extended_ue_id_idx_value);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e paging_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 117:
      return presence_e::mandatory;
    case 127:
      return presence_e::mandatory;
    case 114:
      return presence_e::optional;
    case 115:
      return presence_e::optional;
    case 113:
      return presence_e::mandatory;
    case 216:
      return presence_e::optional;
    case 580:
      return presence_e::optional;
    case 581:
      return presence_e::optional;
    case 582:
      return presence_e::optional;
    case 583:
      return presence_e::optional;
    case 620:
      return presence_e::optional;
    case 622:
      return presence_e::optional;
    case 623:
      return presence_e::optional;
    case 694:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void paging_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::ue_id_idx_value:
      c.destroy<ue_id_idx_value_c>();
      break;
    case types::paging_id:
      c.destroy<paging_id_c>();
      break;
    case types::paging_cell_list:
      c.destroy<paging_cell_list_l>();
      break;
    case types::nr_paginge_drx_info:
      c.destroy<nr_paginge_drx_info_s>();
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      c.destroy<nr_paginge_drx_infofor_rrc_inactive_s>();
      break;
    case types::pe_ip_s_assist_info:
      c.destroy<pe_ip_s_assist_info_s>();
      break;
    case types::ue_paging_cap:
      c.destroy<ue_paging_cap_s>();
      break;
    case types::extended_ue_id_idx_value:
      c.destroy<fixed_bitstring<16, false, true>>();
      break;
    default:
      break;
  }
}
void paging_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ue_id_idx_value:
      c.init<ue_id_idx_value_c>();
      break;
    case types::paging_id:
      c.init<paging_id_c>();
      break;
    case types::paging_drx:
      break;
    case types::paging_prio:
      break;
    case types::paging_cell_list:
      c.init<paging_cell_list_l>();
      break;
    case types::paging_origin:
      break;
    case types::ran_ue_paging_drx:
      break;
    case types::cn_ue_paging_drx:
      break;
    case types::nr_paginge_drx_info:
      c.init<nr_paginge_drx_info_s>();
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      c.init<nr_paginge_drx_infofor_rrc_inactive_s>();
      break;
    case types::paging_cause:
      break;
    case types::pe_ip_s_assist_info:
      c.init<pe_ip_s_assist_info_s>();
      break;
    case types::ue_paging_cap:
      c.init<ue_paging_cap_s>();
      break;
    case types::extended_ue_id_idx_value:
      c.init<fixed_bitstring<16, false, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
  }
}
paging_ies_o::value_c::value_c(const paging_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ue_id_idx_value:
      c.init(other.c.get<ue_id_idx_value_c>());
      break;
    case types::paging_id:
      c.init(other.c.get<paging_id_c>());
      break;
    case types::paging_drx:
      c.init(other.c.get<paging_drx_e>());
      break;
    case types::paging_prio:
      c.init(other.c.get<paging_prio_e>());
      break;
    case types::paging_cell_list:
      c.init(other.c.get<paging_cell_list_l>());
      break;
    case types::paging_origin:
      c.init(other.c.get<paging_origin_e>());
      break;
    case types::ran_ue_paging_drx:
      c.init(other.c.get<paging_drx_e>());
      break;
    case types::cn_ue_paging_drx:
      c.init(other.c.get<paging_drx_e>());
      break;
    case types::nr_paginge_drx_info:
      c.init(other.c.get<nr_paginge_drx_info_s>());
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      c.init(other.c.get<nr_paginge_drx_infofor_rrc_inactive_s>());
      break;
    case types::paging_cause:
      c.init(other.c.get<paging_cause_e>());
      break;
    case types::pe_ip_s_assist_info:
      c.init(other.c.get<pe_ip_s_assist_info_s>());
      break;
    case types::ue_paging_cap:
      c.init(other.c.get<ue_paging_cap_s>());
      break;
    case types::extended_ue_id_idx_value:
      c.init(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
  }
}
paging_ies_o::value_c& paging_ies_o::value_c::operator=(const paging_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ue_id_idx_value:
      c.set(other.c.get<ue_id_idx_value_c>());
      break;
    case types::paging_id:
      c.set(other.c.get<paging_id_c>());
      break;
    case types::paging_drx:
      c.set(other.c.get<paging_drx_e>());
      break;
    case types::paging_prio:
      c.set(other.c.get<paging_prio_e>());
      break;
    case types::paging_cell_list:
      c.set(other.c.get<paging_cell_list_l>());
      break;
    case types::paging_origin:
      c.set(other.c.get<paging_origin_e>());
      break;
    case types::ran_ue_paging_drx:
      c.set(other.c.get<paging_drx_e>());
      break;
    case types::cn_ue_paging_drx:
      c.set(other.c.get<paging_drx_e>());
      break;
    case types::nr_paginge_drx_info:
      c.set(other.c.get<nr_paginge_drx_info_s>());
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      c.set(other.c.get<nr_paginge_drx_infofor_rrc_inactive_s>());
      break;
    case types::paging_cause:
      c.set(other.c.get<paging_cause_e>());
      break;
    case types::pe_ip_s_assist_info:
      c.set(other.c.get<pe_ip_s_assist_info_s>());
      break;
    case types::ue_paging_cap:
      c.set(other.c.get<ue_paging_cap_s>());
      break;
    case types::extended_ue_id_idx_value:
      c.set(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
  }

  return *this;
}
ue_id_idx_value_c& paging_ies_o::value_c::ue_id_idx_value()
{
  assert_choice_type(types::ue_id_idx_value, type_, "Value");
  return c.get<ue_id_idx_value_c>();
}
paging_id_c& paging_ies_o::value_c::paging_id()
{
  assert_choice_type(types::paging_id, type_, "Value");
  return c.get<paging_id_c>();
}
paging_drx_e& paging_ies_o::value_c::paging_drx()
{
  assert_choice_type(types::paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
paging_prio_e& paging_ies_o::value_c::paging_prio()
{
  assert_choice_type(types::paging_prio, type_, "Value");
  return c.get<paging_prio_e>();
}
paging_cell_list_l& paging_ies_o::value_c::paging_cell_list()
{
  assert_choice_type(types::paging_cell_list, type_, "Value");
  return c.get<paging_cell_list_l>();
}
paging_origin_e& paging_ies_o::value_c::paging_origin()
{
  assert_choice_type(types::paging_origin, type_, "Value");
  return c.get<paging_origin_e>();
}
paging_drx_e& paging_ies_o::value_c::ran_ue_paging_drx()
{
  assert_choice_type(types::ran_ue_paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
paging_drx_e& paging_ies_o::value_c::cn_ue_paging_drx()
{
  assert_choice_type(types::cn_ue_paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
nr_paginge_drx_info_s& paging_ies_o::value_c::nr_paginge_drx_info()
{
  assert_choice_type(types::nr_paginge_drx_info, type_, "Value");
  return c.get<nr_paginge_drx_info_s>();
}
nr_paginge_drx_infofor_rrc_inactive_s& paging_ies_o::value_c::nr_paginge_drx_infofor_rrc_inactive()
{
  assert_choice_type(types::nr_paginge_drx_infofor_rrc_inactive, type_, "Value");
  return c.get<nr_paginge_drx_infofor_rrc_inactive_s>();
}
paging_cause_e& paging_ies_o::value_c::paging_cause()
{
  assert_choice_type(types::paging_cause, type_, "Value");
  return c.get<paging_cause_e>();
}
pe_ip_s_assist_info_s& paging_ies_o::value_c::pe_ip_s_assist_info()
{
  assert_choice_type(types::pe_ip_s_assist_info, type_, "Value");
  return c.get<pe_ip_s_assist_info_s>();
}
ue_paging_cap_s& paging_ies_o::value_c::ue_paging_cap()
{
  assert_choice_type(types::ue_paging_cap, type_, "Value");
  return c.get<ue_paging_cap_s>();
}
fixed_bitstring<16, false, true>& paging_ies_o::value_c::extended_ue_id_idx_value()
{
  assert_choice_type(types::extended_ue_id_idx_value, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
const ue_id_idx_value_c& paging_ies_o::value_c::ue_id_idx_value() const
{
  assert_choice_type(types::ue_id_idx_value, type_, "Value");
  return c.get<ue_id_idx_value_c>();
}
const paging_id_c& paging_ies_o::value_c::paging_id() const
{
  assert_choice_type(types::paging_id, type_, "Value");
  return c.get<paging_id_c>();
}
const paging_drx_e& paging_ies_o::value_c::paging_drx() const
{
  assert_choice_type(types::paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
const paging_prio_e& paging_ies_o::value_c::paging_prio() const
{
  assert_choice_type(types::paging_prio, type_, "Value");
  return c.get<paging_prio_e>();
}
const paging_cell_list_l& paging_ies_o::value_c::paging_cell_list() const
{
  assert_choice_type(types::paging_cell_list, type_, "Value");
  return c.get<paging_cell_list_l>();
}
const paging_origin_e& paging_ies_o::value_c::paging_origin() const
{
  assert_choice_type(types::paging_origin, type_, "Value");
  return c.get<paging_origin_e>();
}
const paging_drx_e& paging_ies_o::value_c::ran_ue_paging_drx() const
{
  assert_choice_type(types::ran_ue_paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
const paging_drx_e& paging_ies_o::value_c::cn_ue_paging_drx() const
{
  assert_choice_type(types::cn_ue_paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
const nr_paginge_drx_info_s& paging_ies_o::value_c::nr_paginge_drx_info() const
{
  assert_choice_type(types::nr_paginge_drx_info, type_, "Value");
  return c.get<nr_paginge_drx_info_s>();
}
const nr_paginge_drx_infofor_rrc_inactive_s& paging_ies_o::value_c::nr_paginge_drx_infofor_rrc_inactive() const
{
  assert_choice_type(types::nr_paginge_drx_infofor_rrc_inactive, type_, "Value");
  return c.get<nr_paginge_drx_infofor_rrc_inactive_s>();
}
const paging_cause_e& paging_ies_o::value_c::paging_cause() const
{
  assert_choice_type(types::paging_cause, type_, "Value");
  return c.get<paging_cause_e>();
}
const pe_ip_s_assist_info_s& paging_ies_o::value_c::pe_ip_s_assist_info() const
{
  assert_choice_type(types::pe_ip_s_assist_info, type_, "Value");
  return c.get<pe_ip_s_assist_info_s>();
}
const ue_paging_cap_s& paging_ies_o::value_c::ue_paging_cap() const
{
  assert_choice_type(types::ue_paging_cap, type_, "Value");
  return c.get<ue_paging_cap_s>();
}
const fixed_bitstring<16, false, true>& paging_ies_o::value_c::extended_ue_id_idx_value() const
{
  assert_choice_type(types::extended_ue_id_idx_value, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
void paging_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_id_idx_value:
      j.write_fieldname("UEIdentityIndexValue");
      c.get<ue_id_idx_value_c>().to_json(j);
      break;
    case types::paging_id:
      j.write_fieldname("PagingIdentity");
      c.get<paging_id_c>().to_json(j);
      break;
    case types::paging_drx:
      j.write_str("PagingDRX", c.get<paging_drx_e>().to_string());
      break;
    case types::paging_prio:
      j.write_str("PagingPriority", c.get<paging_prio_e>().to_string());
      break;
    case types::paging_cell_list:
      j.start_array("PagingCell-list");
      for (const auto& e1 : c.get<paging_cell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::paging_origin:
      j.write_str("PagingOrigin", "non-3gpp");
      break;
    case types::ran_ue_paging_drx:
      j.write_str("PagingDRX", c.get<paging_drx_e>().to_string());
      break;
    case types::cn_ue_paging_drx:
      j.write_str("PagingDRX", c.get<paging_drx_e>().to_string());
      break;
    case types::nr_paginge_drx_info:
      j.write_fieldname("NRPagingeDRXInformation");
      c.get<nr_paginge_drx_info_s>().to_json(j);
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      j.write_fieldname("NRPagingeDRXInformationforRRCINACTIVE");
      c.get<nr_paginge_drx_infofor_rrc_inactive_s>().to_json(j);
      break;
    case types::paging_cause:
      j.write_str("PagingCause", "voice");
      break;
    case types::pe_ip_s_assist_info:
      j.write_fieldname("PEIPSAssistanceInfo");
      c.get<pe_ip_s_assist_info_s>().to_json(j);
      break;
    case types::ue_paging_cap:
      j.write_fieldname("UEPagingCapability");
      c.get<ue_paging_cap_s>().to_json(j);
      break;
    case types::extended_ue_id_idx_value:
      j.write_str("BIT STRING", c.get<fixed_bitstring<16, false, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE paging_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::ue_id_idx_value:
      HANDLE_CODE(c.get<ue_id_idx_value_c>().pack(bref));
      break;
    case types::paging_id:
      HANDLE_CODE(c.get<paging_id_c>().pack(bref));
      break;
    case types::paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().pack(bref));
      break;
    case types::paging_prio:
      HANDLE_CODE(c.get<paging_prio_e>().pack(bref));
      break;
    case types::paging_cell_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<paging_cell_list_l>(), 1, 512, true));
      break;
    case types::paging_origin:
      HANDLE_CODE(c.get<paging_origin_e>().pack(bref));
      break;
    case types::ran_ue_paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().pack(bref));
      break;
    case types::cn_ue_paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().pack(bref));
      break;
    case types::nr_paginge_drx_info:
      HANDLE_CODE(c.get<nr_paginge_drx_info_s>().pack(bref));
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      HANDLE_CODE(c.get<nr_paginge_drx_infofor_rrc_inactive_s>().pack(bref));
      break;
    case types::paging_cause:
      HANDLE_CODE(c.get<paging_cause_e>().pack(bref));
      break;
    case types::pe_ip_s_assist_info:
      HANDLE_CODE(c.get<pe_ip_s_assist_info_s>().pack(bref));
      break;
    case types::ue_paging_cap:
      HANDLE_CODE(c.get<ue_paging_cap_s>().pack(bref));
      break;
    case types::extended_ue_id_idx_value:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::ue_id_idx_value:
      HANDLE_CODE(c.get<ue_id_idx_value_c>().unpack(bref));
      break;
    case types::paging_id:
      HANDLE_CODE(c.get<paging_id_c>().unpack(bref));
      break;
    case types::paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().unpack(bref));
      break;
    case types::paging_prio:
      HANDLE_CODE(c.get<paging_prio_e>().unpack(bref));
      break;
    case types::paging_cell_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<paging_cell_list_l>(), bref, 1, 512, true));
      break;
    case types::paging_origin:
      HANDLE_CODE(c.get<paging_origin_e>().unpack(bref));
      break;
    case types::ran_ue_paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().unpack(bref));
      break;
    case types::cn_ue_paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().unpack(bref));
      break;
    case types::nr_paginge_drx_info:
      HANDLE_CODE(c.get<nr_paginge_drx_info_s>().unpack(bref));
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      HANDLE_CODE(c.get<nr_paginge_drx_infofor_rrc_inactive_s>().unpack(bref));
      break;
    case types::paging_cause:
      HANDLE_CODE(c.get<paging_cause_e>().unpack(bref));
      break;
    case types::pe_ip_s_assist_info:
      HANDLE_CODE(c.get<pe_ip_s_assist_info_s>().unpack(bref));
      break;
    case types::ue_paging_cap:
      HANDLE_CODE(c.get<ue_paging_cap_s>().unpack(bref));
      break;
    case types::extended_ue_id_idx_value:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PosSystemInformationDeliveryCommandIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pos_sys_info_delivery_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 111, 682, 156};
  return map_enum_number(names, 4, idx, "id");
}
bool pos_sys_info_delivery_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 111, 682, 156};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pos_sys_info_delivery_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 111:
      return crit_e::reject;
    case 682:
      return crit_e::reject;
    case 156:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pos_sys_info_delivery_cmd_ies_o::value_c pos_sys_info_delivery_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 111:
      ret.set(value_c::types::nr_cgi);
      break;
    case 682:
      ret.set(value_c::types::pos_sitype_list);
      break;
    case 156:
      ret.set(value_c::types::confirmed_ue_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pos_sys_info_delivery_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 111:
      return presence_e::mandatory;
    case 682:
      return presence_e::mandatory;
    case 156:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pos_sys_info_delivery_cmd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::nr_cgi:
      c.destroy<nr_cgi_s>();
      break;
    case types::pos_sitype_list:
      c.destroy<pos_sitype_list_l>();
      break;
    default:
      break;
  }
}
void pos_sys_info_delivery_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::nr_cgi:
      c.init<nr_cgi_s>();
      break;
    case types::pos_sitype_list:
      c.init<pos_sitype_list_l>();
      break;
    case types::confirmed_ue_id:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_delivery_cmd_ies_o::value_c");
  }
}
pos_sys_info_delivery_cmd_ies_o::value_c::value_c(const pos_sys_info_delivery_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nr_cgi:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::pos_sitype_list:
      c.init(other.c.get<pos_sitype_list_l>());
      break;
    case types::confirmed_ue_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_delivery_cmd_ies_o::value_c");
  }
}
pos_sys_info_delivery_cmd_ies_o::value_c&
pos_sys_info_delivery_cmd_ies_o::value_c::operator=(const pos_sys_info_delivery_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nr_cgi:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::pos_sitype_list:
      c.set(other.c.get<pos_sitype_list_l>());
      break;
    case types::confirmed_ue_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_delivery_cmd_ies_o::value_c");
  }

  return *this;
}
uint16_t& pos_sys_info_delivery_cmd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
nr_cgi_s& pos_sys_info_delivery_cmd_ies_o::value_c::nr_cgi()
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
pos_sitype_list_l& pos_sys_info_delivery_cmd_ies_o::value_c::pos_sitype_list()
{
  assert_choice_type(types::pos_sitype_list, type_, "Value");
  return c.get<pos_sitype_list_l>();
}
uint64_t& pos_sys_info_delivery_cmd_ies_o::value_c::confirmed_ue_id()
{
  assert_choice_type(types::confirmed_ue_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& pos_sys_info_delivery_cmd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const nr_cgi_s& pos_sys_info_delivery_cmd_ies_o::value_c::nr_cgi() const
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
const pos_sitype_list_l& pos_sys_info_delivery_cmd_ies_o::value_c::pos_sitype_list() const
{
  assert_choice_type(types::pos_sitype_list, type_, "Value");
  return c.get<pos_sitype_list_l>();
}
const uint64_t& pos_sys_info_delivery_cmd_ies_o::value_c::confirmed_ue_id() const
{
  assert_choice_type(types::confirmed_ue_id, type_, "Value");
  return c.get<uint64_t>();
}
void pos_sys_info_delivery_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::nr_cgi:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    case types::pos_sitype_list:
      j.start_array("PosSItypeList");
      for (const auto& e1 : c.get<pos_sitype_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::confirmed_ue_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_delivery_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pos_sys_info_delivery_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    case types::pos_sitype_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pos_sitype_list_l>(), 1, 32, true));
      break;
    case types::confirmed_ue_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_delivery_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pos_sys_info_delivery_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    case types::pos_sitype_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pos_sitype_list_l>(), bref, 1, 32, true));
      break;
    case types::confirmed_ue_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_delivery_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningActivationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_activation_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool positioning_activation_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_activation_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_activation_fail_ies_o::value_c positioning_activation_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_activation_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_activation_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void positioning_activation_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_fail_ies_o::value_c");
  }
}
positioning_activation_fail_ies_o::value_c::value_c(const positioning_activation_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_fail_ies_o::value_c");
  }
}
positioning_activation_fail_ies_o::value_c&
positioning_activation_fail_ies_o::value_c::operator=(const positioning_activation_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_activation_fail_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_activation_fail_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& positioning_activation_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& positioning_activation_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& positioning_activation_fail_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_activation_fail_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& positioning_activation_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& positioning_activation_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void positioning_activation_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_activation_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_activation_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningActivationRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_activation_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 403, 404};
  return map_enum_number(names, 4, idx, "id");
}
bool positioning_activation_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 403, 404};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_activation_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 403:
      return crit_e::reject;
    case 404:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_activation_request_ies_o::value_c positioning_activation_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 403:
      ret.set(value_c::types::srs_type);
      break;
    case 404:
      ret.set(value_c::types::activation_time);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_activation_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 403:
      return presence_e::mandatory;
    case 404:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_activation_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::srs_type:
      c.destroy<srs_type_c>();
      break;
    case types::activation_time:
      c.destroy<fixed_bitstring<64, false, true>>();
      break;
    default:
      break;
  }
}
void positioning_activation_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::srs_type:
      c.init<srs_type_c>();
      break;
    case types::activation_time:
      c.init<fixed_bitstring<64, false, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_request_ies_o::value_c");
  }
}
positioning_activation_request_ies_o::value_c::value_c(const positioning_activation_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::srs_type:
      c.init(other.c.get<srs_type_c>());
      break;
    case types::activation_time:
      c.init(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_request_ies_o::value_c");
  }
}
positioning_activation_request_ies_o::value_c&
positioning_activation_request_ies_o::value_c::operator=(const positioning_activation_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::srs_type:
      c.set(other.c.get<srs_type_c>());
      break;
    case types::activation_time:
      c.set(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_activation_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_activation_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
srs_type_c& positioning_activation_request_ies_o::value_c::srs_type()
{
  assert_choice_type(types::srs_type, type_, "Value");
  return c.get<srs_type_c>();
}
fixed_bitstring<64, false, true>& positioning_activation_request_ies_o::value_c::activation_time()
{
  assert_choice_type(types::activation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
const uint64_t& positioning_activation_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_activation_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const srs_type_c& positioning_activation_request_ies_o::value_c::srs_type() const
{
  assert_choice_type(types::srs_type, type_, "Value");
  return c.get<srs_type_c>();
}
const fixed_bitstring<64, false, true>& positioning_activation_request_ies_o::value_c::activation_time() const
{
  assert_choice_type(types::activation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
void positioning_activation_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::srs_type:
      j.write_fieldname("SRSType");
      c.get<srs_type_c>().to_json(j);
      break;
    case types::activation_time:
      j.write_str("BIT STRING", c.get<fixed_bitstring<64, false, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_activation_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srs_type:
      HANDLE_CODE(c.get<srs_type_c>().pack(bref));
      break;
    case types::activation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_activation_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srs_type:
      HANDLE_CODE(c.get<srs_type_c>().unpack(bref));
      break;
    case types::activation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningActivationResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_activation_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 420, 421, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool positioning_activation_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 420, 421, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_activation_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 420:
      return crit_e::ignore;
    case 421:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_activation_resp_ies_o::value_c positioning_activation_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 420:
      ret.set(value_c::types::sys_frame_num);
      break;
    case 421:
      ret.set(value_c::types::slot_num);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_activation_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 420:
      return presence_e::optional;
    case 421:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_activation_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void positioning_activation_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::sys_frame_num:
      break;
    case types::slot_num:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_resp_ies_o::value_c");
  }
}
positioning_activation_resp_ies_o::value_c::value_c(const positioning_activation_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::sys_frame_num:
      c.init(other.c.get<uint16_t>());
      break;
    case types::slot_num:
      c.init(other.c.get<uint8_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_resp_ies_o::value_c");
  }
}
positioning_activation_resp_ies_o::value_c&
positioning_activation_resp_ies_o::value_c::operator=(const positioning_activation_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::sys_frame_num:
      c.set(other.c.get<uint16_t>());
      break;
    case types::slot_num:
      c.set(other.c.get<uint8_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_activation_resp_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_activation_resp_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& positioning_activation_resp_ies_o::value_c::sys_frame_num()
{
  assert_choice_type(types::sys_frame_num, type_, "Value");
  return c.get<uint16_t>();
}
uint8_t& positioning_activation_resp_ies_o::value_c::slot_num()
{
  assert_choice_type(types::slot_num, type_, "Value");
  return c.get<uint8_t>();
}
crit_diagnostics_s& positioning_activation_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& positioning_activation_resp_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_activation_resp_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& positioning_activation_resp_ies_o::value_c::sys_frame_num() const
{
  assert_choice_type(types::sys_frame_num, type_, "Value");
  return c.get<uint16_t>();
}
const uint8_t& positioning_activation_resp_ies_o::value_c::slot_num() const
{
  assert_choice_type(types::slot_num, type_, "Value");
  return c.get<uint8_t>();
}
const crit_diagnostics_s& positioning_activation_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void positioning_activation_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::sys_frame_num:
      j.write_int("INTEGER (0..1023)", c.get<uint16_t>());
      break;
    case types::slot_num:
      j.write_int("INTEGER (0..79)", c.get<uint8_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_activation_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::sys_frame_num:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1023u, false, true));
      break;
    case types::slot_num:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_activation_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::sys_frame_num:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1023u, false, true));
      break;
    case types::slot_num:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningAssistanceInformationControlIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_assist_info_ctrl_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 392, 393, 406, 394};
  return map_enum_number(names, 5, idx, "id");
}
bool positioning_assist_info_ctrl_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 392, 393, 406, 394};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_assist_info_ctrl_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 392:
      return crit_e::reject;
    case 393:
      return crit_e::reject;
    case 406:
      return crit_e::reject;
    case 394:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_assist_info_ctrl_ies_o::value_c positioning_assist_info_ctrl_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 392:
      ret.set(value_c::types::pos_assist_info);
      break;
    case 393:
      ret.set(value_c::types::pos_broadcast);
      break;
    case 406:
      ret.set(value_c::types::positioning_broadcast_cells);
      break;
    case 394:
      ret.set(value_c::types::routing_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_assist_info_ctrl_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 392:
      return presence_e::optional;
    case 393:
      return presence_e::optional;
    case 406:
      return presence_e::optional;
    case 394:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_assist_info_ctrl_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pos_assist_info:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::positioning_broadcast_cells:
      c.destroy<positioning_broadcast_cells_l>();
      break;
    case types::routing_id:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void positioning_assist_info_ctrl_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::pos_assist_info:
      c.init<unbounded_octstring<true>>();
      break;
    case types::pos_broadcast:
      break;
    case types::positioning_broadcast_cells:
      c.init<positioning_broadcast_cells_l>();
      break;
    case types::routing_id:
      c.init<unbounded_octstring<true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_ctrl_ies_o::value_c");
  }
}
positioning_assist_info_ctrl_ies_o::value_c::value_c(const positioning_assist_info_ctrl_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::pos_assist_info:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::pos_broadcast:
      c.init(other.c.get<pos_broadcast_e>());
      break;
    case types::positioning_broadcast_cells:
      c.init(other.c.get<positioning_broadcast_cells_l>());
      break;
    case types::routing_id:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_ctrl_ies_o::value_c");
  }
}
positioning_assist_info_ctrl_ies_o::value_c&
positioning_assist_info_ctrl_ies_o::value_c::operator=(const positioning_assist_info_ctrl_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::pos_assist_info:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::pos_broadcast:
      c.set(other.c.get<pos_broadcast_e>());
      break;
    case types::positioning_broadcast_cells:
      c.set(other.c.get<positioning_broadcast_cells_l>());
      break;
    case types::routing_id:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_ctrl_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_assist_info_ctrl_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
unbounded_octstring<true>& positioning_assist_info_ctrl_ies_o::value_c::pos_assist_info()
{
  assert_choice_type(types::pos_assist_info, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
pos_broadcast_e& positioning_assist_info_ctrl_ies_o::value_c::pos_broadcast()
{
  assert_choice_type(types::pos_broadcast, type_, "Value");
  return c.get<pos_broadcast_e>();
}
positioning_broadcast_cells_l& positioning_assist_info_ctrl_ies_o::value_c::positioning_broadcast_cells()
{
  assert_choice_type(types::positioning_broadcast_cells, type_, "Value");
  return c.get<positioning_broadcast_cells_l>();
}
unbounded_octstring<true>& positioning_assist_info_ctrl_ies_o::value_c::routing_id()
{
  assert_choice_type(types::routing_id, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const uint16_t& positioning_assist_info_ctrl_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const unbounded_octstring<true>& positioning_assist_info_ctrl_ies_o::value_c::pos_assist_info() const
{
  assert_choice_type(types::pos_assist_info, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const pos_broadcast_e& positioning_assist_info_ctrl_ies_o::value_c::pos_broadcast() const
{
  assert_choice_type(types::pos_broadcast, type_, "Value");
  return c.get<pos_broadcast_e>();
}
const positioning_broadcast_cells_l& positioning_assist_info_ctrl_ies_o::value_c::positioning_broadcast_cells() const
{
  assert_choice_type(types::positioning_broadcast_cells, type_, "Value");
  return c.get<positioning_broadcast_cells_l>();
}
const unbounded_octstring<true>& positioning_assist_info_ctrl_ies_o::value_c::routing_id() const
{
  assert_choice_type(types::routing_id, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
void positioning_assist_info_ctrl_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::pos_assist_info:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::pos_broadcast:
      j.write_str("PosBroadcast", c.get<pos_broadcast_e>().to_string());
      break;
    case types::positioning_broadcast_cells:
      j.start_array("PositioningBroadcastCells");
      for (const auto& e1 : c.get<positioning_broadcast_cells_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::routing_id:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_ctrl_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_assist_info_ctrl_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pos_assist_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::pos_broadcast:
      HANDLE_CODE(c.get<pos_broadcast_e>().pack(bref));
      break;
    case types::positioning_broadcast_cells:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<positioning_broadcast_cells_l>(), 1, 16384, true));
      break;
    case types::routing_id:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_ctrl_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_assist_info_ctrl_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pos_assist_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::pos_broadcast:
      HANDLE_CODE(c.get<pos_broadcast_e>().unpack(bref));
      break;
    case types::positioning_broadcast_cells:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<positioning_broadcast_cells_l>(), bref, 1, 16384, true));
      break;
    case types::routing_id:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_ctrl_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningAssistanceInformationFeedbackIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_assist_info_feedback_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 395, 406, 394, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool positioning_assist_info_feedback_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 395, 406, 394, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_assist_info_feedback_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 395:
      return crit_e::reject;
    case 406:
      return crit_e::reject;
    case 394:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_assist_info_feedback_ies_o::value_c positioning_assist_info_feedback_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 395:
      ret.set(value_c::types::pos_assist_info_fail_list);
      break;
    case 406:
      ret.set(value_c::types::positioning_broadcast_cells);
      break;
    case 394:
      ret.set(value_c::types::routing_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_assist_info_feedback_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 395:
      return presence_e::optional;
    case 406:
      return presence_e::optional;
    case 394:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_assist_info_feedback_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pos_assist_info_fail_list:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::positioning_broadcast_cells:
      c.destroy<positioning_broadcast_cells_l>();
      break;
    case types::routing_id:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void positioning_assist_info_feedback_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::pos_assist_info_fail_list:
      c.init<unbounded_octstring<true>>();
      break;
    case types::positioning_broadcast_cells:
      c.init<positioning_broadcast_cells_l>();
      break;
    case types::routing_id:
      c.init<unbounded_octstring<true>>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_feedback_ies_o::value_c");
  }
}
positioning_assist_info_feedback_ies_o::value_c::value_c(const positioning_assist_info_feedback_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::pos_assist_info_fail_list:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::positioning_broadcast_cells:
      c.init(other.c.get<positioning_broadcast_cells_l>());
      break;
    case types::routing_id:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_feedback_ies_o::value_c");
  }
}
positioning_assist_info_feedback_ies_o::value_c&
positioning_assist_info_feedback_ies_o::value_c::operator=(const positioning_assist_info_feedback_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::pos_assist_info_fail_list:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::positioning_broadcast_cells:
      c.set(other.c.get<positioning_broadcast_cells_l>());
      break;
    case types::routing_id:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_feedback_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_assist_info_feedback_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
unbounded_octstring<true>& positioning_assist_info_feedback_ies_o::value_c::pos_assist_info_fail_list()
{
  assert_choice_type(types::pos_assist_info_fail_list, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
positioning_broadcast_cells_l& positioning_assist_info_feedback_ies_o::value_c::positioning_broadcast_cells()
{
  assert_choice_type(types::positioning_broadcast_cells, type_, "Value");
  return c.get<positioning_broadcast_cells_l>();
}
unbounded_octstring<true>& positioning_assist_info_feedback_ies_o::value_c::routing_id()
{
  assert_choice_type(types::routing_id, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
crit_diagnostics_s& positioning_assist_info_feedback_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& positioning_assist_info_feedback_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const unbounded_octstring<true>& positioning_assist_info_feedback_ies_o::value_c::pos_assist_info_fail_list() const
{
  assert_choice_type(types::pos_assist_info_fail_list, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const positioning_broadcast_cells_l&
positioning_assist_info_feedback_ies_o::value_c::positioning_broadcast_cells() const
{
  assert_choice_type(types::positioning_broadcast_cells, type_, "Value");
  return c.get<positioning_broadcast_cells_l>();
}
const unbounded_octstring<true>& positioning_assist_info_feedback_ies_o::value_c::routing_id() const
{
  assert_choice_type(types::routing_id, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const crit_diagnostics_s& positioning_assist_info_feedback_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void positioning_assist_info_feedback_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::pos_assist_info_fail_list:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::positioning_broadcast_cells:
      j.start_array("PositioningBroadcastCells");
      for (const auto& e1 : c.get<positioning_broadcast_cells_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::routing_id:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_feedback_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_assist_info_feedback_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pos_assist_info_fail_list:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::positioning_broadcast_cells:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<positioning_broadcast_cells_l>(), 1, 16384, true));
      break;
    case types::routing_id:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_feedback_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_assist_info_feedback_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pos_assist_info_fail_list:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::positioning_broadcast_cells:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<positioning_broadcast_cells_l>(), bref, 1, 16384, true));
      break;
    case types::routing_id:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_feedback_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningDeactivationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_deactivation_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 405};
  return map_enum_number(names, 3, idx, "id");
}
bool positioning_deactivation_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 405};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_deactivation_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 405:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_deactivation_ies_o::value_c positioning_deactivation_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 405:
      ret.set(value_c::types::abort_tx);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_deactivation_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 405:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_deactivation_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::abort_tx:
      c.destroy<abort_tx_c>();
      break;
    default:
      break;
  }
}
void positioning_deactivation_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::abort_tx:
      c.init<abort_tx_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_deactivation_ies_o::value_c");
  }
}
positioning_deactivation_ies_o::value_c::value_c(const positioning_deactivation_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::abort_tx:
      c.init(other.c.get<abort_tx_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_deactivation_ies_o::value_c");
  }
}
positioning_deactivation_ies_o::value_c&
positioning_deactivation_ies_o::value_c::operator=(const positioning_deactivation_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::abort_tx:
      c.set(other.c.get<abort_tx_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_deactivation_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_deactivation_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_deactivation_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
abort_tx_c& positioning_deactivation_ies_o::value_c::abort_tx()
{
  assert_choice_type(types::abort_tx, type_, "Value");
  return c.get<abort_tx_c>();
}
const uint64_t& positioning_deactivation_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_deactivation_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const abort_tx_c& positioning_deactivation_ies_o::value_c::abort_tx() const
{
  assert_choice_type(types::abort_tx, type_, "Value");
  return c.get<abort_tx_c>();
}
void positioning_deactivation_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::abort_tx:
      j.write_fieldname("AbortTransmission");
      c.get<abort_tx_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_deactivation_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_deactivation_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::abort_tx:
      HANDLE_CODE(c.get<abort_tx_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_deactivation_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_deactivation_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::abort_tx:
      HANDLE_CODE(c.get<abort_tx_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_deactivation_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningInformationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_info_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool positioning_info_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_info_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_info_fail_ies_o::value_c positioning_info_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_info_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_info_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void positioning_info_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_fail_ies_o::value_c");
  }
}
positioning_info_fail_ies_o::value_c::value_c(const positioning_info_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_fail_ies_o::value_c");
  }
}
positioning_info_fail_ies_o::value_c&
positioning_info_fail_ies_o::value_c::operator=(const positioning_info_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_info_fail_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_info_fail_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& positioning_info_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& positioning_info_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& positioning_info_fail_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_info_fail_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& positioning_info_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& positioning_info_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void positioning_info_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_info_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningInformationRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_info_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 391, 575, 689};
  return map_enum_number(names, 5, idx, "id");
}
bool positioning_info_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 391, 575, 689};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_info_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 391:
      return crit_e::ignore;
    case 575:
      return crit_e::ignore;
    case 689:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_info_request_ies_o::value_c positioning_info_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 391:
      ret.set(value_c::types::requested_srs_tx_characteristics);
      break;
    case 575:
      ret.set(value_c::types::ue_report_info);
      break;
    case 689:
      ret.set(value_c::types::srs_pos_rrc_inactive_query_ind);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_info_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 391:
      return presence_e::optional;
    case 575:
      return presence_e::optional;
    case 689:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_info_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::requested_srs_tx_characteristics:
      c.destroy<requested_srs_tx_characteristics_s>();
      break;
    case types::ue_report_info:
      c.destroy<ue_report_info_s>();
      break;
    default:
      break;
  }
}
void positioning_info_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::requested_srs_tx_characteristics:
      c.init<requested_srs_tx_characteristics_s>();
      break;
    case types::ue_report_info:
      c.init<ue_report_info_s>();
      break;
    case types::srs_pos_rrc_inactive_query_ind:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_request_ies_o::value_c");
  }
}
positioning_info_request_ies_o::value_c::value_c(const positioning_info_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::requested_srs_tx_characteristics:
      c.init(other.c.get<requested_srs_tx_characteristics_s>());
      break;
    case types::ue_report_info:
      c.init(other.c.get<ue_report_info_s>());
      break;
    case types::srs_pos_rrc_inactive_query_ind:
      c.init(other.c.get<srs_pos_rrc_inactive_query_ind_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_request_ies_o::value_c");
  }
}
positioning_info_request_ies_o::value_c&
positioning_info_request_ies_o::value_c::operator=(const positioning_info_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::requested_srs_tx_characteristics:
      c.set(other.c.get<requested_srs_tx_characteristics_s>());
      break;
    case types::ue_report_info:
      c.set(other.c.get<ue_report_info_s>());
      break;
    case types::srs_pos_rrc_inactive_query_ind:
      c.set(other.c.get<srs_pos_rrc_inactive_query_ind_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_info_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_info_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
requested_srs_tx_characteristics_s& positioning_info_request_ies_o::value_c::requested_srs_tx_characteristics()
{
  assert_choice_type(types::requested_srs_tx_characteristics, type_, "Value");
  return c.get<requested_srs_tx_characteristics_s>();
}
ue_report_info_s& positioning_info_request_ies_o::value_c::ue_report_info()
{
  assert_choice_type(types::ue_report_info, type_, "Value");
  return c.get<ue_report_info_s>();
}
srs_pos_rrc_inactive_query_ind_e& positioning_info_request_ies_o::value_c::srs_pos_rrc_inactive_query_ind()
{
  assert_choice_type(types::srs_pos_rrc_inactive_query_ind, type_, "Value");
  return c.get<srs_pos_rrc_inactive_query_ind_e>();
}
const uint64_t& positioning_info_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_info_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const requested_srs_tx_characteristics_s&
positioning_info_request_ies_o::value_c::requested_srs_tx_characteristics() const
{
  assert_choice_type(types::requested_srs_tx_characteristics, type_, "Value");
  return c.get<requested_srs_tx_characteristics_s>();
}
const ue_report_info_s& positioning_info_request_ies_o::value_c::ue_report_info() const
{
  assert_choice_type(types::ue_report_info, type_, "Value");
  return c.get<ue_report_info_s>();
}
const srs_pos_rrc_inactive_query_ind_e& positioning_info_request_ies_o::value_c::srs_pos_rrc_inactive_query_ind() const
{
  assert_choice_type(types::srs_pos_rrc_inactive_query_ind, type_, "Value");
  return c.get<srs_pos_rrc_inactive_query_ind_e>();
}
void positioning_info_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::requested_srs_tx_characteristics:
      j.write_fieldname("RequestedSRSTransmissionCharacteristics");
      c.get<requested_srs_tx_characteristics_s>().to_json(j);
      break;
    case types::ue_report_info:
      j.write_fieldname("UEReportingInformation");
      c.get<ue_report_info_s>().to_json(j);
      break;
    case types::srs_pos_rrc_inactive_query_ind:
      j.write_str("SRSPosRRCInactiveQueryIndication", "true");
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_info_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::requested_srs_tx_characteristics:
      HANDLE_CODE(c.get<requested_srs_tx_characteristics_s>().pack(bref));
      break;
    case types::ue_report_info:
      HANDLE_CODE(c.get<ue_report_info_s>().pack(bref));
      break;
    case types::srs_pos_rrc_inactive_query_ind:
      HANDLE_CODE(c.get<srs_pos_rrc_inactive_query_ind_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::requested_srs_tx_characteristics:
      HANDLE_CODE(c.get<requested_srs_tx_characteristics_s>().unpack(bref));
      break;
    case types::ue_report_info:
      HANDLE_CODE(c.get<ue_report_info_s>().unpack(bref));
      break;
    case types::srs_pos_rrc_inactive_query_ind:
      HANDLE_CODE(c.get<srs_pos_rrc_inactive_query_ind_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningInformationResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_info_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 407, 419, 7, 674};
  return map_enum_number(names, 6, idx, "id");
}
bool positioning_info_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 407, 419, 7, 674};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_info_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 407:
      return crit_e::ignore;
    case 419:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    case 674:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_info_resp_ies_o::value_c positioning_info_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 407:
      ret.set(value_c::types::srs_cfg);
      break;
    case 419:
      ret.set(value_c::types::sfn_initisation_time);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 674:
      ret.set(value_c::types::srs_pos_rrc_inactive_cfg);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_info_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 407:
      return presence_e::optional;
    case 419:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 674:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_info_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::srs_cfg:
      c.destroy<srs_cfg_s>();
      break;
    case types::sfn_initisation_time:
      c.destroy<fixed_bitstring<64, false, true>>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::srs_pos_rrc_inactive_cfg:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void positioning_info_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::srs_cfg:
      c.init<srs_cfg_s>();
      break;
    case types::sfn_initisation_time:
      c.init<fixed_bitstring<64, false, true>>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::srs_pos_rrc_inactive_cfg:
      c.init<unbounded_octstring<true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_resp_ies_o::value_c");
  }
}
positioning_info_resp_ies_o::value_c::value_c(const positioning_info_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::srs_cfg:
      c.init(other.c.get<srs_cfg_s>());
      break;
    case types::sfn_initisation_time:
      c.init(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::srs_pos_rrc_inactive_cfg:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_resp_ies_o::value_c");
  }
}
positioning_info_resp_ies_o::value_c&
positioning_info_resp_ies_o::value_c::operator=(const positioning_info_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::srs_cfg:
      c.set(other.c.get<srs_cfg_s>());
      break;
    case types::sfn_initisation_time:
      c.set(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::srs_pos_rrc_inactive_cfg:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_info_resp_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_info_resp_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
srs_cfg_s& positioning_info_resp_ies_o::value_c::srs_cfg()
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
fixed_bitstring<64, false, true>& positioning_info_resp_ies_o::value_c::sfn_initisation_time()
{
  assert_choice_type(types::sfn_initisation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
crit_diagnostics_s& positioning_info_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
unbounded_octstring<true>& positioning_info_resp_ies_o::value_c::srs_pos_rrc_inactive_cfg()
{
  assert_choice_type(types::srs_pos_rrc_inactive_cfg, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const uint64_t& positioning_info_resp_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_info_resp_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const srs_cfg_s& positioning_info_resp_ies_o::value_c::srs_cfg() const
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
const fixed_bitstring<64, false, true>& positioning_info_resp_ies_o::value_c::sfn_initisation_time() const
{
  assert_choice_type(types::sfn_initisation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
const crit_diagnostics_s& positioning_info_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const unbounded_octstring<true>& positioning_info_resp_ies_o::value_c::srs_pos_rrc_inactive_cfg() const
{
  assert_choice_type(types::srs_pos_rrc_inactive_cfg, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
void positioning_info_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::srs_cfg:
      j.write_fieldname("SRSConfig");
      c.get<srs_cfg_s>().to_json(j);
      break;
    case types::sfn_initisation_time:
      j.write_str("BIT STRING", c.get<fixed_bitstring<64, false, true>>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::srs_pos_rrc_inactive_cfg:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_info_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().pack(bref));
      break;
    case types::sfn_initisation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().pack(bref)));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::srs_pos_rrc_inactive_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().unpack(bref));
      break;
    case types::sfn_initisation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().unpack(bref)));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::srs_pos_rrc_inactive_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningInformationUpdateIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_info_upd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 407, 419};
  return map_enum_number(names, 4, idx, "id");
}
bool positioning_info_upd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 407, 419};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_info_upd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 407:
      return crit_e::ignore;
    case 419:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_info_upd_ies_o::value_c positioning_info_upd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 407:
      ret.set(value_c::types::srs_cfg);
      break;
    case 419:
      ret.set(value_c::types::sfn_initisation_time);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_info_upd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 407:
      return presence_e::optional;
    case 419:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_info_upd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::srs_cfg:
      c.destroy<srs_cfg_s>();
      break;
    case types::sfn_initisation_time:
      c.destroy<fixed_bitstring<64, false, true>>();
      break;
    default:
      break;
  }
}
void positioning_info_upd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::srs_cfg:
      c.init<srs_cfg_s>();
      break;
    case types::sfn_initisation_time:
      c.init<fixed_bitstring<64, false, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_upd_ies_o::value_c");
  }
}
positioning_info_upd_ies_o::value_c::value_c(const positioning_info_upd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::srs_cfg:
      c.init(other.c.get<srs_cfg_s>());
      break;
    case types::sfn_initisation_time:
      c.init(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_upd_ies_o::value_c");
  }
}
positioning_info_upd_ies_o::value_c&
positioning_info_upd_ies_o::value_c::operator=(const positioning_info_upd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::srs_cfg:
      c.set(other.c.get<srs_cfg_s>());
      break;
    case types::sfn_initisation_time:
      c.set(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_upd_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_info_upd_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_info_upd_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
srs_cfg_s& positioning_info_upd_ies_o::value_c::srs_cfg()
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
fixed_bitstring<64, false, true>& positioning_info_upd_ies_o::value_c::sfn_initisation_time()
{
  assert_choice_type(types::sfn_initisation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
const uint64_t& positioning_info_upd_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_info_upd_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const srs_cfg_s& positioning_info_upd_ies_o::value_c::srs_cfg() const
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
const fixed_bitstring<64, false, true>& positioning_info_upd_ies_o::value_c::sfn_initisation_time() const
{
  assert_choice_type(types::sfn_initisation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
void positioning_info_upd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::srs_cfg:
      j.write_fieldname("SRSConfig");
      c.get<srs_cfg_s>().to_json(j);
      break;
    case types::sfn_initisation_time:
      j.write_str("BIT STRING", c.get<fixed_bitstring<64, false, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_upd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_info_upd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().pack(bref));
      break;
    case types::sfn_initisation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_upd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_upd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().unpack(bref));
      break;
    case types::sfn_initisation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_upd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementAbortIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_abort_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411};
  return map_enum_number(names, 3, idx, "id");
}
bool positioning_meas_abort_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_abort_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_abort_ies_o::value_c positioning_meas_abort_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_abort_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_abort_ies_o::value_c::destroy_() {}
void positioning_meas_abort_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
positioning_meas_abort_ies_o::value_c::value_c(const positioning_meas_abort_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_abort_ies_o::value_c");
  }
}
positioning_meas_abort_ies_o::value_c&
positioning_meas_abort_ies_o::value_c::operator=(const positioning_meas_abort_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_abort_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_abort_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_abort_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_abort_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint16_t& positioning_meas_abort_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_abort_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_abort_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
void positioning_meas_abort_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_abort_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_abort_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_abort_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_abort_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_abort_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411, 0, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool positioning_meas_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_fail_ies_o::value_c positioning_meas_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void positioning_meas_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::lmf_meas_id:
      break;
    case types::ran_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ies_o::value_c");
  }
}
positioning_meas_fail_ies_o::value_c::value_c(const positioning_meas_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ies_o::value_c");
  }
}
positioning_meas_fail_ies_o::value_c&
positioning_meas_fail_ies_o::value_c::operator=(const positioning_meas_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_fail_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_fail_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
cause_c& positioning_meas_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& positioning_meas_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& positioning_meas_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_fail_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_fail_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const cause_c& positioning_meas_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& positioning_meas_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void positioning_meas_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementFailureIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_fail_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411, 0};
  return map_enum_number(names, 4, idx, "id");
}
bool positioning_meas_fail_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_fail_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_fail_ind_ies_o::value_c positioning_meas_fail_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_fail_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_fail_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void positioning_meas_fail_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::lmf_meas_id:
      break;
    case types::ran_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ind_ies_o::value_c");
  }
}
positioning_meas_fail_ind_ies_o::value_c::value_c(const positioning_meas_fail_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ind_ies_o::value_c");
  }
}
positioning_meas_fail_ind_ies_o::value_c&
positioning_meas_fail_ind_ies_o::value_c::operator=(const positioning_meas_fail_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_fail_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_fail_ind_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_fail_ind_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
cause_c& positioning_meas_fail_ind_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint16_t& positioning_meas_fail_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_fail_ind_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_fail_ind_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const cause_c& positioning_meas_fail_ind_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void positioning_meas_fail_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_fail_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_fail_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementReportIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_report_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411, 397};
  return map_enum_number(names, 4, idx, "id");
}
bool positioning_meas_report_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411, 397};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_report_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    case 397:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_report_ies_o::value_c positioning_meas_report_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    case 397:
      ret.set(value_c::types::pos_meas_result_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_report_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    case 397:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_report_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pos_meas_result_list:
      c.destroy<pos_meas_result_list_l>();
      break;
    default:
      break;
  }
}
void positioning_meas_report_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::lmf_meas_id:
      break;
    case types::ran_meas_id:
      break;
    case types::pos_meas_result_list:
      c.init<pos_meas_result_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_report_ies_o::value_c");
  }
}
positioning_meas_report_ies_o::value_c::value_c(const positioning_meas_report_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::pos_meas_result_list:
      c.init(other.c.get<pos_meas_result_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_report_ies_o::value_c");
  }
}
positioning_meas_report_ies_o::value_c&
positioning_meas_report_ies_o::value_c::operator=(const positioning_meas_report_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::pos_meas_result_list:
      c.set(other.c.get<pos_meas_result_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_report_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_report_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_report_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_report_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
pos_meas_result_list_l& positioning_meas_report_ies_o::value_c::pos_meas_result_list()
{
  assert_choice_type(types::pos_meas_result_list, type_, "Value");
  return c.get<pos_meas_result_list_l>();
}
const uint16_t& positioning_meas_report_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_report_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_report_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const pos_meas_result_list_l& positioning_meas_report_ies_o::value_c::pos_meas_result_list() const
{
  assert_choice_type(types::pos_meas_result_list, type_, "Value");
  return c.get<pos_meas_result_list_l>();
}
void positioning_meas_report_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::pos_meas_result_list:
      j.start_array("PosMeasurementResultList");
      for (const auto& e1 : c.get<pos_meas_result_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_report_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_report_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::pos_meas_result_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pos_meas_result_list_l>(), 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_report_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_report_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::pos_meas_result_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pos_meas_result_list_l>(), bref, 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_report_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411, 422, 408, 409, 396, 419, 407, 423, 420, 421, 438, 555, 574, 573, 634};
  return map_enum_number(names, 17, idx, "id");
}
bool positioning_meas_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411, 422, 408, 409, 396, 419, 407, 423, 420, 421, 438, 555, 574, 573, 634};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    case 422:
      return crit_e::reject;
    case 408:
      return crit_e::reject;
    case 409:
      return crit_e::reject;
    case 396:
      return crit_e::reject;
    case 419:
      return crit_e::ignore;
    case 407:
      return crit_e::ignore;
    case 423:
      return crit_e::ignore;
    case 420:
      return crit_e::ignore;
    case 421:
      return crit_e::ignore;
    case 438:
      return crit_e::reject;
    case 555:
      return crit_e::ignore;
    case 574:
      return crit_e::ignore;
    case 573:
      return crit_e::ignore;
    case 634:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_request_ies_o::value_c positioning_meas_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    case 422:
      ret.set(value_c::types::trp_meas_request_list);
      break;
    case 408:
      ret.set(value_c::types::pos_report_characteristics);
      break;
    case 409:
      ret.set(value_c::types::pos_meas_periodicity);
      break;
    case 396:
      ret.set(value_c::types::pos_meas_quantities);
      break;
    case 419:
      ret.set(value_c::types::sfn_initisation_time);
      break;
    case 407:
      ret.set(value_c::types::srs_cfg);
      break;
    case 423:
      ret.set(value_c::types::meas_beam_info_request);
      break;
    case 420:
      ret.set(value_c::types::sys_frame_num);
      break;
    case 421:
      ret.set(value_c::types::slot_num);
      break;
    case 438:
      ret.set(value_c::types::pos_meas_periodicity_extended);
      break;
    case 555:
      ret.set(value_c::types::resp_time);
      break;
    case 574:
      ret.set(value_c::types::meas_characteristics_request_ind);
      break;
    case 573:
      ret.set(value_c::types::meas_time_occasion);
      break;
    case 634:
      ret.set(value_c::types::pos_meas_amount);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    case 422:
      return presence_e::mandatory;
    case 408:
      return presence_e::mandatory;
    case 409:
      return presence_e::conditional;
    case 396:
      return presence_e::mandatory;
    case 419:
      return presence_e::optional;
    case 407:
      return presence_e::optional;
    case 423:
      return presence_e::optional;
    case 420:
      return presence_e::optional;
    case 421:
      return presence_e::optional;
    case 438:
      return presence_e::conditional;
    case 555:
      return presence_e::optional;
    case 574:
      return presence_e::optional;
    case 573:
      return presence_e::optional;
    case 634:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trp_meas_request_list:
      c.destroy<trp_meas_request_list_l>();
      break;
    case types::pos_meas_quantities:
      c.destroy<pos_meas_quantities_l>();
      break;
    case types::sfn_initisation_time:
      c.destroy<fixed_bitstring<64, false, true>>();
      break;
    case types::srs_cfg:
      c.destroy<srs_cfg_s>();
      break;
    case types::resp_time:
      c.destroy<resp_time_s>();
      break;
    case types::meas_characteristics_request_ind:
      c.destroy<fixed_bitstring<16, false, true>>();
      break;
    default:
      break;
  }
}
void positioning_meas_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::lmf_meas_id:
      break;
    case types::ran_meas_id:
      break;
    case types::trp_meas_request_list:
      c.init<trp_meas_request_list_l>();
      break;
    case types::pos_report_characteristics:
      break;
    case types::pos_meas_periodicity:
      break;
    case types::pos_meas_quantities:
      c.init<pos_meas_quantities_l>();
      break;
    case types::sfn_initisation_time:
      c.init<fixed_bitstring<64, false, true>>();
      break;
    case types::srs_cfg:
      c.init<srs_cfg_s>();
      break;
    case types::meas_beam_info_request:
      break;
    case types::sys_frame_num:
      break;
    case types::slot_num:
      break;
    case types::pos_meas_periodicity_extended:
      break;
    case types::resp_time:
      c.init<resp_time_s>();
      break;
    case types::meas_characteristics_request_ind:
      c.init<fixed_bitstring<16, false, true>>();
      break;
    case types::meas_time_occasion:
      break;
    case types::pos_meas_amount:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_request_ies_o::value_c");
  }
}
positioning_meas_request_ies_o::value_c::value_c(const positioning_meas_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::trp_meas_request_list:
      c.init(other.c.get<trp_meas_request_list_l>());
      break;
    case types::pos_report_characteristics:
      c.init(other.c.get<pos_report_characteristics_e>());
      break;
    case types::pos_meas_periodicity:
      c.init(other.c.get<meas_periodicity_e>());
      break;
    case types::pos_meas_quantities:
      c.init(other.c.get<pos_meas_quantities_l>());
      break;
    case types::sfn_initisation_time:
      c.init(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::srs_cfg:
      c.init(other.c.get<srs_cfg_s>());
      break;
    case types::meas_beam_info_request:
      c.init(other.c.get<meas_beam_info_request_e>());
      break;
    case types::sys_frame_num:
      c.init(other.c.get<uint16_t>());
      break;
    case types::slot_num:
      c.init(other.c.get<uint8_t>());
      break;
    case types::pos_meas_periodicity_extended:
      c.init(other.c.get<meas_periodicity_extended_e>());
      break;
    case types::resp_time:
      c.init(other.c.get<resp_time_s>());
      break;
    case types::meas_characteristics_request_ind:
      c.init(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::meas_time_occasion:
      c.init(other.c.get<meas_time_occasion_e>());
      break;
    case types::pos_meas_amount:
      c.init(other.c.get<pos_meas_amount_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_request_ies_o::value_c");
  }
}
positioning_meas_request_ies_o::value_c&
positioning_meas_request_ies_o::value_c::operator=(const positioning_meas_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::trp_meas_request_list:
      c.set(other.c.get<trp_meas_request_list_l>());
      break;
    case types::pos_report_characteristics:
      c.set(other.c.get<pos_report_characteristics_e>());
      break;
    case types::pos_meas_periodicity:
      c.set(other.c.get<meas_periodicity_e>());
      break;
    case types::pos_meas_quantities:
      c.set(other.c.get<pos_meas_quantities_l>());
      break;
    case types::sfn_initisation_time:
      c.set(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::srs_cfg:
      c.set(other.c.get<srs_cfg_s>());
      break;
    case types::meas_beam_info_request:
      c.set(other.c.get<meas_beam_info_request_e>());
      break;
    case types::sys_frame_num:
      c.set(other.c.get<uint16_t>());
      break;
    case types::slot_num:
      c.set(other.c.get<uint8_t>());
      break;
    case types::pos_meas_periodicity_extended:
      c.set(other.c.get<meas_periodicity_extended_e>());
      break;
    case types::resp_time:
      c.set(other.c.get<resp_time_s>());
      break;
    case types::meas_characteristics_request_ind:
      c.set(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::meas_time_occasion:
      c.set(other.c.get<meas_time_occasion_e>());
      break;
    case types::pos_meas_amount:
      c.set(other.c.get<pos_meas_amount_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_request_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_request_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
trp_meas_request_list_l& positioning_meas_request_ies_o::value_c::trp_meas_request_list()
{
  assert_choice_type(types::trp_meas_request_list, type_, "Value");
  return c.get<trp_meas_request_list_l>();
}
pos_report_characteristics_e& positioning_meas_request_ies_o::value_c::pos_report_characteristics()
{
  assert_choice_type(types::pos_report_characteristics, type_, "Value");
  return c.get<pos_report_characteristics_e>();
}
meas_periodicity_e& positioning_meas_request_ies_o::value_c::pos_meas_periodicity()
{
  assert_choice_type(types::pos_meas_periodicity, type_, "Value");
  return c.get<meas_periodicity_e>();
}
pos_meas_quantities_l& positioning_meas_request_ies_o::value_c::pos_meas_quantities()
{
  assert_choice_type(types::pos_meas_quantities, type_, "Value");
  return c.get<pos_meas_quantities_l>();
}
fixed_bitstring<64, false, true>& positioning_meas_request_ies_o::value_c::sfn_initisation_time()
{
  assert_choice_type(types::sfn_initisation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
srs_cfg_s& positioning_meas_request_ies_o::value_c::srs_cfg()
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
meas_beam_info_request_e& positioning_meas_request_ies_o::value_c::meas_beam_info_request()
{
  assert_choice_type(types::meas_beam_info_request, type_, "Value");
  return c.get<meas_beam_info_request_e>();
}
uint16_t& positioning_meas_request_ies_o::value_c::sys_frame_num()
{
  assert_choice_type(types::sys_frame_num, type_, "Value");
  return c.get<uint16_t>();
}
uint8_t& positioning_meas_request_ies_o::value_c::slot_num()
{
  assert_choice_type(types::slot_num, type_, "Value");
  return c.get<uint8_t>();
}
meas_periodicity_extended_e& positioning_meas_request_ies_o::value_c::pos_meas_periodicity_extended()
{
  assert_choice_type(types::pos_meas_periodicity_extended, type_, "Value");
  return c.get<meas_periodicity_extended_e>();
}
resp_time_s& positioning_meas_request_ies_o::value_c::resp_time()
{
  assert_choice_type(types::resp_time, type_, "Value");
  return c.get<resp_time_s>();
}
fixed_bitstring<16, false, true>& positioning_meas_request_ies_o::value_c::meas_characteristics_request_ind()
{
  assert_choice_type(types::meas_characteristics_request_ind, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
meas_time_occasion_e& positioning_meas_request_ies_o::value_c::meas_time_occasion()
{
  assert_choice_type(types::meas_time_occasion, type_, "Value");
  return c.get<meas_time_occasion_e>();
}
pos_meas_amount_e& positioning_meas_request_ies_o::value_c::pos_meas_amount()
{
  assert_choice_type(types::pos_meas_amount, type_, "Value");
  return c.get<pos_meas_amount_e>();
}
const uint16_t& positioning_meas_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_request_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_request_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const trp_meas_request_list_l& positioning_meas_request_ies_o::value_c::trp_meas_request_list() const
{
  assert_choice_type(types::trp_meas_request_list, type_, "Value");
  return c.get<trp_meas_request_list_l>();
}
const pos_report_characteristics_e& positioning_meas_request_ies_o::value_c::pos_report_characteristics() const
{
  assert_choice_type(types::pos_report_characteristics, type_, "Value");
  return c.get<pos_report_characteristics_e>();
}
const meas_periodicity_e& positioning_meas_request_ies_o::value_c::pos_meas_periodicity() const
{
  assert_choice_type(types::pos_meas_periodicity, type_, "Value");
  return c.get<meas_periodicity_e>();
}
const pos_meas_quantities_l& positioning_meas_request_ies_o::value_c::pos_meas_quantities() const
{
  assert_choice_type(types::pos_meas_quantities, type_, "Value");
  return c.get<pos_meas_quantities_l>();
}
const fixed_bitstring<64, false, true>& positioning_meas_request_ies_o::value_c::sfn_initisation_time() const
{
  assert_choice_type(types::sfn_initisation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
const srs_cfg_s& positioning_meas_request_ies_o::value_c::srs_cfg() const
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
const meas_beam_info_request_e& positioning_meas_request_ies_o::value_c::meas_beam_info_request() const
{
  assert_choice_type(types::meas_beam_info_request, type_, "Value");
  return c.get<meas_beam_info_request_e>();
}
const uint16_t& positioning_meas_request_ies_o::value_c::sys_frame_num() const
{
  assert_choice_type(types::sys_frame_num, type_, "Value");
  return c.get<uint16_t>();
}
const uint8_t& positioning_meas_request_ies_o::value_c::slot_num() const
{
  assert_choice_type(types::slot_num, type_, "Value");
  return c.get<uint8_t>();
}
const meas_periodicity_extended_e& positioning_meas_request_ies_o::value_c::pos_meas_periodicity_extended() const
{
  assert_choice_type(types::pos_meas_periodicity_extended, type_, "Value");
  return c.get<meas_periodicity_extended_e>();
}
const resp_time_s& positioning_meas_request_ies_o::value_c::resp_time() const
{
  assert_choice_type(types::resp_time, type_, "Value");
  return c.get<resp_time_s>();
}
const fixed_bitstring<16, false, true>&
positioning_meas_request_ies_o::value_c::meas_characteristics_request_ind() const
{
  assert_choice_type(types::meas_characteristics_request_ind, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
const meas_time_occasion_e& positioning_meas_request_ies_o::value_c::meas_time_occasion() const
{
  assert_choice_type(types::meas_time_occasion, type_, "Value");
  return c.get<meas_time_occasion_e>();
}
const pos_meas_amount_e& positioning_meas_request_ies_o::value_c::pos_meas_amount() const
{
  assert_choice_type(types::pos_meas_amount, type_, "Value");
  return c.get<pos_meas_amount_e>();
}
void positioning_meas_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::trp_meas_request_list:
      j.start_array("TRP-MeasurementRequestList");
      for (const auto& e1 : c.get<trp_meas_request_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pos_report_characteristics:
      j.write_str("PosReportCharacteristics", c.get<pos_report_characteristics_e>().to_string());
      break;
    case types::pos_meas_periodicity:
      j.write_str("MeasurementPeriodicity", c.get<meas_periodicity_e>().to_string());
      break;
    case types::pos_meas_quantities:
      j.start_array("PosMeasurementQuantities");
      for (const auto& e1 : c.get<pos_meas_quantities_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sfn_initisation_time:
      j.write_str("BIT STRING", c.get<fixed_bitstring<64, false, true>>().to_string());
      break;
    case types::srs_cfg:
      j.write_fieldname("SRSConfig");
      c.get<srs_cfg_s>().to_json(j);
      break;
    case types::meas_beam_info_request:
      j.write_str("MeasurementBeamInfoRequest", "true");
      break;
    case types::sys_frame_num:
      j.write_int("INTEGER (0..1023)", c.get<uint16_t>());
      break;
    case types::slot_num:
      j.write_int("INTEGER (0..79)", c.get<uint8_t>());
      break;
    case types::pos_meas_periodicity_extended:
      j.write_str("MeasurementPeriodicityExtended", c.get<meas_periodicity_extended_e>().to_string());
      break;
    case types::resp_time:
      j.write_fieldname("ResponseTime");
      c.get<resp_time_s>().to_json(j);
      break;
    case types::meas_characteristics_request_ind:
      j.write_str("BIT STRING", c.get<fixed_bitstring<16, false, true>>().to_string());
      break;
    case types::meas_time_occasion:
      j.write_str("MeasurementTimeOccasion", c.get<meas_time_occasion_e>().to_string());
      break;
    case types::pos_meas_amount:
      j.write_str("PosMeasurementAmount", c.get<pos_meas_amount_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::trp_meas_request_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<trp_meas_request_list_l>(), 1, 64, true));
      break;
    case types::pos_report_characteristics:
      HANDLE_CODE(c.get<pos_report_characteristics_e>().pack(bref));
      break;
    case types::pos_meas_periodicity:
      HANDLE_CODE(c.get<meas_periodicity_e>().pack(bref));
      break;
    case types::pos_meas_quantities:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pos_meas_quantities_l>(), 1, 16384, true));
      break;
    case types::sfn_initisation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().pack(bref)));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().pack(bref));
      break;
    case types::meas_beam_info_request:
      HANDLE_CODE(c.get<meas_beam_info_request_e>().pack(bref));
      break;
    case types::sys_frame_num:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1023u, false, true));
      break;
    case types::slot_num:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u, false, true));
      break;
    case types::pos_meas_periodicity_extended:
      HANDLE_CODE(c.get<meas_periodicity_extended_e>().pack(bref));
      break;
    case types::resp_time:
      HANDLE_CODE(c.get<resp_time_s>().pack(bref));
      break;
    case types::meas_characteristics_request_ind:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().pack(bref)));
      break;
    case types::meas_time_occasion:
      HANDLE_CODE(c.get<meas_time_occasion_e>().pack(bref));
      break;
    case types::pos_meas_amount:
      HANDLE_CODE(c.get<pos_meas_amount_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::trp_meas_request_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<trp_meas_request_list_l>(), bref, 1, 64, true));
      break;
    case types::pos_report_characteristics:
      HANDLE_CODE(c.get<pos_report_characteristics_e>().unpack(bref));
      break;
    case types::pos_meas_periodicity:
      HANDLE_CODE(c.get<meas_periodicity_e>().unpack(bref));
      break;
    case types::pos_meas_quantities:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pos_meas_quantities_l>(), bref, 1, 16384, true));
      break;
    case types::sfn_initisation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().unpack(bref)));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().unpack(bref));
      break;
    case types::meas_beam_info_request:
      HANDLE_CODE(c.get<meas_beam_info_request_e>().unpack(bref));
      break;
    case types::sys_frame_num:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1023u, false, true));
      break;
    case types::slot_num:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u, false, true));
      break;
    case types::pos_meas_periodicity_extended:
      HANDLE_CODE(c.get<meas_periodicity_extended_e>().unpack(bref));
      break;
    case types::resp_time:
      HANDLE_CODE(c.get<resp_time_s>().unpack(bref));
      break;
    case types::meas_characteristics_request_ind:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().unpack(bref)));
      break;
    case types::meas_time_occasion:
      HANDLE_CODE(c.get<meas_time_occasion_e>().unpack(bref));
      break;
    case types::pos_meas_amount:
      HANDLE_CODE(c.get<pos_meas_amount_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411, 397, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool positioning_meas_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411, 397, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    case 397:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_resp_ies_o::value_c positioning_meas_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    case 397:
      ret.set(value_c::types::pos_meas_result_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    case 397:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pos_meas_result_list:
      c.destroy<pos_meas_result_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void positioning_meas_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::lmf_meas_id:
      break;
    case types::ran_meas_id:
      break;
    case types::pos_meas_result_list:
      c.init<pos_meas_result_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_resp_ies_o::value_c");
  }
}
positioning_meas_resp_ies_o::value_c::value_c(const positioning_meas_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::pos_meas_result_list:
      c.init(other.c.get<pos_meas_result_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_resp_ies_o::value_c");
  }
}
positioning_meas_resp_ies_o::value_c&
positioning_meas_resp_ies_o::value_c::operator=(const positioning_meas_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::pos_meas_result_list:
      c.set(other.c.get<pos_meas_result_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_resp_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_resp_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
pos_meas_result_list_l& positioning_meas_resp_ies_o::value_c::pos_meas_result_list()
{
  assert_choice_type(types::pos_meas_result_list, type_, "Value");
  return c.get<pos_meas_result_list_l>();
}
crit_diagnostics_s& positioning_meas_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& positioning_meas_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_resp_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_resp_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const pos_meas_result_list_l& positioning_meas_resp_ies_o::value_c::pos_meas_result_list() const
{
  assert_choice_type(types::pos_meas_result_list, type_, "Value");
  return c.get<pos_meas_result_list_l>();
}
const crit_diagnostics_s& positioning_meas_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void positioning_meas_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::pos_meas_result_list:
      j.start_array("PosMeasurementResultList");
      for (const auto& e1 : c.get<pos_meas_result_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::pos_meas_result_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pos_meas_result_list_l>(), 1, 64, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::pos_meas_result_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pos_meas_result_list_l>(), bref, 1, 64, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementUpdateIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_upd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411, 407, 553, 574, 573};
  return map_enum_number(names, 7, idx, "id");
}
bool positioning_meas_upd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411, 407, 553, 574, 573};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_upd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    case 407:
      return crit_e::ignore;
    case 553:
      return crit_e::reject;
    case 574:
      return crit_e::ignore;
    case 573:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_upd_ies_o::value_c positioning_meas_upd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    case 407:
      ret.set(value_c::types::srs_cfg);
      break;
    case 553:
      ret.set(value_c::types::trp_meas_upd_list);
      break;
    case 574:
      ret.set(value_c::types::meas_characteristics_request_ind);
      break;
    case 573:
      ret.set(value_c::types::meas_time_occasion);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_upd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    case 407:
      return presence_e::optional;
    case 553:
      return presence_e::optional;
    case 574:
      return presence_e::optional;
    case 573:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_upd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::srs_cfg:
      c.destroy<srs_cfg_s>();
      break;
    case types::trp_meas_upd_list:
      c.destroy<trp_meas_upd_list_l>();
      break;
    case types::meas_characteristics_request_ind:
      c.destroy<fixed_bitstring<16, false, true>>();
      break;
    default:
      break;
  }
}
void positioning_meas_upd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::lmf_meas_id:
      break;
    case types::ran_meas_id:
      break;
    case types::srs_cfg:
      c.init<srs_cfg_s>();
      break;
    case types::trp_meas_upd_list:
      c.init<trp_meas_upd_list_l>();
      break;
    case types::meas_characteristics_request_ind:
      c.init<fixed_bitstring<16, false, true>>();
      break;
    case types::meas_time_occasion:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_upd_ies_o::value_c");
  }
}
positioning_meas_upd_ies_o::value_c::value_c(const positioning_meas_upd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::srs_cfg:
      c.init(other.c.get<srs_cfg_s>());
      break;
    case types::trp_meas_upd_list:
      c.init(other.c.get<trp_meas_upd_list_l>());
      break;
    case types::meas_characteristics_request_ind:
      c.init(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::meas_time_occasion:
      c.init(other.c.get<meas_time_occasion_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_upd_ies_o::value_c");
  }
}
positioning_meas_upd_ies_o::value_c&
positioning_meas_upd_ies_o::value_c::operator=(const positioning_meas_upd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::srs_cfg:
      c.set(other.c.get<srs_cfg_s>());
      break;
    case types::trp_meas_upd_list:
      c.set(other.c.get<trp_meas_upd_list_l>());
      break;
    case types::meas_characteristics_request_ind:
      c.set(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::meas_time_occasion:
      c.set(other.c.get<meas_time_occasion_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_upd_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_upd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_upd_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_upd_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
srs_cfg_s& positioning_meas_upd_ies_o::value_c::srs_cfg()
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
trp_meas_upd_list_l& positioning_meas_upd_ies_o::value_c::trp_meas_upd_list()
{
  assert_choice_type(types::trp_meas_upd_list, type_, "Value");
  return c.get<trp_meas_upd_list_l>();
}
fixed_bitstring<16, false, true>& positioning_meas_upd_ies_o::value_c::meas_characteristics_request_ind()
{
  assert_choice_type(types::meas_characteristics_request_ind, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
meas_time_occasion_e& positioning_meas_upd_ies_o::value_c::meas_time_occasion()
{
  assert_choice_type(types::meas_time_occasion, type_, "Value");
  return c.get<meas_time_occasion_e>();
}
const uint16_t& positioning_meas_upd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_upd_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_upd_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const srs_cfg_s& positioning_meas_upd_ies_o::value_c::srs_cfg() const
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
const trp_meas_upd_list_l& positioning_meas_upd_ies_o::value_c::trp_meas_upd_list() const
{
  assert_choice_type(types::trp_meas_upd_list, type_, "Value");
  return c.get<trp_meas_upd_list_l>();
}
const fixed_bitstring<16, false, true>& positioning_meas_upd_ies_o::value_c::meas_characteristics_request_ind() const
{
  assert_choice_type(types::meas_characteristics_request_ind, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
const meas_time_occasion_e& positioning_meas_upd_ies_o::value_c::meas_time_occasion() const
{
  assert_choice_type(types::meas_time_occasion, type_, "Value");
  return c.get<meas_time_occasion_e>();
}
void positioning_meas_upd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::srs_cfg:
      j.write_fieldname("SRSConfig");
      c.get<srs_cfg_s>().to_json(j);
      break;
    case types::trp_meas_upd_list:
      j.start_array("TRP-MeasurementUpdateList");
      for (const auto& e1 : c.get<trp_meas_upd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::meas_characteristics_request_ind:
      j.write_str("BIT STRING", c.get<fixed_bitstring<16, false, true>>().to_string());
      break;
    case types::meas_time_occasion:
      j.write_str("MeasurementTimeOccasion", c.get<meas_time_occasion_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_upd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_upd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().pack(bref));
      break;
    case types::trp_meas_upd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<trp_meas_upd_list_l>(), 1, 64, true));
      break;
    case types::meas_characteristics_request_ind:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().pack(bref)));
      break;
    case types::meas_time_occasion:
      HANDLE_CODE(c.get<meas_time_occasion_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_upd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_upd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().unpack(bref));
      break;
    case types::trp_meas_upd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<trp_meas_upd_list_l>(), bref, 1, 64, true));
      break;
    case types::meas_characteristics_request_ind:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().unpack(bref)));
      break;
    case types::meas_time_occasion:
      HANDLE_CODE(c.get<meas_time_occasion_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_upd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// QoEInformationTransfer-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t qo_e_info_transfer_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 585};
  return map_enum_number(names, 3, idx, "id");
}
bool qo_e_info_transfer_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 585};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e qo_e_info_transfer_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 585:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
qo_e_info_transfer_ies_o::value_c qo_e_info_transfer_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 585:
      ret.set(value_c::types::qo_e_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e qo_e_info_transfer_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 585:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void qo_e_info_transfer_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::qo_e_info:
      c.destroy<qo_e_info_s>();
      break;
    default:
      break;
  }
}
void qo_e_info_transfer_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::qo_e_info:
      c.init<qo_e_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qo_e_info_transfer_ies_o::value_c");
  }
}
qo_e_info_transfer_ies_o::value_c::value_c(const qo_e_info_transfer_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::qo_e_info:
      c.init(other.c.get<qo_e_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qo_e_info_transfer_ies_o::value_c");
  }
}
qo_e_info_transfer_ies_o::value_c&
qo_e_info_transfer_ies_o::value_c::operator=(const qo_e_info_transfer_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::qo_e_info:
      c.set(other.c.get<qo_e_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qo_e_info_transfer_ies_o::value_c");
  }

  return *this;
}
uint64_t& qo_e_info_transfer_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& qo_e_info_transfer_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
qo_e_info_s& qo_e_info_transfer_ies_o::value_c::qo_e_info()
{
  assert_choice_type(types::qo_e_info, type_, "Value");
  return c.get<qo_e_info_s>();
}
const uint64_t& qo_e_info_transfer_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& qo_e_info_transfer_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const qo_e_info_s& qo_e_info_transfer_ies_o::value_c::qo_e_info() const
{
  assert_choice_type(types::qo_e_info, type_, "Value");
  return c.get<qo_e_info_s>();
}
void qo_e_info_transfer_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::qo_e_info:
      j.write_fieldname("QoEInformation");
      c.get<qo_e_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "qo_e_info_transfer_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE qo_e_info_transfer_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::qo_e_info:
      HANDLE_CODE(c.get<qo_e_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "qo_e_info_transfer_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE qo_e_info_transfer_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::qo_e_info:
      HANDLE_CODE(c.get<qo_e_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "qo_e_info_transfer_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// RRCDeliveryReportIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t rrc_delivery_report_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 185, 64};
  return map_enum_number(names, 4, idx, "id");
}
bool rrc_delivery_report_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 185, 64};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e rrc_delivery_report_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 185:
      return crit_e::ignore;
    case 64:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
rrc_delivery_report_ies_o::value_c rrc_delivery_report_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 185:
      ret.set(value_c::types::rrc_delivery_status);
      break;
    case 64:
      ret.set(value_c::types::srb_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e rrc_delivery_report_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 185:
      return presence_e::mandatory;
    case 64:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void rrc_delivery_report_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::rrc_delivery_status:
      c.destroy<rrc_delivery_status_s>();
      break;
    default:
      break;
  }
}
void rrc_delivery_report_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::rrc_delivery_status:
      c.init<rrc_delivery_status_s>();
      break;
    case types::srb_id:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
  }
}
rrc_delivery_report_ies_o::value_c::value_c(const rrc_delivery_report_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::rrc_delivery_status:
      c.init(other.c.get<rrc_delivery_status_s>());
      break;
    case types::srb_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
  }
}
rrc_delivery_report_ies_o::value_c&
rrc_delivery_report_ies_o::value_c::operator=(const rrc_delivery_report_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::rrc_delivery_status:
      c.set(other.c.get<rrc_delivery_status_s>());
      break;
    case types::srb_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
  }

  return *this;
}
uint64_t& rrc_delivery_report_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& rrc_delivery_report_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
rrc_delivery_status_s& rrc_delivery_report_ies_o::value_c::rrc_delivery_status()
{
  assert_choice_type(types::rrc_delivery_status, type_, "Value");
  return c.get<rrc_delivery_status_s>();
}
uint8_t& rrc_delivery_report_ies_o::value_c::srb_id()
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
const uint64_t& rrc_delivery_report_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& rrc_delivery_report_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const rrc_delivery_status_s& rrc_delivery_report_ies_o::value_c::rrc_delivery_status() const
{
  assert_choice_type(types::rrc_delivery_status, type_, "Value");
  return c.get<rrc_delivery_status_s>();
}
const uint8_t& rrc_delivery_report_ies_o::value_c::srb_id() const
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
void rrc_delivery_report_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::rrc_delivery_status:
      j.write_fieldname("RRCDeliveryStatus");
      c.get<rrc_delivery_status_s>().to_json(j);
      break;
    case types::srb_id:
      j.write_int("INTEGER (0..3,...)", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE rrc_delivery_report_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::rrc_delivery_status:
      HANDLE_CODE(c.get<rrc_delivery_status_s>().pack(bref));
      break;
    case types::srb_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_delivery_report_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::rrc_delivery_status:
      HANDLE_CODE(c.get<rrc_delivery_status_s>().unpack(bref));
      break;
    case types::srb_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ReferenceTimeInformationReportIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ref_time_info_report_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 366};
  return map_enum_number(names, 2, idx, "id");
}
bool ref_time_info_report_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 366};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ref_time_info_report_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::ignore;
    case 366:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ref_time_info_report_ies_o::value_c ref_time_info_report_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 366:
      ret.set(value_c::types::time_ref_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ref_time_info_report_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 366:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ref_time_info_report_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::time_ref_info:
      c.destroy<time_ref_info_s>();
      break;
    default:
      break;
  }
}
void ref_time_info_report_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::time_ref_info:
      c.init<time_ref_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ies_o::value_c");
  }
}
ref_time_info_report_ies_o::value_c::value_c(const ref_time_info_report_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::time_ref_info:
      c.init(other.c.get<time_ref_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ies_o::value_c");
  }
}
ref_time_info_report_ies_o::value_c&
ref_time_info_report_ies_o::value_c::operator=(const ref_time_info_report_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::time_ref_info:
      c.set(other.c.get<time_ref_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ies_o::value_c");
  }

  return *this;
}
uint16_t& ref_time_info_report_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
time_ref_info_s& ref_time_info_report_ies_o::value_c::time_ref_info()
{
  assert_choice_type(types::time_ref_info, type_, "Value");
  return c.get<time_ref_info_s>();
}
const uint16_t& ref_time_info_report_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const time_ref_info_s& ref_time_info_report_ies_o::value_c::time_ref_info() const
{
  assert_choice_type(types::time_ref_info, type_, "Value");
  return c.get<time_ref_info_s>();
}
void ref_time_info_report_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::time_ref_info:
      j.write_fieldname("TimeReferenceInformation");
      c.get<time_ref_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ref_time_info_report_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::time_ref_info:
      HANDLE_CODE(c.get<time_ref_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ref_time_info_report_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::time_ref_info:
      HANDLE_CODE(c.get<time_ref_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ReferenceTimeInformationReportingControlIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ref_time_info_report_ctrl_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 365};
  return map_enum_number(names, 2, idx, "id");
}
bool ref_time_info_report_ctrl_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 365};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ref_time_info_report_ctrl_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 365:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ref_time_info_report_ctrl_ies_o::value_c ref_time_info_report_ctrl_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 365:
      ret.set(value_c::types::report_request_type);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ref_time_info_report_ctrl_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 365:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ref_time_info_report_ctrl_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::report_request_type:
      c.destroy<report_request_type_s>();
      break;
    default:
      break;
  }
}
void ref_time_info_report_ctrl_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::report_request_type:
      c.init<report_request_type_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ctrl_ies_o::value_c");
  }
}
ref_time_info_report_ctrl_ies_o::value_c::value_c(const ref_time_info_report_ctrl_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::report_request_type:
      c.init(other.c.get<report_request_type_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ctrl_ies_o::value_c");
  }
}
ref_time_info_report_ctrl_ies_o::value_c&
ref_time_info_report_ctrl_ies_o::value_c::operator=(const ref_time_info_report_ctrl_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::report_request_type:
      c.set(other.c.get<report_request_type_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ctrl_ies_o::value_c");
  }

  return *this;
}
uint16_t& ref_time_info_report_ctrl_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
report_request_type_s& ref_time_info_report_ctrl_ies_o::value_c::report_request_type()
{
  assert_choice_type(types::report_request_type, type_, "Value");
  return c.get<report_request_type_s>();
}
const uint16_t& ref_time_info_report_ctrl_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const report_request_type_s& ref_time_info_report_ctrl_ies_o::value_c::report_request_type() const
{
  assert_choice_type(types::report_request_type, type_, "Value");
  return c.get<report_request_type_s>();
}
void ref_time_info_report_ctrl_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::report_request_type:
      j.write_fieldname("ReportingRequestType");
      c.get<report_request_type_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ctrl_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ref_time_info_report_ctrl_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::report_request_type:
      HANDLE_CODE(c.get<report_request_type_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ctrl_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ref_time_info_report_ctrl_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::report_request_type:
      HANDLE_CODE(c.get<report_request_type_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ctrl_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ResetAcknowledgeIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t reset_ack_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 81, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool reset_ack_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 81, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e reset_ack_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 81:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
reset_ack_ies_o::value_c reset_ack_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 81:
      ret.set(value_c::types::ue_associated_lc_f1_conn_list_res_ack);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e reset_ack_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 81:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void reset_ack_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::ue_associated_lc_f1_conn_list_res_ack:
      c.destroy<ue_associated_lc_f1_conn_list_res_ack_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void reset_ack_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      c.init<ue_associated_lc_f1_conn_list_res_ack_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
  }
}
reset_ack_ies_o::value_c::value_c(const reset_ack_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      c.init(other.c.get<ue_associated_lc_f1_conn_list_res_ack_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
  }
}
reset_ack_ies_o::value_c& reset_ack_ies_o::value_c::operator=(const reset_ack_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      c.set(other.c.get<ue_associated_lc_f1_conn_list_res_ack_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
  }

  return *this;
}
uint16_t& reset_ack_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
ue_associated_lc_f1_conn_list_res_ack_l& reset_ack_ies_o::value_c::ue_associated_lc_f1_conn_list_res_ack()
{
  assert_choice_type(types::ue_associated_lc_f1_conn_list_res_ack, type_, "Value");
  return c.get<ue_associated_lc_f1_conn_list_res_ack_l>();
}
crit_diagnostics_s& reset_ack_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& reset_ack_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const ue_associated_lc_f1_conn_list_res_ack_l& reset_ack_ies_o::value_c::ue_associated_lc_f1_conn_list_res_ack() const
{
  assert_choice_type(types::ue_associated_lc_f1_conn_list_res_ack, type_, "Value");
  return c.get<ue_associated_lc_f1_conn_list_res_ack_l>();
}
const crit_diagnostics_s& reset_ack_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void reset_ack_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      j.start_array("UE-associatedLogicalF1-ConnectionListResAck");
      for (const auto& e1 : c.get<ue_associated_lc_f1_conn_list_res_ack_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE reset_ack_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_associated_lc_f1_conn_list_res_ack_l>(), 1, 65536, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_ack_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_associated_lc_f1_conn_list_res_ack_l>(), bref, 1, 65536, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ResetIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t reset_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 48};
  return map_enum_number(names, 3, idx, "id");
}
bool reset_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 48};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e reset_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 48:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
reset_ies_o::value_c reset_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 48:
      ret.set(value_c::types::reset_type);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e reset_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 48:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void reset_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::reset_type:
      c.destroy<reset_type_c>();
      break;
    default:
      break;
  }
}
void reset_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::reset_type:
      c.init<reset_type_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
  }
}
reset_ies_o::value_c::value_c(const reset_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::reset_type:
      c.init(other.c.get<reset_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
  }
}
reset_ies_o::value_c& reset_ies_o::value_c::operator=(const reset_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::reset_type:
      c.set(other.c.get<reset_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
  }

  return *this;
}
uint16_t& reset_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& reset_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
reset_type_c& reset_ies_o::value_c::reset_type()
{
  assert_choice_type(types::reset_type, type_, "Value");
  return c.get<reset_type_c>();
}
const uint16_t& reset_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& reset_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const reset_type_c& reset_ies_o::value_c::reset_type() const
{
  assert_choice_type(types::reset_type, type_, "Value");
  return c.get<reset_type_c>();
}
void reset_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::reset_type:
      j.write_fieldname("ResetType");
      c.get<reset_type_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE reset_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::reset_type:
      HANDLE_CODE(c.get<reset_type_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::reset_type:
      HANDLE_CODE(c.get<reset_type_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ResourceStatusFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t res_status_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 345, 346, 0, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool res_status_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 345, 346, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e res_status_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 345:
      return crit_e::reject;
    case 346:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
res_status_fail_ies_o::value_c res_status_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 345:
      ret.set(value_c::types::gnb_cu_meas_id);
      break;
    case 346:
      ret.set(value_c::types::gnb_du_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e res_status_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 345:
      return presence_e::mandatory;
    case 346:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void res_status_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void res_status_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_meas_id:
      break;
    case types::gnb_du_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_fail_ies_o::value_c");
  }
}
res_status_fail_ies_o::value_c::value_c(const res_status_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_fail_ies_o::value_c");
  }
}
res_status_fail_ies_o::value_c& res_status_fail_ies_o::value_c::operator=(const res_status_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& res_status_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_fail_ies_o::value_c::gnb_cu_meas_id()
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_fail_ies_o::value_c::gnb_du_meas_id()
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& res_status_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& res_status_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& res_status_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_fail_ies_o::value_c::gnb_cu_meas_id() const
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_fail_ies_o::value_c::gnb_du_meas_id() const
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& res_status_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& res_status_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void res_status_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "res_status_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE res_status_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ResourceStatusRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t res_status_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 345, 346, 347, 348, 349, 352};
  return map_enum_number(names, 7, idx, "id");
}
bool res_status_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 345, 346, 347, 348, 349, 352};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e res_status_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 345:
      return crit_e::reject;
    case 346:
      return crit_e::ignore;
    case 347:
      return crit_e::ignore;
    case 348:
      return crit_e::ignore;
    case 349:
      return crit_e::ignore;
    case 352:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
res_status_request_ies_o::value_c res_status_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 345:
      ret.set(value_c::types::gnb_cu_meas_id);
      break;
    case 346:
      ret.set(value_c::types::gnb_du_meas_id);
      break;
    case 347:
      ret.set(value_c::types::regist_request);
      break;
    case 348:
      ret.set(value_c::types::report_characteristics);
      break;
    case 349:
      ret.set(value_c::types::cell_to_report_list);
      break;
    case 352:
      ret.set(value_c::types::report_periodicity);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e res_status_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 345:
      return presence_e::mandatory;
    case 346:
      return presence_e::conditional;
    case 347:
      return presence_e::mandatory;
    case 348:
      return presence_e::conditional;
    case 349:
      return presence_e::optional;
    case 352:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void res_status_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::report_characteristics:
      c.destroy<fixed_bitstring<32, false, true>>();
      break;
    case types::cell_to_report_list:
      c.destroy<cell_to_report_list_l>();
      break;
    default:
      break;
  }
}
void res_status_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_meas_id:
      break;
    case types::gnb_du_meas_id:
      break;
    case types::regist_request:
      break;
    case types::report_characteristics:
      c.init<fixed_bitstring<32, false, true>>();
      break;
    case types::cell_to_report_list:
      c.init<cell_to_report_list_l>();
      break;
    case types::report_periodicity:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_request_ies_o::value_c");
  }
}
res_status_request_ies_o::value_c::value_c(const res_status_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::regist_request:
      c.init(other.c.get<regist_request_e>());
      break;
    case types::report_characteristics:
      c.init(other.c.get<fixed_bitstring<32, false, true>>());
      break;
    case types::cell_to_report_list:
      c.init(other.c.get<cell_to_report_list_l>());
      break;
    case types::report_periodicity:
      c.init(other.c.get<report_periodicity_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_request_ies_o::value_c");
  }
}
res_status_request_ies_o::value_c&
res_status_request_ies_o::value_c::operator=(const res_status_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::regist_request:
      c.set(other.c.get<regist_request_e>());
      break;
    case types::report_characteristics:
      c.set(other.c.get<fixed_bitstring<32, false, true>>());
      break;
    case types::cell_to_report_list:
      c.set(other.c.get<cell_to_report_list_l>());
      break;
    case types::report_periodicity:
      c.set(other.c.get<report_periodicity_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& res_status_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_request_ies_o::value_c::gnb_cu_meas_id()
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_request_ies_o::value_c::gnb_du_meas_id()
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
regist_request_e& res_status_request_ies_o::value_c::regist_request()
{
  assert_choice_type(types::regist_request, type_, "Value");
  return c.get<regist_request_e>();
}
fixed_bitstring<32, false, true>& res_status_request_ies_o::value_c::report_characteristics()
{
  assert_choice_type(types::report_characteristics, type_, "Value");
  return c.get<fixed_bitstring<32, false, true>>();
}
cell_to_report_list_l& res_status_request_ies_o::value_c::cell_to_report_list()
{
  assert_choice_type(types::cell_to_report_list, type_, "Value");
  return c.get<cell_to_report_list_l>();
}
report_periodicity_e& res_status_request_ies_o::value_c::report_periodicity()
{
  assert_choice_type(types::report_periodicity, type_, "Value");
  return c.get<report_periodicity_e>();
}
const uint16_t& res_status_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_request_ies_o::value_c::gnb_cu_meas_id() const
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_request_ies_o::value_c::gnb_du_meas_id() const
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const regist_request_e& res_status_request_ies_o::value_c::regist_request() const
{
  assert_choice_type(types::regist_request, type_, "Value");
  return c.get<regist_request_e>();
}
const fixed_bitstring<32, false, true>& res_status_request_ies_o::value_c::report_characteristics() const
{
  assert_choice_type(types::report_characteristics, type_, "Value");
  return c.get<fixed_bitstring<32, false, true>>();
}
const cell_to_report_list_l& res_status_request_ies_o::value_c::cell_to_report_list() const
{
  assert_choice_type(types::cell_to_report_list, type_, "Value");
  return c.get<cell_to_report_list_l>();
}
const report_periodicity_e& res_status_request_ies_o::value_c::report_periodicity() const
{
  assert_choice_type(types::report_periodicity, type_, "Value");
  return c.get<report_periodicity_e>();
}
void res_status_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::regist_request:
      j.write_str("RegistrationRequest", c.get<regist_request_e>().to_string());
      break;
    case types::report_characteristics:
      j.write_str("BIT STRING", c.get<fixed_bitstring<32, false, true>>().to_string());
      break;
    case types::cell_to_report_list:
      j.start_array("CellToReportList");
      for (const auto& e1 : c.get<cell_to_report_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::report_periodicity:
      j.write_str("ReportingPeriodicity", c.get<report_periodicity_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "res_status_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE res_status_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::regist_request:
      HANDLE_CODE(c.get<regist_request_e>().pack(bref));
      break;
    case types::report_characteristics:
      HANDLE_CODE((c.get<fixed_bitstring<32, false, true>>().pack(bref)));
      break;
    case types::cell_to_report_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cell_to_report_list_l>(), 1, 512, true));
      break;
    case types::report_periodicity:
      HANDLE_CODE(c.get<report_periodicity_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::regist_request:
      HANDLE_CODE(c.get<regist_request_e>().unpack(bref));
      break;
    case types::report_characteristics:
      HANDLE_CODE((c.get<fixed_bitstring<32, false, true>>().unpack(bref)));
      break;
    case types::cell_to_report_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cell_to_report_list_l>(), bref, 1, 512, true));
      break;
    case types::report_periodicity:
      HANDLE_CODE(c.get<report_periodicity_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ResourceStatusResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t res_status_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 345, 346, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool res_status_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 345, 346, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e res_status_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 345:
      return crit_e::reject;
    case 346:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
res_status_resp_ies_o::value_c res_status_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 345:
      ret.set(value_c::types::gnb_cu_meas_id);
      break;
    case 346:
      ret.set(value_c::types::gnb_du_meas_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e res_status_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 345:
      return presence_e::mandatory;
    case 346:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void res_status_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void res_status_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_meas_id:
      break;
    case types::gnb_du_meas_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_resp_ies_o::value_c");
  }
}
res_status_resp_ies_o::value_c::value_c(const res_status_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_resp_ies_o::value_c");
  }
}
res_status_resp_ies_o::value_c& res_status_resp_ies_o::value_c::operator=(const res_status_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& res_status_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_resp_ies_o::value_c::gnb_cu_meas_id()
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_resp_ies_o::value_c::gnb_du_meas_id()
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
crit_diagnostics_s& res_status_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& res_status_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_resp_ies_o::value_c::gnb_cu_meas_id() const
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_resp_ies_o::value_c::gnb_du_meas_id() const
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const crit_diagnostics_s& res_status_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void res_status_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "res_status_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE res_status_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ResourceStatusUpdateIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t res_status_upd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 345, 346, 351, 353, 350};
  return map_enum_number(names, 6, idx, "id");
}
bool res_status_upd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 345, 346, 351, 353, 350};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e res_status_upd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 345:
      return crit_e::reject;
    case 346:
      return crit_e::ignore;
    case 351:
      return crit_e::ignore;
    case 353:
      return crit_e::ignore;
    case 350:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
res_status_upd_ies_o::value_c res_status_upd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 345:
      ret.set(value_c::types::gnb_cu_meas_id);
      break;
    case 346:
      ret.set(value_c::types::gnb_du_meas_id);
      break;
    case 351:
      ret.set(value_c::types::hardware_load_ind);
      break;
    case 353:
      ret.set(value_c::types::tnl_capacity_ind);
      break;
    case 350:
      ret.set(value_c::types::cell_meas_result_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e res_status_upd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 345:
      return presence_e::mandatory;
    case 346:
      return presence_e::mandatory;
    case 351:
      return presence_e::optional;
    case 353:
      return presence_e::optional;
    case 350:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void res_status_upd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::hardware_load_ind:
      c.destroy<hardware_load_ind_s>();
      break;
    case types::tnl_capacity_ind:
      c.destroy<tnl_capacity_ind_s>();
      break;
    case types::cell_meas_result_list:
      c.destroy<cell_meas_result_list_l>();
      break;
    default:
      break;
  }
}
void res_status_upd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_meas_id:
      break;
    case types::gnb_du_meas_id:
      break;
    case types::hardware_load_ind:
      c.init<hardware_load_ind_s>();
      break;
    case types::tnl_capacity_ind:
      c.init<tnl_capacity_ind_s>();
      break;
    case types::cell_meas_result_list:
      c.init<cell_meas_result_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_upd_ies_o::value_c");
  }
}
res_status_upd_ies_o::value_c::value_c(const res_status_upd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::hardware_load_ind:
      c.init(other.c.get<hardware_load_ind_s>());
      break;
    case types::tnl_capacity_ind:
      c.init(other.c.get<tnl_capacity_ind_s>());
      break;
    case types::cell_meas_result_list:
      c.init(other.c.get<cell_meas_result_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_upd_ies_o::value_c");
  }
}
res_status_upd_ies_o::value_c& res_status_upd_ies_o::value_c::operator=(const res_status_upd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::hardware_load_ind:
      c.set(other.c.get<hardware_load_ind_s>());
      break;
    case types::tnl_capacity_ind:
      c.set(other.c.get<tnl_capacity_ind_s>());
      break;
    case types::cell_meas_result_list:
      c.set(other.c.get<cell_meas_result_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_upd_ies_o::value_c");
  }

  return *this;
}
uint16_t& res_status_upd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_upd_ies_o::value_c::gnb_cu_meas_id()
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_upd_ies_o::value_c::gnb_du_meas_id()
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
hardware_load_ind_s& res_status_upd_ies_o::value_c::hardware_load_ind()
{
  assert_choice_type(types::hardware_load_ind, type_, "Value");
  return c.get<hardware_load_ind_s>();
}
tnl_capacity_ind_s& res_status_upd_ies_o::value_c::tnl_capacity_ind()
{
  assert_choice_type(types::tnl_capacity_ind, type_, "Value");
  return c.get<tnl_capacity_ind_s>();
}
cell_meas_result_list_l& res_status_upd_ies_o::value_c::cell_meas_result_list()
{
  assert_choice_type(types::cell_meas_result_list, type_, "Value");
  return c.get<cell_meas_result_list_l>();
}
const uint16_t& res_status_upd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_upd_ies_o::value_c::gnb_cu_meas_id() const
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_upd_ies_o::value_c::gnb_du_meas_id() const
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const hardware_load_ind_s& res_status_upd_ies_o::value_c::hardware_load_ind() const
{
  assert_choice_type(types::hardware_load_ind, type_, "Value");
  return c.get<hardware_load_ind_s>();
}
const tnl_capacity_ind_s& res_status_upd_ies_o::value_c::tnl_capacity_ind() const
{
  assert_choice_type(types::tnl_capacity_ind, type_, "Value");
  return c.get<tnl_capacity_ind_s>();
}
const cell_meas_result_list_l& res_status_upd_ies_o::value_c::cell_meas_result_list() const
{
  assert_choice_type(types::cell_meas_result_list, type_, "Value");
  return c.get<cell_meas_result_list_l>();
}
void res_status_upd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::hardware_load_ind:
      j.write_fieldname("HardwareLoadIndicator");
      c.get<hardware_load_ind_s>().to_json(j);
      break;
    case types::tnl_capacity_ind:
      j.write_fieldname("TNLCapacityIndicator");
      c.get<tnl_capacity_ind_s>().to_json(j);
      break;
    case types::cell_meas_result_list:
      j.start_array("CellMeasurementResultList");
      for (const auto& e1 : c.get<cell_meas_result_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "res_status_upd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE res_status_upd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::hardware_load_ind:
      HANDLE_CODE(c.get<hardware_load_ind_s>().pack(bref));
      break;
    case types::tnl_capacity_ind:
      HANDLE_CODE(c.get<tnl_capacity_ind_s>().pack(bref));
      break;
    case types::cell_meas_result_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cell_meas_result_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_upd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_upd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::hardware_load_ind:
      HANDLE_CODE(c.get<hardware_load_ind_s>().unpack(bref));
      break;
    case types::tnl_capacity_ind:
      HANDLE_CODE(c.get<tnl_capacity_ind_s>().unpack(bref));
      break;
    case types::cell_meas_result_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cell_meas_result_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_upd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// SystemInformationDeliveryCommandIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sys_info_delivery_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 111, 116, 156};
  return map_enum_number(names, 4, idx, "id");
}
bool sys_info_delivery_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 111, 116, 156};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e sys_info_delivery_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 111:
      return crit_e::reject;
    case 116:
      return crit_e::reject;
    case 156:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
sys_info_delivery_cmd_ies_o::value_c sys_info_delivery_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 111:
      ret.set(value_c::types::nr_cgi);
      break;
    case 116:
      ret.set(value_c::types::sitype_list);
      break;
    case 156:
      ret.set(value_c::types::confirmed_ue_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sys_info_delivery_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 111:
      return presence_e::mandatory;
    case 116:
      return presence_e::mandatory;
    case 156:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void sys_info_delivery_cmd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::nr_cgi:
      c.destroy<nr_cgi_s>();
      break;
    case types::sitype_list:
      c.destroy<sitype_list_l>();
      break;
    default:
      break;
  }
}
void sys_info_delivery_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::nr_cgi:
      c.init<nr_cgi_s>();
      break;
    case types::sitype_list:
      c.init<sitype_list_l>();
      break;
    case types::confirmed_ue_id:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
  }
}
sys_info_delivery_cmd_ies_o::value_c::value_c(const sys_info_delivery_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nr_cgi:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::sitype_list:
      c.init(other.c.get<sitype_list_l>());
      break;
    case types::confirmed_ue_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
  }
}
sys_info_delivery_cmd_ies_o::value_c&
sys_info_delivery_cmd_ies_o::value_c::operator=(const sys_info_delivery_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nr_cgi:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::sitype_list:
      c.set(other.c.get<sitype_list_l>());
      break;
    case types::confirmed_ue_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
  }

  return *this;
}
uint16_t& sys_info_delivery_cmd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
nr_cgi_s& sys_info_delivery_cmd_ies_o::value_c::nr_cgi()
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
sitype_list_l& sys_info_delivery_cmd_ies_o::value_c::sitype_list()
{
  assert_choice_type(types::sitype_list, type_, "Value");
  return c.get<sitype_list_l>();
}
uint64_t& sys_info_delivery_cmd_ies_o::value_c::confirmed_ue_id()
{
  assert_choice_type(types::confirmed_ue_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& sys_info_delivery_cmd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const nr_cgi_s& sys_info_delivery_cmd_ies_o::value_c::nr_cgi() const
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
const sitype_list_l& sys_info_delivery_cmd_ies_o::value_c::sitype_list() const
{
  assert_choice_type(types::sitype_list, type_, "Value");
  return c.get<sitype_list_l>();
}
const uint64_t& sys_info_delivery_cmd_ies_o::value_c::confirmed_ue_id() const
{
  assert_choice_type(types::confirmed_ue_id, type_, "Value");
  return c.get<uint64_t>();
}
void sys_info_delivery_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::nr_cgi:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    case types::sitype_list:
      j.start_array("SItype-List");
      for (const auto& e1 : c.get<sitype_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::confirmed_ue_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE sys_info_delivery_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    case types::sitype_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sitype_list_l>(), 1, 32, true));
      break;
    case types::confirmed_ue_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sys_info_delivery_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    case types::sitype_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sitype_list_l>(), bref, 1, 32, true));
      break;
    case types::confirmed_ue_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// TRPInformationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t trp_info_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool trp_info_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e trp_info_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
trp_info_fail_ies_o::value_c trp_info_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e trp_info_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void trp_info_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void trp_info_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_fail_ies_o::value_c");
  }
}
trp_info_fail_ies_o::value_c::value_c(const trp_info_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_fail_ies_o::value_c");
  }
}
trp_info_fail_ies_o::value_c& trp_info_fail_ies_o::value_c::operator=(const trp_info_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& trp_info_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& trp_info_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& trp_info_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& trp_info_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& trp_info_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& trp_info_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void trp_info_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE trp_info_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// TRPInformationRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t trp_info_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 410, 398};
  return map_enum_number(names, 3, idx, "id");
}
bool trp_info_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 410, 398};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e trp_info_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 410:
      return crit_e::ignore;
    case 398:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
trp_info_request_ies_o::value_c trp_info_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 410:
      ret.set(value_c::types::trp_list);
      break;
    case 398:
      ret.set(value_c::types::trp_info_type_list_trp_req);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e trp_info_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 410:
      return presence_e::optional;
    case 398:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void trp_info_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trp_list:
      c.destroy<trp_list_l>();
      break;
    case types::trp_info_type_list_trp_req:
      c.destroy<trp_info_type_list_trp_req_l>();
      break;
    default:
      break;
  }
}
void trp_info_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::trp_list:
      c.init<trp_list_l>();
      break;
    case types::trp_info_type_list_trp_req:
      c.init<trp_info_type_list_trp_req_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_request_ies_o::value_c");
  }
}
trp_info_request_ies_o::value_c::value_c(const trp_info_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::trp_list:
      c.init(other.c.get<trp_list_l>());
      break;
    case types::trp_info_type_list_trp_req:
      c.init(other.c.get<trp_info_type_list_trp_req_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_request_ies_o::value_c");
  }
}
trp_info_request_ies_o::value_c&
trp_info_request_ies_o::value_c::operator=(const trp_info_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::trp_list:
      c.set(other.c.get<trp_list_l>());
      break;
    case types::trp_info_type_list_trp_req:
      c.set(other.c.get<trp_info_type_list_trp_req_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& trp_info_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
trp_list_l& trp_info_request_ies_o::value_c::trp_list()
{
  assert_choice_type(types::trp_list, type_, "Value");
  return c.get<trp_list_l>();
}
trp_info_type_list_trp_req_l& trp_info_request_ies_o::value_c::trp_info_type_list_trp_req()
{
  assert_choice_type(types::trp_info_type_list_trp_req, type_, "Value");
  return c.get<trp_info_type_list_trp_req_l>();
}
const uint16_t& trp_info_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const trp_list_l& trp_info_request_ies_o::value_c::trp_list() const
{
  assert_choice_type(types::trp_list, type_, "Value");
  return c.get<trp_list_l>();
}
const trp_info_type_list_trp_req_l& trp_info_request_ies_o::value_c::trp_info_type_list_trp_req() const
{
  assert_choice_type(types::trp_info_type_list_trp_req, type_, "Value");
  return c.get<trp_info_type_list_trp_req_l>();
}
void trp_info_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::trp_list:
      j.start_array("TRPList");
      for (const auto& e1 : c.get<trp_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::trp_info_type_list_trp_req:
      j.start_array("TRPInformationTypeListTRPReq");
      for (const auto& e1 : c.get<trp_info_type_list_trp_req_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE trp_info_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::trp_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<trp_list_l>(), 1, 65535, true));
      break;
    case types::trp_info_type_list_trp_req:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<trp_info_type_list_trp_req_l>(), 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::trp_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<trp_list_l>(), bref, 1, 65535, true));
      break;
    case types::trp_info_type_list_trp_req:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<trp_info_type_list_trp_req_l>(), bref, 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// TRPInformationResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t trp_info_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 400, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool trp_info_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 400, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e trp_info_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 400:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
trp_info_resp_ies_o::value_c trp_info_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 400:
      ret.set(value_c::types::trp_info_list_trp_resp);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e trp_info_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 400:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void trp_info_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trp_info_list_trp_resp:
      c.destroy<trp_info_list_trp_resp_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void trp_info_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::trp_info_list_trp_resp:
      c.init<trp_info_list_trp_resp_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_resp_ies_o::value_c");
  }
}
trp_info_resp_ies_o::value_c::value_c(const trp_info_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::trp_info_list_trp_resp:
      c.init(other.c.get<trp_info_list_trp_resp_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_resp_ies_o::value_c");
  }
}
trp_info_resp_ies_o::value_c& trp_info_resp_ies_o::value_c::operator=(const trp_info_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::trp_info_list_trp_resp:
      c.set(other.c.get<trp_info_list_trp_resp_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& trp_info_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
trp_info_list_trp_resp_l& trp_info_resp_ies_o::value_c::trp_info_list_trp_resp()
{
  assert_choice_type(types::trp_info_list_trp_resp, type_, "Value");
  return c.get<trp_info_list_trp_resp_l>();
}
crit_diagnostics_s& trp_info_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& trp_info_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const trp_info_list_trp_resp_l& trp_info_resp_ies_o::value_c::trp_info_list_trp_resp() const
{
  assert_choice_type(types::trp_info_list_trp_resp, type_, "Value");
  return c.get<trp_info_list_trp_resp_l>();
}
const crit_diagnostics_s& trp_info_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void trp_info_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::trp_info_list_trp_resp:
      j.start_array("TRPInformationListTRPResp");
      for (const auto& e1 : c.get<trp_info_list_trp_resp_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE trp_info_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::trp_info_list_trp_resp:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<trp_info_list_trp_resp_l>(), 1, 65535, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::trp_info_list_trp_resp:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<trp_info_list_trp_resp_l>(), bref, 1, 65535, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// TraceStartIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t trace_start_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 242};
  return map_enum_number(names, 3, idx, "id");
}
bool trace_start_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 242};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e trace_start_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 242:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
trace_start_ies_o::value_c trace_start_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 242:
      ret.set(value_c::types::trace_activation);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e trace_start_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 242:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void trace_start_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trace_activation:
      c.destroy<trace_activation_s>();
      break;
    default:
      break;
  }
}
void trace_start_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::trace_activation:
      c.init<trace_activation_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trace_start_ies_o::value_c");
  }
}
trace_start_ies_o::value_c::value_c(const trace_start_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::trace_activation:
      c.init(other.c.get<trace_activation_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trace_start_ies_o::value_c");
  }
}
trace_start_ies_o::value_c& trace_start_ies_o::value_c::operator=(const trace_start_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::trace_activation:
      c.set(other.c.get<trace_activation_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trace_start_ies_o::value_c");
  }

  return *this;
}
uint64_t& trace_start_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& trace_start_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
trace_activation_s& trace_start_ies_o::value_c::trace_activation()
{
  assert_choice_type(types::trace_activation, type_, "Value");
  return c.get<trace_activation_s>();
}
const uint64_t& trace_start_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& trace_start_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const trace_activation_s& trace_start_ies_o::value_c::trace_activation() const
{
  assert_choice_type(types::trace_activation, type_, "Value");
  return c.get<trace_activation_s>();
}
void trace_start_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::trace_activation:
      j.write_fieldname("TraceActivation");
      c.get<trace_activation_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "trace_start_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE trace_start_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trace_activation:
      HANDLE_CODE(c.get<trace_activation_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "trace_start_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE trace_start_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trace_activation:
      HANDLE_CODE(c.get<trace_activation_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "trace_start_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// UEContextModificationConfirmIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_mod_confirm_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 49, 19, 50, 7, 109, 195, 337, 604, 616, 653};
  return map_enum_number(names, 12, idx, "id");
}
bool ue_context_mod_confirm_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 49, 19, 50, 7, 109, 195, 337, 604, 616, 653};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_mod_confirm_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 49:
      return crit_e::ignore;
    case 19:
      return crit_e::ignore;
    case 50:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    case 109:
      return crit_e::ignore;
    case 195:
      return crit_e::ignore;
    case 337:
      return crit_e::ignore;
    case 604:
      return crit_e::reject;
    case 616:
      return crit_e::reject;
    case 653:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_mod_confirm_ies_o::value_c ue_context_mod_confirm_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 49:
      ret.set(value_c::types::res_coordination_transfer_container);
      break;
    case 19:
      ret.set(value_c::types::drbs_modified_conf_list);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 109:
      ret.set(value_c::types::execute_dupl);
      break;
    case 195:
      ret.set(value_c::types::res_coordination_transfer_info);
      break;
    case 337:
      ret.set(value_c::types::sl_drbs_modified_conf_list);
      break;
    case 604:
      ret.set(value_c::types::uu_rlc_ch_modified_list);
      break;
    case 616:
      ret.set(value_c::types::pc5_rlc_ch_modified_list);
      break;
    case 653:
      ret.set(value_c::types::ue_multicast_m_rbs_confirmed_to_be_modified_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_mod_confirm_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 49:
      return presence_e::optional;
    case 19:
      return presence_e::optional;
    case 50:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 109:
      return presence_e::optional;
    case 195:
      return presence_e::optional;
    case 337:
      return presence_e::optional;
    case 604:
      return presence_e::optional;
    case 616:
      return presence_e::optional;
    case 653:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_mod_confirm_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::res_coordination_transfer_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::drbs_modified_conf_list:
      c.destroy<drbs_modified_conf_list_l>();
      break;
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::res_coordination_transfer_info:
      c.destroy<res_coordination_transfer_info_s>();
      break;
    case types::sl_drbs_modified_conf_list:
      c.destroy<sl_drbs_modified_conf_list_l>();
      break;
    case types::uu_rlc_ch_modified_list:
      c.destroy<uu_rlc_ch_modified_list_l>();
      break;
    case types::pc5_rlc_ch_modified_list:
      c.destroy<pc5_rlc_ch_modified_list_l>();
      break;
    case types::ue_multicast_m_rbs_confirmed_to_be_modified_list:
      c.destroy<ue_multicast_m_rbs_confirmed_to_be_modified_list_l>();
      break;
    default:
      break;
  }
}
void ue_context_mod_confirm_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::res_coordination_transfer_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::drbs_modified_conf_list:
      c.init<drbs_modified_conf_list_l>();
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::execute_dupl:
      break;
    case types::res_coordination_transfer_info:
      c.init<res_coordination_transfer_info_s>();
      break;
    case types::sl_drbs_modified_conf_list:
      c.init<sl_drbs_modified_conf_list_l>();
      break;
    case types::uu_rlc_ch_modified_list:
      c.init<uu_rlc_ch_modified_list_l>();
      break;
    case types::pc5_rlc_ch_modified_list:
      c.init<pc5_rlc_ch_modified_list_l>();
      break;
    case types::ue_multicast_m_rbs_confirmed_to_be_modified_list:
      c.init<ue_multicast_m_rbs_confirmed_to_be_modified_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_confirm_ies_o::value_c");
  }
}
ue_context_mod_confirm_ies_o::value_c::value_c(const ue_context_mod_confirm_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::drbs_modified_conf_list:
      c.init(other.c.get<drbs_modified_conf_list_l>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::execute_dupl:
      c.init(other.c.get<execute_dupl_e>());
      break;
    case types::res_coordination_transfer_info:
      c.init(other.c.get<res_coordination_transfer_info_s>());
      break;
    case types::sl_drbs_modified_conf_list:
      c.init(other.c.get<sl_drbs_modified_conf_list_l>());
      break;
    case types::uu_rlc_ch_modified_list:
      c.init(other.c.get<uu_rlc_ch_modified_list_l>());
      break;
    case types::pc5_rlc_ch_modified_list:
      c.init(other.c.get<pc5_rlc_ch_modified_list_l>());
      break;
    case types::ue_multicast_m_rbs_confirmed_to_be_modified_list:
      c.init(other.c.get<ue_multicast_m_rbs_confirmed_to_be_modified_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_confirm_ies_o::value_c");
  }
}
ue_context_mod_confirm_ies_o::value_c&
ue_context_mod_confirm_ies_o::value_c::operator=(const ue_context_mod_confirm_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::drbs_modified_conf_list:
      c.set(other.c.get<drbs_modified_conf_list_l>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::execute_dupl:
      c.set(other.c.get<execute_dupl_e>());
      break;
    case types::res_coordination_transfer_info:
      c.set(other.c.get<res_coordination_transfer_info_s>());
      break;
    case types::sl_drbs_modified_conf_list:
      c.set(other.c.get<sl_drbs_modified_conf_list_l>());
      break;
    case types::uu_rlc_ch_modified_list:
      c.set(other.c.get<uu_rlc_ch_modified_list_l>());
      break;
    case types::pc5_rlc_ch_modified_list:
      c.set(other.c.get<pc5_rlc_ch_modified_list_l>());
      break;
    case types::ue_multicast_m_rbs_confirmed_to_be_modified_list:
      c.set(other.c.get<ue_multicast_m_rbs_confirmed_to_be_modified_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_confirm_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_mod_confirm_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_mod_confirm_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
unbounded_octstring<true>& ue_context_mod_confirm_ies_o::value_c::res_coordination_transfer_container()
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
drbs_modified_conf_list_l& ue_context_mod_confirm_ies_o::value_c::drbs_modified_conf_list()
{
  assert_choice_type(types::drbs_modified_conf_list, type_, "Value");
  return c.get<drbs_modified_conf_list_l>();
}
unbounded_octstring<true>& ue_context_mod_confirm_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
crit_diagnostics_s& ue_context_mod_confirm_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
execute_dupl_e& ue_context_mod_confirm_ies_o::value_c::execute_dupl()
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
res_coordination_transfer_info_s& ue_context_mod_confirm_ies_o::value_c::res_coordination_transfer_info()
{
  assert_choice_type(types::res_coordination_transfer_info, type_, "Value");
  return c.get<res_coordination_transfer_info_s>();
}
sl_drbs_modified_conf_list_l& ue_context_mod_confirm_ies_o::value_c::sl_drbs_modified_conf_list()
{
  assert_choice_type(types::sl_drbs_modified_conf_list, type_, "Value");
  return c.get<sl_drbs_modified_conf_list_l>();
}
uu_rlc_ch_modified_list_l& ue_context_mod_confirm_ies_o::value_c::uu_rlc_ch_modified_list()
{
  assert_choice_type(types::uu_rlc_ch_modified_list, type_, "Value");
  return c.get<uu_rlc_ch_modified_list_l>();
}
pc5_rlc_ch_modified_list_l& ue_context_mod_confirm_ies_o::value_c::pc5_rlc_ch_modified_list()
{
  assert_choice_type(types::pc5_rlc_ch_modified_list, type_, "Value");
  return c.get<pc5_rlc_ch_modified_list_l>();
}
ue_multicast_m_rbs_confirmed_to_be_modified_list_l&
ue_context_mod_confirm_ies_o::value_c::ue_multicast_m_rbs_confirmed_to_be_modified_list()
{
  assert_choice_type(types::ue_multicast_m_rbs_confirmed_to_be_modified_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_confirmed_to_be_modified_list_l>();
}
const uint64_t& ue_context_mod_confirm_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_mod_confirm_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const unbounded_octstring<true>& ue_context_mod_confirm_ies_o::value_c::res_coordination_transfer_container() const
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const drbs_modified_conf_list_l& ue_context_mod_confirm_ies_o::value_c::drbs_modified_conf_list() const
{
  assert_choice_type(types::drbs_modified_conf_list, type_, "Value");
  return c.get<drbs_modified_conf_list_l>();
}
const unbounded_octstring<true>& ue_context_mod_confirm_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const crit_diagnostics_s& ue_context_mod_confirm_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const execute_dupl_e& ue_context_mod_confirm_ies_o::value_c::execute_dupl() const
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
const res_coordination_transfer_info_s& ue_context_mod_confirm_ies_o::value_c::res_coordination_transfer_info() const
{
  assert_choice_type(types::res_coordination_transfer_info, type_, "Value");
  return c.get<res_coordination_transfer_info_s>();
}
const sl_drbs_modified_conf_list_l& ue_context_mod_confirm_ies_o::value_c::sl_drbs_modified_conf_list() const
{
  assert_choice_type(types::sl_drbs_modified_conf_list, type_, "Value");
  return c.get<sl_drbs_modified_conf_list_l>();
}
const uu_rlc_ch_modified_list_l& ue_context_mod_confirm_ies_o::value_c::uu_rlc_ch_modified_list() const
{
  assert_choice_type(types::uu_rlc_ch_modified_list, type_, "Value");
  return c.get<uu_rlc_ch_modified_list_l>();
}
const pc5_rlc_ch_modified_list_l& ue_context_mod_confirm_ies_o::value_c::pc5_rlc_ch_modified_list() const
{
  assert_choice_type(types::pc5_rlc_ch_modified_list, type_, "Value");
  return c.get<pc5_rlc_ch_modified_list_l>();
}
const ue_multicast_m_rbs_confirmed_to_be_modified_list_l&
ue_context_mod_confirm_ies_o::value_c::ue_multicast_m_rbs_confirmed_to_be_modified_list() const
{
  assert_choice_type(types::ue_multicast_m_rbs_confirmed_to_be_modified_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_confirmed_to_be_modified_list_l>();
}
void ue_context_mod_confirm_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::drbs_modified_conf_list:
      j.start_array("DRBs-ModifiedConf-List");
      for (const auto& e1 : c.get<drbs_modified_conf_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::execute_dupl:
      j.write_str("ExecuteDuplication", "true");
      break;
    case types::res_coordination_transfer_info:
      j.write_fieldname("ResourceCoordinationTransferInformation");
      c.get<res_coordination_transfer_info_s>().to_json(j);
      break;
    case types::sl_drbs_modified_conf_list:
      j.start_array("SLDRBs-ModifiedConf-List");
      for (const auto& e1 : c.get<sl_drbs_modified_conf_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::uu_rlc_ch_modified_list:
      j.start_array("UuRLCChannelModifiedList");
      for (const auto& e1 : c.get<uu_rlc_ch_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pc5_rlc_ch_modified_list:
      j.start_array("PC5RLCChannelModifiedList");
      for (const auto& e1 : c.get<pc5_rlc_ch_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ue_multicast_m_rbs_confirmed_to_be_modified_list:
      j.start_array("UE-MulticastMRBs-ConfirmedToBeModified-List");
      for (const auto& e1 : c.get<ue_multicast_m_rbs_confirmed_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_confirm_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_mod_confirm_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::drbs_modified_conf_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_modified_conf_list_l>(), 1, 64, true));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().pack(bref));
      break;
    case types::res_coordination_transfer_info:
      HANDLE_CODE(c.get<res_coordination_transfer_info_s>().pack(bref));
      break;
    case types::sl_drbs_modified_conf_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_drbs_modified_conf_list_l>(), 1, 512, true));
      break;
    case types::uu_rlc_ch_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uu_rlc_ch_modified_list_l>(), 1, 32, true));
      break;
    case types::pc5_rlc_ch_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pc5_rlc_ch_modified_list_l>(), 1, 512, true));
      break;
    case types::ue_multicast_m_rbs_confirmed_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_multicast_m_rbs_confirmed_to_be_modified_list_l>(), 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_confirm_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_confirm_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::drbs_modified_conf_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_modified_conf_list_l>(), bref, 1, 64, true));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().unpack(bref));
      break;
    case types::res_coordination_transfer_info:
      HANDLE_CODE(c.get<res_coordination_transfer_info_s>().unpack(bref));
      break;
    case types::sl_drbs_modified_conf_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_drbs_modified_conf_list_l>(), bref, 1, 512, true));
      break;
    case types::uu_rlc_ch_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uu_rlc_ch_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::pc5_rlc_ch_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pc5_rlc_ch_modified_list_l>(), bref, 1, 512, true));
      break;
    case types::ue_multicast_m_rbs_confirmed_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_multicast_m_rbs_confirmed_to_be_modified_list_l>(), bref, 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_confirm_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// UEContextModificationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_mod_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 7, 376};
  return map_enum_number(names, 5, idx, "id");
}
bool ue_context_mod_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 7, 376};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_mod_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    case 376:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_mod_fail_ies_o::value_c ue_context_mod_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 376:
      ret.set(value_c::types::requested_target_cell_global_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_mod_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    case 376:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_mod_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::requested_target_cell_global_id:
      c.destroy<nr_cgi_s>();
      break;
    default:
      break;
  }
}
void ue_context_mod_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::requested_target_cell_global_id:
      c.init<nr_cgi_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_fail_ies_o::value_c");
  }
}
ue_context_mod_fail_ies_o::value_c::value_c(const ue_context_mod_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::requested_target_cell_global_id:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_fail_ies_o::value_c");
  }
}
ue_context_mod_fail_ies_o::value_c&
ue_context_mod_fail_ies_o::value_c::operator=(const ue_context_mod_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::requested_target_cell_global_id:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_mod_fail_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_mod_fail_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& ue_context_mod_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& ue_context_mod_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
nr_cgi_s& ue_context_mod_fail_ies_o::value_c::requested_target_cell_global_id()
{
  assert_choice_type(types::requested_target_cell_global_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
const uint64_t& ue_context_mod_fail_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_mod_fail_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& ue_context_mod_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& ue_context_mod_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const nr_cgi_s& ue_context_mod_fail_ies_o::value_c::requested_target_cell_global_id() const
{
  assert_choice_type(types::requested_target_cell_global_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
void ue_context_mod_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::requested_target_cell_global_id:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_mod_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::requested_target_cell_global_id:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::requested_target_cell_global_id:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// UEContextModificationRefuseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_mod_refuse_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool ue_context_mod_refuse_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_mod_refuse_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_mod_refuse_ies_o::value_c ue_context_mod_refuse_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_mod_refuse_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_mod_refuse_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void ue_context_mod_refuse_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_refuse_ies_o::value_c");
  }
}
ue_context_mod_refuse_ies_o::value_c::value_c(const ue_context_mod_refuse_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_refuse_ies_o::value_c");
  }
}
ue_context_mod_refuse_ies_o::value_c&
ue_context_mod_refuse_ies_o::value_c::operator=(const ue_context_mod_refuse_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_refuse_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_mod_refuse_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_mod_refuse_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& ue_context_mod_refuse_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& ue_context_mod_refuse_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& ue_context_mod_refuse_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_mod_refuse_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& ue_context_mod_refuse_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& ue_context_mod_refuse_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void ue_context_mod_refuse_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_refuse_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_mod_refuse_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_refuse_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_refuse_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_refuse_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// UEContextModificationRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_mod_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40,  41,  63,  107, 96,  38,  9,   79,  49,  87,  50,  56,  52,  76,  37,  31,
                                   72,  33,  97,  108, 159, 174, 175, 162, 158, 109, 184, 195, 182, 215, 94,  248,
                                   253, 267, 263, 265, 306, 307, 308, 309, 340, 332, 326, 328, 374, 428, 432, 684,
                                   510, 511, 536, 547, 586, 594, 595, 596, 618, 599, 600, 601, 608, 609, 610, 619,
                                   626, 632, 633, 685, 628, 643, 647, 675, 683, 695, 690, 691};
  return map_enum_number(names, 76, idx, "id");
}
bool ue_context_mod_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40,  41,  63,  107, 96,  38,  9,   79,  49,  87,  50,  56,  52,  76,  37,  31,
                                   72,  33,  97,  108, 159, 174, 175, 162, 158, 109, 184, 195, 182, 215, 94,  248,
                                   253, 267, 263, 265, 306, 307, 308, 309, 340, 332, 326, 328, 374, 428, 432, 684,
                                   510, 511, 536, 547, 586, 594, 595, 596, 618, 599, 600, 601, 608, 609, 610, 619,
                                   626, 632, 633, 685, 628, 643, 647, 675, 683, 695, 690, 691};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_mod_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 63:
      return crit_e::ignore;
    case 107:
      return crit_e::reject;
    case 96:
      return crit_e::ignore;
    case 38:
      return crit_e::ignore;
    case 9:
      return crit_e::reject;
    case 79:
      return crit_e::ignore;
    case 49:
      return crit_e::ignore;
    case 87:
      return crit_e::ignore;
    case 50:
      return crit_e::reject;
    case 56:
      return crit_e::ignore;
    case 52:
      return crit_e::ignore;
    case 76:
      return crit_e::reject;
    case 37:
      return crit_e::reject;
    case 31:
      return crit_e::reject;
    case 72:
      return crit_e::reject;
    case 33:
      return crit_e::reject;
    case 97:
      return crit_e::reject;
    case 108:
      return crit_e::reject;
    case 159:
      return crit_e::ignore;
    case 174:
      return crit_e::ignore;
    case 175:
      return crit_e::ignore;
    case 162:
      return crit_e::reject;
    case 158:
      return crit_e::ignore;
    case 109:
      return crit_e::ignore;
    case 184:
      return crit_e::ignore;
    case 195:
      return crit_e::ignore;
    case 182:
      return crit_e::ignore;
    case 215:
      return crit_e::ignore;
    case 94:
      return crit_e::reject;
    case 248:
      return crit_e::ignore;
    case 253:
      return crit_e::ignore;
    case 267:
      return crit_e::reject;
    case 263:
      return crit_e::reject;
    case 265:
      return crit_e::reject;
    case 306:
      return crit_e::ignore;
    case 307:
      return crit_e::ignore;
    case 308:
      return crit_e::ignore;
    case 309:
      return crit_e::ignore;
    case 340:
      return crit_e::ignore;
    case 332:
      return crit_e::reject;
    case 326:
      return crit_e::reject;
    case 328:
      return crit_e::reject;
    case 374:
      return crit_e::reject;
    case 428:
      return crit_e::reject;
    case 432:
      return crit_e::ignore;
    case 684:
      return crit_e::ignore;
    case 510:
      return crit_e::reject;
    case 511:
      return crit_e::reject;
    case 536:
      return crit_e::ignore;
    case 547:
      return crit_e::ignore;
    case 586:
      return crit_e::ignore;
    case 594:
      return crit_e::ignore;
    case 595:
      return crit_e::ignore;
    case 596:
      return crit_e::ignore;
    case 618:
      return crit_e::ignore;
    case 599:
      return crit_e::reject;
    case 600:
      return crit_e::reject;
    case 601:
      return crit_e::reject;
    case 608:
      return crit_e::reject;
    case 609:
      return crit_e::reject;
    case 610:
      return crit_e::reject;
    case 619:
      return crit_e::ignore;
    case 626:
      return crit_e::ignore;
    case 632:
      return crit_e::reject;
    case 633:
      return crit_e::reject;
    case 685:
      return crit_e::reject;
    case 628:
      return crit_e::reject;
    case 643:
      return crit_e::ignore;
    case 647:
      return crit_e::ignore;
    case 675:
      return crit_e::ignore;
    case 683:
      return crit_e::ignore;
    case 695:
      return crit_e::ignore;
    case 690:
      return crit_e::ignore;
    case 691:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_mod_request_ies_o::value_c ue_context_mod_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 63:
      ret.set(value_c::types::sp_cell_id);
      break;
    case 107:
      ret.set(value_c::types::serv_cell_idx);
      break;
    case 96:
      ret.set(value_c::types::sp_cell_ul_cfg);
      break;
    case 38:
      ret.set(value_c::types::drx_cycle);
      break;
    case 9:
      ret.set(value_c::types::cu_to_du_rrc_info);
      break;
    case 79:
      ret.set(value_c::types::tx_action_ind);
      break;
    case 49:
      ret.set(value_c::types::res_coordination_transfer_container);
      break;
    case 87:
      ret.set(value_c::types::rrc_recfg_complete_ind);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 56:
      ret.set(value_c::types::scell_to_be_setup_mod_list);
      break;
    case 52:
      ret.set(value_c::types::scell_to_be_remd_list);
      break;
    case 76:
      ret.set(value_c::types::srbs_to_be_setup_mod_list);
      break;
    case 37:
      ret.set(value_c::types::drbs_to_be_setup_mod_list);
      break;
    case 31:
      ret.set(value_c::types::drbs_to_be_modified_list);
      break;
    case 72:
      ret.set(value_c::types::srbs_to_be_released_list);
      break;
    case 33:
      ret.set(value_c::types::drbs_to_be_released_list);
      break;
    case 97:
      ret.set(value_c::types::inactivity_monitoring_request);
      break;
    case 108:
      ret.set(value_c::types::rat_freq_prio_info);
      break;
    case 159:
      ret.set(value_c::types::drx_cfg_ind);
      break;
    case 174:
      ret.set(value_c::types::rlc_fail_ind);
      break;
    case 175:
      ret.set(value_c::types::ul_tx_direct_current_list_info);
      break;
    case 162:
      ret.set(value_c::types::gnb_du_cfg_query);
      break;
    case 158:
      ret.set(value_c::types::gnb_du_ue_ambr_ul);
      break;
    case 109:
      ret.set(value_c::types::execute_dupl);
      break;
    case 184:
      ret.set(value_c::types::rrc_delivery_status_request);
      break;
    case 195:
      ret.set(value_c::types::res_coordination_transfer_info);
      break;
    case 182:
      ret.set(value_c::types::serving_cell_mo);
      break;
    case 215:
      ret.set(value_c::types::needfor_gap);
      break;
    case 94:
      ret.set(value_c::types::full_cfg);
      break;
    case 248:
      ret.set(value_c::types::add_rrm_prio_idx);
      break;
    case 253:
      ret.set(value_c::types::lower_layer_presence_status_change);
      break;
    case 267:
      ret.set(value_c::types::bh_chs_to_be_setup_mod_list);
      break;
    case 263:
      ret.set(value_c::types::bh_chs_to_be_modified_list);
      break;
    case 265:
      ret.set(value_c::types::bh_chs_to_be_released_list);
      break;
    case 306:
      ret.set(value_c::types::nr_v2x_services_authorized);
      break;
    case 307:
      ret.set(value_c::types::ltev2x_services_authorized);
      break;
    case 308:
      ret.set(value_c::types::nr_ue_sidelink_aggr_max_bitrate);
      break;
    case 309:
      ret.set(value_c::types::lte_ue_sidelink_aggr_max_bitrate);
      break;
    case 340:
      ret.set(value_c::types::pc5_link_ambr);
      break;
    case 332:
      ret.set(value_c::types::sl_drbs_to_be_setup_mod_list);
      break;
    case 326:
      ret.set(value_c::types::sl_drbs_to_be_modified_list);
      break;
    case 328:
      ret.set(value_c::types::sl_drbs_to_be_released_list);
      break;
    case 374:
      ret.set(value_c::types::conditional_intra_du_mob_info);
      break;
    case 428:
      ret.set(value_c::types::f1_c_transfer_path);
      break;
    case 432:
      ret.set(value_c::types::scg_ind);
      break;
    case 684:
      ret.set(value_c::types::ul_tx_direct_current_two_carrier_list_info);
      break;
    case 510:
      ret.set(value_c::types::iab_conditional_rrc_msg_delivery_ind);
      break;
    case 511:
      ret.set(value_c::types::f1_c_transfer_path_nr_dc);
      break;
    case 536:
      ret.set(value_c::types::mdt_polluted_meas_ind);
      break;
    case 547:
      ret.set(value_c::types::scg_activation_request);
      break;
    case 586:
      ret.set(value_c::types::cg_sdt_query_ind);
      break;
    case 594:
      ret.set(value_c::types::five_g_pro_se_authorized);
      break;
    case 595:
      ret.set(value_c::types::five_g_pro_se_ue_pc5_aggr_max_bitrate);
      break;
    case 596:
      ret.set(value_c::types::five_g_pro_se_pc5_link_ambr);
      break;
    case 618:
      ret.set(value_c::types::upd_remote_ue_local_id);
      break;
    case 599:
      ret.set(value_c::types::uu_rlc_ch_to_be_setup_list);
      break;
    case 600:
      ret.set(value_c::types::uu_rlc_ch_to_be_modified_list);
      break;
    case 601:
      ret.set(value_c::types::uu_rlc_ch_to_be_released_list);
      break;
    case 608:
      ret.set(value_c::types::pc5_rlc_ch_to_be_setup_list);
      break;
    case 609:
      ret.set(value_c::types::pc5_rlc_ch_to_be_modified_list);
      break;
    case 610:
      ret.set(value_c::types::pc5_rlc_ch_to_be_released_list);
      break;
    case 619:
      ret.set(value_c::types::path_switch_cfg);
      break;
    case 626:
      ret.set(value_c::types::gnb_du_ue_slice_max_bit_rate_list);
      break;
    case 632:
      ret.set(value_c::types::multicast_mbs_session_setup_list);
      break;
    case 633:
      ret.set(value_c::types::multicast_mbs_session_rem_list);
      break;
    case 685:
      ret.set(value_c::types::ue_multicast_m_rbs_to_be_setup_at_modify_list);
      break;
    case 628:
      ret.set(value_c::types::ue_multicast_m_rbs_to_be_released_list);
      break;
    case 643:
      ret.set(value_c::types::sldrx_cycle_list);
      break;
    case 647:
      ret.set(value_c::types::management_based_mdt_plmn_mod_list);
      break;
    case 675:
      ret.set(value_c::types::sdt_bearer_cfg_query_ind);
      break;
    case 683:
      ret.set(value_c::types::daps_ho_status);
      break;
    case 695:
      ret.set(value_c::types::serving_cell_mo_list);
      break;
    case 690:
      ret.set(value_c::types::ul_tx_direct_current_more_carrier_info);
      break;
    case 691:
      ret.set(value_c::types::cp_acmcg_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_mod_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 63:
      return presence_e::optional;
    case 107:
      return presence_e::optional;
    case 96:
      return presence_e::optional;
    case 38:
      return presence_e::optional;
    case 9:
      return presence_e::optional;
    case 79:
      return presence_e::optional;
    case 49:
      return presence_e::optional;
    case 87:
      return presence_e::optional;
    case 50:
      return presence_e::optional;
    case 56:
      return presence_e::optional;
    case 52:
      return presence_e::optional;
    case 76:
      return presence_e::optional;
    case 37:
      return presence_e::optional;
    case 31:
      return presence_e::optional;
    case 72:
      return presence_e::optional;
    case 33:
      return presence_e::optional;
    case 97:
      return presence_e::optional;
    case 108:
      return presence_e::optional;
    case 159:
      return presence_e::optional;
    case 174:
      return presence_e::optional;
    case 175:
      return presence_e::optional;
    case 162:
      return presence_e::optional;
    case 158:
      return presence_e::optional;
    case 109:
      return presence_e::optional;
    case 184:
      return presence_e::optional;
    case 195:
      return presence_e::optional;
    case 182:
      return presence_e::optional;
    case 215:
      return presence_e::optional;
    case 94:
      return presence_e::optional;
    case 248:
      return presence_e::optional;
    case 253:
      return presence_e::optional;
    case 267:
      return presence_e::optional;
    case 263:
      return presence_e::optional;
    case 265:
      return presence_e::optional;
    case 306:
      return presence_e::optional;
    case 307:
      return presence_e::optional;
    case 308:
      return presence_e::optional;
    case 309:
      return presence_e::optional;
    case 340:
      return presence_e::optional;
    case 332:
      return presence_e::optional;
    case 326:
      return presence_e::optional;
    case 328:
      return presence_e::optional;
    case 374:
      return presence_e::optional;
    case 428:
      return presence_e::optional;
    case 432:
      return presence_e::optional;
    case 684:
      return presence_e::optional;
    case 510:
      return presence_e::optional;
    case 511:
      return presence_e::optional;
    case 536:
      return presence_e::optional;
    case 547:
      return presence_e::optional;
    case 586:
      return presence_e::optional;
    case 594:
      return presence_e::optional;
    case 595:
      return presence_e::optional;
    case 596:
      return presence_e::optional;
    case 618:
      return presence_e::optional;
    case 599:
      return presence_e::optional;
    case 600:
      return presence_e::optional;
    case 601:
      return presence_e::optional;
    case 608:
      return presence_e::optional;
    case 609:
      return presence_e::optional;
    case 610:
      return presence_e::optional;
    case 619:
      return presence_e::optional;
    case 626:
      return presence_e::optional;
    case 632:
      return presence_e::optional;
    case 633:
      return presence_e::optional;
    case 685:
      return presence_e::optional;
    case 628:
      return presence_e::optional;
    case 643:
      return presence_e::optional;
    case 647:
      return presence_e::optional;
    case 675:
      return presence_e::optional;
    case 683:
      return presence_e::optional;
    case 695:
      return presence_e::optional;
    case 690:
      return presence_e::optional;
    case 691:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_mod_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::sp_cell_id:
      c.destroy<nr_cgi_s>();
      break;
    case types::drx_cycle:
      c.destroy<drx_cycle_s>();
      break;
    case types::cu_to_du_rrc_info:
      c.destroy<cu_to_du_rrc_info_s>();
      break;
    case types::res_coordination_transfer_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::scell_to_be_setup_mod_list:
      c.destroy<scell_to_be_setup_mod_list_l>();
      break;
    case types::scell_to_be_remd_list:
      c.destroy<scell_to_be_remd_list_l>();
      break;
    case types::srbs_to_be_setup_mod_list:
      c.destroy<srbs_to_be_setup_mod_list_l>();
      break;
    case types::drbs_to_be_setup_mod_list:
      c.destroy<drbs_to_be_setup_mod_list_l>();
      break;
    case types::drbs_to_be_modified_list:
      c.destroy<drbs_to_be_modified_list_l>();
      break;
    case types::srbs_to_be_released_list:
      c.destroy<srbs_to_be_released_list_l>();
      break;
    case types::drbs_to_be_released_list:
      c.destroy<drbs_to_be_released_list_l>();
      break;
    case types::rat_freq_prio_info:
      c.destroy<rat_freq_prio_info_c>();
      break;
    case types::rlc_fail_ind:
      c.destroy<rlc_fail_ind_s>();
      break;
    case types::ul_tx_direct_current_list_info:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::res_coordination_transfer_info:
      c.destroy<res_coordination_transfer_info_s>();
      break;
    case types::add_rrm_prio_idx:
      c.destroy<fixed_bitstring<32, false, true>>();
      break;
    case types::bh_chs_to_be_setup_mod_list:
      c.destroy<bh_chs_to_be_setup_mod_list_l>();
      break;
    case types::bh_chs_to_be_modified_list:
      c.destroy<bh_chs_to_be_modified_list_l>();
      break;
    case types::bh_chs_to_be_released_list:
      c.destroy<bh_chs_to_be_released_list_l>();
      break;
    case types::nr_v2x_services_authorized:
      c.destroy<nr_v2x_services_authorized_s>();
      break;
    case types::ltev2x_services_authorized:
      c.destroy<ltev2x_services_authorized_s>();
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      c.destroy<nr_ue_sidelink_aggr_max_bitrate_s>();
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      c.destroy<lte_ue_sidelink_aggr_max_bitrate_s>();
      break;
    case types::sl_drbs_to_be_setup_mod_list:
      c.destroy<sl_drbs_to_be_setup_mod_list_l>();
      break;
    case types::sl_drbs_to_be_modified_list:
      c.destroy<sl_drbs_to_be_modified_list_l>();
      break;
    case types::sl_drbs_to_be_released_list:
      c.destroy<sl_drbs_to_be_released_list_l>();
      break;
    case types::conditional_intra_du_mob_info:
      c.destroy<conditional_intra_du_mob_info_s>();
      break;
    case types::f1_c_transfer_path:
      c.destroy<f1_c_transfer_path_s>();
      break;
    case types::ul_tx_direct_current_two_carrier_list_info:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::f1_c_transfer_path_nr_dc:
      c.destroy<f1_c_transfer_path_nr_dc_s>();
      break;
    case types::five_g_pro_se_authorized:
      c.destroy<five_g_pro_se_authorized_s>();
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      c.destroy<nr_ue_sidelink_aggr_max_bitrate_s>();
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      c.destroy<uu_rlc_ch_to_be_setup_list_l>();
      break;
    case types::uu_rlc_ch_to_be_modified_list:
      c.destroy<uu_rlc_ch_to_be_modified_list_l>();
      break;
    case types::uu_rlc_ch_to_be_released_list:
      c.destroy<uu_rlc_ch_to_be_released_list_l>();
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      c.destroy<pc5_rlc_ch_to_be_setup_list_l>();
      break;
    case types::pc5_rlc_ch_to_be_modified_list:
      c.destroy<pc5_rlc_ch_to_be_modified_list_l>();
      break;
    case types::pc5_rlc_ch_to_be_released_list:
      c.destroy<pc5_rlc_ch_to_be_released_list_l>();
      break;
    case types::path_switch_cfg:
      c.destroy<path_switch_cfg_s>();
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      c.destroy<gnb_du_ue_slice_max_bit_rate_list_l>();
      break;
    case types::multicast_mbs_session_setup_list:
      c.destroy<multicast_mbs_session_list_l>();
      break;
    case types::multicast_mbs_session_rem_list:
      c.destroy<multicast_mbs_session_list_l>();
      break;
    case types::ue_multicast_m_rbs_to_be_setup_at_modify_list:
      c.destroy<ue_multicast_m_rbs_to_be_setup_at_modify_list_l>();
      break;
    case types::ue_multicast_m_rbs_to_be_released_list:
      c.destroy<ue_multicast_m_rbs_to_be_released_list_l>();
      break;
    case types::sldrx_cycle_list:
      c.destroy<sldrx_cycle_list_l>();
      break;
    case types::management_based_mdt_plmn_mod_list:
      c.destroy<mdt_plmn_mod_list_l>();
      break;
    case types::serving_cell_mo_list:
      c.destroy<serving_cell_mo_list_l>();
      break;
    case types::ul_tx_direct_current_more_carrier_info:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::cp_acmcg_info:
      c.destroy<cp_acmcg_info_s>();
      break;
    default:
      break;
  }
}
void ue_context_mod_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::sp_cell_id:
      c.init<nr_cgi_s>();
      break;
    case types::serv_cell_idx:
      break;
    case types::sp_cell_ul_cfg:
      break;
    case types::drx_cycle:
      c.init<drx_cycle_s>();
      break;
    case types::cu_to_du_rrc_info:
      c.init<cu_to_du_rrc_info_s>();
      break;
    case types::tx_action_ind:
      break;
    case types::res_coordination_transfer_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::rrc_recfg_complete_ind:
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::scell_to_be_setup_mod_list:
      c.init<scell_to_be_setup_mod_list_l>();
      break;
    case types::scell_to_be_remd_list:
      c.init<scell_to_be_remd_list_l>();
      break;
    case types::srbs_to_be_setup_mod_list:
      c.init<srbs_to_be_setup_mod_list_l>();
      break;
    case types::drbs_to_be_setup_mod_list:
      c.init<drbs_to_be_setup_mod_list_l>();
      break;
    case types::drbs_to_be_modified_list:
      c.init<drbs_to_be_modified_list_l>();
      break;
    case types::srbs_to_be_released_list:
      c.init<srbs_to_be_released_list_l>();
      break;
    case types::drbs_to_be_released_list:
      c.init<drbs_to_be_released_list_l>();
      break;
    case types::inactivity_monitoring_request:
      break;
    case types::rat_freq_prio_info:
      c.init<rat_freq_prio_info_c>();
      break;
    case types::drx_cfg_ind:
      break;
    case types::rlc_fail_ind:
      c.init<rlc_fail_ind_s>();
      break;
    case types::ul_tx_direct_current_list_info:
      c.init<unbounded_octstring<true>>();
      break;
    case types::gnb_du_cfg_query:
      break;
    case types::gnb_du_ue_ambr_ul:
      break;
    case types::execute_dupl:
      break;
    case types::rrc_delivery_status_request:
      break;
    case types::res_coordination_transfer_info:
      c.init<res_coordination_transfer_info_s>();
      break;
    case types::serving_cell_mo:
      break;
    case types::needfor_gap:
      break;
    case types::full_cfg:
      break;
    case types::add_rrm_prio_idx:
      c.init<fixed_bitstring<32, false, true>>();
      break;
    case types::lower_layer_presence_status_change:
      break;
    case types::bh_chs_to_be_setup_mod_list:
      c.init<bh_chs_to_be_setup_mod_list_l>();
      break;
    case types::bh_chs_to_be_modified_list:
      c.init<bh_chs_to_be_modified_list_l>();
      break;
    case types::bh_chs_to_be_released_list:
      c.init<bh_chs_to_be_released_list_l>();
      break;
    case types::nr_v2x_services_authorized:
      c.init<nr_v2x_services_authorized_s>();
      break;
    case types::ltev2x_services_authorized:
      c.init<ltev2x_services_authorized_s>();
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      c.init<nr_ue_sidelink_aggr_max_bitrate_s>();
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      c.init<lte_ue_sidelink_aggr_max_bitrate_s>();
      break;
    case types::pc5_link_ambr:
      break;
    case types::sl_drbs_to_be_setup_mod_list:
      c.init<sl_drbs_to_be_setup_mod_list_l>();
      break;
    case types::sl_drbs_to_be_modified_list:
      c.init<sl_drbs_to_be_modified_list_l>();
      break;
    case types::sl_drbs_to_be_released_list:
      c.init<sl_drbs_to_be_released_list_l>();
      break;
    case types::conditional_intra_du_mob_info:
      c.init<conditional_intra_du_mob_info_s>();
      break;
    case types::f1_c_transfer_path:
      c.init<f1_c_transfer_path_s>();
      break;
    case types::scg_ind:
      break;
    case types::ul_tx_direct_current_two_carrier_list_info:
      c.init<unbounded_octstring<true>>();
      break;
    case types::iab_conditional_rrc_msg_delivery_ind:
      break;
    case types::f1_c_transfer_path_nr_dc:
      c.init<f1_c_transfer_path_nr_dc_s>();
      break;
    case types::mdt_polluted_meas_ind:
      break;
    case types::scg_activation_request:
      break;
    case types::cg_sdt_query_ind:
      break;
    case types::five_g_pro_se_authorized:
      c.init<five_g_pro_se_authorized_s>();
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      c.init<nr_ue_sidelink_aggr_max_bitrate_s>();
      break;
    case types::five_g_pro_se_pc5_link_ambr:
      break;
    case types::upd_remote_ue_local_id:
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      c.init<uu_rlc_ch_to_be_setup_list_l>();
      break;
    case types::uu_rlc_ch_to_be_modified_list:
      c.init<uu_rlc_ch_to_be_modified_list_l>();
      break;
    case types::uu_rlc_ch_to_be_released_list:
      c.init<uu_rlc_ch_to_be_released_list_l>();
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      c.init<pc5_rlc_ch_to_be_setup_list_l>();
      break;
    case types::pc5_rlc_ch_to_be_modified_list:
      c.init<pc5_rlc_ch_to_be_modified_list_l>();
      break;
    case types::pc5_rlc_ch_to_be_released_list:
      c.init<pc5_rlc_ch_to_be_released_list_l>();
      break;
    case types::path_switch_cfg:
      c.init<path_switch_cfg_s>();
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      c.init<gnb_du_ue_slice_max_bit_rate_list_l>();
      break;
    case types::multicast_mbs_session_setup_list:
      c.init<multicast_mbs_session_list_l>();
      break;
    case types::multicast_mbs_session_rem_list:
      c.init<multicast_mbs_session_list_l>();
      break;
    case types::ue_multicast_m_rbs_to_be_setup_at_modify_list:
      c.init<ue_multicast_m_rbs_to_be_setup_at_modify_list_l>();
      break;
    case types::ue_multicast_m_rbs_to_be_released_list:
      c.init<ue_multicast_m_rbs_to_be_released_list_l>();
      break;
    case types::sldrx_cycle_list:
      c.init<sldrx_cycle_list_l>();
      break;
    case types::management_based_mdt_plmn_mod_list:
      c.init<mdt_plmn_mod_list_l>();
      break;
    case types::sdt_bearer_cfg_query_ind:
      break;
    case types::daps_ho_status:
      break;
    case types::serving_cell_mo_list:
      c.init<serving_cell_mo_list_l>();
      break;
    case types::ul_tx_direct_current_more_carrier_info:
      c.init<unbounded_octstring<true>>();
      break;
    case types::cp_acmcg_info:
      c.init<cp_acmcg_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_request_ies_o::value_c");
  }
}
ue_context_mod_request_ies_o::value_c::value_c(const ue_context_mod_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::sp_cell_id:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::serv_cell_idx:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sp_cell_ul_cfg:
      c.init(other.c.get<cell_ul_cfg_e>());
      break;
    case types::drx_cycle:
      c.init(other.c.get<drx_cycle_s>());
      break;
    case types::cu_to_du_rrc_info:
      c.init(other.c.get<cu_to_du_rrc_info_s>());
      break;
    case types::tx_action_ind:
      c.init(other.c.get<tx_action_ind_e>());
      break;
    case types::res_coordination_transfer_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::rrc_recfg_complete_ind:
      c.init(other.c.get<rrc_recfg_complete_ind_e>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::scell_to_be_setup_mod_list:
      c.init(other.c.get<scell_to_be_setup_mod_list_l>());
      break;
    case types::scell_to_be_remd_list:
      c.init(other.c.get<scell_to_be_remd_list_l>());
      break;
    case types::srbs_to_be_setup_mod_list:
      c.init(other.c.get<srbs_to_be_setup_mod_list_l>());
      break;
    case types::drbs_to_be_setup_mod_list:
      c.init(other.c.get<drbs_to_be_setup_mod_list_l>());
      break;
    case types::drbs_to_be_modified_list:
      c.init(other.c.get<drbs_to_be_modified_list_l>());
      break;
    case types::srbs_to_be_released_list:
      c.init(other.c.get<srbs_to_be_released_list_l>());
      break;
    case types::drbs_to_be_released_list:
      c.init(other.c.get<drbs_to_be_released_list_l>());
      break;
    case types::inactivity_monitoring_request:
      c.init(other.c.get<inactivity_monitoring_request_e>());
      break;
    case types::rat_freq_prio_info:
      c.init(other.c.get<rat_freq_prio_info_c>());
      break;
    case types::drx_cfg_ind:
      c.init(other.c.get<drx_cfg_ind_e>());
      break;
    case types::rlc_fail_ind:
      c.init(other.c.get<rlc_fail_ind_s>());
      break;
    case types::ul_tx_direct_current_list_info:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::gnb_du_cfg_query:
      c.init(other.c.get<gnb_du_cfg_query_e>());
      break;
    case types::gnb_du_ue_ambr_ul:
      c.init(other.c.get<uint64_t>());
      break;
    case types::execute_dupl:
      c.init(other.c.get<execute_dupl_e>());
      break;
    case types::rrc_delivery_status_request:
      c.init(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::res_coordination_transfer_info:
      c.init(other.c.get<res_coordination_transfer_info_s>());
      break;
    case types::serving_cell_mo:
      c.init(other.c.get<uint8_t>());
      break;
    case types::needfor_gap:
      c.init(other.c.get<needfor_gap_e>());
      break;
    case types::full_cfg:
      c.init(other.c.get<full_cfg_e>());
      break;
    case types::add_rrm_prio_idx:
      c.init(other.c.get<fixed_bitstring<32, false, true>>());
      break;
    case types::lower_layer_presence_status_change:
      c.init(other.c.get<lower_layer_presence_status_change_e>());
      break;
    case types::bh_chs_to_be_setup_mod_list:
      c.init(other.c.get<bh_chs_to_be_setup_mod_list_l>());
      break;
    case types::bh_chs_to_be_modified_list:
      c.init(other.c.get<bh_chs_to_be_modified_list_l>());
      break;
    case types::bh_chs_to_be_released_list:
      c.init(other.c.get<bh_chs_to_be_released_list_l>());
      break;
    case types::nr_v2x_services_authorized:
      c.init(other.c.get<nr_v2x_services_authorized_s>());
      break;
    case types::ltev2x_services_authorized:
      c.init(other.c.get<ltev2x_services_authorized_s>());
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      c.init(other.c.get<nr_ue_sidelink_aggr_max_bitrate_s>());
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      c.init(other.c.get<lte_ue_sidelink_aggr_max_bitrate_s>());
      break;
    case types::pc5_link_ambr:
      c.init(other.c.get<uint64_t>());
      break;
    case types::sl_drbs_to_be_setup_mod_list:
      c.init(other.c.get<sl_drbs_to_be_setup_mod_list_l>());
      break;
    case types::sl_drbs_to_be_modified_list:
      c.init(other.c.get<sl_drbs_to_be_modified_list_l>());
      break;
    case types::sl_drbs_to_be_released_list:
      c.init(other.c.get<sl_drbs_to_be_released_list_l>());
      break;
    case types::conditional_intra_du_mob_info:
      c.init(other.c.get<conditional_intra_du_mob_info_s>());
      break;
    case types::f1_c_transfer_path:
      c.init(other.c.get<f1_c_transfer_path_s>());
      break;
    case types::scg_ind:
      c.init(other.c.get<scg_ind_e>());
      break;
    case types::ul_tx_direct_current_two_carrier_list_info:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::iab_conditional_rrc_msg_delivery_ind:
      c.init(other.c.get<iab_conditional_rrc_msg_delivery_ind_e>());
      break;
    case types::f1_c_transfer_path_nr_dc:
      c.init(other.c.get<f1_c_transfer_path_nr_dc_s>());
      break;
    case types::mdt_polluted_meas_ind:
      c.init(other.c.get<mdt_polluted_meas_ind_e>());
      break;
    case types::scg_activation_request:
      c.init(other.c.get<scg_activation_request_e>());
      break;
    case types::cg_sdt_query_ind:
      c.init(other.c.get<cg_sdt_query_ind_e>());
      break;
    case types::five_g_pro_se_authorized:
      c.init(other.c.get<five_g_pro_se_authorized_s>());
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      c.init(other.c.get<nr_ue_sidelink_aggr_max_bitrate_s>());
      break;
    case types::five_g_pro_se_pc5_link_ambr:
      c.init(other.c.get<uint64_t>());
      break;
    case types::upd_remote_ue_local_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      c.init(other.c.get<uu_rlc_ch_to_be_setup_list_l>());
      break;
    case types::uu_rlc_ch_to_be_modified_list:
      c.init(other.c.get<uu_rlc_ch_to_be_modified_list_l>());
      break;
    case types::uu_rlc_ch_to_be_released_list:
      c.init(other.c.get<uu_rlc_ch_to_be_released_list_l>());
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      c.init(other.c.get<pc5_rlc_ch_to_be_setup_list_l>());
      break;
    case types::pc5_rlc_ch_to_be_modified_list:
      c.init(other.c.get<pc5_rlc_ch_to_be_modified_list_l>());
      break;
    case types::pc5_rlc_ch_to_be_released_list:
      c.init(other.c.get<pc5_rlc_ch_to_be_released_list_l>());
      break;
    case types::path_switch_cfg:
      c.init(other.c.get<path_switch_cfg_s>());
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      c.init(other.c.get<gnb_du_ue_slice_max_bit_rate_list_l>());
      break;
    case types::multicast_mbs_session_setup_list:
      c.init(other.c.get<multicast_mbs_session_list_l>());
      break;
    case types::multicast_mbs_session_rem_list:
      c.init(other.c.get<multicast_mbs_session_list_l>());
      break;
    case types::ue_multicast_m_rbs_to_be_setup_at_modify_list:
      c.init(other.c.get<ue_multicast_m_rbs_to_be_setup_at_modify_list_l>());
      break;
    case types::ue_multicast_m_rbs_to_be_released_list:
      c.init(other.c.get<ue_multicast_m_rbs_to_be_released_list_l>());
      break;
    case types::sldrx_cycle_list:
      c.init(other.c.get<sldrx_cycle_list_l>());
      break;
    case types::management_based_mdt_plmn_mod_list:
      c.init(other.c.get<mdt_plmn_mod_list_l>());
      break;
    case types::sdt_bearer_cfg_query_ind:
      c.init(other.c.get<sdt_bearer_cfg_query_ind_e>());
      break;
    case types::daps_ho_status:
      c.init(other.c.get<daps_ho_status_e>());
      break;
    case types::serving_cell_mo_list:
      c.init(other.c.get<serving_cell_mo_list_l>());
      break;
    case types::ul_tx_direct_current_more_carrier_info:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::cp_acmcg_info:
      c.init(other.c.get<cp_acmcg_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_request_ies_o::value_c");
  }
}
ue_context_mod_request_ies_o::value_c&
ue_context_mod_request_ies_o::value_c::operator=(const ue_context_mod_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::sp_cell_id:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::serv_cell_idx:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sp_cell_ul_cfg:
      c.set(other.c.get<cell_ul_cfg_e>());
      break;
    case types::drx_cycle:
      c.set(other.c.get<drx_cycle_s>());
      break;
    case types::cu_to_du_rrc_info:
      c.set(other.c.get<cu_to_du_rrc_info_s>());
      break;
    case types::tx_action_ind:
      c.set(other.c.get<tx_action_ind_e>());
      break;
    case types::res_coordination_transfer_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::rrc_recfg_complete_ind:
      c.set(other.c.get<rrc_recfg_complete_ind_e>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::scell_to_be_setup_mod_list:
      c.set(other.c.get<scell_to_be_setup_mod_list_l>());
      break;
    case types::scell_to_be_remd_list:
      c.set(other.c.get<scell_to_be_remd_list_l>());
      break;
    case types::srbs_to_be_setup_mod_list:
      c.set(other.c.get<srbs_to_be_setup_mod_list_l>());
      break;
    case types::drbs_to_be_setup_mod_list:
      c.set(other.c.get<drbs_to_be_setup_mod_list_l>());
      break;
    case types::drbs_to_be_modified_list:
      c.set(other.c.get<drbs_to_be_modified_list_l>());
      break;
    case types::srbs_to_be_released_list:
      c.set(other.c.get<srbs_to_be_released_list_l>());
      break;
    case types::drbs_to_be_released_list:
      c.set(other.c.get<drbs_to_be_released_list_l>());
      break;
    case types::inactivity_monitoring_request:
      c.set(other.c.get<inactivity_monitoring_request_e>());
      break;
    case types::rat_freq_prio_info:
      c.set(other.c.get<rat_freq_prio_info_c>());
      break;
    case types::drx_cfg_ind:
      c.set(other.c.get<drx_cfg_ind_e>());
      break;
    case types::rlc_fail_ind:
      c.set(other.c.get<rlc_fail_ind_s>());
      break;
    case types::ul_tx_direct_current_list_info:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::gnb_du_cfg_query:
      c.set(other.c.get<gnb_du_cfg_query_e>());
      break;
    case types::gnb_du_ue_ambr_ul:
      c.set(other.c.get<uint64_t>());
      break;
    case types::execute_dupl:
      c.set(other.c.get<execute_dupl_e>());
      break;
    case types::rrc_delivery_status_request:
      c.set(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::res_coordination_transfer_info:
      c.set(other.c.get<res_coordination_transfer_info_s>());
      break;
    case types::serving_cell_mo:
      c.set(other.c.get<uint8_t>());
      break;
    case types::needfor_gap:
      c.set(other.c.get<needfor_gap_e>());
      break;
    case types::full_cfg:
      c.set(other.c.get<full_cfg_e>());
      break;
    case types::add_rrm_prio_idx:
      c.set(other.c.get<fixed_bitstring<32, false, true>>());
      break;
    case types::lower_layer_presence_status_change:
      c.set(other.c.get<lower_layer_presence_status_change_e>());
      break;
    case types::bh_chs_to_be_setup_mod_list:
      c.set(other.c.get<bh_chs_to_be_setup_mod_list_l>());
      break;
    case types::bh_chs_to_be_modified_list:
      c.set(other.c.get<bh_chs_to_be_modified_list_l>());
      break;
    case types::bh_chs_to_be_released_list:
      c.set(other.c.get<bh_chs_to_be_released_list_l>());
      break;
    case types::nr_v2x_services_authorized:
      c.set(other.c.get<nr_v2x_services_authorized_s>());
      break;
    case types::ltev2x_services_authorized:
      c.set(other.c.get<ltev2x_services_authorized_s>());
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      c.set(other.c.get<nr_ue_sidelink_aggr_max_bitrate_s>());
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      c.set(other.c.get<lte_ue_sidelink_aggr_max_bitrate_s>());
      break;
    case types::pc5_link_ambr:
      c.set(other.c.get<uint64_t>());
      break;
    case types::sl_drbs_to_be_setup_mod_list:
      c.set(other.c.get<sl_drbs_to_be_setup_mod_list_l>());
      break;
    case types::sl_drbs_to_be_modified_list:
      c.set(other.c.get<sl_drbs_to_be_modified_list_l>());
      break;
    case types::sl_drbs_to_be_released_list:
      c.set(other.c.get<sl_drbs_to_be_released_list_l>());
      break;
    case types::conditional_intra_du_mob_info:
      c.set(other.c.get<conditional_intra_du_mob_info_s>());
      break;
    case types::f1_c_transfer_path:
      c.set(other.c.get<f1_c_transfer_path_s>());
      break;
    case types::scg_ind:
      c.set(other.c.get<scg_ind_e>());
      break;
    case types::ul_tx_direct_current_two_carrier_list_info:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::iab_conditional_rrc_msg_delivery_ind:
      c.set(other.c.get<iab_conditional_rrc_msg_delivery_ind_e>());
      break;
    case types::f1_c_transfer_path_nr_dc:
      c.set(other.c.get<f1_c_transfer_path_nr_dc_s>());
      break;
    case types::mdt_polluted_meas_ind:
      c.set(other.c.get<mdt_polluted_meas_ind_e>());
      break;
    case types::scg_activation_request:
      c.set(other.c.get<scg_activation_request_e>());
      break;
    case types::cg_sdt_query_ind:
      c.set(other.c.get<cg_sdt_query_ind_e>());
      break;
    case types::five_g_pro_se_authorized:
      c.set(other.c.get<five_g_pro_se_authorized_s>());
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      c.set(other.c.get<nr_ue_sidelink_aggr_max_bitrate_s>());
      break;
    case types::five_g_pro_se_pc5_link_ambr:
      c.set(other.c.get<uint64_t>());
      break;
    case types::upd_remote_ue_local_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      c.set(other.c.get<uu_rlc_ch_to_be_setup_list_l>());
      break;
    case types::uu_rlc_ch_to_be_modified_list:
      c.set(other.c.get<uu_rlc_ch_to_be_modified_list_l>());
      break;
    case types::uu_rlc_ch_to_be_released_list:
      c.set(other.c.get<uu_rlc_ch_to_be_released_list_l>());
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      c.set(other.c.get<pc5_rlc_ch_to_be_setup_list_l>());
      break;
    case types::pc5_rlc_ch_to_be_modified_list:
      c.set(other.c.get<pc5_rlc_ch_to_be_modified_list_l>());
      break;
    case types::pc5_rlc_ch_to_be_released_list:
      c.set(other.c.get<pc5_rlc_ch_to_be_released_list_l>());
      break;
    case types::path_switch_cfg:
      c.set(other.c.get<path_switch_cfg_s>());
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      c.set(other.c.get<gnb_du_ue_slice_max_bit_rate_list_l>());
      break;
    case types::multicast_mbs_session_setup_list:
      c.set(other.c.get<multicast_mbs_session_list_l>());
      break;
    case types::multicast_mbs_session_rem_list:
      c.set(other.c.get<multicast_mbs_session_list_l>());
      break;
    case types::ue_multicast_m_rbs_to_be_setup_at_modify_list:
      c.set(other.c.get<ue_multicast_m_rbs_to_be_setup_at_modify_list_l>());
      break;
    case types::ue_multicast_m_rbs_to_be_released_list:
      c.set(other.c.get<ue_multicast_m_rbs_to_be_released_list_l>());
      break;
    case types::sldrx_cycle_list:
      c.set(other.c.get<sldrx_cycle_list_l>());
      break;
    case types::management_based_mdt_plmn_mod_list:
      c.set(other.c.get<mdt_plmn_mod_list_l>());
      break;
    case types::sdt_bearer_cfg_query_ind:
      c.set(other.c.get<sdt_bearer_cfg_query_ind_e>());
      break;
    case types::daps_ho_status:
      c.set(other.c.get<daps_ho_status_e>());
      break;
    case types::serving_cell_mo_list:
      c.set(other.c.get<serving_cell_mo_list_l>());
      break;
    case types::ul_tx_direct_current_more_carrier_info:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::cp_acmcg_info:
      c.set(other.c.get<cp_acmcg_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_mod_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_mod_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
nr_cgi_s& ue_context_mod_request_ies_o::value_c::sp_cell_id()
{
  assert_choice_type(types::sp_cell_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
uint8_t& ue_context_mod_request_ies_o::value_c::serv_cell_idx()
{
  assert_choice_type(types::serv_cell_idx, type_, "Value");
  return c.get<uint8_t>();
}
cell_ul_cfg_e& ue_context_mod_request_ies_o::value_c::sp_cell_ul_cfg()
{
  assert_choice_type(types::sp_cell_ul_cfg, type_, "Value");
  return c.get<cell_ul_cfg_e>();
}
drx_cycle_s& ue_context_mod_request_ies_o::value_c::drx_cycle()
{
  assert_choice_type(types::drx_cycle, type_, "Value");
  return c.get<drx_cycle_s>();
}
cu_to_du_rrc_info_s& ue_context_mod_request_ies_o::value_c::cu_to_du_rrc_info()
{
  assert_choice_type(types::cu_to_du_rrc_info, type_, "Value");
  return c.get<cu_to_du_rrc_info_s>();
}
tx_action_ind_e& ue_context_mod_request_ies_o::value_c::tx_action_ind()
{
  assert_choice_type(types::tx_action_ind, type_, "Value");
  return c.get<tx_action_ind_e>();
}
unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::res_coordination_transfer_container()
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
rrc_recfg_complete_ind_e& ue_context_mod_request_ies_o::value_c::rrc_recfg_complete_ind()
{
  assert_choice_type(types::rrc_recfg_complete_ind, type_, "Value");
  return c.get<rrc_recfg_complete_ind_e>();
}
unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
scell_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::scell_to_be_setup_mod_list()
{
  assert_choice_type(types::scell_to_be_setup_mod_list, type_, "Value");
  return c.get<scell_to_be_setup_mod_list_l>();
}
scell_to_be_remd_list_l& ue_context_mod_request_ies_o::value_c::scell_to_be_remd_list()
{
  assert_choice_type(types::scell_to_be_remd_list, type_, "Value");
  return c.get<scell_to_be_remd_list_l>();
}
srbs_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::srbs_to_be_setup_mod_list()
{
  assert_choice_type(types::srbs_to_be_setup_mod_list, type_, "Value");
  return c.get<srbs_to_be_setup_mod_list_l>();
}
drbs_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::drbs_to_be_setup_mod_list()
{
  assert_choice_type(types::drbs_to_be_setup_mod_list, type_, "Value");
  return c.get<drbs_to_be_setup_mod_list_l>();
}
drbs_to_be_modified_list_l& ue_context_mod_request_ies_o::value_c::drbs_to_be_modified_list()
{
  assert_choice_type(types::drbs_to_be_modified_list, type_, "Value");
  return c.get<drbs_to_be_modified_list_l>();
}
srbs_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::srbs_to_be_released_list()
{
  assert_choice_type(types::srbs_to_be_released_list, type_, "Value");
  return c.get<srbs_to_be_released_list_l>();
}
drbs_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::drbs_to_be_released_list()
{
  assert_choice_type(types::drbs_to_be_released_list, type_, "Value");
  return c.get<drbs_to_be_released_list_l>();
}
inactivity_monitoring_request_e& ue_context_mod_request_ies_o::value_c::inactivity_monitoring_request()
{
  assert_choice_type(types::inactivity_monitoring_request, type_, "Value");
  return c.get<inactivity_monitoring_request_e>();
}
rat_freq_prio_info_c& ue_context_mod_request_ies_o::value_c::rat_freq_prio_info()
{
  assert_choice_type(types::rat_freq_prio_info, type_, "Value");
  return c.get<rat_freq_prio_info_c>();
}
drx_cfg_ind_e& ue_context_mod_request_ies_o::value_c::drx_cfg_ind()
{
  assert_choice_type(types::drx_cfg_ind, type_, "Value");
  return c.get<drx_cfg_ind_e>();
}
rlc_fail_ind_s& ue_context_mod_request_ies_o::value_c::rlc_fail_ind()
{
  assert_choice_type(types::rlc_fail_ind, type_, "Value");
  return c.get<rlc_fail_ind_s>();
}
unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::ul_tx_direct_current_list_info()
{
  assert_choice_type(types::ul_tx_direct_current_list_info, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
gnb_du_cfg_query_e& ue_context_mod_request_ies_o::value_c::gnb_du_cfg_query()
{
  assert_choice_type(types::gnb_du_cfg_query, type_, "Value");
  return c.get<gnb_du_cfg_query_e>();
}
uint64_t& ue_context_mod_request_ies_o::value_c::gnb_du_ue_ambr_ul()
{
  assert_choice_type(types::gnb_du_ue_ambr_ul, type_, "Value");
  return c.get<uint64_t>();
}
execute_dupl_e& ue_context_mod_request_ies_o::value_c::execute_dupl()
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
rrc_delivery_status_request_e& ue_context_mod_request_ies_o::value_c::rrc_delivery_status_request()
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
res_coordination_transfer_info_s& ue_context_mod_request_ies_o::value_c::res_coordination_transfer_info()
{
  assert_choice_type(types::res_coordination_transfer_info, type_, "Value");
  return c.get<res_coordination_transfer_info_s>();
}
uint8_t& ue_context_mod_request_ies_o::value_c::serving_cell_mo()
{
  assert_choice_type(types::serving_cell_mo, type_, "Value");
  return c.get<uint8_t>();
}
needfor_gap_e& ue_context_mod_request_ies_o::value_c::needfor_gap()
{
  assert_choice_type(types::needfor_gap, type_, "Value");
  return c.get<needfor_gap_e>();
}
full_cfg_e& ue_context_mod_request_ies_o::value_c::full_cfg()
{
  assert_choice_type(types::full_cfg, type_, "Value");
  return c.get<full_cfg_e>();
}
fixed_bitstring<32, false, true>& ue_context_mod_request_ies_o::value_c::add_rrm_prio_idx()
{
  assert_choice_type(types::add_rrm_prio_idx, type_, "Value");
  return c.get<fixed_bitstring<32, false, true>>();
}
lower_layer_presence_status_change_e& ue_context_mod_request_ies_o::value_c::lower_layer_presence_status_change()
{
  assert_choice_type(types::lower_layer_presence_status_change, type_, "Value");
  return c.get<lower_layer_presence_status_change_e>();
}
bh_chs_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::bh_chs_to_be_setup_mod_list()
{
  assert_choice_type(types::bh_chs_to_be_setup_mod_list, type_, "Value");
  return c.get<bh_chs_to_be_setup_mod_list_l>();
}
bh_chs_to_be_modified_list_l& ue_context_mod_request_ies_o::value_c::bh_chs_to_be_modified_list()
{
  assert_choice_type(types::bh_chs_to_be_modified_list, type_, "Value");
  return c.get<bh_chs_to_be_modified_list_l>();
}
bh_chs_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::bh_chs_to_be_released_list()
{
  assert_choice_type(types::bh_chs_to_be_released_list, type_, "Value");
  return c.get<bh_chs_to_be_released_list_l>();
}
nr_v2x_services_authorized_s& ue_context_mod_request_ies_o::value_c::nr_v2x_services_authorized()
{
  assert_choice_type(types::nr_v2x_services_authorized, type_, "Value");
  return c.get<nr_v2x_services_authorized_s>();
}
ltev2x_services_authorized_s& ue_context_mod_request_ies_o::value_c::ltev2x_services_authorized()
{
  assert_choice_type(types::ltev2x_services_authorized, type_, "Value");
  return c.get<ltev2x_services_authorized_s>();
}
nr_ue_sidelink_aggr_max_bitrate_s& ue_context_mod_request_ies_o::value_c::nr_ue_sidelink_aggr_max_bitrate()
{
  assert_choice_type(types::nr_ue_sidelink_aggr_max_bitrate, type_, "Value");
  return c.get<nr_ue_sidelink_aggr_max_bitrate_s>();
}
lte_ue_sidelink_aggr_max_bitrate_s& ue_context_mod_request_ies_o::value_c::lte_ue_sidelink_aggr_max_bitrate()
{
  assert_choice_type(types::lte_ue_sidelink_aggr_max_bitrate, type_, "Value");
  return c.get<lte_ue_sidelink_aggr_max_bitrate_s>();
}
uint64_t& ue_context_mod_request_ies_o::value_c::pc5_link_ambr()
{
  assert_choice_type(types::pc5_link_ambr, type_, "Value");
  return c.get<uint64_t>();
}
sl_drbs_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::sl_drbs_to_be_setup_mod_list()
{
  assert_choice_type(types::sl_drbs_to_be_setup_mod_list, type_, "Value");
  return c.get<sl_drbs_to_be_setup_mod_list_l>();
}
sl_drbs_to_be_modified_list_l& ue_context_mod_request_ies_o::value_c::sl_drbs_to_be_modified_list()
{
  assert_choice_type(types::sl_drbs_to_be_modified_list, type_, "Value");
  return c.get<sl_drbs_to_be_modified_list_l>();
}
sl_drbs_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::sl_drbs_to_be_released_list()
{
  assert_choice_type(types::sl_drbs_to_be_released_list, type_, "Value");
  return c.get<sl_drbs_to_be_released_list_l>();
}
conditional_intra_du_mob_info_s& ue_context_mod_request_ies_o::value_c::conditional_intra_du_mob_info()
{
  assert_choice_type(types::conditional_intra_du_mob_info, type_, "Value");
  return c.get<conditional_intra_du_mob_info_s>();
}
f1_c_transfer_path_s& ue_context_mod_request_ies_o::value_c::f1_c_transfer_path()
{
  assert_choice_type(types::f1_c_transfer_path, type_, "Value");
  return c.get<f1_c_transfer_path_s>();
}
scg_ind_e& ue_context_mod_request_ies_o::value_c::scg_ind()
{
  assert_choice_type(types::scg_ind, type_, "Value");
  return c.get<scg_ind_e>();
}
unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::ul_tx_direct_current_two_carrier_list_info()
{
  assert_choice_type(types::ul_tx_direct_current_two_carrier_list_info, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
iab_conditional_rrc_msg_delivery_ind_e& ue_context_mod_request_ies_o::value_c::iab_conditional_rrc_msg_delivery_ind()
{
  assert_choice_type(types::iab_conditional_rrc_msg_delivery_ind, type_, "Value");
  return c.get<iab_conditional_rrc_msg_delivery_ind_e>();
}
f1_c_transfer_path_nr_dc_s& ue_context_mod_request_ies_o::value_c::f1_c_transfer_path_nr_dc()
{
  assert_choice_type(types::f1_c_transfer_path_nr_dc, type_, "Value");
  return c.get<f1_c_transfer_path_nr_dc_s>();
}
mdt_polluted_meas_ind_e& ue_context_mod_request_ies_o::value_c::mdt_polluted_meas_ind()
{
  assert_choice_type(types::mdt_polluted_meas_ind, type_, "Value");
  return c.get<mdt_polluted_meas_ind_e>();
}
scg_activation_request_e& ue_context_mod_request_ies_o::value_c::scg_activation_request()
{
  assert_choice_type(types::scg_activation_request, type_, "Value");
  return c.get<scg_activation_request_e>();
}
cg_sdt_query_ind_e& ue_context_mod_request_ies_o::value_c::cg_sdt_query_ind()
{
  assert_choice_type(types::cg_sdt_query_ind, type_, "Value");
  return c.get<cg_sdt_query_ind_e>();
}
five_g_pro_se_authorized_s& ue_context_mod_request_ies_o::value_c::five_g_pro_se_authorized()
{
  assert_choice_type(types::five_g_pro_se_authorized, type_, "Value");
  return c.get<five_g_pro_se_authorized_s>();
}
nr_ue_sidelink_aggr_max_bitrate_s& ue_context_mod_request_ies_o::value_c::five_g_pro_se_ue_pc5_aggr_max_bitrate()
{
  assert_choice_type(types::five_g_pro_se_ue_pc5_aggr_max_bitrate, type_, "Value");
  return c.get<nr_ue_sidelink_aggr_max_bitrate_s>();
}
uint64_t& ue_context_mod_request_ies_o::value_c::five_g_pro_se_pc5_link_ambr()
{
  assert_choice_type(types::five_g_pro_se_pc5_link_ambr, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& ue_context_mod_request_ies_o::value_c::upd_remote_ue_local_id()
{
  assert_choice_type(types::upd_remote_ue_local_id, type_, "Value");
  return c.get<uint16_t>();
}
uu_rlc_ch_to_be_setup_list_l& ue_context_mod_request_ies_o::value_c::uu_rlc_ch_to_be_setup_list()
{
  assert_choice_type(types::uu_rlc_ch_to_be_setup_list, type_, "Value");
  return c.get<uu_rlc_ch_to_be_setup_list_l>();
}
uu_rlc_ch_to_be_modified_list_l& ue_context_mod_request_ies_o::value_c::uu_rlc_ch_to_be_modified_list()
{
  assert_choice_type(types::uu_rlc_ch_to_be_modified_list, type_, "Value");
  return c.get<uu_rlc_ch_to_be_modified_list_l>();
}
uu_rlc_ch_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::uu_rlc_ch_to_be_released_list()
{
  assert_choice_type(types::uu_rlc_ch_to_be_released_list, type_, "Value");
  return c.get<uu_rlc_ch_to_be_released_list_l>();
}
pc5_rlc_ch_to_be_setup_list_l& ue_context_mod_request_ies_o::value_c::pc5_rlc_ch_to_be_setup_list()
{
  assert_choice_type(types::pc5_rlc_ch_to_be_setup_list, type_, "Value");
  return c.get<pc5_rlc_ch_to_be_setup_list_l>();
}
pc5_rlc_ch_to_be_modified_list_l& ue_context_mod_request_ies_o::value_c::pc5_rlc_ch_to_be_modified_list()
{
  assert_choice_type(types::pc5_rlc_ch_to_be_modified_list, type_, "Value");
  return c.get<pc5_rlc_ch_to_be_modified_list_l>();
}
pc5_rlc_ch_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::pc5_rlc_ch_to_be_released_list()
{
  assert_choice_type(types::pc5_rlc_ch_to_be_released_list, type_, "Value");
  return c.get<pc5_rlc_ch_to_be_released_list_l>();
}
path_switch_cfg_s& ue_context_mod_request_ies_o::value_c::path_switch_cfg()
{
  assert_choice_type(types::path_switch_cfg, type_, "Value");
  return c.get<path_switch_cfg_s>();
}
gnb_du_ue_slice_max_bit_rate_list_l& ue_context_mod_request_ies_o::value_c::gnb_du_ue_slice_max_bit_rate_list()
{
  assert_choice_type(types::gnb_du_ue_slice_max_bit_rate_list, type_, "Value");
  return c.get<gnb_du_ue_slice_max_bit_rate_list_l>();
}
multicast_mbs_session_list_l& ue_context_mod_request_ies_o::value_c::multicast_mbs_session_setup_list()
{
  assert_choice_type(types::multicast_mbs_session_setup_list, type_, "Value");
  return c.get<multicast_mbs_session_list_l>();
}
multicast_mbs_session_list_l& ue_context_mod_request_ies_o::value_c::multicast_mbs_session_rem_list()
{
  assert_choice_type(types::multicast_mbs_session_rem_list, type_, "Value");
  return c.get<multicast_mbs_session_list_l>();
}
ue_multicast_m_rbs_to_be_setup_at_modify_list_l&
ue_context_mod_request_ies_o::value_c::ue_multicast_m_rbs_to_be_setup_at_modify_list()
{
  assert_choice_type(types::ue_multicast_m_rbs_to_be_setup_at_modify_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_to_be_setup_at_modify_list_l>();
}
ue_multicast_m_rbs_to_be_released_list_l&
ue_context_mod_request_ies_o::value_c::ue_multicast_m_rbs_to_be_released_list()
{
  assert_choice_type(types::ue_multicast_m_rbs_to_be_released_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_to_be_released_list_l>();
}
sldrx_cycle_list_l& ue_context_mod_request_ies_o::value_c::sldrx_cycle_list()
{
  assert_choice_type(types::sldrx_cycle_list, type_, "Value");
  return c.get<sldrx_cycle_list_l>();
}
mdt_plmn_mod_list_l& ue_context_mod_request_ies_o::value_c::management_based_mdt_plmn_mod_list()
{
  assert_choice_type(types::management_based_mdt_plmn_mod_list, type_, "Value");
  return c.get<mdt_plmn_mod_list_l>();
}
sdt_bearer_cfg_query_ind_e& ue_context_mod_request_ies_o::value_c::sdt_bearer_cfg_query_ind()
{
  assert_choice_type(types::sdt_bearer_cfg_query_ind, type_, "Value");
  return c.get<sdt_bearer_cfg_query_ind_e>();
}
daps_ho_status_e& ue_context_mod_request_ies_o::value_c::daps_ho_status()
{
  assert_choice_type(types::daps_ho_status, type_, "Value");
  return c.get<daps_ho_status_e>();
}
serving_cell_mo_list_l& ue_context_mod_request_ies_o::value_c::serving_cell_mo_list()
{
  assert_choice_type(types::serving_cell_mo_list, type_, "Value");
  return c.get<serving_cell_mo_list_l>();
}
unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::ul_tx_direct_current_more_carrier_info()
{
  assert_choice_type(types::ul_tx_direct_current_more_carrier_info, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
cp_acmcg_info_s& ue_context_mod_request_ies_o::value_c::cp_acmcg_info()
{
  assert_choice_type(types::cp_acmcg_info, type_, "Value");
  return c.get<cp_acmcg_info_s>();
}
const uint64_t& ue_context_mod_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_mod_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const nr_cgi_s& ue_context_mod_request_ies_o::value_c::sp_cell_id() const
{
  assert_choice_type(types::sp_cell_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
const uint8_t& ue_context_mod_request_ies_o::value_c::serv_cell_idx() const
{
  assert_choice_type(types::serv_cell_idx, type_, "Value");
  return c.get<uint8_t>();
}
const cell_ul_cfg_e& ue_context_mod_request_ies_o::value_c::sp_cell_ul_cfg() const
{
  assert_choice_type(types::sp_cell_ul_cfg, type_, "Value");
  return c.get<cell_ul_cfg_e>();
}
const drx_cycle_s& ue_context_mod_request_ies_o::value_c::drx_cycle() const
{
  assert_choice_type(types::drx_cycle, type_, "Value");
  return c.get<drx_cycle_s>();
}
const cu_to_du_rrc_info_s& ue_context_mod_request_ies_o::value_c::cu_to_du_rrc_info() const
{
  assert_choice_type(types::cu_to_du_rrc_info, type_, "Value");
  return c.get<cu_to_du_rrc_info_s>();
}
const tx_action_ind_e& ue_context_mod_request_ies_o::value_c::tx_action_ind() const
{
  assert_choice_type(types::tx_action_ind, type_, "Value");
  return c.get<tx_action_ind_e>();
}
const unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::res_coordination_transfer_container() const
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const rrc_recfg_complete_ind_e& ue_context_mod_request_ies_o::value_c::rrc_recfg_complete_ind() const
{
  assert_choice_type(types::rrc_recfg_complete_ind, type_, "Value");
  return c.get<rrc_recfg_complete_ind_e>();
}
const unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const scell_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::scell_to_be_setup_mod_list() const
{
  assert_choice_type(types::scell_to_be_setup_mod_list, type_, "Value");
  return c.get<scell_to_be_setup_mod_list_l>();
}
const scell_to_be_remd_list_l& ue_context_mod_request_ies_o::value_c::scell_to_be_remd_list() const
{
  assert_choice_type(types::scell_to_be_remd_list, type_, "Value");
  return c.get<scell_to_be_remd_list_l>();
}
const srbs_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::srbs_to_be_setup_mod_list() const
{
  assert_choice_type(types::srbs_to_be_setup_mod_list, type_, "Value");
  return c.get<srbs_to_be_setup_mod_list_l>();
}
const drbs_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::drbs_to_be_setup_mod_list() const
{
  assert_choice_type(types::drbs_to_be_setup_mod_list, type_, "Value");
  return c.get<drbs_to_be_setup_mod_list_l>();
}
const drbs_to_be_modified_list_l& ue_context_mod_request_ies_o::value_c::drbs_to_be_modified_list() const
{
  assert_choice_type(types::drbs_to_be_modified_list, type_, "Value");
  return c.get<drbs_to_be_modified_list_l>();
}
const srbs_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::srbs_to_be_released_list() const
{
  assert_choice_type(types::srbs_to_be_released_list, type_, "Value");
  return c.get<srbs_to_be_released_list_l>();
}
const drbs_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::drbs_to_be_released_list() const
{
  assert_choice_type(types::drbs_to_be_released_list, type_, "Value");
  return c.get<drbs_to_be_released_list_l>();
}
const inactivity_monitoring_request_e& ue_context_mod_request_ies_o::value_c::inactivity_monitoring_request() const
{
  assert_choice_type(types::inactivity_monitoring_request, type_, "Value");
  return c.get<inactivity_monitoring_request_e>();
}
const rat_freq_prio_info_c& ue_context_mod_request_ies_o::value_c::rat_freq_prio_info() const
{
  assert_choice_type(types::rat_freq_prio_info, type_, "Value");
  return c.get<rat_freq_prio_info_c>();
}
const drx_cfg_ind_e& ue_context_mod_request_ies_o::value_c::drx_cfg_ind() const
{
  assert_choice_type(types::drx_cfg_ind, type_, "Value");
  return c.get<drx_cfg_ind_e>();
}
const rlc_fail_ind_s& ue_context_mod_request_ies_o::value_c::rlc_fail_ind() const
{
  assert_choice_type(types::rlc_fail_ind, type_, "Value");
  return c.get<rlc_fail_ind_s>();
}
const unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::ul_tx_direct_current_list_info() const
{
  assert_choice_type(types::ul_tx_direct_current_list_info, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const gnb_du_cfg_query_e& ue_context_mod_request_ies_o::value_c::gnb_du_cfg_query() const
{
  assert_choice_type(types::gnb_du_cfg_query, type_, "Value");
  return c.get<gnb_du_cfg_query_e>();
}
const uint64_t& ue_context_mod_request_ies_o::value_c::gnb_du_ue_ambr_ul() const
{
  assert_choice_type(types::gnb_du_ue_ambr_ul, type_, "Value");
  return c.get<uint64_t>();
}
const execute_dupl_e& ue_context_mod_request_ies_o::value_c::execute_dupl() const
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
const rrc_delivery_status_request_e& ue_context_mod_request_ies_o::value_c::rrc_delivery_status_request() const
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
const res_coordination_transfer_info_s& ue_context_mod_request_ies_o::value_c::res_coordination_transfer_info() const
{
  assert_choice_type(types::res_coordination_transfer_info, type_, "Value");
  return c.get<res_coordination_transfer_info_s>();
}
const uint8_t& ue_context_mod_request_ies_o::value_c::serving_cell_mo() const
{
  assert_choice_type(types::serving_cell_mo, type_, "Value");
  return c.get<uint8_t>();
}
const needfor_gap_e& ue_context_mod_request_ies_o::value_c::needfor_gap() const
{
  assert_choice_type(types::needfor_gap, type_, "Value");
  return c.get<needfor_gap_e>();
}
const full_cfg_e& ue_context_mod_request_ies_o::value_c::full_cfg() const
{
  assert_choice_type(types::full_cfg, type_, "Value");
  return c.get<full_cfg_e>();
}
const fixed_bitstring<32, false, true>& ue_context_mod_request_ies_o::value_c::add_rrm_prio_idx() const
{
  assert_choice_type(types::add_rrm_prio_idx, type_, "Value");
  return c.get<fixed_bitstring<32, false, true>>();
}
const lower_layer_presence_status_change_e&
ue_context_mod_request_ies_o::value_c::lower_layer_presence_status_change() const
{
  assert_choice_type(types::lower_layer_presence_status_change, type_, "Value");
  return c.get<lower_layer_presence_status_change_e>();
}
const bh_chs_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::bh_chs_to_be_setup_mod_list() const
{
  assert_choice_type(types::bh_chs_to_be_setup_mod_list, type_, "Value");
  return c.get<bh_chs_to_be_setup_mod_list_l>();
}
const bh_chs_to_be_modified_list_l& ue_context_mod_request_ies_o::value_c::bh_chs_to_be_modified_list() const
{
  assert_choice_type(types::bh_chs_to_be_modified_list, type_, "Value");
  return c.get<bh_chs_to_be_modified_list_l>();
}
const bh_chs_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::bh_chs_to_be_released_list() const
{
  assert_choice_type(types::bh_chs_to_be_released_list, type_, "Value");
  return c.get<bh_chs_to_be_released_list_l>();
}
const nr_v2x_services_authorized_s& ue_context_mod_request_ies_o::value_c::nr_v2x_services_authorized() const
{
  assert_choice_type(types::nr_v2x_services_authorized, type_, "Value");
  return c.get<nr_v2x_services_authorized_s>();
}
const ltev2x_services_authorized_s& ue_context_mod_request_ies_o::value_c::ltev2x_services_authorized() const
{
  assert_choice_type(types::ltev2x_services_authorized, type_, "Value");
  return c.get<ltev2x_services_authorized_s>();
}
const nr_ue_sidelink_aggr_max_bitrate_s& ue_context_mod_request_ies_o::value_c::nr_ue_sidelink_aggr_max_bitrate() const
{
  assert_choice_type(types::nr_ue_sidelink_aggr_max_bitrate, type_, "Value");
  return c.get<nr_ue_sidelink_aggr_max_bitrate_s>();
}
const lte_ue_sidelink_aggr_max_bitrate_s&
ue_context_mod_request_ies_o::value_c::lte_ue_sidelink_aggr_max_bitrate() const
{
  assert_choice_type(types::lte_ue_sidelink_aggr_max_bitrate, type_, "Value");
  return c.get<lte_ue_sidelink_aggr_max_bitrate_s>();
}
const uint64_t& ue_context_mod_request_ies_o::value_c::pc5_link_ambr() const
{
  assert_choice_type(types::pc5_link_ambr, type_, "Value");
  return c.get<uint64_t>();
}
const sl_drbs_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::sl_drbs_to_be_setup_mod_list() const
{
  assert_choice_type(types::sl_drbs_to_be_setup_mod_list, type_, "Value");
  return c.get<sl_drbs_to_be_setup_mod_list_l>();
}
const sl_drbs_to_be_modified_list_l& ue_context_mod_request_ies_o::value_c::sl_drbs_to_be_modified_list() const
{
  assert_choice_type(types::sl_drbs_to_be_modified_list, type_, "Value");
  return c.get<sl_drbs_to_be_modified_list_l>();
}
const sl_drbs_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::sl_drbs_to_be_released_list() const
{
  assert_choice_type(types::sl_drbs_to_be_released_list, type_, "Value");
  return c.get<sl_drbs_to_be_released_list_l>();
}
const conditional_intra_du_mob_info_s& ue_context_mod_request_ies_o::value_c::conditional_intra_du_mob_info() const
{
  assert_choice_type(types::conditional_intra_du_mob_info, type_, "Value");
  return c.get<conditional_intra_du_mob_info_s>();
}
const f1_c_transfer_path_s& ue_context_mod_request_ies_o::value_c::f1_c_transfer_path() const
{
  assert_choice_type(types::f1_c_transfer_path, type_, "Value");
  return c.get<f1_c_transfer_path_s>();
}
const scg_ind_e& ue_context_mod_request_ies_o::value_c::scg_ind() const
{
  assert_choice_type(types::scg_ind, type_, "Value");
  return c.get<scg_ind_e>();
}
const unbounded_octstring<true>&
ue_context_mod_request_ies_o::value_c::ul_tx_direct_current_two_carrier_list_info() const
{
  assert_choice_type(types::ul_tx_direct_current_two_carrier_list_info, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const iab_conditional_rrc_msg_delivery_ind_e&
ue_context_mod_request_ies_o::value_c::iab_conditional_rrc_msg_delivery_ind() const
{
  assert_choice_type(types::iab_conditional_rrc_msg_delivery_ind, type_, "Value");
  return c.get<iab_conditional_rrc_msg_delivery_ind_e>();
}
const f1_c_transfer_path_nr_dc_s& ue_context_mod_request_ies_o::value_c::f1_c_transfer_path_nr_dc() const
{
  assert_choice_type(types::f1_c_transfer_path_nr_dc, type_, "Value");
  return c.get<f1_c_transfer_path_nr_dc_s>();
}
const mdt_polluted_meas_ind_e& ue_context_mod_request_ies_o::value_c::mdt_polluted_meas_ind() const
{
  assert_choice_type(types::mdt_polluted_meas_ind, type_, "Value");
  return c.get<mdt_polluted_meas_ind_e>();
}
const scg_activation_request_e& ue_context_mod_request_ies_o::value_c::scg_activation_request() const
{
  assert_choice_type(types::scg_activation_request, type_, "Value");
  return c.get<scg_activation_request_e>();
}
const cg_sdt_query_ind_e& ue_context_mod_request_ies_o::value_c::cg_sdt_query_ind() const
{
  assert_choice_type(types::cg_sdt_query_ind, type_, "Value");
  return c.get<cg_sdt_query_ind_e>();
}
const five_g_pro_se_authorized_s& ue_context_mod_request_ies_o::value_c::five_g_pro_se_authorized() const
{
  assert_choice_type(types::five_g_pro_se_authorized, type_, "Value");
  return c.get<five_g_pro_se_authorized_s>();
}
const nr_ue_sidelink_aggr_max_bitrate_s&
ue_context_mod_request_ies_o::value_c::five_g_pro_se_ue_pc5_aggr_max_bitrate() const
{
  assert_choice_type(types::five_g_pro_se_ue_pc5_aggr_max_bitrate, type_, "Value");
  return c.get<nr_ue_sidelink_aggr_max_bitrate_s>();
}
const uint64_t& ue_context_mod_request_ies_o::value_c::five_g_pro_se_pc5_link_ambr() const
{
  assert_choice_type(types::five_g_pro_se_pc5_link_ambr, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& ue_context_mod_request_ies_o::value_c::upd_remote_ue_local_id() const
{
  assert_choice_type(types::upd_remote_ue_local_id, type_, "Value");
  return c.get<uint16_t>();
}
const uu_rlc_ch_to_be_setup_list_l& ue_context_mod_request_ies_o::value_c::uu_rlc_ch_to_be_setup_list() const
{
  assert_choice_type(types::uu_rlc_ch_to_be_setup_list, type_, "Value");
  return c.get<uu_rlc_ch_to_be_setup_list_l>();
}
const uu_rlc_ch_to_be_modified_list_l& ue_context_mod_request_ies_o::value_c::uu_rlc_ch_to_be_modified_list() const
{
  assert_choice_type(types::uu_rlc_ch_to_be_modified_list, type_, "Value");
  return c.get<uu_rlc_ch_to_be_modified_list_l>();
}
const uu_rlc_ch_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::uu_rlc_ch_to_be_released_list() const
{
  assert_choice_type(types::uu_rlc_ch_to_be_released_list, type_, "Value");
  return c.get<uu_rlc_ch_to_be_released_list_l>();
}
const pc5_rlc_ch_to_be_setup_list_l& ue_context_mod_request_ies_o::value_c::pc5_rlc_ch_to_be_setup_list() const
{
  assert_choice_type(types::pc5_rlc_ch_to_be_setup_list, type_, "Value");
  return c.get<pc5_rlc_ch_to_be_setup_list_l>();
}
const pc5_rlc_ch_to_be_modified_list_l& ue_context_mod_request_ies_o::value_c::pc5_rlc_ch_to_be_modified_list() const
{
  assert_choice_type(types::pc5_rlc_ch_to_be_modified_list, type_, "Value");
  return c.get<pc5_rlc_ch_to_be_modified_list_l>();
}
const pc5_rlc_ch_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::pc5_rlc_ch_to_be_released_list() const
{
  assert_choice_type(types::pc5_rlc_ch_to_be_released_list, type_, "Value");
  return c.get<pc5_rlc_ch_to_be_released_list_l>();
}
const path_switch_cfg_s& ue_context_mod_request_ies_o::value_c::path_switch_cfg() const
{
  assert_choice_type(types::path_switch_cfg, type_, "Value");
  return c.get<path_switch_cfg_s>();
}
const gnb_du_ue_slice_max_bit_rate_list_l&
ue_context_mod_request_ies_o::value_c::gnb_du_ue_slice_max_bit_rate_list() const
{
  assert_choice_type(types::gnb_du_ue_slice_max_bit_rate_list, type_, "Value");
  return c.get<gnb_du_ue_slice_max_bit_rate_list_l>();
}
const multicast_mbs_session_list_l& ue_context_mod_request_ies_o::value_c::multicast_mbs_session_setup_list() const
{
  assert_choice_type(types::multicast_mbs_session_setup_list, type_, "Value");
  return c.get<multicast_mbs_session_list_l>();
}
const multicast_mbs_session_list_l& ue_context_mod_request_ies_o::value_c::multicast_mbs_session_rem_list() const
{
  assert_choice_type(types::multicast_mbs_session_rem_list, type_, "Value");
  return c.get<multicast_mbs_session_list_l>();
}
const ue_multicast_m_rbs_to_be_setup_at_modify_list_l&
ue_context_mod_request_ies_o::value_c::ue_multicast_m_rbs_to_be_setup_at_modify_list() const
{
  assert_choice_type(types::ue_multicast_m_rbs_to_be_setup_at_modify_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_to_be_setup_at_modify_list_l>();
}
const ue_multicast_m_rbs_to_be_released_list_l&
ue_context_mod_request_ies_o::value_c::ue_multicast_m_rbs_to_be_released_list() const
{
  assert_choice_type(types::ue_multicast_m_rbs_to_be_released_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_to_be_released_list_l>();
}
const sldrx_cycle_list_l& ue_context_mod_request_ies_o::value_c::sldrx_cycle_list() const
{
  assert_choice_type(types::sldrx_cycle_list, type_, "Value");
  return c.get<sldrx_cycle_list_l>();
}
const mdt_plmn_mod_list_l& ue_context_mod_request_ies_o::value_c::management_based_mdt_plmn_mod_list() const
{
  assert_choice_type(types::management_based_mdt_plmn_mod_list, type_, "Value");
  return c.get<mdt_plmn_mod_list_l>();
}
const sdt_bearer_cfg_query_ind_e& ue_context_mod_request_ies_o::value_c::sdt_bearer_cfg_query_ind() const
{
  assert_choice_type(types::sdt_bearer_cfg_query_ind, type_, "Value");
  return c.get<sdt_bearer_cfg_query_ind_e>();
}
const daps_ho_status_e& ue_context_mod_request_ies_o::value_c::daps_ho_status() const
{
  assert_choice_type(types::daps_ho_status, type_, "Value");
  return c.get<daps_ho_status_e>();
}
const serving_cell_mo_list_l& ue_context_mod_request_ies_o::value_c::serving_cell_mo_list() const
{
  assert_choice_type(types::serving_cell_mo_list, type_, "Value");
  return c.get<serving_cell_mo_list_l>();
}
const unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::ul_tx_direct_current_more_carrier_info() const
{
  assert_choice_type(types::ul_tx_direct_current_more_carrier_info, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const cp_acmcg_info_s& ue_context_mod_request_ies_o::value_c::cp_acmcg_info() const
{
  assert_choice_type(types::cp_acmcg_info, type_, "Value");
  return c.get<cp_acmcg_info_s>();
}
void ue_context_mod_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::sp_cell_id:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    case types::serv_cell_idx:
      j.write_int("INTEGER (0..31,...)", c.get<uint8_t>());
      break;
    case types::sp_cell_ul_cfg:
      j.write_str("CellULConfigured", c.get<cell_ul_cfg_e>().to_string());
      break;
    case types::drx_cycle:
      j.write_fieldname("DRXCycle");
      c.get<drx_cycle_s>().to_json(j);
      break;
    case types::cu_to_du_rrc_info:
      j.write_fieldname("CUtoDURRCInformation");
      c.get<cu_to_du_rrc_info_s>().to_json(j);
      break;
    case types::tx_action_ind:
      j.write_str("TransmissionActionIndicator", c.get<tx_action_ind_e>().to_string());
      break;
    case types::res_coordination_transfer_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::rrc_recfg_complete_ind:
      j.write_str("RRCReconfigurationCompleteIndicator", c.get<rrc_recfg_complete_ind_e>().to_string());
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::scell_to_be_setup_mod_list:
      j.start_array("SCell-ToBeSetupMod-List");
      for (const auto& e1 : c.get<scell_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::scell_to_be_remd_list:
      j.start_array("SCell-ToBeRemoved-List");
      for (const auto& e1 : c.get<scell_to_be_remd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_to_be_setup_mod_list:
      j.start_array("SRBs-ToBeSetupMod-List");
      for (const auto& e1 : c.get<srbs_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_to_be_setup_mod_list:
      j.start_array("DRBs-ToBeSetupMod-List");
      for (const auto& e1 : c.get<drbs_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_to_be_modified_list:
      j.start_array("DRBs-ToBeModified-List");
      for (const auto& e1 : c.get<drbs_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_to_be_released_list:
      j.start_array("SRBs-ToBeReleased-List");
      for (const auto& e1 : c.get<srbs_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_to_be_released_list:
      j.start_array("DRBs-ToBeReleased-List");
      for (const auto& e1 : c.get<drbs_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::inactivity_monitoring_request:
      j.write_str("InactivityMonitoringRequest", "true");
      break;
    case types::rat_freq_prio_info:
      j.write_fieldname("RAT-FrequencyPriorityInformation");
      c.get<rat_freq_prio_info_c>().to_json(j);
      break;
    case types::drx_cfg_ind:
      j.write_str("DRXConfigurationIndicator", "release");
      break;
    case types::rlc_fail_ind:
      j.write_fieldname("RLCFailureIndication");
      c.get<rlc_fail_ind_s>().to_json(j);
      break;
    case types::ul_tx_direct_current_list_info:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::gnb_du_cfg_query:
      j.write_str("GNB-DUConfigurationQuery", "true");
      break;
    case types::gnb_du_ue_ambr_ul:
      j.write_int("INTEGER (0..4000000000000,...)", c.get<uint64_t>());
      break;
    case types::execute_dupl:
      j.write_str("ExecuteDuplication", "true");
      break;
    case types::rrc_delivery_status_request:
      j.write_str("RRCDeliveryStatusRequest", "true");
      break;
    case types::res_coordination_transfer_info:
      j.write_fieldname("ResourceCoordinationTransferInformation");
      c.get<res_coordination_transfer_info_s>().to_json(j);
      break;
    case types::serving_cell_mo:
      j.write_int("INTEGER (1..64,...)", c.get<uint8_t>());
      break;
    case types::needfor_gap:
      j.write_str("NeedforGap", "true");
      break;
    case types::full_cfg:
      j.write_str("FullConfiguration", "full");
      break;
    case types::add_rrm_prio_idx:
      j.write_str("BIT STRING", c.get<fixed_bitstring<32, false, true>>().to_string());
      break;
    case types::lower_layer_presence_status_change:
      j.write_str("LowerLayerPresenceStatusChange", c.get<lower_layer_presence_status_change_e>().to_string());
      break;
    case types::bh_chs_to_be_setup_mod_list:
      j.start_array("BHChannels-ToBeSetupMod-List");
      for (const auto& e1 : c.get<bh_chs_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::bh_chs_to_be_modified_list:
      j.start_array("BHChannels-ToBeModified-List");
      for (const auto& e1 : c.get<bh_chs_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::bh_chs_to_be_released_list:
      j.start_array("BHChannels-ToBeReleased-List");
      for (const auto& e1 : c.get<bh_chs_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::nr_v2x_services_authorized:
      j.write_fieldname("NRV2XServicesAuthorized");
      c.get<nr_v2x_services_authorized_s>().to_json(j);
      break;
    case types::ltev2x_services_authorized:
      j.write_fieldname("LTEV2XServicesAuthorized");
      c.get<ltev2x_services_authorized_s>().to_json(j);
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      j.write_fieldname("NRUESidelinkAggregateMaximumBitrate");
      c.get<nr_ue_sidelink_aggr_max_bitrate_s>().to_json(j);
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      j.write_fieldname("LTEUESidelinkAggregateMaximumBitrate");
      c.get<lte_ue_sidelink_aggr_max_bitrate_s>().to_json(j);
      break;
    case types::pc5_link_ambr:
      j.write_int("INTEGER (0..4000000000000,...)", c.get<uint64_t>());
      break;
    case types::sl_drbs_to_be_setup_mod_list:
      j.start_array("SLDRBs-ToBeSetupMod-List");
      for (const auto& e1 : c.get<sl_drbs_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sl_drbs_to_be_modified_list:
      j.start_array("SLDRBs-ToBeModified-List");
      for (const auto& e1 : c.get<sl_drbs_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sl_drbs_to_be_released_list:
      j.start_array("SLDRBs-ToBeReleased-List");
      for (const auto& e1 : c.get<sl_drbs_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::conditional_intra_du_mob_info:
      j.write_fieldname("ConditionalIntraDUMobilityInformation");
      c.get<conditional_intra_du_mob_info_s>().to_json(j);
      break;
    case types::f1_c_transfer_path:
      j.write_fieldname("F1CTransferPath");
      c.get<f1_c_transfer_path_s>().to_json(j);
      break;
    case types::scg_ind:
      j.write_str("SCGIndicator", "released");
      break;
    case types::ul_tx_direct_current_two_carrier_list_info:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::iab_conditional_rrc_msg_delivery_ind:
      j.write_str("IABConditionalRRCMessageDeliveryIndication", "true");
      break;
    case types::f1_c_transfer_path_nr_dc:
      j.write_fieldname("F1CTransferPathNRDC");
      c.get<f1_c_transfer_path_nr_dc_s>().to_json(j);
      break;
    case types::mdt_polluted_meas_ind:
      j.write_str("MDTPollutedMeasurementIndicator", c.get<mdt_polluted_meas_ind_e>().to_string());
      break;
    case types::scg_activation_request:
      j.write_str("SCGActivationRequest", c.get<scg_activation_request_e>().to_string());
      break;
    case types::cg_sdt_query_ind:
      j.write_str("CG-SDTQueryIndication", "true");
      break;
    case types::five_g_pro_se_authorized:
      j.write_fieldname("FiveG-ProSeAuthorized");
      c.get<five_g_pro_se_authorized_s>().to_json(j);
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      j.write_fieldname("NRUESidelinkAggregateMaximumBitrate");
      c.get<nr_ue_sidelink_aggr_max_bitrate_s>().to_json(j);
      break;
    case types::five_g_pro_se_pc5_link_ambr:
      j.write_int("INTEGER (0..4000000000000,...)", c.get<uint64_t>());
      break;
    case types::upd_remote_ue_local_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      j.start_array("UuRLCChannelToBeSetupList");
      for (const auto& e1 : c.get<uu_rlc_ch_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::uu_rlc_ch_to_be_modified_list:
      j.start_array("UuRLCChannelToBeModifiedList");
      for (const auto& e1 : c.get<uu_rlc_ch_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::uu_rlc_ch_to_be_released_list:
      j.start_array("UuRLCChannelToBeReleasedList");
      for (const auto& e1 : c.get<uu_rlc_ch_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      j.start_array("PC5RLCChannelToBeSetupList");
      for (const auto& e1 : c.get<pc5_rlc_ch_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pc5_rlc_ch_to_be_modified_list:
      j.start_array("PC5RLCChannelToBeModifiedList");
      for (const auto& e1 : c.get<pc5_rlc_ch_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pc5_rlc_ch_to_be_released_list:
      j.start_array("PC5RLCChannelToBeReleasedList");
      for (const auto& e1 : c.get<pc5_rlc_ch_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::path_switch_cfg:
      j.write_fieldname("PathSwitchConfiguration");
      c.get<path_switch_cfg_s>().to_json(j);
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      j.start_array("GNBDUUESliceMaximumBitRateList");
      for (const auto& e1 : c.get<gnb_du_ue_slice_max_bit_rate_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_mbs_session_setup_list:
      j.start_array("MulticastMBSSessionList");
      for (const auto& e1 : c.get<multicast_mbs_session_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_mbs_session_rem_list:
      j.start_array("MulticastMBSSessionList");
      for (const auto& e1 : c.get<multicast_mbs_session_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ue_multicast_m_rbs_to_be_setup_at_modify_list:
      j.start_array("UE-MulticastMRBs-ToBeSetup-atModify-List");
      for (const auto& e1 : c.get<ue_multicast_m_rbs_to_be_setup_at_modify_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ue_multicast_m_rbs_to_be_released_list:
      j.start_array("UE-MulticastMRBs-ToBeReleased-List");
      for (const auto& e1 : c.get<ue_multicast_m_rbs_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sldrx_cycle_list:
      j.start_array("SLDRXCycleList");
      for (const auto& e1 : c.get<sldrx_cycle_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::management_based_mdt_plmn_mod_list:
      j.start_array("MDTPLMNModificationList");
      for (const auto& e1 : c.get<mdt_plmn_mod_list_l>()) {
        j.write_str(e1.to_string());
      }
      j.end_array();
      break;
    case types::sdt_bearer_cfg_query_ind:
      j.write_str("SDTBearerConfigurationQueryIndication", "true");
      break;
    case types::daps_ho_status:
      j.write_str("DAPS-HO-Status", "initiation");
      break;
    case types::serving_cell_mo_list:
      j.start_array("ServingCellMO-List");
      for (const auto& e1 : c.get<serving_cell_mo_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ul_tx_direct_current_more_carrier_info:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::cp_acmcg_info:
      j.write_fieldname("CPACMCGInformation");
      c.get<cp_acmcg_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_mod_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::sp_cell_id:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    case types::serv_cell_idx:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)31u, true, true));
      break;
    case types::sp_cell_ul_cfg:
      HANDLE_CODE(c.get<cell_ul_cfg_e>().pack(bref));
      break;
    case types::drx_cycle:
      HANDLE_CODE(c.get<drx_cycle_s>().pack(bref));
      break;
    case types::cu_to_du_rrc_info:
      HANDLE_CODE(c.get<cu_to_du_rrc_info_s>().pack(bref));
      break;
    case types::tx_action_ind:
      HANDLE_CODE(c.get<tx_action_ind_e>().pack(bref));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::rrc_recfg_complete_ind:
      HANDLE_CODE(c.get<rrc_recfg_complete_ind_e>().pack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::scell_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<scell_to_be_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::scell_to_be_remd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<scell_to_be_remd_list_l>(), 1, 32, true));
      break;
    case types::srbs_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_to_be_setup_mod_list_l>(), 1, 8, true));
      break;
    case types::drbs_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_to_be_setup_mod_list_l>(), 1, 64, true));
      break;
    case types::drbs_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_to_be_modified_list_l>(), 1, 64, true));
      break;
    case types::srbs_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_to_be_released_list_l>(), 1, 8, true));
      break;
    case types::drbs_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_to_be_released_list_l>(), 1, 64, true));
      break;
    case types::inactivity_monitoring_request:
      HANDLE_CODE(c.get<inactivity_monitoring_request_e>().pack(bref));
      break;
    case types::rat_freq_prio_info:
      HANDLE_CODE(c.get<rat_freq_prio_info_c>().pack(bref));
      break;
    case types::drx_cfg_ind:
      HANDLE_CODE(c.get<drx_cfg_ind_e>().pack(bref));
      break;
    case types::rlc_fail_ind:
      HANDLE_CODE(c.get<rlc_fail_ind_s>().pack(bref));
      break;
    case types::ul_tx_direct_current_list_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::gnb_du_cfg_query:
      HANDLE_CODE(c.get<gnb_du_cfg_query_e>().pack(bref));
      break;
    case types::gnb_du_ue_ambr_ul:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().pack(bref));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().pack(bref));
      break;
    case types::res_coordination_transfer_info:
      HANDLE_CODE(c.get<res_coordination_transfer_info_s>().pack(bref));
      break;
    case types::serving_cell_mo:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)64u, true, true));
      break;
    case types::needfor_gap:
      HANDLE_CODE(c.get<needfor_gap_e>().pack(bref));
      break;
    case types::full_cfg:
      HANDLE_CODE(c.get<full_cfg_e>().pack(bref));
      break;
    case types::add_rrm_prio_idx:
      HANDLE_CODE((c.get<fixed_bitstring<32, false, true>>().pack(bref)));
      break;
    case types::lower_layer_presence_status_change:
      HANDLE_CODE(c.get<lower_layer_presence_status_change_e>().pack(bref));
      break;
    case types::bh_chs_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_chs_to_be_setup_mod_list_l>(), 1, 65536, true));
      break;
    case types::bh_chs_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_chs_to_be_modified_list_l>(), 1, 65536, true));
      break;
    case types::bh_chs_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_chs_to_be_released_list_l>(), 1, 65536, true));
      break;
    case types::nr_v2x_services_authorized:
      HANDLE_CODE(c.get<nr_v2x_services_authorized_s>().pack(bref));
      break;
    case types::ltev2x_services_authorized:
      HANDLE_CODE(c.get<ltev2x_services_authorized_s>().pack(bref));
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      HANDLE_CODE(c.get<nr_ue_sidelink_aggr_max_bitrate_s>().pack(bref));
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      HANDLE_CODE(c.get<lte_ue_sidelink_aggr_max_bitrate_s>().pack(bref));
      break;
    case types::pc5_link_ambr:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::sl_drbs_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_drbs_to_be_setup_mod_list_l>(), 1, 512, true));
      break;
    case types::sl_drbs_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_drbs_to_be_modified_list_l>(), 1, 512, true));
      break;
    case types::sl_drbs_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_drbs_to_be_released_list_l>(), 1, 512, true));
      break;
    case types::conditional_intra_du_mob_info:
      HANDLE_CODE(c.get<conditional_intra_du_mob_info_s>().pack(bref));
      break;
    case types::f1_c_transfer_path:
      HANDLE_CODE(c.get<f1_c_transfer_path_s>().pack(bref));
      break;
    case types::scg_ind:
      HANDLE_CODE(c.get<scg_ind_e>().pack(bref));
      break;
    case types::ul_tx_direct_current_two_carrier_list_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::iab_conditional_rrc_msg_delivery_ind:
      HANDLE_CODE(c.get<iab_conditional_rrc_msg_delivery_ind_e>().pack(bref));
      break;
    case types::f1_c_transfer_path_nr_dc:
      HANDLE_CODE(c.get<f1_c_transfer_path_nr_dc_s>().pack(bref));
      break;
    case types::mdt_polluted_meas_ind:
      HANDLE_CODE(c.get<mdt_polluted_meas_ind_e>().pack(bref));
      break;
    case types::scg_activation_request:
      HANDLE_CODE(c.get<scg_activation_request_e>().pack(bref));
      break;
    case types::cg_sdt_query_ind:
      HANDLE_CODE(c.get<cg_sdt_query_ind_e>().pack(bref));
      break;
    case types::five_g_pro_se_authorized:
      HANDLE_CODE(c.get<five_g_pro_se_authorized_s>().pack(bref));
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      HANDLE_CODE(c.get<nr_ue_sidelink_aggr_max_bitrate_s>().pack(bref));
      break;
    case types::five_g_pro_se_pc5_link_ambr:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::upd_remote_ue_local_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uu_rlc_ch_to_be_setup_list_l>(), 1, 32, true));
      break;
    case types::uu_rlc_ch_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uu_rlc_ch_to_be_modified_list_l>(), 1, 32, true));
      break;
    case types::uu_rlc_ch_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uu_rlc_ch_to_be_released_list_l>(), 1, 32, true));
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pc5_rlc_ch_to_be_setup_list_l>(), 1, 512, true));
      break;
    case types::pc5_rlc_ch_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pc5_rlc_ch_to_be_modified_list_l>(), 1, 512, true));
      break;
    case types::pc5_rlc_ch_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pc5_rlc_ch_to_be_released_list_l>(), 1, 512, true));
      break;
    case types::path_switch_cfg:
      HANDLE_CODE(c.get<path_switch_cfg_s>().pack(bref));
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_du_ue_slice_max_bit_rate_list_l>(), 1, 8, true));
      break;
    case types::multicast_mbs_session_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_mbs_session_list_l>(), 1, 256, true));
      break;
    case types::multicast_mbs_session_rem_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_mbs_session_list_l>(), 1, 256, true));
      break;
    case types::ue_multicast_m_rbs_to_be_setup_at_modify_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_multicast_m_rbs_to_be_setup_at_modify_list_l>(), 1, 64, true));
      break;
    case types::ue_multicast_m_rbs_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_multicast_m_rbs_to_be_released_list_l>(), 1, 64, true));
      break;
    case types::sldrx_cycle_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sldrx_cycle_list_l>(), 1, 32, true));
      break;
    case types::management_based_mdt_plmn_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<mdt_plmn_mod_list_l>(), 0, 16, true));
      break;
    case types::sdt_bearer_cfg_query_ind:
      HANDLE_CODE(c.get<sdt_bearer_cfg_query_ind_e>().pack(bref));
      break;
    case types::daps_ho_status:
      HANDLE_CODE(c.get<daps_ho_status_e>().pack(bref));
      break;
    case types::serving_cell_mo_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<serving_cell_mo_list_l>(), 1, 16, true));
      break;
    case types::ul_tx_direct_current_more_carrier_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::cp_acmcg_info:
      HANDLE_CODE(c.get<cp_acmcg_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::sp_cell_id:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    case types::serv_cell_idx:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)31u, true, true));
      break;
    case types::sp_cell_ul_cfg:
      HANDLE_CODE(c.get<cell_ul_cfg_e>().unpack(bref));
      break;
    case types::drx_cycle:
      HANDLE_CODE(c.get<drx_cycle_s>().unpack(bref));
      break;
    case types::cu_to_du_rrc_info:
      HANDLE_CODE(c.get<cu_to_du_rrc_info_s>().unpack(bref));
      break;
    case types::tx_action_ind:
      HANDLE_CODE(c.get<tx_action_ind_e>().unpack(bref));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::rrc_recfg_complete_ind:
      HANDLE_CODE(c.get<rrc_recfg_complete_ind_e>().unpack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::scell_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<scell_to_be_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::scell_to_be_remd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<scell_to_be_remd_list_l>(), bref, 1, 32, true));
      break;
    case types::srbs_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_to_be_setup_mod_list_l>(), bref, 1, 8, true));
      break;
    case types::drbs_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_to_be_setup_mod_list_l>(), bref, 1, 64, true));
      break;
    case types::drbs_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_to_be_modified_list_l>(), bref, 1, 64, true));
      break;
    case types::srbs_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_to_be_released_list_l>(), bref, 1, 8, true));
      break;
    case types::drbs_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_to_be_released_list_l>(), bref, 1, 64, true));
      break;
    case types::inactivity_monitoring_request:
      HANDLE_CODE(c.get<inactivity_monitoring_request_e>().unpack(bref));
      break;
    case types::rat_freq_prio_info:
      HANDLE_CODE(c.get<rat_freq_prio_info_c>().unpack(bref));
      break;
    case types::drx_cfg_ind:
      HANDLE_CODE(c.get<drx_cfg_ind_e>().unpack(bref));
      break;
    case types::rlc_fail_ind:
      HANDLE_CODE(c.get<rlc_fail_ind_s>().unpack(bref));
      break;
    case types::ul_tx_direct_current_list_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::gnb_du_cfg_query:
      HANDLE_CODE(c.get<gnb_du_cfg_query_e>().unpack(bref));
      break;
    case types::gnb_du_ue_ambr_ul:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().unpack(bref));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().unpack(bref));
      break;
    case types::res_coordination_transfer_info:
      HANDLE_CODE(c.get<res_coordination_transfer_info_s>().unpack(bref));
      break;
    case types::serving_cell_mo:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)64u, true, true));
      break;
    case types::needfor_gap:
      HANDLE_CODE(c.get<needfor_gap_e>().unpack(bref));
      break;
    case types::full_cfg:
      HANDLE_CODE(c.get<full_cfg_e>().unpack(bref));
      break;
    case types::add_rrm_prio_idx:
      HANDLE_CODE((c.get<fixed_bitstring<32, false, true>>().unpack(bref)));
      break;
    case types::lower_layer_presence_status_change:
      HANDLE_CODE(c.get<lower_layer_presence_status_change_e>().unpack(bref));
      break;
    case types::bh_chs_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_chs_to_be_setup_mod_list_l>(), bref, 1, 65536, true));
      break;
    case types::bh_chs_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_chs_to_be_modified_list_l>(), bref, 1, 65536, true));
      break;
    case types::bh_chs_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_chs_to_be_released_list_l>(), bref, 1, 65536, true));
      break;
    case types::nr_v2x_services_authorized:
      HANDLE_CODE(c.get<nr_v2x_services_authorized_s>().unpack(bref));
      break;
    case types::ltev2x_services_authorized:
      HANDLE_CODE(c.get<ltev2x_services_authorized_s>().unpack(bref));
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      HANDLE_CODE(c.get<nr_ue_sidelink_aggr_max_bitrate_s>().unpack(bref));
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      HANDLE_CODE(c.get<lte_ue_sidelink_aggr_max_bitrate_s>().unpack(bref));
      break;
    case types::pc5_link_ambr:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::sl_drbs_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_drbs_to_be_setup_mod_list_l>(), bref, 1, 512, true));
      break;
    case types::sl_drbs_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_drbs_to_be_modified_list_l>(), bref, 1, 512, true));
      break;
    case types::sl_drbs_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_drbs_to_be_released_list_l>(), bref, 1, 512, true));
      break;
    case types::conditional_intra_du_mob_info:
      HANDLE_CODE(c.get<conditional_intra_du_mob_info_s>().unpack(bref));
      break;
    case types::f1_c_transfer_path:
      HANDLE_CODE(c.get<f1_c_transfer_path_s>().unpack(bref));
      break;
    case types::scg_ind:
      HANDLE_CODE(c.get<scg_ind_e>().unpack(bref));
      break;
    case types::ul_tx_direct_current_two_carrier_list_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::iab_conditional_rrc_msg_delivery_ind:
      HANDLE_CODE(c.get<iab_conditional_rrc_msg_delivery_ind_e>().unpack(bref));
      break;
    case types::f1_c_transfer_path_nr_dc:
      HANDLE_CODE(c.get<f1_c_transfer_path_nr_dc_s>().unpack(bref));
      break;
    case types::mdt_polluted_meas_ind:
      HANDLE_CODE(c.get<mdt_polluted_meas_ind_e>().unpack(bref));
      break;
    case types::scg_activation_request:
      HANDLE_CODE(c.get<scg_activation_request_e>().unpack(bref));
      break;
    case types::cg_sdt_query_ind:
      HANDLE_CODE(c.get<cg_sdt_query_ind_e>().unpack(bref));
      break;
    case types::five_g_pro_se_authorized:
      HANDLE_CODE(c.get<five_g_pro_se_authorized_s>().unpack(bref));
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      HANDLE_CODE(c.get<nr_ue_sidelink_aggr_max_bitrate_s>().unpack(bref));
      break;
    case types::five_g_pro_se_pc5_link_ambr:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::upd_remote_ue_local_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uu_rlc_ch_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::uu_rlc_ch_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uu_rlc_ch_to_be_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::uu_rlc_ch_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uu_rlc_ch_to_be_released_list_l>(), bref, 1, 32, true));
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pc5_rlc_ch_to_be_setup_list_l>(), bref, 1, 512, true));
      break;
    case types::pc5_rlc_ch_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pc5_rlc_ch_to_be_modified_list_l>(), bref, 1, 512, true));
      break;
    case types::pc5_rlc_ch_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pc5_rlc_ch_to_be_released_list_l>(), bref, 1, 512, true));
      break;
    case types::path_switch_cfg:
      HANDLE_CODE(c.get<path_switch_cfg_s>().unpack(bref));
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_du_ue_slice_max_bit_rate_list_l>(), bref, 1, 8, true));
      break;
    case types::multicast_mbs_session_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_mbs_session_list_l>(), bref, 1, 256, true));
      break;
    case types::multicast_mbs_session_rem_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_mbs_session_list_l>(), bref, 1, 256, true));
      break;
    case types::ue_multicast_m_rbs_to_be_setup_at_modify_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_multicast_m_rbs_to_be_setup_at_modify_list_l>(), bref, 1, 64, true));
      break;
    case types::ue_multicast_m_rbs_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_multicast_m_rbs_to_be_released_list_l>(), bref, 1, 64, true));
      break;
    case types::sldrx_cycle_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sldrx_cycle_list_l>(), bref, 1, 32, true));
      break;
    case types::management_based_mdt_plmn_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<mdt_plmn_mod_list_l>(), bref, 0, 16, true));
      break;
    case types::sdt_bearer_cfg_query_ind:
      HANDLE_CODE(c.get<sdt_bearer_cfg_query_ind_e>().unpack(bref));
      break;
    case types::daps_ho_status:
      HANDLE_CODE(c.get<daps_ho_status_e>().unpack(bref));
      break;
    case types::serving_cell_mo_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<serving_cell_mo_list_l>(), bref, 1, 16, true));
      break;
    case types::ul_tx_direct_current_more_carrier_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::cp_acmcg_info:
      HANDLE_CODE(c.get<cp_acmcg_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// UEContextModificationRequiredIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_mod_required_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 49, 39, 23, 70, 25, 0, 277, 320, 322, 375, 606, 607, 614, 615, 655, 657};
  return map_enum_number(names, 18, idx, "id");
}
bool ue_context_mod_required_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 49, 39, 23, 70, 25, 0, 277, 320, 322, 375, 606, 607, 614, 615, 655, 657};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_mod_required_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 49:
      return crit_e::ignore;
    case 39:
      return crit_e::reject;
    case 23:
      return crit_e::reject;
    case 70:
      return crit_e::reject;
    case 25:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 277:
      return crit_e::reject;
    case 320:
      return crit_e::reject;
    case 322:
      return crit_e::reject;
    case 375:
      return crit_e::reject;
    case 606:
      return crit_e::reject;
    case 607:
      return crit_e::reject;
    case 614:
      return crit_e::reject;
    case 615:
      return crit_e::reject;
    case 655:
      return crit_e::reject;
    case 657:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_mod_required_ies_o::value_c ue_context_mod_required_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 49:
      ret.set(value_c::types::res_coordination_transfer_container);
      break;
    case 39:
      ret.set(value_c::types::du_to_cu_rrc_info);
      break;
    case 23:
      ret.set(value_c::types::drbs_required_to_be_modified_list);
      break;
    case 70:
      ret.set(value_c::types::srbs_required_to_be_released_list);
      break;
    case 25:
      ret.set(value_c::types::drbs_required_to_be_released_list);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 277:
      ret.set(value_c::types::bh_chs_required_to_be_released_list);
      break;
    case 320:
      ret.set(value_c::types::sl_drbs_required_to_be_modified_list);
      break;
    case 322:
      ret.set(value_c::types::sl_drbs_required_to_be_released_list);
      break;
    case 375:
      ret.set(value_c::types::target_cells_to_cancel);
      break;
    case 606:
      ret.set(value_c::types::uu_rlc_ch_required_to_be_modified_list);
      break;
    case 607:
      ret.set(value_c::types::uu_rlc_ch_required_to_be_released_list);
      break;
    case 614:
      ret.set(value_c::types::pc5_rlc_ch_required_to_be_modified_list);
      break;
    case 615:
      ret.set(value_c::types::pc5_rlc_ch_required_to_be_released_list);
      break;
    case 655:
      ret.set(value_c::types::ue_multicast_m_rbs_required_to_be_modified_list);
      break;
    case 657:
      ret.set(value_c::types::ue_multicast_m_rbs_required_to_be_released_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_mod_required_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 49:
      return presence_e::optional;
    case 39:
      return presence_e::optional;
    case 23:
      return presence_e::optional;
    case 70:
      return presence_e::optional;
    case 25:
      return presence_e::optional;
    case 0:
      return presence_e::mandatory;
    case 277:
      return presence_e::optional;
    case 320:
      return presence_e::optional;
    case 322:
      return presence_e::optional;
    case 375:
      return presence_e::optional;
    case 606:
      return presence_e::optional;
    case 607:
      return presence_e::optional;
    case 614:
      return presence_e::optional;
    case 615:
      return presence_e::optional;
    case 655:
      return presence_e::optional;
    case 657:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_mod_required_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::res_coordination_transfer_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::du_to_cu_rrc_info:
      c.destroy<du_to_cu_rrc_info_s>();
      break;
    case types::drbs_required_to_be_modified_list:
      c.destroy<drbs_required_to_be_modified_list_l>();
      break;
    case types::srbs_required_to_be_released_list:
      c.destroy<srbs_required_to_be_released_list_l>();
      break;
    case types::drbs_required_to_be_released_list:
      c.destroy<drbs_required_to_be_released_list_l>();
      break;
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::bh_chs_required_to_be_released_list:
      c.destroy<bh_chs_required_to_be_released_list_l>();
      break;
    case types::sl_drbs_required_to_be_modified_list:
      c.destroy<sl_drbs_required_to_be_modified_list_l>();
      break;
    case types::sl_drbs_required_to_be_released_list:
      c.destroy<sl_drbs_required_to_be_released_list_l>();
      break;
    case types::target_cells_to_cancel:
      c.destroy<target_cell_list_l>();
      break;
    case types::uu_rlc_ch_required_to_be_modified_list:
      c.destroy<uu_rlc_ch_required_to_be_modified_list_l>();
      break;
    case types::uu_rlc_ch_required_to_be_released_list:
      c.destroy<uu_rlc_ch_required_to_be_released_list_l>();
      break;
    case types::pc5_rlc_ch_required_to_be_modified_list:
      c.destroy<pc5_rlc_ch_required_to_be_modified_list_l>();
      break;
    case types::pc5_rlc_ch_required_to_be_released_list:
      c.destroy<pc5_rlc_ch_required_to_be_released_list_l>();
      break;
    case types::ue_multicast_m_rbs_required_to_be_modified_list:
      c.destroy<ue_multicast_m_rbs_required_to_be_modified_list_l>();
      break;
    case types::ue_multicast_m_rbs_required_to_be_released_list:
      c.destroy<ue_multicast_m_rbs_required_to_be_released_list_l>();
      break;
    default:
      break;
  }
}
void ue_context_mod_required_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::res_coordination_transfer_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::du_to_cu_rrc_info:
      c.init<du_to_cu_rrc_info_s>();
      break;
    case types::drbs_required_to_be_modified_list:
      c.init<drbs_required_to_be_modified_list_l>();
      break;
    case types::srbs_required_to_be_released_list:
      c.init<srbs_required_to_be_released_list_l>();
      break;
    case types::drbs_required_to_be_released_list:
      c.init<drbs_required_to_be_released_list_l>();
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::bh_chs_required_to_be_released_list:
      c.init<bh_chs_required_to_be_released_list_l>();
      break;
    case types::sl_drbs_required_to_be_modified_list:
      c.init<sl_drbs_required_to_be_modified_list_l>();
      break;
    case types::sl_drbs_required_to_be_released_list:
      c.init<sl_drbs_required_to_be_released_list_l>();
      break;
    case types::target_cells_to_cancel:
      c.init<target_cell_list_l>();
      break;
    case types::uu_rlc_ch_required_to_be_modified_list:
      c.init<uu_rlc_ch_required_to_be_modified_list_l>();
      break;
    case types::uu_rlc_ch_required_to_be_released_list:
      c.init<uu_rlc_ch_required_to_be_released_list_l>();
      break;
    case types::pc5_rlc_ch_required_to_be_modified_list:
      c.init<pc5_rlc_ch_required_to_be_modified_list_l>();
      break;
    case types::pc5_rlc_ch_required_to_be_released_list:
      c.init<pc5_rlc_ch_required_to_be_released_list_l>();
      break;
    case types::ue_multicast_m_rbs_required_to_be_modified_list:
      c.init<ue_multicast_m_rbs_required_to_be_modified_list_l>();
      break;
    case types::ue_multicast_m_rbs_required_to_be_released_list:
      c.init<ue_multicast_m_rbs_required_to_be_released_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_required_ies_o::value_c");
  }
}
ue_context_mod_required_ies_o::value_c::value_c(const ue_context_mod_required_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::du_to_cu_rrc_info:
      c.init(other.c.get<du_to_cu_rrc_info_s>());
      break;
    case types::drbs_required_to_be_modified_list:
      c.init(other.c.get<drbs_required_to_be_modified_list_l>());
      break;
    case types::srbs_required_to_be_released_list:
      c.init(other.c.get<srbs_required_to_be_released_list_l>());
      break;
    case types::drbs_required_to_be_released_list:
      c.init(other.c.get<drbs_required_to_be_released_list_l>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::bh_chs_required_to_be_released_list:
      c.init(other.c.get<bh_chs_required_to_be_released_list_l>());
      break;
    case types::sl_drbs_required_to_be_modified_list:
      c.init(other.c.get<sl_drbs_required_to_be_modified_list_l>());
      break;
    case types::sl_drbs_required_to_be_released_list:
      c.init(other.c.get<sl_drbs_required_to_be_released_list_l>());
      break;
    case types::target_cells_to_cancel:
      c.init(other.c.get<target_cell_list_l>());
      break;
    case types::uu_rlc_ch_required_to_be_modified_list:
      c.init(other.c.get<uu_rlc_ch_required_to_be_modified_list_l>());
      break;
    case types::uu_rlc_ch_required_to_be_released_list:
      c.init(other.c.get<uu_rlc_ch_required_to_be_released_list_l>());
      break;
    case types::pc5_rlc_ch_required_to_be_modified_list:
      c.init(other.c.get<pc5_rlc_ch_required_to_be_modified_list_l>());
      break;
    case types::pc5_rlc_ch_required_to_be_released_list:
      c.init(other.c.get<pc5_rlc_ch_required_to_be_released_list_l>());
      break;
    case types::ue_multicast_m_rbs_required_to_be_modified_list:
      c.init(other.c.get<ue_multicast_m_rbs_required_to_be_modified_list_l>());
      break;
    case types::ue_multicast_m_rbs_required_to_be_released_list:
      c.init(other.c.get<ue_multicast_m_rbs_required_to_be_released_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_required_ies_o::value_c");
  }
}
ue_context_mod_required_ies_o::value_c&
ue_context_mod_required_ies_o::value_c::operator=(const ue_context_mod_required_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::du_to_cu_rrc_info:
      c.set(other.c.get<du_to_cu_rrc_info_s>());
      break;
    case types::drbs_required_to_be_modified_list:
      c.set(other.c.get<drbs_required_to_be_modified_list_l>());
      break;
    case types::srbs_required_to_be_released_list:
      c.set(other.c.get<srbs_required_to_be_released_list_l>());
      break;
    case types::drbs_required_to_be_released_list:
      c.set(other.c.get<drbs_required_to_be_released_list_l>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::bh_chs_required_to_be_released_list:
      c.set(other.c.get<bh_chs_required_to_be_released_list_l>());
      break;
    case types::sl_drbs_required_to_be_modified_list:
      c.set(other.c.get<sl_drbs_required_to_be_modified_list_l>());
      break;
    case types::sl_drbs_required_to_be_released_list:
      c.set(other.c.get<sl_drbs_required_to_be_released_list_l>());
      break;
    case types::target_cells_to_cancel:
      c.set(other.c.get<target_cell_list_l>());
      break;
    case types::uu_rlc_ch_required_to_be_modified_list:
      c.set(other.c.get<uu_rlc_ch_required_to_be_modified_list_l>());
      break;
    case types::uu_rlc_ch_required_to_be_released_list:
      c.set(other.c.get<uu_rlc_ch_required_to_be_released_list_l>());
      break;
    case types::pc5_rlc_ch_required_to_be_modified_list:
      c.set(other.c.get<pc5_rlc_ch_required_to_be_modified_list_l>());
      break;
    case types::pc5_rlc_ch_required_to_be_released_list:
      c.set(other.c.get<pc5_rlc_ch_required_to_be_released_list_l>());
      break;
    case types::ue_multicast_m_rbs_required_to_be_modified_list:
      c.set(other.c.get<ue_multicast_m_rbs_required_to_be_modified_list_l>());
      break;
    case types::ue_multicast_m_rbs_required_to_be_released_list:
      c.set(other.c.get<ue_multicast_m_rbs_required_to_be_released_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_required_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_mod_required_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_mod_required_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
unbounded_octstring<true>& ue_context_mod_required_ies_o::value_c::res_coordination_transfer_container()
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
du_to_cu_rrc_info_s& ue_context_mod_required_ies_o::value_c::du_to_cu_rrc_info()
{
  assert_choice_type(types::du_to_cu_rrc_info, type_, "Value");
  return c.get<du_to_cu_rrc_info_s>();
}
drbs_required_to_be_modified_list_l& ue_context_mod_required_ies_o::value_c::drbs_required_to_be_modified_list()
{
  assert_choice_type(types::drbs_required_to_be_modified_list, type_, "Value");
  return c.get<drbs_required_to_be_modified_list_l>();
}
srbs_required_to_be_released_list_l& ue_context_mod_required_ies_o::value_c::srbs_required_to_be_released_list()
{
  assert_choice_type(types::srbs_required_to_be_released_list, type_, "Value");
  return c.get<srbs_required_to_be_released_list_l>();
}
drbs_required_to_be_released_list_l& ue_context_mod_required_ies_o::value_c::drbs_required_to_be_released_list()
{
  assert_choice_type(types::drbs_required_to_be_released_list, type_, "Value");
  return c.get<drbs_required_to_be_released_list_l>();
}
cause_c& ue_context_mod_required_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
bh_chs_required_to_be_released_list_l& ue_context_mod_required_ies_o::value_c::bh_chs_required_to_be_released_list()
{
  assert_choice_type(types::bh_chs_required_to_be_released_list, type_, "Value");
  return c.get<bh_chs_required_to_be_released_list_l>();
}
sl_drbs_required_to_be_modified_list_l& ue_context_mod_required_ies_o::value_c::sl_drbs_required_to_be_modified_list()
{
  assert_choice_type(types::sl_drbs_required_to_be_modified_list, type_, "Value");
  return c.get<sl_drbs_required_to_be_modified_list_l>();
}
sl_drbs_required_to_be_released_list_l& ue_context_mod_required_ies_o::value_c::sl_drbs_required_to_be_released_list()
{
  assert_choice_type(types::sl_drbs_required_to_be_released_list, type_, "Value");
  return c.get<sl_drbs_required_to_be_released_list_l>();
}
target_cell_list_l& ue_context_mod_required_ies_o::value_c::target_cells_to_cancel()
{
  assert_choice_type(types::target_cells_to_cancel, type_, "Value");
  return c.get<target_cell_list_l>();
}
uu_rlc_ch_required_to_be_modified_list_l&
ue_context_mod_required_ies_o::value_c::uu_rlc_ch_required_to_be_modified_list()
{
  assert_choice_type(types::uu_rlc_ch_required_to_be_modified_list, type_, "Value");
  return c.get<uu_rlc_ch_required_to_be_modified_list_l>();
}
uu_rlc_ch_required_to_be_released_list_l&
ue_context_mod_required_ies_o::value_c::uu_rlc_ch_required_to_be_released_list()
{
  assert_choice_type(types::uu_rlc_ch_required_to_be_released_list, type_, "Value");
  return c.get<uu_rlc_ch_required_to_be_released_list_l>();
}
pc5_rlc_ch_required_to_be_modified_list_l&
ue_context_mod_required_ies_o::value_c::pc5_rlc_ch_required_to_be_modified_list()
{
  assert_choice_type(types::pc5_rlc_ch_required_to_be_modified_list, type_, "Value");
  return c.get<pc5_rlc_ch_required_to_be_modified_list_l>();
}
pc5_rlc_ch_required_to_be_released_list_l&
ue_context_mod_required_ies_o::value_c::pc5_rlc_ch_required_to_be_released_list()
{
  assert_choice_type(types::pc5_rlc_ch_required_to_be_released_list, type_, "Value");
  return c.get<pc5_rlc_ch_required_to_be_released_list_l>();
}
ue_multicast_m_rbs_required_to_be_modified_list_l&
ue_context_mod_required_ies_o::value_c::ue_multicast_m_rbs_required_to_be_modified_list()
{
  assert_choice_type(types::ue_multicast_m_rbs_required_to_be_modified_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_required_to_be_modified_list_l>();
}
ue_multicast_m_rbs_required_to_be_released_list_l&
ue_context_mod_required_ies_o::value_c::ue_multicast_m_rbs_required_to_be_released_list()
{
  assert_choice_type(types::ue_multicast_m_rbs_required_to_be_released_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_required_to_be_released_list_l>();
}
const uint64_t& ue_context_mod_required_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_mod_required_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const unbounded_octstring<true>& ue_context_mod_required_ies_o::value_c::res_coordination_transfer_container() const
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const du_to_cu_rrc_info_s& ue_context_mod_required_ies_o::value_c::du_to_cu_rrc_info() const
{
  assert_choice_type(types::du_to_cu_rrc_info, type_, "Value");
  return c.get<du_to_cu_rrc_info_s>();
}
const drbs_required_to_be_modified_list_l&
ue_context_mod_required_ies_o::value_c::drbs_required_to_be_modified_list() const
{
  assert_choice_type(types::drbs_required_to_be_modified_list, type_, "Value");
  return c.get<drbs_required_to_be_modified_list_l>();
}
const srbs_required_to_be_released_list_l&
ue_context_mod_required_ies_o::value_c::srbs_required_to_be_released_list() const
{
  assert_choice_type(types::srbs_required_to_be_released_list, type_, "Value");
  return c.get<srbs_required_to_be_released_list_l>();
}
const drbs_required_to_be_released_list_l&
ue_context_mod_required_ies_o::value_c::drbs_required_to_be_released_list() const
{
  assert_choice_type(types::drbs_required_to_be_released_list, type_, "Value");
  return c.get<drbs_required_to_be_released_list_l>();
}
const cause_c& ue_context_mod_required_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const bh_chs_required_to_be_released_list_l&
ue_context_mod_required_ies_o::value_c::bh_chs_required_to_be_released_list() const
{
  assert_choice_type(types::bh_chs_required_to_be_released_list, type_, "Value");
  return c.get<bh_chs_required_to_be_released_list_l>();
}
const sl_drbs_required_to_be_modified_list_l&
ue_context_mod_required_ies_o::value_c::sl_drbs_required_to_be_modified_list() const
{
  assert_choice_type(types::sl_drbs_required_to_be_modified_list, type_, "Value");
  return c.get<sl_drbs_required_to_be_modified_list_l>();
}
const sl_drbs_required_to_be_released_list_l&
ue_context_mod_required_ies_o::value_c::sl_drbs_required_to_be_released_list() const
{
  assert_choice_type(types::sl_drbs_required_to_be_released_list, type_, "Value");
  return c.get<sl_drbs_required_to_be_released_list_l>();
}
const target_cell_list_l& ue_context_mod_required_ies_o::value_c::target_cells_to_cancel() const
{
  assert_choice_type(types::target_cells_to_cancel, type_, "Value");
  return c.get<target_cell_list_l>();
}
const uu_rlc_ch_required_to_be_modified_list_l&
ue_context_mod_required_ies_o::value_c::uu_rlc_ch_required_to_be_modified_list() const
{
  assert_choice_type(types::uu_rlc_ch_required_to_be_modified_list, type_, "Value");
  return c.get<uu_rlc_ch_required_to_be_modified_list_l>();
}
const uu_rlc_ch_required_to_be_released_list_l&
ue_context_mod_required_ies_o::value_c::uu_rlc_ch_required_to_be_released_list() const
{
  assert_choice_type(types::uu_rlc_ch_required_to_be_released_list, type_, "Value");
  return c.get<uu_rlc_ch_required_to_be_released_list_l>();
}
const pc5_rlc_ch_required_to_be_modified_list_l&
ue_context_mod_required_ies_o::value_c::pc5_rlc_ch_required_to_be_modified_list() const
{
  assert_choice_type(types::pc5_rlc_ch_required_to_be_modified_list, type_, "Value");
  return c.get<pc5_rlc_ch_required_to_be_modified_list_l>();
}
const pc5_rlc_ch_required_to_be_released_list_l&
ue_context_mod_required_ies_o::value_c::pc5_rlc_ch_required_to_be_released_list() const
{
  assert_choice_type(types::pc5_rlc_ch_required_to_be_released_list, type_, "Value");
  return c.get<pc5_rlc_ch_required_to_be_released_list_l>();
}
const ue_multicast_m_rbs_required_to_be_modified_list_l&
ue_context_mod_required_ies_o::value_c::ue_multicast_m_rbs_required_to_be_modified_list() const
{
  assert_choice_type(types::ue_multicast_m_rbs_required_to_be_modified_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_required_to_be_modified_list_l>();
}
const ue_multicast_m_rbs_required_to_be_released_list_l&
ue_context_mod_required_ies_o::value_c::ue_multicast_m_rbs_required_to_be_released_list() const
{
  assert_choice_type(types::ue_multicast_m_rbs_required_to_be_released_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_required_to_be_released_list_l>();
}
void ue_context_mod_required_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::du_to_cu_rrc_info:
      j.write_fieldname("DUtoCURRCInformation");
      c.get<du_to_cu_rrc_info_s>().to_json(j);
      break;
    case types::drbs_required_to_be_modified_list:
      j.start_array("DRBs-Required-ToBeModified-List");
      for (const auto& e1 : c.get<drbs_required_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_required_to_be_released_list:
      j.start_array("SRBs-Required-ToBeReleased-List");
      for (const auto& e1 : c.get<srbs_required_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_required_to_be_released_list:
      j.start_array("DRBs-Required-ToBeReleased-List");
      for (const auto& e1 : c.get<drbs_required_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::bh_chs_required_to_be_released_list:
      j.start_array("BHChannels-Required-ToBeReleased-List");
      for (const auto& e1 : c.get<bh_chs_required_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sl_drbs_required_to_be_modified_list:
      j.start_array("SLDRBs-Required-ToBeModified-List");
      for (const auto& e1 : c.get<sl_drbs_required_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sl_drbs_required_to_be_released_list:
      j.start_array("SLDRBs-Required-ToBeReleased-List");
      for (const auto& e1 : c.get<sl_drbs_required_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::target_cells_to_cancel:
      j.start_array("TargetCellList");
      for (const auto& e1 : c.get<target_cell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::uu_rlc_ch_required_to_be_modified_list:
      j.start_array("UuRLCChannelRequiredToBeModifiedList");
      for (const auto& e1 : c.get<uu_rlc_ch_required_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::uu_rlc_ch_required_to_be_released_list:
      j.start_array("UuRLCChannelRequiredToBeReleasedList");
      for (const auto& e1 : c.get<uu_rlc_ch_required_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pc5_rlc_ch_required_to_be_modified_list:
      j.start_array("PC5RLCChannelRequiredToBeModifiedList");
      for (const auto& e1 : c.get<pc5_rlc_ch_required_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pc5_rlc_ch_required_to_be_released_list:
      j.start_array("PC5RLCChannelRequiredToBeReleasedList");
      for (const auto& e1 : c.get<pc5_rlc_ch_required_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ue_multicast_m_rbs_required_to_be_modified_list:
      j.start_array("UE-MulticastMRBs-RequiredToBeModified-List");
      for (const auto& e1 : c.get<ue_multicast_m_rbs_required_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ue_multicast_m_rbs_required_to_be_released_list:
      j.start_array("UE-MulticastMRBs-RequiredToBeReleased-List");
      for (const auto& e1 : c.get<ue_multicast_m_rbs_required_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_required_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_mod_required_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::du_to_cu_rrc_info:
      HANDLE_CODE(c.get<du_to_cu_rrc_info_s>().pack(bref));
      break;
    case types::drbs_required_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_required_to_be_modified_list_l>(), 1, 64, true));
      break;
    case types::srbs_required_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_required_to_be_released_list_l>(), 1, 8, true));
      break;
    case types::drbs_required_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_required_to_be_released_list_l>(), 1, 64, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::bh_chs_required_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_chs_required_to_be_released_list_l>(), 1, 65536, true));
      break;
    case types::sl_drbs_required_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_drbs_required_to_be_modified_list_l>(), 1, 512, true));
      break;
    case types::sl_drbs_required_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_drbs_required_to_be_released_list_l>(), 1, 512, true));
      break;
    case types::target_cells_to_cancel:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<target_cell_list_l>(), 1, 8, true));
      break;
    case types::uu_rlc_ch_required_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uu_rlc_ch_required_to_be_modified_list_l>(), 1, 32, true));
      break;
    case types::uu_rlc_ch_required_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uu_rlc_ch_required_to_be_released_list_l>(), 1, 32, true));
      break;
    case types::pc5_rlc_ch_required_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pc5_rlc_ch_required_to_be_modified_list_l>(), 1, 512, true));
      break;
    case types::pc5_rlc_ch_required_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pc5_rlc_ch_required_to_be_released_list_l>(), 1, 512, true));
      break;
    case types::ue_multicast_m_rbs_required_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_multicast_m_rbs_required_to_be_modified_list_l>(), 1, 64, true));
      break;
    case types::ue_multicast_m_rbs_required_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_multicast_m_rbs_required_to_be_released_list_l>(), 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_required_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_required_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::du_to_cu_rrc_info:
      HANDLE_CODE(c.get<du_to_cu_rrc_info_s>().unpack(bref));
      break;
    case types::drbs_required_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_required_to_be_modified_list_l>(), bref, 1, 64, true));
      break;
    case types::srbs_required_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_required_to_be_released_list_l>(), bref, 1, 8, true));
      break;
    case types::drbs_required_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_required_to_be_released_list_l>(), bref, 1, 64, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::bh_chs_required_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_chs_required_to_be_released_list_l>(), bref, 1, 65536, true));
      break;
    case types::sl_drbs_required_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_drbs_required_to_be_modified_list_l>(), bref, 1, 512, true));
      break;
    case types::sl_drbs_required_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_drbs_required_to_be_released_list_l>(), bref, 1, 512, true));
      break;
    case types::target_cells_to_cancel:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<target_cell_list_l>(), bref, 1, 8, true));
      break;
    case types::uu_rlc_ch_required_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uu_rlc_ch_required_to_be_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::uu_rlc_ch_required_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uu_rlc_ch_required_to_be_released_list_l>(), bref, 1, 32, true));
      break;
    case types::pc5_rlc_ch_required_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pc5_rlc_ch_required_to_be_modified_list_l>(), bref, 1, 512, true));
      break;
    case types::pc5_rlc_ch_required_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pc5_rlc_ch_required_to_be_released_list_l>(), bref, 1, 512, true));
      break;
    case types::ue_multicast_m_rbs_required_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_multicast_m_rbs_required_to_be_modified_list_l>(), bref, 1, 64, true));
      break;
    case types::ue_multicast_m_rbs_required_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_multicast_m_rbs_required_to_be_released_list_l>(), bref, 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_required_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// UEContextModificationResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_mod_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40,  41,  49,  39,  29,  21,  68,  17,  85,  13,  98,  7,   95,
                                   198, 204, 206, 94,  275, 273, 271, 269, 333, 318, 334, 314, 376,
                                   548, 602, 603, 604, 605, 611, 612, 616, 613, 676, 679, 697};
  return map_enum_number(names, 38, idx, "id");
}
bool ue_context_mod_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40,  41,  49,  39,  29,  21,  68,  17,  85,  13,  98,  7,   95,
                                   198, 204, 206, 94,  275, 273, 271, 269, 333, 318, 334, 314, 376,
                                   548, 602, 603, 604, 605, 611, 612, 616, 613, 676, 679, 697};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_mod_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 49:
      return crit_e::ignore;
    case 39:
      return crit_e::reject;
    case 29:
      return crit_e::ignore;
    case 21:
      return crit_e::ignore;
    case 68:
      return crit_e::ignore;
    case 17:
      return crit_e::ignore;
    case 85:
      return crit_e::ignore;
    case 13:
      return crit_e::ignore;
    case 98:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 95:
      return crit_e::ignore;
    case 198:
      return crit_e::ignore;
    case 204:
      return crit_e::ignore;
    case 206:
      return crit_e::ignore;
    case 94:
      return crit_e::reject;
    case 275:
      return crit_e::ignore;
    case 273:
      return crit_e::ignore;
    case 271:
      return crit_e::ignore;
    case 269:
      return crit_e::ignore;
    case 333:
      return crit_e::ignore;
    case 318:
      return crit_e::ignore;
    case 334:
      return crit_e::ignore;
    case 314:
      return crit_e::ignore;
    case 376:
      return crit_e::reject;
    case 548:
      return crit_e::ignore;
    case 602:
      return crit_e::ignore;
    case 603:
      return crit_e::ignore;
    case 604:
      return crit_e::ignore;
    case 605:
      return crit_e::ignore;
    case 611:
      return crit_e::ignore;
    case 612:
      return crit_e::ignore;
    case 616:
      return crit_e::ignore;
    case 613:
      return crit_e::ignore;
    case 676:
      return crit_e::ignore;
    case 679:
      return crit_e::reject;
    case 697:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_mod_resp_ies_o::value_c ue_context_mod_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 49:
      ret.set(value_c::types::res_coordination_transfer_container);
      break;
    case 39:
      ret.set(value_c::types::du_to_cu_rrc_info);
      break;
    case 29:
      ret.set(value_c::types::drbs_setup_mod_list);
      break;
    case 21:
      ret.set(value_c::types::drbs_modified_list);
      break;
    case 68:
      ret.set(value_c::types::srbs_failed_to_be_setup_mod_list);
      break;
    case 17:
      ret.set(value_c::types::drbs_failed_to_be_setup_mod_list);
      break;
    case 85:
      ret.set(value_c::types::scell_failedto_setup_mod_list);
      break;
    case 13:
      ret.set(value_c::types::drbs_failed_to_be_modified_list);
      break;
    case 98:
      ret.set(value_c::types::inactivity_monitoring_resp);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 95:
      ret.set(value_c::types::c_rnti);
      break;
    case 198:
      ret.set(value_c::types::associated_scell_list);
      break;
    case 204:
      ret.set(value_c::types::srbs_setup_mod_list);
      break;
    case 206:
      ret.set(value_c::types::srbs_modified_list);
      break;
    case 94:
      ret.set(value_c::types::full_cfg);
      break;
    case 275:
      ret.set(value_c::types::bh_chs_setup_mod_list);
      break;
    case 273:
      ret.set(value_c::types::bh_chs_modified_list);
      break;
    case 271:
      ret.set(value_c::types::bh_chs_failed_to_be_setup_mod_list);
      break;
    case 269:
      ret.set(value_c::types::bh_chs_failed_to_be_modified_list);
      break;
    case 333:
      ret.set(value_c::types::sl_drbs_setup_mod_list);
      break;
    case 318:
      ret.set(value_c::types::sl_drbs_modified_list);
      break;
    case 334:
      ret.set(value_c::types::sl_drbs_failed_to_be_setup_mod_list);
      break;
    case 314:
      ret.set(value_c::types::sl_drbs_failed_to_be_modified_list);
      break;
    case 376:
      ret.set(value_c::types::requested_target_cell_global_id);
      break;
    case 548:
      ret.set(value_c::types::scg_activation_status);
      break;
    case 602:
      ret.set(value_c::types::uu_rlc_ch_setup_list);
      break;
    case 603:
      ret.set(value_c::types::uu_rlc_ch_failed_to_be_setup_list);
      break;
    case 604:
      ret.set(value_c::types::uu_rlc_ch_modified_list);
      break;
    case 605:
      ret.set(value_c::types::uu_rlc_ch_failed_to_be_modified_list);
      break;
    case 611:
      ret.set(value_c::types::pc5_rlc_ch_setup_list);
      break;
    case 612:
      ret.set(value_c::types::pc5_rlc_ch_failed_to_be_setup_list);
      break;
    case 616:
      ret.set(value_c::types::pc5_rlc_ch_modified_list);
      break;
    case 613:
      ret.set(value_c::types::pc5_rlc_ch_failed_to_be_modified_list);
      break;
    case 676:
      ret.set(value_c::types::sdt_bearer_cfg_info);
      break;
    case 679:
      ret.set(value_c::types::ue_multicast_m_rbs_setup_list);
      break;
    case 697:
      ret.set(value_c::types::serving_cell_mo_encoded_in_cgc_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_mod_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 49:
      return presence_e::optional;
    case 39:
      return presence_e::optional;
    case 29:
      return presence_e::optional;
    case 21:
      return presence_e::optional;
    case 68:
      return presence_e::optional;
    case 17:
      return presence_e::optional;
    case 85:
      return presence_e::optional;
    case 13:
      return presence_e::optional;
    case 98:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 95:
      return presence_e::optional;
    case 198:
      return presence_e::optional;
    case 204:
      return presence_e::optional;
    case 206:
      return presence_e::optional;
    case 94:
      return presence_e::optional;
    case 275:
      return presence_e::optional;
    case 273:
      return presence_e::optional;
    case 271:
      return presence_e::optional;
    case 269:
      return presence_e::optional;
    case 333:
      return presence_e::optional;
    case 318:
      return presence_e::optional;
    case 334:
      return presence_e::optional;
    case 314:
      return presence_e::optional;
    case 376:
      return presence_e::optional;
    case 548:
      return presence_e::optional;
    case 602:
      return presence_e::optional;
    case 603:
      return presence_e::optional;
    case 604:
      return presence_e::optional;
    case 605:
      return presence_e::optional;
    case 611:
      return presence_e::optional;
    case 612:
      return presence_e::optional;
    case 616:
      return presence_e::optional;
    case 613:
      return presence_e::optional;
    case 676:
      return presence_e::optional;
    case 679:
      return presence_e::optional;
    case 697:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_mod_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::res_coordination_transfer_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::du_to_cu_rrc_info:
      c.destroy<du_to_cu_rrc_info_s>();
      break;
    case types::drbs_setup_mod_list:
      c.destroy<drbs_setup_mod_list_l>();
      break;
    case types::drbs_modified_list:
      c.destroy<drbs_modified_list_l>();
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      c.destroy<srbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      c.destroy<drbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::scell_failedto_setup_mod_list:
      c.destroy<scell_failedto_setup_mod_list_l>();
      break;
    case types::drbs_failed_to_be_modified_list:
      c.destroy<drbs_failed_to_be_modified_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::associated_scell_list:
      c.destroy<associated_scell_list_l>();
      break;
    case types::srbs_setup_mod_list:
      c.destroy<srbs_setup_mod_list_l>();
      break;
    case types::srbs_modified_list:
      c.destroy<srbs_modified_list_l>();
      break;
    case types::bh_chs_setup_mod_list:
      c.destroy<bh_chs_setup_mod_list_l>();
      break;
    case types::bh_chs_modified_list:
      c.destroy<bh_chs_modified_list_l>();
      break;
    case types::bh_chs_failed_to_be_setup_mod_list:
      c.destroy<bh_chs_failed_to_be_setup_mod_list_l>();
      break;
    case types::bh_chs_failed_to_be_modified_list:
      c.destroy<bh_chs_failed_to_be_modified_list_l>();
      break;
    case types::sl_drbs_setup_mod_list:
      c.destroy<sl_drbs_setup_mod_list_l>();
      break;
    case types::sl_drbs_modified_list:
      c.destroy<sl_drbs_modified_list_l>();
      break;
    case types::sl_drbs_failed_to_be_setup_mod_list:
      c.destroy<sl_drbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::sl_drbs_failed_to_be_modified_list:
      c.destroy<sl_drbs_failed_to_be_modified_list_l>();
      break;
    case types::requested_target_cell_global_id:
      c.destroy<nr_cgi_s>();
      break;
    case types::uu_rlc_ch_setup_list:
      c.destroy<uu_rlc_ch_setup_list_l>();
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      c.destroy<uu_rlc_ch_failed_to_be_setup_list_l>();
      break;
    case types::uu_rlc_ch_modified_list:
      c.destroy<uu_rlc_ch_modified_list_l>();
      break;
    case types::uu_rlc_ch_failed_to_be_modified_list:
      c.destroy<uu_rlc_ch_failed_to_be_modified_list_l>();
      break;
    case types::pc5_rlc_ch_setup_list:
      c.destroy<pc5_rlc_ch_setup_list_l>();
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      c.destroy<pc5_rlc_ch_failed_to_be_setup_list_l>();
      break;
    case types::pc5_rlc_ch_modified_list:
      c.destroy<pc5_rlc_ch_modified_list_l>();
      break;
    case types::pc5_rlc_ch_failed_to_be_modified_list:
      c.destroy<pc5_rlc_ch_failed_to_be_modified_list_l>();
      break;
    case types::sdt_bearer_cfg_info:
      c.destroy<sdt_bearer_cfg_info_s>();
      break;
    case types::ue_multicast_m_rbs_setup_list:
      c.destroy<ue_multicast_m_rbs_setup_list_l>();
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      c.destroy<serving_cell_mo_encoded_in_cgc_list_l>();
      break;
    default:
      break;
  }
}
void ue_context_mod_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::res_coordination_transfer_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::du_to_cu_rrc_info:
      c.init<du_to_cu_rrc_info_s>();
      break;
    case types::drbs_setup_mod_list:
      c.init<drbs_setup_mod_list_l>();
      break;
    case types::drbs_modified_list:
      c.init<drbs_modified_list_l>();
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      c.init<srbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      c.init<drbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::scell_failedto_setup_mod_list:
      c.init<scell_failedto_setup_mod_list_l>();
      break;
    case types::drbs_failed_to_be_modified_list:
      c.init<drbs_failed_to_be_modified_list_l>();
      break;
    case types::inactivity_monitoring_resp:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::c_rnti:
      break;
    case types::associated_scell_list:
      c.init<associated_scell_list_l>();
      break;
    case types::srbs_setup_mod_list:
      c.init<srbs_setup_mod_list_l>();
      break;
    case types::srbs_modified_list:
      c.init<srbs_modified_list_l>();
      break;
    case types::full_cfg:
      break;
    case types::bh_chs_setup_mod_list:
      c.init<bh_chs_setup_mod_list_l>();
      break;
    case types::bh_chs_modified_list:
      c.init<bh_chs_modified_list_l>();
      break;
    case types::bh_chs_failed_to_be_setup_mod_list:
      c.init<bh_chs_failed_to_be_setup_mod_list_l>();
      break;
    case types::bh_chs_failed_to_be_modified_list:
      c.init<bh_chs_failed_to_be_modified_list_l>();
      break;
    case types::sl_drbs_setup_mod_list:
      c.init<sl_drbs_setup_mod_list_l>();
      break;
    case types::sl_drbs_modified_list:
      c.init<sl_drbs_modified_list_l>();
      break;
    case types::sl_drbs_failed_to_be_setup_mod_list:
      c.init<sl_drbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::sl_drbs_failed_to_be_modified_list:
      c.init<sl_drbs_failed_to_be_modified_list_l>();
      break;
    case types::requested_target_cell_global_id:
      c.init<nr_cgi_s>();
      break;
    case types::scg_activation_status:
      break;
    case types::uu_rlc_ch_setup_list:
      c.init<uu_rlc_ch_setup_list_l>();
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      c.init<uu_rlc_ch_failed_to_be_setup_list_l>();
      break;
    case types::uu_rlc_ch_modified_list:
      c.init<uu_rlc_ch_modified_list_l>();
      break;
    case types::uu_rlc_ch_failed_to_be_modified_list:
      c.init<uu_rlc_ch_failed_to_be_modified_list_l>();
      break;
    case types::pc5_rlc_ch_setup_list:
      c.init<pc5_rlc_ch_setup_list_l>();
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      c.init<pc5_rlc_ch_failed_to_be_setup_list_l>();
      break;
    case types::pc5_rlc_ch_modified_list:
      c.init<pc5_rlc_ch_modified_list_l>();
      break;
    case types::pc5_rlc_ch_failed_to_be_modified_list:
      c.init<pc5_rlc_ch_failed_to_be_modified_list_l>();
      break;
    case types::sdt_bearer_cfg_info:
      c.init<sdt_bearer_cfg_info_s>();
      break;
    case types::ue_multicast_m_rbs_setup_list:
      c.init<ue_multicast_m_rbs_setup_list_l>();
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      c.init<serving_cell_mo_encoded_in_cgc_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_resp_ies_o::value_c");
  }
}
ue_context_mod_resp_ies_o::value_c::value_c(const ue_context_mod_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::du_to_cu_rrc_info:
      c.init(other.c.get<du_to_cu_rrc_info_s>());
      break;
    case types::drbs_setup_mod_list:
      c.init(other.c.get<drbs_setup_mod_list_l>());
      break;
    case types::drbs_modified_list:
      c.init(other.c.get<drbs_modified_list_l>());
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      c.init(other.c.get<srbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      c.init(other.c.get<drbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::scell_failedto_setup_mod_list:
      c.init(other.c.get<scell_failedto_setup_mod_list_l>());
      break;
    case types::drbs_failed_to_be_modified_list:
      c.init(other.c.get<drbs_failed_to_be_modified_list_l>());
      break;
    case types::inactivity_monitoring_resp:
      c.init(other.c.get<inactivity_monitoring_resp_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::c_rnti:
      c.init(other.c.get<uint32_t>());
      break;
    case types::associated_scell_list:
      c.init(other.c.get<associated_scell_list_l>());
      break;
    case types::srbs_setup_mod_list:
      c.init(other.c.get<srbs_setup_mod_list_l>());
      break;
    case types::srbs_modified_list:
      c.init(other.c.get<srbs_modified_list_l>());
      break;
    case types::full_cfg:
      c.init(other.c.get<full_cfg_e>());
      break;
    case types::bh_chs_setup_mod_list:
      c.init(other.c.get<bh_chs_setup_mod_list_l>());
      break;
    case types::bh_chs_modified_list:
      c.init(other.c.get<bh_chs_modified_list_l>());
      break;
    case types::bh_chs_failed_to_be_setup_mod_list:
      c.init(other.c.get<bh_chs_failed_to_be_setup_mod_list_l>());
      break;
    case types::bh_chs_failed_to_be_modified_list:
      c.init(other.c.get<bh_chs_failed_to_be_modified_list_l>());
      break;
    case types::sl_drbs_setup_mod_list:
      c.init(other.c.get<sl_drbs_setup_mod_list_l>());
      break;
    case types::sl_drbs_modified_list:
      c.init(other.c.get<sl_drbs_modified_list_l>());
      break;
    case types::sl_drbs_failed_to_be_setup_mod_list:
      c.init(other.c.get<sl_drbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::sl_drbs_failed_to_be_modified_list:
      c.init(other.c.get<sl_drbs_failed_to_be_modified_list_l>());
      break;
    case types::requested_target_cell_global_id:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::scg_activation_status:
      c.init(other.c.get<scg_activation_status_e>());
      break;
    case types::uu_rlc_ch_setup_list:
      c.init(other.c.get<uu_rlc_ch_setup_list_l>());
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      c.init(other.c.get<uu_rlc_ch_failed_to_be_setup_list_l>());
      break;
    case types::uu_rlc_ch_modified_list:
      c.init(other.c.get<uu_rlc_ch_modified_list_l>());
      break;
    case types::uu_rlc_ch_failed_to_be_modified_list:
      c.init(other.c.get<uu_rlc_ch_failed_to_be_modified_list_l>());
      break;
    case types::pc5_rlc_ch_setup_list:
      c.init(other.c.get<pc5_rlc_ch_setup_list_l>());
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      c.init(other.c.get<pc5_rlc_ch_failed_to_be_setup_list_l>());
      break;
    case types::pc5_rlc_ch_modified_list:
      c.init(other.c.get<pc5_rlc_ch_modified_list_l>());
      break;
    case types::pc5_rlc_ch_failed_to_be_modified_list:
      c.init(other.c.get<pc5_rlc_ch_failed_to_be_modified_list_l>());
      break;
    case types::sdt_bearer_cfg_info:
      c.init(other.c.get<sdt_bearer_cfg_info_s>());
      break;
    case types::ue_multicast_m_rbs_setup_list:
      c.init(other.c.get<ue_multicast_m_rbs_setup_list_l>());
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      c.init(other.c.get<serving_cell_mo_encoded_in_cgc_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_resp_ies_o::value_c");
  }
}
ue_context_mod_resp_ies_o::value_c&
ue_context_mod_resp_ies_o::value_c::operator=(const ue_context_mod_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::du_to_cu_rrc_info:
      c.set(other.c.get<du_to_cu_rrc_info_s>());
      break;
    case types::drbs_setup_mod_list:
      c.set(other.c.get<drbs_setup_mod_list_l>());
      break;
    case types::drbs_modified_list:
      c.set(other.c.get<drbs_modified_list_l>());
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      c.set(other.c.get<srbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      c.set(other.c.get<drbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::scell_failedto_setup_mod_list:
      c.set(other.c.get<scell_failedto_setup_mod_list_l>());
      break;
    case types::drbs_failed_to_be_modified_list:
      c.set(other.c.get<drbs_failed_to_be_modified_list_l>());
      break;
    case types::inactivity_monitoring_resp:
      c.set(other.c.get<inactivity_monitoring_resp_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::c_rnti:
      c.set(other.c.get<uint32_t>());
      break;
    case types::associated_scell_list:
      c.set(other.c.get<associated_scell_list_l>());
      break;
    case types::srbs_setup_mod_list:
      c.set(other.c.get<srbs_setup_mod_list_l>());
      break;
    case types::srbs_modified_list:
      c.set(other.c.get<srbs_modified_list_l>());
      break;
    case types::full_cfg:
      c.set(other.c.get<full_cfg_e>());
      break;
    case types::bh_chs_setup_mod_list:
      c.set(other.c.get<bh_chs_setup_mod_list_l>());
      break;
    case types::bh_chs_modified_list:
      c.set(other.c.get<bh_chs_modified_list_l>());
      break;
    case types::bh_chs_failed_to_be_setup_mod_list:
      c.set(other.c.get<bh_chs_failed_to_be_setup_mod_list_l>());
      break;
    case types::bh_chs_failed_to_be_modified_list:
      c.set(other.c.get<bh_chs_failed_to_be_modified_list_l>());
      break;
    case types::sl_drbs_setup_mod_list:
      c.set(other.c.get<sl_drbs_setup_mod_list_l>());
      break;
    case types::sl_drbs_modified_list:
      c.set(other.c.get<sl_drbs_modified_list_l>());
      break;
    case types::sl_drbs_failed_to_be_setup_mod_list:
      c.set(other.c.get<sl_drbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::sl_drbs_failed_to_be_modified_list:
      c.set(other.c.get<sl_drbs_failed_to_be_modified_list_l>());
      break;
    case types::requested_target_cell_global_id:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::scg_activation_status:
      c.set(other.c.get<scg_activation_status_e>());
      break;
    case types::uu_rlc_ch_setup_list:
      c.set(other.c.get<uu_rlc_ch_setup_list_l>());
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      c.set(other.c.get<uu_rlc_ch_failed_to_be_setup_list_l>());
      break;
    case types::uu_rlc_ch_modified_list:
      c.set(other.c.get<uu_rlc_ch_modified_list_l>());
      break;
    case types::uu_rlc_ch_failed_to_be_modified_list:
      c.set(other.c.get<uu_rlc_ch_failed_to_be_modified_list_l>());
      break;
    case types::pc5_rlc_ch_setup_list:
      c.set(other.c.get<pc5_rlc_ch_setup_list_l>());
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      c.set(other.c.get<pc5_rlc_ch_failed_to_be_setup_list_l>());
      break;
    case types::pc5_rlc_ch_modified_list:
      c.set(other.c.get<pc5_rlc_ch_modified_list_l>());
      break;
    case types::pc5_rlc_ch_failed_to_be_modified_list:
      c.set(other.c.get<pc5_rlc_ch_failed_to_be_modified_list_l>());
      break;
    case types::sdt_bearer_cfg_info:
      c.set(other.c.get<sdt_bearer_cfg_info_s>());
      break;
    case types::ue_multicast_m_rbs_setup_list:
      c.set(other.c.get<ue_multicast_m_rbs_setup_list_l>());
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      c.set(other.c.get<serving_cell_mo_encoded_in_cgc_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_mod_resp_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_mod_resp_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
unbounded_octstring<true>& ue_context_mod_resp_ies_o::value_c::res_coordination_transfer_container()
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
du_to_cu_rrc_info_s& ue_context_mod_resp_ies_o::value_c::du_to_cu_rrc_info()
{
  assert_choice_type(types::du_to_cu_rrc_info, type_, "Value");
  return c.get<du_to_cu_rrc_info_s>();
}
drbs_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::drbs_setup_mod_list()
{
  assert_choice_type(types::drbs_setup_mod_list, type_, "Value");
  return c.get<drbs_setup_mod_list_l>();
}
drbs_modified_list_l& ue_context_mod_resp_ies_o::value_c::drbs_modified_list()
{
  assert_choice_type(types::drbs_modified_list, type_, "Value");
  return c.get<drbs_modified_list_l>();
}
srbs_failed_to_be_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::srbs_failed_to_be_setup_mod_list()
{
  assert_choice_type(types::srbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<srbs_failed_to_be_setup_mod_list_l>();
}
drbs_failed_to_be_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::drbs_failed_to_be_setup_mod_list()
{
  assert_choice_type(types::drbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<drbs_failed_to_be_setup_mod_list_l>();
}
scell_failedto_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::scell_failedto_setup_mod_list()
{
  assert_choice_type(types::scell_failedto_setup_mod_list, type_, "Value");
  return c.get<scell_failedto_setup_mod_list_l>();
}
drbs_failed_to_be_modified_list_l& ue_context_mod_resp_ies_o::value_c::drbs_failed_to_be_modified_list()
{
  assert_choice_type(types::drbs_failed_to_be_modified_list, type_, "Value");
  return c.get<drbs_failed_to_be_modified_list_l>();
}
inactivity_monitoring_resp_e& ue_context_mod_resp_ies_o::value_c::inactivity_monitoring_resp()
{
  assert_choice_type(types::inactivity_monitoring_resp, type_, "Value");
  return c.get<inactivity_monitoring_resp_e>();
}
crit_diagnostics_s& ue_context_mod_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
uint32_t& ue_context_mod_resp_ies_o::value_c::c_rnti()
{
  assert_choice_type(types::c_rnti, type_, "Value");
  return c.get<uint32_t>();
}
associated_scell_list_l& ue_context_mod_resp_ies_o::value_c::associated_scell_list()
{
  assert_choice_type(types::associated_scell_list, type_, "Value");
  return c.get<associated_scell_list_l>();
}
srbs_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::srbs_setup_mod_list()
{
  assert_choice_type(types::srbs_setup_mod_list, type_, "Value");
  return c.get<srbs_setup_mod_list_l>();
}
srbs_modified_list_l& ue_context_mod_resp_ies_o::value_c::srbs_modified_list()
{
  assert_choice_type(types::srbs_modified_list, type_, "Value");
  return c.get<srbs_modified_list_l>();
}
full_cfg_e& ue_context_mod_resp_ies_o::value_c::full_cfg()
{
  assert_choice_type(types::full_cfg, type_, "Value");
  return c.get<full_cfg_e>();
}
bh_chs_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::bh_chs_setup_mod_list()
{
  assert_choice_type(types::bh_chs_setup_mod_list, type_, "Value");
  return c.get<bh_chs_setup_mod_list_l>();
}
bh_chs_modified_list_l& ue_context_mod_resp_ies_o::value_c::bh_chs_modified_list()
{
  assert_choice_type(types::bh_chs_modified_list, type_, "Value");
  return c.get<bh_chs_modified_list_l>();
}
bh_chs_failed_to_be_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::bh_chs_failed_to_be_setup_mod_list()
{
  assert_choice_type(types::bh_chs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<bh_chs_failed_to_be_setup_mod_list_l>();
}
bh_chs_failed_to_be_modified_list_l& ue_context_mod_resp_ies_o::value_c::bh_chs_failed_to_be_modified_list()
{
  assert_choice_type(types::bh_chs_failed_to_be_modified_list, type_, "Value");
  return c.get<bh_chs_failed_to_be_modified_list_l>();
}
sl_drbs_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::sl_drbs_setup_mod_list()
{
  assert_choice_type(types::sl_drbs_setup_mod_list, type_, "Value");
  return c.get<sl_drbs_setup_mod_list_l>();
}
sl_drbs_modified_list_l& ue_context_mod_resp_ies_o::value_c::sl_drbs_modified_list()
{
  assert_choice_type(types::sl_drbs_modified_list, type_, "Value");
  return c.get<sl_drbs_modified_list_l>();
}
sl_drbs_failed_to_be_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::sl_drbs_failed_to_be_setup_mod_list()
{
  assert_choice_type(types::sl_drbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<sl_drbs_failed_to_be_setup_mod_list_l>();
}
sl_drbs_failed_to_be_modified_list_l& ue_context_mod_resp_ies_o::value_c::sl_drbs_failed_to_be_modified_list()
{
  assert_choice_type(types::sl_drbs_failed_to_be_modified_list, type_, "Value");
  return c.get<sl_drbs_failed_to_be_modified_list_l>();
}
nr_cgi_s& ue_context_mod_resp_ies_o::value_c::requested_target_cell_global_id()
{
  assert_choice_type(types::requested_target_cell_global_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
scg_activation_status_e& ue_context_mod_resp_ies_o::value_c::scg_activation_status()
{
  assert_choice_type(types::scg_activation_status, type_, "Value");
  return c.get<scg_activation_status_e>();
}
uu_rlc_ch_setup_list_l& ue_context_mod_resp_ies_o::value_c::uu_rlc_ch_setup_list()
{
  assert_choice_type(types::uu_rlc_ch_setup_list, type_, "Value");
  return c.get<uu_rlc_ch_setup_list_l>();
}
uu_rlc_ch_failed_to_be_setup_list_l& ue_context_mod_resp_ies_o::value_c::uu_rlc_ch_failed_to_be_setup_list()
{
  assert_choice_type(types::uu_rlc_ch_failed_to_be_setup_list, type_, "Value");
  return c.get<uu_rlc_ch_failed_to_be_setup_list_l>();
}
uu_rlc_ch_modified_list_l& ue_context_mod_resp_ies_o::value_c::uu_rlc_ch_modified_list()
{
  assert_choice_type(types::uu_rlc_ch_modified_list, type_, "Value");
  return c.get<uu_rlc_ch_modified_list_l>();
}
uu_rlc_ch_failed_to_be_modified_list_l& ue_context_mod_resp_ies_o::value_c::uu_rlc_ch_failed_to_be_modified_list()
{
  assert_choice_type(types::uu_rlc_ch_failed_to_be_modified_list, type_, "Value");
  return c.get<uu_rlc_ch_failed_to_be_modified_list_l>();
}
pc5_rlc_ch_setup_list_l& ue_context_mod_resp_ies_o::value_c::pc5_rlc_ch_setup_list()
{
  assert_choice_type(types::pc5_rlc_ch_setup_list, type_, "Value");
  return c.get<pc5_rlc_ch_setup_list_l>();
}
pc5_rlc_ch_failed_to_be_setup_list_l& ue_context_mod_resp_ies_o::value_c::pc5_rlc_ch_failed_to_be_setup_list()
{
  assert_choice_type(types::pc5_rlc_ch_failed_to_be_setup_list, type_, "Value");
  return c.get<pc5_rlc_ch_failed_to_be_setup_list_l>();
}
pc5_rlc_ch_modified_list_l& ue_context_mod_resp_ies_o::value_c::pc5_rlc_ch_modified_list()
{
  assert_choice_type(types::pc5_rlc_ch_modified_list, type_, "Value");
  return c.get<pc5_rlc_ch_modified_list_l>();
}
pc5_rlc_ch_failed_to_be_modified_list_l& ue_context_mod_resp_ies_o::value_c::pc5_rlc_ch_failed_to_be_modified_list()
{
  assert_choice_type(types::pc5_rlc_ch_failed_to_be_modified_list, type_, "Value");
  return c.get<pc5_rlc_ch_failed_to_be_modified_list_l>();
}
sdt_bearer_cfg_info_s& ue_context_mod_resp_ies_o::value_c::sdt_bearer_cfg_info()
{
  assert_choice_type(types::sdt_bearer_cfg_info, type_, "Value");
  return c.get<sdt_bearer_cfg_info_s>();
}
ue_multicast_m_rbs_setup_list_l& ue_context_mod_resp_ies_o::value_c::ue_multicast_m_rbs_setup_list()
{
  assert_choice_type(types::ue_multicast_m_rbs_setup_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_setup_list_l>();
}
serving_cell_mo_encoded_in_cgc_list_l& ue_context_mod_resp_ies_o::value_c::serving_cell_mo_encoded_in_cgc_list()
{
  assert_choice_type(types::serving_cell_mo_encoded_in_cgc_list, type_, "Value");
  return c.get<serving_cell_mo_encoded_in_cgc_list_l>();
}
const uint64_t& ue_context_mod_resp_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_mod_resp_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const unbounded_octstring<true>& ue_context_mod_resp_ies_o::value_c::res_coordination_transfer_container() const
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const du_to_cu_rrc_info_s& ue_context_mod_resp_ies_o::value_c::du_to_cu_rrc_info() const
{
  assert_choice_type(types::du_to_cu_rrc_info, type_, "Value");
  return c.get<du_to_cu_rrc_info_s>();
}
const drbs_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::drbs_setup_mod_list() const
{
  assert_choice_type(types::drbs_setup_mod_list, type_, "Value");
  return c.get<drbs_setup_mod_list_l>();
}
const drbs_modified_list_l& ue_context_mod_resp_ies_o::value_c::drbs_modified_list() const
{
  assert_choice_type(types::drbs_modified_list, type_, "Value");
  return c.get<drbs_modified_list_l>();
}
const srbs_failed_to_be_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::srbs_failed_to_be_setup_mod_list() const
{
  assert_choice_type(types::srbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<srbs_failed_to_be_setup_mod_list_l>();
}
const drbs_failed_to_be_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::drbs_failed_to_be_setup_mod_list() const
{
  assert_choice_type(types::drbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<drbs_failed_to_be_setup_mod_list_l>();
}
const scell_failedto_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::scell_failedto_setup_mod_list() const
{
  assert_choice_type(types::scell_failedto_setup_mod_list, type_, "Value");
  return c.get<scell_failedto_setup_mod_list_l>();
}
const drbs_failed_to_be_modified_list_l& ue_context_mod_resp_ies_o::value_c::drbs_failed_to_be_modified_list() const
{
  assert_choice_type(types::drbs_failed_to_be_modified_list, type_, "Value");
  return c.get<drbs_failed_to_be_modified_list_l>();
}
const inactivity_monitoring_resp_e& ue_context_mod_resp_ies_o::value_c::inactivity_monitoring_resp() const
{
  assert_choice_type(types::inactivity_monitoring_resp, type_, "Value");
  return c.get<inactivity_monitoring_resp_e>();
}
const crit_diagnostics_s& ue_context_mod_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint32_t& ue_context_mod_resp_ies_o::value_c::c_rnti() const
{
  assert_choice_type(types::c_rnti, type_, "Value");
  return c.get<uint32_t>();
}
const associated_scell_list_l& ue_context_mod_resp_ies_o::value_c::associated_scell_list() const
{
  assert_choice_type(types::associated_scell_list, type_, "Value");
  return c.get<associated_scell_list_l>();
}
const srbs_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::srbs_setup_mod_list() const
{
  assert_choice_type(types::srbs_setup_mod_list, type_, "Value");
  return c.get<srbs_setup_mod_list_l>();
}
const srbs_modified_list_l& ue_context_mod_resp_ies_o::value_c::srbs_modified_list() const
{
  assert_choice_type(types::srbs_modified_list, type_, "Value");
  return c.get<srbs_modified_list_l>();
}
const full_cfg_e& ue_context_mod_resp_ies_o::value_c::full_cfg() const
{
  assert_choice_type(types::full_cfg, type_, "Value");
  return c.get<full_cfg_e>();
}
const bh_chs_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::bh_chs_setup_mod_list() const
{
  assert_choice_type(types::bh_chs_setup_mod_list, type_, "Value");
  return c.get<bh_chs_setup_mod_list_l>();
}
const bh_chs_modified_list_l& ue_context_mod_resp_ies_o::value_c::bh_chs_modified_list() const
{
  assert_choice_type(types::bh_chs_modified_list, type_, "Value");
  return c.get<bh_chs_modified_list_l>();
}
const bh_chs_failed_to_be_setup_mod_list_l&
ue_context_mod_resp_ies_o::value_c::bh_chs_failed_to_be_setup_mod_list() const
{
  assert_choice_type(types::bh_chs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<bh_chs_failed_to_be_setup_mod_list_l>();
}
const bh_chs_failed_to_be_modified_list_l& ue_context_mod_resp_ies_o::value_c::bh_chs_failed_to_be_modified_list() const
{
  assert_choice_type(types::bh_chs_failed_to_be_modified_list, type_, "Value");
  return c.get<bh_chs_failed_to_be_modified_list_l>();
}
const sl_drbs_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::sl_drbs_setup_mod_list() const
{
  assert_choice_type(types::sl_drbs_setup_mod_list, type_, "Value");
  return c.get<sl_drbs_setup_mod_list_l>();
}
const sl_drbs_modified_list_l& ue_context_mod_resp_ies_o::value_c::sl_drbs_modified_list() const
{
  assert_choice_type(types::sl_drbs_modified_list, type_, "Value");
  return c.get<sl_drbs_modified_list_l>();
}
const sl_drbs_failed_to_be_setup_mod_list_l&
ue_context_mod_resp_ies_o::value_c::sl_drbs_failed_to_be_setup_mod_list() const
{
  assert_choice_type(types::sl_drbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<sl_drbs_failed_to_be_setup_mod_list_l>();
}
const sl_drbs_failed_to_be_modified_list_l&
ue_context_mod_resp_ies_o::value_c::sl_drbs_failed_to_be_modified_list() const
{
  assert_choice_type(types::sl_drbs_failed_to_be_modified_list, type_, "Value");
  return c.get<sl_drbs_failed_to_be_modified_list_l>();
}
const nr_cgi_s& ue_context_mod_resp_ies_o::value_c::requested_target_cell_global_id() const
{
  assert_choice_type(types::requested_target_cell_global_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
const scg_activation_status_e& ue_context_mod_resp_ies_o::value_c::scg_activation_status() const
{
  assert_choice_type(types::scg_activation_status, type_, "Value");
  return c.get<scg_activation_status_e>();
}
const uu_rlc_ch_setup_list_l& ue_context_mod_resp_ies_o::value_c::uu_rlc_ch_setup_list() const
{
  assert_choice_type(types::uu_rlc_ch_setup_list, type_, "Value");
  return c.get<uu_rlc_ch_setup_list_l>();
}
const uu_rlc_ch_failed_to_be_setup_list_l& ue_context_mod_resp_ies_o::value_c::uu_rlc_ch_failed_to_be_setup_list() const
{
  assert_choice_type(types::uu_rlc_ch_failed_to_be_setup_list, type_, "Value");
  return c.get<uu_rlc_ch_failed_to_be_setup_list_l>();
}
const uu_rlc_ch_modified_list_l& ue_context_mod_resp_ies_o::value_c::uu_rlc_ch_modified_list() const
{
  assert_choice_type(types::uu_rlc_ch_modified_list, type_, "Value");
  return c.get<uu_rlc_ch_modified_list_l>();
}
const uu_rlc_ch_failed_to_be_modified_list_l&
ue_context_mod_resp_ies_o::value_c::uu_rlc_ch_failed_to_be_modified_list() const
{
  assert_choice_type(types::uu_rlc_ch_failed_to_be_modified_list, type_, "Value");
  return c.get<uu_rlc_ch_failed_to_be_modified_list_l>();
}
const pc5_rlc_ch_setup_list_l& ue_context_mod_resp_ies_o::value_c::pc5_rlc_ch_setup_list() const
{
  assert_choice_type(types::pc5_rlc_ch_setup_list, type_, "Value");
  return c.get<pc5_rlc_ch_setup_list_l>();
}
const pc5_rlc_ch_failed_to_be_setup_list_l&
ue_context_mod_resp_ies_o::value_c::pc5_rlc_ch_failed_to_be_setup_list() const
{
  assert_choice_type(types::pc5_rlc_ch_failed_to_be_setup_list, type_, "Value");
  return c.get<pc5_rlc_ch_failed_to_be_setup_list_l>();
}
const pc5_rlc_ch_modified_list_l& ue_context_mod_resp_ies_o::value_c::pc5_rlc_ch_modified_list() const
{
  assert_choice_type(types::pc5_rlc_ch_modified_list, type_, "Value");
  return c.get<pc5_rlc_ch_modified_list_l>();
}
const pc5_rlc_ch_failed_to_be_modified_list_l&
ue_context_mod_resp_ies_o::value_c::pc5_rlc_ch_failed_to_be_modified_list() const
{
  assert_choice_type(types::pc5_rlc_ch_failed_to_be_modified_list, type_, "Value");
  return c.get<pc5_rlc_ch_failed_to_be_modified_list_l>();
}
const sdt_bearer_cfg_info_s& ue_context_mod_resp_ies_o::value_c::sdt_bearer_cfg_info() const
{
  assert_choice_type(types::sdt_bearer_cfg_info, type_, "Value");
  return c.get<sdt_bearer_cfg_info_s>();
}
const ue_multicast_m_rbs_setup_list_l& ue_context_mod_resp_ies_o::value_c::ue_multicast_m_rbs_setup_list() const
{
  assert_choice_type(types::ue_multicast_m_rbs_setup_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_setup_list_l>();
}
const serving_cell_mo_encoded_in_cgc_list_l&
ue_context_mod_resp_ies_o::value_c::serving_cell_mo_encoded_in_cgc_list() const
{
  assert_choice_type(types::serving_cell_mo_encoded_in_cgc_list, type_, "Value");
  return c.get<serving_cell_mo_encoded_in_cgc_list_l>();
}
void ue_context_mod_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::du_to_cu_rrc_info:
      j.write_fieldname("DUtoCURRCInformation");
      c.get<du_to_cu_rrc_info_s>().to_json(j);
      break;
    case types::drbs_setup_mod_list:
      j.start_array("DRBs-SetupMod-List");
      for (const auto& e1 : c.get<drbs_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_modified_list:
      j.start_array("DRBs-Modified-List");
      for (const auto& e1 : c.get<drbs_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      j.start_array("SRBs-FailedToBeSetupMod-List");
      for (const auto& e1 : c.get<srbs_failed_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      j.start_array("DRBs-FailedToBeSetupMod-List");
      for (const auto& e1 : c.get<drbs_failed_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::scell_failedto_setup_mod_list:
      j.start_array("SCell-FailedtoSetupMod-List");
      for (const auto& e1 : c.get<scell_failedto_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_failed_to_be_modified_list:
      j.start_array("DRBs-FailedToBeModified-List");
      for (const auto& e1 : c.get<drbs_failed_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::inactivity_monitoring_resp:
      j.write_str("InactivityMonitoringResponse", "not-supported");
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::c_rnti:
      j.write_int("INTEGER (0..65535,...)", c.get<uint32_t>());
      break;
    case types::associated_scell_list:
      j.start_array("Associated-SCell-List");
      for (const auto& e1 : c.get<associated_scell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_setup_mod_list:
      j.start_array("SRBs-SetupMod-List");
      for (const auto& e1 : c.get<srbs_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_modified_list:
      j.start_array("SRBs-Modified-List");
      for (const auto& e1 : c.get<srbs_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::full_cfg:
      j.write_str("FullConfiguration", "full");
      break;
    case types::bh_chs_setup_mod_list:
      j.start_array("BHChannels-SetupMod-List");
      for (const auto& e1 : c.get<bh_chs_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::bh_chs_modified_list:
      j.start_array("BHChannels-Modified-List");
      for (const auto& e1 : c.get<bh_chs_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::bh_chs_failed_to_be_setup_mod_list:
      j.start_array("BHChannels-FailedToBeSetupMod-List");
      for (const auto& e1 : c.get<bh_chs_failed_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::bh_chs_failed_to_be_modified_list:
      j.start_array("BHChannels-FailedToBeModified-List");
      for (const auto& e1 : c.get<bh_chs_failed_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sl_drbs_setup_mod_list:
      j.start_array("SLDRBs-SetupMod-List");
      for (const auto& e1 : c.get<sl_drbs_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sl_drbs_modified_list:
      j.start_array("SLDRBs-Modified-List");
      for (const auto& e1 : c.get<sl_drbs_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sl_drbs_failed_to_be_setup_mod_list:
      j.start_array("SLDRBs-FailedToBeSetupMod-List");
      for (const auto& e1 : c.get<sl_drbs_failed_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sl_drbs_failed_to_be_modified_list:
      j.start_array("SLDRBs-FailedToBeModified-List");
      for (const auto& e1 : c.get<sl_drbs_failed_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::requested_target_cell_global_id:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    case types::scg_activation_status:
      j.write_str("SCGActivationStatus", c.get<scg_activation_status_e>().to_string());
      break;
    case types::uu_rlc_ch_setup_list:
      j.start_array("UuRLCChannelSetupList");
      for (const auto& e1 : c.get<uu_rlc_ch_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      j.start_array("UuRLCChannelFailedToBeSetupList");
      for (const auto& e1 : c.get<uu_rlc_ch_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::uu_rlc_ch_modified_list:
      j.start_array("UuRLCChannelModifiedList");
      for (const auto& e1 : c.get<uu_rlc_ch_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::uu_rlc_ch_failed_to_be_modified_list:
      j.start_array("UuRLCChannelFailedToBeModifiedList");
      for (const auto& e1 : c.get<uu_rlc_ch_failed_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pc5_rlc_ch_setup_list:
      j.start_array("PC5RLCChannelSetupList");
      for (const auto& e1 : c.get<pc5_rlc_ch_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      j.start_array("PC5RLCChannelFailedToBeSetupList");
      for (const auto& e1 : c.get<pc5_rlc_ch_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pc5_rlc_ch_modified_list:
      j.start_array("PC5RLCChannelModifiedList");
      for (const auto& e1 : c.get<pc5_rlc_ch_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pc5_rlc_ch_failed_to_be_modified_list:
      j.start_array("PC5RLCChannelFailedToBeModifiedList");
      for (const auto& e1 : c.get<pc5_rlc_ch_failed_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sdt_bearer_cfg_info:
      j.write_fieldname("SDTBearerConfigurationInfo");
      c.get<sdt_bearer_cfg_info_s>().to_json(j);
      break;
    case types::ue_multicast_m_rbs_setup_list:
      j.start_array("UE-MulticastMRBs-Setup-List");
      for (const auto& e1 : c.get<ue_multicast_m_rbs_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      j.start_array("ServingCellMO-encoded-in-CGC-List");
      for (const auto& e1 : c.get<serving_cell_mo_encoded_in_cgc_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_mod_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::du_to_cu_rrc_info:
      HANDLE_CODE(c.get<du_to_cu_rrc_info_s>().pack(bref));
      break;
    case types::drbs_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_setup_mod_list_l>(), 1, 64, true));
      break;
    case types::drbs_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_modified_list_l>(), 1, 64, true));
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_failed_to_be_setup_mod_list_l>(), 1, 8, true));
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_failed_to_be_setup_mod_list_l>(), 1, 64, true));
      break;
    case types::scell_failedto_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<scell_failedto_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::drbs_failed_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_failed_to_be_modified_list_l>(), 1, 64, true));
      break;
    case types::inactivity_monitoring_resp:
      HANDLE_CODE(c.get<inactivity_monitoring_resp_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::c_rnti:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u, true, true));
      break;
    case types::associated_scell_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<associated_scell_list_l>(), 1, 32, true));
      break;
    case types::srbs_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_setup_mod_list_l>(), 1, 8, true));
      break;
    case types::srbs_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_modified_list_l>(), 1, 8, true));
      break;
    case types::full_cfg:
      HANDLE_CODE(c.get<full_cfg_e>().pack(bref));
      break;
    case types::bh_chs_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_chs_setup_mod_list_l>(), 1, 65536, true));
      break;
    case types::bh_chs_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_chs_modified_list_l>(), 1, 65536, true));
      break;
    case types::bh_chs_failed_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_chs_failed_to_be_setup_mod_list_l>(), 1, 65536, true));
      break;
    case types::bh_chs_failed_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_chs_failed_to_be_modified_list_l>(), 1, 65536, true));
      break;
    case types::sl_drbs_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_drbs_setup_mod_list_l>(), 1, 512, true));
      break;
    case types::sl_drbs_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_drbs_modified_list_l>(), 1, 512, true));
      break;
    case types::sl_drbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_drbs_failed_to_be_setup_mod_list_l>(), 1, 512, true));
      break;
    case types::sl_drbs_failed_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_drbs_failed_to_be_modified_list_l>(), 1, 512, true));
      break;
    case types::requested_target_cell_global_id:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    case types::scg_activation_status:
      HANDLE_CODE(c.get<scg_activation_status_e>().pack(bref));
      break;
    case types::uu_rlc_ch_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uu_rlc_ch_setup_list_l>(), 1, 32, true));
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uu_rlc_ch_failed_to_be_setup_list_l>(), 1, 32, true));
      break;
    case types::uu_rlc_ch_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uu_rlc_ch_modified_list_l>(), 1, 32, true));
      break;
    case types::uu_rlc_ch_failed_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uu_rlc_ch_failed_to_be_modified_list_l>(), 1, 32, true));
      break;
    case types::pc5_rlc_ch_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pc5_rlc_ch_setup_list_l>(), 1, 512, true));
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pc5_rlc_ch_failed_to_be_setup_list_l>(), 1, 512, true));
      break;
    case types::pc5_rlc_ch_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pc5_rlc_ch_modified_list_l>(), 1, 512, true));
      break;
    case types::pc5_rlc_ch_failed_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pc5_rlc_ch_failed_to_be_modified_list_l>(), 1, 512, true));
      break;
    case types::sdt_bearer_cfg_info:
      HANDLE_CODE(c.get<sdt_bearer_cfg_info_s>().pack(bref));
      break;
    case types::ue_multicast_m_rbs_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_multicast_m_rbs_setup_list_l>(), 1, 64, true));
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<serving_cell_mo_encoded_in_cgc_list_l>(), 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::du_to_cu_rrc_info:
      HANDLE_CODE(c.get<du_to_cu_rrc_info_s>().unpack(bref));
      break;
    case types::drbs_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_setup_mod_list_l>(), bref, 1, 64, true));
      break;
    case types::drbs_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_modified_list_l>(), bref, 1, 64, true));
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_failed_to_be_setup_mod_list_l>(), bref, 1, 8, true));
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_failed_to_be_setup_mod_list_l>(), bref, 1, 64, true));
      break;
    case types::scell_failedto_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<scell_failedto_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::drbs_failed_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_failed_to_be_modified_list_l>(), bref, 1, 64, true));
      break;
    case types::inactivity_monitoring_resp:
      HANDLE_CODE(c.get<inactivity_monitoring_resp_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::c_rnti:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u, true, true));
      break;
    case types::associated_scell_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<associated_scell_list_l>(), bref, 1, 32, true));
      break;
    case types::srbs_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_setup_mod_list_l>(), bref, 1, 8, true));
      break;
    case types::srbs_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_modified_list_l>(), bref, 1, 8, true));
      break;
    case types::full_cfg:
      HANDLE_CODE(c.get<full_cfg_e>().unpack(bref));
      break;
    case types::bh_chs_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_chs_setup_mod_list_l>(), bref, 1, 65536, true));
      break;
    case types::bh_chs_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_chs_modified_list_l>(), bref, 1, 65536, true));
      break;
    case types::bh_chs_failed_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_chs_failed_to_be_setup_mod_list_l>(), bref, 1, 65536, true));
      break;
    case types::bh_chs_failed_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_chs_failed_to_be_modified_list_l>(), bref, 1, 65536, true));
      break;
    case types::sl_drbs_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_drbs_setup_mod_list_l>(), bref, 1, 512, true));
      break;
    case types::sl_drbs_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_drbs_modified_list_l>(), bref, 1, 512, true));
      break;
    case types::sl_drbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_drbs_failed_to_be_setup_mod_list_l>(), bref, 1, 512, true));
      break;
    case types::sl_drbs_failed_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_drbs_failed_to_be_modified_list_l>(), bref, 1, 512, true));
      break;
    case types::requested_target_cell_global_id:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    case types::scg_activation_status:
      HANDLE_CODE(c.get<scg_activation_status_e>().unpack(bref));
      break;
    case types::uu_rlc_ch_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uu_rlc_ch_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uu_rlc_ch_failed_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::uu_rlc_ch_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uu_rlc_ch_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::uu_rlc_ch_failed_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uu_rlc_ch_failed_to_be_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::pc5_rlc_ch_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pc5_rlc_ch_setup_list_l>(), bref, 1, 512, true));
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pc5_rlc_ch_failed_to_be_setup_list_l>(), bref, 1, 512, true));
      break;
    case types::pc5_rlc_ch_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pc5_rlc_ch_modified_list_l>(), bref, 1, 512, true));
      break;
    case types::pc5_rlc_ch_failed_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pc5_rlc_ch_failed_to_be_modified_list_l>(), bref, 1, 512, true));
      break;
    case types::sdt_bearer_cfg_info:
      HANDLE_CODE(c.get<sdt_bearer_cfg_info_s>().unpack(bref));
      break;
    case types::ue_multicast_m_rbs_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_multicast_m_rbs_setup_list_l>(), bref, 1, 64, true));
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<serving_cell_mo_encoded_in_cgc_list_l>(), bref, 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// UEContextReleaseCommandIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_release_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 50, 64, 47, 109, 184, 375, 576, 588};
  return map_enum_number(names, 11, idx, "id");
}
bool ue_context_release_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 50, 64, 47, 109, 184, 375, 576, 588};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_release_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 50:
      return crit_e::ignore;
    case 64:
      return crit_e::ignore;
    case 47:
      return crit_e::ignore;
    case 109:
      return crit_e::ignore;
    case 184:
      return crit_e::ignore;
    case 375:
      return crit_e::reject;
    case 576:
      return crit_e::reject;
    case 588:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_release_cmd_ies_o::value_c ue_context_release_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 64:
      ret.set(value_c::types::srb_id);
      break;
    case 47:
      ret.set(value_c::types::old_gnb_du_ue_f1ap_id);
      break;
    case 109:
      ret.set(value_c::types::execute_dupl);
      break;
    case 184:
      ret.set(value_c::types::rrc_delivery_status_request);
      break;
    case 375:
      ret.set(value_c::types::target_cells_to_cancel);
      break;
    case 576:
      ret.set(value_c::types::pos_conext_rev_ind);
      break;
    case 588:
      ret.set(value_c::types::cg_sdt_kept_ind);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_release_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 50:
      return presence_e::optional;
    case 64:
      return presence_e::conditional;
    case 47:
      return presence_e::optional;
    case 109:
      return presence_e::optional;
    case 184:
      return presence_e::optional;
    case 375:
      return presence_e::optional;
    case 576:
      return presence_e::optional;
    case 588:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_release_cmd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::target_cells_to_cancel:
      c.destroy<target_cell_list_l>();
      break;
    default:
      break;
  }
}
void ue_context_release_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::srb_id:
      break;
    case types::old_gnb_du_ue_f1ap_id:
      break;
    case types::execute_dupl:
      break;
    case types::rrc_delivery_status_request:
      break;
    case types::target_cells_to_cancel:
      c.init<target_cell_list_l>();
      break;
    case types::pos_conext_rev_ind:
      break;
    case types::cg_sdt_kept_ind:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_cmd_ies_o::value_c");
  }
}
ue_context_release_cmd_ies_o::value_c::value_c(const ue_context_release_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::srb_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::old_gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::execute_dupl:
      c.init(other.c.get<execute_dupl_e>());
      break;
    case types::rrc_delivery_status_request:
      c.init(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::target_cells_to_cancel:
      c.init(other.c.get<target_cell_list_l>());
      break;
    case types::pos_conext_rev_ind:
      c.init(other.c.get<pos_conext_rev_ind_e>());
      break;
    case types::cg_sdt_kept_ind:
      c.init(other.c.get<cg_sdt_kept_ind_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_cmd_ies_o::value_c");
  }
}
ue_context_release_cmd_ies_o::value_c&
ue_context_release_cmd_ies_o::value_c::operator=(const ue_context_release_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::srb_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::old_gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::execute_dupl:
      c.set(other.c.get<execute_dupl_e>());
      break;
    case types::rrc_delivery_status_request:
      c.set(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::target_cells_to_cancel:
      c.set(other.c.get<target_cell_list_l>());
      break;
    case types::pos_conext_rev_ind:
      c.set(other.c.get<pos_conext_rev_ind_e>());
      break;
    case types::cg_sdt_kept_ind:
      c.set(other.c.get<cg_sdt_kept_ind_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_cmd_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_release_cmd_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_release_cmd_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& ue_context_release_cmd_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
unbounded_octstring<true>& ue_context_release_cmd_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
uint8_t& ue_context_release_cmd_ies_o::value_c::srb_id()
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
uint64_t& ue_context_release_cmd_ies_o::value_c::old_gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::old_gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
execute_dupl_e& ue_context_release_cmd_ies_o::value_c::execute_dupl()
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
rrc_delivery_status_request_e& ue_context_release_cmd_ies_o::value_c::rrc_delivery_status_request()
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
target_cell_list_l& ue_context_release_cmd_ies_o::value_c::target_cells_to_cancel()
{
  assert_choice_type(types::target_cells_to_cancel, type_, "Value");
  return c.get<target_cell_list_l>();
}
pos_conext_rev_ind_e& ue_context_release_cmd_ies_o::value_c::pos_conext_rev_ind()
{
  assert_choice_type(types::pos_conext_rev_ind, type_, "Value");
  return c.get<pos_conext_rev_ind_e>();
}
cg_sdt_kept_ind_e& ue_context_release_cmd_ies_o::value_c::cg_sdt_kept_ind()
{
  assert_choice_type(types::cg_sdt_kept_ind, type_, "Value");
  return c.get<cg_sdt_kept_ind_e>();
}
const uint64_t& ue_context_release_cmd_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_release_cmd_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& ue_context_release_cmd_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const unbounded_octstring<true>& ue_context_release_cmd_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const uint8_t& ue_context_release_cmd_ies_o::value_c::srb_id() const
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
const uint64_t& ue_context_release_cmd_ies_o::value_c::old_gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::old_gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const execute_dupl_e& ue_context_release_cmd_ies_o::value_c::execute_dupl() const
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
const rrc_delivery_status_request_e& ue_context_release_cmd_ies_o::value_c::rrc_delivery_status_request() const
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
const target_cell_list_l& ue_context_release_cmd_ies_o::value_c::target_cells_to_cancel() const
{
  assert_choice_type(types::target_cells_to_cancel, type_, "Value");
  return c.get<target_cell_list_l>();
}
const pos_conext_rev_ind_e& ue_context_release_cmd_ies_o::value_c::pos_conext_rev_ind() const
{
  assert_choice_type(types::pos_conext_rev_ind, type_, "Value");
  return c.get<pos_conext_rev_ind_e>();
}
const cg_sdt_kept_ind_e& ue_context_release_cmd_ies_o::value_c::cg_sdt_kept_ind() const
{
  assert_choice_type(types::cg_sdt_kept_ind, type_, "Value");
  return c.get<cg_sdt_kept_ind_e>();
}
void ue_context_release_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::srb_id:
      j.write_int("INTEGER (0..3,...)", c.get<uint8_t>());
      break;
    case types::old_gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::execute_dupl:
      j.write_str("ExecuteDuplication", "true");
      break;
    case types::rrc_delivery_status_request:
      j.write_str("RRCDeliveryStatusRequest", "true");
      break;
    case types::target_cells_to_cancel:
      j.start_array("TargetCellList");
      for (const auto& e1 : c.get<target_cell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pos_conext_rev_ind:
      j.write_str("PosConextRevIndication", "true");
      break;
    case types::cg_sdt_kept_ind:
      j.write_str("CG-SDTKeptIndicator", "true");
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_release_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::srb_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    case types::old_gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().pack(bref));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().pack(bref));
      break;
    case types::target_cells_to_cancel:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<target_cell_list_l>(), 1, 8, true));
      break;
    case types::pos_conext_rev_ind:
      HANDLE_CODE(c.get<pos_conext_rev_ind_e>().pack(bref));
      break;
    case types::cg_sdt_kept_ind:
      HANDLE_CODE(c.get<cg_sdt_kept_ind_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_release_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::srb_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    case types::old_gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().unpack(bref));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().unpack(bref));
      break;
    case types::target_cells_to_cancel:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<target_cell_list_l>(), bref, 1, 8, true));
      break;
    case types::pos_conext_rev_ind:
      HANDLE_CODE(c.get<pos_conext_rev_ind_e>().unpack(bref));
      break;
    case types::cg_sdt_kept_ind:
      HANDLE_CODE(c.get<cg_sdt_kept_ind_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// UEContextReleaseCompleteIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_release_complete_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool ue_context_release_complete_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_release_complete_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_release_complete_ies_o::value_c ue_context_release_complete_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_release_complete_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_release_complete_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void ue_context_release_complete_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_complete_ies_o::value_c");
  }
}
ue_context_release_complete_ies_o::value_c::value_c(const ue_context_release_complete_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_complete_ies_o::value_c");
  }
}
ue_context_release_complete_ies_o::value_c&
ue_context_release_complete_ies_o::value_c::operator=(const ue_context_release_complete_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_complete_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_release_complete_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_release_complete_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
crit_diagnostics_s& ue_context_release_complete_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& ue_context_release_complete_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_release_complete_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const crit_diagnostics_s& ue_context_release_complete_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void ue_context_release_complete_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_complete_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_release_complete_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_complete_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_release_complete_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_complete_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// UEContextReleaseRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_release_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 375};
  return map_enum_number(names, 4, idx, "id");
}
bool ue_context_release_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 375};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_release_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 375:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_release_request_ies_o::value_c ue_context_release_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 375:
      ret.set(value_c::types::target_cells_to_cancel);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_release_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 375:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_release_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::target_cells_to_cancel:
      c.destroy<target_cell_list_l>();
      break;
    default:
      break;
  }
}
void ue_context_release_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::target_cells_to_cancel:
      c.init<target_cell_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_request_ies_o::value_c");
  }
}
ue_context_release_request_ies_o::value_c::value_c(const ue_context_release_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::target_cells_to_cancel:
      c.init(other.c.get<target_cell_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_request_ies_o::value_c");
  }
}
ue_context_release_request_ies_o::value_c&
ue_context_release_request_ies_o::value_c::operator=(const ue_context_release_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::target_cells_to_cancel:
      c.set(other.c.get<target_cell_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_release_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_release_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& ue_context_release_request_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
target_cell_list_l& ue_context_release_request_ies_o::value_c::target_cells_to_cancel()
{
  assert_choice_type(types::target_cells_to_cancel, type_, "Value");
  return c.get<target_cell_list_l>();
}
const uint64_t& ue_context_release_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_release_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& ue_context_release_request_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const target_cell_list_l& ue_context_release_request_ies_o::value_c::target_cells_to_cancel() const
{
  assert_choice_type(types::target_cells_to_cancel, type_, "Value");
  return c.get<target_cell_list_l>();
}
void ue_context_release_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::target_cells_to_cancel:
      j.start_array("TargetCellList");
      for (const auto& e1 : c.get<target_cell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_release_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::target_cells_to_cancel:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<target_cell_list_l>(), 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_release_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::target_cells_to_cancel:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<target_cell_list_l>(), bref, 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// UEContextSetupFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_setup_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 7, 92, 376};
  return map_enum_number(names, 6, idx, "id");
}
bool ue_context_setup_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 7, 92, 376};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_setup_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    case 92:
      return crit_e::ignore;
    case 376:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_setup_fail_ies_o::value_c ue_context_setup_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 92:
      ret.set(value_c::types::potential_sp_cell_list);
      break;
    case 376:
      ret.set(value_c::types::requested_target_cell_global_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_setup_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::optional;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    case 92:
      return presence_e::optional;
    case 376:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_setup_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::potential_sp_cell_list:
      c.destroy<potential_sp_cell_list_l>();
      break;
    case types::requested_target_cell_global_id:
      c.destroy<nr_cgi_s>();
      break;
    default:
      break;
  }
}
void ue_context_setup_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::potential_sp_cell_list:
      c.init<potential_sp_cell_list_l>();
      break;
    case types::requested_target_cell_global_id:
      c.init<nr_cgi_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_fail_ies_o::value_c");
  }
}
ue_context_setup_fail_ies_o::value_c::value_c(const ue_context_setup_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::potential_sp_cell_list:
      c.init(other.c.get<potential_sp_cell_list_l>());
      break;
    case types::requested_target_cell_global_id:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_fail_ies_o::value_c");
  }
}
ue_context_setup_fail_ies_o::value_c&
ue_context_setup_fail_ies_o::value_c::operator=(const ue_context_setup_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::potential_sp_cell_list:
      c.set(other.c.get<potential_sp_cell_list_l>());
      break;
    case types::requested_target_cell_global_id:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_setup_fail_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_setup_fail_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& ue_context_setup_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& ue_context_setup_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
potential_sp_cell_list_l& ue_context_setup_fail_ies_o::value_c::potential_sp_cell_list()
{
  assert_choice_type(types::potential_sp_cell_list, type_, "Value");
  return c.get<potential_sp_cell_list_l>();
}
nr_cgi_s& ue_context_setup_fail_ies_o::value_c::requested_target_cell_global_id()
{
  assert_choice_type(types::requested_target_cell_global_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
const uint64_t& ue_context_setup_fail_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_setup_fail_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& ue_context_setup_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& ue_context_setup_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const potential_sp_cell_list_l& ue_context_setup_fail_ies_o::value_c::potential_sp_cell_list() const
{
  assert_choice_type(types::potential_sp_cell_list, type_, "Value");
  return c.get<potential_sp_cell_list_l>();
}
const nr_cgi_s& ue_context_setup_fail_ies_o::value_c::requested_target_cell_global_id() const
{
  assert_choice_type(types::requested_target_cell_global_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
void ue_context_setup_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::potential_sp_cell_list:
      j.start_array("Potential-SpCell-List");
      for (const auto& e1 : c.get<potential_sp_cell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::requested_target_cell_global_id:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_setup_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::potential_sp_cell_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<potential_sp_cell_list_l>(), 0, 64, true));
      break;
    case types::requested_target_cell_global_id:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_setup_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::potential_sp_cell_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<potential_sp_cell_list_l>(), bref, 0, 64, true));
      break;
    case types::requested_target_cell_global_id:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// UEContextSetupRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_setup_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40,  41,  63,  107, 96,  9,   90,  38,  49,  54,  74,  35,  97,  108, 50,  126, 165,
                                   158, 184, 195, 182, 217, 226, 242, 248, 258, 282, 306, 307, 308, 309, 340, 330, 373,
                                   377, 382, 428, 511, 536, 547, 591, 594, 595, 596, 599, 608, 619, 626, 632, 630, 695};
  return map_enum_number(names, 51, idx, "id");
}
bool ue_context_setup_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40,  41,  63,  107, 96,  9,   90,  38,  49,  54,  74,  35,  97,  108, 50,  126, 165,
                                   158, 184, 195, 182, 217, 226, 242, 248, 258, 282, 306, 307, 308, 309, 340, 330, 373,
                                   377, 382, 428, 511, 536, 547, 591, 594, 595, 596, 599, 608, 619, 626, 632, 630, 695};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_setup_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::ignore;
    case 63:
      return crit_e::reject;
    case 107:
      return crit_e::reject;
    case 96:
      return crit_e::ignore;
    case 9:
      return crit_e::reject;
    case 90:
      return crit_e::ignore;
    case 38:
      return crit_e::ignore;
    case 49:
      return crit_e::ignore;
    case 54:
      return crit_e::ignore;
    case 74:
      return crit_e::reject;
    case 35:
      return crit_e::reject;
    case 97:
      return crit_e::reject;
    case 108:
      return crit_e::reject;
    case 50:
      return crit_e::ignore;
    case 126:
      return crit_e::ignore;
    case 165:
      return crit_e::ignore;
    case 158:
      return crit_e::ignore;
    case 184:
      return crit_e::ignore;
    case 195:
      return crit_e::ignore;
    case 182:
      return crit_e::ignore;
    case 217:
      return crit_e::reject;
    case 226:
      return crit_e::ignore;
    case 242:
      return crit_e::ignore;
    case 248:
      return crit_e::ignore;
    case 258:
      return crit_e::reject;
    case 282:
      return crit_e::reject;
    case 306:
      return crit_e::ignore;
    case 307:
      return crit_e::ignore;
    case 308:
      return crit_e::ignore;
    case 309:
      return crit_e::ignore;
    case 340:
      return crit_e::ignore;
    case 330:
      return crit_e::reject;
    case 373:
      return crit_e::reject;
    case 377:
      return crit_e::ignore;
    case 382:
      return crit_e::reject;
    case 428:
      return crit_e::reject;
    case 511:
      return crit_e::reject;
    case 536:
      return crit_e::ignore;
    case 547:
      return crit_e::ignore;
    case 591:
      return crit_e::ignore;
    case 594:
      return crit_e::ignore;
    case 595:
      return crit_e::ignore;
    case 596:
      return crit_e::ignore;
    case 599:
      return crit_e::reject;
    case 608:
      return crit_e::reject;
    case 619:
      return crit_e::ignore;
    case 626:
      return crit_e::ignore;
    case 632:
      return crit_e::reject;
    case 630:
      return crit_e::reject;
    case 695:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_setup_request_ies_o::value_c ue_context_setup_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 63:
      ret.set(value_c::types::sp_cell_id);
      break;
    case 107:
      ret.set(value_c::types::serv_cell_idx);
      break;
    case 96:
      ret.set(value_c::types::sp_cell_ul_cfg);
      break;
    case 9:
      ret.set(value_c::types::cu_to_du_rrc_info);
      break;
    case 90:
      ret.set(value_c::types::candidate_sp_cell_list);
      break;
    case 38:
      ret.set(value_c::types::drx_cycle);
      break;
    case 49:
      ret.set(value_c::types::res_coordination_transfer_container);
      break;
    case 54:
      ret.set(value_c::types::scell_to_be_setup_list);
      break;
    case 74:
      ret.set(value_c::types::srbs_to_be_setup_list);
      break;
    case 35:
      ret.set(value_c::types::drbs_to_be_setup_list);
      break;
    case 97:
      ret.set(value_c::types::inactivity_monitoring_request);
      break;
    case 108:
      ret.set(value_c::types::rat_freq_prio_info);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 126:
      ret.set(value_c::types::masked_imeisv);
      break;
    case 165:
      ret.set(value_c::types::serving_plmn);
      break;
    case 158:
      ret.set(value_c::types::gnb_du_ue_ambr_ul);
      break;
    case 184:
      ret.set(value_c::types::rrc_delivery_status_request);
      break;
    case 195:
      ret.set(value_c::types::res_coordination_transfer_info);
      break;
    case 182:
      ret.set(value_c::types::serving_cell_mo);
      break;
    case 217:
      ret.set(value_c::types::new_gnb_cu_ue_f1ap_id);
      break;
    case 226:
      ret.set(value_c::types::ran_ue_id);
      break;
    case 242:
      ret.set(value_c::types::trace_activation);
      break;
    case 248:
      ret.set(value_c::types::add_rrm_prio_idx);
      break;
    case 258:
      ret.set(value_c::types::bh_chs_to_be_setup_list);
      break;
    case 282:
      ret.set(value_c::types::cfg_bap_address);
      break;
    case 306:
      ret.set(value_c::types::nr_v2x_services_authorized);
      break;
    case 307:
      ret.set(value_c::types::ltev2x_services_authorized);
      break;
    case 308:
      ret.set(value_c::types::nr_ue_sidelink_aggr_max_bitrate);
      break;
    case 309:
      ret.set(value_c::types::lte_ue_sidelink_aggr_max_bitrate);
      break;
    case 340:
      ret.set(value_c::types::pc5_link_ambr);
      break;
    case 330:
      ret.set(value_c::types::sl_drbs_to_be_setup_list);
      break;
    case 373:
      ret.set(value_c::types::conditional_inter_du_mob_info);
      break;
    case 377:
      ret.set(value_c::types::management_based_mdt_plmn_list);
      break;
    case 382:
      ret.set(value_c::types::serving_n_id);
      break;
    case 428:
      ret.set(value_c::types::f1_c_transfer_path);
      break;
    case 511:
      ret.set(value_c::types::f1_c_transfer_path_nr_dc);
      break;
    case 536:
      ret.set(value_c::types::mdt_polluted_meas_ind);
      break;
    case 547:
      ret.set(value_c::types::scg_activation_request);
      break;
    case 591:
      ret.set(value_c::types::cg_sdt_session_info_old);
      break;
    case 594:
      ret.set(value_c::types::five_g_pro_se_authorized);
      break;
    case 595:
      ret.set(value_c::types::five_g_pro_se_ue_pc5_aggr_max_bitrate);
      break;
    case 596:
      ret.set(value_c::types::five_g_pro_se_pc5_link_ambr);
      break;
    case 599:
      ret.set(value_c::types::uu_rlc_ch_to_be_setup_list);
      break;
    case 608:
      ret.set(value_c::types::pc5_rlc_ch_to_be_setup_list);
      break;
    case 619:
      ret.set(value_c::types::path_switch_cfg);
      break;
    case 626:
      ret.set(value_c::types::gnb_du_ue_slice_max_bit_rate_list);
      break;
    case 632:
      ret.set(value_c::types::multicast_mbs_session_setup_list);
      break;
    case 630:
      ret.set(value_c::types::ue_multicast_m_rbs_to_be_setup_list);
      break;
    case 695:
      ret.set(value_c::types::serving_cell_mo_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_setup_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::optional;
    case 63:
      return presence_e::mandatory;
    case 107:
      return presence_e::mandatory;
    case 96:
      return presence_e::optional;
    case 9:
      return presence_e::mandatory;
    case 90:
      return presence_e::optional;
    case 38:
      return presence_e::optional;
    case 49:
      return presence_e::optional;
    case 54:
      return presence_e::optional;
    case 74:
      return presence_e::optional;
    case 35:
      return presence_e::optional;
    case 97:
      return presence_e::optional;
    case 108:
      return presence_e::optional;
    case 50:
      return presence_e::optional;
    case 126:
      return presence_e::optional;
    case 165:
      return presence_e::optional;
    case 158:
      return presence_e::conditional;
    case 184:
      return presence_e::optional;
    case 195:
      return presence_e::optional;
    case 182:
      return presence_e::optional;
    case 217:
      return presence_e::optional;
    case 226:
      return presence_e::optional;
    case 242:
      return presence_e::optional;
    case 248:
      return presence_e::optional;
    case 258:
      return presence_e::optional;
    case 282:
      return presence_e::optional;
    case 306:
      return presence_e::optional;
    case 307:
      return presence_e::optional;
    case 308:
      return presence_e::optional;
    case 309:
      return presence_e::optional;
    case 340:
      return presence_e::optional;
    case 330:
      return presence_e::optional;
    case 373:
      return presence_e::optional;
    case 377:
      return presence_e::optional;
    case 382:
      return presence_e::optional;
    case 428:
      return presence_e::optional;
    case 511:
      return presence_e::optional;
    case 536:
      return presence_e::optional;
    case 547:
      return presence_e::optional;
    case 591:
      return presence_e::optional;
    case 594:
      return presence_e::optional;
    case 595:
      return presence_e::optional;
    case 596:
      return presence_e::optional;
    case 599:
      return presence_e::optional;
    case 608:
      return presence_e::optional;
    case 619:
      return presence_e::optional;
    case 626:
      return presence_e::optional;
    case 632:
      return presence_e::optional;
    case 630:
      return presence_e::optional;
    case 695:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_setup_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::sp_cell_id:
      c.destroy<nr_cgi_s>();
      break;
    case types::cu_to_du_rrc_info:
      c.destroy<cu_to_du_rrc_info_s>();
      break;
    case types::candidate_sp_cell_list:
      c.destroy<candidate_sp_cell_list_l>();
      break;
    case types::drx_cycle:
      c.destroy<drx_cycle_s>();
      break;
    case types::res_coordination_transfer_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::scell_to_be_setup_list:
      c.destroy<scell_to_be_setup_list_l>();
      break;
    case types::srbs_to_be_setup_list:
      c.destroy<srbs_to_be_setup_list_l>();
      break;
    case types::drbs_to_be_setup_list:
      c.destroy<drbs_to_be_setup_list_l>();
      break;
    case types::rat_freq_prio_info:
      c.destroy<rat_freq_prio_info_c>();
      break;
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::masked_imeisv:
      c.destroy<fixed_bitstring<64, false, true>>();
      break;
    case types::serving_plmn:
      c.destroy<fixed_octstring<3, true>>();
      break;
    case types::res_coordination_transfer_info:
      c.destroy<res_coordination_transfer_info_s>();
      break;
    case types::ran_ue_id:
      c.destroy<fixed_octstring<8, true>>();
      break;
    case types::trace_activation:
      c.destroy<trace_activation_s>();
      break;
    case types::add_rrm_prio_idx:
      c.destroy<fixed_bitstring<32, false, true>>();
      break;
    case types::bh_chs_to_be_setup_list:
      c.destroy<bh_chs_to_be_setup_list_l>();
      break;
    case types::cfg_bap_address:
      c.destroy<fixed_bitstring<10, false, true>>();
      break;
    case types::nr_v2x_services_authorized:
      c.destroy<nr_v2x_services_authorized_s>();
      break;
    case types::ltev2x_services_authorized:
      c.destroy<ltev2x_services_authorized_s>();
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      c.destroy<nr_ue_sidelink_aggr_max_bitrate_s>();
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      c.destroy<lte_ue_sidelink_aggr_max_bitrate_s>();
      break;
    case types::sl_drbs_to_be_setup_list:
      c.destroy<sl_drbs_to_be_setup_list_l>();
      break;
    case types::conditional_inter_du_mob_info:
      c.destroy<conditional_inter_du_mob_info_s>();
      break;
    case types::management_based_mdt_plmn_list:
      c.destroy<mdt_plmn_list_l>();
      break;
    case types::serving_n_id:
      c.destroy<fixed_bitstring<44, false, true>>();
      break;
    case types::f1_c_transfer_path:
      c.destroy<f1_c_transfer_path_s>();
      break;
    case types::f1_c_transfer_path_nr_dc:
      c.destroy<f1_c_transfer_path_nr_dc_s>();
      break;
    case types::cg_sdt_session_info_old:
      c.destroy<cg_sdt_session_info_s>();
      break;
    case types::five_g_pro_se_authorized:
      c.destroy<five_g_pro_se_authorized_s>();
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      c.destroy<nr_ue_sidelink_aggr_max_bitrate_s>();
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      c.destroy<uu_rlc_ch_to_be_setup_list_l>();
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      c.destroy<pc5_rlc_ch_to_be_setup_list_l>();
      break;
    case types::path_switch_cfg:
      c.destroy<path_switch_cfg_s>();
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      c.destroy<gnb_du_ue_slice_max_bit_rate_list_l>();
      break;
    case types::multicast_mbs_session_setup_list:
      c.destroy<multicast_mbs_session_list_l>();
      break;
    case types::ue_multicast_m_rbs_to_be_setup_list:
      c.destroy<ue_multicast_m_rbs_to_be_setup_list_l>();
      break;
    case types::serving_cell_mo_list:
      c.destroy<serving_cell_mo_list_l>();
      break;
    default:
      break;
  }
}
void ue_context_setup_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::sp_cell_id:
      c.init<nr_cgi_s>();
      break;
    case types::serv_cell_idx:
      break;
    case types::sp_cell_ul_cfg:
      break;
    case types::cu_to_du_rrc_info:
      c.init<cu_to_du_rrc_info_s>();
      break;
    case types::candidate_sp_cell_list:
      c.init<candidate_sp_cell_list_l>();
      break;
    case types::drx_cycle:
      c.init<drx_cycle_s>();
      break;
    case types::res_coordination_transfer_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::scell_to_be_setup_list:
      c.init<scell_to_be_setup_list_l>();
      break;
    case types::srbs_to_be_setup_list:
      c.init<srbs_to_be_setup_list_l>();
      break;
    case types::drbs_to_be_setup_list:
      c.init<drbs_to_be_setup_list_l>();
      break;
    case types::inactivity_monitoring_request:
      break;
    case types::rat_freq_prio_info:
      c.init<rat_freq_prio_info_c>();
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::masked_imeisv:
      c.init<fixed_bitstring<64, false, true>>();
      break;
    case types::serving_plmn:
      c.init<fixed_octstring<3, true>>();
      break;
    case types::gnb_du_ue_ambr_ul:
      break;
    case types::rrc_delivery_status_request:
      break;
    case types::res_coordination_transfer_info:
      c.init<res_coordination_transfer_info_s>();
      break;
    case types::serving_cell_mo:
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      break;
    case types::ran_ue_id:
      c.init<fixed_octstring<8, true>>();
      break;
    case types::trace_activation:
      c.init<trace_activation_s>();
      break;
    case types::add_rrm_prio_idx:
      c.init<fixed_bitstring<32, false, true>>();
      break;
    case types::bh_chs_to_be_setup_list:
      c.init<bh_chs_to_be_setup_list_l>();
      break;
    case types::cfg_bap_address:
      c.init<fixed_bitstring<10, false, true>>();
      break;
    case types::nr_v2x_services_authorized:
      c.init<nr_v2x_services_authorized_s>();
      break;
    case types::ltev2x_services_authorized:
      c.init<ltev2x_services_authorized_s>();
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      c.init<nr_ue_sidelink_aggr_max_bitrate_s>();
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      c.init<lte_ue_sidelink_aggr_max_bitrate_s>();
      break;
    case types::pc5_link_ambr:
      break;
    case types::sl_drbs_to_be_setup_list:
      c.init<sl_drbs_to_be_setup_list_l>();
      break;
    case types::conditional_inter_du_mob_info:
      c.init<conditional_inter_du_mob_info_s>();
      break;
    case types::management_based_mdt_plmn_list:
      c.init<mdt_plmn_list_l>();
      break;
    case types::serving_n_id:
      c.init<fixed_bitstring<44, false, true>>();
      break;
    case types::f1_c_transfer_path:
      c.init<f1_c_transfer_path_s>();
      break;
    case types::f1_c_transfer_path_nr_dc:
      c.init<f1_c_transfer_path_nr_dc_s>();
      break;
    case types::mdt_polluted_meas_ind:
      break;
    case types::scg_activation_request:
      break;
    case types::cg_sdt_session_info_old:
      c.init<cg_sdt_session_info_s>();
      break;
    case types::five_g_pro_se_authorized:
      c.init<five_g_pro_se_authorized_s>();
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      c.init<nr_ue_sidelink_aggr_max_bitrate_s>();
      break;
    case types::five_g_pro_se_pc5_link_ambr:
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      c.init<uu_rlc_ch_to_be_setup_list_l>();
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      c.init<pc5_rlc_ch_to_be_setup_list_l>();
      break;
    case types::path_switch_cfg:
      c.init<path_switch_cfg_s>();
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      c.init<gnb_du_ue_slice_max_bit_rate_list_l>();
      break;
    case types::multicast_mbs_session_setup_list:
      c.init<multicast_mbs_session_list_l>();
      break;
    case types::ue_multicast_m_rbs_to_be_setup_list:
      c.init<ue_multicast_m_rbs_to_be_setup_list_l>();
      break;
    case types::serving_cell_mo_list:
      c.init<serving_cell_mo_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_request_ies_o::value_c");
  }
}
ue_context_setup_request_ies_o::value_c::value_c(const ue_context_setup_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::sp_cell_id:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::serv_cell_idx:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sp_cell_ul_cfg:
      c.init(other.c.get<cell_ul_cfg_e>());
      break;
    case types::cu_to_du_rrc_info:
      c.init(other.c.get<cu_to_du_rrc_info_s>());
      break;
    case types::candidate_sp_cell_list:
      c.init(other.c.get<candidate_sp_cell_list_l>());
      break;
    case types::drx_cycle:
      c.init(other.c.get<drx_cycle_s>());
      break;
    case types::res_coordination_transfer_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::scell_to_be_setup_list:
      c.init(other.c.get<scell_to_be_setup_list_l>());
      break;
    case types::srbs_to_be_setup_list:
      c.init(other.c.get<srbs_to_be_setup_list_l>());
      break;
    case types::drbs_to_be_setup_list:
      c.init(other.c.get<drbs_to_be_setup_list_l>());
      break;
    case types::inactivity_monitoring_request:
      c.init(other.c.get<inactivity_monitoring_request_e>());
      break;
    case types::rat_freq_prio_info:
      c.init(other.c.get<rat_freq_prio_info_c>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::masked_imeisv:
      c.init(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::serving_plmn:
      c.init(other.c.get<fixed_octstring<3, true>>());
      break;
    case types::gnb_du_ue_ambr_ul:
      c.init(other.c.get<uint64_t>());
      break;
    case types::rrc_delivery_status_request:
      c.init(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::res_coordination_transfer_info:
      c.init(other.c.get<res_coordination_transfer_info_s>());
      break;
    case types::serving_cell_mo:
      c.init(other.c.get<uint8_t>());
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_id:
      c.init(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::trace_activation:
      c.init(other.c.get<trace_activation_s>());
      break;
    case types::add_rrm_prio_idx:
      c.init(other.c.get<fixed_bitstring<32, false, true>>());
      break;
    case types::bh_chs_to_be_setup_list:
      c.init(other.c.get<bh_chs_to_be_setup_list_l>());
      break;
    case types::cfg_bap_address:
      c.init(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::nr_v2x_services_authorized:
      c.init(other.c.get<nr_v2x_services_authorized_s>());
      break;
    case types::ltev2x_services_authorized:
      c.init(other.c.get<ltev2x_services_authorized_s>());
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      c.init(other.c.get<nr_ue_sidelink_aggr_max_bitrate_s>());
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      c.init(other.c.get<lte_ue_sidelink_aggr_max_bitrate_s>());
      break;
    case types::pc5_link_ambr:
      c.init(other.c.get<uint64_t>());
      break;
    case types::sl_drbs_to_be_setup_list:
      c.init(other.c.get<sl_drbs_to_be_setup_list_l>());
      break;
    case types::conditional_inter_du_mob_info:
      c.init(other.c.get<conditional_inter_du_mob_info_s>());
      break;
    case types::management_based_mdt_plmn_list:
      c.init(other.c.get<mdt_plmn_list_l>());
      break;
    case types::serving_n_id:
      c.init(other.c.get<fixed_bitstring<44, false, true>>());
      break;
    case types::f1_c_transfer_path:
      c.init(other.c.get<f1_c_transfer_path_s>());
      break;
    case types::f1_c_transfer_path_nr_dc:
      c.init(other.c.get<f1_c_transfer_path_nr_dc_s>());
      break;
    case types::mdt_polluted_meas_ind:
      c.init(other.c.get<mdt_polluted_meas_ind_e>());
      break;
    case types::scg_activation_request:
      c.init(other.c.get<scg_activation_request_e>());
      break;
    case types::cg_sdt_session_info_old:
      c.init(other.c.get<cg_sdt_session_info_s>());
      break;
    case types::five_g_pro_se_authorized:
      c.init(other.c.get<five_g_pro_se_authorized_s>());
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      c.init(other.c.get<nr_ue_sidelink_aggr_max_bitrate_s>());
      break;
    case types::five_g_pro_se_pc5_link_ambr:
      c.init(other.c.get<uint64_t>());
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      c.init(other.c.get<uu_rlc_ch_to_be_setup_list_l>());
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      c.init(other.c.get<pc5_rlc_ch_to_be_setup_list_l>());
      break;
    case types::path_switch_cfg:
      c.init(other.c.get<path_switch_cfg_s>());
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      c.init(other.c.get<gnb_du_ue_slice_max_bit_rate_list_l>());
      break;
    case types::multicast_mbs_session_setup_list:
      c.init(other.c.get<multicast_mbs_session_list_l>());
      break;
    case types::ue_multicast_m_rbs_to_be_setup_list:
      c.init(other.c.get<ue_multicast_m_rbs_to_be_setup_list_l>());
      break;
    case types::serving_cell_mo_list:
      c.init(other.c.get<serving_cell_mo_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_request_ies_o::value_c");
  }
}
ue_context_setup_request_ies_o::value_c&
ue_context_setup_request_ies_o::value_c::operator=(const ue_context_setup_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::sp_cell_id:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::serv_cell_idx:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sp_cell_ul_cfg:
      c.set(other.c.get<cell_ul_cfg_e>());
      break;
    case types::cu_to_du_rrc_info:
      c.set(other.c.get<cu_to_du_rrc_info_s>());
      break;
    case types::candidate_sp_cell_list:
      c.set(other.c.get<candidate_sp_cell_list_l>());
      break;
    case types::drx_cycle:
      c.set(other.c.get<drx_cycle_s>());
      break;
    case types::res_coordination_transfer_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::scell_to_be_setup_list:
      c.set(other.c.get<scell_to_be_setup_list_l>());
      break;
    case types::srbs_to_be_setup_list:
      c.set(other.c.get<srbs_to_be_setup_list_l>());
      break;
    case types::drbs_to_be_setup_list:
      c.set(other.c.get<drbs_to_be_setup_list_l>());
      break;
    case types::inactivity_monitoring_request:
      c.set(other.c.get<inactivity_monitoring_request_e>());
      break;
    case types::rat_freq_prio_info:
      c.set(other.c.get<rat_freq_prio_info_c>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::masked_imeisv:
      c.set(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::serving_plmn:
      c.set(other.c.get<fixed_octstring<3, true>>());
      break;
    case types::gnb_du_ue_ambr_ul:
      c.set(other.c.get<uint64_t>());
      break;
    case types::rrc_delivery_status_request:
      c.set(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::res_coordination_transfer_info:
      c.set(other.c.get<res_coordination_transfer_info_s>());
      break;
    case types::serving_cell_mo:
      c.set(other.c.get<uint8_t>());
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_id:
      c.set(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::trace_activation:
      c.set(other.c.get<trace_activation_s>());
      break;
    case types::add_rrm_prio_idx:
      c.set(other.c.get<fixed_bitstring<32, false, true>>());
      break;
    case types::bh_chs_to_be_setup_list:
      c.set(other.c.get<bh_chs_to_be_setup_list_l>());
      break;
    case types::cfg_bap_address:
      c.set(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::nr_v2x_services_authorized:
      c.set(other.c.get<nr_v2x_services_authorized_s>());
      break;
    case types::ltev2x_services_authorized:
      c.set(other.c.get<ltev2x_services_authorized_s>());
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      c.set(other.c.get<nr_ue_sidelink_aggr_max_bitrate_s>());
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      c.set(other.c.get<lte_ue_sidelink_aggr_max_bitrate_s>());
      break;
    case types::pc5_link_ambr:
      c.set(other.c.get<uint64_t>());
      break;
    case types::sl_drbs_to_be_setup_list:
      c.set(other.c.get<sl_drbs_to_be_setup_list_l>());
      break;
    case types::conditional_inter_du_mob_info:
      c.set(other.c.get<conditional_inter_du_mob_info_s>());
      break;
    case types::management_based_mdt_plmn_list:
      c.set(other.c.get<mdt_plmn_list_l>());
      break;
    case types::serving_n_id:
      c.set(other.c.get<fixed_bitstring<44, false, true>>());
      break;
    case types::f1_c_transfer_path:
      c.set(other.c.get<f1_c_transfer_path_s>());
      break;
    case types::f1_c_transfer_path_nr_dc:
      c.set(other.c.get<f1_c_transfer_path_nr_dc_s>());
      break;
    case types::mdt_polluted_meas_ind:
      c.set(other.c.get<mdt_polluted_meas_ind_e>());
      break;
    case types::scg_activation_request:
      c.set(other.c.get<scg_activation_request_e>());
      break;
    case types::cg_sdt_session_info_old:
      c.set(other.c.get<cg_sdt_session_info_s>());
      break;
    case types::five_g_pro_se_authorized:
      c.set(other.c.get<five_g_pro_se_authorized_s>());
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      c.set(other.c.get<nr_ue_sidelink_aggr_max_bitrate_s>());
      break;
    case types::five_g_pro_se_pc5_link_ambr:
      c.set(other.c.get<uint64_t>());
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      c.set(other.c.get<uu_rlc_ch_to_be_setup_list_l>());
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      c.set(other.c.get<pc5_rlc_ch_to_be_setup_list_l>());
      break;
    case types::path_switch_cfg:
      c.set(other.c.get<path_switch_cfg_s>());
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      c.set(other.c.get<gnb_du_ue_slice_max_bit_rate_list_l>());
      break;
    case types::multicast_mbs_session_setup_list:
      c.set(other.c.get<multicast_mbs_session_list_l>());
      break;
    case types::ue_multicast_m_rbs_to_be_setup_list:
      c.set(other.c.get<ue_multicast_m_rbs_to_be_setup_list_l>());
      break;
    case types::serving_cell_mo_list:
      c.set(other.c.get<serving_cell_mo_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_setup_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_setup_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
nr_cgi_s& ue_context_setup_request_ies_o::value_c::sp_cell_id()
{
  assert_choice_type(types::sp_cell_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
uint8_t& ue_context_setup_request_ies_o::value_c::serv_cell_idx()
{
  assert_choice_type(types::serv_cell_idx, type_, "Value");
  return c.get<uint8_t>();
}
cell_ul_cfg_e& ue_context_setup_request_ies_o::value_c::sp_cell_ul_cfg()
{
  assert_choice_type(types::sp_cell_ul_cfg, type_, "Value");
  return c.get<cell_ul_cfg_e>();
}
cu_to_du_rrc_info_s& ue_context_setup_request_ies_o::value_c::cu_to_du_rrc_info()
{
  assert_choice_type(types::cu_to_du_rrc_info, type_, "Value");
  return c.get<cu_to_du_rrc_info_s>();
}
candidate_sp_cell_list_l& ue_context_setup_request_ies_o::value_c::candidate_sp_cell_list()
{
  assert_choice_type(types::candidate_sp_cell_list, type_, "Value");
  return c.get<candidate_sp_cell_list_l>();
}
drx_cycle_s& ue_context_setup_request_ies_o::value_c::drx_cycle()
{
  assert_choice_type(types::drx_cycle, type_, "Value");
  return c.get<drx_cycle_s>();
}
unbounded_octstring<true>& ue_context_setup_request_ies_o::value_c::res_coordination_transfer_container()
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
scell_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::scell_to_be_setup_list()
{
  assert_choice_type(types::scell_to_be_setup_list, type_, "Value");
  return c.get<scell_to_be_setup_list_l>();
}
srbs_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::srbs_to_be_setup_list()
{
  assert_choice_type(types::srbs_to_be_setup_list, type_, "Value");
  return c.get<srbs_to_be_setup_list_l>();
}
drbs_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::drbs_to_be_setup_list()
{
  assert_choice_type(types::drbs_to_be_setup_list, type_, "Value");
  return c.get<drbs_to_be_setup_list_l>();
}
inactivity_monitoring_request_e& ue_context_setup_request_ies_o::value_c::inactivity_monitoring_request()
{
  assert_choice_type(types::inactivity_monitoring_request, type_, "Value");
  return c.get<inactivity_monitoring_request_e>();
}
rat_freq_prio_info_c& ue_context_setup_request_ies_o::value_c::rat_freq_prio_info()
{
  assert_choice_type(types::rat_freq_prio_info, type_, "Value");
  return c.get<rat_freq_prio_info_c>();
}
unbounded_octstring<true>& ue_context_setup_request_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
fixed_bitstring<64, false, true>& ue_context_setup_request_ies_o::value_c::masked_imeisv()
{
  assert_choice_type(types::masked_imeisv, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
fixed_octstring<3, true>& ue_context_setup_request_ies_o::value_c::serving_plmn()
{
  assert_choice_type(types::serving_plmn, type_, "Value");
  return c.get<fixed_octstring<3, true>>();
}
uint64_t& ue_context_setup_request_ies_o::value_c::gnb_du_ue_ambr_ul()
{
  assert_choice_type(types::gnb_du_ue_ambr_ul, type_, "Value");
  return c.get<uint64_t>();
}
rrc_delivery_status_request_e& ue_context_setup_request_ies_o::value_c::rrc_delivery_status_request()
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
res_coordination_transfer_info_s& ue_context_setup_request_ies_o::value_c::res_coordination_transfer_info()
{
  assert_choice_type(types::res_coordination_transfer_info, type_, "Value");
  return c.get<res_coordination_transfer_info_s>();
}
uint8_t& ue_context_setup_request_ies_o::value_c::serving_cell_mo()
{
  assert_choice_type(types::serving_cell_mo, type_, "Value");
  return c.get<uint8_t>();
}
uint64_t& ue_context_setup_request_ies_o::value_c::new_gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::new_gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
fixed_octstring<8, true>& ue_context_setup_request_ies_o::value_c::ran_ue_id()
{
  assert_choice_type(types::ran_ue_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
trace_activation_s& ue_context_setup_request_ies_o::value_c::trace_activation()
{
  assert_choice_type(types::trace_activation, type_, "Value");
  return c.get<trace_activation_s>();
}
fixed_bitstring<32, false, true>& ue_context_setup_request_ies_o::value_c::add_rrm_prio_idx()
{
  assert_choice_type(types::add_rrm_prio_idx, type_, "Value");
  return c.get<fixed_bitstring<32, false, true>>();
}
bh_chs_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::bh_chs_to_be_setup_list()
{
  assert_choice_type(types::bh_chs_to_be_setup_list, type_, "Value");
  return c.get<bh_chs_to_be_setup_list_l>();
}
fixed_bitstring<10, false, true>& ue_context_setup_request_ies_o::value_c::cfg_bap_address()
{
  assert_choice_type(types::cfg_bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
nr_v2x_services_authorized_s& ue_context_setup_request_ies_o::value_c::nr_v2x_services_authorized()
{
  assert_choice_type(types::nr_v2x_services_authorized, type_, "Value");
  return c.get<nr_v2x_services_authorized_s>();
}
ltev2x_services_authorized_s& ue_context_setup_request_ies_o::value_c::ltev2x_services_authorized()
{
  assert_choice_type(types::ltev2x_services_authorized, type_, "Value");
  return c.get<ltev2x_services_authorized_s>();
}
nr_ue_sidelink_aggr_max_bitrate_s& ue_context_setup_request_ies_o::value_c::nr_ue_sidelink_aggr_max_bitrate()
{
  assert_choice_type(types::nr_ue_sidelink_aggr_max_bitrate, type_, "Value");
  return c.get<nr_ue_sidelink_aggr_max_bitrate_s>();
}
lte_ue_sidelink_aggr_max_bitrate_s& ue_context_setup_request_ies_o::value_c::lte_ue_sidelink_aggr_max_bitrate()
{
  assert_choice_type(types::lte_ue_sidelink_aggr_max_bitrate, type_, "Value");
  return c.get<lte_ue_sidelink_aggr_max_bitrate_s>();
}
uint64_t& ue_context_setup_request_ies_o::value_c::pc5_link_ambr()
{
  assert_choice_type(types::pc5_link_ambr, type_, "Value");
  return c.get<uint64_t>();
}
sl_drbs_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::sl_drbs_to_be_setup_list()
{
  assert_choice_type(types::sl_drbs_to_be_setup_list, type_, "Value");
  return c.get<sl_drbs_to_be_setup_list_l>();
}
conditional_inter_du_mob_info_s& ue_context_setup_request_ies_o::value_c::conditional_inter_du_mob_info()
{
  assert_choice_type(types::conditional_inter_du_mob_info, type_, "Value");
  return c.get<conditional_inter_du_mob_info_s>();
}
mdt_plmn_list_l& ue_context_setup_request_ies_o::value_c::management_based_mdt_plmn_list()
{
  assert_choice_type(types::management_based_mdt_plmn_list, type_, "Value");
  return c.get<mdt_plmn_list_l>();
}
fixed_bitstring<44, false, true>& ue_context_setup_request_ies_o::value_c::serving_n_id()
{
  assert_choice_type(types::serving_n_id, type_, "Value");
  return c.get<fixed_bitstring<44, false, true>>();
}
f1_c_transfer_path_s& ue_context_setup_request_ies_o::value_c::f1_c_transfer_path()
{
  assert_choice_type(types::f1_c_transfer_path, type_, "Value");
  return c.get<f1_c_transfer_path_s>();
}
f1_c_transfer_path_nr_dc_s& ue_context_setup_request_ies_o::value_c::f1_c_transfer_path_nr_dc()
{
  assert_choice_type(types::f1_c_transfer_path_nr_dc, type_, "Value");
  return c.get<f1_c_transfer_path_nr_dc_s>();
}
mdt_polluted_meas_ind_e& ue_context_setup_request_ies_o::value_c::mdt_polluted_meas_ind()
{
  assert_choice_type(types::mdt_polluted_meas_ind, type_, "Value");
  return c.get<mdt_polluted_meas_ind_e>();
}
scg_activation_request_e& ue_context_setup_request_ies_o::value_c::scg_activation_request()
{
  assert_choice_type(types::scg_activation_request, type_, "Value");
  return c.get<scg_activation_request_e>();
}
cg_sdt_session_info_s& ue_context_setup_request_ies_o::value_c::cg_sdt_session_info_old()
{
  assert_choice_type(types::cg_sdt_session_info_old, type_, "Value");
  return c.get<cg_sdt_session_info_s>();
}
five_g_pro_se_authorized_s& ue_context_setup_request_ies_o::value_c::five_g_pro_se_authorized()
{
  assert_choice_type(types::five_g_pro_se_authorized, type_, "Value");
  return c.get<five_g_pro_se_authorized_s>();
}
nr_ue_sidelink_aggr_max_bitrate_s& ue_context_setup_request_ies_o::value_c::five_g_pro_se_ue_pc5_aggr_max_bitrate()
{
  assert_choice_type(types::five_g_pro_se_ue_pc5_aggr_max_bitrate, type_, "Value");
  return c.get<nr_ue_sidelink_aggr_max_bitrate_s>();
}
uint64_t& ue_context_setup_request_ies_o::value_c::five_g_pro_se_pc5_link_ambr()
{
  assert_choice_type(types::five_g_pro_se_pc5_link_ambr, type_, "Value");
  return c.get<uint64_t>();
}
uu_rlc_ch_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::uu_rlc_ch_to_be_setup_list()
{
  assert_choice_type(types::uu_rlc_ch_to_be_setup_list, type_, "Value");
  return c.get<uu_rlc_ch_to_be_setup_list_l>();
}
pc5_rlc_ch_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::pc5_rlc_ch_to_be_setup_list()
{
  assert_choice_type(types::pc5_rlc_ch_to_be_setup_list, type_, "Value");
  return c.get<pc5_rlc_ch_to_be_setup_list_l>();
}
path_switch_cfg_s& ue_context_setup_request_ies_o::value_c::path_switch_cfg()
{
  assert_choice_type(types::path_switch_cfg, type_, "Value");
  return c.get<path_switch_cfg_s>();
}
gnb_du_ue_slice_max_bit_rate_list_l& ue_context_setup_request_ies_o::value_c::gnb_du_ue_slice_max_bit_rate_list()
{
  assert_choice_type(types::gnb_du_ue_slice_max_bit_rate_list, type_, "Value");
  return c.get<gnb_du_ue_slice_max_bit_rate_list_l>();
}
multicast_mbs_session_list_l& ue_context_setup_request_ies_o::value_c::multicast_mbs_session_setup_list()
{
  assert_choice_type(types::multicast_mbs_session_setup_list, type_, "Value");
  return c.get<multicast_mbs_session_list_l>();
}
ue_multicast_m_rbs_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::ue_multicast_m_rbs_to_be_setup_list()
{
  assert_choice_type(types::ue_multicast_m_rbs_to_be_setup_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_to_be_setup_list_l>();
}
serving_cell_mo_list_l& ue_context_setup_request_ies_o::value_c::serving_cell_mo_list()
{
  assert_choice_type(types::serving_cell_mo_list, type_, "Value");
  return c.get<serving_cell_mo_list_l>();
}
const uint64_t& ue_context_setup_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_setup_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const nr_cgi_s& ue_context_setup_request_ies_o::value_c::sp_cell_id() const
{
  assert_choice_type(types::sp_cell_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
const uint8_t& ue_context_setup_request_ies_o::value_c::serv_cell_idx() const
{
  assert_choice_type(types::serv_cell_idx, type_, "Value");
  return c.get<uint8_t>();
}
const cell_ul_cfg_e& ue_context_setup_request_ies_o::value_c::sp_cell_ul_cfg() const
{
  assert_choice_type(types::sp_cell_ul_cfg, type_, "Value");
  return c.get<cell_ul_cfg_e>();
}
const cu_to_du_rrc_info_s& ue_context_setup_request_ies_o::value_c::cu_to_du_rrc_info() const
{
  assert_choice_type(types::cu_to_du_rrc_info, type_, "Value");
  return c.get<cu_to_du_rrc_info_s>();
}
const candidate_sp_cell_list_l& ue_context_setup_request_ies_o::value_c::candidate_sp_cell_list() const
{
  assert_choice_type(types::candidate_sp_cell_list, type_, "Value");
  return c.get<candidate_sp_cell_list_l>();
}
const drx_cycle_s& ue_context_setup_request_ies_o::value_c::drx_cycle() const
{
  assert_choice_type(types::drx_cycle, type_, "Value");
  return c.get<drx_cycle_s>();
}
const unbounded_octstring<true>& ue_context_setup_request_ies_o::value_c::res_coordination_transfer_container() const
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const scell_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::scell_to_be_setup_list() const
{
  assert_choice_type(types::scell_to_be_setup_list, type_, "Value");
  return c.get<scell_to_be_setup_list_l>();
}
const srbs_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::srbs_to_be_setup_list() const
{
  assert_choice_type(types::srbs_to_be_setup_list, type_, "Value");
  return c.get<srbs_to_be_setup_list_l>();
}
const drbs_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::drbs_to_be_setup_list() const
{
  assert_choice_type(types::drbs_to_be_setup_list, type_, "Value");
  return c.get<drbs_to_be_setup_list_l>();
}
const inactivity_monitoring_request_e& ue_context_setup_request_ies_o::value_c::inactivity_monitoring_request() const
{
  assert_choice_type(types::inactivity_monitoring_request, type_, "Value");
  return c.get<inactivity_monitoring_request_e>();
}
const rat_freq_prio_info_c& ue_context_setup_request_ies_o::value_c::rat_freq_prio_info() const
{
  assert_choice_type(types::rat_freq_prio_info, type_, "Value");
  return c.get<rat_freq_prio_info_c>();
}
const unbounded_octstring<true>& ue_context_setup_request_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const fixed_bitstring<64, false, true>& ue_context_setup_request_ies_o::value_c::masked_imeisv() const
{
  assert_choice_type(types::masked_imeisv, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
const fixed_octstring<3, true>& ue_context_setup_request_ies_o::value_c::serving_plmn() const
{
  assert_choice_type(types::serving_plmn, type_, "Value");
  return c.get<fixed_octstring<3, true>>();
}
const uint64_t& ue_context_setup_request_ies_o::value_c::gnb_du_ue_ambr_ul() const
{
  assert_choice_type(types::gnb_du_ue_ambr_ul, type_, "Value");
  return c.get<uint64_t>();
}
const rrc_delivery_status_request_e& ue_context_setup_request_ies_o::value_c::rrc_delivery_status_request() const
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
const res_coordination_transfer_info_s& ue_context_setup_request_ies_o::value_c::res_coordination_transfer_info() const
{
  assert_choice_type(types::res_coordination_transfer_info, type_, "Value");
  return c.get<res_coordination_transfer_info_s>();
}
const uint8_t& ue_context_setup_request_ies_o::value_c::serving_cell_mo() const
{
  assert_choice_type(types::serving_cell_mo, type_, "Value");
  return c.get<uint8_t>();
}
const uint64_t& ue_context_setup_request_ies_o::value_c::new_gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::new_gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const fixed_octstring<8, true>& ue_context_setup_request_ies_o::value_c::ran_ue_id() const
{
  assert_choice_type(types::ran_ue_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
const trace_activation_s& ue_context_setup_request_ies_o::value_c::trace_activation() const
{
  assert_choice_type(types::trace_activation, type_, "Value");
  return c.get<trace_activation_s>();
}
const fixed_bitstring<32, false, true>& ue_context_setup_request_ies_o::value_c::add_rrm_prio_idx() const
{
  assert_choice_type(types::add_rrm_prio_idx, type_, "Value");
  return c.get<fixed_bitstring<32, false, true>>();
}
const bh_chs_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::bh_chs_to_be_setup_list() const
{
  assert_choice_type(types::bh_chs_to_be_setup_list, type_, "Value");
  return c.get<bh_chs_to_be_setup_list_l>();
}
const fixed_bitstring<10, false, true>& ue_context_setup_request_ies_o::value_c::cfg_bap_address() const
{
  assert_choice_type(types::cfg_bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
const nr_v2x_services_authorized_s& ue_context_setup_request_ies_o::value_c::nr_v2x_services_authorized() const
{
  assert_choice_type(types::nr_v2x_services_authorized, type_, "Value");
  return c.get<nr_v2x_services_authorized_s>();
}
const ltev2x_services_authorized_s& ue_context_setup_request_ies_o::value_c::ltev2x_services_authorized() const
{
  assert_choice_type(types::ltev2x_services_authorized, type_, "Value");
  return c.get<ltev2x_services_authorized_s>();
}
const nr_ue_sidelink_aggr_max_bitrate_s&
ue_context_setup_request_ies_o::value_c::nr_ue_sidelink_aggr_max_bitrate() const
{
  assert_choice_type(types::nr_ue_sidelink_aggr_max_bitrate, type_, "Value");
  return c.get<nr_ue_sidelink_aggr_max_bitrate_s>();
}
const lte_ue_sidelink_aggr_max_bitrate_s&
ue_context_setup_request_ies_o::value_c::lte_ue_sidelink_aggr_max_bitrate() const
{
  assert_choice_type(types::lte_ue_sidelink_aggr_max_bitrate, type_, "Value");
  return c.get<lte_ue_sidelink_aggr_max_bitrate_s>();
}
const uint64_t& ue_context_setup_request_ies_o::value_c::pc5_link_ambr() const
{
  assert_choice_type(types::pc5_link_ambr, type_, "Value");
  return c.get<uint64_t>();
}
const sl_drbs_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::sl_drbs_to_be_setup_list() const
{
  assert_choice_type(types::sl_drbs_to_be_setup_list, type_, "Value");
  return c.get<sl_drbs_to_be_setup_list_l>();
}
const conditional_inter_du_mob_info_s& ue_context_setup_request_ies_o::value_c::conditional_inter_du_mob_info() const
{
  assert_choice_type(types::conditional_inter_du_mob_info, type_, "Value");
  return c.get<conditional_inter_du_mob_info_s>();
}
const mdt_plmn_list_l& ue_context_setup_request_ies_o::value_c::management_based_mdt_plmn_list() const
{
  assert_choice_type(types::management_based_mdt_plmn_list, type_, "Value");
  return c.get<mdt_plmn_list_l>();
}
const fixed_bitstring<44, false, true>& ue_context_setup_request_ies_o::value_c::serving_n_id() const
{
  assert_choice_type(types::serving_n_id, type_, "Value");
  return c.get<fixed_bitstring<44, false, true>>();
}
const f1_c_transfer_path_s& ue_context_setup_request_ies_o::value_c::f1_c_transfer_path() const
{
  assert_choice_type(types::f1_c_transfer_path, type_, "Value");
  return c.get<f1_c_transfer_path_s>();
}
const f1_c_transfer_path_nr_dc_s& ue_context_setup_request_ies_o::value_c::f1_c_transfer_path_nr_dc() const
{
  assert_choice_type(types::f1_c_transfer_path_nr_dc, type_, "Value");
  return c.get<f1_c_transfer_path_nr_dc_s>();
}
const mdt_polluted_meas_ind_e& ue_context_setup_request_ies_o::value_c::mdt_polluted_meas_ind() const
{
  assert_choice_type(types::mdt_polluted_meas_ind, type_, "Value");
  return c.get<mdt_polluted_meas_ind_e>();
}
const scg_activation_request_e& ue_context_setup_request_ies_o::value_c::scg_activation_request() const
{
  assert_choice_type(types::scg_activation_request, type_, "Value");
  return c.get<scg_activation_request_e>();
}
const cg_sdt_session_info_s& ue_context_setup_request_ies_o::value_c::cg_sdt_session_info_old() const
{
  assert_choice_type(types::cg_sdt_session_info_old, type_, "Value");
  return c.get<cg_sdt_session_info_s>();
}
const five_g_pro_se_authorized_s& ue_context_setup_request_ies_o::value_c::five_g_pro_se_authorized() const
{
  assert_choice_type(types::five_g_pro_se_authorized, type_, "Value");
  return c.get<five_g_pro_se_authorized_s>();
}
const nr_ue_sidelink_aggr_max_bitrate_s&
ue_context_setup_request_ies_o::value_c::five_g_pro_se_ue_pc5_aggr_max_bitrate() const
{
  assert_choice_type(types::five_g_pro_se_ue_pc5_aggr_max_bitrate, type_, "Value");
  return c.get<nr_ue_sidelink_aggr_max_bitrate_s>();
}
const uint64_t& ue_context_setup_request_ies_o::value_c::five_g_pro_se_pc5_link_ambr() const
{
  assert_choice_type(types::five_g_pro_se_pc5_link_ambr, type_, "Value");
  return c.get<uint64_t>();
}
const uu_rlc_ch_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::uu_rlc_ch_to_be_setup_list() const
{
  assert_choice_type(types::uu_rlc_ch_to_be_setup_list, type_, "Value");
  return c.get<uu_rlc_ch_to_be_setup_list_l>();
}
const pc5_rlc_ch_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::pc5_rlc_ch_to_be_setup_list() const
{
  assert_choice_type(types::pc5_rlc_ch_to_be_setup_list, type_, "Value");
  return c.get<pc5_rlc_ch_to_be_setup_list_l>();
}
const path_switch_cfg_s& ue_context_setup_request_ies_o::value_c::path_switch_cfg() const
{
  assert_choice_type(types::path_switch_cfg, type_, "Value");
  return c.get<path_switch_cfg_s>();
}
const gnb_du_ue_slice_max_bit_rate_list_l&
ue_context_setup_request_ies_o::value_c::gnb_du_ue_slice_max_bit_rate_list() const
{
  assert_choice_type(types::gnb_du_ue_slice_max_bit_rate_list, type_, "Value");
  return c.get<gnb_du_ue_slice_max_bit_rate_list_l>();
}
const multicast_mbs_session_list_l& ue_context_setup_request_ies_o::value_c::multicast_mbs_session_setup_list() const
{
  assert_choice_type(types::multicast_mbs_session_setup_list, type_, "Value");
  return c.get<multicast_mbs_session_list_l>();
}
const ue_multicast_m_rbs_to_be_setup_list_l&
ue_context_setup_request_ies_o::value_c::ue_multicast_m_rbs_to_be_setup_list() const
{
  assert_choice_type(types::ue_multicast_m_rbs_to_be_setup_list, type_, "Value");
  return c.get<ue_multicast_m_rbs_to_be_setup_list_l>();
}
const serving_cell_mo_list_l& ue_context_setup_request_ies_o::value_c::serving_cell_mo_list() const
{
  assert_choice_type(types::serving_cell_mo_list, type_, "Value");
  return c.get<serving_cell_mo_list_l>();
}
void ue_context_setup_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::sp_cell_id:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    case types::serv_cell_idx:
      j.write_int("INTEGER (0..31,...)", c.get<uint8_t>());
      break;
    case types::sp_cell_ul_cfg:
      j.write_str("CellULConfigured", c.get<cell_ul_cfg_e>().to_string());
      break;
    case types::cu_to_du_rrc_info:
      j.write_fieldname("CUtoDURRCInformation");
      c.get<cu_to_du_rrc_info_s>().to_json(j);
      break;
    case types::candidate_sp_cell_list:
      j.start_array("Candidate-SpCell-List");
      for (const auto& e1 : c.get<candidate_sp_cell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drx_cycle:
      j.write_fieldname("DRXCycle");
      c.get<drx_cycle_s>().to_json(j);
      break;
    case types::res_coordination_transfer_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::scell_to_be_setup_list:
      j.start_array("SCell-ToBeSetup-List");
      for (const auto& e1 : c.get<scell_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_to_be_setup_list:
      j.start_array("SRBs-ToBeSetup-List");
      for (const auto& e1 : c.get<srbs_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_to_be_setup_list:
      j.start_array("DRBs-ToBeSetup-List");
      for (const auto& e1 : c.get<drbs_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::inactivity_monitoring_request:
      j.write_str("InactivityMonitoringRequest", "true");
      break;
    case types::rat_freq_prio_info:
      j.write_fieldname("RAT-FrequencyPriorityInformation");
      c.get<rat_freq_prio_info_c>().to_json(j);
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::masked_imeisv:
      j.write_str("BIT STRING", c.get<fixed_bitstring<64, false, true>>().to_string());
      break;
    case types::serving_plmn:
      j.write_str("OCTET STRING", c.get<fixed_octstring<3, true>>().to_string());
      break;
    case types::gnb_du_ue_ambr_ul:
      j.write_int("INTEGER (0..4000000000000,...)", c.get<uint64_t>());
      break;
    case types::rrc_delivery_status_request:
      j.write_str("RRCDeliveryStatusRequest", "true");
      break;
    case types::res_coordination_transfer_info:
      j.write_fieldname("ResourceCoordinationTransferInformation");
      c.get<res_coordination_transfer_info_s>().to_json(j);
      break;
    case types::serving_cell_mo:
      j.write_int("INTEGER (1..64,...)", c.get<uint8_t>());
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_id:
      j.write_str("OCTET STRING", c.get<fixed_octstring<8, true>>().to_string());
      break;
    case types::trace_activation:
      j.write_fieldname("TraceActivation");
      c.get<trace_activation_s>().to_json(j);
      break;
    case types::add_rrm_prio_idx:
      j.write_str("BIT STRING", c.get<fixed_bitstring<32, false, true>>().to_string());
      break;
    case types::bh_chs_to_be_setup_list:
      j.start_array("BHChannels-ToBeSetup-List");
      for (const auto& e1 : c.get<bh_chs_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cfg_bap_address:
      j.write_str("BIT STRING", c.get<fixed_bitstring<10, false, true>>().to_string());
      break;
    case types::nr_v2x_services_authorized:
      j.write_fieldname("NRV2XServicesAuthorized");
      c.get<nr_v2x_services_authorized_s>().to_json(j);
      break;
    case types::ltev2x_services_authorized:
      j.write_fieldname("LTEV2XServicesAuthorized");
      c.get<ltev2x_services_authorized_s>().to_json(j);
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      j.write_fieldname("NRUESidelinkAggregateMaximumBitrate");
      c.get<nr_ue_sidelink_aggr_max_bitrate_s>().to_json(j);
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      j.write_fieldname("LTEUESidelinkAggregateMaximumBitrate");
      c.get<lte_ue_sidelink_aggr_max_bitrate_s>().to_json(j);
      break;
    case types::pc5_link_ambr:
      j.write_int("INTEGER (0..4000000000000,...)", c.get<uint64_t>());
      break;
    case types::sl_drbs_to_be_setup_list:
      j.start_array("SLDRBs-ToBeSetup-List");
      for (const auto& e1 : c.get<sl_drbs_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::conditional_inter_du_mob_info:
      j.write_fieldname("ConditionalInterDUMobilityInformation");
      c.get<conditional_inter_du_mob_info_s>().to_json(j);
      break;
    case types::management_based_mdt_plmn_list:
      j.start_array("MDTPLMNList");
      for (const auto& e1 : c.get<mdt_plmn_list_l>()) {
        j.write_str(e1.to_string());
      }
      j.end_array();
      break;
    case types::serving_n_id:
      j.write_str("BIT STRING", c.get<fixed_bitstring<44, false, true>>().to_string());
      break;
    case types::f1_c_transfer_path:
      j.write_fieldname("F1CTransferPath");
      c.get<f1_c_transfer_path_s>().to_json(j);
      break;
    case types::f1_c_transfer_path_nr_dc:
      j.write_fieldname("F1CTransferPathNRDC");
      c.get<f1_c_transfer_path_nr_dc_s>().to_json(j);
      break;
    case types::mdt_polluted_meas_ind:
      j.write_str("MDTPollutedMeasurementIndicator", c.get<mdt_polluted_meas_ind_e>().to_string());
      break;
    case types::scg_activation_request:
      j.write_str("SCGActivationRequest", c.get<scg_activation_request_e>().to_string());
      break;
    case types::cg_sdt_session_info_old:
      j.write_fieldname("CG-SDTSessionInfo");
      c.get<cg_sdt_session_info_s>().to_json(j);
      break;
    case types::five_g_pro_se_authorized:
      j.write_fieldname("FiveG-ProSeAuthorized");
      c.get<five_g_pro_se_authorized_s>().to_json(j);
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      j.write_fieldname("NRUESidelinkAggregateMaximumBitrate");
      c.get<nr_ue_sidelink_aggr_max_bitrate_s>().to_json(j);
      break;
    case types::five_g_pro_se_pc5_link_ambr:
      j.write_int("INTEGER (0..4000000000000,...)", c.get<uint64_t>());
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      j.start_array("UuRLCChannelToBeSetupList");
      for (const auto& e1 : c.get<uu_rlc_ch_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      j.start_array("PC5RLCChannelToBeSetupList");
      for (const auto& e1 : c.get<pc5_rlc_ch_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::path_switch_cfg:
      j.write_fieldname("PathSwitchConfiguration");
      c.get<path_switch_cfg_s>().to_json(j);
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      j.start_array("GNBDUUESliceMaximumBitRateList");
      for (const auto& e1 : c.get<gnb_du_ue_slice_max_bit_rate_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_mbs_session_setup_list:
      j.start_array("MulticastMBSSessionList");
      for (const auto& e1 : c.get<multicast_mbs_session_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ue_multicast_m_rbs_to_be_setup_list:
      j.start_array("UE-MulticastMRBs-ToBeSetup-List");
      for (const auto& e1 : c.get<ue_multicast_m_rbs_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::serving_cell_mo_list:
      j.start_array("ServingCellMO-List");
      for (const auto& e1 : c.get<serving_cell_mo_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_setup_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::sp_cell_id:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    case types::serv_cell_idx:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)31u, true, true));
      break;
    case types::sp_cell_ul_cfg:
      HANDLE_CODE(c.get<cell_ul_cfg_e>().pack(bref));
      break;
    case types::cu_to_du_rrc_info:
      HANDLE_CODE(c.get<cu_to_du_rrc_info_s>().pack(bref));
      break;
    case types::candidate_sp_cell_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<candidate_sp_cell_list_l>(), 1, 64, true));
      break;
    case types::drx_cycle:
      HANDLE_CODE(c.get<drx_cycle_s>().pack(bref));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::scell_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<scell_to_be_setup_list_l>(), 1, 32, true));
      break;
    case types::srbs_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_to_be_setup_list_l>(), 1, 8, true));
      break;
    case types::drbs_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_to_be_setup_list_l>(), 1, 64, true));
      break;
    case types::inactivity_monitoring_request:
      HANDLE_CODE(c.get<inactivity_monitoring_request_e>().pack(bref));
      break;
    case types::rat_freq_prio_info:
      HANDLE_CODE(c.get<rat_freq_prio_info_c>().pack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::masked_imeisv:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().pack(bref)));
      break;
    case types::serving_plmn:
      HANDLE_CODE((c.get<fixed_octstring<3, true>>().pack(bref)));
      break;
    case types::gnb_du_ue_ambr_ul:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().pack(bref));
      break;
    case types::res_coordination_transfer_info:
      HANDLE_CODE(c.get<res_coordination_transfer_info_s>().pack(bref));
      break;
    case types::serving_cell_mo:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)64u, true, true));
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().pack(bref)));
      break;
    case types::trace_activation:
      HANDLE_CODE(c.get<trace_activation_s>().pack(bref));
      break;
    case types::add_rrm_prio_idx:
      HANDLE_CODE((c.get<fixed_bitstring<32, false, true>>().pack(bref)));
      break;
    case types::bh_chs_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_chs_to_be_setup_list_l>(), 1, 65536, true));
      break;
    case types::cfg_bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().pack(bref)));
      break;
    case types::nr_v2x_services_authorized:
      HANDLE_CODE(c.get<nr_v2x_services_authorized_s>().pack(bref));
      break;
    case types::ltev2x_services_authorized:
      HANDLE_CODE(c.get<ltev2x_services_authorized_s>().pack(bref));
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      HANDLE_CODE(c.get<nr_ue_sidelink_aggr_max_bitrate_s>().pack(bref));
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      HANDLE_CODE(c.get<lte_ue_sidelink_aggr_max_bitrate_s>().pack(bref));
      break;
    case types::pc5_link_ambr:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::sl_drbs_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_drbs_to_be_setup_list_l>(), 1, 512, true));
      break;
    case types::conditional_inter_du_mob_info:
      HANDLE_CODE(c.get<conditional_inter_du_mob_info_s>().pack(bref));
      break;
    case types::management_based_mdt_plmn_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<mdt_plmn_list_l>(), 1, 16, true));
      break;
    case types::serving_n_id:
      HANDLE_CODE((c.get<fixed_bitstring<44, false, true>>().pack(bref)));
      break;
    case types::f1_c_transfer_path:
      HANDLE_CODE(c.get<f1_c_transfer_path_s>().pack(bref));
      break;
    case types::f1_c_transfer_path_nr_dc:
      HANDLE_CODE(c.get<f1_c_transfer_path_nr_dc_s>().pack(bref));
      break;
    case types::mdt_polluted_meas_ind:
      HANDLE_CODE(c.get<mdt_polluted_meas_ind_e>().pack(bref));
      break;
    case types::scg_activation_request:
      HANDLE_CODE(c.get<scg_activation_request_e>().pack(bref));
      break;
    case types::cg_sdt_session_info_old:
      HANDLE_CODE(c.get<cg_sdt_session_info_s>().pack(bref));
      break;
    case types::five_g_pro_se_authorized:
      HANDLE_CODE(c.get<five_g_pro_se_authorized_s>().pack(bref));
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      HANDLE_CODE(c.get<nr_ue_sidelink_aggr_max_bitrate_s>().pack(bref));
      break;
    case types::five_g_pro_se_pc5_link_ambr:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uu_rlc_ch_to_be_setup_list_l>(), 1, 32, true));
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pc5_rlc_ch_to_be_setup_list_l>(), 1, 512, true));
      break;
    case types::path_switch_cfg:
      HANDLE_CODE(c.get<path_switch_cfg_s>().pack(bref));
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_du_ue_slice_max_bit_rate_list_l>(), 1, 8, true));
      break;
    case types::multicast_mbs_session_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_mbs_session_list_l>(), 1, 256, true));
      break;
    case types::ue_multicast_m_rbs_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_multicast_m_rbs_to_be_setup_list_l>(), 1, 64, true));
      break;
    case types::serving_cell_mo_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<serving_cell_mo_list_l>(), 1, 16, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_setup_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::sp_cell_id:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    case types::serv_cell_idx:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)31u, true, true));
      break;
    case types::sp_cell_ul_cfg:
      HANDLE_CODE(c.get<cell_ul_cfg_e>().unpack(bref));
      break;
    case types::cu_to_du_rrc_info:
      HANDLE_CODE(c.get<cu_to_du_rrc_info_s>().unpack(bref));
      break;
    case types::candidate_sp_cell_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<candidate_sp_cell_list_l>(), bref, 1, 64, true));
      break;
    case types::drx_cycle:
      HANDLE_CODE(c.get<drx_cycle_s>().unpack(bref));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::scell_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<scell_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::srbs_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_to_be_setup_list_l>(), bref, 1, 8, true));
      break;
    case types::drbs_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_to_be_setup_list_l>(), bref, 1, 64, true));
      break;
    case types::inactivity_monitoring_request:
      HANDLE_CODE(c.get<inactivity_monitoring_request_e>().unpack(bref));
      break;
    case types::rat_freq_prio_info:
      HANDLE_CODE(c.get<rat_freq_prio_info_c>().unpack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::masked_imeisv:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().unpack(bref)));
      break;
    case types::serving_plmn:
      HANDLE_CODE((c.get<fixed_octstring<3, true>>().unpack(bref)));
      break;
    case types::gnb_du_ue_ambr_ul:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().unpack(bref));
      break;
    case types::res_coordination_transfer_info:
      HANDLE_CODE(c.get<res_coordination_transfer_info_s>().unpack(bref));
      break;
    case types::serving_cell_mo:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)64u, true, true));
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().unpack(bref)));
      break;
    case types::trace_activation:
      HANDLE_CODE(c.get<trace_activation_s>().unpack(bref));
      break;
    case types::add_rrm_prio_idx:
      HANDLE_CODE((c.get<fixed_bitstring<32, false, true>>().unpack(bref)));
      break;
    case types::bh_chs_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_chs_to_be_setup_list_l>(), bref, 1, 65536, true));
      break;
    case types::cfg_bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().unpack(bref)));
      break;
    case types::nr_v2x_services_authorized:
      HANDLE_CODE(c.get<nr_v2x_services_authorized_s>().unpack(bref));
      break;
    case types::ltev2x_services_authorized:
      HANDLE_CODE(c.get<ltev2x_services_authorized_s>().unpack(bref));
      break;
    case types::nr_ue_sidelink_aggr_max_bitrate:
      HANDLE_CODE(c.get<nr_ue_sidelink_aggr_max_bitrate_s>().unpack(bref));
      break;
    case types::lte_ue_sidelink_aggr_max_bitrate:
      HANDLE_CODE(c.get<lte_ue_sidelink_aggr_max_bitrate_s>().unpack(bref));
      break;
    case types::pc5_link_ambr:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::sl_drbs_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_drbs_to_be_setup_list_l>(), bref, 1, 512, true));
      break;
    case types::conditional_inter_du_mob_info:
      HANDLE_CODE(c.get<conditional_inter_du_mob_info_s>().unpack(bref));
      break;
    case types::management_based_mdt_plmn_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<mdt_plmn_list_l>(), bref, 1, 16, true));
      break;
    case types::serving_n_id:
      HANDLE_CODE((c.get<fixed_bitstring<44, false, true>>().unpack(bref)));
      break;
    case types::f1_c_transfer_path:
      HANDLE_CODE(c.get<f1_c_transfer_path_s>().unpack(bref));
      break;
    case types::f1_c_transfer_path_nr_dc:
      HANDLE_CODE(c.get<f1_c_transfer_path_nr_dc_s>().unpack(bref));
      break;
    case types::mdt_polluted_meas_ind:
      HANDLE_CODE(c.get<mdt_polluted_meas_ind_e>().unpack(bref));
      break;
    case types::scg_activation_request:
      HANDLE_CODE(c.get<scg_activation_request_e>().unpack(bref));
      break;
    case types::cg_sdt_session_info_old:
      HANDLE_CODE(c.get<cg_sdt_session_info_s>().unpack(bref));
      break;
    case types::five_g_pro_se_authorized:
      HANDLE_CODE(c.get<five_g_pro_se_authorized_s>().unpack(bref));
      break;
    case types::five_g_pro_se_ue_pc5_aggr_max_bitrate:
      HANDLE_CODE(c.get<nr_ue_sidelink_aggr_max_bitrate_s>().unpack(bref));
      break;
    case types::five_g_pro_se_pc5_link_ambr:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::uu_rlc_ch_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uu_rlc_ch_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::pc5_rlc_ch_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pc5_rlc_ch_to_be_setup_list_l>(), bref, 1, 512, true));
      break;
    case types::path_switch_cfg:
      HANDLE_CODE(c.get<path_switch_cfg_s>().unpack(bref));
      break;
    case types::gnb_du_ue_slice_max_bit_rate_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_du_ue_slice_max_bit_rate_list_l>(), bref, 1, 8, true));
      break;
    case types::multicast_mbs_session_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_mbs_session_list_l>(), bref, 1, 256, true));
      break;
    case types::ue_multicast_m_rbs_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_multicast_m_rbs_to_be_setup_list_l>(), bref, 1, 64, true));
      break;
    case types::serving_cell_mo_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<serving_cell_mo_list_l>(), bref, 1, 16, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// UEContextSetupResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_setup_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40,  41,  39,  95,  49,  94,  27,  66,  15,  83,  98,  7,
                                   202, 260, 279, 324, 316, 376, 548, 602, 603, 611, 612, 697};
  return map_enum_number(names, 24, idx, "id");
}
bool ue_context_setup_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40,  41,  39,  95,  49,  94,  27,  66,  15,  83,  98,  7,
                                   202, 260, 279, 324, 316, 376, 548, 602, 603, 611, 612, 697};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_setup_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 39:
      return crit_e::reject;
    case 95:
      return crit_e::ignore;
    case 49:
      return crit_e::ignore;
    case 94:
      return crit_e::reject;
    case 27:
      return crit_e::ignore;
    case 66:
      return crit_e::ignore;
    case 15:
      return crit_e::ignore;
    case 83:
      return crit_e::ignore;
    case 98:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 202:
      return crit_e::ignore;
    case 260:
      return crit_e::ignore;
    case 279:
      return crit_e::ignore;
    case 324:
      return crit_e::ignore;
    case 316:
      return crit_e::ignore;
    case 376:
      return crit_e::reject;
    case 548:
      return crit_e::ignore;
    case 602:
      return crit_e::ignore;
    case 603:
      return crit_e::ignore;
    case 611:
      return crit_e::ignore;
    case 612:
      return crit_e::ignore;
    case 697:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_setup_resp_ies_o::value_c ue_context_setup_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 39:
      ret.set(value_c::types::du_to_cu_rrc_info);
      break;
    case 95:
      ret.set(value_c::types::c_rnti);
      break;
    case 49:
      ret.set(value_c::types::res_coordination_transfer_container);
      break;
    case 94:
      ret.set(value_c::types::full_cfg);
      break;
    case 27:
      ret.set(value_c::types::drbs_setup_list);
      break;
    case 66:
      ret.set(value_c::types::srbs_failed_to_be_setup_list);
      break;
    case 15:
      ret.set(value_c::types::drbs_failed_to_be_setup_list);
      break;
    case 83:
      ret.set(value_c::types::scell_failedto_setup_list);
      break;
    case 98:
      ret.set(value_c::types::inactivity_monitoring_resp);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 202:
      ret.set(value_c::types::srbs_setup_list);
      break;
    case 260:
      ret.set(value_c::types::bh_chs_setup_list);
      break;
    case 279:
      ret.set(value_c::types::bh_chs_failed_to_be_setup_list);
      break;
    case 324:
      ret.set(value_c::types::sl_drbs_setup_list);
      break;
    case 316:
      ret.set(value_c::types::sl_drbs_failed_to_be_setup_list);
      break;
    case 376:
      ret.set(value_c::types::requested_target_cell_global_id);
      break;
    case 548:
      ret.set(value_c::types::scg_activation_status);
      break;
    case 602:
      ret.set(value_c::types::uu_rlc_ch_setup_list);
      break;
    case 603:
      ret.set(value_c::types::uu_rlc_ch_failed_to_be_setup_list);
      break;
    case 611:
      ret.set(value_c::types::pc5_rlc_ch_setup_list);
      break;
    case 612:
      ret.set(value_c::types::pc5_rlc_ch_failed_to_be_setup_list);
      break;
    case 697:
      ret.set(value_c::types::serving_cell_mo_encoded_in_cgc_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_setup_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 39:
      return presence_e::mandatory;
    case 95:
      return presence_e::optional;
    case 49:
      return presence_e::optional;
    case 94:
      return presence_e::optional;
    case 27:
      return presence_e::optional;
    case 66:
      return presence_e::optional;
    case 15:
      return presence_e::optional;
    case 83:
      return presence_e::optional;
    case 98:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 202:
      return presence_e::optional;
    case 260:
      return presence_e::optional;
    case 279:
      return presence_e::optional;
    case 324:
      return presence_e::optional;
    case 316:
      return presence_e::optional;
    case 376:
      return presence_e::optional;
    case 548:
      return presence_e::optional;
    case 602:
      return presence_e::optional;
    case 603:
      return presence_e::optional;
    case 611:
      return presence_e::optional;
    case 612:
      return presence_e::optional;
    case 697:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_setup_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::du_to_cu_rrc_info:
      c.destroy<du_to_cu_rrc_info_s>();
      break;
    case types::res_coordination_transfer_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::drbs_setup_list:
      c.destroy<drbs_setup_list_l>();
      break;
    case types::srbs_failed_to_be_setup_list:
      c.destroy<srbs_failed_to_be_setup_list_l>();
      break;
    case types::drbs_failed_to_be_setup_list:
      c.destroy<drbs_failed_to_be_setup_list_l>();
      break;
    case types::scell_failedto_setup_list:
      c.destroy<scell_failedto_setup_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::srbs_setup_list:
      c.destroy<srbs_setup_list_l>();
      break;
    case types::bh_chs_setup_list:
      c.destroy<bh_chs_setup_list_l>();
      break;
    case types::bh_chs_failed_to_be_setup_list:
      c.destroy<bh_chs_failed_to_be_setup_list_l>();
      break;
    case types::sl_drbs_setup_list:
      c.destroy<sl_drbs_setup_list_l>();
      break;
    case types::sl_drbs_failed_to_be_setup_list:
      c.destroy<sl_drbs_failed_to_be_setup_list_l>();
      break;
    case types::requested_target_cell_global_id:
      c.destroy<nr_cgi_s>();
      break;
    case types::uu_rlc_ch_setup_list:
      c.destroy<uu_rlc_ch_setup_list_l>();
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      c.destroy<uu_rlc_ch_failed_to_be_setup_list_l>();
      break;
    case types::pc5_rlc_ch_setup_list:
      c.destroy<pc5_rlc_ch_setup_list_l>();
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      c.destroy<pc5_rlc_ch_failed_to_be_setup_list_l>();
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      c.destroy<serving_cell_mo_encoded_in_cgc_list_l>();
      break;
    default:
      break;
  }
}
void ue_context_setup_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::du_to_cu_rrc_info:
      c.init<du_to_cu_rrc_info_s>();
      break;
    case types::c_rnti:
      break;
    case types::res_coordination_transfer_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::full_cfg:
      break;
    case types::drbs_setup_list:
      c.init<drbs_setup_list_l>();
      break;
    case types::srbs_failed_to_be_setup_list:
      c.init<srbs_failed_to_be_setup_list_l>();
      break;
    case types::drbs_failed_to_be_setup_list:
      c.init<drbs_failed_to_be_setup_list_l>();
      break;
    case types::scell_failedto_setup_list:
      c.init<scell_failedto_setup_list_l>();
      break;
    case types::inactivity_monitoring_resp:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::srbs_setup_list:
      c.init<srbs_setup_list_l>();
      break;
    case types::bh_chs_setup_list:
      c.init<bh_chs_setup_list_l>();
      break;
    case types::bh_chs_failed_to_be_setup_list:
      c.init<bh_chs_failed_to_be_setup_list_l>();
      break;
    case types::sl_drbs_setup_list:
      c.init<sl_drbs_setup_list_l>();
      break;
    case types::sl_drbs_failed_to_be_setup_list:
      c.init<sl_drbs_failed_to_be_setup_list_l>();
      break;
    case types::requested_target_cell_global_id:
      c.init<nr_cgi_s>();
      break;
    case types::scg_activation_status:
      break;
    case types::uu_rlc_ch_setup_list:
      c.init<uu_rlc_ch_setup_list_l>();
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      c.init<uu_rlc_ch_failed_to_be_setup_list_l>();
      break;
    case types::pc5_rlc_ch_setup_list:
      c.init<pc5_rlc_ch_setup_list_l>();
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      c.init<pc5_rlc_ch_failed_to_be_setup_list_l>();
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      c.init<serving_cell_mo_encoded_in_cgc_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_resp_ies_o::value_c");
  }
}
ue_context_setup_resp_ies_o::value_c::value_c(const ue_context_setup_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::du_to_cu_rrc_info:
      c.init(other.c.get<du_to_cu_rrc_info_s>());
      break;
    case types::c_rnti:
      c.init(other.c.get<uint32_t>());
      break;
    case types::res_coordination_transfer_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::full_cfg:
      c.init(other.c.get<full_cfg_e>());
      break;
    case types::drbs_setup_list:
      c.init(other.c.get<drbs_setup_list_l>());
      break;
    case types::srbs_failed_to_be_setup_list:
      c.init(other.c.get<srbs_failed_to_be_setup_list_l>());
      break;
    case types::drbs_failed_to_be_setup_list:
      c.init(other.c.get<drbs_failed_to_be_setup_list_l>());
      break;
    case types::scell_failedto_setup_list:
      c.init(other.c.get<scell_failedto_setup_list_l>());
      break;
    case types::inactivity_monitoring_resp:
      c.init(other.c.get<inactivity_monitoring_resp_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::srbs_setup_list:
      c.init(other.c.get<srbs_setup_list_l>());
      break;
    case types::bh_chs_setup_list:
      c.init(other.c.get<bh_chs_setup_list_l>());
      break;
    case types::bh_chs_failed_to_be_setup_list:
      c.init(other.c.get<bh_chs_failed_to_be_setup_list_l>());
      break;
    case types::sl_drbs_setup_list:
      c.init(other.c.get<sl_drbs_setup_list_l>());
      break;
    case types::sl_drbs_failed_to_be_setup_list:
      c.init(other.c.get<sl_drbs_failed_to_be_setup_list_l>());
      break;
    case types::requested_target_cell_global_id:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::scg_activation_status:
      c.init(other.c.get<scg_activation_status_e>());
      break;
    case types::uu_rlc_ch_setup_list:
      c.init(other.c.get<uu_rlc_ch_setup_list_l>());
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      c.init(other.c.get<uu_rlc_ch_failed_to_be_setup_list_l>());
      break;
    case types::pc5_rlc_ch_setup_list:
      c.init(other.c.get<pc5_rlc_ch_setup_list_l>());
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      c.init(other.c.get<pc5_rlc_ch_failed_to_be_setup_list_l>());
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      c.init(other.c.get<serving_cell_mo_encoded_in_cgc_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_resp_ies_o::value_c");
  }
}
ue_context_setup_resp_ies_o::value_c&
ue_context_setup_resp_ies_o::value_c::operator=(const ue_context_setup_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::du_to_cu_rrc_info:
      c.set(other.c.get<du_to_cu_rrc_info_s>());
      break;
    case types::c_rnti:
      c.set(other.c.get<uint32_t>());
      break;
    case types::res_coordination_transfer_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::full_cfg:
      c.set(other.c.get<full_cfg_e>());
      break;
    case types::drbs_setup_list:
      c.set(other.c.get<drbs_setup_list_l>());
      break;
    case types::srbs_failed_to_be_setup_list:
      c.set(other.c.get<srbs_failed_to_be_setup_list_l>());
      break;
    case types::drbs_failed_to_be_setup_list:
      c.set(other.c.get<drbs_failed_to_be_setup_list_l>());
      break;
    case types::scell_failedto_setup_list:
      c.set(other.c.get<scell_failedto_setup_list_l>());
      break;
    case types::inactivity_monitoring_resp:
      c.set(other.c.get<inactivity_monitoring_resp_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::srbs_setup_list:
      c.set(other.c.get<srbs_setup_list_l>());
      break;
    case types::bh_chs_setup_list:
      c.set(other.c.get<bh_chs_setup_list_l>());
      break;
    case types::bh_chs_failed_to_be_setup_list:
      c.set(other.c.get<bh_chs_failed_to_be_setup_list_l>());
      break;
    case types::sl_drbs_setup_list:
      c.set(other.c.get<sl_drbs_setup_list_l>());
      break;
    case types::sl_drbs_failed_to_be_setup_list:
      c.set(other.c.get<sl_drbs_failed_to_be_setup_list_l>());
      break;
    case types::requested_target_cell_global_id:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::scg_activation_status:
      c.set(other.c.get<scg_activation_status_e>());
      break;
    case types::uu_rlc_ch_setup_list:
      c.set(other.c.get<uu_rlc_ch_setup_list_l>());
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      c.set(other.c.get<uu_rlc_ch_failed_to_be_setup_list_l>());
      break;
    case types::pc5_rlc_ch_setup_list:
      c.set(other.c.get<pc5_rlc_ch_setup_list_l>());
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      c.set(other.c.get<pc5_rlc_ch_failed_to_be_setup_list_l>());
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      c.set(other.c.get<serving_cell_mo_encoded_in_cgc_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_setup_resp_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_setup_resp_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
du_to_cu_rrc_info_s& ue_context_setup_resp_ies_o::value_c::du_to_cu_rrc_info()
{
  assert_choice_type(types::du_to_cu_rrc_info, type_, "Value");
  return c.get<du_to_cu_rrc_info_s>();
}
uint32_t& ue_context_setup_resp_ies_o::value_c::c_rnti()
{
  assert_choice_type(types::c_rnti, type_, "Value");
  return c.get<uint32_t>();
}
unbounded_octstring<true>& ue_context_setup_resp_ies_o::value_c::res_coordination_transfer_container()
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
full_cfg_e& ue_context_setup_resp_ies_o::value_c::full_cfg()
{
  assert_choice_type(types::full_cfg, type_, "Value");
  return c.get<full_cfg_e>();
}
drbs_setup_list_l& ue_context_setup_resp_ies_o::value_c::drbs_setup_list()
{
  assert_choice_type(types::drbs_setup_list, type_, "Value");
  return c.get<drbs_setup_list_l>();
}
srbs_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::srbs_failed_to_be_setup_list()
{
  assert_choice_type(types::srbs_failed_to_be_setup_list, type_, "Value");
  return c.get<srbs_failed_to_be_setup_list_l>();
}
drbs_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::drbs_failed_to_be_setup_list()
{
  assert_choice_type(types::drbs_failed_to_be_setup_list, type_, "Value");
  return c.get<drbs_failed_to_be_setup_list_l>();
}
scell_failedto_setup_list_l& ue_context_setup_resp_ies_o::value_c::scell_failedto_setup_list()
{
  assert_choice_type(types::scell_failedto_setup_list, type_, "Value");
  return c.get<scell_failedto_setup_list_l>();
}
inactivity_monitoring_resp_e& ue_context_setup_resp_ies_o::value_c::inactivity_monitoring_resp()
{
  assert_choice_type(types::inactivity_monitoring_resp, type_, "Value");
  return c.get<inactivity_monitoring_resp_e>();
}
crit_diagnostics_s& ue_context_setup_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
srbs_setup_list_l& ue_context_setup_resp_ies_o::value_c::srbs_setup_list()
{
  assert_choice_type(types::srbs_setup_list, type_, "Value");
  return c.get<srbs_setup_list_l>();
}
bh_chs_setup_list_l& ue_context_setup_resp_ies_o::value_c::bh_chs_setup_list()
{
  assert_choice_type(types::bh_chs_setup_list, type_, "Value");
  return c.get<bh_chs_setup_list_l>();
}
bh_chs_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::bh_chs_failed_to_be_setup_list()
{
  assert_choice_type(types::bh_chs_failed_to_be_setup_list, type_, "Value");
  return c.get<bh_chs_failed_to_be_setup_list_l>();
}
sl_drbs_setup_list_l& ue_context_setup_resp_ies_o::value_c::sl_drbs_setup_list()
{
  assert_choice_type(types::sl_drbs_setup_list, type_, "Value");
  return c.get<sl_drbs_setup_list_l>();
}
sl_drbs_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::sl_drbs_failed_to_be_setup_list()
{
  assert_choice_type(types::sl_drbs_failed_to_be_setup_list, type_, "Value");
  return c.get<sl_drbs_failed_to_be_setup_list_l>();
}
nr_cgi_s& ue_context_setup_resp_ies_o::value_c::requested_target_cell_global_id()
{
  assert_choice_type(types::requested_target_cell_global_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
scg_activation_status_e& ue_context_setup_resp_ies_o::value_c::scg_activation_status()
{
  assert_choice_type(types::scg_activation_status, type_, "Value");
  return c.get<scg_activation_status_e>();
}
uu_rlc_ch_setup_list_l& ue_context_setup_resp_ies_o::value_c::uu_rlc_ch_setup_list()
{
  assert_choice_type(types::uu_rlc_ch_setup_list, type_, "Value");
  return c.get<uu_rlc_ch_setup_list_l>();
}
uu_rlc_ch_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::uu_rlc_ch_failed_to_be_setup_list()
{
  assert_choice_type(types::uu_rlc_ch_failed_to_be_setup_list, type_, "Value");
  return c.get<uu_rlc_ch_failed_to_be_setup_list_l>();
}
pc5_rlc_ch_setup_list_l& ue_context_setup_resp_ies_o::value_c::pc5_rlc_ch_setup_list()
{
  assert_choice_type(types::pc5_rlc_ch_setup_list, type_, "Value");
  return c.get<pc5_rlc_ch_setup_list_l>();
}
pc5_rlc_ch_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::pc5_rlc_ch_failed_to_be_setup_list()
{
  assert_choice_type(types::pc5_rlc_ch_failed_to_be_setup_list, type_, "Value");
  return c.get<pc5_rlc_ch_failed_to_be_setup_list_l>();
}
serving_cell_mo_encoded_in_cgc_list_l& ue_context_setup_resp_ies_o::value_c::serving_cell_mo_encoded_in_cgc_list()
{
  assert_choice_type(types::serving_cell_mo_encoded_in_cgc_list, type_, "Value");
  return c.get<serving_cell_mo_encoded_in_cgc_list_l>();
}
const uint64_t& ue_context_setup_resp_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_setup_resp_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const du_to_cu_rrc_info_s& ue_context_setup_resp_ies_o::value_c::du_to_cu_rrc_info() const
{
  assert_choice_type(types::du_to_cu_rrc_info, type_, "Value");
  return c.get<du_to_cu_rrc_info_s>();
}
const uint32_t& ue_context_setup_resp_ies_o::value_c::c_rnti() const
{
  assert_choice_type(types::c_rnti, type_, "Value");
  return c.get<uint32_t>();
}
const unbounded_octstring<true>& ue_context_setup_resp_ies_o::value_c::res_coordination_transfer_container() const
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const full_cfg_e& ue_context_setup_resp_ies_o::value_c::full_cfg() const
{
  assert_choice_type(types::full_cfg, type_, "Value");
  return c.get<full_cfg_e>();
}
const drbs_setup_list_l& ue_context_setup_resp_ies_o::value_c::drbs_setup_list() const
{
  assert_choice_type(types::drbs_setup_list, type_, "Value");
  return c.get<drbs_setup_list_l>();
}
const srbs_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::srbs_failed_to_be_setup_list() const
{
  assert_choice_type(types::srbs_failed_to_be_setup_list, type_, "Value");
  return c.get<srbs_failed_to_be_setup_list_l>();
}
const drbs_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::drbs_failed_to_be_setup_list() const
{
  assert_choice_type(types::drbs_failed_to_be_setup_list, type_, "Value");
  return c.get<drbs_failed_to_be_setup_list_l>();
}
const scell_failedto_setup_list_l& ue_context_setup_resp_ies_o::value_c::scell_failedto_setup_list() const
{
  assert_choice_type(types::scell_failedto_setup_list, type_, "Value");
  return c.get<scell_failedto_setup_list_l>();
}
const inactivity_monitoring_resp_e& ue_context_setup_resp_ies_o::value_c::inactivity_monitoring_resp() const
{
  assert_choice_type(types::inactivity_monitoring_resp, type_, "Value");
  return c.get<inactivity_monitoring_resp_e>();
}
const crit_diagnostics_s& ue_context_setup_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const srbs_setup_list_l& ue_context_setup_resp_ies_o::value_c::srbs_setup_list() const
{
  assert_choice_type(types::srbs_setup_list, type_, "Value");
  return c.get<srbs_setup_list_l>();
}
const bh_chs_setup_list_l& ue_context_setup_resp_ies_o::value_c::bh_chs_setup_list() const
{
  assert_choice_type(types::bh_chs_setup_list, type_, "Value");
  return c.get<bh_chs_setup_list_l>();
}
const bh_chs_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::bh_chs_failed_to_be_setup_list() const
{
  assert_choice_type(types::bh_chs_failed_to_be_setup_list, type_, "Value");
  return c.get<bh_chs_failed_to_be_setup_list_l>();
}
const sl_drbs_setup_list_l& ue_context_setup_resp_ies_o::value_c::sl_drbs_setup_list() const
{
  assert_choice_type(types::sl_drbs_setup_list, type_, "Value");
  return c.get<sl_drbs_setup_list_l>();
}
const sl_drbs_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::sl_drbs_failed_to_be_setup_list() const
{
  assert_choice_type(types::sl_drbs_failed_to_be_setup_list, type_, "Value");
  return c.get<sl_drbs_failed_to_be_setup_list_l>();
}
const nr_cgi_s& ue_context_setup_resp_ies_o::value_c::requested_target_cell_global_id() const
{
  assert_choice_type(types::requested_target_cell_global_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
const scg_activation_status_e& ue_context_setup_resp_ies_o::value_c::scg_activation_status() const
{
  assert_choice_type(types::scg_activation_status, type_, "Value");
  return c.get<scg_activation_status_e>();
}
const uu_rlc_ch_setup_list_l& ue_context_setup_resp_ies_o::value_c::uu_rlc_ch_setup_list() const
{
  assert_choice_type(types::uu_rlc_ch_setup_list, type_, "Value");
  return c.get<uu_rlc_ch_setup_list_l>();
}
const uu_rlc_ch_failed_to_be_setup_list_l&
ue_context_setup_resp_ies_o::value_c::uu_rlc_ch_failed_to_be_setup_list() const
{
  assert_choice_type(types::uu_rlc_ch_failed_to_be_setup_list, type_, "Value");
  return c.get<uu_rlc_ch_failed_to_be_setup_list_l>();
}
const pc5_rlc_ch_setup_list_l& ue_context_setup_resp_ies_o::value_c::pc5_rlc_ch_setup_list() const
{
  assert_choice_type(types::pc5_rlc_ch_setup_list, type_, "Value");
  return c.get<pc5_rlc_ch_setup_list_l>();
}
const pc5_rlc_ch_failed_to_be_setup_list_l&
ue_context_setup_resp_ies_o::value_c::pc5_rlc_ch_failed_to_be_setup_list() const
{
  assert_choice_type(types::pc5_rlc_ch_failed_to_be_setup_list, type_, "Value");
  return c.get<pc5_rlc_ch_failed_to_be_setup_list_l>();
}
const serving_cell_mo_encoded_in_cgc_list_l&
ue_context_setup_resp_ies_o::value_c::serving_cell_mo_encoded_in_cgc_list() const
{
  assert_choice_type(types::serving_cell_mo_encoded_in_cgc_list, type_, "Value");
  return c.get<serving_cell_mo_encoded_in_cgc_list_l>();
}
void ue_context_setup_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::du_to_cu_rrc_info:
      j.write_fieldname("DUtoCURRCInformation");
      c.get<du_to_cu_rrc_info_s>().to_json(j);
      break;
    case types::c_rnti:
      j.write_int("INTEGER (0..65535,...)", c.get<uint32_t>());
      break;
    case types::res_coordination_transfer_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::full_cfg:
      j.write_str("FullConfiguration", "full");
      break;
    case types::drbs_setup_list:
      j.start_array("DRBs-Setup-List");
      for (const auto& e1 : c.get<drbs_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_failed_to_be_setup_list:
      j.start_array("SRBs-FailedToBeSetup-List");
      for (const auto& e1 : c.get<srbs_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_failed_to_be_setup_list:
      j.start_array("DRBs-FailedToBeSetup-List");
      for (const auto& e1 : c.get<drbs_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::scell_failedto_setup_list:
      j.start_array("SCell-FailedtoSetup-List");
      for (const auto& e1 : c.get<scell_failedto_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::inactivity_monitoring_resp:
      j.write_str("InactivityMonitoringResponse", "not-supported");
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::srbs_setup_list:
      j.start_array("SRBs-Setup-List");
      for (const auto& e1 : c.get<srbs_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::bh_chs_setup_list:
      j.start_array("BHChannels-Setup-List");
      for (const auto& e1 : c.get<bh_chs_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::bh_chs_failed_to_be_setup_list:
      j.start_array("BHChannels-FailedToBeSetup-List");
      for (const auto& e1 : c.get<bh_chs_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sl_drbs_setup_list:
      j.start_array("SLDRBs-Setup-List");
      for (const auto& e1 : c.get<sl_drbs_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sl_drbs_failed_to_be_setup_list:
      j.start_array("SLDRBs-FailedToBeSetup-List");
      for (const auto& e1 : c.get<sl_drbs_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::requested_target_cell_global_id:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    case types::scg_activation_status:
      j.write_str("SCGActivationStatus", c.get<scg_activation_status_e>().to_string());
      break;
    case types::uu_rlc_ch_setup_list:
      j.start_array("UuRLCChannelSetupList");
      for (const auto& e1 : c.get<uu_rlc_ch_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      j.start_array("UuRLCChannelFailedToBeSetupList");
      for (const auto& e1 : c.get<uu_rlc_ch_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pc5_rlc_ch_setup_list:
      j.start_array("PC5RLCChannelSetupList");
      for (const auto& e1 : c.get<pc5_rlc_ch_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      j.start_array("PC5RLCChannelFailedToBeSetupList");
      for (const auto& e1 : c.get<pc5_rlc_ch_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      j.start_array("ServingCellMO-encoded-in-CGC-List");
      for (const auto& e1 : c.get<serving_cell_mo_encoded_in_cgc_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_setup_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::du_to_cu_rrc_info:
      HANDLE_CODE(c.get<du_to_cu_rrc_info_s>().pack(bref));
      break;
    case types::c_rnti:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u, true, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::full_cfg:
      HANDLE_CODE(c.get<full_cfg_e>().pack(bref));
      break;
    case types::drbs_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_setup_list_l>(), 1, 64, true));
      break;
    case types::srbs_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_failed_to_be_setup_list_l>(), 1, 8, true));
      break;
    case types::drbs_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_failed_to_be_setup_list_l>(), 1, 64, true));
      break;
    case types::scell_failedto_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<scell_failedto_setup_list_l>(), 1, 32, true));
      break;
    case types::inactivity_monitoring_resp:
      HANDLE_CODE(c.get<inactivity_monitoring_resp_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::srbs_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_setup_list_l>(), 1, 8, true));
      break;
    case types::bh_chs_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_chs_setup_list_l>(), 1, 65536, true));
      break;
    case types::bh_chs_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_chs_failed_to_be_setup_list_l>(), 1, 65536, true));
      break;
    case types::sl_drbs_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_drbs_setup_list_l>(), 1, 512, true));
      break;
    case types::sl_drbs_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_drbs_failed_to_be_setup_list_l>(), 1, 512, true));
      break;
    case types::requested_target_cell_global_id:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    case types::scg_activation_status:
      HANDLE_CODE(c.get<scg_activation_status_e>().pack(bref));
      break;
    case types::uu_rlc_ch_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uu_rlc_ch_setup_list_l>(), 1, 32, true));
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uu_rlc_ch_failed_to_be_setup_list_l>(), 1, 32, true));
      break;
    case types::pc5_rlc_ch_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pc5_rlc_ch_setup_list_l>(), 1, 512, true));
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pc5_rlc_ch_failed_to_be_setup_list_l>(), 1, 512, true));
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<serving_cell_mo_encoded_in_cgc_list_l>(), 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_setup_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::du_to_cu_rrc_info:
      HANDLE_CODE(c.get<du_to_cu_rrc_info_s>().unpack(bref));
      break;
    case types::c_rnti:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u, true, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::full_cfg:
      HANDLE_CODE(c.get<full_cfg_e>().unpack(bref));
      break;
    case types::drbs_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_setup_list_l>(), bref, 1, 64, true));
      break;
    case types::srbs_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_failed_to_be_setup_list_l>(), bref, 1, 8, true));
      break;
    case types::drbs_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_failed_to_be_setup_list_l>(), bref, 1, 64, true));
      break;
    case types::scell_failedto_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<scell_failedto_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::inactivity_monitoring_resp:
      HANDLE_CODE(c.get<inactivity_monitoring_resp_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::srbs_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_setup_list_l>(), bref, 1, 8, true));
      break;
    case types::bh_chs_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_chs_setup_list_l>(), bref, 1, 65536, true));
      break;
    case types::bh_chs_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_chs_failed_to_be_setup_list_l>(), bref, 1, 65536, true));
      break;
    case types::sl_drbs_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_drbs_setup_list_l>(), bref, 1, 512, true));
      break;
    case types::sl_drbs_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_drbs_failed_to_be_setup_list_l>(), bref, 1, 512, true));
      break;
    case types::requested_target_cell_global_id:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    case types::scg_activation_status:
      HANDLE_CODE(c.get<scg_activation_status_e>().unpack(bref));
      break;
    case types::uu_rlc_ch_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uu_rlc_ch_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::uu_rlc_ch_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uu_rlc_ch_failed_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::pc5_rlc_ch_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pc5_rlc_ch_setup_list_l>(), bref, 1, 512, true));
      break;
    case types::pc5_rlc_ch_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pc5_rlc_ch_failed_to_be_setup_list_l>(), bref, 1, 512, true));
      break;
    case types::serving_cell_mo_encoded_in_cgc_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<serving_cell_mo_encoded_in_cgc_list_l>(), bref, 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// UEInactivityNotificationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_inactivity_notif_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 100, 635};
  return map_enum_number(names, 4, idx, "id");
}
bool ue_inactivity_notif_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 100, 635};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_inactivity_notif_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 100:
      return crit_e::reject;
    case 635:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_inactivity_notif_ies_o::value_c ue_inactivity_notif_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 100:
      ret.set(value_c::types::drb_activity_list);
      break;
    case 635:
      ret.set(value_c::types::sdt_termination_request);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_inactivity_notif_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 100:
      return presence_e::mandatory;
    case 635:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_inactivity_notif_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::drb_activity_list:
      c.destroy<drb_activity_list_l>();
      break;
    default:
      break;
  }
}
void ue_inactivity_notif_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::drb_activity_list:
      c.init<drb_activity_list_l>();
      break;
    case types::sdt_termination_request:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_inactivity_notif_ies_o::value_c");
  }
}
ue_inactivity_notif_ies_o::value_c::value_c(const ue_inactivity_notif_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::drb_activity_list:
      c.init(other.c.get<drb_activity_list_l>());
      break;
    case types::sdt_termination_request:
      c.init(other.c.get<sdt_termination_request_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_inactivity_notif_ies_o::value_c");
  }
}
ue_inactivity_notif_ies_o::value_c&
ue_inactivity_notif_ies_o::value_c::operator=(const ue_inactivity_notif_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::drb_activity_list:
      c.set(other.c.get<drb_activity_list_l>());
      break;
    case types::sdt_termination_request:
      c.set(other.c.get<sdt_termination_request_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_inactivity_notif_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_inactivity_notif_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_inactivity_notif_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
drb_activity_list_l& ue_inactivity_notif_ies_o::value_c::drb_activity_list()
{
  assert_choice_type(types::drb_activity_list, type_, "Value");
  return c.get<drb_activity_list_l>();
}
sdt_termination_request_e& ue_inactivity_notif_ies_o::value_c::sdt_termination_request()
{
  assert_choice_type(types::sdt_termination_request, type_, "Value");
  return c.get<sdt_termination_request_e>();
}
const uint64_t& ue_inactivity_notif_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_inactivity_notif_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const drb_activity_list_l& ue_inactivity_notif_ies_o::value_c::drb_activity_list() const
{
  assert_choice_type(types::drb_activity_list, type_, "Value");
  return c.get<drb_activity_list_l>();
}
const sdt_termination_request_e& ue_inactivity_notif_ies_o::value_c::sdt_termination_request() const
{
  assert_choice_type(types::sdt_termination_request, type_, "Value");
  return c.get<sdt_termination_request_e>();
}
void ue_inactivity_notif_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::drb_activity_list:
      j.start_array("DRB-Activity-List");
      for (const auto& e1 : c.get<drb_activity_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sdt_termination_request:
      j.write_str("SDT-Termination-Request", c.get<sdt_termination_request_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "ue_inactivity_notif_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_inactivity_notif_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::drb_activity_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drb_activity_list_l>(), 1, 64, true));
      break;
    case types::sdt_termination_request:
      HANDLE_CODE(c.get<sdt_termination_request_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_inactivity_notif_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_inactivity_notif_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::drb_activity_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drb_activity_list_l>(), bref, 1, 64, true));
      break;
    case types::sdt_termination_request:
      HANDLE_CODE(c.get<sdt_termination_request_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_inactivity_notif_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ULRRCMessageTransferIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ul_rrc_msg_transfer_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 64, 50, 224, 219};
  return map_enum_number(names, 6, idx, "id");
}
bool ul_rrc_msg_transfer_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 64, 50, 224, 219};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ul_rrc_msg_transfer_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 64:
      return crit_e::reject;
    case 50:
      return crit_e::reject;
    case 224:
      return crit_e::reject;
    case 219:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ul_rrc_msg_transfer_ies_o::value_c ul_rrc_msg_transfer_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 64:
      ret.set(value_c::types::srb_id);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 224:
      ret.set(value_c::types::sel_plmn_id);
      break;
    case 219:
      ret.set(value_c::types::new_gnb_du_ue_f1ap_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ul_rrc_msg_transfer_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 64:
      return presence_e::mandatory;
    case 50:
      return presence_e::mandatory;
    case 224:
      return presence_e::optional;
    case 219:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ul_rrc_msg_transfer_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::sel_plmn_id:
      c.destroy<fixed_octstring<3, true>>();
      break;
    default:
      break;
  }
}
void ul_rrc_msg_transfer_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::srb_id:
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::sel_plmn_id:
      c.init<fixed_octstring<3, true>>();
      break;
    case types::new_gnb_du_ue_f1ap_id:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_rrc_msg_transfer_ies_o::value_c");
  }
}
ul_rrc_msg_transfer_ies_o::value_c::value_c(const ul_rrc_msg_transfer_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::srb_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::sel_plmn_id:
      c.init(other.c.get<fixed_octstring<3, true>>());
      break;
    case types::new_gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_rrc_msg_transfer_ies_o::value_c");
  }
}
ul_rrc_msg_transfer_ies_o::value_c&
ul_rrc_msg_transfer_ies_o::value_c::operator=(const ul_rrc_msg_transfer_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::srb_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::sel_plmn_id:
      c.set(other.c.get<fixed_octstring<3, true>>());
      break;
    case types::new_gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_rrc_msg_transfer_ies_o::value_c");
  }

  return *this;
}
uint64_t& ul_rrc_msg_transfer_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ul_rrc_msg_transfer_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& ul_rrc_msg_transfer_ies_o::value_c::srb_id()
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
unbounded_octstring<true>& ul_rrc_msg_transfer_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
fixed_octstring<3, true>& ul_rrc_msg_transfer_ies_o::value_c::sel_plmn_id()
{
  assert_choice_type(types::sel_plmn_id, type_, "Value");
  return c.get<fixed_octstring<3, true>>();
}
uint64_t& ul_rrc_msg_transfer_ies_o::value_c::new_gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::new_gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ul_rrc_msg_transfer_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ul_rrc_msg_transfer_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& ul_rrc_msg_transfer_ies_o::value_c::srb_id() const
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
const unbounded_octstring<true>& ul_rrc_msg_transfer_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const fixed_octstring<3, true>& ul_rrc_msg_transfer_ies_o::value_c::sel_plmn_id() const
{
  assert_choice_type(types::sel_plmn_id, type_, "Value");
  return c.get<fixed_octstring<3, true>>();
}
const uint64_t& ul_rrc_msg_transfer_ies_o::value_c::new_gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::new_gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
void ul_rrc_msg_transfer_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::srb_id:
      j.write_int("INTEGER (0..3,...)", c.get<uint8_t>());
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::sel_plmn_id:
      j.write_str("OCTET STRING", c.get<fixed_octstring<3, true>>().to_string());
      break;
    case types::new_gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    default:
      log_invalid_choice_id(type_, "ul_rrc_msg_transfer_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ul_rrc_msg_transfer_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srb_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::sel_plmn_id:
      HANDLE_CODE((c.get<fixed_octstring<3, true>>().pack(bref)));
      break;
    case types::new_gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "ul_rrc_msg_transfer_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_rrc_msg_transfer_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srb_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::sel_plmn_id:
      HANDLE_CODE((c.get<fixed_octstring<3, true>>().unpack(bref)));
      break;
    case types::new_gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "ul_rrc_msg_transfer_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// WriteReplaceWarningRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t write_replace_warning_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 140, 141, 142, 144};
  return map_enum_number(names, 5, idx, "id");
}
bool write_replace_warning_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 140, 141, 142, 144};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e write_replace_warning_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 140:
      return crit_e::reject;
    case 141:
      return crit_e::reject;
    case 142:
      return crit_e::reject;
    case 144:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
write_replace_warning_request_ies_o::value_c write_replace_warning_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 140:
      ret.set(value_c::types::pws_sys_info);
      break;
    case 141:
      ret.set(value_c::types::repeat_period);
      break;
    case 142:
      ret.set(value_c::types::numof_broadcast_request);
      break;
    case 144:
      ret.set(value_c::types::cells_to_be_broadcast_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e write_replace_warning_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 140:
      return presence_e::mandatory;
    case 141:
      return presence_e::mandatory;
    case 142:
      return presence_e::mandatory;
    case 144:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void write_replace_warning_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pws_sys_info:
      c.destroy<pws_sys_info_s>();
      break;
    case types::cells_to_be_broadcast_list:
      c.destroy<cells_to_be_broadcast_list_l>();
      break;
    default:
      break;
  }
}
void write_replace_warning_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::pws_sys_info:
      c.init<pws_sys_info_s>();
      break;
    case types::repeat_period:
      break;
    case types::numof_broadcast_request:
      break;
    case types::cells_to_be_broadcast_list:
      c.init<cells_to_be_broadcast_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
  }
}
write_replace_warning_request_ies_o::value_c::value_c(const write_replace_warning_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::pws_sys_info:
      c.init(other.c.get<pws_sys_info_s>());
      break;
    case types::repeat_period:
      c.init(other.c.get<uint32_t>());
      break;
    case types::numof_broadcast_request:
      c.init(other.c.get<uint32_t>());
      break;
    case types::cells_to_be_broadcast_list:
      c.init(other.c.get<cells_to_be_broadcast_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
  }
}
write_replace_warning_request_ies_o::value_c&
write_replace_warning_request_ies_o::value_c::operator=(const write_replace_warning_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::pws_sys_info:
      c.set(other.c.get<pws_sys_info_s>());
      break;
    case types::repeat_period:
      c.set(other.c.get<uint32_t>());
      break;
    case types::numof_broadcast_request:
      c.set(other.c.get<uint32_t>());
      break;
    case types::cells_to_be_broadcast_list:
      c.set(other.c.get<cells_to_be_broadcast_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& write_replace_warning_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
pws_sys_info_s& write_replace_warning_request_ies_o::value_c::pws_sys_info()
{
  assert_choice_type(types::pws_sys_info, type_, "Value");
  return c.get<pws_sys_info_s>();
}
uint32_t& write_replace_warning_request_ies_o::value_c::repeat_period()
{
  assert_choice_type(types::repeat_period, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& write_replace_warning_request_ies_o::value_c::numof_broadcast_request()
{
  assert_choice_type(types::numof_broadcast_request, type_, "Value");
  return c.get<uint32_t>();
}
cells_to_be_broadcast_list_l& write_replace_warning_request_ies_o::value_c::cells_to_be_broadcast_list()
{
  assert_choice_type(types::cells_to_be_broadcast_list, type_, "Value");
  return c.get<cells_to_be_broadcast_list_l>();
}
const uint16_t& write_replace_warning_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const pws_sys_info_s& write_replace_warning_request_ies_o::value_c::pws_sys_info() const
{
  assert_choice_type(types::pws_sys_info, type_, "Value");
  return c.get<pws_sys_info_s>();
}
const uint32_t& write_replace_warning_request_ies_o::value_c::repeat_period() const
{
  assert_choice_type(types::repeat_period, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& write_replace_warning_request_ies_o::value_c::numof_broadcast_request() const
{
  assert_choice_type(types::numof_broadcast_request, type_, "Value");
  return c.get<uint32_t>();
}
const cells_to_be_broadcast_list_l& write_replace_warning_request_ies_o::value_c::cells_to_be_broadcast_list() const
{
  assert_choice_type(types::cells_to_be_broadcast_list, type_, "Value");
  return c.get<cells_to_be_broadcast_list_l>();
}
void write_replace_warning_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::pws_sys_info:
      j.write_fieldname("PWSSystemInformation");
      c.get<pws_sys_info_s>().to_json(j);
      break;
    case types::repeat_period:
      j.write_int("INTEGER (0..131071,...)", c.get<uint32_t>());
      break;
    case types::numof_broadcast_request:
      j.write_int("INTEGER (0..65535)", c.get<uint32_t>());
      break;
    case types::cells_to_be_broadcast_list:
      j.start_array("Cells-To-Be-Broadcast-List");
      for (const auto& e1 : c.get<cells_to_be_broadcast_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE write_replace_warning_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pws_sys_info:
      HANDLE_CODE(c.get<pws_sys_info_s>().pack(bref));
      break;
    case types::repeat_period:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)131071u, true, true));
      break;
    case types::numof_broadcast_request:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::cells_to_be_broadcast_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_broadcast_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE write_replace_warning_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pws_sys_info:
      HANDLE_CODE(c.get<pws_sys_info_s>().unpack(bref));
      break;
    case types::repeat_period:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)131071u, true, true));
      break;
    case types::numof_broadcast_request:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::cells_to_be_broadcast_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_broadcast_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// WriteReplaceWarningResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t write_replace_warning_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 146, 7, 189};
  return map_enum_number(names, 4, idx, "id");
}
bool write_replace_warning_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 146, 7, 189};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e write_replace_warning_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 146:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 189:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
write_replace_warning_resp_ies_o::value_c write_replace_warning_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 146:
      ret.set(value_c::types::cells_broadcast_completed_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 189:
      ret.set(value_c::types::ded_si_delivery_needed_ue_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e write_replace_warning_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 146:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 189:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void write_replace_warning_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_broadcast_completed_list:
      c.destroy<cells_broadcast_completed_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.destroy<ded_si_delivery_needed_ue_list_l>();
      break;
    default:
      break;
  }
}
void write_replace_warning_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_broadcast_completed_list:
      c.init<cells_broadcast_completed_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
  }
}
write_replace_warning_resp_ies_o::value_c::value_c(const write_replace_warning_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_broadcast_completed_list:
      c.init(other.c.get<cells_broadcast_completed_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
  }
}
write_replace_warning_resp_ies_o::value_c&
write_replace_warning_resp_ies_o::value_c::operator=(const write_replace_warning_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_broadcast_completed_list:
      c.set(other.c.get<cells_broadcast_completed_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.set(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& write_replace_warning_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_broadcast_completed_list_l& write_replace_warning_resp_ies_o::value_c::cells_broadcast_completed_list()
{
  assert_choice_type(types::cells_broadcast_completed_list, type_, "Value");
  return c.get<cells_broadcast_completed_list_l>();
}
crit_diagnostics_s& write_replace_warning_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
ded_si_delivery_needed_ue_list_l& write_replace_warning_resp_ies_o::value_c::ded_si_delivery_needed_ue_list()
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
const uint16_t& write_replace_warning_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_broadcast_completed_list_l&
write_replace_warning_resp_ies_o::value_c::cells_broadcast_completed_list() const
{
  assert_choice_type(types::cells_broadcast_completed_list, type_, "Value");
  return c.get<cells_broadcast_completed_list_l>();
}
const crit_diagnostics_s& write_replace_warning_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const ded_si_delivery_needed_ue_list_l&
write_replace_warning_resp_ies_o::value_c::ded_si_delivery_needed_ue_list() const
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
void write_replace_warning_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_broadcast_completed_list:
      j.start_array("Cells-Broadcast-Completed-List");
      for (const auto& e1 : c.get<cells_broadcast_completed_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::ded_si_delivery_needed_ue_list:
      j.start_array("Dedicated-SIDelivery-NeededUE-List");
      for (const auto& e1 : c.get<ded_si_delivery_needed_ue_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE write_replace_warning_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_broadcast_completed_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_broadcast_completed_list_l>(), 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ded_si_delivery_needed_ue_list_l>(), 1, 65536, true));
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE write_replace_warning_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_broadcast_completed_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_broadcast_completed_list_l>(), bref, 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ded_si_delivery_needed_ue_list_l>(), bref, 1, 65536, true));
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

f1_removal_fail_ies_container::f1_removal_fail_ies_container() :
  transaction_id(78, crit_e::reject), cause(0, crit_e::ignore), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE f1_removal_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_removal_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

f1_removal_resp_ies_container::f1_removal_resp_ies_container() :
  transaction_id(78, crit_e::reject), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE f1_removal_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_removal_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

f1_setup_fail_ies_container::f1_setup_fail_ies_container() :
  transaction_id(78, crit_e::reject),
  cause(0, crit_e::ignore),
  time_to_wait(77, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE f1_setup_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (time_to_wait_present) {
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        time_to_wait.id      = id;
        HANDLE_CODE(time_to_wait.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_setup_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_fieldname("");
    time_to_wait.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

f1_setup_request_ies_container::f1_setup_request_ies_container() :
  transaction_id(78, crit_e::reject),
  gnb_du_id(42, crit_e::reject),
  gnb_du_name(45, crit_e::ignore),
  gnb_du_served_cells_list(44, crit_e::reject),
  gnb_du_rrc_version(171, crit_e::reject),
  transport_layer_address_info(254, crit_e::ignore),
  bap_address(281, crit_e::ignore),
  extended_gnb_du_name(427, crit_e::ignore)
{
}
SRSASN_CODE f1_setup_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += gnb_du_name_present ? 1 : 0;
  nof_ies += gnb_du_served_cells_list_present ? 1 : 0;
  nof_ies += transport_layer_address_info_present ? 1 : 0;
  nof_ies += bap_address_present ? 1 : 0;
  nof_ies += extended_gnb_du_name_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(gnb_du_id.pack(bref));
  if (gnb_du_name_present) {
    HANDLE_CODE(gnb_du_name.pack(bref));
  }
  if (gnb_du_served_cells_list_present) {
    HANDLE_CODE(gnb_du_served_cells_list.pack(bref));
  }
  HANDLE_CODE(gnb_du_rrc_version.pack(bref));
  if (transport_layer_address_info_present) {
    HANDLE_CODE(transport_layer_address_info.pack(bref));
  }
  if (bap_address_present) {
    HANDLE_CODE(bap_address.pack(bref));
  }
  if (extended_gnb_du_name_present) {
    HANDLE_CODE(extended_gnb_du_name.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 42: {
        nof_mandatory_ies--;
        gnb_du_id.id = id;
        HANDLE_CODE(gnb_du_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_id.value.unpack(bref));
        break;
      }
      case 45: {
        gnb_du_name_present = true;
        gnb_du_name.id      = id;
        HANDLE_CODE(gnb_du_name.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_name.value.unpack(bref));
        break;
      }
      case 44: {
        gnb_du_served_cells_list_present = true;
        gnb_du_served_cells_list.id      = id;
        HANDLE_CODE(gnb_du_served_cells_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_served_cells_list.value.unpack(bref));
        break;
      }
      case 171: {
        nof_mandatory_ies--;
        gnb_du_rrc_version.id = id;
        HANDLE_CODE(gnb_du_rrc_version.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_rrc_version.value.unpack(bref));
        break;
      }
      case 254: {
        transport_layer_address_info_present = true;
        transport_layer_address_info.id      = id;
        HANDLE_CODE(transport_layer_address_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transport_layer_address_info.value.unpack(bref));
        break;
      }
      case 281: {
        bap_address_present = true;
        bap_address.id      = id;
        HANDLE_CODE(bap_address.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bap_address.value.unpack(bref));
        break;
      }
      case 427: {
        extended_gnb_du_name_present = true;
        extended_gnb_du_name.id      = id;
        HANDLE_CODE(extended_gnb_du_name.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(extended_gnb_du_name.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_setup_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  gnb_du_id.to_json(j);
  if (gnb_du_name_present) {
    j.write_fieldname("");
    gnb_du_name.to_json(j);
  }
  if (gnb_du_served_cells_list_present) {
    j.write_fieldname("");
    gnb_du_served_cells_list.to_json(j);
  }
  j.write_fieldname("");
  gnb_du_rrc_version.to_json(j);
  if (transport_layer_address_info_present) {
    j.write_fieldname("");
    transport_layer_address_info.to_json(j);
  }
  if (bap_address_present) {
    j.write_fieldname("");
    bap_address.to_json(j);
  }
  if (extended_gnb_du_name_present) {
    j.write_fieldname("");
    extended_gnb_du_name.to_json(j);
  }
  j.end_obj();
}

f1_setup_resp_ies_container::f1_setup_resp_ies_container() :
  transaction_id(78, crit_e::reject),
  gnb_cu_name(82, crit_e::ignore),
  cells_to_be_activ_list(3, crit_e::reject),
  gnb_cu_rrc_version(170, crit_e::reject),
  transport_layer_address_info(254, crit_e::ignore),
  ul_bh_non_up_traffic_map(287, crit_e::reject),
  bap_address(281, crit_e::ignore),
  extended_gnb_cu_name(426, crit_e::ignore)
{
}
SRSASN_CODE f1_setup_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += gnb_cu_name_present ? 1 : 0;
  nof_ies += cells_to_be_activ_list_present ? 1 : 0;
  nof_ies += transport_layer_address_info_present ? 1 : 0;
  nof_ies += ul_bh_non_up_traffic_map_present ? 1 : 0;
  nof_ies += bap_address_present ? 1 : 0;
  nof_ies += extended_gnb_cu_name_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (gnb_cu_name_present) {
    HANDLE_CODE(gnb_cu_name.pack(bref));
  }
  if (cells_to_be_activ_list_present) {
    HANDLE_CODE(cells_to_be_activ_list.pack(bref));
  }
  HANDLE_CODE(gnb_cu_rrc_version.pack(bref));
  if (transport_layer_address_info_present) {
    HANDLE_CODE(transport_layer_address_info.pack(bref));
  }
  if (ul_bh_non_up_traffic_map_present) {
    HANDLE_CODE(ul_bh_non_up_traffic_map.pack(bref));
  }
  if (bap_address_present) {
    HANDLE_CODE(bap_address.pack(bref));
  }
  if (extended_gnb_cu_name_present) {
    HANDLE_CODE(extended_gnb_cu_name.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 82: {
        gnb_cu_name_present = true;
        gnb_cu_name.id      = id;
        HANDLE_CODE(gnb_cu_name.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_name.value.unpack(bref));
        break;
      }
      case 3: {
        cells_to_be_activ_list_present = true;
        cells_to_be_activ_list.id      = id;
        HANDLE_CODE(cells_to_be_activ_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_activ_list.value.unpack(bref));
        break;
      }
      case 170: {
        nof_mandatory_ies--;
        gnb_cu_rrc_version.id = id;
        HANDLE_CODE(gnb_cu_rrc_version.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_rrc_version.value.unpack(bref));
        break;
      }
      case 254: {
        transport_layer_address_info_present = true;
        transport_layer_address_info.id      = id;
        HANDLE_CODE(transport_layer_address_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transport_layer_address_info.value.unpack(bref));
        break;
      }
      case 287: {
        ul_bh_non_up_traffic_map_present = true;
        ul_bh_non_up_traffic_map.id      = id;
        HANDLE_CODE(ul_bh_non_up_traffic_map.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_bh_non_up_traffic_map.value.unpack(bref));
        break;
      }
      case 281: {
        bap_address_present = true;
        bap_address.id      = id;
        HANDLE_CODE(bap_address.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bap_address.value.unpack(bref));
        break;
      }
      case 426: {
        extended_gnb_cu_name_present = true;
        extended_gnb_cu_name.id      = id;
        HANDLE_CODE(extended_gnb_cu_name.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(extended_gnb_cu_name.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_setup_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (gnb_cu_name_present) {
    j.write_fieldname("");
    gnb_cu_name.to_json(j);
  }
  if (cells_to_be_activ_list_present) {
    j.write_fieldname("");
    cells_to_be_activ_list.to_json(j);
  }
  j.write_fieldname("");
  gnb_cu_rrc_version.to_json(j);
  if (transport_layer_address_info_present) {
    j.write_fieldname("");
    transport_layer_address_info.to_json(j);
  }
  if (ul_bh_non_up_traffic_map_present) {
    j.write_fieldname("");
    ul_bh_non_up_traffic_map.to_json(j);
  }
  if (bap_address_present) {
    j.write_fieldname("");
    bap_address.to_json(j);
  }
  if (extended_gnb_cu_name_present) {
    j.write_fieldname("");
    extended_gnb_cu_name.to_json(j);
  }
  j.end_obj();
}

gnb_cu_cfg_upd_ies_container::gnb_cu_cfg_upd_ies_container() :
  transaction_id(78, crit_e::reject),
  cells_to_be_activ_list(3, crit_e::reject),
  cells_to_be_deactiv_list(5, crit_e::reject),
  gnb_cu_tnl_assoc_to_add_list(121, crit_e::ignore),
  gnb_cu_tnl_assoc_to_rem_list(123, crit_e::ignore),
  gnb_cu_tnl_assoc_to_upd_list(125, crit_e::ignore),
  cells_to_be_barred_list(129, crit_e::ignore),
  protected_eutra_res_list(105, crit_e::reject),
  neighbour_cell_info_list(244, crit_e::ignore),
  transport_layer_address_info(254, crit_e::ignore),
  ul_bh_non_up_traffic_map(287, crit_e::reject),
  bap_address(281, crit_e::ignore),
  cco_assist_info(447, crit_e::ignore),
  cells_for_son_list(449, crit_e::ignore),
  gnb_cu_name(82, crit_e::ignore),
  extended_gnb_cu_name(426, crit_e::ignore)
{
}
SRSASN_CODE gnb_cu_cfg_upd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_to_be_activ_list_present ? 1 : 0;
  nof_ies += cells_to_be_deactiv_list_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_to_add_list_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_to_rem_list_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_to_upd_list_present ? 1 : 0;
  nof_ies += cells_to_be_barred_list_present ? 1 : 0;
  nof_ies += protected_eutra_res_list_present ? 1 : 0;
  nof_ies += neighbour_cell_info_list_present ? 1 : 0;
  nof_ies += transport_layer_address_info_present ? 1 : 0;
  nof_ies += ul_bh_non_up_traffic_map_present ? 1 : 0;
  nof_ies += bap_address_present ? 1 : 0;
  nof_ies += cco_assist_info_present ? 1 : 0;
  nof_ies += cells_for_son_list_present ? 1 : 0;
  nof_ies += gnb_cu_name_present ? 1 : 0;
  nof_ies += extended_gnb_cu_name_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (cells_to_be_activ_list_present) {
    HANDLE_CODE(cells_to_be_activ_list.pack(bref));
  }
  if (cells_to_be_deactiv_list_present) {
    HANDLE_CODE(cells_to_be_deactiv_list.pack(bref));
  }
  if (gnb_cu_tnl_assoc_to_add_list_present) {
    HANDLE_CODE(gnb_cu_tnl_assoc_to_add_list.pack(bref));
  }
  if (gnb_cu_tnl_assoc_to_rem_list_present) {
    HANDLE_CODE(gnb_cu_tnl_assoc_to_rem_list.pack(bref));
  }
  if (gnb_cu_tnl_assoc_to_upd_list_present) {
    HANDLE_CODE(gnb_cu_tnl_assoc_to_upd_list.pack(bref));
  }
  if (cells_to_be_barred_list_present) {
    HANDLE_CODE(cells_to_be_barred_list.pack(bref));
  }
  if (protected_eutra_res_list_present) {
    HANDLE_CODE(protected_eutra_res_list.pack(bref));
  }
  if (neighbour_cell_info_list_present) {
    HANDLE_CODE(neighbour_cell_info_list.pack(bref));
  }
  if (transport_layer_address_info_present) {
    HANDLE_CODE(transport_layer_address_info.pack(bref));
  }
  if (ul_bh_non_up_traffic_map_present) {
    HANDLE_CODE(ul_bh_non_up_traffic_map.pack(bref));
  }
  if (bap_address_present) {
    HANDLE_CODE(bap_address.pack(bref));
  }
  if (cco_assist_info_present) {
    HANDLE_CODE(cco_assist_info.pack(bref));
  }
  if (cells_for_son_list_present) {
    HANDLE_CODE(cells_for_son_list.pack(bref));
  }
  if (gnb_cu_name_present) {
    HANDLE_CODE(gnb_cu_name.pack(bref));
  }
  if (extended_gnb_cu_name_present) {
    HANDLE_CODE(extended_gnb_cu_name.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 3: {
        cells_to_be_activ_list_present = true;
        cells_to_be_activ_list.id      = id;
        HANDLE_CODE(cells_to_be_activ_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_activ_list.value.unpack(bref));
        break;
      }
      case 5: {
        cells_to_be_deactiv_list_present = true;
        cells_to_be_deactiv_list.id      = id;
        HANDLE_CODE(cells_to_be_deactiv_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_deactiv_list.value.unpack(bref));
        break;
      }
      case 121: {
        gnb_cu_tnl_assoc_to_add_list_present = true;
        gnb_cu_tnl_assoc_to_add_list.id      = id;
        HANDLE_CODE(gnb_cu_tnl_assoc_to_add_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_tnl_assoc_to_add_list.value.unpack(bref));
        break;
      }
      case 123: {
        gnb_cu_tnl_assoc_to_rem_list_present = true;
        gnb_cu_tnl_assoc_to_rem_list.id      = id;
        HANDLE_CODE(gnb_cu_tnl_assoc_to_rem_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_tnl_assoc_to_rem_list.value.unpack(bref));
        break;
      }
      case 125: {
        gnb_cu_tnl_assoc_to_upd_list_present = true;
        gnb_cu_tnl_assoc_to_upd_list.id      = id;
        HANDLE_CODE(gnb_cu_tnl_assoc_to_upd_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_tnl_assoc_to_upd_list.value.unpack(bref));
        break;
      }
      case 129: {
        cells_to_be_barred_list_present = true;
        cells_to_be_barred_list.id      = id;
        HANDLE_CODE(cells_to_be_barred_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_barred_list.value.unpack(bref));
        break;
      }
      case 105: {
        protected_eutra_res_list_present = true;
        protected_eutra_res_list.id      = id;
        HANDLE_CODE(protected_eutra_res_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(protected_eutra_res_list.value.unpack(bref));
        break;
      }
      case 244: {
        neighbour_cell_info_list_present = true;
        neighbour_cell_info_list.id      = id;
        HANDLE_CODE(neighbour_cell_info_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(neighbour_cell_info_list.value.unpack(bref));
        break;
      }
      case 254: {
        transport_layer_address_info_present = true;
        transport_layer_address_info.id      = id;
        HANDLE_CODE(transport_layer_address_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transport_layer_address_info.value.unpack(bref));
        break;
      }
      case 287: {
        ul_bh_non_up_traffic_map_present = true;
        ul_bh_non_up_traffic_map.id      = id;
        HANDLE_CODE(ul_bh_non_up_traffic_map.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_bh_non_up_traffic_map.value.unpack(bref));
        break;
      }
      case 281: {
        bap_address_present = true;
        bap_address.id      = id;
        HANDLE_CODE(bap_address.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bap_address.value.unpack(bref));
        break;
      }
      case 447: {
        cco_assist_info_present = true;
        cco_assist_info.id      = id;
        HANDLE_CODE(cco_assist_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cco_assist_info.value.unpack(bref));
        break;
      }
      case 449: {
        cells_for_son_list_present = true;
        cells_for_son_list.id      = id;
        HANDLE_CODE(cells_for_son_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_for_son_list.value.unpack(bref));
        break;
      }
      case 82: {
        gnb_cu_name_present = true;
        gnb_cu_name.id      = id;
        HANDLE_CODE(gnb_cu_name.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_name.value.unpack(bref));
        break;
      }
      case 426: {
        extended_gnb_cu_name_present = true;
        extended_gnb_cu_name.id      = id;
        HANDLE_CODE(extended_gnb_cu_name.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(extended_gnb_cu_name.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_cu_cfg_upd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (cells_to_be_activ_list_present) {
    j.write_fieldname("");
    cells_to_be_activ_list.to_json(j);
  }
  if (cells_to_be_deactiv_list_present) {
    j.write_fieldname("");
    cells_to_be_deactiv_list.to_json(j);
  }
  if (gnb_cu_tnl_assoc_to_add_list_present) {
    j.write_fieldname("");
    gnb_cu_tnl_assoc_to_add_list.to_json(j);
  }
  if (gnb_cu_tnl_assoc_to_rem_list_present) {
    j.write_fieldname("");
    gnb_cu_tnl_assoc_to_rem_list.to_json(j);
  }
  if (gnb_cu_tnl_assoc_to_upd_list_present) {
    j.write_fieldname("");
    gnb_cu_tnl_assoc_to_upd_list.to_json(j);
  }
  if (cells_to_be_barred_list_present) {
    j.write_fieldname("");
    cells_to_be_barred_list.to_json(j);
  }
  if (protected_eutra_res_list_present) {
    j.write_fieldname("");
    protected_eutra_res_list.to_json(j);
  }
  if (neighbour_cell_info_list_present) {
    j.write_fieldname("");
    neighbour_cell_info_list.to_json(j);
  }
  if (transport_layer_address_info_present) {
    j.write_fieldname("");
    transport_layer_address_info.to_json(j);
  }
  if (ul_bh_non_up_traffic_map_present) {
    j.write_fieldname("");
    ul_bh_non_up_traffic_map.to_json(j);
  }
  if (bap_address_present) {
    j.write_fieldname("");
    bap_address.to_json(j);
  }
  if (cco_assist_info_present) {
    j.write_fieldname("");
    cco_assist_info.to_json(j);
  }
  if (cells_for_son_list_present) {
    j.write_fieldname("");
    cells_for_son_list.to_json(j);
  }
  if (gnb_cu_name_present) {
    j.write_fieldname("");
    gnb_cu_name.to_json(j);
  }
  if (extended_gnb_cu_name_present) {
    j.write_fieldname("");
    extended_gnb_cu_name.to_json(j);
  }
  j.end_obj();
}

gnb_cu_cfg_upd_ack_ies_container::gnb_cu_cfg_upd_ack_ies_container() :
  transaction_id(78, crit_e::reject),
  cells_failed_to_be_activ_list(1, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore),
  gnb_cu_tnl_assoc_setup_list(132, crit_e::ignore),
  gnb_cu_tnl_assoc_failed_to_setup_list(134, crit_e::ignore),
  ded_si_delivery_needed_ue_list(189, crit_e::ignore),
  transport_layer_address_info(254, crit_e::ignore)
{
}
SRSASN_CODE gnb_cu_cfg_upd_ack_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_failed_to_be_activ_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_setup_list_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_failed_to_setup_list_present ? 1 : 0;
  nof_ies += ded_si_delivery_needed_ue_list_present ? 1 : 0;
  nof_ies += transport_layer_address_info_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (cells_failed_to_be_activ_list_present) {
    HANDLE_CODE(cells_failed_to_be_activ_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (gnb_cu_tnl_assoc_setup_list_present) {
    HANDLE_CODE(gnb_cu_tnl_assoc_setup_list.pack(bref));
  }
  if (gnb_cu_tnl_assoc_failed_to_setup_list_present) {
    HANDLE_CODE(gnb_cu_tnl_assoc_failed_to_setup_list.pack(bref));
  }
  if (ded_si_delivery_needed_ue_list_present) {
    HANDLE_CODE(ded_si_delivery_needed_ue_list.pack(bref));
  }
  if (transport_layer_address_info_present) {
    HANDLE_CODE(transport_layer_address_info.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_ack_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 1: {
        cells_failed_to_be_activ_list_present = true;
        cells_failed_to_be_activ_list.id      = id;
        HANDLE_CODE(cells_failed_to_be_activ_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_failed_to_be_activ_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 132: {
        gnb_cu_tnl_assoc_setup_list_present = true;
        gnb_cu_tnl_assoc_setup_list.id      = id;
        HANDLE_CODE(gnb_cu_tnl_assoc_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_tnl_assoc_setup_list.value.unpack(bref));
        break;
      }
      case 134: {
        gnb_cu_tnl_assoc_failed_to_setup_list_present = true;
        gnb_cu_tnl_assoc_failed_to_setup_list.id      = id;
        HANDLE_CODE(gnb_cu_tnl_assoc_failed_to_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_tnl_assoc_failed_to_setup_list.value.unpack(bref));
        break;
      }
      case 189: {
        ded_si_delivery_needed_ue_list_present = true;
        ded_si_delivery_needed_ue_list.id      = id;
        HANDLE_CODE(ded_si_delivery_needed_ue_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ded_si_delivery_needed_ue_list.value.unpack(bref));
        break;
      }
      case 254: {
        transport_layer_address_info_present = true;
        transport_layer_address_info.id      = id;
        HANDLE_CODE(transport_layer_address_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transport_layer_address_info.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_cu_cfg_upd_ack_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (cells_failed_to_be_activ_list_present) {
    j.write_fieldname("");
    cells_failed_to_be_activ_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (gnb_cu_tnl_assoc_setup_list_present) {
    j.write_fieldname("");
    gnb_cu_tnl_assoc_setup_list.to_json(j);
  }
  if (gnb_cu_tnl_assoc_failed_to_setup_list_present) {
    j.write_fieldname("");
    gnb_cu_tnl_assoc_failed_to_setup_list.to_json(j);
  }
  if (ded_si_delivery_needed_ue_list_present) {
    j.write_fieldname("");
    ded_si_delivery_needed_ue_list.to_json(j);
  }
  if (transport_layer_address_info_present) {
    j.write_fieldname("");
    transport_layer_address_info.to_json(j);
  }
  j.end_obj();
}

gnb_cu_cfg_upd_fail_ies_container::gnb_cu_cfg_upd_fail_ies_container() :
  transaction_id(78, crit_e::reject),
  cause(0, crit_e::ignore),
  time_to_wait(77, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE gnb_cu_cfg_upd_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (time_to_wait_present) {
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        time_to_wait.id      = id;
        HANDLE_CODE(time_to_wait.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_cu_cfg_upd_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_fieldname("");
    time_to_wait.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

gnb_du_cfg_upd_ies_container::gnb_du_cfg_upd_ies_container() :
  transaction_id(78, crit_e::reject),
  served_cells_to_add_list(58, crit_e::reject),
  served_cells_to_modify_list(62, crit_e::reject),
  served_cells_to_delete_list(60, crit_e::reject),
  cells_status_list(89, crit_e::reject),
  ded_si_delivery_needed_ue_list(189, crit_e::ignore),
  gnb_du_id(42, crit_e::reject),
  gnb_du_tnl_assoc_to_rem_list(228, crit_e::reject),
  transport_layer_address_info(254, crit_e::ignore),
  coverage_mod_notif(446, crit_e::ignore),
  gnb_du_name(45, crit_e::ignore),
  extended_gnb_du_name(427, crit_e::ignore)
{
}
SRSASN_CODE gnb_du_cfg_upd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += served_cells_to_add_list_present ? 1 : 0;
  nof_ies += served_cells_to_modify_list_present ? 1 : 0;
  nof_ies += served_cells_to_delete_list_present ? 1 : 0;
  nof_ies += cells_status_list_present ? 1 : 0;
  nof_ies += ded_si_delivery_needed_ue_list_present ? 1 : 0;
  nof_ies += gnb_du_id_present ? 1 : 0;
  nof_ies += gnb_du_tnl_assoc_to_rem_list_present ? 1 : 0;
  nof_ies += transport_layer_address_info_present ? 1 : 0;
  nof_ies += coverage_mod_notif_present ? 1 : 0;
  nof_ies += gnb_du_name_present ? 1 : 0;
  nof_ies += extended_gnb_du_name_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (served_cells_to_add_list_present) {
    HANDLE_CODE(served_cells_to_add_list.pack(bref));
  }
  if (served_cells_to_modify_list_present) {
    HANDLE_CODE(served_cells_to_modify_list.pack(bref));
  }
  if (served_cells_to_delete_list_present) {
    HANDLE_CODE(served_cells_to_delete_list.pack(bref));
  }
  if (cells_status_list_present) {
    HANDLE_CODE(cells_status_list.pack(bref));
  }
  if (ded_si_delivery_needed_ue_list_present) {
    HANDLE_CODE(ded_si_delivery_needed_ue_list.pack(bref));
  }
  if (gnb_du_id_present) {
    HANDLE_CODE(gnb_du_id.pack(bref));
  }
  if (gnb_du_tnl_assoc_to_rem_list_present) {
    HANDLE_CODE(gnb_du_tnl_assoc_to_rem_list.pack(bref));
  }
  if (transport_layer_address_info_present) {
    HANDLE_CODE(transport_layer_address_info.pack(bref));
  }
  if (coverage_mod_notif_present) {
    HANDLE_CODE(coverage_mod_notif.pack(bref));
  }
  if (gnb_du_name_present) {
    HANDLE_CODE(gnb_du_name.pack(bref));
  }
  if (extended_gnb_du_name_present) {
    HANDLE_CODE(extended_gnb_du_name.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 58: {
        served_cells_to_add_list_present = true;
        served_cells_to_add_list.id      = id;
        HANDLE_CODE(served_cells_to_add_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(served_cells_to_add_list.value.unpack(bref));
        break;
      }
      case 62: {
        served_cells_to_modify_list_present = true;
        served_cells_to_modify_list.id      = id;
        HANDLE_CODE(served_cells_to_modify_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(served_cells_to_modify_list.value.unpack(bref));
        break;
      }
      case 60: {
        served_cells_to_delete_list_present = true;
        served_cells_to_delete_list.id      = id;
        HANDLE_CODE(served_cells_to_delete_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(served_cells_to_delete_list.value.unpack(bref));
        break;
      }
      case 89: {
        cells_status_list_present = true;
        cells_status_list.id      = id;
        HANDLE_CODE(cells_status_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_status_list.value.unpack(bref));
        break;
      }
      case 189: {
        ded_si_delivery_needed_ue_list_present = true;
        ded_si_delivery_needed_ue_list.id      = id;
        HANDLE_CODE(ded_si_delivery_needed_ue_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ded_si_delivery_needed_ue_list.value.unpack(bref));
        break;
      }
      case 42: {
        gnb_du_id_present = true;
        gnb_du_id.id      = id;
        HANDLE_CODE(gnb_du_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_id.value.unpack(bref));
        break;
      }
      case 228: {
        gnb_du_tnl_assoc_to_rem_list_present = true;
        gnb_du_tnl_assoc_to_rem_list.id      = id;
        HANDLE_CODE(gnb_du_tnl_assoc_to_rem_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_tnl_assoc_to_rem_list.value.unpack(bref));
        break;
      }
      case 254: {
        transport_layer_address_info_present = true;
        transport_layer_address_info.id      = id;
        HANDLE_CODE(transport_layer_address_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transport_layer_address_info.value.unpack(bref));
        break;
      }
      case 446: {
        coverage_mod_notif_present = true;
        coverage_mod_notif.id      = id;
        HANDLE_CODE(coverage_mod_notif.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(coverage_mod_notif.value.unpack(bref));
        break;
      }
      case 45: {
        gnb_du_name_present = true;
        gnb_du_name.id      = id;
        HANDLE_CODE(gnb_du_name.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_name.value.unpack(bref));
        break;
      }
      case 427: {
        extended_gnb_du_name_present = true;
        extended_gnb_du_name.id      = id;
        HANDLE_CODE(extended_gnb_du_name.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(extended_gnb_du_name.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_cfg_upd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (served_cells_to_add_list_present) {
    j.write_fieldname("");
    served_cells_to_add_list.to_json(j);
  }
  if (served_cells_to_modify_list_present) {
    j.write_fieldname("");
    served_cells_to_modify_list.to_json(j);
  }
  if (served_cells_to_delete_list_present) {
    j.write_fieldname("");
    served_cells_to_delete_list.to_json(j);
  }
  if (cells_status_list_present) {
    j.write_fieldname("");
    cells_status_list.to_json(j);
  }
  if (ded_si_delivery_needed_ue_list_present) {
    j.write_fieldname("");
    ded_si_delivery_needed_ue_list.to_json(j);
  }
  if (gnb_du_id_present) {
    j.write_fieldname("");
    gnb_du_id.to_json(j);
  }
  if (gnb_du_tnl_assoc_to_rem_list_present) {
    j.write_fieldname("");
    gnb_du_tnl_assoc_to_rem_list.to_json(j);
  }
  if (transport_layer_address_info_present) {
    j.write_fieldname("");
    transport_layer_address_info.to_json(j);
  }
  if (coverage_mod_notif_present) {
    j.write_fieldname("");
    coverage_mod_notif.to_json(j);
  }
  if (gnb_du_name_present) {
    j.write_fieldname("");
    gnb_du_name.to_json(j);
  }
  if (extended_gnb_du_name_present) {
    j.write_fieldname("");
    extended_gnb_du_name.to_json(j);
  }
  j.end_obj();
}

gnb_du_cfg_upd_ack_ies_container::gnb_du_cfg_upd_ack_ies_container() :
  transaction_id(78, crit_e::reject),
  cells_to_be_activ_list(3, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore),
  cells_to_be_deactiv_list(5, crit_e::reject),
  transport_layer_address_info(254, crit_e::ignore),
  ul_bh_non_up_traffic_map(287, crit_e::reject),
  bap_address(281, crit_e::ignore),
  cells_for_son_list(449, crit_e::ignore)
{
}
SRSASN_CODE gnb_du_cfg_upd_ack_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_to_be_activ_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += cells_to_be_deactiv_list_present ? 1 : 0;
  nof_ies += transport_layer_address_info_present ? 1 : 0;
  nof_ies += ul_bh_non_up_traffic_map_present ? 1 : 0;
  nof_ies += bap_address_present ? 1 : 0;
  nof_ies += cells_for_son_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (cells_to_be_activ_list_present) {
    HANDLE_CODE(cells_to_be_activ_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (cells_to_be_deactiv_list_present) {
    HANDLE_CODE(cells_to_be_deactiv_list.pack(bref));
  }
  if (transport_layer_address_info_present) {
    HANDLE_CODE(transport_layer_address_info.pack(bref));
  }
  if (ul_bh_non_up_traffic_map_present) {
    HANDLE_CODE(ul_bh_non_up_traffic_map.pack(bref));
  }
  if (bap_address_present) {
    HANDLE_CODE(bap_address.pack(bref));
  }
  if (cells_for_son_list_present) {
    HANDLE_CODE(cells_for_son_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_ack_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 3: {
        cells_to_be_activ_list_present = true;
        cells_to_be_activ_list.id      = id;
        HANDLE_CODE(cells_to_be_activ_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_activ_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 5: {
        cells_to_be_deactiv_list_present = true;
        cells_to_be_deactiv_list.id      = id;
        HANDLE_CODE(cells_to_be_deactiv_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_deactiv_list.value.unpack(bref));
        break;
      }
      case 254: {
        transport_layer_address_info_present = true;
        transport_layer_address_info.id      = id;
        HANDLE_CODE(transport_layer_address_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transport_layer_address_info.value.unpack(bref));
        break;
      }
      case 287: {
        ul_bh_non_up_traffic_map_present = true;
        ul_bh_non_up_traffic_map.id      = id;
        HANDLE_CODE(ul_bh_non_up_traffic_map.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_bh_non_up_traffic_map.value.unpack(bref));
        break;
      }
      case 281: {
        bap_address_present = true;
        bap_address.id      = id;
        HANDLE_CODE(bap_address.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bap_address.value.unpack(bref));
        break;
      }
      case 449: {
        cells_for_son_list_present = true;
        cells_for_son_list.id      = id;
        HANDLE_CODE(cells_for_son_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_for_son_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_cfg_upd_ack_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (cells_to_be_activ_list_present) {
    j.write_fieldname("");
    cells_to_be_activ_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (cells_to_be_deactiv_list_present) {
    j.write_fieldname("");
    cells_to_be_deactiv_list.to_json(j);
  }
  if (transport_layer_address_info_present) {
    j.write_fieldname("");
    transport_layer_address_info.to_json(j);
  }
  if (ul_bh_non_up_traffic_map_present) {
    j.write_fieldname("");
    ul_bh_non_up_traffic_map.to_json(j);
  }
  if (bap_address_present) {
    j.write_fieldname("");
    bap_address.to_json(j);
  }
  if (cells_for_son_list_present) {
    j.write_fieldname("");
    cells_for_son_list.to_json(j);
  }
  j.end_obj();
}

gnb_du_cfg_upd_fail_ies_container::gnb_du_cfg_upd_fail_ies_container() :
  transaction_id(78, crit_e::reject),
  cause(0, crit_e::ignore),
  time_to_wait(77, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE gnb_du_cfg_upd_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (time_to_wait_present) {
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        time_to_wait.id      = id;
        HANDLE_CODE(time_to_wait.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_cfg_upd_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_fieldname("");
    time_to_wait.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

gnb_du_res_cfg_ies_container::gnb_du_res_cfg_ies_container() :
  transaction_id(78, crit_e::reject),
  activ_cells_to_be_upd_list(288, crit_e::reject),
  child_nodes_list(289, crit_e::reject),
  neighbour_node_cells_list(533, crit_e::reject),
  serving_cells_list(534, crit_e::reject)
{
}
SRSASN_CODE gnb_du_res_cfg_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += activ_cells_to_be_upd_list_present ? 1 : 0;
  nof_ies += child_nodes_list_present ? 1 : 0;
  nof_ies += neighbour_node_cells_list_present ? 1 : 0;
  nof_ies += serving_cells_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (activ_cells_to_be_upd_list_present) {
    HANDLE_CODE(activ_cells_to_be_upd_list.pack(bref));
  }
  if (child_nodes_list_present) {
    HANDLE_CODE(child_nodes_list.pack(bref));
  }
  if (neighbour_node_cells_list_present) {
    HANDLE_CODE(neighbour_node_cells_list.pack(bref));
  }
  if (serving_cells_list_present) {
    HANDLE_CODE(serving_cells_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_cfg_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 288: {
        activ_cells_to_be_upd_list_present = true;
        activ_cells_to_be_upd_list.id      = id;
        HANDLE_CODE(activ_cells_to_be_upd_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(activ_cells_to_be_upd_list.value.unpack(bref));
        break;
      }
      case 289: {
        child_nodes_list_present = true;
        child_nodes_list.id      = id;
        HANDLE_CODE(child_nodes_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(child_nodes_list.value.unpack(bref));
        break;
      }
      case 533: {
        neighbour_node_cells_list_present = true;
        neighbour_node_cells_list.id      = id;
        HANDLE_CODE(neighbour_node_cells_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(neighbour_node_cells_list.value.unpack(bref));
        break;
      }
      case 534: {
        serving_cells_list_present = true;
        serving_cells_list.id      = id;
        HANDLE_CODE(serving_cells_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serving_cells_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_res_cfg_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (activ_cells_to_be_upd_list_present) {
    j.write_fieldname("");
    activ_cells_to_be_upd_list.to_json(j);
  }
  if (child_nodes_list_present) {
    j.write_fieldname("");
    child_nodes_list.to_json(j);
  }
  if (neighbour_node_cells_list_present) {
    j.write_fieldname("");
    neighbour_node_cells_list.to_json(j);
  }
  if (serving_cells_list_present) {
    j.write_fieldname("");
    serving_cells_list.to_json(j);
  }
  j.end_obj();
}

gnb_du_res_cfg_ack_ies_container::gnb_du_res_cfg_ack_ies_container() :
  transaction_id(78, crit_e::reject), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE gnb_du_res_cfg_ack_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_cfg_ack_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_res_cfg_ack_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

gnb_du_res_cfg_fail_ies_container::gnb_du_res_cfg_fail_ies_container() :
  transaction_id(78, crit_e::reject),
  cause(0, crit_e::ignore),
  time_to_wait(77, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE gnb_du_res_cfg_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (time_to_wait_present) {
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_cfg_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        time_to_wait.id      = id;
        HANDLE_CODE(time_to_wait.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_res_cfg_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_fieldname("");
    time_to_wait.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

gnb_du_res_coordination_request_ies_container::gnb_du_res_coordination_request_ies_container() :
  transaction_id(78, crit_e::reject),
  request_type(106, crit_e::reject),
  eutra_nr_cell_res_coordination_req_container(101, crit_e::reject),
  ignore_res_coordination_container(213, crit_e::reject)
{
}
SRSASN_CODE gnb_du_res_coordination_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += ignore_res_coordination_container_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(request_type.pack(bref));
  HANDLE_CODE(eutra_nr_cell_res_coordination_req_container.pack(bref));
  if (ignore_res_coordination_container_present) {
    HANDLE_CODE(ignore_res_coordination_container.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_coordination_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 106: {
        nof_mandatory_ies--;
        request_type.id = id;
        HANDLE_CODE(request_type.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(request_type.value.unpack(bref));
        break;
      }
      case 101: {
        nof_mandatory_ies--;
        eutra_nr_cell_res_coordination_req_container.id = id;
        HANDLE_CODE(eutra_nr_cell_res_coordination_req_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(eutra_nr_cell_res_coordination_req_container.value.unpack(bref));
        break;
      }
      case 213: {
        ignore_res_coordination_container_present = true;
        ignore_res_coordination_container.id      = id;
        HANDLE_CODE(ignore_res_coordination_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ignore_res_coordination_container.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_res_coordination_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  request_type.to_json(j);
  j.write_fieldname("");
  eutra_nr_cell_res_coordination_req_container.to_json(j);
  if (ignore_res_coordination_container_present) {
    j.write_fieldname("");
    ignore_res_coordination_container.to_json(j);
  }
  j.end_obj();
}

gnb_du_res_coordination_resp_ies_container::gnb_du_res_coordination_resp_ies_container() :
  transaction_id(78, crit_e::reject), eutra_nr_cell_res_coordination_req_ack_container(102, crit_e::reject)
{
}
SRSASN_CODE gnb_du_res_coordination_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(eutra_nr_cell_res_coordination_req_ack_container.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_coordination_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 102: {
        nof_mandatory_ies--;
        eutra_nr_cell_res_coordination_req_ack_container.id = id;
        HANDLE_CODE(eutra_nr_cell_res_coordination_req_ack_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(eutra_nr_cell_res_coordination_req_ack_container.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_res_coordination_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  eutra_nr_cell_res_coordination_req_ack_container.to_json(j);
  j.end_obj();
}

gnb_du_status_ind_ies_container::gnb_du_status_ind_ies_container() :
  transaction_id(78, crit_e::reject), gnb_du_overload_info(172, crit_e::reject), iab_congestion_ind(509, crit_e::ignore)
{
}
SRSASN_CODE gnb_du_status_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += iab_congestion_ind_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(gnb_du_overload_info.pack(bref));
  if (iab_congestion_ind_present) {
    HANDLE_CODE(iab_congestion_ind.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_status_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 172: {
        nof_mandatory_ies--;
        gnb_du_overload_info.id = id;
        HANDLE_CODE(gnb_du_overload_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_overload_info.value.unpack(bref));
        break;
      }
      case 509: {
        iab_congestion_ind_present = true;
        iab_congestion_ind.id      = id;
        HANDLE_CODE(iab_congestion_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(iab_congestion_ind.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_status_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  gnb_du_overload_info.to_json(j);
  if (iab_congestion_ind_present) {
    j.write_fieldname("");
    iab_congestion_ind.to_json(j);
  }
  j.end_obj();
}

iab_tnl_address_fail_ies_container::iab_tnl_address_fail_ies_container() :
  transaction_id(78, crit_e::reject),
  cause(0, crit_e::ignore),
  time_to_wait(77, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE iab_tnl_address_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (time_to_wait_present) {
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_tnl_address_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        time_to_wait.id      = id;
        HANDLE_CODE(time_to_wait.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void iab_tnl_address_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_fieldname("");
    time_to_wait.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

iab_tnl_address_request_ies_container::iab_tnl_address_request_ies_container() :
  transaction_id(78, crit_e::reject),
  ia_bv4_addresses_requested(297, crit_e::reject),
  iab_ip_v6_request_type(296, crit_e::reject),
  iab_tnl_addresses_to_rem_list(292, crit_e::reject),
  iab_tnl_addresses_exception(513, crit_e::reject)
{
}
SRSASN_CODE iab_tnl_address_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += ia_bv4_addresses_requested_present ? 1 : 0;
  nof_ies += iab_ip_v6_request_type_present ? 1 : 0;
  nof_ies += iab_tnl_addresses_to_rem_list_present ? 1 : 0;
  nof_ies += iab_tnl_addresses_exception_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (ia_bv4_addresses_requested_present) {
    HANDLE_CODE(ia_bv4_addresses_requested.pack(bref));
  }
  if (iab_ip_v6_request_type_present) {
    HANDLE_CODE(iab_ip_v6_request_type.pack(bref));
  }
  if (iab_tnl_addresses_to_rem_list_present) {
    HANDLE_CODE(iab_tnl_addresses_to_rem_list.pack(bref));
  }
  if (iab_tnl_addresses_exception_present) {
    HANDLE_CODE(iab_tnl_addresses_exception.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_tnl_address_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 297: {
        ia_bv4_addresses_requested_present = true;
        ia_bv4_addresses_requested.id      = id;
        HANDLE_CODE(ia_bv4_addresses_requested.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ia_bv4_addresses_requested.value.unpack(bref));
        break;
      }
      case 296: {
        iab_ip_v6_request_type_present = true;
        iab_ip_v6_request_type.id      = id;
        HANDLE_CODE(iab_ip_v6_request_type.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(iab_ip_v6_request_type.value.unpack(bref));
        break;
      }
      case 292: {
        iab_tnl_addresses_to_rem_list_present = true;
        iab_tnl_addresses_to_rem_list.id      = id;
        HANDLE_CODE(iab_tnl_addresses_to_rem_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(iab_tnl_addresses_to_rem_list.value.unpack(bref));
        break;
      }
      case 513: {
        iab_tnl_addresses_exception_present = true;
        iab_tnl_addresses_exception.id      = id;
        HANDLE_CODE(iab_tnl_addresses_exception.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(iab_tnl_addresses_exception.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void iab_tnl_address_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (ia_bv4_addresses_requested_present) {
    j.write_fieldname("");
    ia_bv4_addresses_requested.to_json(j);
  }
  if (iab_ip_v6_request_type_present) {
    j.write_fieldname("");
    iab_ip_v6_request_type.to_json(j);
  }
  if (iab_tnl_addresses_to_rem_list_present) {
    j.write_fieldname("");
    iab_tnl_addresses_to_rem_list.to_json(j);
  }
  if (iab_tnl_addresses_exception_present) {
    j.write_fieldname("");
    iab_tnl_addresses_exception.to_json(j);
  }
  j.end_obj();
}

iab_tnl_address_resp_ies_container::iab_tnl_address_resp_ies_container() :
  transaction_id(78, crit_e::reject), iab_allocated_tnl_address_list(294, crit_e::reject)
{
}
SRSASN_CODE iab_tnl_address_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(iab_allocated_tnl_address_list.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_tnl_address_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 294: {
        nof_mandatory_ies--;
        iab_allocated_tnl_address_list.id = id;
        HANDLE_CODE(iab_allocated_tnl_address_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(iab_allocated_tnl_address_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void iab_tnl_address_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  iab_allocated_tnl_address_list.to_json(j);
  j.end_obj();
}

iab_up_cfg_upd_fail_ies_container::iab_up_cfg_upd_fail_ies_container() :
  transaction_id(78, crit_e::reject),
  cause(0, crit_e::ignore),
  time_to_wait(77, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE iab_up_cfg_upd_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (time_to_wait_present) {
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_up_cfg_upd_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        time_to_wait.id      = id;
        HANDLE_CODE(time_to_wait.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void iab_up_cfg_upd_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_fieldname("");
    time_to_wait.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

iab_up_cfg_upd_request_ies_container::iab_up_cfg_upd_request_ies_container() :
  transaction_id(78, crit_e::reject),
  ul_up_tnl_info_to_upd_list(300, crit_e::ignore),
  ul_up_tnl_address_to_upd_list(302, crit_e::ignore)
{
}
SRSASN_CODE iab_up_cfg_upd_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += ul_up_tnl_info_to_upd_list_present ? 1 : 0;
  nof_ies += ul_up_tnl_address_to_upd_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (ul_up_tnl_info_to_upd_list_present) {
    HANDLE_CODE(ul_up_tnl_info_to_upd_list.pack(bref));
  }
  if (ul_up_tnl_address_to_upd_list_present) {
    HANDLE_CODE(ul_up_tnl_address_to_upd_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_up_cfg_upd_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 300: {
        ul_up_tnl_info_to_upd_list_present = true;
        ul_up_tnl_info_to_upd_list.id      = id;
        HANDLE_CODE(ul_up_tnl_info_to_upd_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_up_tnl_info_to_upd_list.value.unpack(bref));
        break;
      }
      case 302: {
        ul_up_tnl_address_to_upd_list_present = true;
        ul_up_tnl_address_to_upd_list.id      = id;
        HANDLE_CODE(ul_up_tnl_address_to_upd_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_up_tnl_address_to_upd_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void iab_up_cfg_upd_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (ul_up_tnl_info_to_upd_list_present) {
    j.write_fieldname("");
    ul_up_tnl_info_to_upd_list.to_json(j);
  }
  if (ul_up_tnl_address_to_upd_list_present) {
    j.write_fieldname("");
    ul_up_tnl_address_to_upd_list.to_json(j);
  }
  j.end_obj();
}

iab_up_cfg_upd_resp_ies_container::iab_up_cfg_upd_resp_ies_container() :
  transaction_id(78, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore),
  dl_up_tnl_address_to_upd_list(304, crit_e::reject)
{
}
SRSASN_CODE iab_up_cfg_upd_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += dl_up_tnl_address_to_upd_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (dl_up_tnl_address_to_upd_list_present) {
    HANDLE_CODE(dl_up_tnl_address_to_upd_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_up_cfg_upd_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 304: {
        dl_up_tnl_address_to_upd_list_present = true;
        dl_up_tnl_address_to_upd_list.id      = id;
        HANDLE_CODE(dl_up_tnl_address_to_upd_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(dl_up_tnl_address_to_upd_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void iab_up_cfg_upd_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (dl_up_tnl_address_to_upd_list_present) {
    j.write_fieldname("");
    dl_up_tnl_address_to_upd_list.to_json(j);
  }
  j.end_obj();
}

init_ul_rrc_msg_transfer_ies_container::init_ul_rrc_msg_transfer_ies_container() :
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  nr_cgi(111, crit_e::reject),
  c_rnti(95, crit_e::reject),
  rrc_container(50, crit_e::reject),
  du_to_cu_rrc_container(128, crit_e::reject),
  sul_access_ind(178, crit_e::ignore),
  transaction_id(78, crit_e::ignore),
  ran_ue_id(226, crit_e::ignore),
  rrc_container_rrc_setup_complete(241, crit_e::ignore),
  nr_red_cap_ue_ind(578, crit_e::ignore),
  sdt_info(592, crit_e::ignore),
  sidelink_relay_cfg(617, crit_e::ignore)
{
}
SRSASN_CODE init_ul_rrc_msg_transfer_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  nof_ies += du_to_cu_rrc_container_present ? 1 : 0;
  nof_ies += sul_access_ind_present ? 1 : 0;
  nof_ies += ran_ue_id_present ? 1 : 0;
  nof_ies += rrc_container_rrc_setup_complete_present ? 1 : 0;
  nof_ies += nr_red_cap_ue_ind_present ? 1 : 0;
  nof_ies += sdt_info_present ? 1 : 0;
  nof_ies += sidelink_relay_cfg_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(nr_cgi.pack(bref));
  HANDLE_CODE(c_rnti.pack(bref));
  HANDLE_CODE(rrc_container.pack(bref));
  if (du_to_cu_rrc_container_present) {
    HANDLE_CODE(du_to_cu_rrc_container.pack(bref));
  }
  if (sul_access_ind_present) {
    HANDLE_CODE(sul_access_ind.pack(bref));
  }
  HANDLE_CODE(transaction_id.pack(bref));
  if (ran_ue_id_present) {
    HANDLE_CODE(ran_ue_id.pack(bref));
  }
  if (rrc_container_rrc_setup_complete_present) {
    HANDLE_CODE(rrc_container_rrc_setup_complete.pack(bref));
  }
  if (nr_red_cap_ue_ind_present) {
    HANDLE_CODE(nr_red_cap_ue_ind.pack(bref));
  }
  if (sdt_info_present) {
    HANDLE_CODE(sdt_info.pack(bref));
  }
  if (sidelink_relay_cfg_present) {
    HANDLE_CODE(sidelink_relay_cfg.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE init_ul_rrc_msg_transfer_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 111: {
        nof_mandatory_ies--;
        nr_cgi.id = id;
        HANDLE_CODE(nr_cgi.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_cgi.value.unpack(bref));
        break;
      }
      case 95: {
        nof_mandatory_ies--;
        c_rnti.id = id;
        HANDLE_CODE(c_rnti.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(c_rnti.value.unpack(bref));
        break;
      }
      case 50: {
        nof_mandatory_ies--;
        rrc_container.id = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 128: {
        du_to_cu_rrc_container_present = true;
        du_to_cu_rrc_container.id      = id;
        HANDLE_CODE(du_to_cu_rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(du_to_cu_rrc_container.value.unpack(bref));
        break;
      }
      case 178: {
        sul_access_ind_present = true;
        sul_access_ind.id      = id;
        HANDLE_CODE(sul_access_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sul_access_ind.value.unpack(bref));
        break;
      }
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 226: {
        ran_ue_id_present = true;
        ran_ue_id.id      = id;
        HANDLE_CODE(ran_ue_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_id.value.unpack(bref));
        break;
      }
      case 241: {
        rrc_container_rrc_setup_complete_present = true;
        rrc_container_rrc_setup_complete.id      = id;
        HANDLE_CODE(rrc_container_rrc_setup_complete.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container_rrc_setup_complete.value.unpack(bref));
        break;
      }
      case 578: {
        nr_red_cap_ue_ind_present = true;
        nr_red_cap_ue_ind.id      = id;
        HANDLE_CODE(nr_red_cap_ue_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_red_cap_ue_ind.value.unpack(bref));
        break;
      }
      case 592: {
        sdt_info_present = true;
        sdt_info.id      = id;
        HANDLE_CODE(sdt_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sdt_info.value.unpack(bref));
        break;
      }
      case 617: {
        sidelink_relay_cfg_present = true;
        sidelink_relay_cfg.id      = id;
        HANDLE_CODE(sidelink_relay_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sidelink_relay_cfg.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void init_ul_rrc_msg_transfer_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  nr_cgi.to_json(j);
  j.write_fieldname("");
  c_rnti.to_json(j);
  j.write_fieldname("");
  rrc_container.to_json(j);
  if (du_to_cu_rrc_container_present) {
    j.write_fieldname("");
    du_to_cu_rrc_container.to_json(j);
  }
  if (sul_access_ind_present) {
    j.write_fieldname("");
    sul_access_ind.to_json(j);
  }
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (ran_ue_id_present) {
    j.write_fieldname("");
    ran_ue_id.to_json(j);
  }
  if (rrc_container_rrc_setup_complete_present) {
    j.write_fieldname("");
    rrc_container_rrc_setup_complete.to_json(j);
  }
  if (nr_red_cap_ue_ind_present) {
    j.write_fieldname("");
    nr_red_cap_ue_ind.to_json(j);
  }
  if (sdt_info_present) {
    j.write_fieldname("");
    sdt_info.to_json(j);
  }
  if (sidelink_relay_cfg_present) {
    j.write_fieldname("");
    sidelink_relay_cfg.to_json(j);
  }
  j.end_obj();
}

meas_activation_ies_container::meas_activation_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  activation_request_type(649, crit_e::reject),
  prs_meas_info_list(570, crit_e::ignore)
{
}
SRSASN_CODE meas_activation_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += prs_meas_info_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(activation_request_type.pack(bref));
  if (prs_meas_info_list_present) {
    HANDLE_CODE(prs_meas_info_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_activation_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 649: {
        nof_mandatory_ies--;
        activation_request_type.id = id;
        HANDLE_CODE(activation_request_type.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(activation_request_type.value.unpack(bref));
        break;
      }
      case 570: {
        prs_meas_info_list_present = true;
        prs_meas_info_list.id      = id;
        HANDLE_CODE(prs_meas_info_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(prs_meas_info_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void meas_activation_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  activation_request_type.to_json(j);
  if (prs_meas_info_list_present) {
    j.write_fieldname("");
    prs_meas_info_list.to_json(j);
  }
  j.end_obj();
}

meas_precfg_confirm_ies_container::meas_precfg_confirm_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  pos_meas_gap_pre_cfg_list(650, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE meas_precfg_confirm_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += pos_meas_gap_pre_cfg_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (pos_meas_gap_pre_cfg_list_present) {
    HANDLE_CODE(pos_meas_gap_pre_cfg_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_precfg_confirm_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 650: {
        pos_meas_gap_pre_cfg_list_present = true;
        pos_meas_gap_pre_cfg_list.id      = id;
        HANDLE_CODE(pos_meas_gap_pre_cfg_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_meas_gap_pre_cfg_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void meas_precfg_confirm_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (pos_meas_gap_pre_cfg_list_present) {
    j.write_fieldname("");
    pos_meas_gap_pre_cfg_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

meas_precfg_refuse_ies_container::meas_precfg_refuse_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE meas_precfg_refuse_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_precfg_refuse_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void meas_precfg_refuse_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

meas_precfg_required_ies_container::meas_precfg_required_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject), gnb_du_ue_f1ap_id(41, crit_e::reject), trp_prs_info_list(569, crit_e::ignore)
{
}
SRSASN_CODE meas_precfg_required_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(trp_prs_info_list.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_precfg_required_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 569: {
        nof_mandatory_ies--;
        trp_prs_info_list.id = id;
        HANDLE_CODE(trp_prs_info_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trp_prs_info_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void meas_precfg_required_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  trp_prs_info_list.to_json(j);
  j.end_obj();
}

multicast_context_mod_fail_ies_container::multicast_context_mod_fail_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::reject),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE multicast_context_mod_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_mod_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_mod_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

multicast_context_mod_request_ies_container::multicast_context_mod_request_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::reject),
  mbs_service_area(481, crit_e::reject),
  multicast_m_rbs_to_be_setup_mod_list(500, crit_e::reject),
  multicast_m_rbs_to_be_modified_list(494, crit_e::reject),
  multicast_m_rbs_to_be_released_list(496, crit_e::reject)
{
}
SRSASN_CODE multicast_context_mod_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += mbs_service_area_present ? 1 : 0;
  nof_ies += multicast_m_rbs_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += multicast_m_rbs_to_be_modified_list_present ? 1 : 0;
  nof_ies += multicast_m_rbs_to_be_released_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  if (mbs_service_area_present) {
    HANDLE_CODE(mbs_service_area.pack(bref));
  }
  if (multicast_m_rbs_to_be_setup_mod_list_present) {
    HANDLE_CODE(multicast_m_rbs_to_be_setup_mod_list.pack(bref));
  }
  if (multicast_m_rbs_to_be_modified_list_present) {
    HANDLE_CODE(multicast_m_rbs_to_be_modified_list.pack(bref));
  }
  if (multicast_m_rbs_to_be_released_list_present) {
    HANDLE_CODE(multicast_m_rbs_to_be_released_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_mod_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 481: {
        mbs_service_area_present = true;
        mbs_service_area.id      = id;
        HANDLE_CODE(mbs_service_area.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_service_area.value.unpack(bref));
        break;
      }
      case 500: {
        multicast_m_rbs_to_be_setup_mod_list_present = true;
        multicast_m_rbs_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(multicast_m_rbs_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_m_rbs_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 494: {
        multicast_m_rbs_to_be_modified_list_present = true;
        multicast_m_rbs_to_be_modified_list.id      = id;
        HANDLE_CODE(multicast_m_rbs_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_m_rbs_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 496: {
        multicast_m_rbs_to_be_released_list_present = true;
        multicast_m_rbs_to_be_released_list.id      = id;
        HANDLE_CODE(multicast_m_rbs_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_m_rbs_to_be_released_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_mod_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  if (mbs_service_area_present) {
    j.write_fieldname("");
    mbs_service_area.to_json(j);
  }
  if (multicast_m_rbs_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    multicast_m_rbs_to_be_setup_mod_list.to_json(j);
  }
  if (multicast_m_rbs_to_be_modified_list_present) {
    j.write_fieldname("");
    multicast_m_rbs_to_be_modified_list.to_json(j);
  }
  if (multicast_m_rbs_to_be_released_list_present) {
    j.write_fieldname("");
    multicast_m_rbs_to_be_released_list.to_json(j);
  }
  j.end_obj();
}

multicast_context_mod_resp_ies_container::multicast_context_mod_resp_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::reject),
  multicast_m_rbs_setup_mod_list(492, crit_e::reject),
  multicast_m_rbs_failed_to_be_setup_mod_list(486, crit_e::ignore),
  multicast_m_rbs_modified_list(488, crit_e::reject),
  multicast_m_rbs_failed_to_be_modified_list(482, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE multicast_context_mod_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += multicast_m_rbs_setup_mod_list_present ? 1 : 0;
  nof_ies += multicast_m_rbs_failed_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += multicast_m_rbs_modified_list_present ? 1 : 0;
  nof_ies += multicast_m_rbs_failed_to_be_modified_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  if (multicast_m_rbs_setup_mod_list_present) {
    HANDLE_CODE(multicast_m_rbs_setup_mod_list.pack(bref));
  }
  if (multicast_m_rbs_failed_to_be_setup_mod_list_present) {
    HANDLE_CODE(multicast_m_rbs_failed_to_be_setup_mod_list.pack(bref));
  }
  if (multicast_m_rbs_modified_list_present) {
    HANDLE_CODE(multicast_m_rbs_modified_list.pack(bref));
  }
  if (multicast_m_rbs_failed_to_be_modified_list_present) {
    HANDLE_CODE(multicast_m_rbs_failed_to_be_modified_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_mod_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 492: {
        multicast_m_rbs_setup_mod_list_present = true;
        multicast_m_rbs_setup_mod_list.id      = id;
        HANDLE_CODE(multicast_m_rbs_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_m_rbs_setup_mod_list.value.unpack(bref));
        break;
      }
      case 486: {
        multicast_m_rbs_failed_to_be_setup_mod_list_present = true;
        multicast_m_rbs_failed_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(multicast_m_rbs_failed_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_m_rbs_failed_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 488: {
        multicast_m_rbs_modified_list_present = true;
        multicast_m_rbs_modified_list.id      = id;
        HANDLE_CODE(multicast_m_rbs_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_m_rbs_modified_list.value.unpack(bref));
        break;
      }
      case 482: {
        multicast_m_rbs_failed_to_be_modified_list_present = true;
        multicast_m_rbs_failed_to_be_modified_list.id      = id;
        HANDLE_CODE(multicast_m_rbs_failed_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_m_rbs_failed_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_mod_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  if (multicast_m_rbs_setup_mod_list_present) {
    j.write_fieldname("");
    multicast_m_rbs_setup_mod_list.to_json(j);
  }
  if (multicast_m_rbs_failed_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    multicast_m_rbs_failed_to_be_setup_mod_list.to_json(j);
  }
  if (multicast_m_rbs_modified_list_present) {
    j.write_fieldname("");
    multicast_m_rbs_modified_list.to_json(j);
  }
  if (multicast_m_rbs_failed_to_be_modified_list_present) {
    j.write_fieldname("");
    multicast_m_rbs_failed_to_be_modified_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

multicast_context_release_cmd_ies_container::multicast_context_release_cmd_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject), gnb_du_mbs_f1ap_id(452, crit_e::reject), cause(0, crit_e::ignore)
{
}
SRSASN_CODE multicast_context_release_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_release_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_release_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  j.end_obj();
}

multicast_context_release_complete_ies_container::multicast_context_release_complete_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject), gnb_du_mbs_f1ap_id(452, crit_e::reject), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE multicast_context_release_complete_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_release_complete_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_release_complete_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

multicast_context_release_request_ies_container::multicast_context_release_request_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject), gnb_du_mbs_f1ap_id(452, crit_e::reject), cause(0, crit_e::ignore)
{
}
SRSASN_CODE multicast_context_release_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_release_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_release_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  j.end_obj();
}

multicast_context_setup_fail_ies_container::multicast_context_setup_fail_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::ignore),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE multicast_context_setup_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += gnb_du_mbs_f1ap_id_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  if (gnb_du_mbs_f1ap_id_present) {
    HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  }
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_setup_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        gnb_du_mbs_f1ap_id_present = true;
        gnb_du_mbs_f1ap_id.id      = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_setup_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  if (gnb_du_mbs_f1ap_id_present) {
    j.write_fieldname("");
    gnb_du_mbs_f1ap_id.to_json(j);
  }
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

multicast_context_setup_request_ies_container::multicast_context_setup_request_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  mbs_session_id(455, crit_e::reject),
  mbs_service_area(481, crit_e::reject),
  snssai(456, crit_e::reject),
  multicast_m_rbs_to_be_setup_list(498, crit_e::reject)
{
}
SRSASN_CODE multicast_context_setup_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += mbs_service_area_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(mbs_session_id.pack(bref));
  if (mbs_service_area_present) {
    HANDLE_CODE(mbs_service_area.pack(bref));
  }
  HANDLE_CODE(snssai.pack(bref));
  HANDLE_CODE(multicast_m_rbs_to_be_setup_list.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_setup_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 455: {
        nof_mandatory_ies--;
        mbs_session_id.id = id;
        HANDLE_CODE(mbs_session_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_session_id.value.unpack(bref));
        break;
      }
      case 481: {
        mbs_service_area_present = true;
        mbs_service_area.id      = id;
        HANDLE_CODE(mbs_service_area.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_service_area.value.unpack(bref));
        break;
      }
      case 456: {
        nof_mandatory_ies--;
        snssai.id = id;
        HANDLE_CODE(snssai.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(snssai.value.unpack(bref));
        break;
      }
      case 498: {
        nof_mandatory_ies--;
        multicast_m_rbs_to_be_setup_list.id = id;
        HANDLE_CODE(multicast_m_rbs_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_m_rbs_to_be_setup_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_setup_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  mbs_session_id.to_json(j);
  if (mbs_service_area_present) {
    j.write_fieldname("");
    mbs_service_area.to_json(j);
  }
  j.write_fieldname("");
  snssai.to_json(j);
  j.write_fieldname("");
  multicast_m_rbs_to_be_setup_list.to_json(j);
  j.end_obj();
}

multicast_context_setup_resp_ies_container::multicast_context_setup_resp_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::reject),
  multicast_m_rbs_setup_list(490, crit_e::reject),
  multicast_m_rbs_failed_to_be_setup_list(484, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE multicast_context_setup_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += multicast_m_rbs_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(multicast_m_rbs_setup_list.pack(bref));
  if (multicast_m_rbs_failed_to_be_setup_list_present) {
    HANDLE_CODE(multicast_m_rbs_failed_to_be_setup_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_setup_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 490: {
        nof_mandatory_ies--;
        multicast_m_rbs_setup_list.id = id;
        HANDLE_CODE(multicast_m_rbs_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_m_rbs_setup_list.value.unpack(bref));
        break;
      }
      case 484: {
        multicast_m_rbs_failed_to_be_setup_list_present = true;
        multicast_m_rbs_failed_to_be_setup_list.id      = id;
        HANDLE_CODE(multicast_m_rbs_failed_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_m_rbs_failed_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_setup_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  multicast_m_rbs_setup_list.to_json(j);
  if (multicast_m_rbs_failed_to_be_setup_list_present) {
    j.write_fieldname("");
    multicast_m_rbs_failed_to_be_setup_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

multicast_distribution_release_cmd_ies_container::multicast_distribution_release_cmd_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::reject),
  mbs_multicast_f1_u_context_descriptor(502, crit_e::reject),
  cause(0, crit_e::ignore)
{
}
SRSASN_CODE multicast_distribution_release_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.pack(bref));
  HANDLE_CODE(cause.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_release_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 502: {
        nof_mandatory_ies--;
        mbs_multicast_f1_u_context_descriptor.id = id;
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_distribution_release_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  mbs_multicast_f1_u_context_descriptor.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  j.end_obj();
}

multicast_distribution_release_complete_ies_container::multicast_distribution_release_complete_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::reject),
  mbs_multicast_f1_u_context_descriptor(502, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE multicast_distribution_release_complete_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_release_complete_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 502: {
        nof_mandatory_ies--;
        mbs_multicast_f1_u_context_descriptor.id = id;
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_distribution_release_complete_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  mbs_multicast_f1_u_context_descriptor.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

multicast_distribution_setup_fail_ies_container::multicast_distribution_setup_fail_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::ignore),
  mbs_multicast_f1_u_context_descriptor(502, crit_e::reject),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE multicast_distribution_setup_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += gnb_du_mbs_f1ap_id_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  if (gnb_du_mbs_f1ap_id_present) {
    HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  }
  HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_setup_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        gnb_du_mbs_f1ap_id_present = true;
        gnb_du_mbs_f1ap_id.id      = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 502: {
        nof_mandatory_ies--;
        mbs_multicast_f1_u_context_descriptor.id = id;
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_distribution_setup_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  if (gnb_du_mbs_f1ap_id_present) {
    j.write_fieldname("");
    gnb_du_mbs_f1ap_id.to_json(j);
  }
  j.write_fieldname("");
  mbs_multicast_f1_u_context_descriptor.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

multicast_distribution_setup_request_ies_container::multicast_distribution_setup_request_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::reject),
  mbs_multicast_f1_u_context_descriptor(502, crit_e::reject),
  multicast_f1_u_context_to_be_setup_list(503, crit_e::reject)
{
}
SRSASN_CODE multicast_distribution_setup_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.pack(bref));
  HANDLE_CODE(multicast_f1_u_context_to_be_setup_list.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_setup_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 502: {
        nof_mandatory_ies--;
        mbs_multicast_f1_u_context_descriptor.id = id;
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.value.unpack(bref));
        break;
      }
      case 503: {
        nof_mandatory_ies--;
        multicast_f1_u_context_to_be_setup_list.id = id;
        HANDLE_CODE(multicast_f1_u_context_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_f1_u_context_to_be_setup_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_distribution_setup_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  mbs_multicast_f1_u_context_descriptor.to_json(j);
  j.write_fieldname("");
  multicast_f1_u_context_to_be_setup_list.to_json(j);
  j.end_obj();
}

multicast_distribution_setup_resp_ies_container::multicast_distribution_setup_resp_ies_container() :
  gnb_cu_mbs_f1ap_id(451, crit_e::reject),
  gnb_du_mbs_f1ap_id(452, crit_e::reject),
  mbs_multicast_f1_u_context_descriptor(502, crit_e::reject),
  multicast_f1_u_context_setup_list(505, crit_e::reject),
  multicast_f1_u_context_failed_to_be_setup_list(507, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore),
  multicast_f1_u_context_ref_cu(681, crit_e::reject)
{
}
SRSASN_CODE multicast_distribution_setup_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  nof_ies += multicast_f1_u_context_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_mbs_f1ap_id.pack(bref));
  HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.pack(bref));
  HANDLE_CODE(multicast_f1_u_context_setup_list.pack(bref));
  if (multicast_f1_u_context_failed_to_be_setup_list_present) {
    HANDLE_CODE(multicast_f1_u_context_failed_to_be_setup_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  HANDLE_CODE(multicast_f1_u_context_ref_cu.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_setup_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        gnb_cu_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        gnb_du_mbs_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_mbs_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_mbs_f1ap_id.value.unpack(bref));
        break;
      }
      case 502: {
        nof_mandatory_ies--;
        mbs_multicast_f1_u_context_descriptor.id = id;
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.value.unpack(bref));
        break;
      }
      case 505: {
        nof_mandatory_ies--;
        multicast_f1_u_context_setup_list.id = id;
        HANDLE_CODE(multicast_f1_u_context_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_f1_u_context_setup_list.value.unpack(bref));
        break;
      }
      case 507: {
        multicast_f1_u_context_failed_to_be_setup_list_present = true;
        multicast_f1_u_context_failed_to_be_setup_list.id      = id;
        HANDLE_CODE(multicast_f1_u_context_failed_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_f1_u_context_failed_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 681: {
        nof_mandatory_ies--;
        multicast_f1_u_context_ref_cu.id = id;
        HANDLE_CODE(multicast_f1_u_context_ref_cu.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_f1_u_context_ref_cu.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_distribution_setup_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_mbs_f1ap_id.to_json(j);
  j.write_fieldname("");
  mbs_multicast_f1_u_context_descriptor.to_json(j);
  j.write_fieldname("");
  multicast_f1_u_context_setup_list.to_json(j);
  if (multicast_f1_u_context_failed_to_be_setup_list_present) {
    j.write_fieldname("");
    multicast_f1_u_context_failed_to_be_setup_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.write_fieldname("");
  multicast_f1_u_context_ref_cu.to_json(j);
  j.end_obj();
}

multicast_group_paging_ies_container::multicast_group_paging_ies_container() :
  mbs_session_id(455, crit_e::reject),
  ue_id_list_for_paging_list(479, crit_e::ignore),
  mc_paging_cell_list(687, crit_e::ignore)
{
}
SRSASN_CODE multicast_group_paging_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += ue_id_list_for_paging_list_present ? 1 : 0;
  nof_ies += mc_paging_cell_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(mbs_session_id.pack(bref));
  if (ue_id_list_for_paging_list_present) {
    HANDLE_CODE(ue_id_list_for_paging_list.pack(bref));
  }
  if (mc_paging_cell_list_present) {
    HANDLE_CODE(mc_paging_cell_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_group_paging_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 455: {
        nof_mandatory_ies--;
        mbs_session_id.id = id;
        HANDLE_CODE(mbs_session_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_session_id.value.unpack(bref));
        break;
      }
      case 479: {
        ue_id_list_for_paging_list_present = true;
        ue_id_list_for_paging_list.id      = id;
        HANDLE_CODE(ue_id_list_for_paging_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_id_list_for_paging_list.value.unpack(bref));
        break;
      }
      case 687: {
        mc_paging_cell_list_present = true;
        mc_paging_cell_list.id      = id;
        HANDLE_CODE(mc_paging_cell_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mc_paging_cell_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_group_paging_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  mbs_session_id.to_json(j);
  if (ue_id_list_for_paging_list_present) {
    j.write_fieldname("");
    ue_id_list_for_paging_list.to_json(j);
  }
  if (mc_paging_cell_list_present) {
    j.write_fieldname("");
    mc_paging_cell_list.to_json(j);
  }
  j.end_obj();
}

network_access_rate_reduction_ies_container::network_access_rate_reduction_ies_container() :
  transaction_id(78, crit_e::reject), uac_assist_info(225, crit_e::reject)
{
}
SRSASN_CODE network_access_rate_reduction_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(uac_assist_info.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE network_access_rate_reduction_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 225: {
        nof_mandatory_ies--;
        uac_assist_info.id = id;
        HANDLE_CODE(uac_assist_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uac_assist_info.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void network_access_rate_reduction_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  uac_assist_info.to_json(j);
  j.end_obj();
}

notify_ies_container::notify_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject), gnb_du_ue_f1ap_id(41, crit_e::reject), drb_notify_list(137, crit_e::reject)
{
}
SRSASN_CODE notify_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(drb_notify_list.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE notify_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 137: {
        nof_mandatory_ies--;
        drb_notify_list.id = id;
        HANDLE_CODE(drb_notify_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drb_notify_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void notify_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  drb_notify_list.to_json(j);
  j.end_obj();
}

pdc_meas_fail_ind_ies_container::pdc_meas_fail_ind_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  ran_ue_pdc_meas_id(546, crit_e::ignore),
  cause(0, crit_e::ignore)
{
}
SRSASN_CODE pdc_meas_fail_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(ran_ue_pdc_meas_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_fail_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 546: {
        nof_mandatory_ies--;
        ran_ue_pdc_meas_id.id = id;
        HANDLE_CODE(ran_ue_pdc_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_pdc_meas_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pdc_meas_fail_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  ran_ue_pdc_meas_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  j.end_obj();
}

pdc_meas_initiation_fail_ies_container::pdc_meas_initiation_fail_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  ran_ue_pdc_meas_id(546, crit_e::ignore),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE pdc_meas_initiation_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(ran_ue_pdc_meas_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_initiation_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 546: {
        nof_mandatory_ies--;
        ran_ue_pdc_meas_id.id = id;
        HANDLE_CODE(ran_ue_pdc_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_pdc_meas_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pdc_meas_initiation_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  ran_ue_pdc_meas_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

pdc_meas_initiation_request_ies_container::pdc_meas_initiation_request_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  ran_ue_pdc_meas_id(546, crit_e::reject),
  pdc_report_type(545, crit_e::reject),
  pdc_meas_periodicity(541, crit_e::reject),
  pdc_meas_quantities(542, crit_e::reject)
{
}
SRSASN_CODE pdc_meas_initiation_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  nof_ies += pdc_meas_periodicity_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(ran_ue_pdc_meas_id.pack(bref));
  HANDLE_CODE(pdc_report_type.pack(bref));
  if (pdc_meas_periodicity_present) {
    HANDLE_CODE(pdc_meas_periodicity.pack(bref));
  }
  HANDLE_CODE(pdc_meas_quantities.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_initiation_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 546: {
        nof_mandatory_ies--;
        ran_ue_pdc_meas_id.id = id;
        HANDLE_CODE(ran_ue_pdc_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_pdc_meas_id.value.unpack(bref));
        break;
      }
      case 545: {
        nof_mandatory_ies--;
        pdc_report_type.id = id;
        HANDLE_CODE(pdc_report_type.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pdc_report_type.value.unpack(bref));
        break;
      }
      case 541: {
        pdc_meas_periodicity_present = true;
        pdc_meas_periodicity.id      = id;
        HANDLE_CODE(pdc_meas_periodicity.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pdc_meas_periodicity.value.unpack(bref));
        break;
      }
      case 542: {
        nof_mandatory_ies--;
        pdc_meas_quantities.id = id;
        HANDLE_CODE(pdc_meas_quantities.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pdc_meas_quantities.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pdc_meas_initiation_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  ran_ue_pdc_meas_id.to_json(j);
  j.write_fieldname("");
  pdc_report_type.to_json(j);
  if (pdc_meas_periodicity_present) {
    j.write_fieldname("");
    pdc_meas_periodicity.to_json(j);
  }
  j.write_fieldname("");
  pdc_meas_quantities.to_json(j);
  j.end_obj();
}

pdc_meas_initiation_resp_ies_container::pdc_meas_initiation_resp_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  ran_ue_pdc_meas_id(546, crit_e::reject),
  pdc_meas_result(544, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE pdc_meas_initiation_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += pdc_meas_result_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(ran_ue_pdc_meas_id.pack(bref));
  if (pdc_meas_result_present) {
    HANDLE_CODE(pdc_meas_result.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_initiation_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 546: {
        nof_mandatory_ies--;
        ran_ue_pdc_meas_id.id = id;
        HANDLE_CODE(ran_ue_pdc_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_pdc_meas_id.value.unpack(bref));
        break;
      }
      case 544: {
        pdc_meas_result_present = true;
        pdc_meas_result.id      = id;
        HANDLE_CODE(pdc_meas_result.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pdc_meas_result.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pdc_meas_initiation_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  ran_ue_pdc_meas_id.to_json(j);
  if (pdc_meas_result_present) {
    j.write_fieldname("");
    pdc_meas_result.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

pdc_meas_report_ies_container::pdc_meas_report_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  ran_ue_pdc_meas_id(546, crit_e::reject),
  pdc_meas_result(544, crit_e::ignore)
{
}
SRSASN_CODE pdc_meas_report_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(ran_ue_pdc_meas_id.pack(bref));
  HANDLE_CODE(pdc_meas_result.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_report_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 546: {
        nof_mandatory_ies--;
        ran_ue_pdc_meas_id.id = id;
        HANDLE_CODE(ran_ue_pdc_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_pdc_meas_id.value.unpack(bref));
        break;
      }
      case 544: {
        nof_mandatory_ies--;
        pdc_meas_result.id = id;
        HANDLE_CODE(pdc_meas_result.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pdc_meas_result.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pdc_meas_report_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  ran_ue_pdc_meas_id.to_json(j);
  j.write_fieldname("");
  pdc_meas_result.to_json(j);
  j.end_obj();
}

pdc_meas_termination_cmd_ies_container::pdc_meas_termination_cmd_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject), gnb_du_ue_f1ap_id(41, crit_e::reject), ran_ue_pdc_meas_id(546, crit_e::ignore)
{
}
SRSASN_CODE pdc_meas_termination_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(ran_ue_pdc_meas_id.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_termination_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 546: {
        nof_mandatory_ies--;
        ran_ue_pdc_meas_id.id = id;
        HANDLE_CODE(ran_ue_pdc_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_pdc_meas_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pdc_meas_termination_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  ran_ue_pdc_meas_id.to_json(j);
  j.end_obj();
}

prs_cfg_fail_ies_container::prs_cfg_fail_ies_container() :
  transaction_id(78, crit_e::reject), cause(0, crit_e::ignore), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE prs_cfg_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_cfg_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void prs_cfg_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

prs_cfg_request_ies_container::prs_cfg_request_ies_container() :
  prs_cfg_request_type(571, crit_e::reject), prstrp_list(549, crit_e::ignore)
{
}
SRSASN_CODE prs_cfg_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(prs_cfg_request_type.pack(bref));
  HANDLE_CODE(prstrp_list.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_cfg_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 571: {
        nof_mandatory_ies--;
        prs_cfg_request_type.id = id;
        HANDLE_CODE(prs_cfg_request_type.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(prs_cfg_request_type.value.unpack(bref));
        break;
      }
      case 549: {
        nof_mandatory_ies--;
        prstrp_list.id = id;
        HANDLE_CODE(prstrp_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(prstrp_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void prs_cfg_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  prs_cfg_request_type.to_json(j);
  j.write_fieldname("");
  prstrp_list.to_json(j);
  j.end_obj();
}

prs_cfg_resp_ies_container::prs_cfg_resp_ies_container() :
  transaction_id(78, crit_e::reject), prs_tx_trp_list(550, crit_e::ignore), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE prs_cfg_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += prs_tx_trp_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (prs_tx_trp_list_present) {
    HANDLE_CODE(prs_tx_trp_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_cfg_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 550: {
        prs_tx_trp_list_present = true;
        prs_tx_trp_list.id      = id;
        HANDLE_CODE(prs_tx_trp_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(prs_tx_trp_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void prs_cfg_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (prs_tx_trp_list_present) {
    j.write_fieldname("");
    prs_tx_trp_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

pws_cancel_request_ies_container::pws_cancel_request_ies_container() :
  transaction_id(78, crit_e::reject),
  numof_broadcast_request(142, crit_e::reject),
  broadcast_to_be_cancelled_list(148, crit_e::reject),
  cancel_all_warning_msgs_ind(157, crit_e::reject),
  notif_info(220, crit_e::reject)
{
}
SRSASN_CODE pws_cancel_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += broadcast_to_be_cancelled_list_present ? 1 : 0;
  nof_ies += cancel_all_warning_msgs_ind_present ? 1 : 0;
  nof_ies += notif_info_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(numof_broadcast_request.pack(bref));
  if (broadcast_to_be_cancelled_list_present) {
    HANDLE_CODE(broadcast_to_be_cancelled_list.pack(bref));
  }
  if (cancel_all_warning_msgs_ind_present) {
    HANDLE_CODE(cancel_all_warning_msgs_ind.pack(bref));
  }
  if (notif_info_present) {
    HANDLE_CODE(notif_info.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_cancel_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 142: {
        nof_mandatory_ies--;
        numof_broadcast_request.id = id;
        HANDLE_CODE(numof_broadcast_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(numof_broadcast_request.value.unpack(bref));
        break;
      }
      case 148: {
        broadcast_to_be_cancelled_list_present = true;
        broadcast_to_be_cancelled_list.id      = id;
        HANDLE_CODE(broadcast_to_be_cancelled_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_to_be_cancelled_list.value.unpack(bref));
        break;
      }
      case 157: {
        cancel_all_warning_msgs_ind_present = true;
        cancel_all_warning_msgs_ind.id      = id;
        HANDLE_CODE(cancel_all_warning_msgs_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cancel_all_warning_msgs_ind.value.unpack(bref));
        break;
      }
      case 220: {
        notif_info_present = true;
        notif_info.id      = id;
        HANDLE_CODE(notif_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(notif_info.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pws_cancel_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  numof_broadcast_request.to_json(j);
  if (broadcast_to_be_cancelled_list_present) {
    j.write_fieldname("");
    broadcast_to_be_cancelled_list.to_json(j);
  }
  if (cancel_all_warning_msgs_ind_present) {
    j.write_fieldname("");
    cancel_all_warning_msgs_ind.to_json(j);
  }
  if (notif_info_present) {
    j.write_fieldname("");
    notif_info.to_json(j);
  }
  j.end_obj();
}

pws_cancel_resp_ies_container::pws_cancel_resp_ies_container() :
  transaction_id(78, crit_e::reject),
  cells_broadcast_cancelled_list(150, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE pws_cancel_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_broadcast_cancelled_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (cells_broadcast_cancelled_list_present) {
    HANDLE_CODE(cells_broadcast_cancelled_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_cancel_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 150: {
        cells_broadcast_cancelled_list_present = true;
        cells_broadcast_cancelled_list.id      = id;
        HANDLE_CODE(cells_broadcast_cancelled_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_broadcast_cancelled_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pws_cancel_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (cells_broadcast_cancelled_list_present) {
    j.write_fieldname("");
    cells_broadcast_cancelled_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

pws_fail_ind_ies_container::pws_fail_ind_ies_container() :
  transaction_id(78, crit_e::reject), pws_failed_nr_cgi_list(154, crit_e::reject)
{
}
SRSASN_CODE pws_fail_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += pws_failed_nr_cgi_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (pws_failed_nr_cgi_list_present) {
    HANDLE_CODE(pws_failed_nr_cgi_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_fail_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 154: {
        pws_failed_nr_cgi_list_present = true;
        pws_failed_nr_cgi_list.id      = id;
        HANDLE_CODE(pws_failed_nr_cgi_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pws_failed_nr_cgi_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pws_fail_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (pws_failed_nr_cgi_list_present) {
    j.write_fieldname("");
    pws_failed_nr_cgi_list.to_json(j);
  }
  j.end_obj();
}

pws_restart_ind_ies_container::pws_restart_ind_ies_container() :
  transaction_id(78, crit_e::reject), nr_cgi_list_for_restart_list(152, crit_e::reject)
{
}
SRSASN_CODE pws_restart_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(nr_cgi_list_for_restart_list.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_restart_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 152: {
        nof_mandatory_ies--;
        nr_cgi_list_for_restart_list.id = id;
        HANDLE_CODE(nr_cgi_list_for_restart_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_cgi_list_for_restart_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pws_restart_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  nr_cgi_list_for_restart_list.to_json(j);
  j.end_obj();
}

paging_ies_container::paging_ies_container() :
  ue_id_idx_value(117, crit_e::reject),
  paging_id(127, crit_e::reject),
  paging_drx(114, crit_e::ignore),
  paging_prio(115, crit_e::ignore),
  paging_cell_list(113, crit_e::ignore),
  paging_origin(216, crit_e::ignore),
  ran_ue_paging_drx(580, crit_e::ignore),
  cn_ue_paging_drx(581, crit_e::ignore),
  nr_paginge_drx_info(582, crit_e::ignore),
  nr_paginge_drx_infofor_rrc_inactive(583, crit_e::ignore),
  paging_cause(620, crit_e::ignore),
  pe_ip_s_assist_info(622, crit_e::ignore),
  ue_paging_cap(623, crit_e::ignore),
  extended_ue_id_idx_value(694, crit_e::ignore)
{
}
SRSASN_CODE paging_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += paging_drx_present ? 1 : 0;
  nof_ies += paging_prio_present ? 1 : 0;
  nof_ies += paging_origin_present ? 1 : 0;
  nof_ies += ran_ue_paging_drx_present ? 1 : 0;
  nof_ies += cn_ue_paging_drx_present ? 1 : 0;
  nof_ies += nr_paginge_drx_info_present ? 1 : 0;
  nof_ies += nr_paginge_drx_infofor_rrc_inactive_present ? 1 : 0;
  nof_ies += paging_cause_present ? 1 : 0;
  nof_ies += pe_ip_s_assist_info_present ? 1 : 0;
  nof_ies += ue_paging_cap_present ? 1 : 0;
  nof_ies += extended_ue_id_idx_value_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(ue_id_idx_value.pack(bref));
  HANDLE_CODE(paging_id.pack(bref));
  if (paging_drx_present) {
    HANDLE_CODE(paging_drx.pack(bref));
  }
  if (paging_prio_present) {
    HANDLE_CODE(paging_prio.pack(bref));
  }
  HANDLE_CODE(paging_cell_list.pack(bref));
  if (paging_origin_present) {
    HANDLE_CODE(paging_origin.pack(bref));
  }
  if (ran_ue_paging_drx_present) {
    HANDLE_CODE(ran_ue_paging_drx.pack(bref));
  }
  if (cn_ue_paging_drx_present) {
    HANDLE_CODE(cn_ue_paging_drx.pack(bref));
  }
  if (nr_paginge_drx_info_present) {
    HANDLE_CODE(nr_paginge_drx_info.pack(bref));
  }
  if (nr_paginge_drx_infofor_rrc_inactive_present) {
    HANDLE_CODE(nr_paginge_drx_infofor_rrc_inactive.pack(bref));
  }
  if (paging_cause_present) {
    HANDLE_CODE(paging_cause.pack(bref));
  }
  if (pe_ip_s_assist_info_present) {
    HANDLE_CODE(pe_ip_s_assist_info.pack(bref));
  }
  if (ue_paging_cap_present) {
    HANDLE_CODE(ue_paging_cap.pack(bref));
  }
  if (extended_ue_id_idx_value_present) {
    HANDLE_CODE(extended_ue_id_idx_value.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 117: {
        nof_mandatory_ies--;
        ue_id_idx_value.id = id;
        HANDLE_CODE(ue_id_idx_value.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_id_idx_value.value.unpack(bref));
        break;
      }
      case 127: {
        nof_mandatory_ies--;
        paging_id.id = id;
        HANDLE_CODE(paging_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_id.value.unpack(bref));
        break;
      }
      case 114: {
        paging_drx_present = true;
        paging_drx.id      = id;
        HANDLE_CODE(paging_drx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_drx.value.unpack(bref));
        break;
      }
      case 115: {
        paging_prio_present = true;
        paging_prio.id      = id;
        HANDLE_CODE(paging_prio.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_prio.value.unpack(bref));
        break;
      }
      case 113: {
        nof_mandatory_ies--;
        paging_cell_list.id = id;
        HANDLE_CODE(paging_cell_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_cell_list.value.unpack(bref));
        break;
      }
      case 216: {
        paging_origin_present = true;
        paging_origin.id      = id;
        HANDLE_CODE(paging_origin.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_origin.value.unpack(bref));
        break;
      }
      case 580: {
        ran_ue_paging_drx_present = true;
        ran_ue_paging_drx.id      = id;
        HANDLE_CODE(ran_ue_paging_drx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_paging_drx.value.unpack(bref));
        break;
      }
      case 581: {
        cn_ue_paging_drx_present = true;
        cn_ue_paging_drx.id      = id;
        HANDLE_CODE(cn_ue_paging_drx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cn_ue_paging_drx.value.unpack(bref));
        break;
      }
      case 582: {
        nr_paginge_drx_info_present = true;
        nr_paginge_drx_info.id      = id;
        HANDLE_CODE(nr_paginge_drx_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_paginge_drx_info.value.unpack(bref));
        break;
      }
      case 583: {
        nr_paginge_drx_infofor_rrc_inactive_present = true;
        nr_paginge_drx_infofor_rrc_inactive.id      = id;
        HANDLE_CODE(nr_paginge_drx_infofor_rrc_inactive.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_paginge_drx_infofor_rrc_inactive.value.unpack(bref));
        break;
      }
      case 620: {
        paging_cause_present = true;
        paging_cause.id      = id;
        HANDLE_CODE(paging_cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_cause.value.unpack(bref));
        break;
      }
      case 622: {
        pe_ip_s_assist_info_present = true;
        pe_ip_s_assist_info.id      = id;
        HANDLE_CODE(pe_ip_s_assist_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pe_ip_s_assist_info.value.unpack(bref));
        break;
      }
      case 623: {
        ue_paging_cap_present = true;
        ue_paging_cap.id      = id;
        HANDLE_CODE(ue_paging_cap.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_paging_cap.value.unpack(bref));
        break;
      }
      case 694: {
        extended_ue_id_idx_value_present = true;
        extended_ue_id_idx_value.id      = id;
        HANDLE_CODE(extended_ue_id_idx_value.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(extended_ue_id_idx_value.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void paging_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  ue_id_idx_value.to_json(j);
  j.write_fieldname("");
  paging_id.to_json(j);
  if (paging_drx_present) {
    j.write_fieldname("");
    paging_drx.to_json(j);
  }
  if (paging_prio_present) {
    j.write_fieldname("");
    paging_prio.to_json(j);
  }
  j.write_fieldname("");
  paging_cell_list.to_json(j);
  if (paging_origin_present) {
    j.write_fieldname("");
    paging_origin.to_json(j);
  }
  if (ran_ue_paging_drx_present) {
    j.write_fieldname("");
    ran_ue_paging_drx.to_json(j);
  }
  if (cn_ue_paging_drx_present) {
    j.write_fieldname("");
    cn_ue_paging_drx.to_json(j);
  }
  if (nr_paginge_drx_info_present) {
    j.write_fieldname("");
    nr_paginge_drx_info.to_json(j);
  }
  if (nr_paginge_drx_infofor_rrc_inactive_present) {
    j.write_fieldname("");
    nr_paginge_drx_infofor_rrc_inactive.to_json(j);
  }
  if (paging_cause_present) {
    j.write_fieldname("");
    paging_cause.to_json(j);
  }
  if (pe_ip_s_assist_info_present) {
    j.write_fieldname("");
    pe_ip_s_assist_info.to_json(j);
  }
  if (ue_paging_cap_present) {
    j.write_fieldname("");
    ue_paging_cap.to_json(j);
  }
  if (extended_ue_id_idx_value_present) {
    j.write_fieldname("");
    extended_ue_id_idx_value.to_json(j);
  }
  j.end_obj();
}

pos_sys_info_delivery_cmd_ies_container::pos_sys_info_delivery_cmd_ies_container() :
  transaction_id(78, crit_e::reject),
  nr_cgi(111, crit_e::reject),
  pos_sitype_list(682, crit_e::reject),
  confirmed_ue_id(156, crit_e::reject)
{
}
SRSASN_CODE pos_sys_info_delivery_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(nr_cgi.pack(bref));
  HANDLE_CODE(pos_sitype_list.pack(bref));
  HANDLE_CODE(confirmed_ue_id.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pos_sys_info_delivery_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 111: {
        nof_mandatory_ies--;
        nr_cgi.id = id;
        HANDLE_CODE(nr_cgi.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_cgi.value.unpack(bref));
        break;
      }
      case 682: {
        nof_mandatory_ies--;
        pos_sitype_list.id = id;
        HANDLE_CODE(pos_sitype_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_sitype_list.value.unpack(bref));
        break;
      }
      case 156: {
        nof_mandatory_ies--;
        confirmed_ue_id.id = id;
        HANDLE_CODE(confirmed_ue_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(confirmed_ue_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pos_sys_info_delivery_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  nr_cgi.to_json(j);
  j.write_fieldname("");
  pos_sitype_list.to_json(j);
  j.write_fieldname("");
  confirmed_ue_id.to_json(j);
  j.end_obj();
}

positioning_activation_fail_ies_container::positioning_activation_fail_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE positioning_activation_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_activation_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_activation_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

positioning_activation_request_ies_container::positioning_activation_request_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  srs_type(403, crit_e::reject),
  activation_time(404, crit_e::ignore)
{
}
SRSASN_CODE positioning_activation_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += activation_time_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(srs_type.pack(bref));
  if (activation_time_present) {
    HANDLE_CODE(activation_time.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_activation_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 403: {
        nof_mandatory_ies--;
        srs_type.id = id;
        HANDLE_CODE(srs_type.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_type.value.unpack(bref));
        break;
      }
      case 404: {
        activation_time_present = true;
        activation_time.id      = id;
        HANDLE_CODE(activation_time.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(activation_time.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_activation_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  srs_type.to_json(j);
  if (activation_time_present) {
    j.write_fieldname("");
    activation_time.to_json(j);
  }
  j.end_obj();
}

positioning_activation_resp_ies_container::positioning_activation_resp_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  sys_frame_num(420, crit_e::ignore),
  slot_num(421, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE positioning_activation_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += sys_frame_num_present ? 1 : 0;
  nof_ies += slot_num_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (sys_frame_num_present) {
    HANDLE_CODE(sys_frame_num.pack(bref));
  }
  if (slot_num_present) {
    HANDLE_CODE(slot_num.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_activation_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 420: {
        sys_frame_num_present = true;
        sys_frame_num.id      = id;
        HANDLE_CODE(sys_frame_num.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sys_frame_num.value.unpack(bref));
        break;
      }
      case 421: {
        slot_num_present = true;
        slot_num.id      = id;
        HANDLE_CODE(slot_num.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(slot_num.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_activation_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (sys_frame_num_present) {
    j.write_fieldname("");
    sys_frame_num.to_json(j);
  }
  if (slot_num_present) {
    j.write_fieldname("");
    slot_num.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

positioning_assist_info_ctrl_ies_container::positioning_assist_info_ctrl_ies_container() :
  transaction_id(78, crit_e::reject),
  pos_assist_info(392, crit_e::reject),
  pos_broadcast(393, crit_e::reject),
  positioning_broadcast_cells(406, crit_e::reject),
  routing_id(394, crit_e::reject)
{
}
SRSASN_CODE positioning_assist_info_ctrl_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += pos_assist_info_present ? 1 : 0;
  nof_ies += pos_broadcast_present ? 1 : 0;
  nof_ies += positioning_broadcast_cells_present ? 1 : 0;
  nof_ies += routing_id_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (pos_assist_info_present) {
    HANDLE_CODE(pos_assist_info.pack(bref));
  }
  if (pos_broadcast_present) {
    HANDLE_CODE(pos_broadcast.pack(bref));
  }
  if (positioning_broadcast_cells_present) {
    HANDLE_CODE(positioning_broadcast_cells.pack(bref));
  }
  if (routing_id_present) {
    HANDLE_CODE(routing_id.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_assist_info_ctrl_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 392: {
        pos_assist_info_present = true;
        pos_assist_info.id      = id;
        HANDLE_CODE(pos_assist_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_assist_info.value.unpack(bref));
        break;
      }
      case 393: {
        pos_broadcast_present = true;
        pos_broadcast.id      = id;
        HANDLE_CODE(pos_broadcast.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_broadcast.value.unpack(bref));
        break;
      }
      case 406: {
        positioning_broadcast_cells_present = true;
        positioning_broadcast_cells.id      = id;
        HANDLE_CODE(positioning_broadcast_cells.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(positioning_broadcast_cells.value.unpack(bref));
        break;
      }
      case 394: {
        routing_id_present = true;
        routing_id.id      = id;
        HANDLE_CODE(routing_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(routing_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_assist_info_ctrl_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (pos_assist_info_present) {
    j.write_fieldname("");
    pos_assist_info.to_json(j);
  }
  if (pos_broadcast_present) {
    j.write_fieldname("");
    pos_broadcast.to_json(j);
  }
  if (positioning_broadcast_cells_present) {
    j.write_fieldname("");
    positioning_broadcast_cells.to_json(j);
  }
  if (routing_id_present) {
    j.write_fieldname("");
    routing_id.to_json(j);
  }
  j.end_obj();
}

positioning_assist_info_feedback_ies_container::positioning_assist_info_feedback_ies_container() :
  transaction_id(78, crit_e::reject),
  pos_assist_info_fail_list(395, crit_e::reject),
  positioning_broadcast_cells(406, crit_e::reject),
  routing_id(394, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE positioning_assist_info_feedback_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += pos_assist_info_fail_list_present ? 1 : 0;
  nof_ies += positioning_broadcast_cells_present ? 1 : 0;
  nof_ies += routing_id_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (pos_assist_info_fail_list_present) {
    HANDLE_CODE(pos_assist_info_fail_list.pack(bref));
  }
  if (positioning_broadcast_cells_present) {
    HANDLE_CODE(positioning_broadcast_cells.pack(bref));
  }
  if (routing_id_present) {
    HANDLE_CODE(routing_id.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_assist_info_feedback_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 395: {
        pos_assist_info_fail_list_present = true;
        pos_assist_info_fail_list.id      = id;
        HANDLE_CODE(pos_assist_info_fail_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_assist_info_fail_list.value.unpack(bref));
        break;
      }
      case 406: {
        positioning_broadcast_cells_present = true;
        positioning_broadcast_cells.id      = id;
        HANDLE_CODE(positioning_broadcast_cells.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(positioning_broadcast_cells.value.unpack(bref));
        break;
      }
      case 394: {
        routing_id_present = true;
        routing_id.id      = id;
        HANDLE_CODE(routing_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(routing_id.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_assist_info_feedback_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (pos_assist_info_fail_list_present) {
    j.write_fieldname("");
    pos_assist_info_fail_list.to_json(j);
  }
  if (positioning_broadcast_cells_present) {
    j.write_fieldname("");
    positioning_broadcast_cells.to_json(j);
  }
  if (routing_id_present) {
    j.write_fieldname("");
    routing_id.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

positioning_deactivation_ies_container::positioning_deactivation_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject), gnb_du_ue_f1ap_id(41, crit_e::reject), abort_tx(405, crit_e::ignore)
{
}
SRSASN_CODE positioning_deactivation_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(abort_tx.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_deactivation_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 405: {
        nof_mandatory_ies--;
        abort_tx.id = id;
        HANDLE_CODE(abort_tx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(abort_tx.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_deactivation_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  abort_tx.to_json(j);
  j.end_obj();
}

positioning_info_fail_ies_container::positioning_info_fail_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE positioning_info_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_info_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

positioning_info_request_ies_container::positioning_info_request_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  requested_srs_tx_characteristics(391, crit_e::ignore),
  ue_report_info(575, crit_e::ignore),
  srs_pos_rrc_inactive_query_ind(689, crit_e::ignore)
{
}
SRSASN_CODE positioning_info_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += requested_srs_tx_characteristics_present ? 1 : 0;
  nof_ies += ue_report_info_present ? 1 : 0;
  nof_ies += srs_pos_rrc_inactive_query_ind_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (requested_srs_tx_characteristics_present) {
    HANDLE_CODE(requested_srs_tx_characteristics.pack(bref));
  }
  if (ue_report_info_present) {
    HANDLE_CODE(ue_report_info.pack(bref));
  }
  if (srs_pos_rrc_inactive_query_ind_present) {
    HANDLE_CODE(srs_pos_rrc_inactive_query_ind.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 391: {
        requested_srs_tx_characteristics_present = true;
        requested_srs_tx_characteristics.id      = id;
        HANDLE_CODE(requested_srs_tx_characteristics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(requested_srs_tx_characteristics.value.unpack(bref));
        break;
      }
      case 575: {
        ue_report_info_present = true;
        ue_report_info.id      = id;
        HANDLE_CODE(ue_report_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_report_info.value.unpack(bref));
        break;
      }
      case 689: {
        srs_pos_rrc_inactive_query_ind_present = true;
        srs_pos_rrc_inactive_query_ind.id      = id;
        HANDLE_CODE(srs_pos_rrc_inactive_query_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_pos_rrc_inactive_query_ind.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_info_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (requested_srs_tx_characteristics_present) {
    j.write_fieldname("");
    requested_srs_tx_characteristics.to_json(j);
  }
  if (ue_report_info_present) {
    j.write_fieldname("");
    ue_report_info.to_json(j);
  }
  if (srs_pos_rrc_inactive_query_ind_present) {
    j.write_fieldname("");
    srs_pos_rrc_inactive_query_ind.to_json(j);
  }
  j.end_obj();
}

positioning_info_resp_ies_container::positioning_info_resp_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  srs_cfg(407, crit_e::ignore),
  sfn_initisation_time(419, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore),
  srs_pos_rrc_inactive_cfg(674, crit_e::ignore)
{
}
SRSASN_CODE positioning_info_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += srs_cfg_present ? 1 : 0;
  nof_ies += sfn_initisation_time_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += srs_pos_rrc_inactive_cfg_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (srs_cfg_present) {
    HANDLE_CODE(srs_cfg.pack(bref));
  }
  if (sfn_initisation_time_present) {
    HANDLE_CODE(sfn_initisation_time.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (srs_pos_rrc_inactive_cfg_present) {
    HANDLE_CODE(srs_pos_rrc_inactive_cfg.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 407: {
        srs_cfg_present = true;
        srs_cfg.id      = id;
        HANDLE_CODE(srs_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_cfg.value.unpack(bref));
        break;
      }
      case 419: {
        sfn_initisation_time_present = true;
        sfn_initisation_time.id      = id;
        HANDLE_CODE(sfn_initisation_time.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sfn_initisation_time.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 674: {
        srs_pos_rrc_inactive_cfg_present = true;
        srs_pos_rrc_inactive_cfg.id      = id;
        HANDLE_CODE(srs_pos_rrc_inactive_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_pos_rrc_inactive_cfg.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_info_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (srs_cfg_present) {
    j.write_fieldname("");
    srs_cfg.to_json(j);
  }
  if (sfn_initisation_time_present) {
    j.write_fieldname("");
    sfn_initisation_time.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (srs_pos_rrc_inactive_cfg_present) {
    j.write_fieldname("");
    srs_pos_rrc_inactive_cfg.to_json(j);
  }
  j.end_obj();
}

positioning_info_upd_ies_container::positioning_info_upd_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  srs_cfg(407, crit_e::ignore),
  sfn_initisation_time(419, crit_e::ignore)
{
}
SRSASN_CODE positioning_info_upd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += srs_cfg_present ? 1 : 0;
  nof_ies += sfn_initisation_time_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (srs_cfg_present) {
    HANDLE_CODE(srs_cfg.pack(bref));
  }
  if (sfn_initisation_time_present) {
    HANDLE_CODE(sfn_initisation_time.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_upd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 407: {
        srs_cfg_present = true;
        srs_cfg.id      = id;
        HANDLE_CODE(srs_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_cfg.value.unpack(bref));
        break;
      }
      case 419: {
        sfn_initisation_time_present = true;
        sfn_initisation_time.id      = id;
        HANDLE_CODE(sfn_initisation_time.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sfn_initisation_time.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_info_upd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (srs_cfg_present) {
    j.write_fieldname("");
    srs_cfg.to_json(j);
  }
  if (sfn_initisation_time_present) {
    j.write_fieldname("");
    sfn_initisation_time.to_json(j);
  }
  j.end_obj();
}

positioning_meas_abort_ies_container::positioning_meas_abort_ies_container() :
  transaction_id(78, crit_e::reject), lmf_meas_id(402, crit_e::reject), ran_meas_id(411, crit_e::reject)
{
}
SRSASN_CODE positioning_meas_abort_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(lmf_meas_id.pack(bref));
  HANDLE_CODE(ran_meas_id.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_abort_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        lmf_meas_id.id = id;
        HANDLE_CODE(lmf_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lmf_meas_id.value.unpack(bref));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        ran_meas_id.id = id;
        HANDLE_CODE(ran_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_meas_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_abort_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  lmf_meas_id.to_json(j);
  j.write_fieldname("");
  ran_meas_id.to_json(j);
  j.end_obj();
}

positioning_meas_fail_ies_container::positioning_meas_fail_ies_container() :
  transaction_id(78, crit_e::reject),
  lmf_meas_id(402, crit_e::reject),
  ran_meas_id(411, crit_e::reject),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE positioning_meas_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(lmf_meas_id.pack(bref));
  HANDLE_CODE(ran_meas_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        lmf_meas_id.id = id;
        HANDLE_CODE(lmf_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lmf_meas_id.value.unpack(bref));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        ran_meas_id.id = id;
        HANDLE_CODE(ran_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_meas_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  lmf_meas_id.to_json(j);
  j.write_fieldname("");
  ran_meas_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

positioning_meas_fail_ind_ies_container::positioning_meas_fail_ind_ies_container() :
  transaction_id(78, crit_e::reject),
  lmf_meas_id(402, crit_e::reject),
  ran_meas_id(411, crit_e::reject),
  cause(0, crit_e::ignore)
{
}
SRSASN_CODE positioning_meas_fail_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(lmf_meas_id.pack(bref));
  HANDLE_CODE(ran_meas_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_fail_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        lmf_meas_id.id = id;
        HANDLE_CODE(lmf_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lmf_meas_id.value.unpack(bref));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        ran_meas_id.id = id;
        HANDLE_CODE(ran_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_meas_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_fail_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  lmf_meas_id.to_json(j);
  j.write_fieldname("");
  ran_meas_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  j.end_obj();
}

positioning_meas_report_ies_container::positioning_meas_report_ies_container() :
  transaction_id(78, crit_e::reject),
  lmf_meas_id(402, crit_e::reject),
  ran_meas_id(411, crit_e::reject),
  pos_meas_result_list(397, crit_e::reject)
{
}
SRSASN_CODE positioning_meas_report_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(lmf_meas_id.pack(bref));
  HANDLE_CODE(ran_meas_id.pack(bref));
  HANDLE_CODE(pos_meas_result_list.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_report_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        lmf_meas_id.id = id;
        HANDLE_CODE(lmf_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lmf_meas_id.value.unpack(bref));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        ran_meas_id.id = id;
        HANDLE_CODE(ran_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_meas_id.value.unpack(bref));
        break;
      }
      case 397: {
        nof_mandatory_ies--;
        pos_meas_result_list.id = id;
        HANDLE_CODE(pos_meas_result_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_meas_result_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_report_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  lmf_meas_id.to_json(j);
  j.write_fieldname("");
  ran_meas_id.to_json(j);
  j.write_fieldname("");
  pos_meas_result_list.to_json(j);
  j.end_obj();
}

positioning_meas_request_ies_container::positioning_meas_request_ies_container() :
  transaction_id(78, crit_e::reject),
  lmf_meas_id(402, crit_e::reject),
  ran_meas_id(411, crit_e::reject),
  trp_meas_request_list(422, crit_e::reject),
  pos_report_characteristics(408, crit_e::reject),
  pos_meas_periodicity(409, crit_e::reject),
  pos_meas_quantities(396, crit_e::reject),
  sfn_initisation_time(419, crit_e::ignore),
  srs_cfg(407, crit_e::ignore),
  meas_beam_info_request(423, crit_e::ignore),
  sys_frame_num(420, crit_e::ignore),
  slot_num(421, crit_e::ignore),
  pos_meas_periodicity_extended(438, crit_e::reject),
  resp_time(555, crit_e::ignore),
  meas_characteristics_request_ind(574, crit_e::ignore),
  meas_time_occasion(573, crit_e::ignore),
  pos_meas_amount(634, crit_e::ignore)
{
}
SRSASN_CODE positioning_meas_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 6;
  nof_ies += pos_meas_periodicity_present ? 1 : 0;
  nof_ies += sfn_initisation_time_present ? 1 : 0;
  nof_ies += srs_cfg_present ? 1 : 0;
  nof_ies += meas_beam_info_request_present ? 1 : 0;
  nof_ies += sys_frame_num_present ? 1 : 0;
  nof_ies += slot_num_present ? 1 : 0;
  nof_ies += pos_meas_periodicity_extended_present ? 1 : 0;
  nof_ies += resp_time_present ? 1 : 0;
  nof_ies += meas_characteristics_request_ind_present ? 1 : 0;
  nof_ies += meas_time_occasion_present ? 1 : 0;
  nof_ies += pos_meas_amount_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(lmf_meas_id.pack(bref));
  HANDLE_CODE(ran_meas_id.pack(bref));
  HANDLE_CODE(trp_meas_request_list.pack(bref));
  HANDLE_CODE(pos_report_characteristics.pack(bref));
  if (pos_meas_periodicity_present) {
    HANDLE_CODE(pos_meas_periodicity.pack(bref));
  }
  HANDLE_CODE(pos_meas_quantities.pack(bref));
  if (sfn_initisation_time_present) {
    HANDLE_CODE(sfn_initisation_time.pack(bref));
  }
  if (srs_cfg_present) {
    HANDLE_CODE(srs_cfg.pack(bref));
  }
  if (meas_beam_info_request_present) {
    HANDLE_CODE(meas_beam_info_request.pack(bref));
  }
  if (sys_frame_num_present) {
    HANDLE_CODE(sys_frame_num.pack(bref));
  }
  if (slot_num_present) {
    HANDLE_CODE(slot_num.pack(bref));
  }
  if (pos_meas_periodicity_extended_present) {
    HANDLE_CODE(pos_meas_periodicity_extended.pack(bref));
  }
  if (resp_time_present) {
    HANDLE_CODE(resp_time.pack(bref));
  }
  if (meas_characteristics_request_ind_present) {
    HANDLE_CODE(meas_characteristics_request_ind.pack(bref));
  }
  if (meas_time_occasion_present) {
    HANDLE_CODE(meas_time_occasion.pack(bref));
  }
  if (pos_meas_amount_present) {
    HANDLE_CODE(pos_meas_amount.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 6;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        lmf_meas_id.id = id;
        HANDLE_CODE(lmf_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lmf_meas_id.value.unpack(bref));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        ran_meas_id.id = id;
        HANDLE_CODE(ran_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_meas_id.value.unpack(bref));
        break;
      }
      case 422: {
        nof_mandatory_ies--;
        trp_meas_request_list.id = id;
        HANDLE_CODE(trp_meas_request_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trp_meas_request_list.value.unpack(bref));
        break;
      }
      case 408: {
        nof_mandatory_ies--;
        pos_report_characteristics.id = id;
        HANDLE_CODE(pos_report_characteristics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_report_characteristics.value.unpack(bref));
        break;
      }
      case 409: {
        pos_meas_periodicity_present = true;
        pos_meas_periodicity.id      = id;
        HANDLE_CODE(pos_meas_periodicity.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_meas_periodicity.value.unpack(bref));
        break;
      }
      case 396: {
        nof_mandatory_ies--;
        pos_meas_quantities.id = id;
        HANDLE_CODE(pos_meas_quantities.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_meas_quantities.value.unpack(bref));
        break;
      }
      case 419: {
        sfn_initisation_time_present = true;
        sfn_initisation_time.id      = id;
        HANDLE_CODE(sfn_initisation_time.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sfn_initisation_time.value.unpack(bref));
        break;
      }
      case 407: {
        srs_cfg_present = true;
        srs_cfg.id      = id;
        HANDLE_CODE(srs_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_cfg.value.unpack(bref));
        break;
      }
      case 423: {
        meas_beam_info_request_present = true;
        meas_beam_info_request.id      = id;
        HANDLE_CODE(meas_beam_info_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(meas_beam_info_request.value.unpack(bref));
        break;
      }
      case 420: {
        sys_frame_num_present = true;
        sys_frame_num.id      = id;
        HANDLE_CODE(sys_frame_num.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sys_frame_num.value.unpack(bref));
        break;
      }
      case 421: {
        slot_num_present = true;
        slot_num.id      = id;
        HANDLE_CODE(slot_num.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(slot_num.value.unpack(bref));
        break;
      }
      case 438: {
        pos_meas_periodicity_extended_present = true;
        pos_meas_periodicity_extended.id      = id;
        HANDLE_CODE(pos_meas_periodicity_extended.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_meas_periodicity_extended.value.unpack(bref));
        break;
      }
      case 555: {
        resp_time_present = true;
        resp_time.id      = id;
        HANDLE_CODE(resp_time.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(resp_time.value.unpack(bref));
        break;
      }
      case 574: {
        meas_characteristics_request_ind_present = true;
        meas_characteristics_request_ind.id      = id;
        HANDLE_CODE(meas_characteristics_request_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(meas_characteristics_request_ind.value.unpack(bref));
        break;
      }
      case 573: {
        meas_time_occasion_present = true;
        meas_time_occasion.id      = id;
        HANDLE_CODE(meas_time_occasion.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(meas_time_occasion.value.unpack(bref));
        break;
      }
      case 634: {
        pos_meas_amount_present = true;
        pos_meas_amount.id      = id;
        HANDLE_CODE(pos_meas_amount.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_meas_amount.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  lmf_meas_id.to_json(j);
  j.write_fieldname("");
  ran_meas_id.to_json(j);
  j.write_fieldname("");
  trp_meas_request_list.to_json(j);
  j.write_fieldname("");
  pos_report_characteristics.to_json(j);
  if (pos_meas_periodicity_present) {
    j.write_fieldname("");
    pos_meas_periodicity.to_json(j);
  }
  j.write_fieldname("");
  pos_meas_quantities.to_json(j);
  if (sfn_initisation_time_present) {
    j.write_fieldname("");
    sfn_initisation_time.to_json(j);
  }
  if (srs_cfg_present) {
    j.write_fieldname("");
    srs_cfg.to_json(j);
  }
  if (meas_beam_info_request_present) {
    j.write_fieldname("");
    meas_beam_info_request.to_json(j);
  }
  if (sys_frame_num_present) {
    j.write_fieldname("");
    sys_frame_num.to_json(j);
  }
  if (slot_num_present) {
    j.write_fieldname("");
    slot_num.to_json(j);
  }
  if (pos_meas_periodicity_extended_present) {
    j.write_fieldname("");
    pos_meas_periodicity_extended.to_json(j);
  }
  if (resp_time_present) {
    j.write_fieldname("");
    resp_time.to_json(j);
  }
  if (meas_characteristics_request_ind_present) {
    j.write_fieldname("");
    meas_characteristics_request_ind.to_json(j);
  }
  if (meas_time_occasion_present) {
    j.write_fieldname("");
    meas_time_occasion.to_json(j);
  }
  if (pos_meas_amount_present) {
    j.write_fieldname("");
    pos_meas_amount.to_json(j);
  }
  j.end_obj();
}

positioning_meas_resp_ies_container::positioning_meas_resp_ies_container() :
  transaction_id(78, crit_e::reject),
  lmf_meas_id(402, crit_e::reject),
  ran_meas_id(411, crit_e::reject),
  pos_meas_result_list(397, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE positioning_meas_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += pos_meas_result_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(lmf_meas_id.pack(bref));
  HANDLE_CODE(ran_meas_id.pack(bref));
  if (pos_meas_result_list_present) {
    HANDLE_CODE(pos_meas_result_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        lmf_meas_id.id = id;
        HANDLE_CODE(lmf_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lmf_meas_id.value.unpack(bref));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        ran_meas_id.id = id;
        HANDLE_CODE(ran_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_meas_id.value.unpack(bref));
        break;
      }
      case 397: {
        pos_meas_result_list_present = true;
        pos_meas_result_list.id      = id;
        HANDLE_CODE(pos_meas_result_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_meas_result_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  lmf_meas_id.to_json(j);
  j.write_fieldname("");
  ran_meas_id.to_json(j);
  if (pos_meas_result_list_present) {
    j.write_fieldname("");
    pos_meas_result_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

positioning_meas_upd_ies_container::positioning_meas_upd_ies_container() :
  transaction_id(78, crit_e::reject),
  lmf_meas_id(402, crit_e::reject),
  ran_meas_id(411, crit_e::reject),
  srs_cfg(407, crit_e::ignore),
  trp_meas_upd_list(553, crit_e::reject),
  meas_characteristics_request_ind(574, crit_e::ignore),
  meas_time_occasion(573, crit_e::ignore)
{
}
SRSASN_CODE positioning_meas_upd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += srs_cfg_present ? 1 : 0;
  nof_ies += trp_meas_upd_list_present ? 1 : 0;
  nof_ies += meas_characteristics_request_ind_present ? 1 : 0;
  nof_ies += meas_time_occasion_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(lmf_meas_id.pack(bref));
  HANDLE_CODE(ran_meas_id.pack(bref));
  if (srs_cfg_present) {
    HANDLE_CODE(srs_cfg.pack(bref));
  }
  if (trp_meas_upd_list_present) {
    HANDLE_CODE(trp_meas_upd_list.pack(bref));
  }
  if (meas_characteristics_request_ind_present) {
    HANDLE_CODE(meas_characteristics_request_ind.pack(bref));
  }
  if (meas_time_occasion_present) {
    HANDLE_CODE(meas_time_occasion.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_upd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        lmf_meas_id.id = id;
        HANDLE_CODE(lmf_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lmf_meas_id.value.unpack(bref));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        ran_meas_id.id = id;
        HANDLE_CODE(ran_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_meas_id.value.unpack(bref));
        break;
      }
      case 407: {
        srs_cfg_present = true;
        srs_cfg.id      = id;
        HANDLE_CODE(srs_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_cfg.value.unpack(bref));
        break;
      }
      case 553: {
        trp_meas_upd_list_present = true;
        trp_meas_upd_list.id      = id;
        HANDLE_CODE(trp_meas_upd_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trp_meas_upd_list.value.unpack(bref));
        break;
      }
      case 574: {
        meas_characteristics_request_ind_present = true;
        meas_characteristics_request_ind.id      = id;
        HANDLE_CODE(meas_characteristics_request_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(meas_characteristics_request_ind.value.unpack(bref));
        break;
      }
      case 573: {
        meas_time_occasion_present = true;
        meas_time_occasion.id      = id;
        HANDLE_CODE(meas_time_occasion.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(meas_time_occasion.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_upd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  lmf_meas_id.to_json(j);
  j.write_fieldname("");
  ran_meas_id.to_json(j);
  if (srs_cfg_present) {
    j.write_fieldname("");
    srs_cfg.to_json(j);
  }
  if (trp_meas_upd_list_present) {
    j.write_fieldname("");
    trp_meas_upd_list.to_json(j);
  }
  if (meas_characteristics_request_ind_present) {
    j.write_fieldname("");
    meas_characteristics_request_ind.to_json(j);
  }
  if (meas_time_occasion_present) {
    j.write_fieldname("");
    meas_time_occasion.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE private_ie_container_empty_l::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 0;
  pack_length(bref, nof_ies, 1u, 65535u, true);

  return SRSASN_SUCCESS;
}
SRSASN_CODE private_ie_container_empty_l::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 1u, 65535u, true);
  if (nof_ies > 0) {
    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void private_ie_container_empty_l::to_json(json_writer& j) const
{
  j.start_obj();
  j.end_obj();
}

// PrivateMessage ::= SEQUENCE
SRSASN_CODE private_msg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(private_ies.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE private_msg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(private_ies.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void private_msg_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("PrivateMessage");
  j.write_fieldname("privateIEs");
  private_ies.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

qo_e_info_transfer_ies_container::qo_e_info_transfer_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject), gnb_du_ue_f1ap_id(41, crit_e::reject), qo_e_info(585, crit_e::ignore)
{
}
SRSASN_CODE qo_e_info_transfer_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += qo_e_info_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (qo_e_info_present) {
    HANDLE_CODE(qo_e_info.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE qo_e_info_transfer_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 585: {
        qo_e_info_present = true;
        qo_e_info.id      = id;
        HANDLE_CODE(qo_e_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(qo_e_info.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void qo_e_info_transfer_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (qo_e_info_present) {
    j.write_fieldname("");
    qo_e_info.to_json(j);
  }
  j.end_obj();
}

rrc_delivery_report_ies_container::rrc_delivery_report_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  rrc_delivery_status(185, crit_e::ignore),
  srb_id(64, crit_e::ignore)
{
}
SRSASN_CODE rrc_delivery_report_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(rrc_delivery_status.pack(bref));
  HANDLE_CODE(srb_id.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_delivery_report_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 185: {
        nof_mandatory_ies--;
        rrc_delivery_status.id = id;
        HANDLE_CODE(rrc_delivery_status.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_delivery_status.value.unpack(bref));
        break;
      }
      case 64: {
        nof_mandatory_ies--;
        srb_id.id = id;
        HANDLE_CODE(srb_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srb_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void rrc_delivery_report_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  rrc_delivery_status.to_json(j);
  j.write_fieldname("");
  srb_id.to_json(j);
  j.end_obj();
}

ref_time_info_report_ies_container::ref_time_info_report_ies_container() :
  transaction_id(78, crit_e::ignore), time_ref_info(366, crit_e::ignore)
{
}
SRSASN_CODE ref_time_info_report_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(time_ref_info.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ref_time_info_report_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 366: {
        nof_mandatory_ies--;
        time_ref_info.id = id;
        HANDLE_CODE(time_ref_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_ref_info.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ref_time_info_report_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  time_ref_info.to_json(j);
  j.end_obj();
}

ref_time_info_report_ctrl_ies_container::ref_time_info_report_ctrl_ies_container() :
  transaction_id(78, crit_e::reject), report_request_type(365, crit_e::reject)
{
}
SRSASN_CODE ref_time_info_report_ctrl_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(report_request_type.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ref_time_info_report_ctrl_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 365: {
        nof_mandatory_ies--;
        report_request_type.id = id;
        HANDLE_CODE(report_request_type.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(report_request_type.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ref_time_info_report_ctrl_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  report_request_type.to_json(j);
  j.end_obj();
}

reset_ies_container::reset_ies_container() :
  transaction_id(78, crit_e::reject), cause(0, crit_e::ignore), reset_type(48, crit_e::reject)
{
}
SRSASN_CODE reset_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  HANDLE_CODE(reset_type.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 48: {
        nof_mandatory_ies--;
        reset_type.id = id;
        HANDLE_CODE(reset_type.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(reset_type.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void reset_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  j.write_fieldname("");
  reset_type.to_json(j);
  j.end_obj();
}

reset_ack_ies_container::reset_ack_ies_container() :
  transaction_id(78, crit_e::reject),
  ue_associated_lc_f1_conn_list_res_ack(81, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE reset_ack_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += ue_associated_lc_f1_conn_list_res_ack_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (ue_associated_lc_f1_conn_list_res_ack_present) {
    HANDLE_CODE(ue_associated_lc_f1_conn_list_res_ack.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_ack_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 81: {
        ue_associated_lc_f1_conn_list_res_ack_present = true;
        ue_associated_lc_f1_conn_list_res_ack.id      = id;
        HANDLE_CODE(ue_associated_lc_f1_conn_list_res_ack.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_associated_lc_f1_conn_list_res_ack.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void reset_ack_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (ue_associated_lc_f1_conn_list_res_ack_present) {
    j.write_fieldname("");
    ue_associated_lc_f1_conn_list_res_ack.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

res_status_fail_ies_container::res_status_fail_ies_container() :
  transaction_id(78, crit_e::reject),
  gnb_cu_meas_id(345, crit_e::reject),
  gnb_du_meas_id(346, crit_e::ignore),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE res_status_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(gnb_cu_meas_id.pack(bref));
  HANDLE_CODE(gnb_du_meas_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 345: {
        nof_mandatory_ies--;
        gnb_cu_meas_id.id = id;
        HANDLE_CODE(gnb_cu_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_meas_id.value.unpack(bref));
        break;
      }
      case 346: {
        nof_mandatory_ies--;
        gnb_du_meas_id.id = id;
        HANDLE_CODE(gnb_du_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_meas_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void res_status_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  gnb_cu_meas_id.to_json(j);
  j.write_fieldname("");
  gnb_du_meas_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

res_status_request_ies_container::res_status_request_ies_container() :
  transaction_id(78, crit_e::reject),
  gnb_cu_meas_id(345, crit_e::reject),
  gnb_du_meas_id(346, crit_e::ignore),
  regist_request(347, crit_e::ignore),
  report_characteristics(348, crit_e::ignore),
  cell_to_report_list(349, crit_e::ignore),
  report_periodicity(352, crit_e::ignore)
{
}
SRSASN_CODE res_status_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += gnb_du_meas_id_present ? 1 : 0;
  nof_ies += report_characteristics_present ? 1 : 0;
  nof_ies += cell_to_report_list_present ? 1 : 0;
  nof_ies += report_periodicity_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(gnb_cu_meas_id.pack(bref));
  if (gnb_du_meas_id_present) {
    HANDLE_CODE(gnb_du_meas_id.pack(bref));
  }
  HANDLE_CODE(regist_request.pack(bref));
  if (report_characteristics_present) {
    HANDLE_CODE(report_characteristics.pack(bref));
  }
  if (cell_to_report_list_present) {
    HANDLE_CODE(cell_to_report_list.pack(bref));
  }
  if (report_periodicity_present) {
    HANDLE_CODE(report_periodicity.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 345: {
        nof_mandatory_ies--;
        gnb_cu_meas_id.id = id;
        HANDLE_CODE(gnb_cu_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_meas_id.value.unpack(bref));
        break;
      }
      case 346: {
        gnb_du_meas_id_present = true;
        gnb_du_meas_id.id      = id;
        HANDLE_CODE(gnb_du_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_meas_id.value.unpack(bref));
        break;
      }
      case 347: {
        nof_mandatory_ies--;
        regist_request.id = id;
        HANDLE_CODE(regist_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(regist_request.value.unpack(bref));
        break;
      }
      case 348: {
        report_characteristics_present = true;
        report_characteristics.id      = id;
        HANDLE_CODE(report_characteristics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(report_characteristics.value.unpack(bref));
        break;
      }
      case 349: {
        cell_to_report_list_present = true;
        cell_to_report_list.id      = id;
        HANDLE_CODE(cell_to_report_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cell_to_report_list.value.unpack(bref));
        break;
      }
      case 352: {
        report_periodicity_present = true;
        report_periodicity.id      = id;
        HANDLE_CODE(report_periodicity.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(report_periodicity.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void res_status_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  gnb_cu_meas_id.to_json(j);
  if (gnb_du_meas_id_present) {
    j.write_fieldname("");
    gnb_du_meas_id.to_json(j);
  }
  j.write_fieldname("");
  regist_request.to_json(j);
  if (report_characteristics_present) {
    j.write_fieldname("");
    report_characteristics.to_json(j);
  }
  if (cell_to_report_list_present) {
    j.write_fieldname("");
    cell_to_report_list.to_json(j);
  }
  if (report_periodicity_present) {
    j.write_fieldname("");
    report_periodicity.to_json(j);
  }
  j.end_obj();
}

res_status_resp_ies_container::res_status_resp_ies_container() :
  transaction_id(78, crit_e::reject),
  gnb_cu_meas_id(345, crit_e::reject),
  gnb_du_meas_id(346, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE res_status_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(gnb_cu_meas_id.pack(bref));
  HANDLE_CODE(gnb_du_meas_id.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 345: {
        nof_mandatory_ies--;
        gnb_cu_meas_id.id = id;
        HANDLE_CODE(gnb_cu_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_meas_id.value.unpack(bref));
        break;
      }
      case 346: {
        nof_mandatory_ies--;
        gnb_du_meas_id.id = id;
        HANDLE_CODE(gnb_du_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_meas_id.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void res_status_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  gnb_cu_meas_id.to_json(j);
  j.write_fieldname("");
  gnb_du_meas_id.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

res_status_upd_ies_container::res_status_upd_ies_container() :
  transaction_id(78, crit_e::reject),
  gnb_cu_meas_id(345, crit_e::reject),
  gnb_du_meas_id(346, crit_e::ignore),
  hardware_load_ind(351, crit_e::ignore),
  tnl_capacity_ind(353, crit_e::ignore),
  cell_meas_result_list(350, crit_e::ignore)
{
}
SRSASN_CODE res_status_upd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += hardware_load_ind_present ? 1 : 0;
  nof_ies += tnl_capacity_ind_present ? 1 : 0;
  nof_ies += cell_meas_result_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(gnb_cu_meas_id.pack(bref));
  HANDLE_CODE(gnb_du_meas_id.pack(bref));
  if (hardware_load_ind_present) {
    HANDLE_CODE(hardware_load_ind.pack(bref));
  }
  if (tnl_capacity_ind_present) {
    HANDLE_CODE(tnl_capacity_ind.pack(bref));
  }
  if (cell_meas_result_list_present) {
    HANDLE_CODE(cell_meas_result_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_upd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 345: {
        nof_mandatory_ies--;
        gnb_cu_meas_id.id = id;
        HANDLE_CODE(gnb_cu_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_meas_id.value.unpack(bref));
        break;
      }
      case 346: {
        nof_mandatory_ies--;
        gnb_du_meas_id.id = id;
        HANDLE_CODE(gnb_du_meas_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_meas_id.value.unpack(bref));
        break;
      }
      case 351: {
        hardware_load_ind_present = true;
        hardware_load_ind.id      = id;
        HANDLE_CODE(hardware_load_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(hardware_load_ind.value.unpack(bref));
        break;
      }
      case 353: {
        tnl_capacity_ind_present = true;
        tnl_capacity_ind.id      = id;
        HANDLE_CODE(tnl_capacity_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(tnl_capacity_ind.value.unpack(bref));
        break;
      }
      case 350: {
        cell_meas_result_list_present = true;
        cell_meas_result_list.id      = id;
        HANDLE_CODE(cell_meas_result_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cell_meas_result_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void res_status_upd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  gnb_cu_meas_id.to_json(j);
  j.write_fieldname("");
  gnb_du_meas_id.to_json(j);
  if (hardware_load_ind_present) {
    j.write_fieldname("");
    hardware_load_ind.to_json(j);
  }
  if (tnl_capacity_ind_present) {
    j.write_fieldname("");
    tnl_capacity_ind.to_json(j);
  }
  if (cell_meas_result_list_present) {
    j.write_fieldname("");
    cell_meas_result_list.to_json(j);
  }
  j.end_obj();
}

sys_info_delivery_cmd_ies_container::sys_info_delivery_cmd_ies_container() :
  transaction_id(78, crit_e::reject),
  nr_cgi(111, crit_e::reject),
  sitype_list(116, crit_e::reject),
  confirmed_ue_id(156, crit_e::reject)
{
}
SRSASN_CODE sys_info_delivery_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(nr_cgi.pack(bref));
  HANDLE_CODE(sitype_list.pack(bref));
  HANDLE_CODE(confirmed_ue_id.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sys_info_delivery_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 111: {
        nof_mandatory_ies--;
        nr_cgi.id = id;
        HANDLE_CODE(nr_cgi.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_cgi.value.unpack(bref));
        break;
      }
      case 116: {
        nof_mandatory_ies--;
        sitype_list.id = id;
        HANDLE_CODE(sitype_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sitype_list.value.unpack(bref));
        break;
      }
      case 156: {
        nof_mandatory_ies--;
        confirmed_ue_id.id = id;
        HANDLE_CODE(confirmed_ue_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(confirmed_ue_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void sys_info_delivery_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  nr_cgi.to_json(j);
  j.write_fieldname("");
  sitype_list.to_json(j);
  j.write_fieldname("");
  confirmed_ue_id.to_json(j);
  j.end_obj();
}

trp_info_fail_ies_container::trp_info_fail_ies_container() :
  transaction_id(78, crit_e::reject), cause(0, crit_e::ignore), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE trp_info_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void trp_info_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

trp_info_request_ies_container::trp_info_request_ies_container() :
  transaction_id(78, crit_e::reject), trp_list(410, crit_e::ignore), trp_info_type_list_trp_req(398, crit_e::reject)
{
}
SRSASN_CODE trp_info_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += trp_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (trp_list_present) {
    HANDLE_CODE(trp_list.pack(bref));
  }
  HANDLE_CODE(trp_info_type_list_trp_req.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 410: {
        trp_list_present = true;
        trp_list.id      = id;
        HANDLE_CODE(trp_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trp_list.value.unpack(bref));
        break;
      }
      case 398: {
        nof_mandatory_ies--;
        trp_info_type_list_trp_req.id = id;
        HANDLE_CODE(trp_info_type_list_trp_req.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trp_info_type_list_trp_req.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void trp_info_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (trp_list_present) {
    j.write_fieldname("");
    trp_list.to_json(j);
  }
  j.write_fieldname("");
  trp_info_type_list_trp_req.to_json(j);
  j.end_obj();
}

trp_info_resp_ies_container::trp_info_resp_ies_container() :
  transaction_id(78, crit_e::reject), trp_info_list_trp_resp(400, crit_e::ignore), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE trp_info_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(trp_info_list_trp_resp.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 400: {
        nof_mandatory_ies--;
        trp_info_list_trp_resp.id = id;
        HANDLE_CODE(trp_info_list_trp_resp.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trp_info_list_trp_resp.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void trp_info_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  trp_info_list_trp_resp.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

trace_start_ies_container::trace_start_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject), gnb_du_ue_f1ap_id(41, crit_e::reject), trace_activation(242, crit_e::ignore)
{
}
SRSASN_CODE trace_start_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(trace_activation.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE trace_start_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 242: {
        nof_mandatory_ies--;
        trace_activation.id = id;
        HANDLE_CODE(trace_activation.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trace_activation.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void trace_start_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  trace_activation.to_json(j);
  j.end_obj();
}

ue_context_mod_confirm_ies_container::ue_context_mod_confirm_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  res_coordination_transfer_container(49, crit_e::ignore),
  drbs_modified_conf_list(19, crit_e::ignore),
  rrc_container(50, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore),
  execute_dupl(109, crit_e::ignore),
  res_coordination_transfer_info(195, crit_e::ignore),
  sl_drbs_modified_conf_list(337, crit_e::ignore),
  uu_rlc_ch_modified_list(604, crit_e::reject),
  pc5_rlc_ch_modified_list(616, crit_e::reject),
  ue_multicast_m_rbs_confirmed_to_be_modified_list(653, crit_e::reject)
{
}
SRSASN_CODE ue_context_mod_confirm_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += res_coordination_transfer_container_present ? 1 : 0;
  nof_ies += drbs_modified_conf_list_present ? 1 : 0;
  nof_ies += rrc_container_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += execute_dupl_present ? 1 : 0;
  nof_ies += res_coordination_transfer_info_present ? 1 : 0;
  nof_ies += sl_drbs_modified_conf_list_present ? 1 : 0;
  nof_ies += uu_rlc_ch_modified_list_present ? 1 : 0;
  nof_ies += pc5_rlc_ch_modified_list_present ? 1 : 0;
  nof_ies += ue_multicast_m_rbs_confirmed_to_be_modified_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (res_coordination_transfer_container_present) {
    HANDLE_CODE(res_coordination_transfer_container.pack(bref));
  }
  if (drbs_modified_conf_list_present) {
    HANDLE_CODE(drbs_modified_conf_list.pack(bref));
  }
  if (rrc_container_present) {
    HANDLE_CODE(rrc_container.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (execute_dupl_present) {
    HANDLE_CODE(execute_dupl.pack(bref));
  }
  if (res_coordination_transfer_info_present) {
    HANDLE_CODE(res_coordination_transfer_info.pack(bref));
  }
  if (sl_drbs_modified_conf_list_present) {
    HANDLE_CODE(sl_drbs_modified_conf_list.pack(bref));
  }
  if (uu_rlc_ch_modified_list_present) {
    HANDLE_CODE(uu_rlc_ch_modified_list.pack(bref));
  }
  if (pc5_rlc_ch_modified_list_present) {
    HANDLE_CODE(pc5_rlc_ch_modified_list.pack(bref));
  }
  if (ue_multicast_m_rbs_confirmed_to_be_modified_list_present) {
    HANDLE_CODE(ue_multicast_m_rbs_confirmed_to_be_modified_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_confirm_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 49: {
        res_coordination_transfer_container_present = true;
        res_coordination_transfer_container.id      = id;
        HANDLE_CODE(res_coordination_transfer_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_container.value.unpack(bref));
        break;
      }
      case 19: {
        drbs_modified_conf_list_present = true;
        drbs_modified_conf_list.id      = id;
        HANDLE_CODE(drbs_modified_conf_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_modified_conf_list.value.unpack(bref));
        break;
      }
      case 50: {
        rrc_container_present = true;
        rrc_container.id      = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 109: {
        execute_dupl_present = true;
        execute_dupl.id      = id;
        HANDLE_CODE(execute_dupl.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(execute_dupl.value.unpack(bref));
        break;
      }
      case 195: {
        res_coordination_transfer_info_present = true;
        res_coordination_transfer_info.id      = id;
        HANDLE_CODE(res_coordination_transfer_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_info.value.unpack(bref));
        break;
      }
      case 337: {
        sl_drbs_modified_conf_list_present = true;
        sl_drbs_modified_conf_list.id      = id;
        HANDLE_CODE(sl_drbs_modified_conf_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sl_drbs_modified_conf_list.value.unpack(bref));
        break;
      }
      case 604: {
        uu_rlc_ch_modified_list_present = true;
        uu_rlc_ch_modified_list.id      = id;
        HANDLE_CODE(uu_rlc_ch_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uu_rlc_ch_modified_list.value.unpack(bref));
        break;
      }
      case 616: {
        pc5_rlc_ch_modified_list_present = true;
        pc5_rlc_ch_modified_list.id      = id;
        HANDLE_CODE(pc5_rlc_ch_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_rlc_ch_modified_list.value.unpack(bref));
        break;
      }
      case 653: {
        ue_multicast_m_rbs_confirmed_to_be_modified_list_present = true;
        ue_multicast_m_rbs_confirmed_to_be_modified_list.id      = id;
        HANDLE_CODE(ue_multicast_m_rbs_confirmed_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_multicast_m_rbs_confirmed_to_be_modified_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_mod_confirm_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (res_coordination_transfer_container_present) {
    j.write_fieldname("");
    res_coordination_transfer_container.to_json(j);
  }
  if (drbs_modified_conf_list_present) {
    j.write_fieldname("");
    drbs_modified_conf_list.to_json(j);
  }
  if (rrc_container_present) {
    j.write_fieldname("");
    rrc_container.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (execute_dupl_present) {
    j.write_fieldname("");
    execute_dupl.to_json(j);
  }
  if (res_coordination_transfer_info_present) {
    j.write_fieldname("");
    res_coordination_transfer_info.to_json(j);
  }
  if (sl_drbs_modified_conf_list_present) {
    j.write_fieldname("");
    sl_drbs_modified_conf_list.to_json(j);
  }
  if (uu_rlc_ch_modified_list_present) {
    j.write_fieldname("");
    uu_rlc_ch_modified_list.to_json(j);
  }
  if (pc5_rlc_ch_modified_list_present) {
    j.write_fieldname("");
    pc5_rlc_ch_modified_list.to_json(j);
  }
  if (ue_multicast_m_rbs_confirmed_to_be_modified_list_present) {
    j.write_fieldname("");
    ue_multicast_m_rbs_confirmed_to_be_modified_list.to_json(j);
  }
  j.end_obj();
}

ue_context_mod_fail_ies_container::ue_context_mod_fail_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore),
  requested_target_cell_global_id(376, crit_e::reject)
{
}
SRSASN_CODE ue_context_mod_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += requested_target_cell_global_id_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (requested_target_cell_global_id_present) {
    HANDLE_CODE(requested_target_cell_global_id.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 376: {
        requested_target_cell_global_id_present = true;
        requested_target_cell_global_id.id      = id;
        HANDLE_CODE(requested_target_cell_global_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(requested_target_cell_global_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_mod_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (requested_target_cell_global_id_present) {
    j.write_fieldname("");
    requested_target_cell_global_id.to_json(j);
  }
  j.end_obj();
}

ue_context_mod_refuse_ies_container::ue_context_mod_refuse_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE ue_context_mod_refuse_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_refuse_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_mod_refuse_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

ue_context_mod_request_ies_container::ue_context_mod_request_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  sp_cell_id(63, crit_e::ignore),
  serv_cell_idx(107, crit_e::reject),
  sp_cell_ul_cfg(96, crit_e::ignore),
  drx_cycle(38, crit_e::ignore),
  cu_to_du_rrc_info(9, crit_e::reject),
  tx_action_ind(79, crit_e::ignore),
  res_coordination_transfer_container(49, crit_e::ignore),
  rrc_recfg_complete_ind(87, crit_e::ignore),
  rrc_container(50, crit_e::reject),
  scell_to_be_setup_mod_list(56, crit_e::ignore),
  scell_to_be_remd_list(52, crit_e::ignore),
  srbs_to_be_setup_mod_list(76, crit_e::reject),
  drbs_to_be_setup_mod_list(37, crit_e::reject),
  drbs_to_be_modified_list(31, crit_e::reject),
  srbs_to_be_released_list(72, crit_e::reject),
  drbs_to_be_released_list(33, crit_e::reject),
  inactivity_monitoring_request(97, crit_e::reject),
  rat_freq_prio_info(108, crit_e::reject),
  drx_cfg_ind(159, crit_e::ignore),
  rlc_fail_ind(174, crit_e::ignore),
  ul_tx_direct_current_list_info(175, crit_e::ignore),
  gnb_du_cfg_query(162, crit_e::reject),
  gnb_du_ue_ambr_ul(158, crit_e::ignore),
  execute_dupl(109, crit_e::ignore),
  rrc_delivery_status_request(184, crit_e::ignore),
  res_coordination_transfer_info(195, crit_e::ignore),
  serving_cell_mo(182, crit_e::ignore),
  needfor_gap(215, crit_e::ignore),
  full_cfg(94, crit_e::reject),
  add_rrm_prio_idx(248, crit_e::ignore),
  lower_layer_presence_status_change(253, crit_e::ignore),
  bh_chs_to_be_setup_mod_list(267, crit_e::reject),
  bh_chs_to_be_modified_list(263, crit_e::reject),
  bh_chs_to_be_released_list(265, crit_e::reject),
  nr_v2x_services_authorized(306, crit_e::ignore),
  ltev2x_services_authorized(307, crit_e::ignore),
  nr_ue_sidelink_aggr_max_bitrate(308, crit_e::ignore),
  lte_ue_sidelink_aggr_max_bitrate(309, crit_e::ignore),
  pc5_link_ambr(340, crit_e::ignore),
  sl_drbs_to_be_setup_mod_list(332, crit_e::reject),
  sl_drbs_to_be_modified_list(326, crit_e::reject),
  sl_drbs_to_be_released_list(328, crit_e::reject),
  conditional_intra_du_mob_info(374, crit_e::reject),
  f1_c_transfer_path(428, crit_e::reject),
  scg_ind(432, crit_e::ignore),
  ul_tx_direct_current_two_carrier_list_info(684, crit_e::ignore),
  iab_conditional_rrc_msg_delivery_ind(510, crit_e::reject),
  f1_c_transfer_path_nr_dc(511, crit_e::reject),
  mdt_polluted_meas_ind(536, crit_e::ignore),
  scg_activation_request(547, crit_e::ignore),
  cg_sdt_query_ind(586, crit_e::ignore),
  five_g_pro_se_authorized(594, crit_e::ignore),
  five_g_pro_se_ue_pc5_aggr_max_bitrate(595, crit_e::ignore),
  five_g_pro_se_pc5_link_ambr(596, crit_e::ignore),
  upd_remote_ue_local_id(618, crit_e::ignore),
  uu_rlc_ch_to_be_setup_list(599, crit_e::reject),
  uu_rlc_ch_to_be_modified_list(600, crit_e::reject),
  uu_rlc_ch_to_be_released_list(601, crit_e::reject),
  pc5_rlc_ch_to_be_setup_list(608, crit_e::reject),
  pc5_rlc_ch_to_be_modified_list(609, crit_e::reject),
  pc5_rlc_ch_to_be_released_list(610, crit_e::reject),
  path_switch_cfg(619, crit_e::ignore),
  gnb_du_ue_slice_max_bit_rate_list(626, crit_e::ignore),
  multicast_mbs_session_setup_list(632, crit_e::reject),
  multicast_mbs_session_rem_list(633, crit_e::reject),
  ue_multicast_m_rbs_to_be_setup_at_modify_list(685, crit_e::reject),
  ue_multicast_m_rbs_to_be_released_list(628, crit_e::reject),
  sldrx_cycle_list(643, crit_e::ignore),
  management_based_mdt_plmn_mod_list(647, crit_e::ignore),
  sdt_bearer_cfg_query_ind(675, crit_e::ignore),
  daps_ho_status(683, crit_e::ignore),
  serving_cell_mo_list(695, crit_e::ignore),
  ul_tx_direct_current_more_carrier_info(690, crit_e::ignore),
  cp_acmcg_info(691, crit_e::ignore)
{
}
SRSASN_CODE ue_context_mod_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += sp_cell_id_present ? 1 : 0;
  nof_ies += serv_cell_idx_present ? 1 : 0;
  nof_ies += sp_cell_ul_cfg_present ? 1 : 0;
  nof_ies += drx_cycle_present ? 1 : 0;
  nof_ies += cu_to_du_rrc_info_present ? 1 : 0;
  nof_ies += tx_action_ind_present ? 1 : 0;
  nof_ies += res_coordination_transfer_container_present ? 1 : 0;
  nof_ies += rrc_recfg_complete_ind_present ? 1 : 0;
  nof_ies += rrc_container_present ? 1 : 0;
  nof_ies += scell_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += scell_to_be_remd_list_present ? 1 : 0;
  nof_ies += srbs_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += drbs_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += drbs_to_be_modified_list_present ? 1 : 0;
  nof_ies += srbs_to_be_released_list_present ? 1 : 0;
  nof_ies += drbs_to_be_released_list_present ? 1 : 0;
  nof_ies += inactivity_monitoring_request_present ? 1 : 0;
  nof_ies += rat_freq_prio_info_present ? 1 : 0;
  nof_ies += drx_cfg_ind_present ? 1 : 0;
  nof_ies += rlc_fail_ind_present ? 1 : 0;
  nof_ies += ul_tx_direct_current_list_info_present ? 1 : 0;
  nof_ies += gnb_du_cfg_query_present ? 1 : 0;
  nof_ies += gnb_du_ue_ambr_ul_present ? 1 : 0;
  nof_ies += execute_dupl_present ? 1 : 0;
  nof_ies += rrc_delivery_status_request_present ? 1 : 0;
  nof_ies += res_coordination_transfer_info_present ? 1 : 0;
  nof_ies += serving_cell_mo_present ? 1 : 0;
  nof_ies += needfor_gap_present ? 1 : 0;
  nof_ies += full_cfg_present ? 1 : 0;
  nof_ies += add_rrm_prio_idx_present ? 1 : 0;
  nof_ies += lower_layer_presence_status_change_present ? 1 : 0;
  nof_ies += bh_chs_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += bh_chs_to_be_modified_list_present ? 1 : 0;
  nof_ies += bh_chs_to_be_released_list_present ? 1 : 0;
  nof_ies += nr_v2x_services_authorized_present ? 1 : 0;
  nof_ies += ltev2x_services_authorized_present ? 1 : 0;
  nof_ies += nr_ue_sidelink_aggr_max_bitrate_present ? 1 : 0;
  nof_ies += lte_ue_sidelink_aggr_max_bitrate_present ? 1 : 0;
  nof_ies += pc5_link_ambr_present ? 1 : 0;
  nof_ies += sl_drbs_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += sl_drbs_to_be_modified_list_present ? 1 : 0;
  nof_ies += sl_drbs_to_be_released_list_present ? 1 : 0;
  nof_ies += conditional_intra_du_mob_info_present ? 1 : 0;
  nof_ies += f1_c_transfer_path_present ? 1 : 0;
  nof_ies += scg_ind_present ? 1 : 0;
  nof_ies += ul_tx_direct_current_two_carrier_list_info_present ? 1 : 0;
  nof_ies += iab_conditional_rrc_msg_delivery_ind_present ? 1 : 0;
  nof_ies += f1_c_transfer_path_nr_dc_present ? 1 : 0;
  nof_ies += mdt_polluted_meas_ind_present ? 1 : 0;
  nof_ies += scg_activation_request_present ? 1 : 0;
  nof_ies += cg_sdt_query_ind_present ? 1 : 0;
  nof_ies += five_g_pro_se_authorized_present ? 1 : 0;
  nof_ies += five_g_pro_se_ue_pc5_aggr_max_bitrate_present ? 1 : 0;
  nof_ies += five_g_pro_se_pc5_link_ambr_present ? 1 : 0;
  nof_ies += upd_remote_ue_local_id_present ? 1 : 0;
  nof_ies += uu_rlc_ch_to_be_setup_list_present ? 1 : 0;
  nof_ies += uu_rlc_ch_to_be_modified_list_present ? 1 : 0;
  nof_ies += uu_rlc_ch_to_be_released_list_present ? 1 : 0;
  nof_ies += pc5_rlc_ch_to_be_setup_list_present ? 1 : 0;
  nof_ies += pc5_rlc_ch_to_be_modified_list_present ? 1 : 0;
  nof_ies += pc5_rlc_ch_to_be_released_list_present ? 1 : 0;
  nof_ies += path_switch_cfg_present ? 1 : 0;
  nof_ies += gnb_du_ue_slice_max_bit_rate_list_present ? 1 : 0;
  nof_ies += multicast_mbs_session_setup_list_present ? 1 : 0;
  nof_ies += multicast_mbs_session_rem_list_present ? 1 : 0;
  nof_ies += ue_multicast_m_rbs_to_be_setup_at_modify_list_present ? 1 : 0;
  nof_ies += ue_multicast_m_rbs_to_be_released_list_present ? 1 : 0;
  nof_ies += sldrx_cycle_list_present ? 1 : 0;
  nof_ies += management_based_mdt_plmn_mod_list_present ? 1 : 0;
  nof_ies += sdt_bearer_cfg_query_ind_present ? 1 : 0;
  nof_ies += daps_ho_status_present ? 1 : 0;
  nof_ies += serving_cell_mo_list_present ? 1 : 0;
  nof_ies += ul_tx_direct_current_more_carrier_info_present ? 1 : 0;
  nof_ies += cp_acmcg_info_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (sp_cell_id_present) {
    HANDLE_CODE(sp_cell_id.pack(bref));
  }
  if (serv_cell_idx_present) {
    HANDLE_CODE(serv_cell_idx.pack(bref));
  }
  if (sp_cell_ul_cfg_present) {
    HANDLE_CODE(sp_cell_ul_cfg.pack(bref));
  }
  if (drx_cycle_present) {
    HANDLE_CODE(drx_cycle.pack(bref));
  }
  if (cu_to_du_rrc_info_present) {
    HANDLE_CODE(cu_to_du_rrc_info.pack(bref));
  }
  if (tx_action_ind_present) {
    HANDLE_CODE(tx_action_ind.pack(bref));
  }
  if (res_coordination_transfer_container_present) {
    HANDLE_CODE(res_coordination_transfer_container.pack(bref));
  }
  if (rrc_recfg_complete_ind_present) {
    HANDLE_CODE(rrc_recfg_complete_ind.pack(bref));
  }
  if (rrc_container_present) {
    HANDLE_CODE(rrc_container.pack(bref));
  }
  if (scell_to_be_setup_mod_list_present) {
    HANDLE_CODE(scell_to_be_setup_mod_list.pack(bref));
  }
  if (scell_to_be_remd_list_present) {
    HANDLE_CODE(scell_to_be_remd_list.pack(bref));
  }
  if (srbs_to_be_setup_mod_list_present) {
    HANDLE_CODE(srbs_to_be_setup_mod_list.pack(bref));
  }
  if (drbs_to_be_setup_mod_list_present) {
    HANDLE_CODE(drbs_to_be_setup_mod_list.pack(bref));
  }
  if (drbs_to_be_modified_list_present) {
    HANDLE_CODE(drbs_to_be_modified_list.pack(bref));
  }
  if (srbs_to_be_released_list_present) {
    HANDLE_CODE(srbs_to_be_released_list.pack(bref));
  }
  if (drbs_to_be_released_list_present) {
    HANDLE_CODE(drbs_to_be_released_list.pack(bref));
  }
  if (inactivity_monitoring_request_present) {
    HANDLE_CODE(inactivity_monitoring_request.pack(bref));
  }
  if (rat_freq_prio_info_present) {
    HANDLE_CODE(rat_freq_prio_info.pack(bref));
  }
  if (drx_cfg_ind_present) {
    HANDLE_CODE(drx_cfg_ind.pack(bref));
  }
  if (rlc_fail_ind_present) {
    HANDLE_CODE(rlc_fail_ind.pack(bref));
  }
  if (ul_tx_direct_current_list_info_present) {
    HANDLE_CODE(ul_tx_direct_current_list_info.pack(bref));
  }
  if (gnb_du_cfg_query_present) {
    HANDLE_CODE(gnb_du_cfg_query.pack(bref));
  }
  if (gnb_du_ue_ambr_ul_present) {
    HANDLE_CODE(gnb_du_ue_ambr_ul.pack(bref));
  }
  if (execute_dupl_present) {
    HANDLE_CODE(execute_dupl.pack(bref));
  }
  if (rrc_delivery_status_request_present) {
    HANDLE_CODE(rrc_delivery_status_request.pack(bref));
  }
  if (res_coordination_transfer_info_present) {
    HANDLE_CODE(res_coordination_transfer_info.pack(bref));
  }
  if (serving_cell_mo_present) {
    HANDLE_CODE(serving_cell_mo.pack(bref));
  }
  if (needfor_gap_present) {
    HANDLE_CODE(needfor_gap.pack(bref));
  }
  if (full_cfg_present) {
    HANDLE_CODE(full_cfg.pack(bref));
  }
  if (add_rrm_prio_idx_present) {
    HANDLE_CODE(add_rrm_prio_idx.pack(bref));
  }
  if (lower_layer_presence_status_change_present) {
    HANDLE_CODE(lower_layer_presence_status_change.pack(bref));
  }
  if (bh_chs_to_be_setup_mod_list_present) {
    HANDLE_CODE(bh_chs_to_be_setup_mod_list.pack(bref));
  }
  if (bh_chs_to_be_modified_list_present) {
    HANDLE_CODE(bh_chs_to_be_modified_list.pack(bref));
  }
  if (bh_chs_to_be_released_list_present) {
    HANDLE_CODE(bh_chs_to_be_released_list.pack(bref));
  }
  if (nr_v2x_services_authorized_present) {
    HANDLE_CODE(nr_v2x_services_authorized.pack(bref));
  }
  if (ltev2x_services_authorized_present) {
    HANDLE_CODE(ltev2x_services_authorized.pack(bref));
  }
  if (nr_ue_sidelink_aggr_max_bitrate_present) {
    HANDLE_CODE(nr_ue_sidelink_aggr_max_bitrate.pack(bref));
  }
  if (lte_ue_sidelink_aggr_max_bitrate_present) {
    HANDLE_CODE(lte_ue_sidelink_aggr_max_bitrate.pack(bref));
  }
  if (pc5_link_ambr_present) {
    HANDLE_CODE(pc5_link_ambr.pack(bref));
  }
  if (sl_drbs_to_be_setup_mod_list_present) {
    HANDLE_CODE(sl_drbs_to_be_setup_mod_list.pack(bref));
  }
  if (sl_drbs_to_be_modified_list_present) {
    HANDLE_CODE(sl_drbs_to_be_modified_list.pack(bref));
  }
  if (sl_drbs_to_be_released_list_present) {
    HANDLE_CODE(sl_drbs_to_be_released_list.pack(bref));
  }
  if (conditional_intra_du_mob_info_present) {
    HANDLE_CODE(conditional_intra_du_mob_info.pack(bref));
  }
  if (f1_c_transfer_path_present) {
    HANDLE_CODE(f1_c_transfer_path.pack(bref));
  }
  if (scg_ind_present) {
    HANDLE_CODE(scg_ind.pack(bref));
  }
  if (ul_tx_direct_current_two_carrier_list_info_present) {
    HANDLE_CODE(ul_tx_direct_current_two_carrier_list_info.pack(bref));
  }
  if (iab_conditional_rrc_msg_delivery_ind_present) {
    HANDLE_CODE(iab_conditional_rrc_msg_delivery_ind.pack(bref));
  }
  if (f1_c_transfer_path_nr_dc_present) {
    HANDLE_CODE(f1_c_transfer_path_nr_dc.pack(bref));
  }
  if (mdt_polluted_meas_ind_present) {
    HANDLE_CODE(mdt_polluted_meas_ind.pack(bref));
  }
  if (scg_activation_request_present) {
    HANDLE_CODE(scg_activation_request.pack(bref));
  }
  if (cg_sdt_query_ind_present) {
    HANDLE_CODE(cg_sdt_query_ind.pack(bref));
  }
  if (five_g_pro_se_authorized_present) {
    HANDLE_CODE(five_g_pro_se_authorized.pack(bref));
  }
  if (five_g_pro_se_ue_pc5_aggr_max_bitrate_present) {
    HANDLE_CODE(five_g_pro_se_ue_pc5_aggr_max_bitrate.pack(bref));
  }
  if (five_g_pro_se_pc5_link_ambr_present) {
    HANDLE_CODE(five_g_pro_se_pc5_link_ambr.pack(bref));
  }
  if (upd_remote_ue_local_id_present) {
    HANDLE_CODE(upd_remote_ue_local_id.pack(bref));
  }
  if (uu_rlc_ch_to_be_setup_list_present) {
    HANDLE_CODE(uu_rlc_ch_to_be_setup_list.pack(bref));
  }
  if (uu_rlc_ch_to_be_modified_list_present) {
    HANDLE_CODE(uu_rlc_ch_to_be_modified_list.pack(bref));
  }
  if (uu_rlc_ch_to_be_released_list_present) {
    HANDLE_CODE(uu_rlc_ch_to_be_released_list.pack(bref));
  }
  if (pc5_rlc_ch_to_be_setup_list_present) {
    HANDLE_CODE(pc5_rlc_ch_to_be_setup_list.pack(bref));
  }
  if (pc5_rlc_ch_to_be_modified_list_present) {
    HANDLE_CODE(pc5_rlc_ch_to_be_modified_list.pack(bref));
  }
  if (pc5_rlc_ch_to_be_released_list_present) {
    HANDLE_CODE(pc5_rlc_ch_to_be_released_list.pack(bref));
  }
  if (path_switch_cfg_present) {
    HANDLE_CODE(path_switch_cfg.pack(bref));
  }
  if (gnb_du_ue_slice_max_bit_rate_list_present) {
    HANDLE_CODE(gnb_du_ue_slice_max_bit_rate_list.pack(bref));
  }
  if (multicast_mbs_session_setup_list_present) {
    HANDLE_CODE(multicast_mbs_session_setup_list.pack(bref));
  }
  if (multicast_mbs_session_rem_list_present) {
    HANDLE_CODE(multicast_mbs_session_rem_list.pack(bref));
  }
  if (ue_multicast_m_rbs_to_be_setup_at_modify_list_present) {
    HANDLE_CODE(ue_multicast_m_rbs_to_be_setup_at_modify_list.pack(bref));
  }
  if (ue_multicast_m_rbs_to_be_released_list_present) {
    HANDLE_CODE(ue_multicast_m_rbs_to_be_released_list.pack(bref));
  }
  if (sldrx_cycle_list_present) {
    HANDLE_CODE(sldrx_cycle_list.pack(bref));
  }
  if (management_based_mdt_plmn_mod_list_present) {
    HANDLE_CODE(management_based_mdt_plmn_mod_list.pack(bref));
  }
  if (sdt_bearer_cfg_query_ind_present) {
    HANDLE_CODE(sdt_bearer_cfg_query_ind.pack(bref));
  }
  if (daps_ho_status_present) {
    HANDLE_CODE(daps_ho_status.pack(bref));
  }
  if (serving_cell_mo_list_present) {
    HANDLE_CODE(serving_cell_mo_list.pack(bref));
  }
  if (ul_tx_direct_current_more_carrier_info_present) {
    HANDLE_CODE(ul_tx_direct_current_more_carrier_info.pack(bref));
  }
  if (cp_acmcg_info_present) {
    HANDLE_CODE(cp_acmcg_info.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 63: {
        sp_cell_id_present = true;
        sp_cell_id.id      = id;
        HANDLE_CODE(sp_cell_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sp_cell_id.value.unpack(bref));
        break;
      }
      case 107: {
        serv_cell_idx_present = true;
        serv_cell_idx.id      = id;
        HANDLE_CODE(serv_cell_idx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serv_cell_idx.value.unpack(bref));
        break;
      }
      case 96: {
        sp_cell_ul_cfg_present = true;
        sp_cell_ul_cfg.id      = id;
        HANDLE_CODE(sp_cell_ul_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sp_cell_ul_cfg.value.unpack(bref));
        break;
      }
      case 38: {
        drx_cycle_present = true;
        drx_cycle.id      = id;
        HANDLE_CODE(drx_cycle.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drx_cycle.value.unpack(bref));
        break;
      }
      case 9: {
        cu_to_du_rrc_info_present = true;
        cu_to_du_rrc_info.id      = id;
        HANDLE_CODE(cu_to_du_rrc_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cu_to_du_rrc_info.value.unpack(bref));
        break;
      }
      case 79: {
        tx_action_ind_present = true;
        tx_action_ind.id      = id;
        HANDLE_CODE(tx_action_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(tx_action_ind.value.unpack(bref));
        break;
      }
      case 49: {
        res_coordination_transfer_container_present = true;
        res_coordination_transfer_container.id      = id;
        HANDLE_CODE(res_coordination_transfer_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_container.value.unpack(bref));
        break;
      }
      case 87: {
        rrc_recfg_complete_ind_present = true;
        rrc_recfg_complete_ind.id      = id;
        HANDLE_CODE(rrc_recfg_complete_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_recfg_complete_ind.value.unpack(bref));
        break;
      }
      case 50: {
        rrc_container_present = true;
        rrc_container.id      = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 56: {
        scell_to_be_setup_mod_list_present = true;
        scell_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(scell_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scell_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 52: {
        scell_to_be_remd_list_present = true;
        scell_to_be_remd_list.id      = id;
        HANDLE_CODE(scell_to_be_remd_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scell_to_be_remd_list.value.unpack(bref));
        break;
      }
      case 76: {
        srbs_to_be_setup_mod_list_present = true;
        srbs_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(srbs_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 37: {
        drbs_to_be_setup_mod_list_present = true;
        drbs_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(drbs_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 31: {
        drbs_to_be_modified_list_present = true;
        drbs_to_be_modified_list.id      = id;
        HANDLE_CODE(drbs_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 72: {
        srbs_to_be_released_list_present = true;
        srbs_to_be_released_list.id      = id;
        HANDLE_CODE(srbs_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_to_be_released_list.value.unpack(bref));
        break;
      }
      case 33: {
        drbs_to_be_released_list_present = true;
        drbs_to_be_released_list.id      = id;
        HANDLE_CODE(drbs_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_to_be_released_list.value.unpack(bref));
        break;
      }
      case 97: {
        inactivity_monitoring_request_present = true;
        inactivity_monitoring_request.id      = id;
        HANDLE_CODE(inactivity_monitoring_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(inactivity_monitoring_request.value.unpack(bref));
        break;
      }
      case 108: {
        rat_freq_prio_info_present = true;
        rat_freq_prio_info.id      = id;
        HANDLE_CODE(rat_freq_prio_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rat_freq_prio_info.value.unpack(bref));
        break;
      }
      case 159: {
        drx_cfg_ind_present = true;
        drx_cfg_ind.id      = id;
        HANDLE_CODE(drx_cfg_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drx_cfg_ind.value.unpack(bref));
        break;
      }
      case 174: {
        rlc_fail_ind_present = true;
        rlc_fail_ind.id      = id;
        HANDLE_CODE(rlc_fail_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rlc_fail_ind.value.unpack(bref));
        break;
      }
      case 175: {
        ul_tx_direct_current_list_info_present = true;
        ul_tx_direct_current_list_info.id      = id;
        HANDLE_CODE(ul_tx_direct_current_list_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_tx_direct_current_list_info.value.unpack(bref));
        break;
      }
      case 162: {
        gnb_du_cfg_query_present = true;
        gnb_du_cfg_query.id      = id;
        HANDLE_CODE(gnb_du_cfg_query.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_cfg_query.value.unpack(bref));
        break;
      }
      case 158: {
        gnb_du_ue_ambr_ul_present = true;
        gnb_du_ue_ambr_ul.id      = id;
        HANDLE_CODE(gnb_du_ue_ambr_ul.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_ambr_ul.value.unpack(bref));
        break;
      }
      case 109: {
        execute_dupl_present = true;
        execute_dupl.id      = id;
        HANDLE_CODE(execute_dupl.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(execute_dupl.value.unpack(bref));
        break;
      }
      case 184: {
        rrc_delivery_status_request_present = true;
        rrc_delivery_status_request.id      = id;
        HANDLE_CODE(rrc_delivery_status_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_delivery_status_request.value.unpack(bref));
        break;
      }
      case 195: {
        res_coordination_transfer_info_present = true;
        res_coordination_transfer_info.id      = id;
        HANDLE_CODE(res_coordination_transfer_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_info.value.unpack(bref));
        break;
      }
      case 182: {
        serving_cell_mo_present = true;
        serving_cell_mo.id      = id;
        HANDLE_CODE(serving_cell_mo.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serving_cell_mo.value.unpack(bref));
        break;
      }
      case 215: {
        needfor_gap_present = true;
        needfor_gap.id      = id;
        HANDLE_CODE(needfor_gap.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(needfor_gap.value.unpack(bref));
        break;
      }
      case 94: {
        full_cfg_present = true;
        full_cfg.id      = id;
        HANDLE_CODE(full_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(full_cfg.value.unpack(bref));
        break;
      }
      case 248: {
        add_rrm_prio_idx_present = true;
        add_rrm_prio_idx.id      = id;
        HANDLE_CODE(add_rrm_prio_idx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(add_rrm_prio_idx.value.unpack(bref));
        break;
      }
      case 253: {
        lower_layer_presence_status_change_present = true;
        lower_layer_presence_status_change.id      = id;
        HANDLE_CODE(lower_layer_presence_status_change.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lower_layer_presence_status_change.value.unpack(bref));
        break;
      }
      case 267: {
        bh_chs_to_be_setup_mod_list_present = true;
        bh_chs_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(bh_chs_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bh_chs_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 263: {
        bh_chs_to_be_modified_list_present = true;
        bh_chs_to_be_modified_list.id      = id;
        HANDLE_CODE(bh_chs_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bh_chs_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 265: {
        bh_chs_to_be_released_list_present = true;
        bh_chs_to_be_released_list.id      = id;
        HANDLE_CODE(bh_chs_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bh_chs_to_be_released_list.value.unpack(bref));
        break;
      }
      case 306: {
        nr_v2x_services_authorized_present = true;
        nr_v2x_services_authorized.id      = id;
        HANDLE_CODE(nr_v2x_services_authorized.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_v2x_services_authorized.value.unpack(bref));
        break;
      }
      case 307: {
        ltev2x_services_authorized_present = true;
        ltev2x_services_authorized.id      = id;
        HANDLE_CODE(ltev2x_services_authorized.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ltev2x_services_authorized.value.unpack(bref));
        break;
      }
      case 308: {
        nr_ue_sidelink_aggr_max_bitrate_present = true;
        nr_ue_sidelink_aggr_max_bitrate.id      = id;
        HANDLE_CODE(nr_ue_sidelink_aggr_max_bitrate.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_ue_sidelink_aggr_max_bitrate.value.unpack(bref));
        break;
      }
      case 309: {
        lte_ue_sidelink_aggr_max_bitrate_present = true;
        lte_ue_sidelink_aggr_max_bitrate.id      = id;
        HANDLE_CODE(lte_ue_sidelink_aggr_max_bitrate.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lte_ue_sidelink_aggr_max_bitrate.value.unpack(bref));
        break;
      }
      case 340: {
        pc5_link_ambr_present = true;
        pc5_link_ambr.id      = id;
        HANDLE_CODE(pc5_link_ambr.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_link_ambr.value.unpack(bref));
        break;
      }
      case 332: {
        sl_drbs_to_be_setup_mod_list_present = true;
        sl_drbs_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(sl_drbs_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sl_drbs_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 326: {
        sl_drbs_to_be_modified_list_present = true;
        sl_drbs_to_be_modified_list.id      = id;
        HANDLE_CODE(sl_drbs_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sl_drbs_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 328: {
        sl_drbs_to_be_released_list_present = true;
        sl_drbs_to_be_released_list.id      = id;
        HANDLE_CODE(sl_drbs_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sl_drbs_to_be_released_list.value.unpack(bref));
        break;
      }
      case 374: {
        conditional_intra_du_mob_info_present = true;
        conditional_intra_du_mob_info.id      = id;
        HANDLE_CODE(conditional_intra_du_mob_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(conditional_intra_du_mob_info.value.unpack(bref));
        break;
      }
      case 428: {
        f1_c_transfer_path_present = true;
        f1_c_transfer_path.id      = id;
        HANDLE_CODE(f1_c_transfer_path.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(f1_c_transfer_path.value.unpack(bref));
        break;
      }
      case 432: {
        scg_ind_present = true;
        scg_ind.id      = id;
        HANDLE_CODE(scg_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scg_ind.value.unpack(bref));
        break;
      }
      case 684: {
        ul_tx_direct_current_two_carrier_list_info_present = true;
        ul_tx_direct_current_two_carrier_list_info.id      = id;
        HANDLE_CODE(ul_tx_direct_current_two_carrier_list_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_tx_direct_current_two_carrier_list_info.value.unpack(bref));
        break;
      }
      case 510: {
        iab_conditional_rrc_msg_delivery_ind_present = true;
        iab_conditional_rrc_msg_delivery_ind.id      = id;
        HANDLE_CODE(iab_conditional_rrc_msg_delivery_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(iab_conditional_rrc_msg_delivery_ind.value.unpack(bref));
        break;
      }
      case 511: {
        f1_c_transfer_path_nr_dc_present = true;
        f1_c_transfer_path_nr_dc.id      = id;
        HANDLE_CODE(f1_c_transfer_path_nr_dc.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(f1_c_transfer_path_nr_dc.value.unpack(bref));
        break;
      }
      case 536: {
        mdt_polluted_meas_ind_present = true;
        mdt_polluted_meas_ind.id      = id;
        HANDLE_CODE(mdt_polluted_meas_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mdt_polluted_meas_ind.value.unpack(bref));
        break;
      }
      case 547: {
        scg_activation_request_present = true;
        scg_activation_request.id      = id;
        HANDLE_CODE(scg_activation_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scg_activation_request.value.unpack(bref));
        break;
      }
      case 586: {
        cg_sdt_query_ind_present = true;
        cg_sdt_query_ind.id      = id;
        HANDLE_CODE(cg_sdt_query_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cg_sdt_query_ind.value.unpack(bref));
        break;
      }
      case 594: {
        five_g_pro_se_authorized_present = true;
        five_g_pro_se_authorized.id      = id;
        HANDLE_CODE(five_g_pro_se_authorized.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(five_g_pro_se_authorized.value.unpack(bref));
        break;
      }
      case 595: {
        five_g_pro_se_ue_pc5_aggr_max_bitrate_present = true;
        five_g_pro_se_ue_pc5_aggr_max_bitrate.id      = id;
        HANDLE_CODE(five_g_pro_se_ue_pc5_aggr_max_bitrate.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(five_g_pro_se_ue_pc5_aggr_max_bitrate.value.unpack(bref));
        break;
      }
      case 596: {
        five_g_pro_se_pc5_link_ambr_present = true;
        five_g_pro_se_pc5_link_ambr.id      = id;
        HANDLE_CODE(five_g_pro_se_pc5_link_ambr.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(five_g_pro_se_pc5_link_ambr.value.unpack(bref));
        break;
      }
      case 618: {
        upd_remote_ue_local_id_present = true;
        upd_remote_ue_local_id.id      = id;
        HANDLE_CODE(upd_remote_ue_local_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(upd_remote_ue_local_id.value.unpack(bref));
        break;
      }
      case 599: {
        uu_rlc_ch_to_be_setup_list_present = true;
        uu_rlc_ch_to_be_setup_list.id      = id;
        HANDLE_CODE(uu_rlc_ch_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uu_rlc_ch_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 600: {
        uu_rlc_ch_to_be_modified_list_present = true;
        uu_rlc_ch_to_be_modified_list.id      = id;
        HANDLE_CODE(uu_rlc_ch_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uu_rlc_ch_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 601: {
        uu_rlc_ch_to_be_released_list_present = true;
        uu_rlc_ch_to_be_released_list.id      = id;
        HANDLE_CODE(uu_rlc_ch_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uu_rlc_ch_to_be_released_list.value.unpack(bref));
        break;
      }
      case 608: {
        pc5_rlc_ch_to_be_setup_list_present = true;
        pc5_rlc_ch_to_be_setup_list.id      = id;
        HANDLE_CODE(pc5_rlc_ch_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_rlc_ch_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 609: {
        pc5_rlc_ch_to_be_modified_list_present = true;
        pc5_rlc_ch_to_be_modified_list.id      = id;
        HANDLE_CODE(pc5_rlc_ch_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_rlc_ch_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 610: {
        pc5_rlc_ch_to_be_released_list_present = true;
        pc5_rlc_ch_to_be_released_list.id      = id;
        HANDLE_CODE(pc5_rlc_ch_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_rlc_ch_to_be_released_list.value.unpack(bref));
        break;
      }
      case 619: {
        path_switch_cfg_present = true;
        path_switch_cfg.id      = id;
        HANDLE_CODE(path_switch_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(path_switch_cfg.value.unpack(bref));
        break;
      }
      case 626: {
        gnb_du_ue_slice_max_bit_rate_list_present = true;
        gnb_du_ue_slice_max_bit_rate_list.id      = id;
        HANDLE_CODE(gnb_du_ue_slice_max_bit_rate_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_slice_max_bit_rate_list.value.unpack(bref));
        break;
      }
      case 632: {
        multicast_mbs_session_setup_list_present = true;
        multicast_mbs_session_setup_list.id      = id;
        HANDLE_CODE(multicast_mbs_session_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_mbs_session_setup_list.value.unpack(bref));
        break;
      }
      case 633: {
        multicast_mbs_session_rem_list_present = true;
        multicast_mbs_session_rem_list.id      = id;
        HANDLE_CODE(multicast_mbs_session_rem_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_mbs_session_rem_list.value.unpack(bref));
        break;
      }
      case 685: {
        ue_multicast_m_rbs_to_be_setup_at_modify_list_present = true;
        ue_multicast_m_rbs_to_be_setup_at_modify_list.id      = id;
        HANDLE_CODE(ue_multicast_m_rbs_to_be_setup_at_modify_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_multicast_m_rbs_to_be_setup_at_modify_list.value.unpack(bref));
        break;
      }
      case 628: {
        ue_multicast_m_rbs_to_be_released_list_present = true;
        ue_multicast_m_rbs_to_be_released_list.id      = id;
        HANDLE_CODE(ue_multicast_m_rbs_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_multicast_m_rbs_to_be_released_list.value.unpack(bref));
        break;
      }
      case 643: {
        sldrx_cycle_list_present = true;
        sldrx_cycle_list.id      = id;
        HANDLE_CODE(sldrx_cycle_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sldrx_cycle_list.value.unpack(bref));
        break;
      }
      case 647: {
        management_based_mdt_plmn_mod_list_present = true;
        management_based_mdt_plmn_mod_list.id      = id;
        HANDLE_CODE(management_based_mdt_plmn_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(management_based_mdt_plmn_mod_list.value.unpack(bref));
        break;
      }
      case 675: {
        sdt_bearer_cfg_query_ind_present = true;
        sdt_bearer_cfg_query_ind.id      = id;
        HANDLE_CODE(sdt_bearer_cfg_query_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sdt_bearer_cfg_query_ind.value.unpack(bref));
        break;
      }
      case 683: {
        daps_ho_status_present = true;
        daps_ho_status.id      = id;
        HANDLE_CODE(daps_ho_status.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(daps_ho_status.value.unpack(bref));
        break;
      }
      case 695: {
        serving_cell_mo_list_present = true;
        serving_cell_mo_list.id      = id;
        HANDLE_CODE(serving_cell_mo_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serving_cell_mo_list.value.unpack(bref));
        break;
      }
      case 690: {
        ul_tx_direct_current_more_carrier_info_present = true;
        ul_tx_direct_current_more_carrier_info.id      = id;
        HANDLE_CODE(ul_tx_direct_current_more_carrier_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_tx_direct_current_more_carrier_info.value.unpack(bref));
        break;
      }
      case 691: {
        cp_acmcg_info_present = true;
        cp_acmcg_info.id      = id;
        HANDLE_CODE(cp_acmcg_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cp_acmcg_info.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_mod_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (sp_cell_id_present) {
    j.write_fieldname("");
    sp_cell_id.to_json(j);
  }
  if (serv_cell_idx_present) {
    j.write_fieldname("");
    serv_cell_idx.to_json(j);
  }
  if (sp_cell_ul_cfg_present) {
    j.write_fieldname("");
    sp_cell_ul_cfg.to_json(j);
  }
  if (drx_cycle_present) {
    j.write_fieldname("");
    drx_cycle.to_json(j);
  }
  if (cu_to_du_rrc_info_present) {
    j.write_fieldname("");
    cu_to_du_rrc_info.to_json(j);
  }
  if (tx_action_ind_present) {
    j.write_fieldname("");
    tx_action_ind.to_json(j);
  }
  if (res_coordination_transfer_container_present) {
    j.write_fieldname("");
    res_coordination_transfer_container.to_json(j);
  }
  if (rrc_recfg_complete_ind_present) {
    j.write_fieldname("");
    rrc_recfg_complete_ind.to_json(j);
  }
  if (rrc_container_present) {
    j.write_fieldname("");
    rrc_container.to_json(j);
  }
  if (scell_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    scell_to_be_setup_mod_list.to_json(j);
  }
  if (scell_to_be_remd_list_present) {
    j.write_fieldname("");
    scell_to_be_remd_list.to_json(j);
  }
  if (srbs_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    srbs_to_be_setup_mod_list.to_json(j);
  }
  if (drbs_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    drbs_to_be_setup_mod_list.to_json(j);
  }
  if (drbs_to_be_modified_list_present) {
    j.write_fieldname("");
    drbs_to_be_modified_list.to_json(j);
  }
  if (srbs_to_be_released_list_present) {
    j.write_fieldname("");
    srbs_to_be_released_list.to_json(j);
  }
  if (drbs_to_be_released_list_present) {
    j.write_fieldname("");
    drbs_to_be_released_list.to_json(j);
  }
  if (inactivity_monitoring_request_present) {
    j.write_fieldname("");
    inactivity_monitoring_request.to_json(j);
  }
  if (rat_freq_prio_info_present) {
    j.write_fieldname("");
    rat_freq_prio_info.to_json(j);
  }
  if (drx_cfg_ind_present) {
    j.write_fieldname("");
    drx_cfg_ind.to_json(j);
  }
  if (rlc_fail_ind_present) {
    j.write_fieldname("");
    rlc_fail_ind.to_json(j);
  }
  if (ul_tx_direct_current_list_info_present) {
    j.write_fieldname("");
    ul_tx_direct_current_list_info.to_json(j);
  }
  if (gnb_du_cfg_query_present) {
    j.write_fieldname("");
    gnb_du_cfg_query.to_json(j);
  }
  if (gnb_du_ue_ambr_ul_present) {
    j.write_fieldname("");
    gnb_du_ue_ambr_ul.to_json(j);
  }
  if (execute_dupl_present) {
    j.write_fieldname("");
    execute_dupl.to_json(j);
  }
  if (rrc_delivery_status_request_present) {
    j.write_fieldname("");
    rrc_delivery_status_request.to_json(j);
  }
  if (res_coordination_transfer_info_present) {
    j.write_fieldname("");
    res_coordination_transfer_info.to_json(j);
  }
  if (serving_cell_mo_present) {
    j.write_fieldname("");
    serving_cell_mo.to_json(j);
  }
  if (needfor_gap_present) {
    j.write_fieldname("");
    needfor_gap.to_json(j);
  }
  if (full_cfg_present) {
    j.write_fieldname("");
    full_cfg.to_json(j);
  }
  if (add_rrm_prio_idx_present) {
    j.write_fieldname("");
    add_rrm_prio_idx.to_json(j);
  }
  if (lower_layer_presence_status_change_present) {
    j.write_fieldname("");
    lower_layer_presence_status_change.to_json(j);
  }
  if (bh_chs_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    bh_chs_to_be_setup_mod_list.to_json(j);
  }
  if (bh_chs_to_be_modified_list_present) {
    j.write_fieldname("");
    bh_chs_to_be_modified_list.to_json(j);
  }
  if (bh_chs_to_be_released_list_present) {
    j.write_fieldname("");
    bh_chs_to_be_released_list.to_json(j);
  }
  if (nr_v2x_services_authorized_present) {
    j.write_fieldname("");
    nr_v2x_services_authorized.to_json(j);
  }
  if (ltev2x_services_authorized_present) {
    j.write_fieldname("");
    ltev2x_services_authorized.to_json(j);
  }
  if (nr_ue_sidelink_aggr_max_bitrate_present) {
    j.write_fieldname("");
    nr_ue_sidelink_aggr_max_bitrate.to_json(j);
  }
  if (lte_ue_sidelink_aggr_max_bitrate_present) {
    j.write_fieldname("");
    lte_ue_sidelink_aggr_max_bitrate.to_json(j);
  }
  if (pc5_link_ambr_present) {
    j.write_fieldname("");
    pc5_link_ambr.to_json(j);
  }
  if (sl_drbs_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    sl_drbs_to_be_setup_mod_list.to_json(j);
  }
  if (sl_drbs_to_be_modified_list_present) {
    j.write_fieldname("");
    sl_drbs_to_be_modified_list.to_json(j);
  }
  if (sl_drbs_to_be_released_list_present) {
    j.write_fieldname("");
    sl_drbs_to_be_released_list.to_json(j);
  }
  if (conditional_intra_du_mob_info_present) {
    j.write_fieldname("");
    conditional_intra_du_mob_info.to_json(j);
  }
  if (f1_c_transfer_path_present) {
    j.write_fieldname("");
    f1_c_transfer_path.to_json(j);
  }
  if (scg_ind_present) {
    j.write_fieldname("");
    scg_ind.to_json(j);
  }
  if (ul_tx_direct_current_two_carrier_list_info_present) {
    j.write_fieldname("");
    ul_tx_direct_current_two_carrier_list_info.to_json(j);
  }
  if (iab_conditional_rrc_msg_delivery_ind_present) {
    j.write_fieldname("");
    iab_conditional_rrc_msg_delivery_ind.to_json(j);
  }
  if (f1_c_transfer_path_nr_dc_present) {
    j.write_fieldname("");
    f1_c_transfer_path_nr_dc.to_json(j);
  }
  if (mdt_polluted_meas_ind_present) {
    j.write_fieldname("");
    mdt_polluted_meas_ind.to_json(j);
  }
  if (scg_activation_request_present) {
    j.write_fieldname("");
    scg_activation_request.to_json(j);
  }
  if (cg_sdt_query_ind_present) {
    j.write_fieldname("");
    cg_sdt_query_ind.to_json(j);
  }
  if (five_g_pro_se_authorized_present) {
    j.write_fieldname("");
    five_g_pro_se_authorized.to_json(j);
  }
  if (five_g_pro_se_ue_pc5_aggr_max_bitrate_present) {
    j.write_fieldname("");
    five_g_pro_se_ue_pc5_aggr_max_bitrate.to_json(j);
  }
  if (five_g_pro_se_pc5_link_ambr_present) {
    j.write_fieldname("");
    five_g_pro_se_pc5_link_ambr.to_json(j);
  }
  if (upd_remote_ue_local_id_present) {
    j.write_fieldname("");
    upd_remote_ue_local_id.to_json(j);
  }
  if (uu_rlc_ch_to_be_setup_list_present) {
    j.write_fieldname("");
    uu_rlc_ch_to_be_setup_list.to_json(j);
  }
  if (uu_rlc_ch_to_be_modified_list_present) {
    j.write_fieldname("");
    uu_rlc_ch_to_be_modified_list.to_json(j);
  }
  if (uu_rlc_ch_to_be_released_list_present) {
    j.write_fieldname("");
    uu_rlc_ch_to_be_released_list.to_json(j);
  }
  if (pc5_rlc_ch_to_be_setup_list_present) {
    j.write_fieldname("");
    pc5_rlc_ch_to_be_setup_list.to_json(j);
  }
  if (pc5_rlc_ch_to_be_modified_list_present) {
    j.write_fieldname("");
    pc5_rlc_ch_to_be_modified_list.to_json(j);
  }
  if (pc5_rlc_ch_to_be_released_list_present) {
    j.write_fieldname("");
    pc5_rlc_ch_to_be_released_list.to_json(j);
  }
  if (path_switch_cfg_present) {
    j.write_fieldname("");
    path_switch_cfg.to_json(j);
  }
  if (gnb_du_ue_slice_max_bit_rate_list_present) {
    j.write_fieldname("");
    gnb_du_ue_slice_max_bit_rate_list.to_json(j);
  }
  if (multicast_mbs_session_setup_list_present) {
    j.write_fieldname("");
    multicast_mbs_session_setup_list.to_json(j);
  }
  if (multicast_mbs_session_rem_list_present) {
    j.write_fieldname("");
    multicast_mbs_session_rem_list.to_json(j);
  }
  if (ue_multicast_m_rbs_to_be_setup_at_modify_list_present) {
    j.write_fieldname("");
    ue_multicast_m_rbs_to_be_setup_at_modify_list.to_json(j);
  }
  if (ue_multicast_m_rbs_to_be_released_list_present) {
    j.write_fieldname("");
    ue_multicast_m_rbs_to_be_released_list.to_json(j);
  }
  if (sldrx_cycle_list_present) {
    j.write_fieldname("");
    sldrx_cycle_list.to_json(j);
  }
  if (management_based_mdt_plmn_mod_list_present) {
    j.write_fieldname("");
    management_based_mdt_plmn_mod_list.to_json(j);
  }
  if (sdt_bearer_cfg_query_ind_present) {
    j.write_fieldname("");
    sdt_bearer_cfg_query_ind.to_json(j);
  }
  if (daps_ho_status_present) {
    j.write_fieldname("");
    daps_ho_status.to_json(j);
  }
  if (serving_cell_mo_list_present) {
    j.write_fieldname("");
    serving_cell_mo_list.to_json(j);
  }
  if (ul_tx_direct_current_more_carrier_info_present) {
    j.write_fieldname("");
    ul_tx_direct_current_more_carrier_info.to_json(j);
  }
  if (cp_acmcg_info_present) {
    j.write_fieldname("");
    cp_acmcg_info.to_json(j);
  }
  j.end_obj();
}

ue_context_mod_required_ies_container::ue_context_mod_required_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  res_coordination_transfer_container(49, crit_e::ignore),
  du_to_cu_rrc_info(39, crit_e::reject),
  drbs_required_to_be_modified_list(23, crit_e::reject),
  srbs_required_to_be_released_list(70, crit_e::reject),
  drbs_required_to_be_released_list(25, crit_e::reject),
  cause(0, crit_e::ignore),
  bh_chs_required_to_be_released_list(277, crit_e::reject),
  sl_drbs_required_to_be_modified_list(320, crit_e::reject),
  sl_drbs_required_to_be_released_list(322, crit_e::reject),
  target_cells_to_cancel(375, crit_e::reject),
  uu_rlc_ch_required_to_be_modified_list(606, crit_e::reject),
  uu_rlc_ch_required_to_be_released_list(607, crit_e::reject),
  pc5_rlc_ch_required_to_be_modified_list(614, crit_e::reject),
  pc5_rlc_ch_required_to_be_released_list(615, crit_e::reject),
  ue_multicast_m_rbs_required_to_be_modified_list(655, crit_e::reject),
  ue_multicast_m_rbs_required_to_be_released_list(657, crit_e::reject)
{
}
SRSASN_CODE ue_context_mod_required_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += res_coordination_transfer_container_present ? 1 : 0;
  nof_ies += du_to_cu_rrc_info_present ? 1 : 0;
  nof_ies += drbs_required_to_be_modified_list_present ? 1 : 0;
  nof_ies += srbs_required_to_be_released_list_present ? 1 : 0;
  nof_ies += drbs_required_to_be_released_list_present ? 1 : 0;
  nof_ies += bh_chs_required_to_be_released_list_present ? 1 : 0;
  nof_ies += sl_drbs_required_to_be_modified_list_present ? 1 : 0;
  nof_ies += sl_drbs_required_to_be_released_list_present ? 1 : 0;
  nof_ies += target_cells_to_cancel_present ? 1 : 0;
  nof_ies += uu_rlc_ch_required_to_be_modified_list_present ? 1 : 0;
  nof_ies += uu_rlc_ch_required_to_be_released_list_present ? 1 : 0;
  nof_ies += pc5_rlc_ch_required_to_be_modified_list_present ? 1 : 0;
  nof_ies += pc5_rlc_ch_required_to_be_released_list_present ? 1 : 0;
  nof_ies += ue_multicast_m_rbs_required_to_be_modified_list_present ? 1 : 0;
  nof_ies += ue_multicast_m_rbs_required_to_be_released_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (res_coordination_transfer_container_present) {
    HANDLE_CODE(res_coordination_transfer_container.pack(bref));
  }
  if (du_to_cu_rrc_info_present) {
    HANDLE_CODE(du_to_cu_rrc_info.pack(bref));
  }
  if (drbs_required_to_be_modified_list_present) {
    HANDLE_CODE(drbs_required_to_be_modified_list.pack(bref));
  }
  if (srbs_required_to_be_released_list_present) {
    HANDLE_CODE(srbs_required_to_be_released_list.pack(bref));
  }
  if (drbs_required_to_be_released_list_present) {
    HANDLE_CODE(drbs_required_to_be_released_list.pack(bref));
  }
  HANDLE_CODE(cause.pack(bref));
  if (bh_chs_required_to_be_released_list_present) {
    HANDLE_CODE(bh_chs_required_to_be_released_list.pack(bref));
  }
  if (sl_drbs_required_to_be_modified_list_present) {
    HANDLE_CODE(sl_drbs_required_to_be_modified_list.pack(bref));
  }
  if (sl_drbs_required_to_be_released_list_present) {
    HANDLE_CODE(sl_drbs_required_to_be_released_list.pack(bref));
  }
  if (target_cells_to_cancel_present) {
    HANDLE_CODE(target_cells_to_cancel.pack(bref));
  }
  if (uu_rlc_ch_required_to_be_modified_list_present) {
    HANDLE_CODE(uu_rlc_ch_required_to_be_modified_list.pack(bref));
  }
  if (uu_rlc_ch_required_to_be_released_list_present) {
    HANDLE_CODE(uu_rlc_ch_required_to_be_released_list.pack(bref));
  }
  if (pc5_rlc_ch_required_to_be_modified_list_present) {
    HANDLE_CODE(pc5_rlc_ch_required_to_be_modified_list.pack(bref));
  }
  if (pc5_rlc_ch_required_to_be_released_list_present) {
    HANDLE_CODE(pc5_rlc_ch_required_to_be_released_list.pack(bref));
  }
  if (ue_multicast_m_rbs_required_to_be_modified_list_present) {
    HANDLE_CODE(ue_multicast_m_rbs_required_to_be_modified_list.pack(bref));
  }
  if (ue_multicast_m_rbs_required_to_be_released_list_present) {
    HANDLE_CODE(ue_multicast_m_rbs_required_to_be_released_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_required_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 49: {
        res_coordination_transfer_container_present = true;
        res_coordination_transfer_container.id      = id;
        HANDLE_CODE(res_coordination_transfer_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_container.value.unpack(bref));
        break;
      }
      case 39: {
        du_to_cu_rrc_info_present = true;
        du_to_cu_rrc_info.id      = id;
        HANDLE_CODE(du_to_cu_rrc_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(du_to_cu_rrc_info.value.unpack(bref));
        break;
      }
      case 23: {
        drbs_required_to_be_modified_list_present = true;
        drbs_required_to_be_modified_list.id      = id;
        HANDLE_CODE(drbs_required_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_required_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 70: {
        srbs_required_to_be_released_list_present = true;
        srbs_required_to_be_released_list.id      = id;
        HANDLE_CODE(srbs_required_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_required_to_be_released_list.value.unpack(bref));
        break;
      }
      case 25: {
        drbs_required_to_be_released_list_present = true;
        drbs_required_to_be_released_list.id      = id;
        HANDLE_CODE(drbs_required_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_required_to_be_released_list.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 277: {
        bh_chs_required_to_be_released_list_present = true;
        bh_chs_required_to_be_released_list.id      = id;
        HANDLE_CODE(bh_chs_required_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bh_chs_required_to_be_released_list.value.unpack(bref));
        break;
      }
      case 320: {
        sl_drbs_required_to_be_modified_list_present = true;
        sl_drbs_required_to_be_modified_list.id      = id;
        HANDLE_CODE(sl_drbs_required_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sl_drbs_required_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 322: {
        sl_drbs_required_to_be_released_list_present = true;
        sl_drbs_required_to_be_released_list.id      = id;
        HANDLE_CODE(sl_drbs_required_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sl_drbs_required_to_be_released_list.value.unpack(bref));
        break;
      }
      case 375: {
        target_cells_to_cancel_present = true;
        target_cells_to_cancel.id      = id;
        HANDLE_CODE(target_cells_to_cancel.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(target_cells_to_cancel.value.unpack(bref));
        break;
      }
      case 606: {
        uu_rlc_ch_required_to_be_modified_list_present = true;
        uu_rlc_ch_required_to_be_modified_list.id      = id;
        HANDLE_CODE(uu_rlc_ch_required_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uu_rlc_ch_required_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 607: {
        uu_rlc_ch_required_to_be_released_list_present = true;
        uu_rlc_ch_required_to_be_released_list.id      = id;
        HANDLE_CODE(uu_rlc_ch_required_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uu_rlc_ch_required_to_be_released_list.value.unpack(bref));
        break;
      }
      case 614: {
        pc5_rlc_ch_required_to_be_modified_list_present = true;
        pc5_rlc_ch_required_to_be_modified_list.id      = id;
        HANDLE_CODE(pc5_rlc_ch_required_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_rlc_ch_required_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 615: {
        pc5_rlc_ch_required_to_be_released_list_present = true;
        pc5_rlc_ch_required_to_be_released_list.id      = id;
        HANDLE_CODE(pc5_rlc_ch_required_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_rlc_ch_required_to_be_released_list.value.unpack(bref));
        break;
      }
      case 655: {
        ue_multicast_m_rbs_required_to_be_modified_list_present = true;
        ue_multicast_m_rbs_required_to_be_modified_list.id      = id;
        HANDLE_CODE(ue_multicast_m_rbs_required_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_multicast_m_rbs_required_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 657: {
        ue_multicast_m_rbs_required_to_be_released_list_present = true;
        ue_multicast_m_rbs_required_to_be_released_list.id      = id;
        HANDLE_CODE(ue_multicast_m_rbs_required_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_multicast_m_rbs_required_to_be_released_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_mod_required_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (res_coordination_transfer_container_present) {
    j.write_fieldname("");
    res_coordination_transfer_container.to_json(j);
  }
  if (du_to_cu_rrc_info_present) {
    j.write_fieldname("");
    du_to_cu_rrc_info.to_json(j);
  }
  if (drbs_required_to_be_modified_list_present) {
    j.write_fieldname("");
    drbs_required_to_be_modified_list.to_json(j);
  }
  if (srbs_required_to_be_released_list_present) {
    j.write_fieldname("");
    srbs_required_to_be_released_list.to_json(j);
  }
  if (drbs_required_to_be_released_list_present) {
    j.write_fieldname("");
    drbs_required_to_be_released_list.to_json(j);
  }
  j.write_fieldname("");
  cause.to_json(j);
  if (bh_chs_required_to_be_released_list_present) {
    j.write_fieldname("");
    bh_chs_required_to_be_released_list.to_json(j);
  }
  if (sl_drbs_required_to_be_modified_list_present) {
    j.write_fieldname("");
    sl_drbs_required_to_be_modified_list.to_json(j);
  }
  if (sl_drbs_required_to_be_released_list_present) {
    j.write_fieldname("");
    sl_drbs_required_to_be_released_list.to_json(j);
  }
  if (target_cells_to_cancel_present) {
    j.write_fieldname("");
    target_cells_to_cancel.to_json(j);
  }
  if (uu_rlc_ch_required_to_be_modified_list_present) {
    j.write_fieldname("");
    uu_rlc_ch_required_to_be_modified_list.to_json(j);
  }
  if (uu_rlc_ch_required_to_be_released_list_present) {
    j.write_fieldname("");
    uu_rlc_ch_required_to_be_released_list.to_json(j);
  }
  if (pc5_rlc_ch_required_to_be_modified_list_present) {
    j.write_fieldname("");
    pc5_rlc_ch_required_to_be_modified_list.to_json(j);
  }
  if (pc5_rlc_ch_required_to_be_released_list_present) {
    j.write_fieldname("");
    pc5_rlc_ch_required_to_be_released_list.to_json(j);
  }
  if (ue_multicast_m_rbs_required_to_be_modified_list_present) {
    j.write_fieldname("");
    ue_multicast_m_rbs_required_to_be_modified_list.to_json(j);
  }
  if (ue_multicast_m_rbs_required_to_be_released_list_present) {
    j.write_fieldname("");
    ue_multicast_m_rbs_required_to_be_released_list.to_json(j);
  }
  j.end_obj();
}

ue_context_mod_resp_ies_container::ue_context_mod_resp_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  res_coordination_transfer_container(49, crit_e::ignore),
  du_to_cu_rrc_info(39, crit_e::reject),
  drbs_setup_mod_list(29, crit_e::ignore),
  drbs_modified_list(21, crit_e::ignore),
  srbs_failed_to_be_setup_mod_list(68, crit_e::ignore),
  drbs_failed_to_be_setup_mod_list(17, crit_e::ignore),
  scell_failedto_setup_mod_list(85, crit_e::ignore),
  drbs_failed_to_be_modified_list(13, crit_e::ignore),
  inactivity_monitoring_resp(98, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore),
  c_rnti(95, crit_e::ignore),
  associated_scell_list(198, crit_e::ignore),
  srbs_setup_mod_list(204, crit_e::ignore),
  srbs_modified_list(206, crit_e::ignore),
  full_cfg(94, crit_e::reject),
  bh_chs_setup_mod_list(275, crit_e::ignore),
  bh_chs_modified_list(273, crit_e::ignore),
  bh_chs_failed_to_be_setup_mod_list(271, crit_e::ignore),
  bh_chs_failed_to_be_modified_list(269, crit_e::ignore),
  sl_drbs_setup_mod_list(333, crit_e::ignore),
  sl_drbs_modified_list(318, crit_e::ignore),
  sl_drbs_failed_to_be_setup_mod_list(334, crit_e::ignore),
  sl_drbs_failed_to_be_modified_list(314, crit_e::ignore),
  requested_target_cell_global_id(376, crit_e::reject),
  scg_activation_status(548, crit_e::ignore),
  uu_rlc_ch_setup_list(602, crit_e::ignore),
  uu_rlc_ch_failed_to_be_setup_list(603, crit_e::ignore),
  uu_rlc_ch_modified_list(604, crit_e::ignore),
  uu_rlc_ch_failed_to_be_modified_list(605, crit_e::ignore),
  pc5_rlc_ch_setup_list(611, crit_e::ignore),
  pc5_rlc_ch_failed_to_be_setup_list(612, crit_e::ignore),
  pc5_rlc_ch_modified_list(616, crit_e::ignore),
  pc5_rlc_ch_failed_to_be_modified_list(613, crit_e::ignore),
  sdt_bearer_cfg_info(676, crit_e::ignore),
  ue_multicast_m_rbs_setup_list(679, crit_e::reject),
  serving_cell_mo_encoded_in_cgc_list(697, crit_e::ignore)
{
}
SRSASN_CODE ue_context_mod_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += res_coordination_transfer_container_present ? 1 : 0;
  nof_ies += du_to_cu_rrc_info_present ? 1 : 0;
  nof_ies += drbs_setup_mod_list_present ? 1 : 0;
  nof_ies += drbs_modified_list_present ? 1 : 0;
  nof_ies += srbs_failed_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += drbs_failed_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += scell_failedto_setup_mod_list_present ? 1 : 0;
  nof_ies += drbs_failed_to_be_modified_list_present ? 1 : 0;
  nof_ies += inactivity_monitoring_resp_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += c_rnti_present ? 1 : 0;
  nof_ies += associated_scell_list_present ? 1 : 0;
  nof_ies += srbs_setup_mod_list_present ? 1 : 0;
  nof_ies += srbs_modified_list_present ? 1 : 0;
  nof_ies += full_cfg_present ? 1 : 0;
  nof_ies += bh_chs_setup_mod_list_present ? 1 : 0;
  nof_ies += bh_chs_modified_list_present ? 1 : 0;
  nof_ies += bh_chs_failed_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += bh_chs_failed_to_be_modified_list_present ? 1 : 0;
  nof_ies += sl_drbs_setup_mod_list_present ? 1 : 0;
  nof_ies += sl_drbs_modified_list_present ? 1 : 0;
  nof_ies += sl_drbs_failed_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += sl_drbs_failed_to_be_modified_list_present ? 1 : 0;
  nof_ies += requested_target_cell_global_id_present ? 1 : 0;
  nof_ies += scg_activation_status_present ? 1 : 0;
  nof_ies += uu_rlc_ch_setup_list_present ? 1 : 0;
  nof_ies += uu_rlc_ch_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += uu_rlc_ch_modified_list_present ? 1 : 0;
  nof_ies += uu_rlc_ch_failed_to_be_modified_list_present ? 1 : 0;
  nof_ies += pc5_rlc_ch_setup_list_present ? 1 : 0;
  nof_ies += pc5_rlc_ch_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += pc5_rlc_ch_modified_list_present ? 1 : 0;
  nof_ies += pc5_rlc_ch_failed_to_be_modified_list_present ? 1 : 0;
  nof_ies += sdt_bearer_cfg_info_present ? 1 : 0;
  nof_ies += ue_multicast_m_rbs_setup_list_present ? 1 : 0;
  nof_ies += serving_cell_mo_encoded_in_cgc_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (res_coordination_transfer_container_present) {
    HANDLE_CODE(res_coordination_transfer_container.pack(bref));
  }
  if (du_to_cu_rrc_info_present) {
    HANDLE_CODE(du_to_cu_rrc_info.pack(bref));
  }
  if (drbs_setup_mod_list_present) {
    HANDLE_CODE(drbs_setup_mod_list.pack(bref));
  }
  if (drbs_modified_list_present) {
    HANDLE_CODE(drbs_modified_list.pack(bref));
  }
  if (srbs_failed_to_be_setup_mod_list_present) {
    HANDLE_CODE(srbs_failed_to_be_setup_mod_list.pack(bref));
  }
  if (drbs_failed_to_be_setup_mod_list_present) {
    HANDLE_CODE(drbs_failed_to_be_setup_mod_list.pack(bref));
  }
  if (scell_failedto_setup_mod_list_present) {
    HANDLE_CODE(scell_failedto_setup_mod_list.pack(bref));
  }
  if (drbs_failed_to_be_modified_list_present) {
    HANDLE_CODE(drbs_failed_to_be_modified_list.pack(bref));
  }
  if (inactivity_monitoring_resp_present) {
    HANDLE_CODE(inactivity_monitoring_resp.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (c_rnti_present) {
    HANDLE_CODE(c_rnti.pack(bref));
  }
  if (associated_scell_list_present) {
    HANDLE_CODE(associated_scell_list.pack(bref));
  }
  if (srbs_setup_mod_list_present) {
    HANDLE_CODE(srbs_setup_mod_list.pack(bref));
  }
  if (srbs_modified_list_present) {
    HANDLE_CODE(srbs_modified_list.pack(bref));
  }
  if (full_cfg_present) {
    HANDLE_CODE(full_cfg.pack(bref));
  }
  if (bh_chs_setup_mod_list_present) {
    HANDLE_CODE(bh_chs_setup_mod_list.pack(bref));
  }
  if (bh_chs_modified_list_present) {
    HANDLE_CODE(bh_chs_modified_list.pack(bref));
  }
  if (bh_chs_failed_to_be_setup_mod_list_present) {
    HANDLE_CODE(bh_chs_failed_to_be_setup_mod_list.pack(bref));
  }
  if (bh_chs_failed_to_be_modified_list_present) {
    HANDLE_CODE(bh_chs_failed_to_be_modified_list.pack(bref));
  }
  if (sl_drbs_setup_mod_list_present) {
    HANDLE_CODE(sl_drbs_setup_mod_list.pack(bref));
  }
  if (sl_drbs_modified_list_present) {
    HANDLE_CODE(sl_drbs_modified_list.pack(bref));
  }
  if (sl_drbs_failed_to_be_setup_mod_list_present) {
    HANDLE_CODE(sl_drbs_failed_to_be_setup_mod_list.pack(bref));
  }
  if (sl_drbs_failed_to_be_modified_list_present) {
    HANDLE_CODE(sl_drbs_failed_to_be_modified_list.pack(bref));
  }
  if (requested_target_cell_global_id_present) {
    HANDLE_CODE(requested_target_cell_global_id.pack(bref));
  }
  if (scg_activation_status_present) {
    HANDLE_CODE(scg_activation_status.pack(bref));
  }
  if (uu_rlc_ch_setup_list_present) {
    HANDLE_CODE(uu_rlc_ch_setup_list.pack(bref));
  }
  if (uu_rlc_ch_failed_to_be_setup_list_present) {
    HANDLE_CODE(uu_rlc_ch_failed_to_be_setup_list.pack(bref));
  }
  if (uu_rlc_ch_modified_list_present) {
    HANDLE_CODE(uu_rlc_ch_modified_list.pack(bref));
  }
  if (uu_rlc_ch_failed_to_be_modified_list_present) {
    HANDLE_CODE(uu_rlc_ch_failed_to_be_modified_list.pack(bref));
  }
  if (pc5_rlc_ch_setup_list_present) {
    HANDLE_CODE(pc5_rlc_ch_setup_list.pack(bref));
  }
  if (pc5_rlc_ch_failed_to_be_setup_list_present) {
    HANDLE_CODE(pc5_rlc_ch_failed_to_be_setup_list.pack(bref));
  }
  if (pc5_rlc_ch_modified_list_present) {
    HANDLE_CODE(pc5_rlc_ch_modified_list.pack(bref));
  }
  if (pc5_rlc_ch_failed_to_be_modified_list_present) {
    HANDLE_CODE(pc5_rlc_ch_failed_to_be_modified_list.pack(bref));
  }
  if (sdt_bearer_cfg_info_present) {
    HANDLE_CODE(sdt_bearer_cfg_info.pack(bref));
  }
  if (ue_multicast_m_rbs_setup_list_present) {
    HANDLE_CODE(ue_multicast_m_rbs_setup_list.pack(bref));
  }
  if (serving_cell_mo_encoded_in_cgc_list_present) {
    HANDLE_CODE(serving_cell_mo_encoded_in_cgc_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 49: {
        res_coordination_transfer_container_present = true;
        res_coordination_transfer_container.id      = id;
        HANDLE_CODE(res_coordination_transfer_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_container.value.unpack(bref));
        break;
      }
      case 39: {
        du_to_cu_rrc_info_present = true;
        du_to_cu_rrc_info.id      = id;
        HANDLE_CODE(du_to_cu_rrc_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(du_to_cu_rrc_info.value.unpack(bref));
        break;
      }
      case 29: {
        drbs_setup_mod_list_present = true;
        drbs_setup_mod_list.id      = id;
        HANDLE_CODE(drbs_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_setup_mod_list.value.unpack(bref));
        break;
      }
      case 21: {
        drbs_modified_list_present = true;
        drbs_modified_list.id      = id;
        HANDLE_CODE(drbs_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_modified_list.value.unpack(bref));
        break;
      }
      case 68: {
        srbs_failed_to_be_setup_mod_list_present = true;
        srbs_failed_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(srbs_failed_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_failed_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 17: {
        drbs_failed_to_be_setup_mod_list_present = true;
        drbs_failed_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(drbs_failed_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_failed_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 85: {
        scell_failedto_setup_mod_list_present = true;
        scell_failedto_setup_mod_list.id      = id;
        HANDLE_CODE(scell_failedto_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scell_failedto_setup_mod_list.value.unpack(bref));
        break;
      }
      case 13: {
        drbs_failed_to_be_modified_list_present = true;
        drbs_failed_to_be_modified_list.id      = id;
        HANDLE_CODE(drbs_failed_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_failed_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 98: {
        inactivity_monitoring_resp_present = true;
        inactivity_monitoring_resp.id      = id;
        HANDLE_CODE(inactivity_monitoring_resp.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(inactivity_monitoring_resp.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 95: {
        c_rnti_present = true;
        c_rnti.id      = id;
        HANDLE_CODE(c_rnti.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(c_rnti.value.unpack(bref));
        break;
      }
      case 198: {
        associated_scell_list_present = true;
        associated_scell_list.id      = id;
        HANDLE_CODE(associated_scell_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(associated_scell_list.value.unpack(bref));
        break;
      }
      case 204: {
        srbs_setup_mod_list_present = true;
        srbs_setup_mod_list.id      = id;
        HANDLE_CODE(srbs_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_setup_mod_list.value.unpack(bref));
        break;
      }
      case 206: {
        srbs_modified_list_present = true;
        srbs_modified_list.id      = id;
        HANDLE_CODE(srbs_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_modified_list.value.unpack(bref));
        break;
      }
      case 94: {
        full_cfg_present = true;
        full_cfg.id      = id;
        HANDLE_CODE(full_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(full_cfg.value.unpack(bref));
        break;
      }
      case 275: {
        bh_chs_setup_mod_list_present = true;
        bh_chs_setup_mod_list.id      = id;
        HANDLE_CODE(bh_chs_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bh_chs_setup_mod_list.value.unpack(bref));
        break;
      }
      case 273: {
        bh_chs_modified_list_present = true;
        bh_chs_modified_list.id      = id;
        HANDLE_CODE(bh_chs_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bh_chs_modified_list.value.unpack(bref));
        break;
      }
      case 271: {
        bh_chs_failed_to_be_setup_mod_list_present = true;
        bh_chs_failed_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(bh_chs_failed_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bh_chs_failed_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 269: {
        bh_chs_failed_to_be_modified_list_present = true;
        bh_chs_failed_to_be_modified_list.id      = id;
        HANDLE_CODE(bh_chs_failed_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bh_chs_failed_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 333: {
        sl_drbs_setup_mod_list_present = true;
        sl_drbs_setup_mod_list.id      = id;
        HANDLE_CODE(sl_drbs_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sl_drbs_setup_mod_list.value.unpack(bref));
        break;
      }
      case 318: {
        sl_drbs_modified_list_present = true;
        sl_drbs_modified_list.id      = id;
        HANDLE_CODE(sl_drbs_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sl_drbs_modified_list.value.unpack(bref));
        break;
      }
      case 334: {
        sl_drbs_failed_to_be_setup_mod_list_present = true;
        sl_drbs_failed_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(sl_drbs_failed_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sl_drbs_failed_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 314: {
        sl_drbs_failed_to_be_modified_list_present = true;
        sl_drbs_failed_to_be_modified_list.id      = id;
        HANDLE_CODE(sl_drbs_failed_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sl_drbs_failed_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 376: {
        requested_target_cell_global_id_present = true;
        requested_target_cell_global_id.id      = id;
        HANDLE_CODE(requested_target_cell_global_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(requested_target_cell_global_id.value.unpack(bref));
        break;
      }
      case 548: {
        scg_activation_status_present = true;
        scg_activation_status.id      = id;
        HANDLE_CODE(scg_activation_status.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scg_activation_status.value.unpack(bref));
        break;
      }
      case 602: {
        uu_rlc_ch_setup_list_present = true;
        uu_rlc_ch_setup_list.id      = id;
        HANDLE_CODE(uu_rlc_ch_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uu_rlc_ch_setup_list.value.unpack(bref));
        break;
      }
      case 603: {
        uu_rlc_ch_failed_to_be_setup_list_present = true;
        uu_rlc_ch_failed_to_be_setup_list.id      = id;
        HANDLE_CODE(uu_rlc_ch_failed_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uu_rlc_ch_failed_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 604: {
        uu_rlc_ch_modified_list_present = true;
        uu_rlc_ch_modified_list.id      = id;
        HANDLE_CODE(uu_rlc_ch_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uu_rlc_ch_modified_list.value.unpack(bref));
        break;
      }
      case 605: {
        uu_rlc_ch_failed_to_be_modified_list_present = true;
        uu_rlc_ch_failed_to_be_modified_list.id      = id;
        HANDLE_CODE(uu_rlc_ch_failed_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uu_rlc_ch_failed_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 611: {
        pc5_rlc_ch_setup_list_present = true;
        pc5_rlc_ch_setup_list.id      = id;
        HANDLE_CODE(pc5_rlc_ch_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_rlc_ch_setup_list.value.unpack(bref));
        break;
      }
      case 612: {
        pc5_rlc_ch_failed_to_be_setup_list_present = true;
        pc5_rlc_ch_failed_to_be_setup_list.id      = id;
        HANDLE_CODE(pc5_rlc_ch_failed_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_rlc_ch_failed_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 616: {
        pc5_rlc_ch_modified_list_present = true;
        pc5_rlc_ch_modified_list.id      = id;
        HANDLE_CODE(pc5_rlc_ch_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_rlc_ch_modified_list.value.unpack(bref));
        break;
      }
      case 613: {
        pc5_rlc_ch_failed_to_be_modified_list_present = true;
        pc5_rlc_ch_failed_to_be_modified_list.id      = id;
        HANDLE_CODE(pc5_rlc_ch_failed_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_rlc_ch_failed_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 676: {
        sdt_bearer_cfg_info_present = true;
        sdt_bearer_cfg_info.id      = id;
        HANDLE_CODE(sdt_bearer_cfg_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sdt_bearer_cfg_info.value.unpack(bref));
        break;
      }
      case 679: {
        ue_multicast_m_rbs_setup_list_present = true;
        ue_multicast_m_rbs_setup_list.id      = id;
        HANDLE_CODE(ue_multicast_m_rbs_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_multicast_m_rbs_setup_list.value.unpack(bref));
        break;
      }
      case 697: {
        serving_cell_mo_encoded_in_cgc_list_present = true;
        serving_cell_mo_encoded_in_cgc_list.id      = id;
        HANDLE_CODE(serving_cell_mo_encoded_in_cgc_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serving_cell_mo_encoded_in_cgc_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_mod_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (res_coordination_transfer_container_present) {
    j.write_fieldname("");
    res_coordination_transfer_container.to_json(j);
  }
  if (du_to_cu_rrc_info_present) {
    j.write_fieldname("");
    du_to_cu_rrc_info.to_json(j);
  }
  if (drbs_setup_mod_list_present) {
    j.write_fieldname("");
    drbs_setup_mod_list.to_json(j);
  }
  if (drbs_modified_list_present) {
    j.write_fieldname("");
    drbs_modified_list.to_json(j);
  }
  if (srbs_failed_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    srbs_failed_to_be_setup_mod_list.to_json(j);
  }
  if (drbs_failed_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    drbs_failed_to_be_setup_mod_list.to_json(j);
  }
  if (scell_failedto_setup_mod_list_present) {
    j.write_fieldname("");
    scell_failedto_setup_mod_list.to_json(j);
  }
  if (drbs_failed_to_be_modified_list_present) {
    j.write_fieldname("");
    drbs_failed_to_be_modified_list.to_json(j);
  }
  if (inactivity_monitoring_resp_present) {
    j.write_fieldname("");
    inactivity_monitoring_resp.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (c_rnti_present) {
    j.write_fieldname("");
    c_rnti.to_json(j);
  }
  if (associated_scell_list_present) {
    j.write_fieldname("");
    associated_scell_list.to_json(j);
  }
  if (srbs_setup_mod_list_present) {
    j.write_fieldname("");
    srbs_setup_mod_list.to_json(j);
  }
  if (srbs_modified_list_present) {
    j.write_fieldname("");
    srbs_modified_list.to_json(j);
  }
  if (full_cfg_present) {
    j.write_fieldname("");
    full_cfg.to_json(j);
  }
  if (bh_chs_setup_mod_list_present) {
    j.write_fieldname("");
    bh_chs_setup_mod_list.to_json(j);
  }
  if (bh_chs_modified_list_present) {
    j.write_fieldname("");
    bh_chs_modified_list.to_json(j);
  }
  if (bh_chs_failed_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    bh_chs_failed_to_be_setup_mod_list.to_json(j);
  }
  if (bh_chs_failed_to_be_modified_list_present) {
    j.write_fieldname("");
    bh_chs_failed_to_be_modified_list.to_json(j);
  }
  if (sl_drbs_setup_mod_list_present) {
    j.write_fieldname("");
    sl_drbs_setup_mod_list.to_json(j);
  }
  if (sl_drbs_modified_list_present) {
    j.write_fieldname("");
    sl_drbs_modified_list.to_json(j);
  }
  if (sl_drbs_failed_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    sl_drbs_failed_to_be_setup_mod_list.to_json(j);
  }
  if (sl_drbs_failed_to_be_modified_list_present) {
    j.write_fieldname("");
    sl_drbs_failed_to_be_modified_list.to_json(j);
  }
  if (requested_target_cell_global_id_present) {
    j.write_fieldname("");
    requested_target_cell_global_id.to_json(j);
  }
  if (scg_activation_status_present) {
    j.write_fieldname("");
    scg_activation_status.to_json(j);
  }
  if (uu_rlc_ch_setup_list_present) {
    j.write_fieldname("");
    uu_rlc_ch_setup_list.to_json(j);
  }
  if (uu_rlc_ch_failed_to_be_setup_list_present) {
    j.write_fieldname("");
    uu_rlc_ch_failed_to_be_setup_list.to_json(j);
  }
  if (uu_rlc_ch_modified_list_present) {
    j.write_fieldname("");
    uu_rlc_ch_modified_list.to_json(j);
  }
  if (uu_rlc_ch_failed_to_be_modified_list_present) {
    j.write_fieldname("");
    uu_rlc_ch_failed_to_be_modified_list.to_json(j);
  }
  if (pc5_rlc_ch_setup_list_present) {
    j.write_fieldname("");
    pc5_rlc_ch_setup_list.to_json(j);
  }
  if (pc5_rlc_ch_failed_to_be_setup_list_present) {
    j.write_fieldname("");
    pc5_rlc_ch_failed_to_be_setup_list.to_json(j);
  }
  if (pc5_rlc_ch_modified_list_present) {
    j.write_fieldname("");
    pc5_rlc_ch_modified_list.to_json(j);
  }
  if (pc5_rlc_ch_failed_to_be_modified_list_present) {
    j.write_fieldname("");
    pc5_rlc_ch_failed_to_be_modified_list.to_json(j);
  }
  if (sdt_bearer_cfg_info_present) {
    j.write_fieldname("");
    sdt_bearer_cfg_info.to_json(j);
  }
  if (ue_multicast_m_rbs_setup_list_present) {
    j.write_fieldname("");
    ue_multicast_m_rbs_setup_list.to_json(j);
  }
  if (serving_cell_mo_encoded_in_cgc_list_present) {
    j.write_fieldname("");
    serving_cell_mo_encoded_in_cgc_list.to_json(j);
  }
  j.end_obj();
}

ue_context_release_cmd_ies_container::ue_context_release_cmd_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  cause(0, crit_e::ignore),
  rrc_container(50, crit_e::ignore),
  srb_id(64, crit_e::ignore),
  old_gnb_du_ue_f1ap_id(47, crit_e::ignore),
  execute_dupl(109, crit_e::ignore),
  rrc_delivery_status_request(184, crit_e::ignore),
  target_cells_to_cancel(375, crit_e::reject),
  pos_conext_rev_ind(576, crit_e::reject),
  cg_sdt_kept_ind(588, crit_e::ignore)
{
}
SRSASN_CODE ue_context_release_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += rrc_container_present ? 1 : 0;
  nof_ies += srb_id_present ? 1 : 0;
  nof_ies += old_gnb_du_ue_f1ap_id_present ? 1 : 0;
  nof_ies += execute_dupl_present ? 1 : 0;
  nof_ies += rrc_delivery_status_request_present ? 1 : 0;
  nof_ies += target_cells_to_cancel_present ? 1 : 0;
  nof_ies += pos_conext_rev_ind_present ? 1 : 0;
  nof_ies += cg_sdt_kept_ind_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (rrc_container_present) {
    HANDLE_CODE(rrc_container.pack(bref));
  }
  if (srb_id_present) {
    HANDLE_CODE(srb_id.pack(bref));
  }
  if (old_gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(old_gnb_du_ue_f1ap_id.pack(bref));
  }
  if (execute_dupl_present) {
    HANDLE_CODE(execute_dupl.pack(bref));
  }
  if (rrc_delivery_status_request_present) {
    HANDLE_CODE(rrc_delivery_status_request.pack(bref));
  }
  if (target_cells_to_cancel_present) {
    HANDLE_CODE(target_cells_to_cancel.pack(bref));
  }
  if (pos_conext_rev_ind_present) {
    HANDLE_CODE(pos_conext_rev_ind.pack(bref));
  }
  if (cg_sdt_kept_ind_present) {
    HANDLE_CODE(cg_sdt_kept_ind.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_release_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 50: {
        rrc_container_present = true;
        rrc_container.id      = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 64: {
        srb_id_present = true;
        srb_id.id      = id;
        HANDLE_CODE(srb_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srb_id.value.unpack(bref));
        break;
      }
      case 47: {
        old_gnb_du_ue_f1ap_id_present = true;
        old_gnb_du_ue_f1ap_id.id      = id;
        HANDLE_CODE(old_gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(old_gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 109: {
        execute_dupl_present = true;
        execute_dupl.id      = id;
        HANDLE_CODE(execute_dupl.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(execute_dupl.value.unpack(bref));
        break;
      }
      case 184: {
        rrc_delivery_status_request_present = true;
        rrc_delivery_status_request.id      = id;
        HANDLE_CODE(rrc_delivery_status_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_delivery_status_request.value.unpack(bref));
        break;
      }
      case 375: {
        target_cells_to_cancel_present = true;
        target_cells_to_cancel.id      = id;
        HANDLE_CODE(target_cells_to_cancel.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(target_cells_to_cancel.value.unpack(bref));
        break;
      }
      case 576: {
        pos_conext_rev_ind_present = true;
        pos_conext_rev_ind.id      = id;
        HANDLE_CODE(pos_conext_rev_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_conext_rev_ind.value.unpack(bref));
        break;
      }
      case 588: {
        cg_sdt_kept_ind_present = true;
        cg_sdt_kept_ind.id      = id;
        HANDLE_CODE(cg_sdt_kept_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cg_sdt_kept_ind.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_release_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (rrc_container_present) {
    j.write_fieldname("");
    rrc_container.to_json(j);
  }
  if (srb_id_present) {
    j.write_fieldname("");
    srb_id.to_json(j);
  }
  if (old_gnb_du_ue_f1ap_id_present) {
    j.write_fieldname("");
    old_gnb_du_ue_f1ap_id.to_json(j);
  }
  if (execute_dupl_present) {
    j.write_fieldname("");
    execute_dupl.to_json(j);
  }
  if (rrc_delivery_status_request_present) {
    j.write_fieldname("");
    rrc_delivery_status_request.to_json(j);
  }
  if (target_cells_to_cancel_present) {
    j.write_fieldname("");
    target_cells_to_cancel.to_json(j);
  }
  if (pos_conext_rev_ind_present) {
    j.write_fieldname("");
    pos_conext_rev_ind.to_json(j);
  }
  if (cg_sdt_kept_ind_present) {
    j.write_fieldname("");
    cg_sdt_kept_ind.to_json(j);
  }
  j.end_obj();
}

ue_context_release_complete_ies_container::ue_context_release_complete_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject), gnb_du_ue_f1ap_id(41, crit_e::reject), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE ue_context_release_complete_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_release_complete_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_release_complete_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

ue_context_release_request_ies_container::ue_context_release_request_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  cause(0, crit_e::ignore),
  target_cells_to_cancel(375, crit_e::reject)
{
}
SRSASN_CODE ue_context_release_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += target_cells_to_cancel_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (target_cells_to_cancel_present) {
    HANDLE_CODE(target_cells_to_cancel.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_release_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 375: {
        target_cells_to_cancel_present = true;
        target_cells_to_cancel.id      = id;
        HANDLE_CODE(target_cells_to_cancel.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(target_cells_to_cancel.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_release_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (target_cells_to_cancel_present) {
    j.write_fieldname("");
    target_cells_to_cancel.to_json(j);
  }
  j.end_obj();
}

ue_context_setup_fail_ies_container::ue_context_setup_fail_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::ignore),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore),
  potential_sp_cell_list(92, crit_e::ignore),
  requested_target_cell_global_id(376, crit_e::reject)
{
}
SRSASN_CODE ue_context_setup_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += gnb_du_ue_f1ap_id_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += potential_sp_cell_list_present ? 1 : 0;
  nof_ies += requested_target_cell_global_id_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  if (gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  }
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (potential_sp_cell_list_present) {
    HANDLE_CODE(potential_sp_cell_list.pack(bref));
  }
  if (requested_target_cell_global_id_present) {
    HANDLE_CODE(requested_target_cell_global_id.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_setup_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        gnb_du_ue_f1ap_id_present = true;
        gnb_du_ue_f1ap_id.id      = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 92: {
        potential_sp_cell_list_present = true;
        potential_sp_cell_list.id      = id;
        HANDLE_CODE(potential_sp_cell_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(potential_sp_cell_list.value.unpack(bref));
        break;
      }
      case 376: {
        requested_target_cell_global_id_present = true;
        requested_target_cell_global_id.id      = id;
        HANDLE_CODE(requested_target_cell_global_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(requested_target_cell_global_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_setup_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  if (gnb_du_ue_f1ap_id_present) {
    j.write_fieldname("");
    gnb_du_ue_f1ap_id.to_json(j);
  }
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (potential_sp_cell_list_present) {
    j.write_fieldname("");
    potential_sp_cell_list.to_json(j);
  }
  if (requested_target_cell_global_id_present) {
    j.write_fieldname("");
    requested_target_cell_global_id.to_json(j);
  }
  j.end_obj();
}

ue_context_setup_request_ies_container::ue_context_setup_request_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::ignore),
  sp_cell_id(63, crit_e::reject),
  serv_cell_idx(107, crit_e::reject),
  sp_cell_ul_cfg(96, crit_e::ignore),
  cu_to_du_rrc_info(9, crit_e::reject),
  candidate_sp_cell_list(90, crit_e::ignore),
  drx_cycle(38, crit_e::ignore),
  res_coordination_transfer_container(49, crit_e::ignore),
  scell_to_be_setup_list(54, crit_e::ignore),
  srbs_to_be_setup_list(74, crit_e::reject),
  drbs_to_be_setup_list(35, crit_e::reject),
  inactivity_monitoring_request(97, crit_e::reject),
  rat_freq_prio_info(108, crit_e::reject),
  rrc_container(50, crit_e::ignore),
  masked_imeisv(126, crit_e::ignore),
  serving_plmn(165, crit_e::ignore),
  gnb_du_ue_ambr_ul(158, crit_e::ignore),
  rrc_delivery_status_request(184, crit_e::ignore),
  res_coordination_transfer_info(195, crit_e::ignore),
  serving_cell_mo(182, crit_e::ignore),
  new_gnb_cu_ue_f1ap_id(217, crit_e::reject),
  ran_ue_id(226, crit_e::ignore),
  trace_activation(242, crit_e::ignore),
  add_rrm_prio_idx(248, crit_e::ignore),
  bh_chs_to_be_setup_list(258, crit_e::reject),
  cfg_bap_address(282, crit_e::reject),
  nr_v2x_services_authorized(306, crit_e::ignore),
  ltev2x_services_authorized(307, crit_e::ignore),
  nr_ue_sidelink_aggr_max_bitrate(308, crit_e::ignore),
  lte_ue_sidelink_aggr_max_bitrate(309, crit_e::ignore),
  pc5_link_ambr(340, crit_e::ignore),
  sl_drbs_to_be_setup_list(330, crit_e::reject),
  conditional_inter_du_mob_info(373, crit_e::reject),
  management_based_mdt_plmn_list(377, crit_e::ignore),
  serving_n_id(382, crit_e::reject),
  f1_c_transfer_path(428, crit_e::reject),
  f1_c_transfer_path_nr_dc(511, crit_e::reject),
  mdt_polluted_meas_ind(536, crit_e::ignore),
  scg_activation_request(547, crit_e::ignore),
  cg_sdt_session_info_old(591, crit_e::ignore),
  five_g_pro_se_authorized(594, crit_e::ignore),
  five_g_pro_se_ue_pc5_aggr_max_bitrate(595, crit_e::ignore),
  five_g_pro_se_pc5_link_ambr(596, crit_e::ignore),
  uu_rlc_ch_to_be_setup_list(599, crit_e::reject),
  pc5_rlc_ch_to_be_setup_list(608, crit_e::reject),
  path_switch_cfg(619, crit_e::ignore),
  gnb_du_ue_slice_max_bit_rate_list(626, crit_e::ignore),
  multicast_mbs_session_setup_list(632, crit_e::reject),
  ue_multicast_m_rbs_to_be_setup_list(630, crit_e::reject),
  serving_cell_mo_list(695, crit_e::ignore)
{
}
SRSASN_CODE ue_context_setup_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += gnb_du_ue_f1ap_id_present ? 1 : 0;
  nof_ies += sp_cell_ul_cfg_present ? 1 : 0;
  nof_ies += candidate_sp_cell_list_present ? 1 : 0;
  nof_ies += drx_cycle_present ? 1 : 0;
  nof_ies += res_coordination_transfer_container_present ? 1 : 0;
  nof_ies += scell_to_be_setup_list_present ? 1 : 0;
  nof_ies += srbs_to_be_setup_list_present ? 1 : 0;
  nof_ies += drbs_to_be_setup_list_present ? 1 : 0;
  nof_ies += inactivity_monitoring_request_present ? 1 : 0;
  nof_ies += rat_freq_prio_info_present ? 1 : 0;
  nof_ies += rrc_container_present ? 1 : 0;
  nof_ies += masked_imeisv_present ? 1 : 0;
  nof_ies += serving_plmn_present ? 1 : 0;
  nof_ies += gnb_du_ue_ambr_ul_present ? 1 : 0;
  nof_ies += rrc_delivery_status_request_present ? 1 : 0;
  nof_ies += res_coordination_transfer_info_present ? 1 : 0;
  nof_ies += serving_cell_mo_present ? 1 : 0;
  nof_ies += new_gnb_cu_ue_f1ap_id_present ? 1 : 0;
  nof_ies += ran_ue_id_present ? 1 : 0;
  nof_ies += trace_activation_present ? 1 : 0;
  nof_ies += add_rrm_prio_idx_present ? 1 : 0;
  nof_ies += bh_chs_to_be_setup_list_present ? 1 : 0;
  nof_ies += cfg_bap_address_present ? 1 : 0;
  nof_ies += nr_v2x_services_authorized_present ? 1 : 0;
  nof_ies += ltev2x_services_authorized_present ? 1 : 0;
  nof_ies += nr_ue_sidelink_aggr_max_bitrate_present ? 1 : 0;
  nof_ies += lte_ue_sidelink_aggr_max_bitrate_present ? 1 : 0;
  nof_ies += pc5_link_ambr_present ? 1 : 0;
  nof_ies += sl_drbs_to_be_setup_list_present ? 1 : 0;
  nof_ies += conditional_inter_du_mob_info_present ? 1 : 0;
  nof_ies += management_based_mdt_plmn_list_present ? 1 : 0;
  nof_ies += serving_n_id_present ? 1 : 0;
  nof_ies += f1_c_transfer_path_present ? 1 : 0;
  nof_ies += f1_c_transfer_path_nr_dc_present ? 1 : 0;
  nof_ies += mdt_polluted_meas_ind_present ? 1 : 0;
  nof_ies += scg_activation_request_present ? 1 : 0;
  nof_ies += cg_sdt_session_info_old_present ? 1 : 0;
  nof_ies += five_g_pro_se_authorized_present ? 1 : 0;
  nof_ies += five_g_pro_se_ue_pc5_aggr_max_bitrate_present ? 1 : 0;
  nof_ies += five_g_pro_se_pc5_link_ambr_present ? 1 : 0;
  nof_ies += uu_rlc_ch_to_be_setup_list_present ? 1 : 0;
  nof_ies += pc5_rlc_ch_to_be_setup_list_present ? 1 : 0;
  nof_ies += path_switch_cfg_present ? 1 : 0;
  nof_ies += gnb_du_ue_slice_max_bit_rate_list_present ? 1 : 0;
  nof_ies += multicast_mbs_session_setup_list_present ? 1 : 0;
  nof_ies += ue_multicast_m_rbs_to_be_setup_list_present ? 1 : 0;
  nof_ies += serving_cell_mo_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  if (gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  }
  HANDLE_CODE(sp_cell_id.pack(bref));
  HANDLE_CODE(serv_cell_idx.pack(bref));
  if (sp_cell_ul_cfg_present) {
    HANDLE_CODE(sp_cell_ul_cfg.pack(bref));
  }
  HANDLE_CODE(cu_to_du_rrc_info.pack(bref));
  if (candidate_sp_cell_list_present) {
    HANDLE_CODE(candidate_sp_cell_list.pack(bref));
  }
  if (drx_cycle_present) {
    HANDLE_CODE(drx_cycle.pack(bref));
  }
  if (res_coordination_transfer_container_present) {
    HANDLE_CODE(res_coordination_transfer_container.pack(bref));
  }
  if (scell_to_be_setup_list_present) {
    HANDLE_CODE(scell_to_be_setup_list.pack(bref));
  }
  if (srbs_to_be_setup_list_present) {
    HANDLE_CODE(srbs_to_be_setup_list.pack(bref));
  }
  if (drbs_to_be_setup_list_present) {
    HANDLE_CODE(drbs_to_be_setup_list.pack(bref));
  }
  if (inactivity_monitoring_request_present) {
    HANDLE_CODE(inactivity_monitoring_request.pack(bref));
  }
  if (rat_freq_prio_info_present) {
    HANDLE_CODE(rat_freq_prio_info.pack(bref));
  }
  if (rrc_container_present) {
    HANDLE_CODE(rrc_container.pack(bref));
  }
  if (masked_imeisv_present) {
    HANDLE_CODE(masked_imeisv.pack(bref));
  }
  if (serving_plmn_present) {
    HANDLE_CODE(serving_plmn.pack(bref));
  }
  if (gnb_du_ue_ambr_ul_present) {
    HANDLE_CODE(gnb_du_ue_ambr_ul.pack(bref));
  }
  if (rrc_delivery_status_request_present) {
    HANDLE_CODE(rrc_delivery_status_request.pack(bref));
  }
  if (res_coordination_transfer_info_present) {
    HANDLE_CODE(res_coordination_transfer_info.pack(bref));
  }
  if (serving_cell_mo_present) {
    HANDLE_CODE(serving_cell_mo.pack(bref));
  }
  if (new_gnb_cu_ue_f1ap_id_present) {
    HANDLE_CODE(new_gnb_cu_ue_f1ap_id.pack(bref));
  }
  if (ran_ue_id_present) {
    HANDLE_CODE(ran_ue_id.pack(bref));
  }
  if (trace_activation_present) {
    HANDLE_CODE(trace_activation.pack(bref));
  }
  if (add_rrm_prio_idx_present) {
    HANDLE_CODE(add_rrm_prio_idx.pack(bref));
  }
  if (bh_chs_to_be_setup_list_present) {
    HANDLE_CODE(bh_chs_to_be_setup_list.pack(bref));
  }
  if (cfg_bap_address_present) {
    HANDLE_CODE(cfg_bap_address.pack(bref));
  }
  if (nr_v2x_services_authorized_present) {
    HANDLE_CODE(nr_v2x_services_authorized.pack(bref));
  }
  if (ltev2x_services_authorized_present) {
    HANDLE_CODE(ltev2x_services_authorized.pack(bref));
  }
  if (nr_ue_sidelink_aggr_max_bitrate_present) {
    HANDLE_CODE(nr_ue_sidelink_aggr_max_bitrate.pack(bref));
  }
  if (lte_ue_sidelink_aggr_max_bitrate_present) {
    HANDLE_CODE(lte_ue_sidelink_aggr_max_bitrate.pack(bref));
  }
  if (pc5_link_ambr_present) {
    HANDLE_CODE(pc5_link_ambr.pack(bref));
  }
  if (sl_drbs_to_be_setup_list_present) {
    HANDLE_CODE(sl_drbs_to_be_setup_list.pack(bref));
  }
  if (conditional_inter_du_mob_info_present) {
    HANDLE_CODE(conditional_inter_du_mob_info.pack(bref));
  }
  if (management_based_mdt_plmn_list_present) {
    HANDLE_CODE(management_based_mdt_plmn_list.pack(bref));
  }
  if (serving_n_id_present) {
    HANDLE_CODE(serving_n_id.pack(bref));
  }
  if (f1_c_transfer_path_present) {
    HANDLE_CODE(f1_c_transfer_path.pack(bref));
  }
  if (f1_c_transfer_path_nr_dc_present) {
    HANDLE_CODE(f1_c_transfer_path_nr_dc.pack(bref));
  }
  if (mdt_polluted_meas_ind_present) {
    HANDLE_CODE(mdt_polluted_meas_ind.pack(bref));
  }
  if (scg_activation_request_present) {
    HANDLE_CODE(scg_activation_request.pack(bref));
  }
  if (cg_sdt_session_info_old_present) {
    HANDLE_CODE(cg_sdt_session_info_old.pack(bref));
  }
  if (five_g_pro_se_authorized_present) {
    HANDLE_CODE(five_g_pro_se_authorized.pack(bref));
  }
  if (five_g_pro_se_ue_pc5_aggr_max_bitrate_present) {
    HANDLE_CODE(five_g_pro_se_ue_pc5_aggr_max_bitrate.pack(bref));
  }
  if (five_g_pro_se_pc5_link_ambr_present) {
    HANDLE_CODE(five_g_pro_se_pc5_link_ambr.pack(bref));
  }
  if (uu_rlc_ch_to_be_setup_list_present) {
    HANDLE_CODE(uu_rlc_ch_to_be_setup_list.pack(bref));
  }
  if (pc5_rlc_ch_to_be_setup_list_present) {
    HANDLE_CODE(pc5_rlc_ch_to_be_setup_list.pack(bref));
  }
  if (path_switch_cfg_present) {
    HANDLE_CODE(path_switch_cfg.pack(bref));
  }
  if (gnb_du_ue_slice_max_bit_rate_list_present) {
    HANDLE_CODE(gnb_du_ue_slice_max_bit_rate_list.pack(bref));
  }
  if (multicast_mbs_session_setup_list_present) {
    HANDLE_CODE(multicast_mbs_session_setup_list.pack(bref));
  }
  if (ue_multicast_m_rbs_to_be_setup_list_present) {
    HANDLE_CODE(ue_multicast_m_rbs_to_be_setup_list.pack(bref));
  }
  if (serving_cell_mo_list_present) {
    HANDLE_CODE(serving_cell_mo_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_setup_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        gnb_du_ue_f1ap_id_present = true;
        gnb_du_ue_f1ap_id.id      = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 63: {
        nof_mandatory_ies--;
        sp_cell_id.id = id;
        HANDLE_CODE(sp_cell_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sp_cell_id.value.unpack(bref));
        break;
      }
      case 107: {
        nof_mandatory_ies--;
        serv_cell_idx.id = id;
        HANDLE_CODE(serv_cell_idx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serv_cell_idx.value.unpack(bref));
        break;
      }
      case 96: {
        sp_cell_ul_cfg_present = true;
        sp_cell_ul_cfg.id      = id;
        HANDLE_CODE(sp_cell_ul_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sp_cell_ul_cfg.value.unpack(bref));
        break;
      }
      case 9: {
        nof_mandatory_ies--;
        cu_to_du_rrc_info.id = id;
        HANDLE_CODE(cu_to_du_rrc_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cu_to_du_rrc_info.value.unpack(bref));
        break;
      }
      case 90: {
        candidate_sp_cell_list_present = true;
        candidate_sp_cell_list.id      = id;
        HANDLE_CODE(candidate_sp_cell_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(candidate_sp_cell_list.value.unpack(bref));
        break;
      }
      case 38: {
        drx_cycle_present = true;
        drx_cycle.id      = id;
        HANDLE_CODE(drx_cycle.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drx_cycle.value.unpack(bref));
        break;
      }
      case 49: {
        res_coordination_transfer_container_present = true;
        res_coordination_transfer_container.id      = id;
        HANDLE_CODE(res_coordination_transfer_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_container.value.unpack(bref));
        break;
      }
      case 54: {
        scell_to_be_setup_list_present = true;
        scell_to_be_setup_list.id      = id;
        HANDLE_CODE(scell_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scell_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 74: {
        srbs_to_be_setup_list_present = true;
        srbs_to_be_setup_list.id      = id;
        HANDLE_CODE(srbs_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 35: {
        drbs_to_be_setup_list_present = true;
        drbs_to_be_setup_list.id      = id;
        HANDLE_CODE(drbs_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 97: {
        inactivity_monitoring_request_present = true;
        inactivity_monitoring_request.id      = id;
        HANDLE_CODE(inactivity_monitoring_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(inactivity_monitoring_request.value.unpack(bref));
        break;
      }
      case 108: {
        rat_freq_prio_info_present = true;
        rat_freq_prio_info.id      = id;
        HANDLE_CODE(rat_freq_prio_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rat_freq_prio_info.value.unpack(bref));
        break;
      }
      case 50: {
        rrc_container_present = true;
        rrc_container.id      = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 126: {
        masked_imeisv_present = true;
        masked_imeisv.id      = id;
        HANDLE_CODE(masked_imeisv.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(masked_imeisv.value.unpack(bref));
        break;
      }
      case 165: {
        serving_plmn_present = true;
        serving_plmn.id      = id;
        HANDLE_CODE(serving_plmn.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serving_plmn.value.unpack(bref));
        break;
      }
      case 158: {
        gnb_du_ue_ambr_ul_present = true;
        gnb_du_ue_ambr_ul.id      = id;
        HANDLE_CODE(gnb_du_ue_ambr_ul.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_ambr_ul.value.unpack(bref));
        break;
      }
      case 184: {
        rrc_delivery_status_request_present = true;
        rrc_delivery_status_request.id      = id;
        HANDLE_CODE(rrc_delivery_status_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_delivery_status_request.value.unpack(bref));
        break;
      }
      case 195: {
        res_coordination_transfer_info_present = true;
        res_coordination_transfer_info.id      = id;
        HANDLE_CODE(res_coordination_transfer_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_info.value.unpack(bref));
        break;
      }
      case 182: {
        serving_cell_mo_present = true;
        serving_cell_mo.id      = id;
        HANDLE_CODE(serving_cell_mo.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serving_cell_mo.value.unpack(bref));
        break;
      }
      case 217: {
        new_gnb_cu_ue_f1ap_id_present = true;
        new_gnb_cu_ue_f1ap_id.id      = id;
        HANDLE_CODE(new_gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(new_gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 226: {
        ran_ue_id_present = true;
        ran_ue_id.id      = id;
        HANDLE_CODE(ran_ue_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_id.value.unpack(bref));
        break;
      }
      case 242: {
        trace_activation_present = true;
        trace_activation.id      = id;
        HANDLE_CODE(trace_activation.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trace_activation.value.unpack(bref));
        break;
      }
      case 248: {
        add_rrm_prio_idx_present = true;
        add_rrm_prio_idx.id      = id;
        HANDLE_CODE(add_rrm_prio_idx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(add_rrm_prio_idx.value.unpack(bref));
        break;
      }
      case 258: {
        bh_chs_to_be_setup_list_present = true;
        bh_chs_to_be_setup_list.id      = id;
        HANDLE_CODE(bh_chs_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bh_chs_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 282: {
        cfg_bap_address_present = true;
        cfg_bap_address.id      = id;
        HANDLE_CODE(cfg_bap_address.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cfg_bap_address.value.unpack(bref));
        break;
      }
      case 306: {
        nr_v2x_services_authorized_present = true;
        nr_v2x_services_authorized.id      = id;
        HANDLE_CODE(nr_v2x_services_authorized.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_v2x_services_authorized.value.unpack(bref));
        break;
      }
      case 307: {
        ltev2x_services_authorized_present = true;
        ltev2x_services_authorized.id      = id;
        HANDLE_CODE(ltev2x_services_authorized.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ltev2x_services_authorized.value.unpack(bref));
        break;
      }
      case 308: {
        nr_ue_sidelink_aggr_max_bitrate_present = true;
        nr_ue_sidelink_aggr_max_bitrate.id      = id;
        HANDLE_CODE(nr_ue_sidelink_aggr_max_bitrate.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_ue_sidelink_aggr_max_bitrate.value.unpack(bref));
        break;
      }
      case 309: {
        lte_ue_sidelink_aggr_max_bitrate_present = true;
        lte_ue_sidelink_aggr_max_bitrate.id      = id;
        HANDLE_CODE(lte_ue_sidelink_aggr_max_bitrate.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(lte_ue_sidelink_aggr_max_bitrate.value.unpack(bref));
        break;
      }
      case 340: {
        pc5_link_ambr_present = true;
        pc5_link_ambr.id      = id;
        HANDLE_CODE(pc5_link_ambr.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_link_ambr.value.unpack(bref));
        break;
      }
      case 330: {
        sl_drbs_to_be_setup_list_present = true;
        sl_drbs_to_be_setup_list.id      = id;
        HANDLE_CODE(sl_drbs_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sl_drbs_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 373: {
        conditional_inter_du_mob_info_present = true;
        conditional_inter_du_mob_info.id      = id;
        HANDLE_CODE(conditional_inter_du_mob_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(conditional_inter_du_mob_info.value.unpack(bref));
        break;
      }
      case 377: {
        management_based_mdt_plmn_list_present = true;
        management_based_mdt_plmn_list.id      = id;
        HANDLE_CODE(management_based_mdt_plmn_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(management_based_mdt_plmn_list.value.unpack(bref));
        break;
      }
      case 382: {
        serving_n_id_present = true;
        serving_n_id.id      = id;
        HANDLE_CODE(serving_n_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serving_n_id.value.unpack(bref));
        break;
      }
      case 428: {
        f1_c_transfer_path_present = true;
        f1_c_transfer_path.id      = id;
        HANDLE_CODE(f1_c_transfer_path.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(f1_c_transfer_path.value.unpack(bref));
        break;
      }
      case 511: {
        f1_c_transfer_path_nr_dc_present = true;
        f1_c_transfer_path_nr_dc.id      = id;
        HANDLE_CODE(f1_c_transfer_path_nr_dc.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(f1_c_transfer_path_nr_dc.value.unpack(bref));
        break;
      }
      case 536: {
        mdt_polluted_meas_ind_present = true;
        mdt_polluted_meas_ind.id      = id;
        HANDLE_CODE(mdt_polluted_meas_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mdt_polluted_meas_ind.value.unpack(bref));
        break;
      }
      case 547: {
        scg_activation_request_present = true;
        scg_activation_request.id      = id;
        HANDLE_CODE(scg_activation_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scg_activation_request.value.unpack(bref));
        break;
      }
      case 591: {
        cg_sdt_session_info_old_present = true;
        cg_sdt_session_info_old.id      = id;
        HANDLE_CODE(cg_sdt_session_info_old.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cg_sdt_session_info_old.value.unpack(bref));
        break;
      }
      case 594: {
        five_g_pro_se_authorized_present = true;
        five_g_pro_se_authorized.id      = id;
        HANDLE_CODE(five_g_pro_se_authorized.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(five_g_pro_se_authorized.value.unpack(bref));
        break;
      }
      case 595: {
        five_g_pro_se_ue_pc5_aggr_max_bitrate_present = true;
        five_g_pro_se_ue_pc5_aggr_max_bitrate.id      = id;
        HANDLE_CODE(five_g_pro_se_ue_pc5_aggr_max_bitrate.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(five_g_pro_se_ue_pc5_aggr_max_bitrate.value.unpack(bref));
        break;
      }
      case 596: {
        five_g_pro_se_pc5_link_ambr_present = true;
        five_g_pro_se_pc5_link_ambr.id      = id;
        HANDLE_CODE(five_g_pro_se_pc5_link_ambr.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(five_g_pro_se_pc5_link_ambr.value.unpack(bref));
        break;
      }
      case 599: {
        uu_rlc_ch_to_be_setup_list_present = true;
        uu_rlc_ch_to_be_setup_list.id      = id;
        HANDLE_CODE(uu_rlc_ch_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uu_rlc_ch_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 608: {
        pc5_rlc_ch_to_be_setup_list_present = true;
        pc5_rlc_ch_to_be_setup_list.id      = id;
        HANDLE_CODE(pc5_rlc_ch_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_rlc_ch_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 619: {
        path_switch_cfg_present = true;
        path_switch_cfg.id      = id;
        HANDLE_CODE(path_switch_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(path_switch_cfg.value.unpack(bref));
        break;
      }
      case 626: {
        gnb_du_ue_slice_max_bit_rate_list_present = true;
        gnb_du_ue_slice_max_bit_rate_list.id      = id;
        HANDLE_CODE(gnb_du_ue_slice_max_bit_rate_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_slice_max_bit_rate_list.value.unpack(bref));
        break;
      }
      case 632: {
        multicast_mbs_session_setup_list_present = true;
        multicast_mbs_session_setup_list.id      = id;
        HANDLE_CODE(multicast_mbs_session_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_mbs_session_setup_list.value.unpack(bref));
        break;
      }
      case 630: {
        ue_multicast_m_rbs_to_be_setup_list_present = true;
        ue_multicast_m_rbs_to_be_setup_list.id      = id;
        HANDLE_CODE(ue_multicast_m_rbs_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_multicast_m_rbs_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 695: {
        serving_cell_mo_list_present = true;
        serving_cell_mo_list.id      = id;
        HANDLE_CODE(serving_cell_mo_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serving_cell_mo_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_setup_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  if (gnb_du_ue_f1ap_id_present) {
    j.write_fieldname("");
    gnb_du_ue_f1ap_id.to_json(j);
  }
  j.write_fieldname("");
  sp_cell_id.to_json(j);
  j.write_fieldname("");
  serv_cell_idx.to_json(j);
  if (sp_cell_ul_cfg_present) {
    j.write_fieldname("");
    sp_cell_ul_cfg.to_json(j);
  }
  j.write_fieldname("");
  cu_to_du_rrc_info.to_json(j);
  if (candidate_sp_cell_list_present) {
    j.write_fieldname("");
    candidate_sp_cell_list.to_json(j);
  }
  if (drx_cycle_present) {
    j.write_fieldname("");
    drx_cycle.to_json(j);
  }
  if (res_coordination_transfer_container_present) {
    j.write_fieldname("");
    res_coordination_transfer_container.to_json(j);
  }
  if (scell_to_be_setup_list_present) {
    j.write_fieldname("");
    scell_to_be_setup_list.to_json(j);
  }
  if (srbs_to_be_setup_list_present) {
    j.write_fieldname("");
    srbs_to_be_setup_list.to_json(j);
  }
  if (drbs_to_be_setup_list_present) {
    j.write_fieldname("");
    drbs_to_be_setup_list.to_json(j);
  }
  if (inactivity_monitoring_request_present) {
    j.write_fieldname("");
    inactivity_monitoring_request.to_json(j);
  }
  if (rat_freq_prio_info_present) {
    j.write_fieldname("");
    rat_freq_prio_info.to_json(j);
  }
  if (rrc_container_present) {
    j.write_fieldname("");
    rrc_container.to_json(j);
  }
  if (masked_imeisv_present) {
    j.write_fieldname("");
    masked_imeisv.to_json(j);
  }
  if (serving_plmn_present) {
    j.write_fieldname("");
    serving_plmn.to_json(j);
  }
  if (gnb_du_ue_ambr_ul_present) {
    j.write_fieldname("");
    gnb_du_ue_ambr_ul.to_json(j);
  }
  if (rrc_delivery_status_request_present) {
    j.write_fieldname("");
    rrc_delivery_status_request.to_json(j);
  }
  if (res_coordination_transfer_info_present) {
    j.write_fieldname("");
    res_coordination_transfer_info.to_json(j);
  }
  if (serving_cell_mo_present) {
    j.write_fieldname("");
    serving_cell_mo.to_json(j);
  }
  if (new_gnb_cu_ue_f1ap_id_present) {
    j.write_fieldname("");
    new_gnb_cu_ue_f1ap_id.to_json(j);
  }
  if (ran_ue_id_present) {
    j.write_fieldname("");
    ran_ue_id.to_json(j);
  }
  if (trace_activation_present) {
    j.write_fieldname("");
    trace_activation.to_json(j);
  }
  if (add_rrm_prio_idx_present) {
    j.write_fieldname("");
    add_rrm_prio_idx.to_json(j);
  }
  if (bh_chs_to_be_setup_list_present) {
    j.write_fieldname("");
    bh_chs_to_be_setup_list.to_json(j);
  }
  if (cfg_bap_address_present) {
    j.write_fieldname("");
    cfg_bap_address.to_json(j);
  }
  if (nr_v2x_services_authorized_present) {
    j.write_fieldname("");
    nr_v2x_services_authorized.to_json(j);
  }
  if (ltev2x_services_authorized_present) {
    j.write_fieldname("");
    ltev2x_services_authorized.to_json(j);
  }
  if (nr_ue_sidelink_aggr_max_bitrate_present) {
    j.write_fieldname("");
    nr_ue_sidelink_aggr_max_bitrate.to_json(j);
  }
  if (lte_ue_sidelink_aggr_max_bitrate_present) {
    j.write_fieldname("");
    lte_ue_sidelink_aggr_max_bitrate.to_json(j);
  }
  if (pc5_link_ambr_present) {
    j.write_fieldname("");
    pc5_link_ambr.to_json(j);
  }
  if (sl_drbs_to_be_setup_list_present) {
    j.write_fieldname("");
    sl_drbs_to_be_setup_list.to_json(j);
  }
  if (conditional_inter_du_mob_info_present) {
    j.write_fieldname("");
    conditional_inter_du_mob_info.to_json(j);
  }
  if (management_based_mdt_plmn_list_present) {
    j.write_fieldname("");
    management_based_mdt_plmn_list.to_json(j);
  }
  if (serving_n_id_present) {
    j.write_fieldname("");
    serving_n_id.to_json(j);
  }
  if (f1_c_transfer_path_present) {
    j.write_fieldname("");
    f1_c_transfer_path.to_json(j);
  }
  if (f1_c_transfer_path_nr_dc_present) {
    j.write_fieldname("");
    f1_c_transfer_path_nr_dc.to_json(j);
  }
  if (mdt_polluted_meas_ind_present) {
    j.write_fieldname("");
    mdt_polluted_meas_ind.to_json(j);
  }
  if (scg_activation_request_present) {
    j.write_fieldname("");
    scg_activation_request.to_json(j);
  }
  if (cg_sdt_session_info_old_present) {
    j.write_fieldname("");
    cg_sdt_session_info_old.to_json(j);
  }
  if (five_g_pro_se_authorized_present) {
    j.write_fieldname("");
    five_g_pro_se_authorized.to_json(j);
  }
  if (five_g_pro_se_ue_pc5_aggr_max_bitrate_present) {
    j.write_fieldname("");
    five_g_pro_se_ue_pc5_aggr_max_bitrate.to_json(j);
  }
  if (five_g_pro_se_pc5_link_ambr_present) {
    j.write_fieldname("");
    five_g_pro_se_pc5_link_ambr.to_json(j);
  }
  if (uu_rlc_ch_to_be_setup_list_present) {
    j.write_fieldname("");
    uu_rlc_ch_to_be_setup_list.to_json(j);
  }
  if (pc5_rlc_ch_to_be_setup_list_present) {
    j.write_fieldname("");
    pc5_rlc_ch_to_be_setup_list.to_json(j);
  }
  if (path_switch_cfg_present) {
    j.write_fieldname("");
    path_switch_cfg.to_json(j);
  }
  if (gnb_du_ue_slice_max_bit_rate_list_present) {
    j.write_fieldname("");
    gnb_du_ue_slice_max_bit_rate_list.to_json(j);
  }
  if (multicast_mbs_session_setup_list_present) {
    j.write_fieldname("");
    multicast_mbs_session_setup_list.to_json(j);
  }
  if (ue_multicast_m_rbs_to_be_setup_list_present) {
    j.write_fieldname("");
    ue_multicast_m_rbs_to_be_setup_list.to_json(j);
  }
  if (serving_cell_mo_list_present) {
    j.write_fieldname("");
    serving_cell_mo_list.to_json(j);
  }
  j.end_obj();
}

ue_context_setup_resp_ies_container::ue_context_setup_resp_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  du_to_cu_rrc_info(39, crit_e::reject),
  c_rnti(95, crit_e::ignore),
  res_coordination_transfer_container(49, crit_e::ignore),
  full_cfg(94, crit_e::reject),
  drbs_setup_list(27, crit_e::ignore),
  srbs_failed_to_be_setup_list(66, crit_e::ignore),
  drbs_failed_to_be_setup_list(15, crit_e::ignore),
  scell_failedto_setup_list(83, crit_e::ignore),
  inactivity_monitoring_resp(98, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore),
  srbs_setup_list(202, crit_e::ignore),
  bh_chs_setup_list(260, crit_e::ignore),
  bh_chs_failed_to_be_setup_list(279, crit_e::ignore),
  sl_drbs_setup_list(324, crit_e::ignore),
  sl_drbs_failed_to_be_setup_list(316, crit_e::ignore),
  requested_target_cell_global_id(376, crit_e::reject),
  scg_activation_status(548, crit_e::ignore),
  uu_rlc_ch_setup_list(602, crit_e::ignore),
  uu_rlc_ch_failed_to_be_setup_list(603, crit_e::ignore),
  pc5_rlc_ch_setup_list(611, crit_e::ignore),
  pc5_rlc_ch_failed_to_be_setup_list(612, crit_e::ignore),
  serving_cell_mo_encoded_in_cgc_list(697, crit_e::ignore)
{
}
SRSASN_CODE ue_context_setup_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += c_rnti_present ? 1 : 0;
  nof_ies += res_coordination_transfer_container_present ? 1 : 0;
  nof_ies += full_cfg_present ? 1 : 0;
  nof_ies += drbs_setup_list_present ? 1 : 0;
  nof_ies += srbs_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += drbs_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += scell_failedto_setup_list_present ? 1 : 0;
  nof_ies += inactivity_monitoring_resp_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += srbs_setup_list_present ? 1 : 0;
  nof_ies += bh_chs_setup_list_present ? 1 : 0;
  nof_ies += bh_chs_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += sl_drbs_setup_list_present ? 1 : 0;
  nof_ies += sl_drbs_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += requested_target_cell_global_id_present ? 1 : 0;
  nof_ies += scg_activation_status_present ? 1 : 0;
  nof_ies += uu_rlc_ch_setup_list_present ? 1 : 0;
  nof_ies += uu_rlc_ch_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += pc5_rlc_ch_setup_list_present ? 1 : 0;
  nof_ies += pc5_rlc_ch_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += serving_cell_mo_encoded_in_cgc_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(du_to_cu_rrc_info.pack(bref));
  if (c_rnti_present) {
    HANDLE_CODE(c_rnti.pack(bref));
  }
  if (res_coordination_transfer_container_present) {
    HANDLE_CODE(res_coordination_transfer_container.pack(bref));
  }
  if (full_cfg_present) {
    HANDLE_CODE(full_cfg.pack(bref));
  }
  if (drbs_setup_list_present) {
    HANDLE_CODE(drbs_setup_list.pack(bref));
  }
  if (srbs_failed_to_be_setup_list_present) {
    HANDLE_CODE(srbs_failed_to_be_setup_list.pack(bref));
  }
  if (drbs_failed_to_be_setup_list_present) {
    HANDLE_CODE(drbs_failed_to_be_setup_list.pack(bref));
  }
  if (scell_failedto_setup_list_present) {
    HANDLE_CODE(scell_failedto_setup_list.pack(bref));
  }
  if (inactivity_monitoring_resp_present) {
    HANDLE_CODE(inactivity_monitoring_resp.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (srbs_setup_list_present) {
    HANDLE_CODE(srbs_setup_list.pack(bref));
  }
  if (bh_chs_setup_list_present) {
    HANDLE_CODE(bh_chs_setup_list.pack(bref));
  }
  if (bh_chs_failed_to_be_setup_list_present) {
    HANDLE_CODE(bh_chs_failed_to_be_setup_list.pack(bref));
  }
  if (sl_drbs_setup_list_present) {
    HANDLE_CODE(sl_drbs_setup_list.pack(bref));
  }
  if (sl_drbs_failed_to_be_setup_list_present) {
    HANDLE_CODE(sl_drbs_failed_to_be_setup_list.pack(bref));
  }
  if (requested_target_cell_global_id_present) {
    HANDLE_CODE(requested_target_cell_global_id.pack(bref));
  }
  if (scg_activation_status_present) {
    HANDLE_CODE(scg_activation_status.pack(bref));
  }
  if (uu_rlc_ch_setup_list_present) {
    HANDLE_CODE(uu_rlc_ch_setup_list.pack(bref));
  }
  if (uu_rlc_ch_failed_to_be_setup_list_present) {
    HANDLE_CODE(uu_rlc_ch_failed_to_be_setup_list.pack(bref));
  }
  if (pc5_rlc_ch_setup_list_present) {
    HANDLE_CODE(pc5_rlc_ch_setup_list.pack(bref));
  }
  if (pc5_rlc_ch_failed_to_be_setup_list_present) {
    HANDLE_CODE(pc5_rlc_ch_failed_to_be_setup_list.pack(bref));
  }
  if (serving_cell_mo_encoded_in_cgc_list_present) {
    HANDLE_CODE(serving_cell_mo_encoded_in_cgc_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_setup_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 39: {
        nof_mandatory_ies--;
        du_to_cu_rrc_info.id = id;
        HANDLE_CODE(du_to_cu_rrc_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(du_to_cu_rrc_info.value.unpack(bref));
        break;
      }
      case 95: {
        c_rnti_present = true;
        c_rnti.id      = id;
        HANDLE_CODE(c_rnti.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(c_rnti.value.unpack(bref));
        break;
      }
      case 49: {
        res_coordination_transfer_container_present = true;
        res_coordination_transfer_container.id      = id;
        HANDLE_CODE(res_coordination_transfer_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_container.value.unpack(bref));
        break;
      }
      case 94: {
        full_cfg_present = true;
        full_cfg.id      = id;
        HANDLE_CODE(full_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(full_cfg.value.unpack(bref));
        break;
      }
      case 27: {
        drbs_setup_list_present = true;
        drbs_setup_list.id      = id;
        HANDLE_CODE(drbs_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_setup_list.value.unpack(bref));
        break;
      }
      case 66: {
        srbs_failed_to_be_setup_list_present = true;
        srbs_failed_to_be_setup_list.id      = id;
        HANDLE_CODE(srbs_failed_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_failed_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 15: {
        drbs_failed_to_be_setup_list_present = true;
        drbs_failed_to_be_setup_list.id      = id;
        HANDLE_CODE(drbs_failed_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_failed_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 83: {
        scell_failedto_setup_list_present = true;
        scell_failedto_setup_list.id      = id;
        HANDLE_CODE(scell_failedto_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scell_failedto_setup_list.value.unpack(bref));
        break;
      }
      case 98: {
        inactivity_monitoring_resp_present = true;
        inactivity_monitoring_resp.id      = id;
        HANDLE_CODE(inactivity_monitoring_resp.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(inactivity_monitoring_resp.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 202: {
        srbs_setup_list_present = true;
        srbs_setup_list.id      = id;
        HANDLE_CODE(srbs_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_setup_list.value.unpack(bref));
        break;
      }
      case 260: {
        bh_chs_setup_list_present = true;
        bh_chs_setup_list.id      = id;
        HANDLE_CODE(bh_chs_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bh_chs_setup_list.value.unpack(bref));
        break;
      }
      case 279: {
        bh_chs_failed_to_be_setup_list_present = true;
        bh_chs_failed_to_be_setup_list.id      = id;
        HANDLE_CODE(bh_chs_failed_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bh_chs_failed_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 324: {
        sl_drbs_setup_list_present = true;
        sl_drbs_setup_list.id      = id;
        HANDLE_CODE(sl_drbs_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sl_drbs_setup_list.value.unpack(bref));
        break;
      }
      case 316: {
        sl_drbs_failed_to_be_setup_list_present = true;
        sl_drbs_failed_to_be_setup_list.id      = id;
        HANDLE_CODE(sl_drbs_failed_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sl_drbs_failed_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 376: {
        requested_target_cell_global_id_present = true;
        requested_target_cell_global_id.id      = id;
        HANDLE_CODE(requested_target_cell_global_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(requested_target_cell_global_id.value.unpack(bref));
        break;
      }
      case 548: {
        scg_activation_status_present = true;
        scg_activation_status.id      = id;
        HANDLE_CODE(scg_activation_status.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scg_activation_status.value.unpack(bref));
        break;
      }
      case 602: {
        uu_rlc_ch_setup_list_present = true;
        uu_rlc_ch_setup_list.id      = id;
        HANDLE_CODE(uu_rlc_ch_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uu_rlc_ch_setup_list.value.unpack(bref));
        break;
      }
      case 603: {
        uu_rlc_ch_failed_to_be_setup_list_present = true;
        uu_rlc_ch_failed_to_be_setup_list.id      = id;
        HANDLE_CODE(uu_rlc_ch_failed_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uu_rlc_ch_failed_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 611: {
        pc5_rlc_ch_setup_list_present = true;
        pc5_rlc_ch_setup_list.id      = id;
        HANDLE_CODE(pc5_rlc_ch_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_rlc_ch_setup_list.value.unpack(bref));
        break;
      }
      case 612: {
        pc5_rlc_ch_failed_to_be_setup_list_present = true;
        pc5_rlc_ch_failed_to_be_setup_list.id      = id;
        HANDLE_CODE(pc5_rlc_ch_failed_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pc5_rlc_ch_failed_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 697: {
        serving_cell_mo_encoded_in_cgc_list_present = true;
        serving_cell_mo_encoded_in_cgc_list.id      = id;
        HANDLE_CODE(serving_cell_mo_encoded_in_cgc_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serving_cell_mo_encoded_in_cgc_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_setup_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  du_to_cu_rrc_info.to_json(j);
  if (c_rnti_present) {
    j.write_fieldname("");
    c_rnti.to_json(j);
  }
  if (res_coordination_transfer_container_present) {
    j.write_fieldname("");
    res_coordination_transfer_container.to_json(j);
  }
  if (full_cfg_present) {
    j.write_fieldname("");
    full_cfg.to_json(j);
  }
  if (drbs_setup_list_present) {
    j.write_fieldname("");
    drbs_setup_list.to_json(j);
  }
  if (srbs_failed_to_be_setup_list_present) {
    j.write_fieldname("");
    srbs_failed_to_be_setup_list.to_json(j);
  }
  if (drbs_failed_to_be_setup_list_present) {
    j.write_fieldname("");
    drbs_failed_to_be_setup_list.to_json(j);
  }
  if (scell_failedto_setup_list_present) {
    j.write_fieldname("");
    scell_failedto_setup_list.to_json(j);
  }
  if (inactivity_monitoring_resp_present) {
    j.write_fieldname("");
    inactivity_monitoring_resp.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (srbs_setup_list_present) {
    j.write_fieldname("");
    srbs_setup_list.to_json(j);
  }
  if (bh_chs_setup_list_present) {
    j.write_fieldname("");
    bh_chs_setup_list.to_json(j);
  }
  if (bh_chs_failed_to_be_setup_list_present) {
    j.write_fieldname("");
    bh_chs_failed_to_be_setup_list.to_json(j);
  }
  if (sl_drbs_setup_list_present) {
    j.write_fieldname("");
    sl_drbs_setup_list.to_json(j);
  }
  if (sl_drbs_failed_to_be_setup_list_present) {
    j.write_fieldname("");
    sl_drbs_failed_to_be_setup_list.to_json(j);
  }
  if (requested_target_cell_global_id_present) {
    j.write_fieldname("");
    requested_target_cell_global_id.to_json(j);
  }
  if (scg_activation_status_present) {
    j.write_fieldname("");
    scg_activation_status.to_json(j);
  }
  if (uu_rlc_ch_setup_list_present) {
    j.write_fieldname("");
    uu_rlc_ch_setup_list.to_json(j);
  }
  if (uu_rlc_ch_failed_to_be_setup_list_present) {
    j.write_fieldname("");
    uu_rlc_ch_failed_to_be_setup_list.to_json(j);
  }
  if (pc5_rlc_ch_setup_list_present) {
    j.write_fieldname("");
    pc5_rlc_ch_setup_list.to_json(j);
  }
  if (pc5_rlc_ch_failed_to_be_setup_list_present) {
    j.write_fieldname("");
    pc5_rlc_ch_failed_to_be_setup_list.to_json(j);
  }
  if (serving_cell_mo_encoded_in_cgc_list_present) {
    j.write_fieldname("");
    serving_cell_mo_encoded_in_cgc_list.to_json(j);
  }
  j.end_obj();
}

ue_inactivity_notif_ies_container::ue_inactivity_notif_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  drb_activity_list(100, crit_e::reject),
  sdt_termination_request(635, crit_e::ignore)
{
}
SRSASN_CODE ue_inactivity_notif_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += sdt_termination_request_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(drb_activity_list.pack(bref));
  if (sdt_termination_request_present) {
    HANDLE_CODE(sdt_termination_request.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_inactivity_notif_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 100: {
        nof_mandatory_ies--;
        drb_activity_list.id = id;
        HANDLE_CODE(drb_activity_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drb_activity_list.value.unpack(bref));
        break;
      }
      case 635: {
        sdt_termination_request_present = true;
        sdt_termination_request.id      = id;
        HANDLE_CODE(sdt_termination_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sdt_termination_request.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_inactivity_notif_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  drb_activity_list.to_json(j);
  if (sdt_termination_request_present) {
    j.write_fieldname("");
    sdt_termination_request.to_json(j);
  }
  j.end_obj();
}

ul_rrc_msg_transfer_ies_container::ul_rrc_msg_transfer_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  srb_id(64, crit_e::reject),
  rrc_container(50, crit_e::reject),
  sel_plmn_id(224, crit_e::reject),
  new_gnb_du_ue_f1ap_id(219, crit_e::reject)
{
}
SRSASN_CODE ul_rrc_msg_transfer_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += sel_plmn_id_present ? 1 : 0;
  nof_ies += new_gnb_du_ue_f1ap_id_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(srb_id.pack(bref));
  HANDLE_CODE(rrc_container.pack(bref));
  if (sel_plmn_id_present) {
    HANDLE_CODE(sel_plmn_id.pack(bref));
  }
  if (new_gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(new_gnb_du_ue_f1ap_id.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_rrc_msg_transfer_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 64: {
        nof_mandatory_ies--;
        srb_id.id = id;
        HANDLE_CODE(srb_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srb_id.value.unpack(bref));
        break;
      }
      case 50: {
        nof_mandatory_ies--;
        rrc_container.id = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 224: {
        sel_plmn_id_present = true;
        sel_plmn_id.id      = id;
        HANDLE_CODE(sel_plmn_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sel_plmn_id.value.unpack(bref));
        break;
      }
      case 219: {
        new_gnb_du_ue_f1ap_id_present = true;
        new_gnb_du_ue_f1ap_id.id      = id;
        HANDLE_CODE(new_gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(new_gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ul_rrc_msg_transfer_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  srb_id.to_json(j);
  j.write_fieldname("");
  rrc_container.to_json(j);
  if (sel_plmn_id_present) {
    j.write_fieldname("");
    sel_plmn_id.to_json(j);
  }
  if (new_gnb_du_ue_f1ap_id_present) {
    j.write_fieldname("");
    new_gnb_du_ue_f1ap_id.to_json(j);
  }
  j.end_obj();
}

write_replace_warning_request_ies_container::write_replace_warning_request_ies_container() :
  transaction_id(78, crit_e::reject),
  pws_sys_info(140, crit_e::reject),
  repeat_period(141, crit_e::reject),
  numof_broadcast_request(142, crit_e::reject),
  cells_to_be_broadcast_list(144, crit_e::reject)
{
}
SRSASN_CODE write_replace_warning_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += cells_to_be_broadcast_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(pws_sys_info.pack(bref));
  HANDLE_CODE(repeat_period.pack(bref));
  HANDLE_CODE(numof_broadcast_request.pack(bref));
  if (cells_to_be_broadcast_list_present) {
    HANDLE_CODE(cells_to_be_broadcast_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE write_replace_warning_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 140: {
        nof_mandatory_ies--;
        pws_sys_info.id = id;
        HANDLE_CODE(pws_sys_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pws_sys_info.value.unpack(bref));
        break;
      }
      case 141: {
        nof_mandatory_ies--;
        repeat_period.id = id;
        HANDLE_CODE(repeat_period.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(repeat_period.value.unpack(bref));
        break;
      }
      case 142: {
        nof_mandatory_ies--;
        numof_broadcast_request.id = id;
        HANDLE_CODE(numof_broadcast_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(numof_broadcast_request.value.unpack(bref));
        break;
      }
      case 144: {
        cells_to_be_broadcast_list_present = true;
        cells_to_be_broadcast_list.id      = id;
        HANDLE_CODE(cells_to_be_broadcast_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_broadcast_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void write_replace_warning_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  pws_sys_info.to_json(j);
  j.write_fieldname("");
  repeat_period.to_json(j);
  j.write_fieldname("");
  numof_broadcast_request.to_json(j);
  if (cells_to_be_broadcast_list_present) {
    j.write_fieldname("");
    cells_to_be_broadcast_list.to_json(j);
  }
  j.end_obj();
}

write_replace_warning_resp_ies_container::write_replace_warning_resp_ies_container() :
  transaction_id(78, crit_e::reject),
  cells_broadcast_completed_list(146, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore),
  ded_si_delivery_needed_ue_list(189, crit_e::ignore)
{
}
SRSASN_CODE write_replace_warning_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_broadcast_completed_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += ded_si_delivery_needed_ue_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (cells_broadcast_completed_list_present) {
    HANDLE_CODE(cells_broadcast_completed_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (ded_si_delivery_needed_ue_list_present) {
    HANDLE_CODE(ded_si_delivery_needed_ue_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE write_replace_warning_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 146: {
        cells_broadcast_completed_list_present = true;
        cells_broadcast_completed_list.id      = id;
        HANDLE_CODE(cells_broadcast_completed_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_broadcast_completed_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 189: {
        ded_si_delivery_needed_ue_list_present = true;
        ded_si_delivery_needed_ue_list.id      = id;
        HANDLE_CODE(ded_si_delivery_needed_ue_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ded_si_delivery_needed_ue_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void write_replace_warning_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (cells_broadcast_completed_list_present) {
    j.write_fieldname("");
    cells_broadcast_completed_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (ded_si_delivery_needed_ue_list_present) {
    j.write_fieldname("");
    ded_si_delivery_needed_ue_list.to_json(j);
  }
  j.end_obj();
}
