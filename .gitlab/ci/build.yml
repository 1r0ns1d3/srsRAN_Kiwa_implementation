include:
  - project: softwareradiosystems/testing-tools
    ref: "7"
    file: .gitlab/ci-shared/workflow.yml
  - project: softwareradiosystems/testing-tools
    ref: "7"
    file: .gitlab/versions.yml

variables:
  # Input variables
  # General
  os_type: ubuntu
  os_version: "22.04"
  docker_version: $DOCKER_BUILDER_VERSION
  # Build
  compiler: gcc
  uhd_version: "4.1.0.5"
  check_flags: "true"
  # Tests
  run_tests: "true"
  enable_coverage: "true"
  coverage_full: $ON_SCHEDULE

stages:
  - build
  - tests

.build_and_unit:
  image: registry.gitlab.com/softwareradiosystems/testing-tools/srs-builder-gnb-${os_type}-${os_version}:$docker_version
  tags:
    - srs-rfci-docker

# Build

.build:
  stage: build
  extends: .build_and_unit
  needs: []
  script:
    - |
      if [ $enable_coverage = "true" ]; then
        EXTRA_BUILD_ARGS="-DENABLE_GCOV=True"
      fi
    - builder.sh -c $compiler -u $uhd_version $EXTRA_BUILD_ARGS .
  cache: &build_cache
    key: ${os_type}-${os_version}-${docker_version}-${compiler}
    paths:
      - ccache
  artifacts:
    paths:
      # Binaries
      - build/apps/cu-up/cu-up
      # Ctest
      - build/CTestTestfile.cmake
      - build/unittests
      - build/integrationtests
      - build/**/*.gcno
    expire_in: 10 minutes

build [cached]:
  # The job will use the cache for latest compilation
  extends: .build
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR == "true"
  cache:
    <<: *build_cache
    policy: pull

build [clean and update cache]:
  # A clean build will be done and the job will push a new fresh cache
  extends: .build
  rules:
    - if: $ON_SCHEDULE
  cache:
    <<: *build_cache
    policy: push

build [clean]:
  # Fresh build with no interacton with the cache
  extends: .build
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
  cache: []

cmake flag check:
  stage: build
  extends: .build_and_unit
  rules:
    - if: $ON_DEFAULT_BRANCH
      when: never
    - if: $check_flags == "true"
  script:
    - CC=/usr/bin/gcc
    - CXX=/usr/bin/g++
    - mkdir build && cd build && cmake -G Ninja ${flag} ..
  parallel:
    matrix:
      - flag:
          [
            -DSTOP_ON_WARNING=True,
            -DENABLE_TSAN=True,
            -DENABLE_ASAN=True,
            -DENABLE_EXPORT=True,
            -DBUILD_TESTS=False,
          ]
  dependencies: []

# Unit tests

.ctest:
  stage: tests
  extends: .build_and_unit
  rules:
    - if: $ON_DEFAULT_BRANCH
      when: never
    - if: $run_tests == "true"
  needs:
    - job: build [cached]
      artifacts: true
      optional: true
    - job: build [clean and update cache]
      artifacts: true
      optional: true
    - job: build [clean]
      artifacts: true
      optional: true
  variables:
    test_folder: ""
  script:
    # Launch ctest
    - cd build/${test_folder}
    - ctest -j "$(nproc --all)" --schedule-random --output-on-failure --output-junit xunit.xml
    # Launch coverage
    - cd ${CI_PROJECT_DIR}/build
    - GCOVR_ARGS="-j "$(nproc --all)" --exclude-unreachable-branches --exclude-directories unittests --exclude-directories integrationtests  --exclude-directories apps/examples --root ${CI_PROJECT_DIR}"
    - |
      if [ $enable_coverage = "true" ]; then 
        gcovr --xml --print-summary $GCOVR_ARGS -o coverage.xml
        filesize=$(stat -c%s coverage.xml)
        maxsize=$((10*1204*1024))
        (( filesize > maxsize )) && echo "coverage.xml is greater than 10MB, over gitlab limit" && exit 1
      fi
    - |
      if [ $enable_coverage = "true" ]; then 
        if [[ $coverage_full && $coverage_full = "true" ]]; then
          gcovr --html --html-details $GCOVR_ARGS -o coverage.html
        else
          gcovr --html                $GCOVR_ARGS -o coverage.html
        fi
      fi
  after_script:
    # Move files to upload to root so no intermiddle folders will be created in the artifact
    - mkdir coverage_html
    - mv ${CI_PROJECT_DIR}/build/${test_folder}/xunit.xml ${CI_PROJECT_DIR}
    - mv ${CI_PROJECT_DIR}/build/coverage.xml             ${CI_PROJECT_DIR}
    - mv ${CI_PROJECT_DIR}/build/coverage.*               ${CI_PROJECT_DIR}/coverage_html
  artifacts:
    reports:
      junit: xunit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage_html
      - xunit.xml
    expire_in: 7 days

unit tests:
  extends: .ctest
  variables:
    test_folder: unittests
  coverage: /^\s*lines:\s*\d+.\d+\%/

integration tests:
  extends: .ctest
  variables:
    test_folder: integrationtests
