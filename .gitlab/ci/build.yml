include:
  - project: softwareradiosystems/testing-tools
    ref: "22"
    file: .gitlab/ci-shared/setup/all.yml

variables:
  # Input variables
  # General
  os_type: ubuntu
  os_version: "22.04"
  docker_version: $DOCKER_BUILDER_VERSION
  # Build
  compiler: gcc
  uhd_version: "4.1.0.5"
  # Tests
  run_tests: "true"
  # Modes
  mode: coverage # default, coverage, tsan, asan, valgrind

stages:
  - build
  - tests

.build_and_unit:
  image: registry.gitlab.com/softwareradiosystems/testing-tools/srs-builder-gnb-${os_type}-${os_version}:$docker_version
  tags:
    - srs-rfci-docker

################################################################################
# Build
################################################################################
.build:
  stage: build
  extends: .build_and_unit
  needs: []
  before_script:
    - |
      build_srsgnb() {
        case $mode in
          coverage)
            build_extra="-DENABLE_GCOV=True"
            ;;
          tsan)
            build_extra="-DCMAKE_BUILD_TYPE=Debug -DENABLE_TSAN=True"
            ;;
          asan)
            build_extra="-DCMAKE_BUILD_TYPE=Debug -DENABLE_ASAN=True"
            ;;
          valgrind)
            build_extra="-DCMAKE_BUILD_TYPE=Debug -DAUTO_DETECT_ISA=False"
            ;;
        esac      

        BUILD_CMD="builder.sh -c $compiler -u $uhd_version -DASSERT_LEVEL=PARANOID $build_extra ."
        echo "${BUILD_CMD}"
        echo "============================================================================================="
        $BUILD_CMD
      }
  script:
    - build_srsgnb
  cache: &build_cache
    key: ${os_type}-${os_version}-${docker_version}-${compiler}-${mode}
    paths:
      - ccache
    policy: pull
  artifacts:
    paths:
      # Binaries
      - build/apps/cu-up/cu-up
      # Ctest
      - build/CTestTestfile.cmake
      - build/DartConfiguration.tcl
      - build/unittests
      - build/integrationtests
      - build/**/*.gcno
    expire_in: 10 minutes

build [cached]:
  # The job will use the cache for latest compilation
  extends: .build
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR
  cache:
    <<: *build_cache
    policy: pull

build [clean and update cache]:
  # A clean build will be done and the job will push a new fresh cache
  extends: .build
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_SCHEDULE
  cache:
    <<: *build_cache
    policy: push

build [clean]:
  # Fresh build with no interacton with the cache
  extends: .build
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
  cache: []

################################################################################
# Test execution
################################################################################

.ctest:
  stage: tests
  extends: .build_and_unit
  rules:
    - if: $ON_DEFAULT_BRANCH
      when: never
    - if: $run_tests == "true"
  needs:
    - job: build [cached]
      artifacts: true
      optional: true
    - job: build [clean and update cache]
      artifacts: true
      optional: true
    - job: build [clean]
      artifacts: true
      optional: true
  variables:
    test_folder: ""
  script:
    # Launch ctest
    - cd build
    - |
      case $mode in
        tsan)
          ctest_extra="-L tsan"
          ;;
        valgrind)
          cp DartConfiguration.tcl ${test_folder}/
          sed -i "s/${CI_PROJECT_DIR//\//\\/}\/build/${CI_PROJECT_DIR//\//\\/}\/build\/${test_folder//\//\\/}/" ${test_folder}/DartConfiguration.tcl
          sed -i "s/MemoryCheckCommandOptions: /MemoryCheckCommandOptions: --verbose --trace-children=yes --time-stamp=yes --leak-check=full --show-leak-kinds=all --show-reachable=yes/" ${test_folder}/DartConfiguration.tcl
          G_DEBUG=gc-friendly G_SLICE=always-malloc
          ctest_extra="-T memcheck --timeout 10800"
          ;;
      esac
    - |
      CTEST_CMD="ctest -j "$(nproc --all)" $ctest_extra --test-dir ${test_folder} --schedule-random --output-on-failure --output-junit xunit.xml"
      echo "${CTEST_CMD}"
      echo "============================================================================================="
      $CTEST_CMD && ret=0 || ret=1

    # Launch coverage
    - |
      if [[ $mode = "coverage" ]]; then 
        gcovr --xml --print-summary -j "$(nproc --all)" --exclude-unreachable-branches \
          --exclude-directories unittests \
          --exclude-directories integrationtests  \
          --exclude-directories benchmarks \
          --exclude-directories apps/examples \
          --exclude "${CI_PROJECT_DIR}/include/srsgnb/asn1/e1ap.h" \
          --exclude "${CI_PROJECT_DIR}/include/srsgnb/asn1/f1ap.h" \
          --exclude "${CI_PROJECT_DIR}/include/srsgnb/asn1/rrc_nr/.*" \
          --exclude "${CI_PROJECT_DIR}/lib/asn1/e1ap.cpp" \
          --exclude "${CI_PROJECT_DIR}/lib/asn1/f1ap.cpp" \
          --exclude "${CI_PROJECT_DIR}/lib/asn1/ngap.cpp" \
          --exclude "${CI_PROJECT_DIR}/lib/asn1/rrc_nr/.*" \
          --exclude-lines-by-pattern ".*srsgnb_assert.*|.*srsgnb_sanity_check.*" \
          --root ${CI_PROJECT_DIR} -o coverage.xml

        filesize=$(stat -c%s coverage.xml)
        maxsize=$((10*1204*1024))
        (( filesize > maxsize )) && echo "coverage.xml is greater than 10MB, over gitlab limit" && exit 1
      fi
    - exit $ret
  after_script:
    # Move files to upload to root so no intermiddle folders will be created in the artifact
    - mv ${CI_PROJECT_DIR}/build/${test_folder}/xunit.xml         ${CI_PROJECT_DIR}/${CI_JOB_ID}_xunit.xml
    - mv ${CI_PROJECT_DIR}/build/coverage.xml                     ${CI_PROJECT_DIR}/${CI_JOB_ID}_coverage.xml
    - mv ${CI_PROJECT_DIR}/build/${test_folder}/Testing/Temporary ${CI_PROJECT_DIR}/build/Testing/Temporary_${CI_JOB_ID}
  artifacts:
    when: always
    reports:
      junit: ${CI_JOB_ID}_xunit.xml
      coverage_report:
        coverage_format: cobertura
        path: ${CI_JOB_ID}_coverage.xml
    paths:
      - ${CI_JOB_ID}_xunit.xml
      - ${CI_JOB_ID}_coverage.xml
      - build/Testing/Temporary
      - build/Testing/Temporary_${CI_JOB_ID}
    expire_in: 10 minutes

unit tests:
  extends: .ctest
  variables:
    test_folder: unittests
  timeout: 4 hours # valgrind mode

integration tests:
  extends: .ctest
  variables:
    test_folder: integrationtests
