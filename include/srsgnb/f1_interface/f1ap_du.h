
#ifndef SRSGNB_F1AP_DU_H
#define SRSGNB_F1AP_DU_H

#include "srsgnb/adt/byte_buffer.h"
#include "srsgnb/adt/expected.h"
#include "srsgnb/asn1/f1ap.h"
#include "srsgnb/ran/du_types.h"
#include "srsgnb/ran/lcid.h"
#include "srsgnb/support/async/lazy_task.h"

namespace srsgnb {

struct f1ap_du_ue_create_request {
  du_ue_index_t ue_index;
};

struct f1ap_du_ue_create_response {
  bool result;
};

struct f1_rx_pdu {
  du_ue_index_t ue_index;
  lcid_t        lcid;
  byte_buffer   pdu;
};

struct ul_rrc_message_delivery_status {
  du_cell_index_t cell_index;
  du_ue_index_t   ue_index;
  lcid_t          lcid;
  bool            rrc_delivery_status;
};

/// TODO: Rename/change type of Rx PDU
class f1ap_du_ul_interface
{
public:
  virtual ~f1ap_du_ul_interface()                                                           = default;
  virtual void ul_rrc_message_delivery_report(const ul_rrc_message_delivery_status& report) = 0;
  virtual void handle_pdu(f1_rx_pdu pdu)                                                    = 0;
};

struct du_setup_params {
  // mandatory
  uint64_t gnb_du_id;
  uint8_t  rrc_version;

  // optional
  std::string gnb_du_name;
};

struct du_setup_result {
  expected<asn1::f1ap::f1_setup_resp_s, asn1::f1ap::f1_setup_fail_s> result;
};

class f1ap_du_configurer
{
public:
  virtual ~f1ap_du_configurer() = default;

  /// Initiates DU setup procedure.
  virtual lazy_task<du_setup_result> f1ap_du_setup_request(const du_setup_params& params) = 0;

  /// Initiates creation of UE context in F1.
  virtual lazy_task<f1ap_du_ue_create_response> handle_ue_creation_request(const f1ap_du_ue_create_request& msg) = 0;
};

/// Interface used by DU high to push unpacked F1AP PDUs.
class f1c_pdu_handler
{
public:
  virtual ~f1c_pdu_handler()                                           = default;
  virtual void handle_unpacked_pdu(const asn1::f1ap::f1_ap_pdu_c& pdu) = 0;
};

/// Interface used by F1 to inform about events.
class f1c_event_handler
{
public:
  virtual ~f1c_event_handler()          = default;
  virtual void handle_connection_loss() = 0;
};

/// Combined entry point for F1C/U handling.
class f1_du_interface : public f1c_pdu_handler,
                        public f1c_event_handler,
                        public f1ap_du_ul_interface,
                        public f1ap_du_configurer
{
public:
  virtual ~f1_du_interface() = default;
};

/// F1C notification interface using F1AP type.
class f1c_pdu_notifier
{
public:
  virtual ~f1c_pdu_notifier() = default;

  /// This callback is invoked for each outgoing packed that is generated by the F1AP interface.
  virtual void on_new_pdu(const asn1::f1ap::f1_ap_pdu_c& pdu) = 0;
};

} // namespace srsgnb

#endif // SRSGNB_F1AP_DU_H
