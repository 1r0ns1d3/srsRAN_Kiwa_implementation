#
# Copyright 2013-2023 Software Radio Systems Limited
#
# By using this file, you agree to the terms and conditions set
# forth in the LICENSE file which can be found at the top level of
# the distribution.
#

include:
  - project: softwareradiosystems/ci/tools
    ref: "5"
    file: .gitlab/ci-shared/setup/all.yml

stages:
  - build and unit tests

variables:
  INFRASTRUCTURE_TAG:
    description: Computer architecture and supported instruction sets
    options:
      - "aws-spot-amd64"
      - "aws-spot-arm64"
      - "aws-demand-amd64-avx2"
      - "aws-demand-amd64-avx2-avx512"
    value: "aws-spot-amd64"
  OS:
    description: Operating system
    options:
      - "ubuntu-22.04"
      - "ubuntu-20.04"
      - "archlinux-latest"
      - "rhel-8"
    value: "ubuntu-22.04"
  COMPILER:
    description: Compiler to use
    options:
      - "gcc"
      - "clang"
    value: "gcc"
  TEST_MODE:
    description: What tests to run. None won't run any test at all.
    options:
      - "default"
      - "coverage"
      - "asan"
      - "tsan"
      - "valgrind"
      - "none"
    value: "default"
  BUILD_ARGS:
    description: It will be passed to cmake
    value: ""
  UHD_VERSION:
    description: must be one version supported in the specified OS
    value: ""

# Code to reuse. No jobs
.cache_src_set: &cache_src_set
  - key: srsgnb-src
    paths: [$CI_PROJECT_DIR]
    untracked: false
    policy: push
    when: on_success

.cache_src_get: &cache_src_get
  - key: srsgnb-src
    paths: [$CI_PROJECT_DIR]
    policy: pull

.cache_build_set: &cache_build_set
  - key: ${OS}-${DOCKER_BUILDER_VERSION}-${COMPILER}
    paths: [ccache]
    policy: push

.cache_build_get: &cache_build_get
  - key: ${OS}-${DOCKER_BUILDER_VERSION}-${COMPILER}
    paths: [ccache]
    policy: pull

# Git source downloader job

push_src_cache:
  stage: .pre
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  script:
    - echo "Saving git repo in cache"
  cache:
    - *cache_src_set
  parallel:
    matrix:
      - INFRASTRUCTURE_TAG: aws-spot-amd64
      - INFRASTRUCTURE_TAG: aws-spot-arm64

pull_src_cache:
  stage: .pre
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    GIT_STRATEGY: none
  needs:
    - job: push_src_cache
      artifacts: false
      optional: true
  script:
    - echo "Reading git repo in cache"
  cache:
    - *cache_src_get
  parallel:
    matrix:
      - INFRASTRUCTURE_TAG: aws-spot-amd64
      - INFRASTRUCTURE_TAG: aws-spot-arm64

# Template job

.build_and_unit:
  image: ${CR_REGISTRY_URI}/${CI_TOOLS_REPO}/srs-builder-gnb-${OS}:${DOCKER_BUILDER_VERSION}
  tags:
    - ${INFRASTRUCTURE_TAG}
  stage: build and unit tests
  variables:
    BUILD_TYPE: "" # Empty for cmake default
    ASSERT_LEVEL: "" # Empty for cmake default
    ENABLE_EXPORT: "" # Empty for cmake default
    ENABLE_FFTW: "" # Empty for cmake default
    ENABLE_UHD: "" # Empty for cmake default
    ENABLE_ZEROMQ: "True" # Empty for cmake default
    ENABLE_ASAN: "" # Empty for cmake default
    ENABLE_TSAN: "" # Empty for cmake default
    ENABLE_GCOV: "" # Empty for cmake default
    AUTO_DETECT_ISA: "False"
    # CI
    DOCKER_BUILDER_VERSION: "1.7.8"
    UPLOAD_ARTIFACTS: "" # Empty by default
    GIT_STRATEGY: none
  needs:
    - job: pull_src_cache
      artifacts: false
      optional: true
  before_script:
    - git remote set-url origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git
    - git fetch --depth=1 origin $CI_COMMIT_SHA
    - git reset --hard $CI_COMMIT_SHA
    - |
      build_srsgnb() {
        if [ -n "${UHD_VERSION}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -u ${UHD_VERSION}"
        fi
        if [ -n "${BUILD_TYPE}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DCMAKE_BUILD_TYPE=${BUILD_TYPE}"
        fi
        if [ -n "${ASSERT_LEVEL}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DASSERT_LEVEL=${ASSERT_LEVEL}"
        fi
        if [ -n "${AUTO_DETECT_ISA}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DAUTO_DETECT_ISA=${AUTO_DETECT_ISA}"
        fi
        if [ -n "${ENABLE_EXPORT}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_EXPORT=${ENABLE_EXPORT}"
        fi
        if [ -n "${ENABLE_FFTW}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_FFTW=${ENABLE_FFTW}"
        fi
        if [ -n "${ENABLE_UHD}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_UHD=${ENABLE_UHD}"
        fi
        if [ -n "${ENABLE_ZEROMQ}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_ZEROMQ=${ENABLE_ZEROMQ}"
        fi
        if [ -n "${ENABLE_ASAN}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_ASAN=${ENABLE_ASAN}"
        fi
        if [ -n "${ENABLE_TSAN}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_TSAN=${ENABLE_TSAN}"
        fi
        if [ -n "${ENABLE_GCOV}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_GCOV=${ENABLE_GCOV}"
        fi
        if [ -n "${ENABLE_AVX2}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_AVX2=${ENABLE_AVX2}"
        fi
        if [ -n "${ENABLE_AVX512}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_AVX512=${ENABLE_AVX512}"
        fi
        if [[ $TEST_MODE = "none" ]]; then
          BUILD_ARGS="${BUILD_ARGS} -DBUILD_TESTS=False"
        fi

        BUILD_CMD="builder.sh -c ${COMPILER} ${BUILD_ARGS} ."
        echo "${BUILD_CMD}"
        echo "============================================================================================="
        $BUILD_CMD
        cd build && ninja install && cd ..
      }
    - |
      launch_tests() {
        cd ${CI_PROJECT_DIR}/build
        case $TEST_MODE in
          none)
            echo "Tests skipped"
            exit 0
            ;;
          tsan)
            ctest_extra="-L tsan"
            ;;
          valgrind)
            cp DartConfiguration.tcl ${test_folder}/
            sed -i "s/${CI_PROJECT_DIR//\//\\/}\/build/${CI_PROJECT_DIR//\//\\/}\/build\/${test_folder//\//\\/}/" ${test_folder}/DartConfiguration.tcl
            sed -i "s/MemoryCheckCommandOptions: /MemoryCheckCommandOptions: --verbose --trace-children=yes --time-stamp=yes --leak-check=full --show-leak-kinds=all --show-reachable=yes/" ${test_folder}/DartConfiguration.tcl
            G_DEBUG=gc-friendly G_SLICE=always-malloc
            ctest_extra="-T memcheck --timeout 10800"
            ;;
        esac
        CTEST_CMD="ctest -j "$(nproc --all)" $ctest_extra --schedule-random --output-on-failure --output-junit xunit.xml"
        echo "${CTEST_CMD}"
        echo "============================================================================================="
        $CTEST_CMD && ret=0 || ret=1

        if [[ $TEST_MODE = "coverage" ]]; then 
          gcovr --xml --print-summary -j "$(nproc --all)" --exclude-unreachable-branches \
            --gcov-ignore-parse-errors \
            --exclude "${CI_PROJECT_DIR}/tests/*" \
            --exclude "${CI_PROJECT_DIR}/benchmarks/*" \
            --exclude "${CI_PROJECT_DIR}/apps/examples/*" \
            --exclude "${CI_PROJECT_DIR}/external/*" \
            --exclude "${CI_PROJECT_DIR}/include/srsgnb/asn1/e1ap/.*" \
            --exclude "${CI_PROJECT_DIR}/include/srsgnb/asn1/e2ap/.*" \
            --exclude "${CI_PROJECT_DIR}/include/srsgnb/asn1/f1ap/.*" \
            --exclude "${CI_PROJECT_DIR}/include/srsgnb/asn1/ngap/.*" \
            --exclude "${CI_PROJECT_DIR}/include/srsgnb/asn1/rrc_nr/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/asn1/e1ap/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/asn1/e2ap/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/asn1/f1ap/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/asn1/ngap/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/asn1/rrc_nr/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/.*" \
            --exclude-lines-by-pattern ".*srsgnb_assert.*|.*srsgnb_sanity_check.*" \
            --root ${CI_PROJECT_DIR} \
            -o coverage.xml

          filesize=$(stat -c%s coverage.xml)
          maxsize=$((10*1204*1024))
          (( filesize > maxsize )) && echo "coverage.xml is greater than 10MB, over gitlab limit" && exit 1
        fi
        exit $ret
      }
  script:
    - build_srsgnb
    - launch_tests
  after_script:
    - mv ${CI_PROJECT_DIR}/build/coverage.xml      ${CI_PROJECT_DIR}/${CI_JOB_ID}_coverage.xml            || true
    - |
      if [ -z "${UPLOAD_ARTIFACTS}" ]; then
        rm -Rf ${CI_PROJECT_DIR}/build
      fi
  timeout: 4h
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: ${CI_JOB_ID}_coverage.xml
    paths:
      - ${CI_JOB_ID}_coverage.xml
      - build/apps/gnb/gnb
    expire_in: 10 minutes
  cache:
    - *cache_src_get

# Main combinations

.build_and_unit_main:
  extends: .build_and_unit
  variables:
    ASSERT_LEVEL: PARANOID
  parallel:
    matrix:
      - OS: ubuntu-22.04
        TEST_MODE: coverage
        COMPILER: gcc
        BUILD_TYPE: Release
        ENABLE_GCOV: "True"
      - OS: archlinux-latest
        TEST_MODE: default
        COMPILER: gcc
        BUILD_TYPE: Release
      - OS: ubuntu-20.04
        TEST_MODE: default
        COMPILER: gcc
        BUILD_TYPE: Release
        ENABLE_EXPORT: "True"
      - OS: rhel-8
        TEST_MODE: default
        COMPILER: gcc
        BUILD_TYPE: Release

build cached:
  extends: .build_and_unit_main
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR
  cache:
    - *cache_src_get
    - *cache_build_get

build update cache:
  extends: .build_and_unit_main
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $CI_DESCRIPTION =~ /Nightly/
  cache:
    - *cache_src_get
    - *cache_build_set

build clean:
  extends: .build_and_unit_main
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
  cache:
    - *cache_src_get

# Intermediate commits

intermediate commits:
  extends: .build_and_unit
  rules:
    - if: $ON_MR
  variables:
    OS: ubuntu-22.04
    TEST_MODE: none
    COMPILER: gcc
    BUILD_TYPE: Release
    ASSERT_LEVEL: PARANOID
    ENABLE_EXPORT: "False"
    ENABLE_GCOV: "True"
  script:
    - git config advice.detachedHead false
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME --depth 20
    - |
      for rev in $(git rev-list --reverse origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME..origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME^1)
      do
        echo "##################################################"
        echo "#### $rev ####"
        echo "##################################################"
        git checkout $rev
        sed -i "s/-Wall -Werror/-Wall/" CMakeLists.txt
        build_srsgnb
        sed -i "s/-Wall/-Wall -Werror/" CMakeLists.txt
      done
  cache:
    - *cache_src_get
    - *cache_build_get

# Alt combinations

build without rf:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    BUILD_TYPE: "" # Default one
    TEST_MODE: default
    ENABLE_ZEROMQ: "False"
    ENABLE_UHD: "False"
  parallel:
    matrix:
      - OS: [ubuntu-22.04, ubuntu-20.04]
        COMPILER: [gcc, clang]

.build_and_unit_alt:
  extends: .build_and_unit
  variables:
    OS: "" # Need to be specified
    INFRASTRUCTURE_TAG: "" # Need to be specified
    BUILD_TYPE: "" # Need to be specified
    TEST_MODE: default
    ENABLE_GCOV: "False"
    ENABLE_ASAN: "False"
    ENABLE_TSAN: "False"
  parallel:
    matrix:
      - COMPILER: [gcc, clang]
        ASSERT_LEVEL: [MINIMAL, NORMAL, PARANOID]
        ENABLE_EXPORT: ["True", "False"]

build alt [ubuntu-22.04, amd64, Debug]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: ubuntu-22.04
    INFRASTRUCTURE_TAG: aws-spot-amd64
    BUILD_TYPE: Debug

build alt [ubuntu-22.04, amd64, Release]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: ubuntu-22.04
    INFRASTRUCTURE_TAG: aws-spot-amd64
    BUILD_TYPE: Release

build alt [ubuntu-22.04, amd64, RelWithDebInfo]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-22.04
    INFRASTRUCTURE_TAG: aws-spot-amd64
    BUILD_TYPE: RelWithDebInfo

build alt [ubuntu-22.04, arm64v8, Debug]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-22.04
    INFRASTRUCTURE_TAG: aws-spot-arm64
    BUILD_TYPE: Debug

build alt [ubuntu-22.04, arm64v8, Release]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-22.04
    INFRASTRUCTURE_TAG: aws-spot-arm64
    BUILD_TYPE: Release

build alt [ubuntu-22.04, arm64v8, RelWithDebInfo]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-22.04
    INFRASTRUCTURE_TAG: aws-spot-arm64
    BUILD_TYPE: RelWithDebInfo

build alt [ubuntu-20.04, amd64, Debug]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: ubuntu-20.04
    INFRASTRUCTURE_TAG: aws-spot-amd64
    BUILD_TYPE: Debug

build alt [ubuntu-20.04, amd64, Release]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: ubuntu-20.04
    INFRASTRUCTURE_TAG: aws-spot-amd64
    BUILD_TYPE: Release

build alt [ubuntu-20.04, amd64, RelWithDebInfo]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-20.04
    INFRASTRUCTURE_TAG: aws-spot-amd64
    BUILD_TYPE: RelWithDebInfo

build alt [ubuntu-20.04, arm64v8, Debug]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-20.04
    INFRASTRUCTURE_TAG: aws-spot-arm64
    BUILD_TYPE: Debug

build alt [ubuntu-20.04, arm64v8, Release]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-20.04
    INFRASTRUCTURE_TAG: aws-spot-arm64
    BUILD_TYPE: Release

build alt [ubuntu-20.04, arm64v8, RelWithDebInfo]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-20.04
    INFRASTRUCTURE_TAG: aws-spot-arm64
    BUILD_TYPE: RelWithDebInfo

build alt [archlinux-latest, amd64, Debug]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: archlinux-latest
    INFRASTRUCTURE_TAG: aws-spot-amd64
    BUILD_TYPE: Debug

build alt [archlinux-latest, amd64, Release]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: archlinux-latest
    INFRASTRUCTURE_TAG: aws-spot-amd64
    BUILD_TYPE: Release

build alt [archlinux-latest, amd64, RelWithDebInfo]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: archlinux-latest
    INFRASTRUCTURE_TAG: aws-spot-amd64
    BUILD_TYPE: RelWithDebInfo

build alt [rhel-8, amd64, Debug]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: rhel-8
    INFRASTRUCTURE_TAG: aws-spot-amd64
    BUILD_TYPE: Debug

build alt [rhel-8, amd64, Release]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: rhel-8
    INFRASTRUCTURE_TAG: aws-spot-amd64
    BUILD_TYPE: Release

build alt [rhel-8, amd64, RelWithDebInfo]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: rhel-8
    INFRASTRUCTURE_TAG: aws-spot-amd64
    BUILD_TYPE: RelWithDebInfo

build alt [rhel-8, arm64, Debug]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: rhel-8
    INFRASTRUCTURE_TAG: aws-spot-arm64
    BUILD_TYPE: Debug

build alt [rhel-8, arm64, Release]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: rhel-8
    INFRASTRUCTURE_TAG: aws-spot-arm64
    BUILD_TYPE: Release

build alt [rhel-8, arm64, RelWithDebInfo]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: rhel-8
    INFRASTRUCTURE_TAG: aws-spot-arm64
    BUILD_TYPE: RelWithDebInfo

# UHD

build uhd alt:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    TEST_MODE: none
    ASSERT_LEVEL: PARANOID
  parallel:
    matrix:
      - OS: ubuntu-22.04
        COMPILER: [gcc, clang]
        UHD_VERSION: "4.2.0.0"
      - OS: ubuntu-20.04
        COMPILER: [gcc, clang]
        UHD_VERSION: ["4.2.0.0", "4.1.0.5"]

# Sanitizers
sanitizers [asan]:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: ubuntu-22.04
    TEST_MODE: asan
    COMPILER: gcc
    BUILD_TYPE: Debug
    ENABLE_ASAN: "True"
    ASSERT_LEVEL: PARANOID

sanitizers [tsan]:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: ubuntu-22.04
    TEST_MODE: tsan
    COMPILER: clang
    BUILD_TYPE: Debug
    ENABLE_TSAN: "True"
    ASSERT_LEVEL: PARANOID

sanitizers [valgrind]:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-22.04
    TEST_MODE: valgrind
    COMPILER: gcc
    BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID

# AVX

.avx:
  extends: .build_and_unit
  variables:
    OS: ubuntu-22.04
    TEST_MODE: default
    COMPILER: gcc
    BUILD_TYPE: Release
    AUTO_DETECT_ISA: "True"
    UPLOAD_ARTIFACTS: "True"

avx2 [basic]:
  extends: .avx
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    INFRASTRUCTURE_TAG: aws-demand-amd64-avx2
    ENABLE_AVX2: "True"
    ENABLE_AVX512: "False"

avx2 [tsan, cached]:
  extends: .avx
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR
  variables:
    OS: ubuntu-22.04
    TEST_MODE: tsan
    COMPILER: clang
    BUILD_TYPE: Debug
    ENABLE_TSAN: "True"
    ASSERT_LEVEL: PARANOID
    INFRASTRUCTURE_TAG: aws-demand-amd64-avx2
    ENABLE_AVX512: "False"
    ENABLE_AVX2: "True"
  cache:
    - *cache_src_get
    - *cache_build_get

avx2 [tsan, update cache]:
  extends: "avx2 [tsan, cached]"
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $CI_DESCRIPTION =~ /Nightly/
  cache:
    - *cache_src_get
    - *cache_build_set

avx2 [tsan, clean]:
  extends: "avx2 [tsan, cached]"
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
  cache:
    - *cache_src_get

avx2 [asan]:
  extends: .avx
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: ubuntu-22.04
    TEST_MODE: asan
    COMPILER: gcc
    BUILD_TYPE: Debug
    ENABLE_ASAN: "True"
    ASSERT_LEVEL: PARANOID
    INFRASTRUCTURE_TAG: aws-demand-amd64-avx2
    ENABLE_AVX512: "False"
    ENABLE_AVX2: "True"

avx512:
  extends: .avx
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    INFRASTRUCTURE_TAG: aws-demand-amd64-avx2-avx512
    ENABLE_AVX2: "True"
    ENABLE_AVX512: "True"

avx extended:
  extends: .avx
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    UPLOAD_ARTIFACTS: ""
  parallel:
    matrix:
      - INFRASTRUCTURE_TAG:
          ["aws-demand-amd64-avx2", "aws-demand-amd64-avx2-avx512"]
        AUTO_DETECT_ISA: ["True", "False"]
        ENABLE_AVX2: "True"
        ENABLE_AVX512: ["True", "False"]
      - INFRASTRUCTURE_TAG:
          ["aws-demand-amd64-avx2", "aws-demand-amd64-avx2-avx512"]
        AUTO_DETECT_ISA: ["True", "False"]
        ENABLE_AVX2: "False"
        ENABLE_AVX512: "False"

# Web

custom-build:
  extends: .build_and_unit
  rules:
    - if: $ON_WEB
  variables:
    ENABLE_ZEROMQ: ""
    AUTO_DETECT_ISA: ""
    UPLOAD_ARTIFACTS: "True"
  cache:
    - *cache_src_get
    - *cache_build_get
