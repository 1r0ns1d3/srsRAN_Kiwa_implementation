/*
 *
 * Copyright 2013-2022 Software Radio Systems Limited
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the distribution.
 *
 */

#include "prach_generator_impl.h"
#include "srsgnb/ran/prach/prach_cyclic_shifts.h"
#include "srsgnb/ran/prach/prach_preamble_information.h"
#include "srsgnb/srsvec/sc_prod.h"
#include "srsgnb/support/math_utils.h"

using namespace srsgnb;

namespace {

template <unsigned L>
class prach_generator_cexp_table : public std::array<cf_t, 2 * L>
{
public:
  prach_generator_cexp_table()
  {
    std::generate(this->begin(), this->end(), [n = 0]() mutable {
      return std::exp(COMPLEX_J * static_cast<float>(M_PI) * static_cast<float>(n++) / static_cast<float>(L));
    });
  }
};

const prach_generator_cexp_table<prach_constants::LONG_SEQUENCE_LENGTH> prach_generator_cexp_table_long;

} // namespace

unsigned prach_generator_impl::get_sequence_number_long(unsigned root_sequence_index)
{
  static const std::array<uint16_t, LONG - 1> lut = {
      129, 710, 140, 699, 120, 719, 210, 629, 168, 671, 84,  755, 105, 734, 93,  746, 70,  769, 60,  779, 2,   837, 1,
      838, 56,  783, 112, 727, 148, 691, 80,  759, 42,  797, 40,  799, 35,  804, 73,  766, 146, 693, 31,  808, 28,  811,
      30,  809, 27,  812, 29,  810, 24,  815, 48,  791, 68,  771, 74,  765, 178, 661, 136, 703, 86,  753, 78,  761, 43,
      796, 39,  800, 20,  819, 21,  818, 95,  744, 202, 637, 190, 649, 181, 658, 137, 702, 125, 714, 151, 688, 217, 622,
      128, 711, 142, 697, 122, 717, 203, 636, 118, 721, 110, 729, 89,  750, 103, 736, 61,  778, 55,  784, 15,  824, 14,
      825, 12,  827, 23,  816, 34,  805, 37,  802, 46,  793, 207, 632, 179, 660, 145, 694, 130, 709, 223, 616, 228, 611,
      227, 612, 132, 707, 133, 706, 143, 696, 135, 704, 161, 678, 201, 638, 173, 666, 106, 733, 83,  756, 91,  748, 66,
      773, 53,  786, 10,  829, 9,   830, 7,   832, 8,   831, 16,  823, 47,  792, 64,  775, 57,  782, 104, 735, 101, 738,
      108, 731, 208, 631, 184, 655, 197, 642, 191, 648, 121, 718, 141, 698, 149, 690, 216, 623, 218, 621, 152, 687, 144,
      695, 134, 705, 138, 701, 199, 640, 162, 677, 176, 663, 119, 720, 158, 681, 164, 675, 174, 665, 171, 668, 170, 669,
      87,  752, 169, 670, 88,  751, 107, 732, 81,  758, 82,  757, 100, 739, 98,  741, 71,  768, 59,  780, 65,  774, 50,
      789, 49,  790, 26,  813, 17,  822, 13,  826, 6,   833, 5,   834, 33,  806, 51,  788, 75,  764, 99,  740, 96,  743,
      97,  742, 166, 673, 172, 667, 175, 664, 187, 652, 163, 676, 185, 654, 200, 639, 114, 725, 189, 650, 115, 724, 194,
      645, 195, 644, 192, 647, 182, 657, 157, 682, 156, 683, 211, 628, 154, 685, 123, 716, 139, 700, 212, 627, 153, 686,
      213, 626, 215, 624, 150, 689, 225, 614, 224, 615, 221, 618, 220, 619, 127, 712, 147, 692, 124, 715, 193, 646, 205,
      634, 206, 633, 116, 723, 160, 679, 186, 653, 167, 672, 79,  760, 85,  754, 77,  762, 92,  747, 58,  781, 62,  777,
      69,  770, 54,  785, 36,  803, 32,  807, 25,  814, 18,  821, 11,  828, 4,   835, 3,   836, 19,  820, 22,  817, 41,
      798, 38,  801, 44,  795, 52,  787, 45,  794, 63,  776, 67,  772, 72,  767, 76,  763, 94,  745, 102, 737, 90,  749,
      109, 730, 165, 674, 111, 728, 209, 630, 204, 635, 117, 722, 188, 651, 159, 680, 198, 641, 113, 726, 183, 656, 180,
      659, 177, 662, 196, 643, 155, 684, 214, 625, 126, 713, 131, 708, 219, 620, 222, 617, 226, 613, 230, 609, 232, 607,
      262, 577, 252, 587, 418, 421, 416, 423, 413, 426, 411, 428, 376, 463, 395, 444, 283, 556, 285, 554, 379, 460, 390,
      449, 363, 476, 384, 455, 388, 451, 386, 453, 361, 478, 387, 452, 360, 479, 310, 529, 354, 485, 328, 511, 315, 524,
      337, 502, 349, 490, 335, 504, 324, 515, 323, 516, 320, 519, 334, 505, 359, 480, 295, 544, 385, 454, 292, 547, 291,
      548, 381, 458, 399, 440, 380, 459, 397, 442, 369, 470, 377, 462, 410, 429, 407, 432, 281, 558, 414, 425, 247, 592,
      277, 562, 271, 568, 272, 567, 264, 575, 259, 580, 237, 602, 239, 600, 244, 595, 243, 596, 275, 564, 278, 561, 250,
      589, 246, 593, 417, 422, 248, 591, 394, 445, 393, 446, 370, 469, 365, 474, 300, 539, 299, 540, 364, 475, 362, 477,
      298, 541, 312, 527, 313, 526, 314, 525, 353, 486, 352, 487, 343, 496, 327, 512, 350, 489, 326, 513, 319, 520, 332,
      507, 333, 506, 348, 491, 347, 492, 322, 517, 330, 509, 338, 501, 341, 498, 340, 499, 342, 497, 301, 538, 366, 473,
      401, 438, 371, 468, 408, 431, 375, 464, 249, 590, 269, 570, 238, 601, 234, 605, 257, 582, 273, 566, 255, 584, 254,
      585, 245, 594, 251, 588, 412, 427, 372, 467, 282, 557, 403, 436, 396, 443, 392, 447, 391, 448, 382, 457, 389, 450,
      294, 545, 297, 542, 311, 528, 344, 495, 345, 494, 318, 521, 331, 508, 325, 514, 321, 518, 346, 493, 339, 500, 351,
      488, 306, 533, 289, 550, 400, 439, 378, 461, 374, 465, 415, 424, 270, 569, 241, 598, 231, 608, 260, 579, 268, 571,
      276, 563, 409, 430, 398, 441, 290, 549, 304, 535, 308, 531, 358, 481, 316, 523, 293, 546, 288, 551, 284, 555, 368,
      471, 253, 586, 256, 583, 263, 576, 242, 597, 274, 565, 402, 437, 383, 456, 357, 482, 329, 510, 317, 522, 307, 532,
      286, 553, 287, 552, 266, 573, 261, 578, 236, 603, 303, 536, 356, 483, 355, 484, 405, 434, 404, 435, 406, 433, 235,
      604, 267, 572, 302, 537, 309, 530, 265, 574, 233, 606, 367, 472, 296, 543, 336, 503, 305, 534, 373, 466, 280, 559,
      279, 560, 419, 420, 240, 599, 258, 581, 229, 610};

  return static_cast<unsigned>(lut[root_sequence_index % lut.size()]);
}

span<const cf_t> prach_generator_impl::generate_y_u_v_long(unsigned sequence_number, unsigned cyclic_shift)
{
  // Sequence compression factor look-up table for each sequence number.
  static const std::array<uint16_t, LONG> compression_factor_table = {
      0,   1,   420, 280, 210, 168, 140, 120, 105, 373, 84,  534, 70,  710, 60,  56,  472, 691, 606, 265, 42,  40,  267,
      73,  35,  537, 355, 404, 30,  434, 28,  406, 236, 178, 765, 24,  303, 771, 552, 796, 21,  573, 20,  800, 553, 578,
      456, 482, 437, 137, 688, 510, 597, 95,  202, 778, 15,  368, 217, 128, 14,  784, 203, 293, 118, 142, 89,  551, 802,
      304, 12,  130, 571, 23,  805, 179, 276, 316, 398, 308, 430, 694, 706, 465, 10,  306, 400, 704, 696, 66,  289, 461,
      228, 415, 241, 53,  638, 173, 488, 339, 344, 108, 255, 391, 718, 8,   467, 494, 101, 585, 389, 257, 427, 297, 184,
      518, 528, 545, 64,  698, 7,   735, 392, 191, 521, 443, 566, 621, 59,  826, 71,  269, 464, 757, 695, 752, 401, 49,
      152, 670, 6,   720, 65,  751, 705, 758, 431, 605, 822, 473, 509, 789, 138, 170, 158, 249, 199, 668, 154, 591, 215,
      370, 347, 664, 353, 539, 652, 628, 5,   700, 153, 682, 200, 97,  352, 676, 348, 602, 33,  75,  564, 445, 650, 541,
      114, 322, 627, 673, 540, 657, 446, 123, 319, 313, 506, 327, 244, 477, 589, 156, 172, 743, 54,  62,  547, 618, 615,
      381, 359, 558, 4,   672, 653, 323, 247, 160, 470, 58,  712, 567, 614, 634, 548, 380, 633, 619, 568, 377, 92,  425,
      259, 385, 264, 821, 692, 432, 32,  662, 349, 502, 423, 94,  787, 511, 196, 363, 515, 214, 680, 155, 641, 478, 283,
      388, 730, 102, 449, 111, 413, 230, 455, 794, 554, 453, 232, 19,  798, 22,  767, 131, 376, 613, 620, 713, 444, 659,
      76,  524, 335, 418, 3,   630, 360, 252, 452, 577, 795, 801, 772, 90,  379, 617, 635, 63,  722, 529, 411, 113, 656,
      651, 674, 354, 814, 36,  69,  828, 85,  440, 79,  410, 544, 723, 519, 193, 334, 562, 77,  442, 715, 192, 527, 724,
      185, 213, 593, 364, 332, 195, 596, 788, 689, 474, 326, 645, 314, 278, 422, 600, 350, 99,  496, 342, 341, 499, 100,
      732, 468, 162, 176, 238, 338, 741, 174, 164, 301, 26,  436, 792, 457, 208, 282, 588, 642, 245, 325, 508, 690, 823,
      57,  623, 161, 493, 733, 9,   756, 707, 270, 227, 748, 290, 223, 207, 481, 793, 579, 231, 576, 555, 253, 110, 583,
      103, 122, 649, 658, 565, 714, 522, 78,  532, 86,  136, 791, 483, 27,  810, 31,  604, 693, 759, 309, 296, 727, 258,
      610, 93,  599, 503, 279, 837, 2,   560, 336, 240, 746, 229, 581, 112, 543, 530, 80,  146, 235, 808, 29,  812, 356,
      48,  703, 753, 307, 761, 317, 125, 274, 181, 190, 717, 736, 256, 729, 586, 284, 263, 608, 260, 46,  358, 632, 616,
      549, 91,  612, 569, 132, 83,  830, 106, 346, 678, 216, 782, 16,  149, 331, 514, 594, 197, 251, 557, 631, 382, 47,
      403, 813, 538, 675, 665, 98,  501, 601, 663, 677, 371, 107, 739, 340, 498, 497, 343, 740, 489, 239, 417, 561, 525,
      194, 513, 365, 150, 51,  243, 644, 507, 475, 246, 626, 654, 115, 312, 647, 124, 397, 762, 277, 505, 646, 320, 116,
      295, 429, 760, 399, 754, 11,  770, 803, 25,  485, 165, 188, 183, 726, 428, 310, 117, 776, 204, 222, 460, 749, 67,
      38,  44,  262, 387, 587, 479, 209, 836, 421, 504, 315, 763, 180, 395, 126, 219, 226, 463, 708, 72,  817, 41,  820,
      607, 386, 285, 45,  384, 609, 426, 728, 390, 737, 109, 451, 556, 361, 198, 684, 159, 625, 324, 476, 643, 328, 52,
      745, 416, 337, 490, 177, 807, 407, 147, 18,  575, 454, 580, 414, 747, 462, 271, 220, 206, 459, 291, 205, 225, 272,
      127, 781, 369, 679, 592, 516, 186, 167, 835, 281, 480, 458, 224, 221, 292, 777, 785, 96,  667, 683, 250, 362, 595,
      512, 333, 526, 520, 716, 393, 182, 299, 166, 212, 517, 725, 298, 189, 394, 275, 764, 806, 237, 491, 163, 487, 742,
      639, 157, 686, 139, 834, 211, 187, 300, 486, 175, 492, 469, 624, 248, 685, 171, 640, 590, 681, 669, 701, 50,  330,
      366, 17,  234, 408, 81,  134, 88,  774, 119, 833, 169, 687, 790, 438, 87,  144, 82,  375, 570, 768, 13,  780, 218,
      273, 396, 318, 648, 447, 104, 832, 141, 775, 294, 311, 321, 655, 542, 412, 582, 450, 254, 738, 345, 372, 831, 121,
      448, 584, 731, 495, 500, 351, 666, 201, 786, 598, 424, 611, 378, 550, 773, 143, 135, 439, 533, 829, 374, 133, 145,
      409, 531, 441, 523, 563, 660, 34,  816, 268, 709, 827, 535, 37,  288, 750, 697, 721, 546, 636, 55,  825, 711, 622,
      471, 824, 61,  637, 744, 242, 329, 151, 702, 402, 357, 383, 261, 286, 39,  819, 266, 818, 43,  287, 68,  536, 815,
      74,  661, 603, 433, 811, 405, 809, 435, 484, 302, 804, 766, 572, 799, 797, 574, 233, 148, 367, 783, 779, 129, 769,
      305, 755, 466, 734, 719, 699, 671, 629, 559, 419, 838};

  // Create view of the sequence.
  span<cf_t> y_u_v = sequence.first(LONG);

  // Exponential function LUT size.
  uint64_t cexp_table_size = prach_generator_cexp_table_long.size();

  // Sequence compression factor.
  uint64_t factor = static_cast<uint64_t>(compression_factor_table[sequence_number]);

  // Zadoff-Chu root.
  uint64_t root = static_cast<uint64_t>(sequence_number);

  // Generate sequence and calculate the scaling of the sequence transform.
  cf_t scaling = 0.0;
  for (uint64_t n = 0; n != LONG; ++n) {
    // Calculate ZC sequence table index.
    uint64_t x_u_v_index = root * n * (n + 1UL);

    // Get value from the complex exponential table and accumulate it.
    scaling += prach_generator_cexp_table_long[x_u_v_index % cexp_table_size];

    // Calculate sequence table index considering the compression factor of the sequence sample index.
    uint64_t y_u_v_index = ((root * factor) * n * (factor * n + 1UL));

    // Apply cyclic shift.
    y_u_v_index += ((2UL * cyclic_shift) * n);

    // Get value from the complex exponential table.
    y_u_v[n] = prach_generator_cexp_table_long[y_u_v_index % cexp_table_size];
  }

  // As the table is conjugated, the scaling must be conjugated too.
  scaling = std::conj(scaling);

  // Scale sequence.
  srsvec::sc_prod(y_u_v, scaling, y_u_v);

  return y_u_v;
}

span<const cf_t> prach_generator_impl::generate(const prach_generator::configuration& config)
{
  srsgnb_assert(config.format.is_long_preamble(), "Short preambles are not implemented.");
  srsgnb_assert(config.restricted_set == restricted_set_config::UNRESTRICTED, "Unrestricted sets are not implemented.");
  prach_preamble_information info = get_prach_preamble_long_info(config.format);

  unsigned N_cs = prach_cyclic_shifts_get(info.scs, config.restricted_set, config.zero_correlation_zone);
  srsgnb_assert(N_cs != PRACH_CYCLIC_SHIFTS_RESERVED, "Configuration leads to a reserved number of cyclic shifts.");

  unsigned root_sequence_index = config.root_sequence_index + config.preamble_index;
  unsigned cyclic_shift        = 0;

  if (N_cs != 0) {
    unsigned nof_sequences_per_root = info.sequence_length / N_cs;
    root_sequence_index             = config.root_sequence_index + config.preamble_index / nof_sequences_per_root;
    cyclic_shift                    = (config.preamble_index % nof_sequences_per_root) * N_cs;
  }

  unsigned sequence_number = get_sequence_number_long(root_sequence_index);

  return generate_y_u_v_long(sequence_number, cyclic_shift);
}
