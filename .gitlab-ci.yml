# How to test nighlt/weekly schedules
# Generate a schedule for your branch whit a CI_DESCRIPTION variable
# that contains "Nightly"/"Weekly" and an extra word
# Ex: "Test Weekly", "Nighlty add feature"

include:
  - project: softwareradiosystems/testing-tools
    ref: "34"
    file: .gitlab/ci-shared/setup/all.yml
  - project: softwareradiosystems/testing-tools
    ref: "34"
    file: .gitlab/ci-shared/features/all.yml
  - local: .gitlab/ci/build.yml

stages:
  - ci
  - static
  - build and unit tests
  - documentation

################################################################################
## Static
################################################################################
include-guards:
  extends: .include-guards
  parallel:
    matrix:
      - INPUT_PATH: "include/srsgnb"
        INPUT_IGNORE: "/bundled/"
      - INPUT_PATH: "."
        INPUT_IGNORE: "^\\(include\\|docs\\)/.*"

.codechecker:
  image: registry.gitlab.com/softwareradiosystems/testing-tools/codechecker-gnb:$DOCKER_CODECHECKER_VERSION
  stage: static
  needs: []
  tags:
    - ${SRS_INFRASTRUCTURE_TAG}-${SRS_ARCHITECTURE_TAG}
  variables:
    ANALYZER: ""
    ANALYZER_ARGS: ""
  before_script:
    - |
      echo "
      -/usr/lib
      -*unittests
      -*integrationtests
      -*benchmarks
      -*apps/examples
      -*lib/asn1
      -*lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs
      -*lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs" >/tmp/codechecker_skip
    - |
      export CC=/usr/bin/clang
      export CXX=/usr/bin/clang++
      mkdir -p build
      cd build || exit
      cmake -DASSERT_LEVEL=PARANOID -DAUTO_DETECT_ISA=False -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_TESTS=False ..
  script:
    - static-analyzer.sh -i /tmp/codechecker_skip --analyzers ${ANALYZER} ${ANALYZER_ARGS} $CI_PROJECT_DIR
  after_script:
    - mv codechecker_html codechecker-${ANALYZER}-html
  artifacts: &codechecker_artifacts
    reports:
      codequality: code-quality-report.json
    paths:
      - codechecker-${ANALYZER}-html/index.html
      - codechecker-${ANALYZER}-html/statistics.html
    when: always
    expire_in: 10 minutes
  cache: &codechecker_cache
    key: codechecker-${ANALYZER}-${DOCKER_CODECHECKER_VERSION}
    paths:
      - build/codechecker_output
  timeout: 8 hours # clangsa is slow

codechecker:
  extends: .codechecker
  rules:
    - if: $ON_MR
  cache:
    <<: *codechecker_cache
    policy: pull
  parallel:
    matrix:
      - ANALYZER: clang-tidy
        ANALYZER_ARGS: --tidy-config .clang-tidy
      - ANALYZER: cppcheck
        ANALYZER_ARGS: --cppcheck-max-template-recursion 10
      - ANALYZER: clangsa
        ANALYZER_ARGS: --dryrun --ctu

codechecker clean:
  extends: .codechecker
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  artifacts:
    <<: *codechecker_artifacts
    paths:
      - codechecker-${ANALYZER}-html
  cache:
    <<: *codechecker_cache
    policy: push
  parallel:
    matrix:
      - ANALYZER: clang-tidy
        ANALYZER_ARGS: --tidy-config .clang-tidy
      - ANALYZER: cppcheck
        ANALYZER_ARGS: --cppcheck-max-template-recursion 10
      - ANALYZER: clangsa
        ANALYZER_ARGS: --ctu

################################################################################
## Build + Unit Tests + Integration tests
################################################################################

# In build.yml

intermediate commits:
  extends: .build_and_unit
  rules:
    - if: $ON_MR
  variables:
    OS: ubuntu-22.04
    TEST_MODE: coverage
    COMPILER: gcc
    BUILD_TYPE: Release
    ASSERT_LEVEL: PARANOID
    ENABLE_EXPORT: "False"
    ENABLE_GCOV: "True"
  script:
    - DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y --no-install-recommends git git-lfs
    - git lfs install
    - git config advice.detachedHead false
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - |
      for rev in $(git rev-list --reverse origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME..origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME^1)
      do
        echo "##################################################"
        echo "#### $rev ####"
        echo "##################################################"
        git checkout $rev
        sed -i "s/-Wall -Werror/-Wall/" CMakeLists.txt
        build_srsgnb
        sed -i "s/-Wall/-Wall -Werror/" CMakeLists.txt
      done
  after_script:
    - rm -Rf build

################################################################################
# Doc generation
################################################################################
.depends on unit test jobs:
  # Here we handled how jobs in .gitlab-ci.yml depends on jobs inside build.yml
  # If unit tests related jobs change in build.yml, we'll need to change this one too
  needs:
    - job: build cached
      optional: true
      artifacts: true
    - job: build update cache
      optional: true
      artifacts: true
    - job: build clean
      optional: true
      artifacts: true

unit requirements:
  stage: documentation
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
      when: always # Even if previous stages/required jobs fail
  image: registry.gitlab.com/softwareradiosystems/testing-tools/srs-tools:$SRS_TOOLS_VERSION
  script:
    - test-reporter --input unittests --output ./requirement_report.html
  needs: []
  artifacts:
    paths:
      - requirement_report.html
    expire_in: 10 minutes

unit coverage:
  stage: documentation
  extends: .depends on unit test jobs
  image:
    name: registry.gitlab.com/softwareradiosystems/testing-tools/report_generator:$DOCKER_REPORT_GEN_VERSION
    entrypoint: ["/bin/sh", "-c"]
  rules:
    - if: $ON_MR
      variables:
        coverage_report: summary
      when: always # Even if previous stages/required jobs fail
    - if: $CI_DESCRIPTION =~ /Nightly/
      variables:
        coverage_report: full
      when: always # Even if previous stages/required jobs fail
  before_script:
    - PACKAGE_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/coverage/${CI_COMMIT_BRANCH}${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}/coverage_history.tar.gz
    # Download coverage history from the registry
    - |
      download_from_registry() {
        apk add curl
        
        cd ${CI_PROJECT_DIR}
        http_code=$(curl -w "%{http_code}" --header "PRIVATE-TOKEN: $CODEBOT_TOKEN" "${PACKAGE_URL}" -o output.tar.gz)
        if [[ $http_code == "200" ]]; then
          tar -xf output.tar.gz
        fi
      }
    # Publish coverage history folder to the registry
    - |
      publish_to_registry() {
        cd ${CI_PROJECT_DIR}
        tar -czf coverage_history.tar.gz coverage_history
        curl --fail --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file coverage_history.tar.gz "${PACKAGE_URL}"
      }
  script:
    - |
      if [[ $coverage_report = "full" ]]; then
        download_from_registry
        HTML_TYPE=Html
        HISTORY=-historydir:coverage_history
      else
        HTML_TYPE=HtmlSummary
        HISTORY=
      fi
    - |
      ReportGenerator -reports:*coverage.xml -targetdir:coverage_html ${HISTORY} \
        -title:${CI_PROJECT_NAME} -tag:${CI_COMMIT_SHA} \
        -reporttypes:"${HTML_TYPE};TextSummary"
    - cat coverage_html/Summary.txt
    - |
      if [[ $coverage_report = "full" ]]; then
        publish_to_registry
      fi
  coverage: /^\s*Line coverage:\s*\d+.\d+\%/
  artifacts:
    paths:
      - coverage_html
    expire_in: 10 minutes

unit tests web:
  stage: documentation
  extends: .depends on unit test jobs
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
      when: always # Even if previous stages/required jobs fail
  image: python:3.9-alpine # sh entrypoint
  variables:
    GIT_STRATEGY: none
  before_script:
    - pip install junit2html
  script:
    - junit2html *xunit.xml --merge merged_xunit.xml
    - junit2html merged_xunit.xml ./test_report.html
  artifacts:
    paths:
      - test_report.html
    expire_in: 10 minutes

pages:
  stage: documentation
  rules:
    - if: $CI_DESCRIPTION == "Nightly"
      when: always # Even if previous stages/required jobs fail
  image: registry.gitlab.com/softwareradiosystems/testing-tools/doxygen:$DOCKER_DOXYGEN_VERSION
  script:
    - doxygen_generator.sh
    - mv build/public .
    - mv coverage_html public/
    - mv codechecker*html public/
    - mv test_report.html public/
    - mv requirement_report.html public/
    - mv public/index.html public/index_doxygen.html
    - mv docs/index.html public/index.html
  after_script:
    - |
      if [ $CI_JOB_STATUS = "failed" ]; then
        mkdir -p public
        mv docs/fail.html public/index.html
      fi
    - mv docs/*.png public/
    - sed -i 's/commit_hash/'$CI_COMMIT_SHA'/' public/index.html
  needs:
    - job: unit coverage
      artifacts: true
    - job: unit requirements
      artifacts: true
    - job: unit tests web
      artifacts: true
    - job: codechecker clean
      artifacts: true
  artifacts:
    paths:
      - public
    expire_in: 10 minutes

################################################################################
# Git workflow graduation
################################################################################
promote code:
  stage: .post
  rules:
    - if: $GRADUATION_BRANCH
  variables:
    GIT_STRATEGY: none
  image: alpine:3.16.0 # sh entrypoint
  before_script:
    - apk add git git-lfs
    - git lfs install
  script:
    - git clone https://${CODEBOT_USERNAME}:${CODEBOT_TOKEN}@gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git /${CI_PROJECT_NAME}
    - cd /${CI_PROJECT_NAME}
    - git checkout -t origin/$GRADUATION_BRANCH
    - git rebase ${CI_COMMIT_SHA}
    - git push
