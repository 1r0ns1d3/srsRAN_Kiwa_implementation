/**
 *
 * \section COPYRIGHT
 *
 * Copyright 2013-2021 Software Radio Systems Limited
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the distribution.
 *
 */

#include "srsgnb/asn1/f1ap.h"
#include "srsgnb/pcap/f1ap_pcap.h"
#include "srsgnb/support/test_utils.h"

using namespace std;
using namespace asn1;

#define JSON_OUTPUT 1

const char* log_id = "ASN1";

static srsgnb::f1ap_pcap pcap_writer;

void ue_context_setup_request_test()
{
  uint8_t rx_pdu[] = {
      0x00, 0x05, 0x00, 0x82, 0x73, 0x00, 0x00, 0x06, 0x00, 0x28, 0x00, 0x02, 0x00, 0x34, 0x00, 0x3f, 0x00, 0x09, 0x00,
      0x00, 0xf1, 0x10, 0x07, 0x53, 0x04, 0x04, 0x70, 0x00, 0x6b, 0x00, 0x01, 0x04, 0x00, 0x09, 0x00, 0x82, 0x20, 0x60,
      0x81, 0x1c, 0x18, 0x80, 0x80, 0xff, 0x23, 0x01, 0x05, 0x7a, 0x35, 0x60, 0xa6, 0x13, 0x00, 0x00, 0x60, 0x40, 0x1c,
      0x4d, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x03, 0x09, 0x80, 0x00, 0x30, 0x20, 0x0e, 0x26, 0x80, 0x00,
      0x01, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x01, 0x84, 0xc0, 0x00, 0x18, 0x10, 0x07, 0x13, 0x40, 0x00, 0x01, 0x01, 0xfc,
      0x00, 0x00, 0x00, 0x00, 0xc1, 0x60, 0x40, 0x1c, 0x4d, 0x00, 0x00, 0x06, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x03, 0x05,
      0x80, 0x00, 0x71, 0x34, 0x00, 0x00, 0x18, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x10, 0x13, 0x45,
      0xa2, 0xd1, 0x40, 0x31, 0x00, 0x00, 0x40, 0x20, 0x00, 0x10, 0x08, 0x08, 0x01, 0x00, 0x22, 0x00, 0x01, 0x00, 0x40,
      0x00, 0x20, 0x10, 0x10, 0x02, 0x00, 0x44, 0x00, 0x01, 0x00, 0x80, 0x00, 0x80, 0x20, 0x20, 0x04, 0x00, 0x84, 0x00,
      0x02, 0x01, 0x01, 0x00, 0x20, 0x04, 0x1e, 0x3f, 0xc0, 0x1c, 0x00, 0x11, 0xe4, 0xb2, 0xef, 0x97, 0xff, 0xd7, 0xc9,
      0x0a, 0x10, 0x00, 0x00, 0x30, 0x10, 0x20, 0x00, 0xe7, 0xc0, 0x00, 0xde, 0xa0, 0x4d, 0x00, 0xe7, 0xad, 0xfe, 0x1c,
      0xf5, 0xff, 0xef, 0xe4, 0x00, 0x00, 0x7d, 0x48, 0x08, 0x62, 0x89, 0x29, 0x4c, 0x8d, 0xff, 0xf7, 0x8d, 0xff, 0xf5,
      0xff, 0xfb, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x18, 0x05, 0xc3, 0x80, 0x80, 0xc0, 0x7e, 0x06, 0x01, 0x80, 0x3c, 0x04,
      0x06, 0x03, 0x9d, 0xff, 0x01, 0x01, 0x80, 0xe4, 0xff, 0xcd, 0x9f, 0xfb, 0x0c, 0x04, 0x08, 0x00, 0x39, 0xfe, 0x48,
      0x50, 0x80, 0x00, 0x01, 0x80, 0x81, 0x00, 0x07, 0x3e, 0xf0, 0x02, 0xec, 0xe0, 0x00, 0x00, 0x58, 0xf0, 0x00, 0x03,
      0x95, 0x34, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf2, 0xa8, 0x20, 0x00, 0x09, 0x27, 0x63, 0x00, 0x27,
      0xfa, 0x90, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x36, 0x59, 0x07, 0xe1,
      0x0c, 0x80, 0xff, 0x23, 0x01, 0x05, 0x7a, 0x35, 0x60, 0xa6, 0x13, 0x00, 0x00, 0x60, 0x40, 0x1c, 0x4d, 0x00, 0x00,
      0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x03, 0x09, 0x80, 0x00, 0x30, 0x20, 0x0e, 0x26, 0x80, 0x00, 0x01, 0x03, 0xf8,
      0x00, 0x00, 0x00, 0x01, 0x84, 0xc0, 0x00, 0x18, 0x10, 0x07, 0x13, 0x40, 0x00, 0x01, 0x01, 0xfc, 0x00, 0x00, 0x00,
      0x00, 0xc1, 0x60, 0x40, 0x1c, 0x4d, 0x00, 0x00, 0x06, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x03, 0x05, 0x80, 0x00, 0x71,
      0x34, 0x00, 0x00, 0x18, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x10, 0x13, 0x45, 0xa2, 0xd1, 0x40,
      0x31, 0x00, 0x00, 0x40, 0x20, 0x00, 0x10, 0x08, 0x08, 0x01, 0x00, 0x22, 0x00, 0x01, 0x00, 0x40, 0x00, 0x20, 0x10,
      0x10, 0x02, 0x00, 0x44, 0x00, 0x01, 0x00, 0x80, 0x00, 0x80, 0x20, 0x20, 0x04, 0x00, 0x84, 0x00, 0x02, 0x01, 0x01,
      0x00, 0x20, 0x04, 0x1e, 0x3f, 0xc0, 0x1c, 0x00, 0x11, 0xe4, 0xb2, 0xef, 0x97, 0xff, 0xd7, 0xc9, 0x0a, 0x10, 0x00,
      0x00, 0x30, 0x10, 0x20, 0x00, 0xe7, 0xc0, 0x00, 0xde, 0xa0, 0x4d, 0x00, 0xe7, 0xad, 0xfe, 0x1c, 0xf5, 0xff, 0xef,
      0xe4, 0x00, 0x00, 0x7d, 0x48, 0x08, 0x62, 0x89, 0x29, 0x4c, 0x8d, 0xff, 0xf7, 0x8d, 0xff, 0xf5, 0xff, 0xfb, 0xfe,
      0xfe, 0x00, 0x00, 0x00, 0x18, 0x05, 0xc3, 0x80, 0x80, 0xc0, 0x7e, 0x06, 0x01, 0x80, 0x3c, 0x04, 0x06, 0x03, 0x9d,
      0xff, 0x01, 0x01, 0x80, 0xe4, 0xff, 0xcd, 0x9f, 0xfb, 0x0c, 0x04, 0x08, 0x00, 0x39, 0xfe, 0x48, 0x50, 0x80, 0x00,
      0x01, 0x80, 0x81, 0x00, 0x07, 0x3e, 0xf0, 0x02, 0xec, 0xe0, 0x00, 0x00, 0x58, 0xf0, 0x00, 0x03, 0x95, 0x34, 0x00,
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf2, 0xa8, 0x20, 0x00, 0x00, 0x23, 0x00, 0x27, 0x00, 0x00, 0x22, 0x00,
      0x22, 0x51, 0x40, 0x08, 0x09, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x20, 0x66, 0x00, 0x17, 0x02, 0x00, 0x00, 0x00, 0xa1, 0x40, 0x01, 0x40, 0x00, 0x9e, 0x40,
      0x04, 0x20, 0x20, 0x3a, 0x00};

  pcap_writer.write_pdu(srsgnb::span<uint8_t>(rx_pdu, sizeof(rx_pdu)));

  auto& logger = srslog::fetch_basic_logger("ASN1", false);
  logger.set_level(srslog::basic_levels::debug);
  logger.set_hex_dump_max_size(-1);

  asn1::cbit_ref          bref{rx_pdu, sizeof(rx_pdu)};
  asn1::f1ap::f1_ap_pdu_c pdu;

  TESTASSERT(pdu.unpack(bref) == SRSASN_SUCCESS);
  TESTASSERT_EQ(asn1::f1ap::f1_ap_pdu_c::types_opts::init_msg, pdu.type());

  TESTASSERT_EQ(ASN1_F1AP_ID_UE_CONTEXT_SETUP, pdu.init_msg().proc_code);
  TESTASSERT_EQ(asn1::f1ap::f1_ap_elem_procs_o::init_msg_c::types_opts::ue_context_setup_request,
                pdu.init_msg().value.type());

  TESTASSERT(test_pack_unpack_consistency(pdu) == SRSASN_SUCCESS);

#if JSON_OUTPUT
  int               unpacked_len = bref.distance_bytes();
  asn1::json_writer json_writer1;
  pdu.to_json(json_writer1);
  logger.info(rx_pdu, unpacked_len, "F1AP PDU unpacked ({} B): \n {}", unpacked_len, json_writer1.to_string().c_str());
#endif
}

int main()
{
  auto& asn1_logger = srslog::fetch_basic_logger(log_id);
  asn1_logger.set_level(srslog::basic_levels::debug);
  asn1_logger.set_hex_dump_max_size(-1);

  pcap_writer.open("f1ap.pcap");

  // Start the log backend.
  srslog::init();

  ue_context_setup_request_test();

  pcap_writer.close();

  srslog::flush();

  return 0;
}