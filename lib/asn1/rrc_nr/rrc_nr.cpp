/*
 *
 * Copyright 2021-2023 Software Radio Systems Limited
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the distribution.
 *
 */

#include "srsran/asn1/rrc_nr/rrc_nr.h"
#include <sstream>

using namespace asn1;
using namespace asn1::rrc_nr;

/*******************************************************************************
 *                                Struct Methods
 ******************************************************************************/

// PDCCH-ConfigSIB1 ::= SEQUENCE
SRSASN_CODE pdcch_cfg_sib1_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, coreset_zero, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(pack_integer(bref, search_space_zero, (uint8_t)0u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_cfg_sib1_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(coreset_zero, bref, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(unpack_integer(search_space_zero, bref, (uint8_t)0u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
void pdcch_cfg_sib1_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("controlResourceSetZero", coreset_zero);
  j.write_int("searchSpaceZero", search_space_zero);
  j.end_obj();
}

// MIB ::= SEQUENCE
SRSASN_CODE mib_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(sys_frame_num.pack(bref));
  HANDLE_CODE(sub_carrier_spacing_common.pack(bref));
  HANDLE_CODE(pack_integer(bref, ssb_subcarrier_offset, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(dmrs_type_a_position.pack(bref));
  HANDLE_CODE(pdcch_cfg_sib1.pack(bref));
  HANDLE_CODE(cell_barred.pack(bref));
  HANDLE_CODE(intra_freq_resel.pack(bref));
  HANDLE_CODE(spare.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mib_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(sys_frame_num.unpack(bref));
  HANDLE_CODE(sub_carrier_spacing_common.unpack(bref));
  HANDLE_CODE(unpack_integer(ssb_subcarrier_offset, bref, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(dmrs_type_a_position.unpack(bref));
  HANDLE_CODE(pdcch_cfg_sib1.unpack(bref));
  HANDLE_CODE(cell_barred.unpack(bref));
  HANDLE_CODE(intra_freq_resel.unpack(bref));
  HANDLE_CODE(spare.unpack(bref));

  return SRSASN_SUCCESS;
}
void mib_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("systemFrameNumber", sys_frame_num.to_string());
  j.write_str("subCarrierSpacingCommon", sub_carrier_spacing_common.to_string());
  j.write_int("ssb-SubcarrierOffset", ssb_subcarrier_offset);
  j.write_str("dmrs-TypeA-Position", dmrs_type_a_position.to_string());
  j.write_fieldname("pdcch-ConfigSIB1");
  pdcch_cfg_sib1.to_json(j);
  j.write_str("cellBarred", cell_barred.to_string());
  j.write_str("intraFreqReselection", intra_freq_resel.to_string());
  j.write_str("spare", spare.to_string());
  j.end_obj();
}

const char* mib_s::sub_carrier_spacing_common_opts::to_string() const
{
  static const char* names[] = {"scs15or60", "scs30or120"};
  return convert_enum_idx(names, 2, value, "mib_s::sub_carrier_spacing_common_e_");
}
uint8_t mib_s::sub_carrier_spacing_common_opts::to_number() const
{
  static const uint8_t numbers[] = {15, 30};
  return map_enum_number(numbers, 2, value, "mib_s::sub_carrier_spacing_common_e_");
}

const char* mib_s::dmrs_type_a_position_opts::to_string() const
{
  static const char* names[] = {"pos2", "pos3"};
  return convert_enum_idx(names, 2, value, "mib_s::dmrs_type_a_position_e_");
}
uint8_t mib_s::dmrs_type_a_position_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3};
  return map_enum_number(numbers, 2, value, "mib_s::dmrs_type_a_position_e_");
}

const char* mib_s::cell_barred_opts::to_string() const
{
  static const char* names[] = {"barred", "notBarred"};
  return convert_enum_idx(names, 2, value, "mib_s::cell_barred_e_");
}

const char* mib_s::intra_freq_resel_opts::to_string() const
{
  static const char* names[] = {"allowed", "notAllowed"};
  return convert_enum_idx(names, 2, value, "mib_s::intra_freq_resel_e_");
}

// BCCH-BCH-MessageType ::= CHOICE
void bcch_bch_msg_type_c::set(types::options e)
{
  type_ = e;
}
mib_s& bcch_bch_msg_type_c::set_mib()
{
  set(types::mib);
  return c;
}
void bcch_bch_msg_type_c::set_msg_class_ext()
{
  set(types::msg_class_ext);
}
void bcch_bch_msg_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::mib:
      j.write_fieldname("mib");
      c.to_json(j);
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "bcch_bch_msg_type_c");
  }
  j.end_obj();
}
SRSASN_CODE bcch_bch_msg_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::mib:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "bcch_bch_msg_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE bcch_bch_msg_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::mib:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "bcch_bch_msg_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* bcch_bch_msg_type_c::types_opts::to_string() const
{
  static const char* names[] = {"mib", "messageClassExtension"};
  return convert_enum_idx(names, 2, value, "bcch_bch_msg_type_c::types");
}

// BCCH-BCH-Message ::= SEQUENCE
SRSASN_CODE bcch_bch_msg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(msg.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE bcch_bch_msg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(msg.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void bcch_bch_msg_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("BCCH-BCH-Message");
  j.write_fieldname("message");
  msg.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

// EUTRA-NS-PmaxValue ::= SEQUENCE
SRSASN_CODE eutra_ns_pmax_value_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(add_pmax_present, 1));
  HANDLE_CODE(bref.pack(add_spec_emission_present, 1));

  if (add_pmax_present) {
    HANDLE_CODE(pack_integer(bref, add_pmax, (int8_t)-30, (int8_t)33));
  }
  if (add_spec_emission_present) {
    HANDLE_CODE(pack_integer(bref, add_spec_emission, (uint16_t)1u, (uint16_t)288u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_ns_pmax_value_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(add_pmax_present, 1));
  HANDLE_CODE(bref.unpack(add_spec_emission_present, 1));

  if (add_pmax_present) {
    HANDLE_CODE(unpack_integer(add_pmax, bref, (int8_t)-30, (int8_t)33));
  }
  if (add_spec_emission_present) {
    HANDLE_CODE(unpack_integer(add_spec_emission, bref, (uint16_t)1u, (uint16_t)288u));
  }

  return SRSASN_SUCCESS;
}
void eutra_ns_pmax_value_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (add_pmax_present) {
    j.write_int("additionalPmax", add_pmax);
  }
  if (add_spec_emission_present) {
    j.write_int("additionalSpectrumEmission", add_spec_emission);
  }
  j.end_obj();
}

// GNSS-ID-r16 ::= SEQUENCE
SRSASN_CODE gnss_id_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(gnss_id_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnss_id_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(gnss_id_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void gnss_id_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("gnss-id-r16", gnss_id_r16.to_string());
  j.end_obj();
}

const char* gnss_id_r16_s::gnss_id_r16_opts::to_string() const
{
  static const char* names[] = {"gps", "sbas", "qzss", "galileo", "glonass", "bds"};
  return convert_enum_idx(names, 6, value, "gnss_id_r16_s::gnss_id_r16_e_");
}

// PCI-Range ::= SEQUENCE
SRSASN_CODE pci_range_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(range_present, 1));

  HANDLE_CODE(pack_integer(bref, start, (uint16_t)0u, (uint16_t)1007u));
  if (range_present) {
    HANDLE_CODE(range.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pci_range_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(range_present, 1));

  HANDLE_CODE(unpack_integer(start, bref, (uint16_t)0u, (uint16_t)1007u));
  if (range_present) {
    HANDLE_CODE(range.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void pci_range_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("start", start);
  if (range_present) {
    j.write_str("range", range.to_string());
  }
  j.end_obj();
}

const char* pci_range_s::range_opts::to_string() const
{
  static const char* names[] = {"n4",
                                "n8",
                                "n12",
                                "n16",
                                "n24",
                                "n32",
                                "n48",
                                "n64",
                                "n84",
                                "n96",
                                "n128",
                                "n168",
                                "n252",
                                "n504",
                                "n1008",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "pci_range_s::range_e_");
}
uint16_t pci_range_s::range_opts::to_number() const
{
  static const uint16_t numbers[] = {4, 8, 12, 16, 24, 32, 48, 64, 84, 96, 128, 168, 252, 504, 1008};
  return map_enum_number(numbers, 15, value, "pci_range_s::range_e_");
}

// SBAS-ID-r16 ::= SEQUENCE
SRSASN_CODE sbas_id_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(sbas_id_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sbas_id_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(sbas_id_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sbas_id_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sbas-id-r16", sbas_id_r16.to_string());
  j.end_obj();
}

const char* sbas_id_r16_s::sbas_id_r16_opts::to_string() const
{
  static const char* names[] = {"waas", "egnos", "msas", "gagan"};
  return convert_enum_idx(names, 4, value, "sbas_id_r16_s::sbas_id_r16_e_");
}

// CellReselectionSubPriority ::= ENUMERATED
const char* cell_resel_sub_prio_opts::to_string() const
{
  static const char* names[] = {"oDot2", "oDot4", "oDot6", "oDot8"};
  return convert_enum_idx(names, 4, value, "cell_resel_sub_prio_e");
}
float cell_resel_sub_prio_opts::to_number() const
{
  static const float numbers[] = {0.2, 0.4, 0.6, 0.8};
  return map_enum_number(numbers, 4, value, "cell_resel_sub_prio_e");
}
const char* cell_resel_sub_prio_opts::to_number_string() const
{
  static const char* number_strs[] = {"0.2", "0.4", "0.6", "0.8"};
  return convert_enum_idx(number_strs, 4, value, "cell_resel_sub_prio_e");
}

const char* eutra_mbsfn_sf_cfg_s::sf_alloc1_c_::types_opts::to_string() const
{
  static const char* names[] = {"oneFrame", "fourFrames"};
  return convert_enum_idx(names, 2, value, "eutra_mbsfn_sf_cfg_s::sf_alloc1_c_::types");
}
uint8_t eutra_mbsfn_sf_cfg_s::sf_alloc1_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 4};
  return map_enum_number(numbers, 2, value, "eutra_mbsfn_sf_cfg_s::sf_alloc1_c_::types");
}

const char* eutra_mbsfn_sf_cfg_s::sf_alloc2_c_::types_opts::to_string() const
{
  static const char* names[] = {"oneFrame", "fourFrames"};
  return convert_enum_idx(names, 2, value, "eutra_mbsfn_sf_cfg_s::sf_alloc2_c_::types");
}
uint8_t eutra_mbsfn_sf_cfg_s::sf_alloc2_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 4};
  return map_enum_number(numbers, 2, value, "eutra_mbsfn_sf_cfg_s::sf_alloc2_c_::types");
}

// EUTRA-Q-OffsetRange ::= ENUMERATED
const char* eutra_q_offset_range_opts::to_string() const
{
  static const char* names[] = {"dB-24", "dB-22", "dB-20", "dB-18", "dB-16", "dB-14", "dB-12", "dB-10",
                                "dB-8",  "dB-6",  "dB-5",  "dB-4",  "dB-3",  "dB-2",  "dB-1",  "dB0",
                                "dB1",   "dB2",   "dB3",   "dB4",   "dB5",   "dB6",   "dB8",   "dB10",
                                "dB12",  "dB14",  "dB16",  "dB18",  "dB20",  "dB22",  "dB24"};
  return convert_enum_idx(names, 31, value, "eutra_q_offset_range_e");
}
int8_t eutra_q_offset_range_opts::to_number() const
{
  static const int8_t numbers[] = {-24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -5, -4, -3, -2, -1, 0,
                                   1,   2,   3,   4,   5,   6,   8,   10,  12, 14, 16, 18, 20, 22, 24};
  return map_enum_number(numbers, 31, value, "eutra_q_offset_range_e");
}

// NSAG-IdentityInfo-r17 ::= SEQUENCE
SRSASN_CODE nsag_id_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(tac_r17_present, 1));

  HANDLE_CODE(nsag_id_r17.pack(bref));
  if (tac_r17_present) {
    HANDLE_CODE(tac_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE nsag_id_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(tac_r17_present, 1));

  HANDLE_CODE(nsag_id_r17.unpack(bref));
  if (tac_r17_present) {
    HANDLE_CODE(tac_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void nsag_id_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("nsag-ID-r17", nsag_id_r17.to_string());
  if (tac_r17_present) {
    j.write_str("trackingAreaCode-r17", tac_r17.to_string());
  }
  j.end_obj();
}

// Orbital-r17 ::= SEQUENCE
SRSASN_CODE orbital_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, semi_major_axis_r17, (uint64_t)0u, (uint64_t)8589934591u));
  HANDLE_CODE(pack_integer(bref, eccentricity_r17, (uint32_t)0u, (uint32_t)1048575u));
  HANDLE_CODE(pack_integer(bref, periapsis_r17, (uint32_t)0u, (uint32_t)268435455u));
  HANDLE_CODE(pack_integer(bref, longitude_r17, (uint32_t)0u, (uint32_t)268435455u));
  HANDLE_CODE(pack_integer(bref, inclination_r17, (int32_t)-67108864, (int32_t)67108863));
  HANDLE_CODE(pack_integer(bref, mean_anomaly_r17, (uint32_t)0u, (uint32_t)268435455u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE orbital_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(semi_major_axis_r17, bref, (uint64_t)0u, (uint64_t)8589934591u));
  HANDLE_CODE(unpack_integer(eccentricity_r17, bref, (uint32_t)0u, (uint32_t)1048575u));
  HANDLE_CODE(unpack_integer(periapsis_r17, bref, (uint32_t)0u, (uint32_t)268435455u));
  HANDLE_CODE(unpack_integer(longitude_r17, bref, (uint32_t)0u, (uint32_t)268435455u));
  HANDLE_CODE(unpack_integer(inclination_r17, bref, (int32_t)-67108864, (int32_t)67108863));
  HANDLE_CODE(unpack_integer(mean_anomaly_r17, bref, (uint32_t)0u, (uint32_t)268435455u));

  return SRSASN_SUCCESS;
}
void orbital_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("semiMajorAxis-r17", semi_major_axis_r17);
  j.write_int("eccentricity-r17", eccentricity_r17);
  j.write_int("periapsis-r17", periapsis_r17);
  j.write_int("longitude-r17", longitude_r17);
  j.write_int("inclination-r17", inclination_r17);
  j.write_int("meanAnomaly-r17", mean_anomaly_r17);
  j.end_obj();
}

// PositionVelocity-r17 ::= SEQUENCE
SRSASN_CODE position_velocity_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, position_x_r17, (int32_t)-33554432, (int32_t)33554431));
  HANDLE_CODE(pack_integer(bref, position_y_r17, (int32_t)-33554432, (int32_t)33554431));
  HANDLE_CODE(pack_integer(bref, position_z_r17, (int32_t)-33554432, (int32_t)33554431));
  HANDLE_CODE(pack_integer(bref, velocity_vx_r17, (int32_t)-131072, (int32_t)131071));
  HANDLE_CODE(pack_integer(bref, velocity_vy_r17, (int32_t)-131072, (int32_t)131071));
  HANDLE_CODE(pack_integer(bref, velocity_vz_r17, (int32_t)-131072, (int32_t)131071));

  return SRSASN_SUCCESS;
}
SRSASN_CODE position_velocity_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(position_x_r17, bref, (int32_t)-33554432, (int32_t)33554431));
  HANDLE_CODE(unpack_integer(position_y_r17, bref, (int32_t)-33554432, (int32_t)33554431));
  HANDLE_CODE(unpack_integer(position_z_r17, bref, (int32_t)-33554432, (int32_t)33554431));
  HANDLE_CODE(unpack_integer(velocity_vx_r17, bref, (int32_t)-131072, (int32_t)131071));
  HANDLE_CODE(unpack_integer(velocity_vy_r17, bref, (int32_t)-131072, (int32_t)131071));
  HANDLE_CODE(unpack_integer(velocity_vz_r17, bref, (int32_t)-131072, (int32_t)131071));

  return SRSASN_SUCCESS;
}
void position_velocity_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("positionX-r17", position_x_r17);
  j.write_int("positionY-r17", position_y_r17);
  j.write_int("positionZ-r17", position_z_r17);
  j.write_int("velocityVX-r17", velocity_vx_r17);
  j.write_int("velocityVY-r17", velocity_vy_r17);
  j.write_int("velocityVZ-r17", velocity_vz_r17);
  j.end_obj();
}

// Q-OffsetRange ::= ENUMERATED
const char* q_offset_range_opts::to_string() const
{
  static const char* names[] = {"dB-24", "dB-22", "dB-20", "dB-18", "dB-16", "dB-14", "dB-12", "dB-10",
                                "dB-8",  "dB-6",  "dB-5",  "dB-4",  "dB-3",  "dB-2",  "dB-1",  "dB0",
                                "dB1",   "dB2",   "dB3",   "dB4",   "dB5",   "dB6",   "dB8",   "dB10",
                                "dB12",  "dB14",  "dB16",  "dB18",  "dB20",  "dB22",  "dB24"};
  return convert_enum_idx(names, 31, value, "q_offset_range_e");
}
int8_t q_offset_range_opts::to_number() const
{
  static const int8_t numbers[] = {-24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -5, -4, -3, -2, -1, 0,
                                   1,   2,   3,   4,   5,   6,   8,   10,  12, 14, 16, 18, 20, 22, 24};
  return map_enum_number(numbers, 31, value, "q_offset_range_e");
}

const char*
rach_cfg_common_two_step_ra_r16_s::msg_a_ssb_per_rach_occasion_and_cb_preambs_per_ssb_r16_c_::types_opts::to_string()
    const
{
  static const char* names[] = {"oneEighth", "oneFourth", "oneHalf", "one", "two", "four", "eight", "sixteen"};
  return convert_enum_idx(
      names,
      8,
      value,
      "rach_cfg_common_two_step_ra_r16_s::msg_a_ssb_per_rach_occasion_and_cb_preambs_per_ssb_r16_c_::types");
}
float rach_cfg_common_two_step_ra_r16_s::msg_a_ssb_per_rach_occasion_and_cb_preambs_per_ssb_r16_c_::types_opts::
    to_number() const
{
  static const float numbers[] = {0.125, 0.25, 0.5, 1.0, 2.0, 4.0, 8.0, 6.0};
  return map_enum_number(
      numbers,
      8,
      value,
      "rach_cfg_common_two_step_ra_r16_s::msg_a_ssb_per_rach_occasion_and_cb_preambs_per_ssb_r16_c_::types");
}
const char* rach_cfg_common_two_step_ra_r16_s::msg_a_ssb_per_rach_occasion_and_cb_preambs_per_ssb_r16_c_::types_opts::
    to_number_string() const
{
  static const char* number_strs[] = {"1/8", "1/4", "1/2", "1", "2", "4", "8", "6"};
  return convert_enum_idx(
      number_strs,
      8,
      value,
      "rach_cfg_common_two_step_ra_r16_s::msg_a_ssb_per_rach_occasion_and_cb_preambs_per_ssb_r16_c_::types");
}

const char* rach_cfg_common_two_step_ra_r16_s::msg_a_prach_root_seq_idx_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"l839", "l139", "l571", "l1151"};
  return convert_enum_idx(names, 4, value, "rach_cfg_common_two_step_ra_r16_s::msg_a_prach_root_seq_idx_r16_c_::types");
}
uint16_t rach_cfg_common_two_step_ra_r16_s::msg_a_prach_root_seq_idx_r16_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {839, 139, 571, 1151};
  return map_enum_number(
      numbers, 4, value, "rach_cfg_common_two_step_ra_r16_s::msg_a_prach_root_seq_idx_r16_c_::types");
}

// SI-RequestResources ::= SEQUENCE
SRSASN_CODE si_request_res_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ra_assoc_period_idx_present, 1));
  HANDLE_CODE(bref.pack(ra_ssb_occasion_mask_idx_present, 1));

  HANDLE_CODE(pack_integer(bref, ra_preamb_start_idx, (uint8_t)0u, (uint8_t)63u));
  if (ra_assoc_period_idx_present) {
    HANDLE_CODE(pack_integer(bref, ra_assoc_period_idx, (uint8_t)0u, (uint8_t)15u));
  }
  if (ra_ssb_occasion_mask_idx_present) {
    HANDLE_CODE(pack_integer(bref, ra_ssb_occasion_mask_idx, (uint8_t)0u, (uint8_t)15u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE si_request_res_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ra_assoc_period_idx_present, 1));
  HANDLE_CODE(bref.unpack(ra_ssb_occasion_mask_idx_present, 1));

  HANDLE_CODE(unpack_integer(ra_preamb_start_idx, bref, (uint8_t)0u, (uint8_t)63u));
  if (ra_assoc_period_idx_present) {
    HANDLE_CODE(unpack_integer(ra_assoc_period_idx, bref, (uint8_t)0u, (uint8_t)15u));
  }
  if (ra_ssb_occasion_mask_idx_present) {
    HANDLE_CODE(unpack_integer(ra_ssb_occasion_mask_idx, bref, (uint8_t)0u, (uint8_t)15u));
  }

  return SRSASN_SUCCESS;
}
void si_request_res_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("ra-PreambleStartIndex", ra_preamb_start_idx);
  if (ra_assoc_period_idx_present) {
    j.write_int("ra-AssociationPeriodIndex", ra_assoc_period_idx);
  }
  if (ra_ssb_occasion_mask_idx_present) {
    j.write_int("ra-ssb-OccasionMaskIndex", ra_ssb_occasion_mask_idx);
  }
  j.end_obj();
}

// SIB-TypeInfo-v1700 ::= SEQUENCE
SRSASN_CODE sib_type_info_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(value_tag_r17_present, 1));
  HANDLE_CODE(bref.pack(area_scope_r17_present, 1));

  HANDLE_CODE(sib_type_r17.pack(bref));
  if (value_tag_r17_present) {
    HANDLE_CODE(pack_integer(bref, value_tag_r17, (uint8_t)0u, (uint8_t)31u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib_type_info_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(value_tag_r17_present, 1));
  HANDLE_CODE(bref.unpack(area_scope_r17_present, 1));

  HANDLE_CODE(sib_type_r17.unpack(bref));
  if (value_tag_r17_present) {
    HANDLE_CODE(unpack_integer(value_tag_r17, bref, (uint8_t)0u, (uint8_t)31u));
  }

  return SRSASN_SUCCESS;
}
void sib_type_info_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sibType-r17");
  sib_type_r17.to_json(j);
  if (value_tag_r17_present) {
    j.write_int("valueTag-r17", value_tag_r17);
  }
  if (area_scope_r17_present) {
    j.write_str("areaScope-r17", "true");
  }
  j.end_obj();
}

void sib_type_info_v1700_s::sib_type_r17_c_::destroy_()
{
  switch (type_) {
    case types::type2_r17:
      c.destroy<type2_r17_s_>();
      break;
    default:
      break;
  }
}
void sib_type_info_v1700_s::sib_type_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::type1_r17:
      break;
    case types::type2_r17:
      c.init<type2_r17_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sib_type_info_v1700_s::sib_type_r17_c_");
  }
}
sib_type_info_v1700_s::sib_type_r17_c_::sib_type_r17_c_(const sib_type_info_v1700_s::sib_type_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::type1_r17:
      c.init(other.c.get<type1_r17_e_>());
      break;
    case types::type2_r17:
      c.init(other.c.get<type2_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sib_type_info_v1700_s::sib_type_r17_c_");
  }
}
sib_type_info_v1700_s::sib_type_r17_c_&
sib_type_info_v1700_s::sib_type_r17_c_::operator=(const sib_type_info_v1700_s::sib_type_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::type1_r17:
      c.set(other.c.get<type1_r17_e_>());
      break;
    case types::type2_r17:
      c.set(other.c.get<type2_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sib_type_info_v1700_s::sib_type_r17_c_");
  }

  return *this;
}
sib_type_info_v1700_s::sib_type_r17_c_::type1_r17_e_& sib_type_info_v1700_s::sib_type_r17_c_::set_type1_r17()
{
  set(types::type1_r17);
  return c.get<type1_r17_e_>();
}
sib_type_info_v1700_s::sib_type_r17_c_::type2_r17_s_& sib_type_info_v1700_s::sib_type_r17_c_::set_type2_r17()
{
  set(types::type2_r17);
  return c.get<type2_r17_s_>();
}
void sib_type_info_v1700_s::sib_type_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::type1_r17:
      j.write_str("type1-r17", c.get<type1_r17_e_>().to_string());
      break;
    case types::type2_r17:
      j.write_fieldname("type2-r17");
      j.start_obj();
      j.write_str("posSibType-r17", c.get<type2_r17_s_>().pos_sib_type_r17.to_string());
      if (c.get<type2_r17_s_>().encrypted_r17_present) {
        j.write_str("encrypted-r17", "true");
      }
      if (c.get<type2_r17_s_>().gnss_id_r17_present) {
        j.write_fieldname("gnss-id-r17");
        c.get<type2_r17_s_>().gnss_id_r17.to_json(j);
      }
      if (c.get<type2_r17_s_>().sbas_id_r17_present) {
        j.write_fieldname("sbas-id-r17");
        c.get<type2_r17_s_>().sbas_id_r17.to_json(j);
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "sib_type_info_v1700_s::sib_type_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE sib_type_info_v1700_s::sib_type_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::type1_r17:
      HANDLE_CODE(c.get<type1_r17_e_>().pack(bref));
      break;
    case types::type2_r17:
      HANDLE_CODE(bref.pack(c.get<type2_r17_s_>().encrypted_r17_present, 1));
      HANDLE_CODE(bref.pack(c.get<type2_r17_s_>().gnss_id_r17_present, 1));
      HANDLE_CODE(bref.pack(c.get<type2_r17_s_>().sbas_id_r17_present, 1));
      HANDLE_CODE(c.get<type2_r17_s_>().pos_sib_type_r17.pack(bref));
      if (c.get<type2_r17_s_>().gnss_id_r17_present) {
        HANDLE_CODE(c.get<type2_r17_s_>().gnss_id_r17.pack(bref));
      }
      if (c.get<type2_r17_s_>().sbas_id_r17_present) {
        HANDLE_CODE(c.get<type2_r17_s_>().sbas_id_r17.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "sib_type_info_v1700_s::sib_type_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sib_type_info_v1700_s::sib_type_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::type1_r17:
      HANDLE_CODE(c.get<type1_r17_e_>().unpack(bref));
      break;
    case types::type2_r17:
      HANDLE_CODE(bref.unpack(c.get<type2_r17_s_>().encrypted_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.get<type2_r17_s_>().gnss_id_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.get<type2_r17_s_>().sbas_id_r17_present, 1));
      HANDLE_CODE(c.get<type2_r17_s_>().pos_sib_type_r17.unpack(bref));
      if (c.get<type2_r17_s_>().gnss_id_r17_present) {
        HANDLE_CODE(c.get<type2_r17_s_>().gnss_id_r17.unpack(bref));
      }
      if (c.get<type2_r17_s_>().sbas_id_r17_present) {
        HANDLE_CODE(c.get<type2_r17_s_>().sbas_id_r17.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "sib_type_info_v1700_s::sib_type_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sib_type_info_v1700_s::sib_type_r17_c_::type1_r17_opts::to_string() const
{
  static const char* names[] = {"sibType15",
                                "sibType16",
                                "sibType17",
                                "sibType18",
                                "sibType19",
                                "sibType20",
                                "sibType21",
                                "spare9",
                                "spare8",
                                "spare7",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "sib_type_info_v1700_s::sib_type_r17_c_::type1_r17_e_");
}
uint8_t sib_type_info_v1700_s::sib_type_r17_c_::type1_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {15, 16, 17, 18, 19, 20, 21};
  return map_enum_number(numbers, 7, value, "sib_type_info_v1700_s::sib_type_r17_c_::type1_r17_e_");
}

const char* sib_type_info_v1700_s::sib_type_r17_c_::type2_r17_s_::pos_sib_type_r17_opts::to_string() const
{
  static const char* names[] = {"posSibType1-9",
                                "posSibType1-10",
                                "posSibType2-24",
                                "posSibType2-25",
                                "posSibType6-4",
                                "posSibType6-5",
                                "posSibType6-6",
                                "spare9",
                                "spare8",
                                "spare7",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(
      names, 16, value, "sib_type_info_v1700_s::sib_type_r17_c_::type2_r17_s_::pos_sib_type_r17_e_");
}

const char* sib_type_info_v1700_s::sib_type_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"type1-r17", "type2-r17"};
  return convert_enum_idx(names, 2, value, "sib_type_info_v1700_s::sib_type_r17_c_::types");
}
uint8_t sib_type_info_v1700_s::sib_type_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "sib_type_info_v1700_s::sib_type_r17_c_::types");
}

// SSB-PositionQCL-Relation-r16 ::= ENUMERATED
const char* ssb_position_qcl_relation_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8"};
  return convert_enum_idx(names, 4, value, "ssb_position_qcl_relation_r16_e");
}
uint8_t ssb_position_qcl_relation_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(numbers, 4, value, "ssb_position_qcl_relation_r16_e");
}

// SSB-PositionQCL-Relation-r17 ::= ENUMERATED
const char* ssb_position_qcl_relation_r17_opts::to_string() const
{
  static const char* names[] = {"n32", "n64"};
  return convert_enum_idx(names, 2, value, "ssb_position_qcl_relation_r17_e");
}
uint8_t ssb_position_qcl_relation_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {32, 64};
  return map_enum_number(numbers, 2, value, "ssb_position_qcl_relation_r17_e");
}

// EUTRA-FreqNeighCellInfo ::= SEQUENCE
SRSASN_CODE eutra_freq_neigh_cell_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(q_rx_lev_min_offset_cell_present, 1));
  HANDLE_CODE(bref.pack(q_qual_min_offset_cell_present, 1));

  HANDLE_CODE(pack_integer(bref, pci, (uint16_t)0u, (uint16_t)503u));
  HANDLE_CODE(dummy.pack(bref));
  if (q_rx_lev_min_offset_cell_present) {
    HANDLE_CODE(pack_integer(bref, q_rx_lev_min_offset_cell, (uint8_t)1u, (uint8_t)8u));
  }
  if (q_qual_min_offset_cell_present) {
    HANDLE_CODE(pack_integer(bref, q_qual_min_offset_cell, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_freq_neigh_cell_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(q_rx_lev_min_offset_cell_present, 1));
  HANDLE_CODE(bref.unpack(q_qual_min_offset_cell_present, 1));

  HANDLE_CODE(unpack_integer(pci, bref, (uint16_t)0u, (uint16_t)503u));
  HANDLE_CODE(dummy.unpack(bref));
  if (q_rx_lev_min_offset_cell_present) {
    HANDLE_CODE(unpack_integer(q_rx_lev_min_offset_cell, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (q_qual_min_offset_cell_present) {
    HANDLE_CODE(unpack_integer(q_qual_min_offset_cell, bref, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
void eutra_freq_neigh_cell_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId", pci);
  j.write_str("dummy", dummy.to_string());
  if (q_rx_lev_min_offset_cell_present) {
    j.write_int("q-RxLevMinOffsetCell", q_rx_lev_min_offset_cell);
  }
  if (q_qual_min_offset_cell_present) {
    j.write_int("q-QualMinOffsetCell", q_qual_min_offset_cell);
  }
  j.end_obj();
}

// EUTRA-MultiBandInfo ::= SEQUENCE
SRSASN_CODE eutra_multi_band_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(eutra_ns_pmax_list.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, eutra_freq_band_ind, (uint16_t)1u, (uint16_t)256u));
  if (eutra_ns_pmax_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, eutra_ns_pmax_list, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_multi_band_info_s::unpack(cbit_ref& bref)
{
  bool eutra_ns_pmax_list_present;
  HANDLE_CODE(bref.unpack(eutra_ns_pmax_list_present, 1));

  HANDLE_CODE(unpack_integer(eutra_freq_band_ind, bref, (uint16_t)1u, (uint16_t)256u));
  if (eutra_ns_pmax_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(eutra_ns_pmax_list, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void eutra_multi_band_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("eutra-FreqBandIndicator", eutra_freq_band_ind);
  if (eutra_ns_pmax_list.size() > 0) {
    j.start_array("eutra-NS-PmaxList");
    for (const auto& e1 : eutra_ns_pmax_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// EUTRA-PhysCellIdRange ::= SEQUENCE
SRSASN_CODE eutra_pci_range_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(range_present, 1));

  HANDLE_CODE(pack_integer(bref, start, (uint16_t)0u, (uint16_t)503u));
  if (range_present) {
    HANDLE_CODE(range.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_pci_range_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(range_present, 1));

  HANDLE_CODE(unpack_integer(start, bref, (uint16_t)0u, (uint16_t)503u));
  if (range_present) {
    HANDLE_CODE(range.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void eutra_pci_range_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("start", start);
  if (range_present) {
    j.write_str("range", range.to_string());
  }
  j.end_obj();
}

const char* eutra_pci_range_s::range_opts::to_string() const
{
  static const char* names[] = {"n4",
                                "n8",
                                "n12",
                                "n16",
                                "n24",
                                "n32",
                                "n48",
                                "n64",
                                "n84",
                                "n96",
                                "n128",
                                "n168",
                                "n252",
                                "n504",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "eutra_pci_range_s::range_e_");
}
uint16_t eutra_pci_range_s::range_opts::to_number() const
{
  static const uint16_t numbers[] = {4, 8, 12, 16, 24, 32, 48, 64, 84, 96, 128, 168, 252, 504};
  return map_enum_number(numbers, 14, value, "eutra_pci_range_s::range_e_");
}

// EphemerisInfo-r17 ::= CHOICE
void ephemeris_info_r17_c::destroy_()
{
  switch (type_) {
    case types::position_velocity_r17:
      c.destroy<position_velocity_r17_s>();
      break;
    case types::orbital_r17:
      c.destroy<orbital_r17_s>();
      break;
    default:
      break;
  }
}
void ephemeris_info_r17_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::position_velocity_r17:
      c.init<position_velocity_r17_s>();
      break;
    case types::orbital_r17:
      c.init<orbital_r17_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ephemeris_info_r17_c");
  }
}
ephemeris_info_r17_c::ephemeris_info_r17_c(const ephemeris_info_r17_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::position_velocity_r17:
      c.init(other.c.get<position_velocity_r17_s>());
      break;
    case types::orbital_r17:
      c.init(other.c.get<orbital_r17_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ephemeris_info_r17_c");
  }
}
ephemeris_info_r17_c& ephemeris_info_r17_c::operator=(const ephemeris_info_r17_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::position_velocity_r17:
      c.set(other.c.get<position_velocity_r17_s>());
      break;
    case types::orbital_r17:
      c.set(other.c.get<orbital_r17_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ephemeris_info_r17_c");
  }

  return *this;
}
position_velocity_r17_s& ephemeris_info_r17_c::set_position_velocity_r17()
{
  set(types::position_velocity_r17);
  return c.get<position_velocity_r17_s>();
}
orbital_r17_s& ephemeris_info_r17_c::set_orbital_r17()
{
  set(types::orbital_r17);
  return c.get<orbital_r17_s>();
}
void ephemeris_info_r17_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::position_velocity_r17:
      j.write_fieldname("positionVelocity-r17");
      c.get<position_velocity_r17_s>().to_json(j);
      break;
    case types::orbital_r17:
      j.write_fieldname("orbital-r17");
      c.get<orbital_r17_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ephemeris_info_r17_c");
  }
  j.end_obj();
}
SRSASN_CODE ephemeris_info_r17_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::position_velocity_r17:
      HANDLE_CODE(c.get<position_velocity_r17_s>().pack(bref));
      break;
    case types::orbital_r17:
      HANDLE_CODE(c.get<orbital_r17_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ephemeris_info_r17_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ephemeris_info_r17_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::position_velocity_r17:
      HANDLE_CODE(c.get<position_velocity_r17_s>().unpack(bref));
      break;
    case types::orbital_r17:
      HANDLE_CODE(c.get<orbital_r17_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ephemeris_info_r17_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ephemeris_info_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"positionVelocity-r17", "orbital-r17"};
  return convert_enum_idx(names, 2, value, "ephemeris_info_r17_c::types");
}

// EpochTime-r17 ::= SEQUENCE
SRSASN_CODE epoch_time_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, sfn_r17, (uint16_t)0u, (uint16_t)1023u));
  HANDLE_CODE(pack_integer(bref, sub_frame_nr_r17, (uint8_t)0u, (uint8_t)9u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE epoch_time_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(sfn_r17, bref, (uint16_t)0u, (uint16_t)1023u));
  HANDLE_CODE(unpack_integer(sub_frame_nr_r17, bref, (uint8_t)0u, (uint8_t)9u));

  return SRSASN_SUCCESS;
}
void epoch_time_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sfn-r17", sfn_r17);
  j.write_int("subFrameNR-r17", sub_frame_nr_r17);
  j.end_obj();
}

// InterFreqNeighCellInfo ::= SEQUENCE
SRSASN_CODE inter_freq_neigh_cell_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(q_rx_lev_min_offset_cell_present, 1));
  HANDLE_CODE(bref.pack(q_rx_lev_min_offset_cell_sul_present, 1));
  HANDLE_CODE(bref.pack(q_qual_min_offset_cell_present, 1));

  HANDLE_CODE(pack_integer(bref, pci, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(q_offset_cell.pack(bref));
  if (q_rx_lev_min_offset_cell_present) {
    HANDLE_CODE(pack_integer(bref, q_rx_lev_min_offset_cell, (uint8_t)1u, (uint8_t)8u));
  }
  if (q_rx_lev_min_offset_cell_sul_present) {
    HANDLE_CODE(pack_integer(bref, q_rx_lev_min_offset_cell_sul, (uint8_t)1u, (uint8_t)8u));
  }
  if (q_qual_min_offset_cell_present) {
    HANDLE_CODE(pack_integer(bref, q_qual_min_offset_cell, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE inter_freq_neigh_cell_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(q_rx_lev_min_offset_cell_present, 1));
  HANDLE_CODE(bref.unpack(q_rx_lev_min_offset_cell_sul_present, 1));
  HANDLE_CODE(bref.unpack(q_qual_min_offset_cell_present, 1));

  HANDLE_CODE(unpack_integer(pci, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(q_offset_cell.unpack(bref));
  if (q_rx_lev_min_offset_cell_present) {
    HANDLE_CODE(unpack_integer(q_rx_lev_min_offset_cell, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (q_rx_lev_min_offset_cell_sul_present) {
    HANDLE_CODE(unpack_integer(q_rx_lev_min_offset_cell_sul, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (q_qual_min_offset_cell_present) {
    HANDLE_CODE(unpack_integer(q_qual_min_offset_cell, bref, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
void inter_freq_neigh_cell_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId", pci);
  j.write_str("q-OffsetCell", q_offset_cell.to_string());
  if (q_rx_lev_min_offset_cell_present) {
    j.write_int("q-RxLevMinOffsetCell", q_rx_lev_min_offset_cell);
  }
  if (q_rx_lev_min_offset_cell_sul_present) {
    j.write_int("q-RxLevMinOffsetCellSUL", q_rx_lev_min_offset_cell_sul);
  }
  if (q_qual_min_offset_cell_present) {
    j.write_int("q-QualMinOffsetCell", q_qual_min_offset_cell);
  }
  j.end_obj();
}

// InterFreqNeighCellInfo-v1610 ::= SEQUENCE
SRSASN_CODE inter_freq_neigh_cell_info_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ssb_position_qcl_r16_present, 1));

  if (ssb_position_qcl_r16_present) {
    HANDLE_CODE(ssb_position_qcl_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE inter_freq_neigh_cell_info_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ssb_position_qcl_r16_present, 1));

  if (ssb_position_qcl_r16_present) {
    HANDLE_CODE(ssb_position_qcl_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void inter_freq_neigh_cell_info_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ssb_position_qcl_r16_present) {
    j.write_str("ssb-PositionQCL-r16", ssb_position_qcl_r16.to_string());
  }
  j.end_obj();
}

// InterFreqNeighCellInfo-v1710 ::= SEQUENCE
SRSASN_CODE inter_freq_neigh_cell_info_v1710_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ssb_position_qcl_r17_present, 1));

  if (ssb_position_qcl_r17_present) {
    HANDLE_CODE(ssb_position_qcl_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE inter_freq_neigh_cell_info_v1710_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ssb_position_qcl_r17_present, 1));

  if (ssb_position_qcl_r17_present) {
    HANDLE_CODE(ssb_position_qcl_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void inter_freq_neigh_cell_info_v1710_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ssb_position_qcl_r17_present) {
    j.write_str("ssb-PositionQCL-r17", ssb_position_qcl_r17.to_string());
  }
  j.end_obj();
}

const char* rach_cfg_common_s::ssb_per_rach_occasion_and_cb_preambs_per_ssb_c_::types_opts::to_string() const
{
  static const char* names[] = {"oneEighth", "oneFourth", "oneHalf", "one", "two", "four", "eight", "sixteen"};
  return convert_enum_idx(names, 8, value, "rach_cfg_common_s::ssb_per_rach_occasion_and_cb_preambs_per_ssb_c_::types");
}
float rach_cfg_common_s::ssb_per_rach_occasion_and_cb_preambs_per_ssb_c_::types_opts::to_number() const
{
  static const float numbers[] = {0.125, 0.25, 0.5, 1.0, 2.0, 4.0, 8.0, 6.0};
  return map_enum_number(
      numbers, 8, value, "rach_cfg_common_s::ssb_per_rach_occasion_and_cb_preambs_per_ssb_c_::types");
}
const char* rach_cfg_common_s::ssb_per_rach_occasion_and_cb_preambs_per_ssb_c_::types_opts::to_number_string() const
{
  static const char* number_strs[] = {"1/8", "1/4", "1/2", "1", "2", "4", "8", "6"};
  return convert_enum_idx(
      number_strs, 8, value, "rach_cfg_common_s::ssb_per_rach_occasion_and_cb_preambs_per_ssb_c_::types");
}

const char* rach_cfg_common_s::prach_root_seq_idx_c_::types_opts::to_string() const
{
  static const char* names[] = {"l839", "l139"};
  return convert_enum_idx(names, 2, value, "rach_cfg_common_s::prach_root_seq_idx_c_::types");
}
uint16_t rach_cfg_common_s::prach_root_seq_idx_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {839, 139};
  return map_enum_number(numbers, 2, value, "rach_cfg_common_s::prach_root_seq_idx_c_::types");
}

const char* rach_cfg_common_s::prach_root_seq_idx_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"l571", "l1151"};
  return convert_enum_idx(names, 2, value, "rach_cfg_common_s::prach_root_seq_idx_r16_c_::types");
}
uint16_t rach_cfg_common_s::prach_root_seq_idx_r16_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {571, 1151};
  return map_enum_number(numbers, 2, value, "rach_cfg_common_s::prach_root_seq_idx_r16_c_::types");
}

// SI-RequestConfig ::= SEQUENCE
SRSASN_CODE si_request_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rach_occasions_si_present, 1));
  HANDLE_CODE(bref.pack(si_request_period_present, 1));

  if (rach_occasions_si_present) {
    HANDLE_CODE(rach_occasions_si.rach_cfg_si.pack(bref));
    HANDLE_CODE(rach_occasions_si.ssb_per_rach_occasion.pack(bref));
  }
  if (si_request_period_present) {
    HANDLE_CODE(si_request_period.pack(bref));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, si_request_res, 1, 32));

  return SRSASN_SUCCESS;
}
SRSASN_CODE si_request_cfg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(rach_occasions_si_present, 1));
  HANDLE_CODE(bref.unpack(si_request_period_present, 1));

  if (rach_occasions_si_present) {
    HANDLE_CODE(rach_occasions_si.rach_cfg_si.unpack(bref));
    HANDLE_CODE(rach_occasions_si.ssb_per_rach_occasion.unpack(bref));
  }
  if (si_request_period_present) {
    HANDLE_CODE(si_request_period.unpack(bref));
  }
  HANDLE_CODE(unpack_dyn_seq_of(si_request_res, bref, 1, 32));

  return SRSASN_SUCCESS;
}
void si_request_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rach_occasions_si_present) {
    j.write_fieldname("rach-OccasionsSI");
    j.start_obj();
    j.write_fieldname("rach-ConfigSI");
    rach_occasions_si.rach_cfg_si.to_json(j);
    j.write_str("ssb-perRACH-Occasion", rach_occasions_si.ssb_per_rach_occasion.to_string());
    j.end_obj();
  }
  if (si_request_period_present) {
    j.write_str("si-RequestPeriod", si_request_period.to_string());
  }
  j.start_array("si-RequestResources");
  for (const auto& e1 : si_request_res) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

const char* si_request_cfg_s::rach_occasions_si_s_::ssb_per_rach_occasion_opts::to_string() const
{
  static const char* names[] = {"oneEighth", "oneFourth", "oneHalf", "one", "two", "four", "eight", "sixteen"};
  return convert_enum_idx(names, 8, value, "si_request_cfg_s::rach_occasions_si_s_::ssb_per_rach_occasion_e_");
}
float si_request_cfg_s::rach_occasions_si_s_::ssb_per_rach_occasion_opts::to_number() const
{
  static const float numbers[] = {0.125, 0.25, 0.5, 1.0, 2.0, 4.0, 8.0, 6.0};
  return map_enum_number(numbers, 8, value, "si_request_cfg_s::rach_occasions_si_s_::ssb_per_rach_occasion_e_");
}
const char* si_request_cfg_s::rach_occasions_si_s_::ssb_per_rach_occasion_opts::to_number_string() const
{
  static const char* number_strs[] = {"1/8", "1/4", "1/2", "1", "2", "4", "8", "6"};
  return convert_enum_idx(number_strs, 8, value, "si_request_cfg_s::rach_occasions_si_s_::ssb_per_rach_occasion_e_");
}

const char* si_request_cfg_s::si_request_period_opts::to_string() const
{
  static const char* names[] = {"one", "two", "four", "six", "eight", "ten", "twelve", "sixteen"};
  return convert_enum_idx(names, 8, value, "si_request_cfg_s::si_request_period_e_");
}

// SSB-MTC4-r17 ::= SEQUENCE
SRSASN_CODE ssb_mtc4_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pci_list_r17.size() > 0, 1));

  if (pci_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, pci_list_r17, 1, 64, integer_packer<uint16_t>(0, 1007)));
  }
  HANDLE_CODE(pack_integer(bref, offset_r17, (uint8_t)0u, (uint8_t)159u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ssb_mtc4_r17_s::unpack(cbit_ref& bref)
{
  bool pci_list_r17_present;
  HANDLE_CODE(bref.unpack(pci_list_r17_present, 1));

  if (pci_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(pci_list_r17, bref, 1, 64, integer_packer<uint16_t>(0, 1007)));
  }
  HANDLE_CODE(unpack_integer(offset_r17, bref, (uint8_t)0u, (uint8_t)159u));

  return SRSASN_SUCCESS;
}
void ssb_mtc4_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pci_list_r17.size() > 0) {
    j.start_array("pci-List-r17");
    for (const auto& e1 : pci_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.write_int("offset-r17", offset_r17);
  j.end_obj();
}

// SliceInfo-r17 ::= SEQUENCE
SRSASN_CODE slice_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(nsag_cell_resel_prio_r17_present, 1));
  HANDLE_CODE(bref.pack(nsag_cell_resel_sub_prio_r17_present, 1));
  HANDLE_CODE(bref.pack(slice_cell_list_nr_r17_present, 1));

  HANDLE_CODE(nsag_id_info_r17.pack(bref));
  if (nsag_cell_resel_prio_r17_present) {
    HANDLE_CODE(pack_integer(bref, nsag_cell_resel_prio_r17, (uint8_t)0u, (uint8_t)7u));
  }
  if (nsag_cell_resel_sub_prio_r17_present) {
    HANDLE_CODE(nsag_cell_resel_sub_prio_r17.pack(bref));
  }
  if (slice_cell_list_nr_r17_present) {
    HANDLE_CODE(slice_cell_list_nr_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE slice_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(nsag_cell_resel_prio_r17_present, 1));
  HANDLE_CODE(bref.unpack(nsag_cell_resel_sub_prio_r17_present, 1));
  HANDLE_CODE(bref.unpack(slice_cell_list_nr_r17_present, 1));

  HANDLE_CODE(nsag_id_info_r17.unpack(bref));
  if (nsag_cell_resel_prio_r17_present) {
    HANDLE_CODE(unpack_integer(nsag_cell_resel_prio_r17, bref, (uint8_t)0u, (uint8_t)7u));
  }
  if (nsag_cell_resel_sub_prio_r17_present) {
    HANDLE_CODE(nsag_cell_resel_sub_prio_r17.unpack(bref));
  }
  if (slice_cell_list_nr_r17_present) {
    HANDLE_CODE(slice_cell_list_nr_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void slice_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nsag-IdentityInfo-r17");
  nsag_id_info_r17.to_json(j);
  if (nsag_cell_resel_prio_r17_present) {
    j.write_int("nsag-CellReselectionPriority-r17", nsag_cell_resel_prio_r17);
  }
  if (nsag_cell_resel_sub_prio_r17_present) {
    j.write_str("nsag-CellReselectionSubPriority-r17", nsag_cell_resel_sub_prio_r17.to_string());
  }
  if (slice_cell_list_nr_r17_present) {
    j.write_fieldname("sliceCellListNR-r17");
    slice_cell_list_nr_r17.to_json(j);
  }
  j.end_obj();
}

void slice_info_r17_s::slice_cell_list_nr_r17_c_::destroy_()
{
  switch (type_) {
    case types::slice_allowed_cell_list_nr_r17:
      c.destroy<slice_cell_list_nr_r17_l>();
      break;
    case types::slice_excluded_cell_list_nr_r17:
      c.destroy<slice_cell_list_nr_r17_l>();
      break;
    default:
      break;
  }
}
void slice_info_r17_s::slice_cell_list_nr_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::slice_allowed_cell_list_nr_r17:
      c.init<slice_cell_list_nr_r17_l>();
      break;
    case types::slice_excluded_cell_list_nr_r17:
      c.init<slice_cell_list_nr_r17_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "slice_info_r17_s::slice_cell_list_nr_r17_c_");
  }
}
slice_info_r17_s::slice_cell_list_nr_r17_c_::slice_cell_list_nr_r17_c_(
    const slice_info_r17_s::slice_cell_list_nr_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::slice_allowed_cell_list_nr_r17:
      c.init(other.c.get<slice_cell_list_nr_r17_l>());
      break;
    case types::slice_excluded_cell_list_nr_r17:
      c.init(other.c.get<slice_cell_list_nr_r17_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "slice_info_r17_s::slice_cell_list_nr_r17_c_");
  }
}
slice_info_r17_s::slice_cell_list_nr_r17_c_&
slice_info_r17_s::slice_cell_list_nr_r17_c_::operator=(const slice_info_r17_s::slice_cell_list_nr_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::slice_allowed_cell_list_nr_r17:
      c.set(other.c.get<slice_cell_list_nr_r17_l>());
      break;
    case types::slice_excluded_cell_list_nr_r17:
      c.set(other.c.get<slice_cell_list_nr_r17_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "slice_info_r17_s::slice_cell_list_nr_r17_c_");
  }

  return *this;
}
slice_cell_list_nr_r17_l& slice_info_r17_s::slice_cell_list_nr_r17_c_::set_slice_allowed_cell_list_nr_r17()
{
  set(types::slice_allowed_cell_list_nr_r17);
  return c.get<slice_cell_list_nr_r17_l>();
}
slice_cell_list_nr_r17_l& slice_info_r17_s::slice_cell_list_nr_r17_c_::set_slice_excluded_cell_list_nr_r17()
{
  set(types::slice_excluded_cell_list_nr_r17);
  return c.get<slice_cell_list_nr_r17_l>();
}
void slice_info_r17_s::slice_cell_list_nr_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::slice_allowed_cell_list_nr_r17:
      j.start_array("sliceAllowedCellListNR-r17");
      for (const auto& e1 : c.get<slice_cell_list_nr_r17_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::slice_excluded_cell_list_nr_r17:
      j.start_array("sliceExcludedCellListNR-r17");
      for (const auto& e1 : c.get<slice_cell_list_nr_r17_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "slice_info_r17_s::slice_cell_list_nr_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE slice_info_r17_s::slice_cell_list_nr_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::slice_allowed_cell_list_nr_r17:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<slice_cell_list_nr_r17_l>(), 1, 16));
      break;
    case types::slice_excluded_cell_list_nr_r17:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<slice_cell_list_nr_r17_l>(), 1, 16));
      break;
    default:
      log_invalid_choice_id(type_, "slice_info_r17_s::slice_cell_list_nr_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE slice_info_r17_s::slice_cell_list_nr_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::slice_allowed_cell_list_nr_r17:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<slice_cell_list_nr_r17_l>(), bref, 1, 16));
      break;
    case types::slice_excluded_cell_list_nr_r17:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<slice_cell_list_nr_r17_l>(), bref, 1, 16));
      break;
    default:
      log_invalid_choice_id(type_, "slice_info_r17_s::slice_cell_list_nr_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* slice_info_r17_s::slice_cell_list_nr_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"sliceAllowedCellListNR-r17", "sliceExcludedCellListNR-r17"};
  return convert_enum_idx(names, 2, value, "slice_info_r17_s::slice_cell_list_nr_r17_c_::types");
}

// TA-Info-r17 ::= SEQUENCE
SRSASN_CODE ta_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ta_common_drift_r17_present, 1));
  HANDLE_CODE(bref.pack(ta_common_drift_variant_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, ta_common_r17, (uint32_t)0u, (uint32_t)66485757u));
  if (ta_common_drift_r17_present) {
    HANDLE_CODE(pack_integer(bref, ta_common_drift_r17, (int32_t)-257303, (int32_t)257303));
  }
  if (ta_common_drift_variant_r17_present) {
    HANDLE_CODE(pack_integer(bref, ta_common_drift_variant_r17, (uint16_t)0u, (uint16_t)28949u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ta_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ta_common_drift_r17_present, 1));
  HANDLE_CODE(bref.unpack(ta_common_drift_variant_r17_present, 1));

  HANDLE_CODE(unpack_integer(ta_common_r17, bref, (uint32_t)0u, (uint32_t)66485757u));
  if (ta_common_drift_r17_present) {
    HANDLE_CODE(unpack_integer(ta_common_drift_r17, bref, (int32_t)-257303, (int32_t)257303));
  }
  if (ta_common_drift_variant_r17_present) {
    HANDLE_CODE(unpack_integer(ta_common_drift_variant_r17, bref, (uint16_t)0u, (uint16_t)28949u));
  }

  return SRSASN_SUCCESS;
}
void ta_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("ta-Common-r17", ta_common_r17);
  if (ta_common_drift_r17_present) {
    j.write_int("ta-CommonDrift-r17", ta_common_drift_r17);
  }
  if (ta_common_drift_variant_r17_present) {
    j.write_int("ta-CommonDriftVariant-r17", ta_common_drift_variant_r17);
  }
  j.end_obj();
}

// BeamMeasConfigIdle-NR-r16 ::= SEQUENCE
SRSASN_CODE beam_meas_cfg_idle_nr_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(report_quant_rs_idxes_r16.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_nrof_rs_idxes_to_report_r16, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(bref.pack(include_beam_meass_r16, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE beam_meas_cfg_idle_nr_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(report_quant_rs_idxes_r16.unpack(bref));
  HANDLE_CODE(unpack_integer(max_nrof_rs_idxes_to_report_r16, bref, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(bref.unpack(include_beam_meass_r16, 1));

  return SRSASN_SUCCESS;
}
void beam_meas_cfg_idle_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("reportQuantityRS-Indexes-r16", report_quant_rs_idxes_r16.to_string());
  j.write_int("maxNrofRS-IndexesToReport-r16", max_nrof_rs_idxes_to_report_r16);
  j.write_bool("includeBeamMeasurements-r16", include_beam_meass_r16);
  j.end_obj();
}

const char* beam_meas_cfg_idle_nr_r16_s::report_quant_rs_idxes_r16_opts::to_string() const
{
  static const char* names[] = {"rsrp", "rsrq", "both"};
  return convert_enum_idx(names, 3, value, "beam_meas_cfg_idle_nr_r16_s::report_quant_rs_idxes_r16_e_");
}

// CAG-IdentityInfo-r16 ::= SEQUENCE
SRSASN_CODE cag_id_info_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(manual_ca_gsel_allowed_r16_present, 1));

  HANDLE_CODE(cag_id_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cag_id_info_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(manual_ca_gsel_allowed_r16_present, 1));

  HANDLE_CODE(cag_id_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void cag_id_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("cag-Identity-r16", cag_id_r16.to_string());
  if (manual_ca_gsel_allowed_r16_present) {
    j.write_str("manualCAGselectionAllowed-r16", "true");
  }
  j.end_obj();
}

const char* coreset_s::cce_reg_map_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"interleaved", "nonInterleaved"};
  return convert_enum_idx(names, 2, value, "coreset_s::cce_reg_map_type_c_::types");
}

// EUTRA-AllowedMeasBandwidth ::= ENUMERATED
const char* eutra_allowed_meas_bw_opts::to_string() const
{
  static const char* names[] = {"mbw6", "mbw15", "mbw25", "mbw50", "mbw75", "mbw100"};
  return convert_enum_idx(names, 6, value, "eutra_allowed_meas_bw_e");
}
uint8_t eutra_allowed_meas_bw_opts::to_number() const
{
  static const uint8_t numbers[] = {6, 15, 25, 50, 75, 100};
  return map_enum_number(numbers, 6, value, "eutra_allowed_meas_bw_e");
}

// InterFreqCAG-CellListPerPLMN-r16 ::= SEQUENCE
SRSASN_CODE inter_freq_cag_cell_list_per_plmn_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, plmn_id_idx_r16, (uint8_t)1u, (uint8_t)12u));
  HANDLE_CODE(pack_dyn_seq_of(bref, cag_cell_list_r16, 1, 16));

  return SRSASN_SUCCESS;
}
SRSASN_CODE inter_freq_cag_cell_list_per_plmn_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(plmn_id_idx_r16, bref, (uint8_t)1u, (uint8_t)12u));
  HANDLE_CODE(unpack_dyn_seq_of(cag_cell_list_r16, bref, 1, 16));

  return SRSASN_SUCCESS;
}
void inter_freq_cag_cell_list_per_plmn_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("plmn-IdentityIndex-r16", plmn_id_idx_r16);
  j.start_array("cag-CellList-r16");
  for (const auto& e1 : cag_cell_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// NTN-Config-r17 ::= SEQUENCE
SRSASN_CODE ntn_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(epoch_time_r17_present, 1));
  HANDLE_CODE(bref.pack(ntn_ul_sync_validity_dur_r17_present, 1));
  HANDLE_CODE(bref.pack(cell_specific_koffset_r17_present, 1));
  HANDLE_CODE(bref.pack(kmac_r17_present, 1));
  HANDLE_CODE(bref.pack(ta_info_r17_present, 1));
  HANDLE_CODE(bref.pack(ntn_polarization_dl_r17_present, 1));
  HANDLE_CODE(bref.pack(ntn_polarization_ul_r17_present, 1));
  HANDLE_CODE(bref.pack(ephemeris_info_r17_present, 1));
  HANDLE_CODE(bref.pack(ta_report_r17_present, 1));

  if (epoch_time_r17_present) {
    HANDLE_CODE(epoch_time_r17.pack(bref));
  }
  if (ntn_ul_sync_validity_dur_r17_present) {
    HANDLE_CODE(ntn_ul_sync_validity_dur_r17.pack(bref));
  }
  if (cell_specific_koffset_r17_present) {
    HANDLE_CODE(pack_integer(bref, cell_specific_koffset_r17, (uint16_t)1u, (uint16_t)1023u));
  }
  if (kmac_r17_present) {
    HANDLE_CODE(pack_integer(bref, kmac_r17, (uint16_t)1u, (uint16_t)512u));
  }
  if (ta_info_r17_present) {
    HANDLE_CODE(ta_info_r17.pack(bref));
  }
  if (ntn_polarization_dl_r17_present) {
    HANDLE_CODE(ntn_polarization_dl_r17.pack(bref));
  }
  if (ntn_polarization_ul_r17_present) {
    HANDLE_CODE(ntn_polarization_ul_r17.pack(bref));
  }
  if (ephemeris_info_r17_present) {
    HANDLE_CODE(ephemeris_info_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ntn_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(epoch_time_r17_present, 1));
  HANDLE_CODE(bref.unpack(ntn_ul_sync_validity_dur_r17_present, 1));
  HANDLE_CODE(bref.unpack(cell_specific_koffset_r17_present, 1));
  HANDLE_CODE(bref.unpack(kmac_r17_present, 1));
  HANDLE_CODE(bref.unpack(ta_info_r17_present, 1));
  HANDLE_CODE(bref.unpack(ntn_polarization_dl_r17_present, 1));
  HANDLE_CODE(bref.unpack(ntn_polarization_ul_r17_present, 1));
  HANDLE_CODE(bref.unpack(ephemeris_info_r17_present, 1));
  HANDLE_CODE(bref.unpack(ta_report_r17_present, 1));

  if (epoch_time_r17_present) {
    HANDLE_CODE(epoch_time_r17.unpack(bref));
  }
  if (ntn_ul_sync_validity_dur_r17_present) {
    HANDLE_CODE(ntn_ul_sync_validity_dur_r17.unpack(bref));
  }
  if (cell_specific_koffset_r17_present) {
    HANDLE_CODE(unpack_integer(cell_specific_koffset_r17, bref, (uint16_t)1u, (uint16_t)1023u));
  }
  if (kmac_r17_present) {
    HANDLE_CODE(unpack_integer(kmac_r17, bref, (uint16_t)1u, (uint16_t)512u));
  }
  if (ta_info_r17_present) {
    HANDLE_CODE(ta_info_r17.unpack(bref));
  }
  if (ntn_polarization_dl_r17_present) {
    HANDLE_CODE(ntn_polarization_dl_r17.unpack(bref));
  }
  if (ntn_polarization_ul_r17_present) {
    HANDLE_CODE(ntn_polarization_ul_r17.unpack(bref));
  }
  if (ephemeris_info_r17_present) {
    HANDLE_CODE(ephemeris_info_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ntn_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (epoch_time_r17_present) {
    j.write_fieldname("epochTime-r17");
    epoch_time_r17.to_json(j);
  }
  if (ntn_ul_sync_validity_dur_r17_present) {
    j.write_str("ntn-UlSyncValidityDuration-r17", ntn_ul_sync_validity_dur_r17.to_string());
  }
  if (cell_specific_koffset_r17_present) {
    j.write_int("cellSpecificKoffset-r17", cell_specific_koffset_r17);
  }
  if (kmac_r17_present) {
    j.write_int("kmac-r17", kmac_r17);
  }
  if (ta_info_r17_present) {
    j.write_fieldname("ta-Info-r17");
    ta_info_r17.to_json(j);
  }
  if (ntn_polarization_dl_r17_present) {
    j.write_str("ntn-PolarizationDL-r17", ntn_polarization_dl_r17.to_string());
  }
  if (ntn_polarization_ul_r17_present) {
    j.write_str("ntn-PolarizationUL-r17", ntn_polarization_ul_r17.to_string());
  }
  if (ephemeris_info_r17_present) {
    j.write_fieldname("ephemerisInfo-r17");
    ephemeris_info_r17.to_json(j);
  }
  if (ta_report_r17_present) {
    j.write_str("ta-Report-r17", "enabled");
  }
  j.end_obj();
}

const char* ntn_cfg_r17_s::ntn_ul_sync_validity_dur_r17_opts::to_string() const
{
  static const char* names[] = {"s5",
                                "s10",
                                "s15",
                                "s20",
                                "s25",
                                "s30",
                                "s35",
                                "s40",
                                "s45",
                                "s50",
                                "s55",
                                "s60",
                                "s120",
                                "s180",
                                "s240",
                                "s900"};
  return convert_enum_idx(names, 16, value, "ntn_cfg_r17_s::ntn_ul_sync_validity_dur_r17_e_");
}
uint16_t ntn_cfg_r17_s::ntn_ul_sync_validity_dur_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 120, 180, 240, 900};
  return map_enum_number(numbers, 16, value, "ntn_cfg_r17_s::ntn_ul_sync_validity_dur_r17_e_");
}

const char* ntn_cfg_r17_s::ntn_polarization_dl_r17_opts::to_string() const
{
  static const char* names[] = {"rhcp", "lhcp", "linear"};
  return convert_enum_idx(names, 3, value, "ntn_cfg_r17_s::ntn_polarization_dl_r17_e_");
}

const char* ntn_cfg_r17_s::ntn_polarization_ul_r17_opts::to_string() const
{
  static const char* names[] = {"rhcp", "lhcp", "linear"};
  return convert_enum_idx(names, 3, value, "ntn_cfg_r17_s::ntn_polarization_ul_r17_e_");
}

// PDSCH-ConfigPTM-r17 ::= SEQUENCE
SRSASN_CODE pdsch_cfg_ptm_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(data_scrambling_id_pdsch_r17_present, 1));
  HANDLE_CODE(bref.pack(dmrs_scrambling_id0_r17_present, 1));
  HANDLE_CODE(bref.pack(pdsch_aggregation_factor_r17_present, 1));

  if (data_scrambling_id_pdsch_r17_present) {
    HANDLE_CODE(pack_integer(bref, data_scrambling_id_pdsch_r17, (uint16_t)0u, (uint16_t)1023u));
  }
  if (dmrs_scrambling_id0_r17_present) {
    HANDLE_CODE(pack_integer(bref, dmrs_scrambling_id0_r17, (uint32_t)0u, (uint32_t)65535u));
  }
  if (pdsch_aggregation_factor_r17_present) {
    HANDLE_CODE(pdsch_aggregation_factor_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdsch_cfg_ptm_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(data_scrambling_id_pdsch_r17_present, 1));
  HANDLE_CODE(bref.unpack(dmrs_scrambling_id0_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_aggregation_factor_r17_present, 1));

  if (data_scrambling_id_pdsch_r17_present) {
    HANDLE_CODE(unpack_integer(data_scrambling_id_pdsch_r17, bref, (uint16_t)0u, (uint16_t)1023u));
  }
  if (dmrs_scrambling_id0_r17_present) {
    HANDLE_CODE(unpack_integer(dmrs_scrambling_id0_r17, bref, (uint32_t)0u, (uint32_t)65535u));
  }
  if (pdsch_aggregation_factor_r17_present) {
    HANDLE_CODE(pdsch_aggregation_factor_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void pdsch_cfg_ptm_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (data_scrambling_id_pdsch_r17_present) {
    j.write_int("dataScramblingIdentityPDSCH-r17", data_scrambling_id_pdsch_r17);
  }
  if (dmrs_scrambling_id0_r17_present) {
    j.write_int("dmrs-ScramblingID0-r17", dmrs_scrambling_id0_r17);
  }
  if (pdsch_aggregation_factor_r17_present) {
    j.write_str("pdsch-AggregationFactor-r17", pdsch_aggregation_factor_r17.to_string());
  }
  j.end_obj();
}

const char* pdsch_cfg_ptm_r17_s::pdsch_aggregation_factor_r17_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n8"};
  return convert_enum_idx(names, 3, value, "pdsch_cfg_ptm_r17_s::pdsch_aggregation_factor_r17_e_");
}
uint8_t pdsch_cfg_ptm_r17_s::pdsch_aggregation_factor_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8};
  return map_enum_number(numbers, 3, value, "pdsch_cfg_ptm_r17_s::pdsch_aggregation_factor_r17_e_");
}

// PosSIB-Type-r16 ::= SEQUENCE
SRSASN_CODE pos_sib_type_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(encrypted_r16_present, 1));
  HANDLE_CODE(bref.pack(gnss_id_r16_present, 1));
  HANDLE_CODE(bref.pack(sbas_id_r16_present, 1));
  HANDLE_CODE(bref.pack(area_scope_r16_present, 1));

  if (gnss_id_r16_present) {
    HANDLE_CODE(gnss_id_r16.pack(bref));
  }
  if (sbas_id_r16_present) {
    HANDLE_CODE(sbas_id_r16.pack(bref));
  }
  HANDLE_CODE(pos_sib_type_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pos_sib_type_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(encrypted_r16_present, 1));
  HANDLE_CODE(bref.unpack(gnss_id_r16_present, 1));
  HANDLE_CODE(bref.unpack(sbas_id_r16_present, 1));
  HANDLE_CODE(bref.unpack(area_scope_r16_present, 1));

  if (gnss_id_r16_present) {
    HANDLE_CODE(gnss_id_r16.unpack(bref));
  }
  if (sbas_id_r16_present) {
    HANDLE_CODE(sbas_id_r16.unpack(bref));
  }
  HANDLE_CODE(pos_sib_type_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void pos_sib_type_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (encrypted_r16_present) {
    j.write_str("encrypted-r16", "true");
  }
  if (gnss_id_r16_present) {
    j.write_fieldname("gnss-id-r16");
    gnss_id_r16.to_json(j);
  }
  if (sbas_id_r16_present) {
    j.write_fieldname("sbas-id-r16");
    sbas_id_r16.to_json(j);
  }
  j.write_str("posSibType-r16", pos_sib_type_r16.to_string());
  if (area_scope_r16_present) {
    j.write_str("areaScope-r16", "true");
  }
  j.end_obj();
}

const char* pos_sib_type_r16_s::pos_sib_type_r16_opts::to_string() const
{
  static const char* names[] = {
      "posSibType1-1",  "posSibType1-2",  "posSibType1-3",  "posSibType1-4",  "posSibType1-5",  "posSibType1-6",
      "posSibType1-7",  "posSibType1-8",  "posSibType2-1",  "posSibType2-2",  "posSibType2-3",  "posSibType2-4",
      "posSibType2-5",  "posSibType2-6",  "posSibType2-7",  "posSibType2-8",  "posSibType2-9",  "posSibType2-10",
      "posSibType2-11", "posSibType2-12", "posSibType2-13", "posSibType2-14", "posSibType2-15", "posSibType2-16",
      "posSibType2-17", "posSibType2-18", "posSibType2-19", "posSibType2-20", "posSibType2-21", "posSibType2-22",
      "posSibType2-23", "posSibType3-1",  "posSibType4-1",  "posSibType5-1",  "posSibType6-1",  "posSibType6-2",
      "posSibType6-3"};
  return convert_enum_idx(names, 37, value, "pos_sib_type_r16_s::pos_sib_type_r16_e_");
}

const char* rate_match_pattern_s::pattern_type_c_::bitmaps_s_::symbols_in_res_block_c_::types_opts::to_string() const
{
  static const char* names[] = {"oneSlot", "twoSlots"};
  return convert_enum_idx(
      names, 2, value, "rate_match_pattern_s::pattern_type_c_::bitmaps_s_::symbols_in_res_block_c_::types");
}
uint8_t rate_match_pattern_s::pattern_type_c_::bitmaps_s_::symbols_in_res_block_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers, 2, value, "rate_match_pattern_s::pattern_type_c_::bitmaps_s_::symbols_in_res_block_c_::types");
}

const char* rate_match_pattern_s::pattern_type_c_::bitmaps_s_::periodicity_and_pattern_c_::types_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n5", "n8", "n10", "n20", "n40"};
  return convert_enum_idx(
      names, 7, value, "rate_match_pattern_s::pattern_type_c_::bitmaps_s_::periodicity_and_pattern_c_::types");
}
uint8_t rate_match_pattern_s::pattern_type_c_::bitmaps_s_::periodicity_and_pattern_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 5, 8, 10, 20, 40};
  return map_enum_number(
      numbers, 7, value, "rate_match_pattern_s::pattern_type_c_::bitmaps_s_::periodicity_and_pattern_c_::types");
}

const char* rate_match_pattern_s::pattern_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"bitmaps", "controlResourceSet"};
  return convert_enum_idx(names, 2, value, "rate_match_pattern_s::pattern_type_c_::types");
}

// SI-SchedulingInfo-v1740 ::= SEQUENCE
SRSASN_CODE si_sched_info_v1740_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(si_request_cfg_red_cap_r17_present, 1));

  if (si_request_cfg_red_cap_r17_present) {
    HANDLE_CODE(si_request_cfg_red_cap_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE si_sched_info_v1740_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(si_request_cfg_red_cap_r17_present, 1));

  if (si_request_cfg_red_cap_r17_present) {
    HANDLE_CODE(si_request_cfg_red_cap_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void si_sched_info_v1740_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (si_request_cfg_red_cap_r17_present) {
    j.write_fieldname("si-RequestConfigRedCap-r17");
    si_request_cfg_red_cap_r17.to_json(j);
  }
  j.end_obj();
}

// SS-RSSI-Measurement ::= SEQUENCE
SRSASN_CODE ss_rssi_meas_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(meas_slots.pack(bref));
  HANDLE_CODE(pack_integer(bref, end_symbol, (uint8_t)0u, (uint8_t)3u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ss_rssi_meas_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(meas_slots.unpack(bref));
  HANDLE_CODE(unpack_integer(end_symbol, bref, (uint8_t)0u, (uint8_t)3u));

  return SRSASN_SUCCESS;
}
void ss_rssi_meas_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("measurementSlots", meas_slots.to_string());
  j.write_int("endSymbol", end_symbol);
  j.end_obj();
}

// SSB-MTC ::= SEQUENCE
SRSASN_CODE ssb_mtc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(periodicity_and_offset.pack(bref));
  HANDLE_CODE(dur.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ssb_mtc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(periodicity_and_offset.unpack(bref));
  HANDLE_CODE(dur.unpack(bref));

  return SRSASN_SUCCESS;
}
void ssb_mtc_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("periodicityAndOffset");
  periodicity_and_offset.to_json(j);
  j.write_str("duration", dur.to_string());
  j.end_obj();
}

void ssb_mtc_s::periodicity_and_offset_c_::destroy_() {}
void ssb_mtc_s::periodicity_and_offset_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
ssb_mtc_s::periodicity_and_offset_c_::periodicity_and_offset_c_(const ssb_mtc_s::periodicity_and_offset_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sf5:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sf10:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sf20:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sf40:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sf80:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sf160:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ssb_mtc_s::periodicity_and_offset_c_");
  }
}
ssb_mtc_s::periodicity_and_offset_c_&
ssb_mtc_s::periodicity_and_offset_c_::operator=(const ssb_mtc_s::periodicity_and_offset_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sf5:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sf10:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sf20:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sf40:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sf80:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sf160:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ssb_mtc_s::periodicity_and_offset_c_");
  }

  return *this;
}
uint8_t& ssb_mtc_s::periodicity_and_offset_c_::set_sf5()
{
  set(types::sf5);
  return c.get<uint8_t>();
}
uint8_t& ssb_mtc_s::periodicity_and_offset_c_::set_sf10()
{
  set(types::sf10);
  return c.get<uint8_t>();
}
uint8_t& ssb_mtc_s::periodicity_and_offset_c_::set_sf20()
{
  set(types::sf20);
  return c.get<uint8_t>();
}
uint8_t& ssb_mtc_s::periodicity_and_offset_c_::set_sf40()
{
  set(types::sf40);
  return c.get<uint8_t>();
}
uint8_t& ssb_mtc_s::periodicity_and_offset_c_::set_sf80()
{
  set(types::sf80);
  return c.get<uint8_t>();
}
uint8_t& ssb_mtc_s::periodicity_and_offset_c_::set_sf160()
{
  set(types::sf160);
  return c.get<uint8_t>();
}
void ssb_mtc_s::periodicity_and_offset_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sf5:
      j.write_int("sf5", c.get<uint8_t>());
      break;
    case types::sf10:
      j.write_int("sf10", c.get<uint8_t>());
      break;
    case types::sf20:
      j.write_int("sf20", c.get<uint8_t>());
      break;
    case types::sf40:
      j.write_int("sf40", c.get<uint8_t>());
      break;
    case types::sf80:
      j.write_int("sf80", c.get<uint8_t>());
      break;
    case types::sf160:
      j.write_int("sf160", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "ssb_mtc_s::periodicity_and_offset_c_");
  }
  j.end_obj();
}
SRSASN_CODE ssb_mtc_s::periodicity_and_offset_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sf5:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)4u));
      break;
    case types::sf10:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)9u));
      break;
    case types::sf20:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)19u));
      break;
    case types::sf40:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)39u));
      break;
    case types::sf80:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u));
      break;
    case types::sf160:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)159u));
      break;
    default:
      log_invalid_choice_id(type_, "ssb_mtc_s::periodicity_and_offset_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ssb_mtc_s::periodicity_and_offset_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sf5:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)4u));
      break;
    case types::sf10:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)9u));
      break;
    case types::sf20:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)19u));
      break;
    case types::sf40:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)39u));
      break;
    case types::sf80:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u));
      break;
    case types::sf160:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)159u));
      break;
    default:
      log_invalid_choice_id(type_, "ssb_mtc_s::periodicity_and_offset_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ssb_mtc_s::periodicity_and_offset_c_::types_opts::to_string() const
{
  static const char* names[] = {"sf5", "sf10", "sf20", "sf40", "sf80", "sf160"};
  return convert_enum_idx(names, 6, value, "ssb_mtc_s::periodicity_and_offset_c_::types");
}
uint8_t ssb_mtc_s::periodicity_and_offset_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 10, 20, 40, 80, 160};
  return map_enum_number(numbers, 6, value, "ssb_mtc_s::periodicity_and_offset_c_::types");
}

const char* ssb_mtc_s::dur_opts::to_string() const
{
  static const char* names[] = {"sf1", "sf2", "sf3", "sf4", "sf5"};
  return convert_enum_idx(names, 5, value, "ssb_mtc_s::dur_e_");
}
uint8_t ssb_mtc_s::dur_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5};
  return map_enum_number(numbers, 5, value, "ssb_mtc_s::dur_e_");
}

// SSB-MTC2-LP-r16 ::= SEQUENCE
SRSASN_CODE ssb_mtc2_lp_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pci_list.size() > 0, 1));

  if (pci_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, pci_list, 1, 64, integer_packer<uint16_t>(0, 1007)));
  }
  HANDLE_CODE(periodicity.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ssb_mtc2_lp_r16_s::unpack(cbit_ref& bref)
{
  bool pci_list_present;
  HANDLE_CODE(bref.unpack(pci_list_present, 1));

  if (pci_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(pci_list, bref, 1, 64, integer_packer<uint16_t>(0, 1007)));
  }
  HANDLE_CODE(periodicity.unpack(bref));

  return SRSASN_SUCCESS;
}
void ssb_mtc2_lp_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pci_list.size() > 0) {
    j.start_array("pci-List");
    for (const auto& e1 : pci_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.write_str("periodicity", periodicity.to_string());
  j.end_obj();
}

const char* ssb_mtc2_lp_r16_s::periodicity_opts::to_string() const
{
  static const char* names[] = {"sf10", "sf20", "sf40", "sf80", "sf160", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "ssb_mtc2_lp_r16_s::periodicity_e_");
}
uint8_t ssb_mtc2_lp_r16_s::periodicity_opts::to_number() const
{
  static const uint8_t numbers[] = {10, 20, 40, 80, 160};
  return map_enum_number(numbers, 5, value, "ssb_mtc2_lp_r16_s::periodicity_e_");
}

// SSB-ToMeasure ::= CHOICE
void ssb_to_measure_c::destroy_()
{
  switch (type_) {
    case types::short_bitmap:
      c.destroy<fixed_bitstring<4>>();
      break;
    case types::medium_bitmap:
      c.destroy<fixed_bitstring<8>>();
      break;
    case types::long_bitmap:
      c.destroy<fixed_bitstring<64>>();
      break;
    default:
      break;
  }
}
void ssb_to_measure_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::short_bitmap:
      c.init<fixed_bitstring<4>>();
      break;
    case types::medium_bitmap:
      c.init<fixed_bitstring<8>>();
      break;
    case types::long_bitmap:
      c.init<fixed_bitstring<64>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ssb_to_measure_c");
  }
}
ssb_to_measure_c::ssb_to_measure_c(const ssb_to_measure_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::short_bitmap:
      c.init(other.c.get<fixed_bitstring<4>>());
      break;
    case types::medium_bitmap:
      c.init(other.c.get<fixed_bitstring<8>>());
      break;
    case types::long_bitmap:
      c.init(other.c.get<fixed_bitstring<64>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ssb_to_measure_c");
  }
}
ssb_to_measure_c& ssb_to_measure_c::operator=(const ssb_to_measure_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::short_bitmap:
      c.set(other.c.get<fixed_bitstring<4>>());
      break;
    case types::medium_bitmap:
      c.set(other.c.get<fixed_bitstring<8>>());
      break;
    case types::long_bitmap:
      c.set(other.c.get<fixed_bitstring<64>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ssb_to_measure_c");
  }

  return *this;
}
fixed_bitstring<4>& ssb_to_measure_c::set_short_bitmap()
{
  set(types::short_bitmap);
  return c.get<fixed_bitstring<4>>();
}
fixed_bitstring<8>& ssb_to_measure_c::set_medium_bitmap()
{
  set(types::medium_bitmap);
  return c.get<fixed_bitstring<8>>();
}
fixed_bitstring<64>& ssb_to_measure_c::set_long_bitmap()
{
  set(types::long_bitmap);
  return c.get<fixed_bitstring<64>>();
}
void ssb_to_measure_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::short_bitmap:
      j.write_str("shortBitmap", c.get<fixed_bitstring<4>>().to_string());
      break;
    case types::medium_bitmap:
      j.write_str("mediumBitmap", c.get<fixed_bitstring<8>>().to_string());
      break;
    case types::long_bitmap:
      j.write_str("longBitmap", c.get<fixed_bitstring<64>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "ssb_to_measure_c");
  }
  j.end_obj();
}
SRSASN_CODE ssb_to_measure_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::short_bitmap:
      HANDLE_CODE(c.get<fixed_bitstring<4>>().pack(bref));
      break;
    case types::medium_bitmap:
      HANDLE_CODE(c.get<fixed_bitstring<8>>().pack(bref));
      break;
    case types::long_bitmap:
      HANDLE_CODE(c.get<fixed_bitstring<64>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ssb_to_measure_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ssb_to_measure_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::short_bitmap:
      HANDLE_CODE(c.get<fixed_bitstring<4>>().unpack(bref));
      break;
    case types::medium_bitmap:
      HANDLE_CODE(c.get<fixed_bitstring<8>>().unpack(bref));
      break;
    case types::long_bitmap:
      HANDLE_CODE(c.get<fixed_bitstring<64>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ssb_to_measure_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ssb_to_measure_c::types_opts::to_string() const
{
  static const char* names[] = {"shortBitmap", "mediumBitmap", "longBitmap"};
  return convert_enum_idx(names, 3, value, "ssb_to_measure_c::types");
}

// SchedulingInfo2-r17 ::= SEQUENCE
SRSASN_CODE sched_info2_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(si_broadcast_status_r17.pack(bref));
  HANDLE_CODE(pack_integer(bref, si_win_position_r17, (uint16_t)1u, (uint16_t)256u));
  HANDLE_CODE(si_periodicity_r17.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, sib_map_info_r17, 1, 32));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sched_info2_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(si_broadcast_status_r17.unpack(bref));
  HANDLE_CODE(unpack_integer(si_win_position_r17, bref, (uint16_t)1u, (uint16_t)256u));
  HANDLE_CODE(si_periodicity_r17.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(sib_map_info_r17, bref, 1, 32));

  return SRSASN_SUCCESS;
}
void sched_info2_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("si-BroadcastStatus-r17", si_broadcast_status_r17.to_string());
  j.write_int("si-WindowPosition-r17", si_win_position_r17);
  j.write_str("si-Periodicity-r17", si_periodicity_r17.to_string());
  j.start_array("sib-MappingInfo-r17");
  for (const auto& e1 : sib_map_info_r17) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

const char* sched_info2_r17_s::si_broadcast_status_r17_opts::to_string() const
{
  static const char* names[] = {"broadcasting", "notBroadcasting"};
  return convert_enum_idx(names, 2, value, "sched_info2_r17_s::si_broadcast_status_r17_e_");
}

const char* sched_info2_r17_s::si_periodicity_r17_opts::to_string() const
{
  static const char* names[] = {"rf8", "rf16", "rf32", "rf64", "rf128", "rf256", "rf512"};
  return convert_enum_idx(names, 7, value, "sched_info2_r17_s::si_periodicity_r17_e_");
}
uint16_t sched_info2_r17_s::si_periodicity_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {8, 16, 32, 64, 128, 256, 512};
  return map_enum_number(numbers, 7, value, "sched_info2_r17_s::si_periodicity_r17_e_");
}

const char* search_space_s::monitoring_slot_periodicity_and_offset_c_::types_opts::to_string() const
{
  static const char* names[] = {"sl1",
                                "sl2",
                                "sl4",
                                "sl5",
                                "sl8",
                                "sl10",
                                "sl16",
                                "sl20",
                                "sl40",
                                "sl80",
                                "sl160",
                                "sl320",
                                "sl640",
                                "sl1280",
                                "sl2560"};
  return convert_enum_idx(names, 15, value, "search_space_s::monitoring_slot_periodicity_and_offset_c_::types");
}
uint16_t search_space_s::monitoring_slot_periodicity_and_offset_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {1, 2, 4, 5, 8, 10, 16, 20, 40, 80, 160, 320, 640, 1280, 2560};
  return map_enum_number(numbers, 15, value, "search_space_s::monitoring_slot_periodicity_and_offset_c_::types");
}

const char* search_space_s::search_space_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"common", "ue-Specific"};
  return convert_enum_idx(names, 2, value, "search_space_s::search_space_type_c_::types");
}

const char* search_space_ext_v1700_s::monitoring_slot_periodicity_and_offset_v1710_c_::types_opts::to_string() const
{
  static const char* names[] = {"sl32", "sl64", "sl128", "sl5120", "sl10240", "sl20480"};
  return convert_enum_idx(
      names, 6, value, "search_space_ext_v1700_s::monitoring_slot_periodicity_and_offset_v1710_c_::types");
}
uint16_t search_space_ext_v1700_s::monitoring_slot_periodicity_and_offset_v1710_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {32, 64, 128, 5120, 10240, 20480};
  return map_enum_number(
      numbers, 6, value, "search_space_ext_v1700_s::monitoring_slot_periodicity_and_offset_v1710_c_::types");
}

const char* search_space_ext_v1700_s::monitoring_slots_within_slot_group_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"slotGroupLength4-r17", "slotGroupLength8-r17"};
  return convert_enum_idx(
      names, 2, value, "search_space_ext_v1700_s::monitoring_slots_within_slot_group_r17_c_::types");
}
uint8_t search_space_ext_v1700_s::monitoring_slots_within_slot_group_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8};
  return map_enum_number(
      numbers, 2, value, "search_space_ext_v1700_s::monitoring_slots_within_slot_group_r17_c_::types");
}

// SpeedStateScaleFactors ::= SEQUENCE
SRSASN_CODE speed_state_scale_factors_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(sf_medium.pack(bref));
  HANDLE_CODE(sf_high.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE speed_state_scale_factors_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(sf_medium.unpack(bref));
  HANDLE_CODE(sf_high.unpack(bref));

  return SRSASN_SUCCESS;
}
void speed_state_scale_factors_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sf-Medium", sf_medium.to_string());
  j.write_str("sf-High", sf_high.to_string());
  j.end_obj();
}

const char* speed_state_scale_factors_s::sf_medium_opts::to_string() const
{
  static const char* names[] = {"oDot25", "oDot5", "oDot75", "lDot0"};
  return convert_enum_idx(names, 4, value, "speed_state_scale_factors_s::sf_medium_e_");
}
float speed_state_scale_factors_s::sf_medium_opts::to_number() const
{
  static const float numbers[] = {0.25, 0.5, 0.75, 1.0};
  return map_enum_number(numbers, 4, value, "speed_state_scale_factors_s::sf_medium_e_");
}
const char* speed_state_scale_factors_s::sf_medium_opts::to_number_string() const
{
  static const char* number_strs[] = {"0.25", "0.5", "0.75", "1.0"};
  return convert_enum_idx(number_strs, 4, value, "speed_state_scale_factors_s::sf_medium_e_");
}

const char* speed_state_scale_factors_s::sf_high_opts::to_string() const
{
  static const char* names[] = {"oDot25", "oDot5", "oDot75", "lDot0"};
  return convert_enum_idx(names, 4, value, "speed_state_scale_factors_s::sf_high_e_");
}
float speed_state_scale_factors_s::sf_high_opts::to_number() const
{
  static const float numbers[] = {0.25, 0.5, 0.75, 1.0};
  return map_enum_number(numbers, 4, value, "speed_state_scale_factors_s::sf_high_e_");
}
const char* speed_state_scale_factors_s::sf_high_opts::to_number_string() const
{
  static const char* number_strs[] = {"0.25", "0.5", "0.75", "1.0"};
  return convert_enum_idx(number_strs, 4, value, "speed_state_scale_factors_s::sf_high_e_");
}

// ThresholdNR ::= SEQUENCE
SRSASN_CODE thres_nr_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(thres_rsrp_present, 1));
  HANDLE_CODE(bref.pack(thres_rsrq_present, 1));
  HANDLE_CODE(bref.pack(thres_sinr_present, 1));

  if (thres_rsrp_present) {
    HANDLE_CODE(pack_integer(bref, thres_rsrp, (uint8_t)0u, (uint8_t)127u));
  }
  if (thres_rsrq_present) {
    HANDLE_CODE(pack_integer(bref, thres_rsrq, (uint8_t)0u, (uint8_t)127u));
  }
  if (thres_sinr_present) {
    HANDLE_CODE(pack_integer(bref, thres_sinr, (uint8_t)0u, (uint8_t)127u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE thres_nr_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(thres_rsrp_present, 1));
  HANDLE_CODE(bref.unpack(thres_rsrq_present, 1));
  HANDLE_CODE(bref.unpack(thres_sinr_present, 1));

  if (thres_rsrp_present) {
    HANDLE_CODE(unpack_integer(thres_rsrp, bref, (uint8_t)0u, (uint8_t)127u));
  }
  if (thres_rsrq_present) {
    HANDLE_CODE(unpack_integer(thres_rsrq, bref, (uint8_t)0u, (uint8_t)127u));
  }
  if (thres_sinr_present) {
    HANDLE_CODE(unpack_integer(thres_sinr, bref, (uint8_t)0u, (uint8_t)127u));
  }

  return SRSASN_SUCCESS;
}
void thres_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (thres_rsrp_present) {
    j.write_int("thresholdRSRP", thres_rsrp);
  }
  if (thres_rsrq_present) {
    j.write_int("thresholdRSRQ", thres_rsrq);
  }
  if (thres_sinr_present) {
    j.write_int("thresholdSINR", thres_sinr);
  }
  j.end_obj();
}

// UAC-BarringInfoSet-v1700 ::= SEQUENCE
SRSASN_CODE uac_barr_info_set_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(uac_barr_factor_for_ai3_r17_present, 1));

  if (uac_barr_factor_for_ai3_r17_present) {
    HANDLE_CODE(uac_barr_factor_for_ai3_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE uac_barr_info_set_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(uac_barr_factor_for_ai3_r17_present, 1));

  if (uac_barr_factor_for_ai3_r17_present) {
    HANDLE_CODE(uac_barr_factor_for_ai3_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void uac_barr_info_set_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (uac_barr_factor_for_ai3_r17_present) {
    j.write_str("uac-BarringFactorForAI3-r17", uac_barr_factor_for_ai3_r17.to_string());
  }
  j.end_obj();
}

const char* uac_barr_info_set_v1700_s::uac_barr_factor_for_ai3_r17_opts::to_string() const
{
  static const char* names[] = {
      "p00", "p05", "p10", "p15", "p20", "p25", "p30", "p40", "p50", "p60", "p70", "p75", "p80", "p85", "p90", "p95"};
  return convert_enum_idx(names, 16, value, "uac_barr_info_set_v1700_s::uac_barr_factor_for_ai3_r17_e_");
}
float uac_barr_info_set_v1700_s::uac_barr_factor_for_ai3_r17_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 6.0, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5};
  return map_enum_number(numbers, 16, value, "uac_barr_info_set_v1700_s::uac_barr_factor_for_ai3_r17_e_");
}
const char* uac_barr_info_set_v1700_s::uac_barr_factor_for_ai3_r17_opts::to_number_string() const
{
  static const char* number_strs[] = {
      "0.0", "0.5", "1.0", "1.5", "2.0", "2.5", "3.0", "4.0", "5.0", "6.0", "7.0", "7.5", "8.0", "8.5", "9.0", "9.5"};
  return convert_enum_idx(number_strs, 16, value, "uac_barr_info_set_v1700_s::uac_barr_factor_for_ai3_r17_e_");
}

// CarrierFreqEUTRA ::= SEQUENCE
SRSASN_CODE carrier_freq_eutra_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(eutra_multi_band_info_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(eutra_freq_neigh_cell_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(eutra_excluded_cell_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(cell_resel_prio_present, 1));
  HANDLE_CODE(bref.pack(cell_resel_sub_prio_present, 1));
  HANDLE_CODE(bref.pack(thresh_x_q_present, 1));

  HANDLE_CODE(pack_integer(bref, carrier_freq, (uint32_t)0u, (uint32_t)262143u));
  if (eutra_multi_band_info_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, eutra_multi_band_info_list, 1, 8));
  }
  if (eutra_freq_neigh_cell_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, eutra_freq_neigh_cell_list, 1, 8));
  }
  if (eutra_excluded_cell_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, eutra_excluded_cell_list, 1, 16));
  }
  HANDLE_CODE(allowed_meas_bw.pack(bref));
  HANDLE_CODE(bref.pack(presence_ant_port1, 1));
  if (cell_resel_prio_present) {
    HANDLE_CODE(pack_integer(bref, cell_resel_prio, (uint8_t)0u, (uint8_t)7u));
  }
  if (cell_resel_sub_prio_present) {
    HANDLE_CODE(cell_resel_sub_prio.pack(bref));
  }
  HANDLE_CODE(pack_integer(bref, thresh_x_high, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(pack_integer(bref, thresh_x_low, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(pack_integer(bref, q_rx_lev_min, (int8_t)-70, (int8_t)-22));
  HANDLE_CODE(pack_integer(bref, q_qual_min, (int8_t)-34, (int8_t)-3));
  HANDLE_CODE(pack_integer(bref, p_max_eutra, (int8_t)-30, (int8_t)33));
  if (thresh_x_q_present) {
    HANDLE_CODE(pack_integer(bref, thresh_x_q.thresh_x_high_q, (uint8_t)0u, (uint8_t)31u));
    HANDLE_CODE(pack_integer(bref, thresh_x_q.thresh_x_low_q, (uint8_t)0u, (uint8_t)31u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE carrier_freq_eutra_s::unpack(cbit_ref& bref)
{
  bool eutra_multi_band_info_list_present;
  HANDLE_CODE(bref.unpack(eutra_multi_band_info_list_present, 1));
  bool eutra_freq_neigh_cell_list_present;
  HANDLE_CODE(bref.unpack(eutra_freq_neigh_cell_list_present, 1));
  bool eutra_excluded_cell_list_present;
  HANDLE_CODE(bref.unpack(eutra_excluded_cell_list_present, 1));
  HANDLE_CODE(bref.unpack(cell_resel_prio_present, 1));
  HANDLE_CODE(bref.unpack(cell_resel_sub_prio_present, 1));
  HANDLE_CODE(bref.unpack(thresh_x_q_present, 1));

  HANDLE_CODE(unpack_integer(carrier_freq, bref, (uint32_t)0u, (uint32_t)262143u));
  if (eutra_multi_band_info_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(eutra_multi_band_info_list, bref, 1, 8));
  }
  if (eutra_freq_neigh_cell_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(eutra_freq_neigh_cell_list, bref, 1, 8));
  }
  if (eutra_excluded_cell_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(eutra_excluded_cell_list, bref, 1, 16));
  }
  HANDLE_CODE(allowed_meas_bw.unpack(bref));
  HANDLE_CODE(bref.unpack(presence_ant_port1, 1));
  if (cell_resel_prio_present) {
    HANDLE_CODE(unpack_integer(cell_resel_prio, bref, (uint8_t)0u, (uint8_t)7u));
  }
  if (cell_resel_sub_prio_present) {
    HANDLE_CODE(cell_resel_sub_prio.unpack(bref));
  }
  HANDLE_CODE(unpack_integer(thresh_x_high, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(unpack_integer(thresh_x_low, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(unpack_integer(q_rx_lev_min, bref, (int8_t)-70, (int8_t)-22));
  HANDLE_CODE(unpack_integer(q_qual_min, bref, (int8_t)-34, (int8_t)-3));
  HANDLE_CODE(unpack_integer(p_max_eutra, bref, (int8_t)-30, (int8_t)33));
  if (thresh_x_q_present) {
    HANDLE_CODE(unpack_integer(thresh_x_q.thresh_x_high_q, bref, (uint8_t)0u, (uint8_t)31u));
    HANDLE_CODE(unpack_integer(thresh_x_q.thresh_x_low_q, bref, (uint8_t)0u, (uint8_t)31u));
  }

  return SRSASN_SUCCESS;
}
void carrier_freq_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq", carrier_freq);
  if (eutra_multi_band_info_list.size() > 0) {
    j.start_array("eutra-multiBandInfoList");
    for (const auto& e1 : eutra_multi_band_info_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (eutra_freq_neigh_cell_list.size() > 0) {
    j.start_array("eutra-FreqNeighCellList");
    for (const auto& e1 : eutra_freq_neigh_cell_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (eutra_excluded_cell_list.size() > 0) {
    j.start_array("eutra-ExcludedCellList");
    for (const auto& e1 : eutra_excluded_cell_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_str("allowedMeasBandwidth", allowed_meas_bw.to_string());
  j.write_bool("presenceAntennaPort1", presence_ant_port1);
  if (cell_resel_prio_present) {
    j.write_int("cellReselectionPriority", cell_resel_prio);
  }
  if (cell_resel_sub_prio_present) {
    j.write_str("cellReselectionSubPriority", cell_resel_sub_prio.to_string());
  }
  j.write_int("threshX-High", thresh_x_high);
  j.write_int("threshX-Low", thresh_x_low);
  j.write_int("q-RxLevMin", q_rx_lev_min);
  j.write_int("q-QualMin", q_qual_min);
  j.write_int("p-MaxEUTRA", p_max_eutra);
  if (thresh_x_q_present) {
    j.write_fieldname("threshX-Q");
    j.start_obj();
    j.write_int("threshX-HighQ", thresh_x_q.thresh_x_high_q);
    j.write_int("threshX-LowQ", thresh_x_q.thresh_x_low_q);
    j.end_obj();
  }
  j.end_obj();
}

// CarrierFreqEUTRA-v1610 ::= SEQUENCE
SRSASN_CODE carrier_freq_eutra_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(high_speed_eutra_carrier_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE carrier_freq_eutra_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(high_speed_eutra_carrier_r16_present, 1));

  return SRSASN_SUCCESS;
}
void carrier_freq_eutra_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (high_speed_eutra_carrier_r16_present) {
    j.write_str("highSpeedEUTRACarrier-r16", "true");
  }
  j.end_obj();
}

// CarrierFreqEUTRA-v1700 ::= SEQUENCE
SRSASN_CODE carrier_freq_eutra_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(eutra_freq_neigh_hsdn_cell_list_r17.size() > 0, 1));

  if (eutra_freq_neigh_hsdn_cell_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, eutra_freq_neigh_hsdn_cell_list_r17, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE carrier_freq_eutra_v1700_s::unpack(cbit_ref& bref)
{
  bool eutra_freq_neigh_hsdn_cell_list_r17_present;
  HANDLE_CODE(bref.unpack(eutra_freq_neigh_hsdn_cell_list_r17_present, 1));

  if (eutra_freq_neigh_hsdn_cell_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(eutra_freq_neigh_hsdn_cell_list_r17, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void carrier_freq_eutra_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (eutra_freq_neigh_hsdn_cell_list_r17.size() > 0) {
    j.start_array("eutra-FreqNeighHSDN-CellList-r17");
    for (const auto& e1 : eutra_freq_neigh_hsdn_cell_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// FreqPrioritySlicing-r17 ::= SEQUENCE
SRSASN_CODE freq_prio_slicing_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(slice_info_list_r17.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, dl_implicit_carrier_freq_r17, (uint8_t)0u, (uint8_t)8u));
  if (slice_info_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, slice_info_list_r17, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE freq_prio_slicing_r17_s::unpack(cbit_ref& bref)
{
  bool slice_info_list_r17_present;
  HANDLE_CODE(bref.unpack(slice_info_list_r17_present, 1));

  HANDLE_CODE(unpack_integer(dl_implicit_carrier_freq_r17, bref, (uint8_t)0u, (uint8_t)8u));
  if (slice_info_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(slice_info_list_r17, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void freq_prio_slicing_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dl-ImplicitCarrierFreq-r17", dl_implicit_carrier_freq_r17);
  if (slice_info_list_r17.size() > 0) {
    j.start_array("sliceInfoList-r17");
    for (const auto& e1 : slice_info_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// HRNN-r16 ::= SEQUENCE
SRSASN_CODE hrnn_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(hrnn_r16.size() > 0, 1));

  if (hrnn_r16.size() > 0) {
    HANDLE_CODE(hrnn_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE hrnn_r16_s::unpack(cbit_ref& bref)
{
  bool hrnn_r16_present;
  HANDLE_CODE(bref.unpack(hrnn_r16_present, 1));

  if (hrnn_r16_present) {
    HANDLE_CODE(hrnn_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void hrnn_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (hrnn_r16.size() > 0) {
    j.write_str("hrnn-r16", hrnn_r16.to_string());
  }
  j.end_obj();
}

// InterFreqCarrierFreqInfo ::= SEQUENCE
SRSASN_CODE inter_freq_carrier_freq_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(freq_band_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(freq_band_list_sul.size() > 0, 1));
  HANDLE_CODE(bref.pack(nrof_ss_blocks_to_average_present, 1));
  HANDLE_CODE(bref.pack(abs_thresh_ss_blocks_consolidation_present, 1));
  HANDLE_CODE(bref.pack(smtc_present, 1));
  HANDLE_CODE(bref.pack(ssb_to_measure_present, 1));
  HANDLE_CODE(bref.pack(ss_rssi_meas_present, 1));
  HANDLE_CODE(bref.pack(q_rx_lev_min_sul_present, 1));
  HANDLE_CODE(bref.pack(q_qual_min_present, 1));
  HANDLE_CODE(bref.pack(p_max_present, 1));
  HANDLE_CODE(bref.pack(t_resel_nr_sf_present, 1));
  HANDLE_CODE(bref.pack(thresh_x_q_present, 1));
  HANDLE_CODE(bref.pack(cell_resel_prio_present, 1));
  HANDLE_CODE(bref.pack(cell_resel_sub_prio_present, 1));
  HANDLE_CODE(bref.pack(q_offset_freq_present, 1));
  HANDLE_CODE(bref.pack(inter_freq_neigh_cell_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(inter_freq_excluded_cell_list.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, dl_carrier_freq, (uint32_t)0u, (uint32_t)3279165u));
  if (freq_band_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, freq_band_list, 1, 8));
  }
  if (freq_band_list_sul.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, freq_band_list_sul, 1, 8));
  }
  if (nrof_ss_blocks_to_average_present) {
    HANDLE_CODE(pack_integer(bref, nrof_ss_blocks_to_average, (uint8_t)2u, (uint8_t)16u));
  }
  if (abs_thresh_ss_blocks_consolidation_present) {
    HANDLE_CODE(abs_thresh_ss_blocks_consolidation.pack(bref));
  }
  if (smtc_present) {
    HANDLE_CODE(smtc.pack(bref));
  }
  HANDLE_CODE(ssb_subcarrier_spacing.pack(bref));
  if (ssb_to_measure_present) {
    HANDLE_CODE(ssb_to_measure.pack(bref));
  }
  HANDLE_CODE(bref.pack(derive_ssb_idx_from_cell, 1));
  if (ss_rssi_meas_present) {
    HANDLE_CODE(ss_rssi_meas.pack(bref));
  }
  HANDLE_CODE(pack_integer(bref, q_rx_lev_min, (int8_t)-70, (int8_t)-22));
  if (q_rx_lev_min_sul_present) {
    HANDLE_CODE(pack_integer(bref, q_rx_lev_min_sul, (int8_t)-70, (int8_t)-22));
  }
  if (q_qual_min_present) {
    HANDLE_CODE(pack_integer(bref, q_qual_min, (int8_t)-43, (int8_t)-12));
  }
  if (p_max_present) {
    HANDLE_CODE(pack_integer(bref, p_max, (int8_t)-30, (int8_t)33));
  }
  HANDLE_CODE(pack_integer(bref, t_resel_nr, (uint8_t)0u, (uint8_t)7u));
  if (t_resel_nr_sf_present) {
    HANDLE_CODE(t_resel_nr_sf.pack(bref));
  }
  HANDLE_CODE(pack_integer(bref, thresh_x_high_p, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(pack_integer(bref, thresh_x_low_p, (uint8_t)0u, (uint8_t)31u));
  if (thresh_x_q_present) {
    HANDLE_CODE(pack_integer(bref, thresh_x_q.thresh_x_high_q, (uint8_t)0u, (uint8_t)31u));
    HANDLE_CODE(pack_integer(bref, thresh_x_q.thresh_x_low_q, (uint8_t)0u, (uint8_t)31u));
  }
  if (cell_resel_prio_present) {
    HANDLE_CODE(pack_integer(bref, cell_resel_prio, (uint8_t)0u, (uint8_t)7u));
  }
  if (cell_resel_sub_prio_present) {
    HANDLE_CODE(cell_resel_sub_prio.pack(bref));
  }
  if (q_offset_freq_present) {
    HANDLE_CODE(q_offset_freq.pack(bref));
  }
  if (inter_freq_neigh_cell_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, inter_freq_neigh_cell_list, 1, 16));
  }
  if (inter_freq_excluded_cell_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, inter_freq_excluded_cell_list, 1, 16));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE inter_freq_carrier_freq_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool freq_band_list_present;
  HANDLE_CODE(bref.unpack(freq_band_list_present, 1));
  bool freq_band_list_sul_present;
  HANDLE_CODE(bref.unpack(freq_band_list_sul_present, 1));
  HANDLE_CODE(bref.unpack(nrof_ss_blocks_to_average_present, 1));
  HANDLE_CODE(bref.unpack(abs_thresh_ss_blocks_consolidation_present, 1));
  HANDLE_CODE(bref.unpack(smtc_present, 1));
  HANDLE_CODE(bref.unpack(ssb_to_measure_present, 1));
  HANDLE_CODE(bref.unpack(ss_rssi_meas_present, 1));
  HANDLE_CODE(bref.unpack(q_rx_lev_min_sul_present, 1));
  HANDLE_CODE(bref.unpack(q_qual_min_present, 1));
  HANDLE_CODE(bref.unpack(p_max_present, 1));
  HANDLE_CODE(bref.unpack(t_resel_nr_sf_present, 1));
  HANDLE_CODE(bref.unpack(thresh_x_q_present, 1));
  HANDLE_CODE(bref.unpack(cell_resel_prio_present, 1));
  HANDLE_CODE(bref.unpack(cell_resel_sub_prio_present, 1));
  HANDLE_CODE(bref.unpack(q_offset_freq_present, 1));
  bool inter_freq_neigh_cell_list_present;
  HANDLE_CODE(bref.unpack(inter_freq_neigh_cell_list_present, 1));
  bool inter_freq_excluded_cell_list_present;
  HANDLE_CODE(bref.unpack(inter_freq_excluded_cell_list_present, 1));

  HANDLE_CODE(unpack_integer(dl_carrier_freq, bref, (uint32_t)0u, (uint32_t)3279165u));
  if (freq_band_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(freq_band_list, bref, 1, 8));
  }
  if (freq_band_list_sul_present) {
    HANDLE_CODE(unpack_dyn_seq_of(freq_band_list_sul, bref, 1, 8));
  }
  if (nrof_ss_blocks_to_average_present) {
    HANDLE_CODE(unpack_integer(nrof_ss_blocks_to_average, bref, (uint8_t)2u, (uint8_t)16u));
  }
  if (abs_thresh_ss_blocks_consolidation_present) {
    HANDLE_CODE(abs_thresh_ss_blocks_consolidation.unpack(bref));
  }
  if (smtc_present) {
    HANDLE_CODE(smtc.unpack(bref));
  }
  HANDLE_CODE(ssb_subcarrier_spacing.unpack(bref));
  if (ssb_to_measure_present) {
    HANDLE_CODE(ssb_to_measure.unpack(bref));
  }
  HANDLE_CODE(bref.unpack(derive_ssb_idx_from_cell, 1));
  if (ss_rssi_meas_present) {
    HANDLE_CODE(ss_rssi_meas.unpack(bref));
  }
  HANDLE_CODE(unpack_integer(q_rx_lev_min, bref, (int8_t)-70, (int8_t)-22));
  if (q_rx_lev_min_sul_present) {
    HANDLE_CODE(unpack_integer(q_rx_lev_min_sul, bref, (int8_t)-70, (int8_t)-22));
  }
  if (q_qual_min_present) {
    HANDLE_CODE(unpack_integer(q_qual_min, bref, (int8_t)-43, (int8_t)-12));
  }
  if (p_max_present) {
    HANDLE_CODE(unpack_integer(p_max, bref, (int8_t)-30, (int8_t)33));
  }
  HANDLE_CODE(unpack_integer(t_resel_nr, bref, (uint8_t)0u, (uint8_t)7u));
  if (t_resel_nr_sf_present) {
    HANDLE_CODE(t_resel_nr_sf.unpack(bref));
  }
  HANDLE_CODE(unpack_integer(thresh_x_high_p, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(unpack_integer(thresh_x_low_p, bref, (uint8_t)0u, (uint8_t)31u));
  if (thresh_x_q_present) {
    HANDLE_CODE(unpack_integer(thresh_x_q.thresh_x_high_q, bref, (uint8_t)0u, (uint8_t)31u));
    HANDLE_CODE(unpack_integer(thresh_x_q.thresh_x_low_q, bref, (uint8_t)0u, (uint8_t)31u));
  }
  if (cell_resel_prio_present) {
    HANDLE_CODE(unpack_integer(cell_resel_prio, bref, (uint8_t)0u, (uint8_t)7u));
  }
  if (cell_resel_sub_prio_present) {
    HANDLE_CODE(cell_resel_sub_prio.unpack(bref));
  }
  if (q_offset_freq_present) {
    HANDLE_CODE(q_offset_freq.unpack(bref));
  }
  if (inter_freq_neigh_cell_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(inter_freq_neigh_cell_list, bref, 1, 16));
  }
  if (inter_freq_excluded_cell_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(inter_freq_excluded_cell_list, bref, 1, 16));
  }

  return SRSASN_SUCCESS;
}
void inter_freq_carrier_freq_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dl-CarrierFreq", dl_carrier_freq);
  if (freq_band_list.size() > 0) {
    j.start_array("frequencyBandList");
    for (const auto& e1 : freq_band_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (freq_band_list_sul.size() > 0) {
    j.start_array("frequencyBandListSUL");
    for (const auto& e1 : freq_band_list_sul) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (nrof_ss_blocks_to_average_present) {
    j.write_int("nrofSS-BlocksToAverage", nrof_ss_blocks_to_average);
  }
  if (abs_thresh_ss_blocks_consolidation_present) {
    j.write_fieldname("absThreshSS-BlocksConsolidation");
    abs_thresh_ss_blocks_consolidation.to_json(j);
  }
  if (smtc_present) {
    j.write_fieldname("smtc");
    smtc.to_json(j);
  }
  j.write_str("ssbSubcarrierSpacing", ssb_subcarrier_spacing.to_string());
  if (ssb_to_measure_present) {
    j.write_fieldname("ssb-ToMeasure");
    ssb_to_measure.to_json(j);
  }
  j.write_bool("deriveSSB-IndexFromCell", derive_ssb_idx_from_cell);
  if (ss_rssi_meas_present) {
    j.write_fieldname("ss-RSSI-Measurement");
    ss_rssi_meas.to_json(j);
  }
  j.write_int("q-RxLevMin", q_rx_lev_min);
  if (q_rx_lev_min_sul_present) {
    j.write_int("q-RxLevMinSUL", q_rx_lev_min_sul);
  }
  if (q_qual_min_present) {
    j.write_int("q-QualMin", q_qual_min);
  }
  if (p_max_present) {
    j.write_int("p-Max", p_max);
  }
  j.write_int("t-ReselectionNR", t_resel_nr);
  if (t_resel_nr_sf_present) {
    j.write_fieldname("t-ReselectionNR-SF");
    t_resel_nr_sf.to_json(j);
  }
  j.write_int("threshX-HighP", thresh_x_high_p);
  j.write_int("threshX-LowP", thresh_x_low_p);
  if (thresh_x_q_present) {
    j.write_fieldname("threshX-Q");
    j.start_obj();
    j.write_int("threshX-HighQ", thresh_x_q.thresh_x_high_q);
    j.write_int("threshX-LowQ", thresh_x_q.thresh_x_low_q);
    j.end_obj();
  }
  if (cell_resel_prio_present) {
    j.write_int("cellReselectionPriority", cell_resel_prio);
  }
  if (cell_resel_sub_prio_present) {
    j.write_str("cellReselectionSubPriority", cell_resel_sub_prio.to_string());
  }
  if (q_offset_freq_present) {
    j.write_str("q-OffsetFreq", q_offset_freq.to_string());
  }
  if (inter_freq_neigh_cell_list.size() > 0) {
    j.start_array("interFreqNeighCellList");
    for (const auto& e1 : inter_freq_neigh_cell_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (inter_freq_excluded_cell_list.size() > 0) {
    j.start_array("interFreqExcludedCellList");
    for (const auto& e1 : inter_freq_excluded_cell_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// InterFreqCarrierFreqInfo-v1610 ::= SEQUENCE
SRSASN_CODE inter_freq_carrier_freq_info_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(inter_freq_neigh_cell_list_v1610.size() > 0, 1));
  HANDLE_CODE(bref.pack(smtc2_lp_r16_present, 1));
  HANDLE_CODE(bref.pack(inter_freq_allowed_cell_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ssb_position_qcl_common_r16_present, 1));
  HANDLE_CODE(bref.pack(inter_freq_cag_cell_list_r16.size() > 0, 1));

  if (inter_freq_neigh_cell_list_v1610.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, inter_freq_neigh_cell_list_v1610, 1, 16));
  }
  if (smtc2_lp_r16_present) {
    HANDLE_CODE(smtc2_lp_r16.pack(bref));
  }
  if (inter_freq_allowed_cell_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, inter_freq_allowed_cell_list_r16, 1, 16));
  }
  if (ssb_position_qcl_common_r16_present) {
    HANDLE_CODE(ssb_position_qcl_common_r16.pack(bref));
  }
  if (inter_freq_cag_cell_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, inter_freq_cag_cell_list_r16, 1, 12));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE inter_freq_carrier_freq_info_v1610_s::unpack(cbit_ref& bref)
{
  bool inter_freq_neigh_cell_list_v1610_present;
  HANDLE_CODE(bref.unpack(inter_freq_neigh_cell_list_v1610_present, 1));
  HANDLE_CODE(bref.unpack(smtc2_lp_r16_present, 1));
  bool inter_freq_allowed_cell_list_r16_present;
  HANDLE_CODE(bref.unpack(inter_freq_allowed_cell_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(ssb_position_qcl_common_r16_present, 1));
  bool inter_freq_cag_cell_list_r16_present;
  HANDLE_CODE(bref.unpack(inter_freq_cag_cell_list_r16_present, 1));

  if (inter_freq_neigh_cell_list_v1610_present) {
    HANDLE_CODE(unpack_dyn_seq_of(inter_freq_neigh_cell_list_v1610, bref, 1, 16));
  }
  if (smtc2_lp_r16_present) {
    HANDLE_CODE(smtc2_lp_r16.unpack(bref));
  }
  if (inter_freq_allowed_cell_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(inter_freq_allowed_cell_list_r16, bref, 1, 16));
  }
  if (ssb_position_qcl_common_r16_present) {
    HANDLE_CODE(ssb_position_qcl_common_r16.unpack(bref));
  }
  if (inter_freq_cag_cell_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(inter_freq_cag_cell_list_r16, bref, 1, 12));
  }

  return SRSASN_SUCCESS;
}
void inter_freq_carrier_freq_info_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (inter_freq_neigh_cell_list_v1610.size() > 0) {
    j.start_array("interFreqNeighCellList-v1610");
    for (const auto& e1 : inter_freq_neigh_cell_list_v1610) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (smtc2_lp_r16_present) {
    j.write_fieldname("smtc2-LP-r16");
    smtc2_lp_r16.to_json(j);
  }
  if (inter_freq_allowed_cell_list_r16.size() > 0) {
    j.start_array("interFreqAllowedCellList-r16");
    for (const auto& e1 : inter_freq_allowed_cell_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ssb_position_qcl_common_r16_present) {
    j.write_str("ssb-PositionQCL-Common-r16", ssb_position_qcl_common_r16.to_string());
  }
  if (inter_freq_cag_cell_list_r16.size() > 0) {
    j.start_array("interFreqCAG-CellList-r16");
    for (const auto& e1 : inter_freq_cag_cell_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// InterFreqCarrierFreqInfo-v1700 ::= SEQUENCE
SRSASN_CODE inter_freq_carrier_freq_info_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(inter_freq_neigh_hsdn_cell_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(high_speed_meas_inter_freq_r17_present, 1));
  HANDLE_CODE(bref.pack(red_cap_access_allowed_r17_present, 1));
  HANDLE_CODE(bref.pack(ssb_position_qcl_common_r17_present, 1));
  HANDLE_CODE(bref.pack(inter_freq_neigh_cell_list_v1710.size() > 0, 1));

  if (inter_freq_neigh_hsdn_cell_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, inter_freq_neigh_hsdn_cell_list_r17, 1, 16));
  }
  if (ssb_position_qcl_common_r17_present) {
    HANDLE_CODE(ssb_position_qcl_common_r17.pack(bref));
  }
  if (inter_freq_neigh_cell_list_v1710.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, inter_freq_neigh_cell_list_v1710, 1, 16));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE inter_freq_carrier_freq_info_v1700_s::unpack(cbit_ref& bref)
{
  bool inter_freq_neigh_hsdn_cell_list_r17_present;
  HANDLE_CODE(bref.unpack(inter_freq_neigh_hsdn_cell_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(high_speed_meas_inter_freq_r17_present, 1));
  HANDLE_CODE(bref.unpack(red_cap_access_allowed_r17_present, 1));
  HANDLE_CODE(bref.unpack(ssb_position_qcl_common_r17_present, 1));
  bool inter_freq_neigh_cell_list_v1710_present;
  HANDLE_CODE(bref.unpack(inter_freq_neigh_cell_list_v1710_present, 1));

  if (inter_freq_neigh_hsdn_cell_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(inter_freq_neigh_hsdn_cell_list_r17, bref, 1, 16));
  }
  if (ssb_position_qcl_common_r17_present) {
    HANDLE_CODE(ssb_position_qcl_common_r17.unpack(bref));
  }
  if (inter_freq_neigh_cell_list_v1710_present) {
    HANDLE_CODE(unpack_dyn_seq_of(inter_freq_neigh_cell_list_v1710, bref, 1, 16));
  }

  return SRSASN_SUCCESS;
}
void inter_freq_carrier_freq_info_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (inter_freq_neigh_hsdn_cell_list_r17.size() > 0) {
    j.start_array("interFreqNeighHSDN-CellList-r17");
    for (const auto& e1 : inter_freq_neigh_hsdn_cell_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (high_speed_meas_inter_freq_r17_present) {
    j.write_str("highSpeedMeasInterFreq-r17", "true");
  }
  if (red_cap_access_allowed_r17_present) {
    j.write_str("redCapAccessAllowed-r17", "true");
  }
  if (ssb_position_qcl_common_r17_present) {
    j.write_str("ssb-PositionQCL-Common-r17", ssb_position_qcl_common_r17.to_string());
  }
  if (inter_freq_neigh_cell_list_v1710.size() > 0) {
    j.start_array("interFreqNeighCellList-v1710");
    for (const auto& e1 : inter_freq_neigh_cell_list_v1710) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// InterFreqCarrierFreqInfo-v1720 ::= SEQUENCE
SRSASN_CODE inter_freq_carrier_freq_info_v1720_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(smtc4list_r17.size() > 0, 1));

  if (smtc4list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, smtc4list_r17, 1, 3));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE inter_freq_carrier_freq_info_v1720_s::unpack(cbit_ref& bref)
{
  bool smtc4list_r17_present;
  HANDLE_CODE(bref.unpack(smtc4list_r17_present, 1));

  if (smtc4list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(smtc4list_r17, bref, 1, 3));
  }

  return SRSASN_SUCCESS;
}
void inter_freq_carrier_freq_info_v1720_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (smtc4list_r17.size() > 0) {
    j.start_array("smtc4list-r17");
    for (const auto& e1 : smtc4list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// InterFreqCarrierFreqInfo-v1730 ::= SEQUENCE
SRSASN_CODE inter_freq_carrier_freq_info_v1730_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ch_access_mode2_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE inter_freq_carrier_freq_info_v1730_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ch_access_mode2_r17_present, 1));

  return SRSASN_SUCCESS;
}
void inter_freq_carrier_freq_info_v1730_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ch_access_mode2_r17_present) {
    j.write_str("channelAccessMode2-r17", "enabled");
  }
  j.end_obj();
}

// IntraFreqNeighCellInfo ::= SEQUENCE
SRSASN_CODE intra_freq_neigh_cell_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(q_rx_lev_min_offset_cell_present, 1));
  HANDLE_CODE(bref.pack(q_rx_lev_min_offset_cell_sul_present, 1));
  HANDLE_CODE(bref.pack(q_qual_min_offset_cell_present, 1));

  HANDLE_CODE(pack_integer(bref, pci, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(q_offset_cell.pack(bref));
  if (q_rx_lev_min_offset_cell_present) {
    HANDLE_CODE(pack_integer(bref, q_rx_lev_min_offset_cell, (uint8_t)1u, (uint8_t)8u));
  }
  if (q_rx_lev_min_offset_cell_sul_present) {
    HANDLE_CODE(pack_integer(bref, q_rx_lev_min_offset_cell_sul, (uint8_t)1u, (uint8_t)8u));
  }
  if (q_qual_min_offset_cell_present) {
    HANDLE_CODE(pack_integer(bref, q_qual_min_offset_cell, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE intra_freq_neigh_cell_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(q_rx_lev_min_offset_cell_present, 1));
  HANDLE_CODE(bref.unpack(q_rx_lev_min_offset_cell_sul_present, 1));
  HANDLE_CODE(bref.unpack(q_qual_min_offset_cell_present, 1));

  HANDLE_CODE(unpack_integer(pci, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(q_offset_cell.unpack(bref));
  if (q_rx_lev_min_offset_cell_present) {
    HANDLE_CODE(unpack_integer(q_rx_lev_min_offset_cell, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (q_rx_lev_min_offset_cell_sul_present) {
    HANDLE_CODE(unpack_integer(q_rx_lev_min_offset_cell_sul, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (q_qual_min_offset_cell_present) {
    HANDLE_CODE(unpack_integer(q_qual_min_offset_cell, bref, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
void intra_freq_neigh_cell_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId", pci);
  j.write_str("q-OffsetCell", q_offset_cell.to_string());
  if (q_rx_lev_min_offset_cell_present) {
    j.write_int("q-RxLevMinOffsetCell", q_rx_lev_min_offset_cell);
  }
  if (q_rx_lev_min_offset_cell_sul_present) {
    j.write_int("q-RxLevMinOffsetCellSUL", q_rx_lev_min_offset_cell_sul);
  }
  if (q_qual_min_offset_cell_present) {
    j.write_int("q-QualMinOffsetCell", q_qual_min_offset_cell);
  }
  j.end_obj();
}

// IntraFreqNeighCellInfo-v1610 ::= SEQUENCE
SRSASN_CODE intra_freq_neigh_cell_info_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ssb_position_qcl_r16_present, 1));

  if (ssb_position_qcl_r16_present) {
    HANDLE_CODE(ssb_position_qcl_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE intra_freq_neigh_cell_info_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ssb_position_qcl_r16_present, 1));

  if (ssb_position_qcl_r16_present) {
    HANDLE_CODE(ssb_position_qcl_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void intra_freq_neigh_cell_info_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ssb_position_qcl_r16_present) {
    j.write_str("ssb-PositionQCL-r16", ssb_position_qcl_r16.to_string());
  }
  j.end_obj();
}

// IntraFreqNeighCellInfo-v1710 ::= SEQUENCE
SRSASN_CODE intra_freq_neigh_cell_info_v1710_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ssb_position_qcl_r17_present, 1));

  if (ssb_position_qcl_r17_present) {
    HANDLE_CODE(ssb_position_qcl_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE intra_freq_neigh_cell_info_v1710_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ssb_position_qcl_r17_present, 1));

  if (ssb_position_qcl_r17_present) {
    HANDLE_CODE(ssb_position_qcl_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void intra_freq_neigh_cell_info_v1710_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ssb_position_qcl_r17_present) {
    j.write_str("ssb-PositionQCL-r17", ssb_position_qcl_r17.to_string());
  }
  j.end_obj();
}

// LocationAndBandwidthBroadcast-r17 ::= CHOICE
void location_and_bw_broadcast_r17_c::set(types::options e)
{
  type_ = e;
}
void location_and_bw_broadcast_r17_c::set_same_as_sib1_cfg_location_and_bw()
{
  set(types::same_as_sib1_cfg_location_and_bw);
}
uint16_t& location_and_bw_broadcast_r17_c::set_location_and_bw()
{
  set(types::location_and_bw);
  return c;
}
void location_and_bw_broadcast_r17_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::same_as_sib1_cfg_location_and_bw:
      break;
    case types::location_and_bw:
      j.write_int("locationAndBandwidth", c);
      break;
    default:
      log_invalid_choice_id(type_, "location_and_bw_broadcast_r17_c");
  }
  j.end_obj();
}
SRSASN_CODE location_and_bw_broadcast_r17_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::same_as_sib1_cfg_location_and_bw:
      break;
    case types::location_and_bw:
      HANDLE_CODE(pack_integer(bref, c, (uint16_t)0u, (uint16_t)37949u));
      break;
    default:
      log_invalid_choice_id(type_, "location_and_bw_broadcast_r17_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE location_and_bw_broadcast_r17_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::same_as_sib1_cfg_location_and_bw:
      break;
    case types::location_and_bw:
      HANDLE_CODE(unpack_integer(c, bref, (uint16_t)0u, (uint16_t)37949u));
      break;
    default:
      log_invalid_choice_id(type_, "location_and_bw_broadcast_r17_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* location_and_bw_broadcast_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"sameAsSib1ConfiguredLocationAndBW", "locationAndBandwidth"};
  return convert_enum_idx(names, 2, value, "location_and_bw_broadcast_r17_c::types");
}
uint8_t location_and_bw_broadcast_r17_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "location_and_bw_broadcast_r17_c::types");
}

// MBS-FSAI-InterFreq-r17 ::= SEQUENCE
SRSASN_CODE mbs_fsai_inter_freq_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, dl_carrier_freq_r17, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(pack_dyn_seq_of(bref, mbs_fsai_list_r17, 1, 64));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mbs_fsai_inter_freq_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(dl_carrier_freq_r17, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(unpack_dyn_seq_of(mbs_fsai_list_r17, bref, 1, 64));

  return SRSASN_SUCCESS;
}
void mbs_fsai_inter_freq_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dl-CarrierFreq-r17", dl_carrier_freq_r17);
  j.start_array("mbs-FSAI-List-r17");
  for (const auto& e1 : mbs_fsai_list_r17) {
    j.write_str(e1.to_string());
  }
  j.end_array();
  j.end_obj();
}

// MCCH-RepetitionPeriodAndOffset-r17 ::= CHOICE
void mcch_repeat_period_and_offset_r17_c::destroy_() {}
void mcch_repeat_period_and_offset_r17_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
mcch_repeat_period_and_offset_r17_c::mcch_repeat_period_and_offset_r17_c(
    const mcch_repeat_period_and_offset_r17_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::rf1_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::rf2_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::rf4_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::rf8_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::rf16_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::rf32_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::rf64_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::rf128_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::rf256_r17:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "mcch_repeat_period_and_offset_r17_c");
  }
}
mcch_repeat_period_and_offset_r17_c&
mcch_repeat_period_and_offset_r17_c::operator=(const mcch_repeat_period_and_offset_r17_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::rf1_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::rf2_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::rf4_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::rf8_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::rf16_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::rf32_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::rf64_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::rf128_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::rf256_r17:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "mcch_repeat_period_and_offset_r17_c");
  }

  return *this;
}
uint8_t& mcch_repeat_period_and_offset_r17_c::set_rf1_r17()
{
  set(types::rf1_r17);
  return c.get<uint8_t>();
}
uint8_t& mcch_repeat_period_and_offset_r17_c::set_rf2_r17()
{
  set(types::rf2_r17);
  return c.get<uint8_t>();
}
uint8_t& mcch_repeat_period_and_offset_r17_c::set_rf4_r17()
{
  set(types::rf4_r17);
  return c.get<uint8_t>();
}
uint8_t& mcch_repeat_period_and_offset_r17_c::set_rf8_r17()
{
  set(types::rf8_r17);
  return c.get<uint8_t>();
}
uint8_t& mcch_repeat_period_and_offset_r17_c::set_rf16_r17()
{
  set(types::rf16_r17);
  return c.get<uint8_t>();
}
uint8_t& mcch_repeat_period_and_offset_r17_c::set_rf32_r17()
{
  set(types::rf32_r17);
  return c.get<uint8_t>();
}
uint8_t& mcch_repeat_period_and_offset_r17_c::set_rf64_r17()
{
  set(types::rf64_r17);
  return c.get<uint8_t>();
}
uint8_t& mcch_repeat_period_and_offset_r17_c::set_rf128_r17()
{
  set(types::rf128_r17);
  return c.get<uint8_t>();
}
uint16_t& mcch_repeat_period_and_offset_r17_c::set_rf256_r17()
{
  set(types::rf256_r17);
  return c.get<uint16_t>();
}
void mcch_repeat_period_and_offset_r17_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rf1_r17:
      j.write_int("rf1-r17", c.get<uint8_t>());
      break;
    case types::rf2_r17:
      j.write_int("rf2-r17", c.get<uint8_t>());
      break;
    case types::rf4_r17:
      j.write_int("rf4-r17", c.get<uint8_t>());
      break;
    case types::rf8_r17:
      j.write_int("rf8-r17", c.get<uint8_t>());
      break;
    case types::rf16_r17:
      j.write_int("rf16-r17", c.get<uint8_t>());
      break;
    case types::rf32_r17:
      j.write_int("rf32-r17", c.get<uint8_t>());
      break;
    case types::rf64_r17:
      j.write_int("rf64-r17", c.get<uint8_t>());
      break;
    case types::rf128_r17:
      j.write_int("rf128-r17", c.get<uint8_t>());
      break;
    case types::rf256_r17:
      j.write_int("rf256-r17", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "mcch_repeat_period_and_offset_r17_c");
  }
  j.end_obj();
}
SRSASN_CODE mcch_repeat_period_and_offset_r17_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rf1_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)0u));
      break;
    case types::rf2_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)1u));
      break;
    case types::rf4_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)3u));
      break;
    case types::rf8_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)7u));
      break;
    case types::rf16_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)15u));
      break;
    case types::rf32_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)31u));
      break;
    case types::rf64_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)63u));
      break;
    case types::rf128_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    case types::rf256_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u));
      break;
    default:
      log_invalid_choice_id(type_, "mcch_repeat_period_and_offset_r17_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mcch_repeat_period_and_offset_r17_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rf1_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)0u));
      break;
    case types::rf2_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)1u));
      break;
    case types::rf4_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)3u));
      break;
    case types::rf8_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)7u));
      break;
    case types::rf16_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)15u));
      break;
    case types::rf32_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)31u));
      break;
    case types::rf64_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)63u));
      break;
    case types::rf128_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    case types::rf256_r17:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u));
      break;
    default:
      log_invalid_choice_id(type_, "mcch_repeat_period_and_offset_r17_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* mcch_repeat_period_and_offset_r17_c::types_opts::to_string() const
{
  static const char* names[] = {
      "rf1-r17", "rf2-r17", "rf4-r17", "rf8-r17", "rf16-r17", "rf32-r17", "rf64-r17", "rf128-r17", "rf256-r17"};
  return convert_enum_idx(names, 9, value, "mcch_repeat_period_and_offset_r17_c::types");
}
uint16_t mcch_repeat_period_and_offset_r17_c::types_opts::to_number() const
{
  static const uint16_t numbers[] = {1, 2, 4, 8, 16, 32, 64, 128, 256};
  return map_enum_number(numbers, 9, value, "mcch_repeat_period_and_offset_r17_c::types");
}

// MeasIdleCarrierEUTRA-r16 ::= SEQUENCE
SRSASN_CODE meas_idle_carrier_eutra_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_cell_list_eutra_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(quality_thres_eutra_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, carrier_freq_eutra_r16, (uint32_t)0u, (uint32_t)262143u));
  HANDLE_CODE(allowed_meas_bw_r16.pack(bref));
  if (meas_cell_list_eutra_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_cell_list_eutra_r16, 1, 8));
  }
  HANDLE_CODE(report_quantities_eutra_r16.pack(bref));
  if (quality_thres_eutra_r16_present) {
    HANDLE_CODE(bref.pack(quality_thres_eutra_r16.idle_rsrp_thres_eutra_r16_present, 1));
    HANDLE_CODE(bref.pack(quality_thres_eutra_r16.idle_rsrq_thres_eutra_r16_present, 1));
    if (quality_thres_eutra_r16.idle_rsrp_thres_eutra_r16_present) {
      HANDLE_CODE(pack_integer(bref, quality_thres_eutra_r16.idle_rsrp_thres_eutra_r16, (uint8_t)0u, (uint8_t)97u));
    }
    if (quality_thres_eutra_r16.idle_rsrq_thres_eutra_r16_present) {
      HANDLE_CODE(pack_integer(bref, quality_thres_eutra_r16.idle_rsrq_thres_eutra_r16, (int8_t)-30, (int8_t)46));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_idle_carrier_eutra_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool meas_cell_list_eutra_r16_present;
  HANDLE_CODE(bref.unpack(meas_cell_list_eutra_r16_present, 1));
  HANDLE_CODE(bref.unpack(quality_thres_eutra_r16_present, 1));

  HANDLE_CODE(unpack_integer(carrier_freq_eutra_r16, bref, (uint32_t)0u, (uint32_t)262143u));
  HANDLE_CODE(allowed_meas_bw_r16.unpack(bref));
  if (meas_cell_list_eutra_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_cell_list_eutra_r16, bref, 1, 8));
  }
  HANDLE_CODE(report_quantities_eutra_r16.unpack(bref));
  if (quality_thres_eutra_r16_present) {
    HANDLE_CODE(bref.unpack(quality_thres_eutra_r16.idle_rsrp_thres_eutra_r16_present, 1));
    HANDLE_CODE(bref.unpack(quality_thres_eutra_r16.idle_rsrq_thres_eutra_r16_present, 1));
    if (quality_thres_eutra_r16.idle_rsrp_thres_eutra_r16_present) {
      HANDLE_CODE(unpack_integer(quality_thres_eutra_r16.idle_rsrp_thres_eutra_r16, bref, (uint8_t)0u, (uint8_t)97u));
    }
    if (quality_thres_eutra_r16.idle_rsrq_thres_eutra_r16_present) {
      HANDLE_CODE(unpack_integer(quality_thres_eutra_r16.idle_rsrq_thres_eutra_r16, bref, (int8_t)-30, (int8_t)46));
    }
  }

  return SRSASN_SUCCESS;
}
void meas_idle_carrier_eutra_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreqEUTRA-r16", carrier_freq_eutra_r16);
  j.write_str("allowedMeasBandwidth-r16", allowed_meas_bw_r16.to_string());
  if (meas_cell_list_eutra_r16.size() > 0) {
    j.start_array("measCellListEUTRA-r16");
    for (const auto& e1 : meas_cell_list_eutra_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_str("reportQuantitiesEUTRA-r16", report_quantities_eutra_r16.to_string());
  if (quality_thres_eutra_r16_present) {
    j.write_fieldname("qualityThresholdEUTRA-r16");
    j.start_obj();
    if (quality_thres_eutra_r16.idle_rsrp_thres_eutra_r16_present) {
      j.write_int("idleRSRP-Threshold-EUTRA-r16", quality_thres_eutra_r16.idle_rsrp_thres_eutra_r16);
    }
    if (quality_thres_eutra_r16.idle_rsrq_thres_eutra_r16_present) {
      j.write_int("idleRSRQ-Threshold-EUTRA-r16", quality_thres_eutra_r16.idle_rsrq_thres_eutra_r16);
    }
    j.end_obj();
  }
  j.end_obj();
}

const char* meas_idle_carrier_eutra_r16_s::report_quantities_eutra_r16_opts::to_string() const
{
  static const char* names[] = {"rsrp", "rsrq", "both"};
  return convert_enum_idx(names, 3, value, "meas_idle_carrier_eutra_r16_s::report_quantities_eutra_r16_e_");
}

// MeasIdleCarrierNR-r16 ::= SEQUENCE
SRSASN_CODE meas_idle_carrier_nr_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(freq_band_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_cell_list_nr_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(quality_thres_r16_present, 1));
  HANDLE_CODE(bref.pack(ssb_meas_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(beam_meas_cfg_idle_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, carrier_freq_r16, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(ssb_subcarrier_spacing_r16.pack(bref));
  if (freq_band_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, freq_band_list, 1, 8, integer_packer<uint16_t>(1, 1024)));
  }
  if (meas_cell_list_nr_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_cell_list_nr_r16, 1, 8));
  }
  HANDLE_CODE(report_quantities_r16.pack(bref));
  if (quality_thres_r16_present) {
    HANDLE_CODE(bref.pack(quality_thres_r16.idle_rsrp_thres_nr_r16_present, 1));
    HANDLE_CODE(bref.pack(quality_thres_r16.idle_rsrq_thres_nr_r16_present, 1));
    if (quality_thres_r16.idle_rsrp_thres_nr_r16_present) {
      HANDLE_CODE(pack_integer(bref, quality_thres_r16.idle_rsrp_thres_nr_r16, (uint8_t)0u, (uint8_t)127u));
    }
    if (quality_thres_r16.idle_rsrq_thres_nr_r16_present) {
      HANDLE_CODE(pack_integer(bref, quality_thres_r16.idle_rsrq_thres_nr_r16, (uint8_t)0u, (uint8_t)127u));
    }
  }
  if (ssb_meas_cfg_r16_present) {
    HANDLE_CODE(bref.pack(ssb_meas_cfg_r16.nrof_ss_blocks_to_average_r16_present, 1));
    HANDLE_CODE(bref.pack(ssb_meas_cfg_r16.abs_thresh_ss_blocks_consolidation_r16_present, 1));
    HANDLE_CODE(bref.pack(ssb_meas_cfg_r16.smtc_r16_present, 1));
    HANDLE_CODE(bref.pack(ssb_meas_cfg_r16.ssb_to_measure_r16_present, 1));
    HANDLE_CODE(bref.pack(ssb_meas_cfg_r16.ss_rssi_meas_r16_present, 1));
    if (ssb_meas_cfg_r16.nrof_ss_blocks_to_average_r16_present) {
      HANDLE_CODE(pack_integer(bref, ssb_meas_cfg_r16.nrof_ss_blocks_to_average_r16, (uint8_t)2u, (uint8_t)16u));
    }
    if (ssb_meas_cfg_r16.abs_thresh_ss_blocks_consolidation_r16_present) {
      HANDLE_CODE(ssb_meas_cfg_r16.abs_thresh_ss_blocks_consolidation_r16.pack(bref));
    }
    if (ssb_meas_cfg_r16.smtc_r16_present) {
      HANDLE_CODE(ssb_meas_cfg_r16.smtc_r16.pack(bref));
    }
    if (ssb_meas_cfg_r16.ssb_to_measure_r16_present) {
      HANDLE_CODE(ssb_meas_cfg_r16.ssb_to_measure_r16.pack(bref));
    }
    HANDLE_CODE(bref.pack(ssb_meas_cfg_r16.derive_ssb_idx_from_cell_r16, 1));
    if (ssb_meas_cfg_r16.ss_rssi_meas_r16_present) {
      HANDLE_CODE(ssb_meas_cfg_r16.ss_rssi_meas_r16.pack(bref));
    }
  }
  if (beam_meas_cfg_idle_r16_present) {
    HANDLE_CODE(beam_meas_cfg_idle_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_idle_carrier_nr_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool freq_band_list_present;
  HANDLE_CODE(bref.unpack(freq_band_list_present, 1));
  bool meas_cell_list_nr_r16_present;
  HANDLE_CODE(bref.unpack(meas_cell_list_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(quality_thres_r16_present, 1));
  HANDLE_CODE(bref.unpack(ssb_meas_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(beam_meas_cfg_idle_r16_present, 1));

  HANDLE_CODE(unpack_integer(carrier_freq_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(ssb_subcarrier_spacing_r16.unpack(bref));
  if (freq_band_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(freq_band_list, bref, 1, 8, integer_packer<uint16_t>(1, 1024)));
  }
  if (meas_cell_list_nr_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_cell_list_nr_r16, bref, 1, 8));
  }
  HANDLE_CODE(report_quantities_r16.unpack(bref));
  if (quality_thres_r16_present) {
    HANDLE_CODE(bref.unpack(quality_thres_r16.idle_rsrp_thres_nr_r16_present, 1));
    HANDLE_CODE(bref.unpack(quality_thres_r16.idle_rsrq_thres_nr_r16_present, 1));
    if (quality_thres_r16.idle_rsrp_thres_nr_r16_present) {
      HANDLE_CODE(unpack_integer(quality_thres_r16.idle_rsrp_thres_nr_r16, bref, (uint8_t)0u, (uint8_t)127u));
    }
    if (quality_thres_r16.idle_rsrq_thres_nr_r16_present) {
      HANDLE_CODE(unpack_integer(quality_thres_r16.idle_rsrq_thres_nr_r16, bref, (uint8_t)0u, (uint8_t)127u));
    }
  }
  if (ssb_meas_cfg_r16_present) {
    HANDLE_CODE(bref.unpack(ssb_meas_cfg_r16.nrof_ss_blocks_to_average_r16_present, 1));
    HANDLE_CODE(bref.unpack(ssb_meas_cfg_r16.abs_thresh_ss_blocks_consolidation_r16_present, 1));
    HANDLE_CODE(bref.unpack(ssb_meas_cfg_r16.smtc_r16_present, 1));
    HANDLE_CODE(bref.unpack(ssb_meas_cfg_r16.ssb_to_measure_r16_present, 1));
    HANDLE_CODE(bref.unpack(ssb_meas_cfg_r16.ss_rssi_meas_r16_present, 1));
    if (ssb_meas_cfg_r16.nrof_ss_blocks_to_average_r16_present) {
      HANDLE_CODE(unpack_integer(ssb_meas_cfg_r16.nrof_ss_blocks_to_average_r16, bref, (uint8_t)2u, (uint8_t)16u));
    }
    if (ssb_meas_cfg_r16.abs_thresh_ss_blocks_consolidation_r16_present) {
      HANDLE_CODE(ssb_meas_cfg_r16.abs_thresh_ss_blocks_consolidation_r16.unpack(bref));
    }
    if (ssb_meas_cfg_r16.smtc_r16_present) {
      HANDLE_CODE(ssb_meas_cfg_r16.smtc_r16.unpack(bref));
    }
    if (ssb_meas_cfg_r16.ssb_to_measure_r16_present) {
      HANDLE_CODE(ssb_meas_cfg_r16.ssb_to_measure_r16.unpack(bref));
    }
    HANDLE_CODE(bref.unpack(ssb_meas_cfg_r16.derive_ssb_idx_from_cell_r16, 1));
    if (ssb_meas_cfg_r16.ss_rssi_meas_r16_present) {
      HANDLE_CODE(ssb_meas_cfg_r16.ss_rssi_meas_r16.unpack(bref));
    }
  }
  if (beam_meas_cfg_idle_r16_present) {
    HANDLE_CODE(beam_meas_cfg_idle_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_idle_carrier_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq-r16", carrier_freq_r16);
  j.write_str("ssbSubcarrierSpacing-r16", ssb_subcarrier_spacing_r16.to_string());
  if (freq_band_list.size() > 0) {
    j.start_array("frequencyBandList");
    for (const auto& e1 : freq_band_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (meas_cell_list_nr_r16.size() > 0) {
    j.start_array("measCellListNR-r16");
    for (const auto& e1 : meas_cell_list_nr_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_str("reportQuantities-r16", report_quantities_r16.to_string());
  if (quality_thres_r16_present) {
    j.write_fieldname("qualityThreshold-r16");
    j.start_obj();
    if (quality_thres_r16.idle_rsrp_thres_nr_r16_present) {
      j.write_int("idleRSRP-Threshold-NR-r16", quality_thres_r16.idle_rsrp_thres_nr_r16);
    }
    if (quality_thres_r16.idle_rsrq_thres_nr_r16_present) {
      j.write_int("idleRSRQ-Threshold-NR-r16", quality_thres_r16.idle_rsrq_thres_nr_r16);
    }
    j.end_obj();
  }
  if (ssb_meas_cfg_r16_present) {
    j.write_fieldname("ssb-MeasConfig-r16");
    j.start_obj();
    if (ssb_meas_cfg_r16.nrof_ss_blocks_to_average_r16_present) {
      j.write_int("nrofSS-BlocksToAverage-r16", ssb_meas_cfg_r16.nrof_ss_blocks_to_average_r16);
    }
    if (ssb_meas_cfg_r16.abs_thresh_ss_blocks_consolidation_r16_present) {
      j.write_fieldname("absThreshSS-BlocksConsolidation-r16");
      ssb_meas_cfg_r16.abs_thresh_ss_blocks_consolidation_r16.to_json(j);
    }
    if (ssb_meas_cfg_r16.smtc_r16_present) {
      j.write_fieldname("smtc-r16");
      ssb_meas_cfg_r16.smtc_r16.to_json(j);
    }
    if (ssb_meas_cfg_r16.ssb_to_measure_r16_present) {
      j.write_fieldname("ssb-ToMeasure-r16");
      ssb_meas_cfg_r16.ssb_to_measure_r16.to_json(j);
    }
    j.write_bool("deriveSSB-IndexFromCell-r16", ssb_meas_cfg_r16.derive_ssb_idx_from_cell_r16);
    if (ssb_meas_cfg_r16.ss_rssi_meas_r16_present) {
      j.write_fieldname("ss-RSSI-Measurement-r16");
      ssb_meas_cfg_r16.ss_rssi_meas_r16.to_json(j);
    }
    j.end_obj();
  }
  if (beam_meas_cfg_idle_r16_present) {
    j.write_fieldname("beamMeasConfigIdle-r16");
    beam_meas_cfg_idle_r16.to_json(j);
  }
  j.end_obj();
}

const char* meas_idle_carrier_nr_r16_s::report_quantities_r16_opts::to_string() const
{
  static const char* names[] = {"rsrp", "rsrq", "both"};
  return convert_enum_idx(names, 3, value, "meas_idle_carrier_nr_r16_s::report_quantities_r16_e_");
}

// NPN-Identity-r16 ::= CHOICE
void npn_id_r16_c::destroy_()
{
  switch (type_) {
    case types::pni_npn_r16:
      c.destroy<pni_npn_r16_s_>();
      break;
    case types::snpn_r16:
      c.destroy<snpn_r16_s_>();
      break;
    default:
      break;
  }
}
void npn_id_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::pni_npn_r16:
      c.init<pni_npn_r16_s_>();
      break;
    case types::snpn_r16:
      c.init<snpn_r16_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "npn_id_r16_c");
  }
}
npn_id_r16_c::npn_id_r16_c(const npn_id_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::pni_npn_r16:
      c.init(other.c.get<pni_npn_r16_s_>());
      break;
    case types::snpn_r16:
      c.init(other.c.get<snpn_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "npn_id_r16_c");
  }
}
npn_id_r16_c& npn_id_r16_c::operator=(const npn_id_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::pni_npn_r16:
      c.set(other.c.get<pni_npn_r16_s_>());
      break;
    case types::snpn_r16:
      c.set(other.c.get<snpn_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "npn_id_r16_c");
  }

  return *this;
}
npn_id_r16_c::pni_npn_r16_s_& npn_id_r16_c::set_pni_npn_r16()
{
  set(types::pni_npn_r16);
  return c.get<pni_npn_r16_s_>();
}
npn_id_r16_c::snpn_r16_s_& npn_id_r16_c::set_snpn_r16()
{
  set(types::snpn_r16);
  return c.get<snpn_r16_s_>();
}
void npn_id_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::pni_npn_r16:
      j.write_fieldname("pni-npn-r16");
      j.start_obj();
      j.write_fieldname("plmn-Identity-r16");
      c.get<pni_npn_r16_s_>().plmn_id_r16.to_json(j);
      j.start_array("cag-IdentityList-r16");
      for (const auto& e1 : c.get<pni_npn_r16_s_>().cag_id_list_r16) {
        e1.to_json(j);
      }
      j.end_array();
      j.end_obj();
      break;
    case types::snpn_r16:
      j.write_fieldname("snpn-r16");
      j.start_obj();
      j.write_fieldname("plmn-Identity-r16");
      c.get<snpn_r16_s_>().plmn_id_r16.to_json(j);
      j.start_array("nid-List-r16");
      for (const auto& e1 : c.get<snpn_r16_s_>().nid_list_r16) {
        j.write_str(e1.to_string());
      }
      j.end_array();
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "npn_id_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE npn_id_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::pni_npn_r16:
      HANDLE_CODE(c.get<pni_npn_r16_s_>().plmn_id_r16.pack(bref));
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pni_npn_r16_s_>().cag_id_list_r16, 1, 12));
      break;
    case types::snpn_r16:
      HANDLE_CODE(c.get<snpn_r16_s_>().plmn_id_r16.pack(bref));
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<snpn_r16_s_>().nid_list_r16, 1, 12));
      break;
    default:
      log_invalid_choice_id(type_, "npn_id_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE npn_id_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::pni_npn_r16:
      HANDLE_CODE(c.get<pni_npn_r16_s_>().plmn_id_r16.unpack(bref));
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pni_npn_r16_s_>().cag_id_list_r16, bref, 1, 12));
      break;
    case types::snpn_r16:
      HANDLE_CODE(c.get<snpn_r16_s_>().plmn_id_r16.unpack(bref));
      HANDLE_CODE(unpack_dyn_seq_of(c.get<snpn_r16_s_>().nid_list_r16, bref, 1, 12));
      break;
    default:
      log_invalid_choice_id(type_, "npn_id_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* npn_id_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"pni-npn-r16", "snpn-r16"};
  return convert_enum_idx(names, 2, value, "npn_id_r16_c::types");
}

// NTN-NeighCellConfig-r17 ::= SEQUENCE
SRSASN_CODE ntn_neigh_cell_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ntn_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(carrier_freq_r17_present, 1));
  HANDLE_CODE(bref.pack(pci_r17_present, 1));

  if (ntn_cfg_r17_present) {
    HANDLE_CODE(ntn_cfg_r17.pack(bref));
  }
  if (carrier_freq_r17_present) {
    HANDLE_CODE(pack_integer(bref, carrier_freq_r17, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (pci_r17_present) {
    HANDLE_CODE(pack_integer(bref, pci_r17, (uint16_t)0u, (uint16_t)1007u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ntn_neigh_cell_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ntn_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(carrier_freq_r17_present, 1));
  HANDLE_CODE(bref.unpack(pci_r17_present, 1));

  if (ntn_cfg_r17_present) {
    HANDLE_CODE(ntn_cfg_r17.unpack(bref));
  }
  if (carrier_freq_r17_present) {
    HANDLE_CODE(unpack_integer(carrier_freq_r17, bref, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (pci_r17_present) {
    HANDLE_CODE(unpack_integer(pci_r17, bref, (uint16_t)0u, (uint16_t)1007u));
  }

  return SRSASN_SUCCESS;
}
void ntn_neigh_cell_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ntn_cfg_r17_present) {
    j.write_fieldname("ntn-Config-r17");
    ntn_cfg_r17.to_json(j);
  }
  if (carrier_freq_r17_present) {
    j.write_int("carrierFreq-r17", carrier_freq_r17);
  }
  if (pci_r17_present) {
    j.write_int("physCellId-r17", pci_r17);
  }
  j.end_obj();
}

const char* pdcch_cfg_common_s::first_pdcch_monitoring_occasion_of_po_c_::types_opts::to_string() const
{
  static const char* names[] = {"sCS15KHZoneT",
                                "sCS30KHZoneT-SCS15KHZhalfT",
                                "sCS60KHZoneT-SCS30KHZhalfT-SCS15KHZquarterT",
                                "sCS120KHZoneT-SCS60KHZhalfT-SCS30KHZquarterT-SCS15KHZoneEighthT",
                                "sCS120KHZhalfT-SCS60KHZquarterT-SCS30KHZoneEighthT-SCS15KHZoneSixteenthT",
                                "sCS120KHZquarterT-SCS60KHZoneEighthT-SCS30KHZoneSixteenthT",
                                "sCS120KHZoneEighthT-SCS60KHZoneSixteenthT",
                                "sCS120KHZoneSixteenthT"};
  return convert_enum_idx(names, 8, value, "pdcch_cfg_common_s::first_pdcch_monitoring_occasion_of_po_c_::types");
}

const char* pdcch_cfg_common_s::sdt_search_space_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"newSearchSpace", "existingSearchSpace"};
  return convert_enum_idx(names, 2, value, "pdcch_cfg_common_s::sdt_search_space_r17_c_::types");
}

const char* pdcch_cfg_common_s::first_pdcch_monitoring_occasion_of_po_v1710_c_::types_opts::to_string() const
{
  static const char* names[] = {"sCS480KHZoneEighthT", "sCS480KHZoneSixteenthT"};
  return convert_enum_idx(names, 2, value, "pdcch_cfg_common_s::first_pdcch_monitoring_occasion_of_po_v1710_c_::types");
}

const char*
pdcch_cfg_common_s::pei_cfg_bwp_r17_s_::first_pdcch_monitoring_occasion_of_pei_o_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"sCS15KHZoneT",
                                "sCS30KHZoneT-SCS15KHZhalfT",
                                "sCS60KHZoneT-SCS30KHZhalfT-SCS15KHZquarterT",
                                "sCS120KHZoneT-SCS60KHZhalfT-SCS30KHZquarterT-SCS15KHZoneEighthT",
                                "sCS120KHZhalfT-SCS60KHZquarterT-SCS30KHZoneEighthT-SCS15KHZoneSixteenthT",
                                "sCS480KHZoneT-SCS120KHZquarterT-SCS60KHZoneEighthT-SCS30KHZoneSixteenthT",
                                "sCS480KHZhalfT-SCS120KHZoneEighthT-SCS60KHZoneSixteenthT",
                                "sCS480KHZquarterT-SCS120KHZoneSixteenthT",
                                "sCS480KHZoneEighthT",
                                "sCS480KHZoneSixteenthT"};
  return convert_enum_idx(
      names,
      10,
      value,
      "pdcch_cfg_common_s::pei_cfg_bwp_r17_s_::first_pdcch_monitoring_occasion_of_pei_o_r17_c_::types");
}

// PDSCH-ConfigBroadcast-r17 ::= SEQUENCE
SRSASN_CODE pdsch_cfg_broadcast_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pdsch_time_domain_alloc_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(rate_match_pattern_to_add_mod_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(lte_crs_to_match_around_r17_present, 1));
  HANDLE_CODE(bref.pack(mcs_table_r17_present, 1));
  HANDLE_CODE(bref.pack(xoverhead_r17_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, pdsch_cfg_list_r17, 1, 16));
  if (pdsch_time_domain_alloc_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, pdsch_time_domain_alloc_list_r17, 1, 16));
  }
  if (rate_match_pattern_to_add_mod_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, rate_match_pattern_to_add_mod_list_r17, 1, 4));
  }
  if (lte_crs_to_match_around_r17_present) {
    HANDLE_CODE(lte_crs_to_match_around_r17.pack(bref));
  }
  if (mcs_table_r17_present) {
    HANDLE_CODE(mcs_table_r17.pack(bref));
  }
  if (xoverhead_r17_present) {
    HANDLE_CODE(xoverhead_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdsch_cfg_broadcast_r17_s::unpack(cbit_ref& bref)
{
  bool pdsch_time_domain_alloc_list_r17_present;
  HANDLE_CODE(bref.unpack(pdsch_time_domain_alloc_list_r17_present, 1));
  bool rate_match_pattern_to_add_mod_list_r17_present;
  HANDLE_CODE(bref.unpack(rate_match_pattern_to_add_mod_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(lte_crs_to_match_around_r17_present, 1));
  HANDLE_CODE(bref.unpack(mcs_table_r17_present, 1));
  HANDLE_CODE(bref.unpack(xoverhead_r17_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(pdsch_cfg_list_r17, bref, 1, 16));
  if (pdsch_time_domain_alloc_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(pdsch_time_domain_alloc_list_r17, bref, 1, 16));
  }
  if (rate_match_pattern_to_add_mod_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(rate_match_pattern_to_add_mod_list_r17, bref, 1, 4));
  }
  if (lte_crs_to_match_around_r17_present) {
    HANDLE_CODE(lte_crs_to_match_around_r17.unpack(bref));
  }
  if (mcs_table_r17_present) {
    HANDLE_CODE(mcs_table_r17.unpack(bref));
  }
  if (xoverhead_r17_present) {
    HANDLE_CODE(xoverhead_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void pdsch_cfg_broadcast_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("pdschConfigList-r17");
  for (const auto& e1 : pdsch_cfg_list_r17) {
    e1.to_json(j);
  }
  j.end_array();
  if (pdsch_time_domain_alloc_list_r17.size() > 0) {
    j.start_array("pdsch-TimeDomainAllocationList-r17");
    for (const auto& e1 : pdsch_time_domain_alloc_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (rate_match_pattern_to_add_mod_list_r17.size() > 0) {
    j.start_array("rateMatchPatternToAddModList-r17");
    for (const auto& e1 : rate_match_pattern_to_add_mod_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (lte_crs_to_match_around_r17_present) {
    j.write_fieldname("lte-CRS-ToMatchAround-r17");
    lte_crs_to_match_around_r17.to_json(j);
  }
  if (mcs_table_r17_present) {
    j.write_str("mcs-Table-r17", mcs_table_r17.to_string());
  }
  if (xoverhead_r17_present) {
    j.write_str("xOverhead-r17", xoverhead_r17.to_string());
  }
  j.end_obj();
}

const char* pdsch_cfg_broadcast_r17_s::mcs_table_r17_opts::to_string() const
{
  static const char* names[] = {"qam256", "qam64LowSE"};
  return convert_enum_idx(names, 2, value, "pdsch_cfg_broadcast_r17_s::mcs_table_r17_e_");
}
uint16_t pdsch_cfg_broadcast_r17_s::mcs_table_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {256, 64};
  return map_enum_number(numbers, 2, value, "pdsch_cfg_broadcast_r17_s::mcs_table_r17_e_");
}

const char* pdsch_cfg_broadcast_r17_s::xoverhead_r17_opts::to_string() const
{
  static const char* names[] = {"xOh6", "xOh12", "xOh18"};
  return convert_enum_idx(names, 3, value, "pdsch_cfg_broadcast_r17_s::xoverhead_r17_e_");
}
uint8_t pdsch_cfg_broadcast_r17_s::xoverhead_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {6, 12, 18};
  return map_enum_number(numbers, 3, value, "pdsch_cfg_broadcast_r17_s::xoverhead_r17_e_");
}

// RedCap-ConfigCommonSIB-r17 ::= SEQUENCE
SRSASN_CODE red_cap_cfg_common_sib_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(half_duplex_red_cap_allowed_r17_present, 1));
  HANDLE_CODE(bref.pack(cell_barred_red_cap_r17_present, 1));

  if (cell_barred_red_cap_r17_present) {
    HANDLE_CODE(cell_barred_red_cap_r17.cell_barred_red_cap1_rx_r17.pack(bref));
    HANDLE_CODE(cell_barred_red_cap_r17.cell_barred_red_cap2_rx_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE red_cap_cfg_common_sib_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(half_duplex_red_cap_allowed_r17_present, 1));
  HANDLE_CODE(bref.unpack(cell_barred_red_cap_r17_present, 1));

  if (cell_barred_red_cap_r17_present) {
    HANDLE_CODE(cell_barred_red_cap_r17.cell_barred_red_cap1_rx_r17.unpack(bref));
    HANDLE_CODE(cell_barred_red_cap_r17.cell_barred_red_cap2_rx_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void red_cap_cfg_common_sib_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (half_duplex_red_cap_allowed_r17_present) {
    j.write_str("halfDuplexRedCapAllowed-r17", "true");
  }
  if (cell_barred_red_cap_r17_present) {
    j.write_fieldname("cellBarredRedCap-r17");
    j.start_obj();
    j.write_str("cellBarredRedCap1Rx-r17", cell_barred_red_cap_r17.cell_barred_red_cap1_rx_r17.to_string());
    j.write_str("cellBarredRedCap2Rx-r17", cell_barred_red_cap_r17.cell_barred_red_cap2_rx_r17.to_string());
    j.end_obj();
  }
  j.end_obj();
}

const char*
red_cap_cfg_common_sib_r17_s::cell_barred_red_cap_r17_s_::cell_barred_red_cap1_rx_r17_opts::to_string() const
{
  static const char* names[] = {"barred", "notBarred"};
  return convert_enum_idx(
      names, 2, value, "red_cap_cfg_common_sib_r17_s::cell_barred_red_cap_r17_s_::cell_barred_red_cap1_rx_r17_e_");
}

const char*
red_cap_cfg_common_sib_r17_s::cell_barred_red_cap_r17_s_::cell_barred_red_cap2_rx_r17_opts::to_string() const
{
  static const char* names[] = {"barred", "notBarred"};
  return convert_enum_idx(
      names, 2, value, "red_cap_cfg_common_sib_r17_s::cell_barred_red_cap_r17_s_::cell_barred_red_cap2_rx_r17_e_");
}

// ReferenceTime-r16 ::= SEQUENCE
SRSASN_CODE ref_time_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, ref_days_r16, (uint32_t)0u, (uint32_t)72999u));
  HANDLE_CODE(pack_integer(bref, ref_seconds_r16, (uint32_t)0u, (uint32_t)86399u));
  HANDLE_CODE(pack_integer(bref, ref_milli_seconds_r16, (uint16_t)0u, (uint16_t)999u));
  HANDLE_CODE(pack_integer(bref, ref_ten_nano_seconds_r16, (uint32_t)0u, (uint32_t)99999u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ref_time_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(ref_days_r16, bref, (uint32_t)0u, (uint32_t)72999u));
  HANDLE_CODE(unpack_integer(ref_seconds_r16, bref, (uint32_t)0u, (uint32_t)86399u));
  HANDLE_CODE(unpack_integer(ref_milli_seconds_r16, bref, (uint16_t)0u, (uint16_t)999u));
  HANDLE_CODE(unpack_integer(ref_ten_nano_seconds_r16, bref, (uint32_t)0u, (uint32_t)99999u));

  return SRSASN_SUCCESS;
}
void ref_time_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("refDays-r16", ref_days_r16);
  j.write_int("refSeconds-r16", ref_seconds_r16);
  j.write_int("refMilliSeconds-r16", ref_milli_seconds_r16);
  j.write_int("refTenNanoSeconds-r16", ref_ten_nano_seconds_r16);
  j.end_obj();
}

// SDT-ConfigCommonSIB-r17 ::= SEQUENCE
SRSASN_CODE sdt_cfg_common_sib_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sdt_rsrp_thres_r17_present, 1));
  HANDLE_CODE(bref.pack(sdt_lc_ch_sr_delay_timer_r17_present, 1));

  if (sdt_rsrp_thres_r17_present) {
    HANDLE_CODE(pack_integer(bref, sdt_rsrp_thres_r17, (uint8_t)0u, (uint8_t)127u));
  }
  if (sdt_lc_ch_sr_delay_timer_r17_present) {
    HANDLE_CODE(sdt_lc_ch_sr_delay_timer_r17.pack(bref));
  }
  HANDLE_CODE(sdt_data_volume_thres_r17.pack(bref));
  HANDLE_CODE(t319a_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sdt_cfg_common_sib_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sdt_rsrp_thres_r17_present, 1));
  HANDLE_CODE(bref.unpack(sdt_lc_ch_sr_delay_timer_r17_present, 1));

  if (sdt_rsrp_thres_r17_present) {
    HANDLE_CODE(unpack_integer(sdt_rsrp_thres_r17, bref, (uint8_t)0u, (uint8_t)127u));
  }
  if (sdt_lc_ch_sr_delay_timer_r17_present) {
    HANDLE_CODE(sdt_lc_ch_sr_delay_timer_r17.unpack(bref));
  }
  HANDLE_CODE(sdt_data_volume_thres_r17.unpack(bref));
  HANDLE_CODE(t319a_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void sdt_cfg_common_sib_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sdt_rsrp_thres_r17_present) {
    j.write_int("sdt-RSRP-Threshold-r17", sdt_rsrp_thres_r17);
  }
  if (sdt_lc_ch_sr_delay_timer_r17_present) {
    j.write_str("sdt-LogicalChannelSR-DelayTimer-r17", sdt_lc_ch_sr_delay_timer_r17.to_string());
  }
  j.write_str("sdt-DataVolumeThreshold-r17", sdt_data_volume_thres_r17.to_string());
  j.write_str("t319a-r17", t319a_r17.to_string());
  j.end_obj();
}

const char* sdt_cfg_common_sib_r17_s::sdt_lc_ch_sr_delay_timer_r17_opts::to_string() const
{
  static const char* names[] = {"sf20", "sf40", "sf64", "sf128", "sf512", "sf1024", "sf2560", "spare1"};
  return convert_enum_idx(names, 8, value, "sdt_cfg_common_sib_r17_s::sdt_lc_ch_sr_delay_timer_r17_e_");
}
uint16_t sdt_cfg_common_sib_r17_s::sdt_lc_ch_sr_delay_timer_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {20, 40, 64, 128, 512, 1024, 2560};
  return map_enum_number(numbers, 7, value, "sdt_cfg_common_sib_r17_s::sdt_lc_ch_sr_delay_timer_r17_e_");
}

const char* sdt_cfg_common_sib_r17_s::sdt_data_volume_thres_r17_opts::to_string() const
{
  static const char* names[] = {"byte32",
                                "byte100",
                                "byte200",
                                "byte400",
                                "byte600",
                                "byte800",
                                "byte1000",
                                "byte2000",
                                "byte4000",
                                "byte8000",
                                "byte9000",
                                "byte10000",
                                "byte12000",
                                "byte24000",
                                "byte48000",
                                "byte96000"};
  return convert_enum_idx(names, 16, value, "sdt_cfg_common_sib_r17_s::sdt_data_volume_thres_r17_e_");
}
uint32_t sdt_cfg_common_sib_r17_s::sdt_data_volume_thres_r17_opts::to_number() const
{
  static const uint32_t numbers[] = {
      32, 100, 200, 400, 600, 800, 1000, 2000, 4000, 8000, 9000, 10000, 12000, 24000, 48000, 96000};
  return map_enum_number(numbers, 16, value, "sdt_cfg_common_sib_r17_s::sdt_data_volume_thres_r17_e_");
}

const char* sdt_cfg_common_sib_r17_s::t319a_r17_opts::to_string() const
{
  static const char* names[] = {"ms100",
                                "ms200",
                                "ms300",
                                "ms400",
                                "ms600",
                                "ms1000",
                                "ms2000",
                                "ms3000",
                                "ms4000",
                                "spare7",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "sdt_cfg_common_sib_r17_s::t319a_r17_e_");
}
uint16_t sdt_cfg_common_sib_r17_s::t319a_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 200, 300, 400, 600, 1000, 2000, 3000, 4000};
  return map_enum_number(numbers, 9, value, "sdt_cfg_common_sib_r17_s::t319a_r17_e_");
}

// SI-SchedulingInfo-v1700 ::= SEQUENCE
SRSASN_CODE si_sched_info_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(dummy_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, sched_info_list2_r17, 1, 32));
  if (dummy_present) {
    HANDLE_CODE(dummy.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE si_sched_info_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(dummy_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(sched_info_list2_r17, bref, 1, 32));
  if (dummy_present) {
    HANDLE_CODE(dummy.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void si_sched_info_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("schedulingInfoList2-r17");
  for (const auto& e1 : sched_info_list2_r17) {
    e1.to_json(j);
  }
  j.end_array();
  if (dummy_present) {
    j.write_fieldname("dummy");
    dummy.to_json(j);
  }
  j.end_obj();
}

// SIB-TypeInfo ::= SEQUENCE
SRSASN_CODE sib_type_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(value_tag_present, 1));
  HANDLE_CODE(bref.pack(area_scope_present, 1));

  HANDLE_CODE(type.pack(bref));
  if (value_tag_present) {
    HANDLE_CODE(pack_integer(bref, value_tag, (uint8_t)0u, (uint8_t)31u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib_type_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(value_tag_present, 1));
  HANDLE_CODE(bref.unpack(area_scope_present, 1));

  HANDLE_CODE(type.unpack(bref));
  if (value_tag_present) {
    HANDLE_CODE(unpack_integer(value_tag, bref, (uint8_t)0u, (uint8_t)31u));
  }

  return SRSASN_SUCCESS;
}
void sib_type_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("type", type.to_string());
  if (value_tag_present) {
    j.write_int("valueTag", value_tag);
  }
  if (area_scope_present) {
    j.write_str("areaScope", "true");
  }
  j.end_obj();
}

const char* sib_type_info_s::type_opts::to_string() const
{
  static const char* names[] = {"sibType2",
                                "sibType3",
                                "sibType4",
                                "sibType5",
                                "sibType6",
                                "sibType7",
                                "sibType8",
                                "sibType9",
                                "sibType10-v1610",
                                "sibType11-v1610",
                                "sibType12-v1610",
                                "sibType13-v1610",
                                "sibType14-v1610",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "sib_type_info_s::type_e_");
}
uint8_t sib_type_info_s::type_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
  return map_enum_number(numbers, 13, value, "sib_type_info_s::type_e_");
}

// SIB1-v1740-IEs ::= SEQUENCE
SRSASN_CODE sib1_v1740_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(si_sched_info_v1740_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (si_sched_info_v1740_present) {
    HANDLE_CODE(si_sched_info_v1740.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib1_v1740_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(si_sched_info_v1740_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (si_sched_info_v1740_present) {
    HANDLE_CODE(si_sched_info_v1740.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib1_v1740_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (si_sched_info_v1740_present) {
    j.write_fieldname("si-SchedulingInfo-v1740");
    si_sched_info_v1740.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// UAC-BarringPerCat ::= SEQUENCE
SRSASN_CODE uac_barr_per_cat_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, access_category, (uint8_t)1u, (uint8_t)63u));
  HANDLE_CODE(pack_integer(bref, uac_barr_info_set_idx, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE uac_barr_per_cat_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(access_category, bref, (uint8_t)1u, (uint8_t)63u));
  HANDLE_CODE(unpack_integer(uac_barr_info_set_idx, bref, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
void uac_barr_per_cat_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("accessCategory", access_category);
  j.write_int("uac-barringInfoSetIndex", uac_barr_info_set_idx);
  j.end_obj();
}

// ApplicableDisasterInfo-r17 ::= CHOICE
void applicable_disaster_info_r17_c::set(types::options e)
{
  type_ = e;
}
void applicable_disaster_info_r17_c::set_no_disaster_roaming_r17()
{
  set(types::no_disaster_roaming_r17);
}
void applicable_disaster_info_r17_c::set_disaster_related_ind_r17()
{
  set(types::disaster_related_ind_r17);
}
void applicable_disaster_info_r17_c::set_common_plmns_r17()
{
  set(types::common_plmns_r17);
}
applicable_disaster_info_r17_c::ded_plmns_r17_l_& applicable_disaster_info_r17_c::set_ded_plmns_r17()
{
  set(types::ded_plmns_r17);
  return c;
}
void applicable_disaster_info_r17_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::no_disaster_roaming_r17:
      break;
    case types::disaster_related_ind_r17:
      break;
    case types::common_plmns_r17:
      break;
    case types::ded_plmns_r17:
      j.start_array("dedicatedPLMNs-r17");
      for (const auto& e1 : c) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "applicable_disaster_info_r17_c");
  }
  j.end_obj();
}
SRSASN_CODE applicable_disaster_info_r17_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::no_disaster_roaming_r17:
      break;
    case types::disaster_related_ind_r17:
      break;
    case types::common_plmns_r17:
      break;
    case types::ded_plmns_r17:
      HANDLE_CODE(pack_dyn_seq_of(bref, c, 1, 12));
      break;
    default:
      log_invalid_choice_id(type_, "applicable_disaster_info_r17_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE applicable_disaster_info_r17_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::no_disaster_roaming_r17:
      break;
    case types::disaster_related_ind_r17:
      break;
    case types::common_plmns_r17:
      break;
    case types::ded_plmns_r17:
      HANDLE_CODE(unpack_dyn_seq_of(c, bref, 1, 12));
      break;
    default:
      log_invalid_choice_id(type_, "applicable_disaster_info_r17_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* applicable_disaster_info_r17_c::types_opts::to_string() const
{
  static const char* names[] = {
      "noDisasterRoaming-r17", "disasterRelatedIndication-r17", "commonPLMNs-r17", "dedicatedPLMNs-r17"};
  return convert_enum_idx(names, 4, value, "applicable_disaster_info_r17_c::types");
}

// CFR-ConfigMCCH-MTCH-r17 ::= SEQUENCE
SRSASN_CODE cfr_cfg_mcch_mtch_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(location_and_bw_broadcast_r17_present, 1));
  HANDLE_CODE(bref.pack(pdsch_cfg_mcch_r17_present, 1));
  HANDLE_CODE(bref.pack(common_coreset_ext_r17_present, 1));

  if (location_and_bw_broadcast_r17_present) {
    HANDLE_CODE(location_and_bw_broadcast_r17.pack(bref));
  }
  if (pdsch_cfg_mcch_r17_present) {
    HANDLE_CODE(pdsch_cfg_mcch_r17.pack(bref));
  }
  if (common_coreset_ext_r17_present) {
    HANDLE_CODE(common_coreset_ext_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cfr_cfg_mcch_mtch_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(location_and_bw_broadcast_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_cfg_mcch_r17_present, 1));
  HANDLE_CODE(bref.unpack(common_coreset_ext_r17_present, 1));

  if (location_and_bw_broadcast_r17_present) {
    HANDLE_CODE(location_and_bw_broadcast_r17.unpack(bref));
  }
  if (pdsch_cfg_mcch_r17_present) {
    HANDLE_CODE(pdsch_cfg_mcch_r17.unpack(bref));
  }
  if (common_coreset_ext_r17_present) {
    HANDLE_CODE(common_coreset_ext_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cfr_cfg_mcch_mtch_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (location_and_bw_broadcast_r17_present) {
    j.write_fieldname("locationAndBandwidthBroadcast-r17");
    location_and_bw_broadcast_r17.to_json(j);
  }
  if (pdsch_cfg_mcch_r17_present) {
    j.write_fieldname("pdsch-ConfigMCCH-r17");
    pdsch_cfg_mcch_r17.to_json(j);
  }
  if (common_coreset_ext_r17_present) {
    j.write_fieldname("commonControlResourceSetExt-r17");
    common_coreset_ext_r17.to_json(j);
  }
  j.end_obj();
}

// GIN-Element-r17 ::= SEQUENCE
SRSASN_CODE gin_elem_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(plmn_id_r17.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, nid_list_r17, 1, 24));

  return SRSASN_SUCCESS;
}
SRSASN_CODE gin_elem_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(plmn_id_r17.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(nid_list_r17, bref, 1, 24));

  return SRSASN_SUCCESS;
}
void gin_elem_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("plmn-Identity-r17");
  plmn_id_r17.to_json(j);
  j.start_array("nid-List-r17");
  for (const auto& e1 : nid_list_r17) {
    j.write_str(e1.to_string());
  }
  j.end_array();
  j.end_obj();
}

// GINs-PerSNPN-r17 ::= SEQUENCE
SRSASN_CODE gi_ns_per_sn_pn_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(supported_gi_ns_r17_present, 1));

  if (supported_gi_ns_r17_present) {
    HANDLE_CODE(supported_gi_ns_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gi_ns_per_sn_pn_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(supported_gi_ns_r17_present, 1));

  if (supported_gi_ns_r17_present) {
    HANDLE_CODE(supported_gi_ns_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void gi_ns_per_sn_pn_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (supported_gi_ns_r17_present) {
    j.write_str("supportedGINs-r17", supported_gi_ns_r17.to_string());
  }
  j.end_obj();
}

// IntraFreqCAG-CellListPerPLMN-r16 ::= SEQUENCE
SRSASN_CODE intra_freq_cag_cell_list_per_plmn_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, plmn_id_idx_r16, (uint8_t)1u, (uint8_t)12u));
  HANDLE_CODE(pack_dyn_seq_of(bref, cag_cell_list_r16, 1, 16));

  return SRSASN_SUCCESS;
}
SRSASN_CODE intra_freq_cag_cell_list_per_plmn_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(plmn_id_idx_r16, bref, (uint8_t)1u, (uint8_t)12u));
  HANDLE_CODE(unpack_dyn_seq_of(cag_cell_list_r16, bref, 1, 16));

  return SRSASN_SUCCESS;
}
void intra_freq_cag_cell_list_per_plmn_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("plmn-IdentityIndex-r16", plmn_id_idx_r16);
  j.start_array("cag-CellList-r16");
  for (const auto& e1 : cag_cell_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// MCCH-Config-r17 ::= SEQUENCE
SRSASN_CODE mcch_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mcch_win_dur_r17_present, 1));

  HANDLE_CODE(mcch_repeat_period_and_offset_r17.pack(bref));
  HANDLE_CODE(pack_integer(bref, mcch_win_start_slot_r17, (uint8_t)0u, (uint8_t)79u));
  if (mcch_win_dur_r17_present) {
    HANDLE_CODE(mcch_win_dur_r17.pack(bref));
  }
  HANDLE_CODE(mcch_mod_period_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mcch_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(mcch_win_dur_r17_present, 1));

  HANDLE_CODE(mcch_repeat_period_and_offset_r17.unpack(bref));
  HANDLE_CODE(unpack_integer(mcch_win_start_slot_r17, bref, (uint8_t)0u, (uint8_t)79u));
  if (mcch_win_dur_r17_present) {
    HANDLE_CODE(mcch_win_dur_r17.unpack(bref));
  }
  HANDLE_CODE(mcch_mod_period_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void mcch_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("mcch-RepetitionPeriodAndOffset-r17");
  mcch_repeat_period_and_offset_r17.to_json(j);
  j.write_int("mcch-WindowStartSlot-r17", mcch_win_start_slot_r17);
  if (mcch_win_dur_r17_present) {
    j.write_str("mcch-WindowDuration-r17", mcch_win_dur_r17.to_string());
  }
  j.write_str("mcch-ModificationPeriod-r17", mcch_mod_period_r17.to_string());
  j.end_obj();
}

const char* mcch_cfg_r17_s::mcch_win_dur_r17_opts::to_string() const
{
  static const char* names[] = {"sl2", "sl4", "sl8", "sl10", "sl20", "sl40", "sl80", "sl160"};
  return convert_enum_idx(names, 8, value, "mcch_cfg_r17_s::mcch_win_dur_r17_e_");
}
uint8_t mcch_cfg_r17_s::mcch_win_dur_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 10, 20, 40, 80, 160};
  return map_enum_number(numbers, 8, value, "mcch_cfg_r17_s::mcch_win_dur_r17_e_");
}

const char* mcch_cfg_r17_s::mcch_mod_period_r17_opts::to_string() const
{
  static const char* names[] = {"rf2",
                                "rf4",
                                "rf8",
                                "rf16",
                                "rf32",
                                "rf64",
                                "rf128",
                                "rf256",
                                "rf512",
                                "rf1024",
                                "r2048",
                                "rf4096",
                                "rf8192",
                                "rf16384",
                                "rf32768",
                                "rf65536"};
  return convert_enum_idx(names, 16, value, "mcch_cfg_r17_s::mcch_mod_period_r17_e_");
}
uint32_t mcch_cfg_r17_s::mcch_mod_period_r17_opts::to_number() const
{
  static const uint32_t numbers[] = {2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536};
  return map_enum_number(numbers, 16, value, "mcch_cfg_r17_s::mcch_mod_period_r17_e_");
}

// MeasIdleConfigSIB-r16 ::= SEQUENCE
SRSASN_CODE meas_idle_cfg_sib_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_idle_carrier_list_nr_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_idle_carrier_list_eutra_r16.size() > 0, 1));

  if (meas_idle_carrier_list_nr_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_idle_carrier_list_nr_r16, 1, 8));
  }
  if (meas_idle_carrier_list_eutra_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_idle_carrier_list_eutra_r16, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_idle_cfg_sib_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool meas_idle_carrier_list_nr_r16_present;
  HANDLE_CODE(bref.unpack(meas_idle_carrier_list_nr_r16_present, 1));
  bool meas_idle_carrier_list_eutra_r16_present;
  HANDLE_CODE(bref.unpack(meas_idle_carrier_list_eutra_r16_present, 1));

  if (meas_idle_carrier_list_nr_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_idle_carrier_list_nr_r16, bref, 1, 8));
  }
  if (meas_idle_carrier_list_eutra_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_idle_carrier_list_eutra_r16, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void meas_idle_cfg_sib_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_idle_carrier_list_nr_r16.size() > 0) {
    j.start_array("measIdleCarrierListNR-r16");
    for (const auto& e1 : meas_idle_carrier_list_nr_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_idle_carrier_list_eutra_r16.size() > 0) {
    j.start_array("measIdleCarrierListEUTRA-r16");
    for (const auto& e1 : meas_idle_carrier_list_eutra_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// MobilityStateParameters ::= SEQUENCE
SRSASN_CODE mob_state_params_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(t_eval.pack(bref));
  HANDLE_CODE(t_hyst_normal.pack(bref));
  HANDLE_CODE(pack_integer(bref, n_cell_change_medium, (uint8_t)1u, (uint8_t)16u));
  HANDLE_CODE(pack_integer(bref, n_cell_change_high, (uint8_t)1u, (uint8_t)16u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mob_state_params_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(t_eval.unpack(bref));
  HANDLE_CODE(t_hyst_normal.unpack(bref));
  HANDLE_CODE(unpack_integer(n_cell_change_medium, bref, (uint8_t)1u, (uint8_t)16u));
  HANDLE_CODE(unpack_integer(n_cell_change_high, bref, (uint8_t)1u, (uint8_t)16u));

  return SRSASN_SUCCESS;
}
void mob_state_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("t-Evaluation", t_eval.to_string());
  j.write_str("t-HystNormal", t_hyst_normal.to_string());
  j.write_int("n-CellChangeMedium", n_cell_change_medium);
  j.write_int("n-CellChangeHigh", n_cell_change_high);
  j.end_obj();
}

const char* mob_state_params_s::t_eval_opts::to_string() const
{
  static const char* names[] = {"s30", "s60", "s120", "s180", "s240", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "mob_state_params_s::t_eval_e_");
}
uint8_t mob_state_params_s::t_eval_opts::to_number() const
{
  static const uint8_t numbers[] = {30, 60, 120, 180, 240};
  return map_enum_number(numbers, 5, value, "mob_state_params_s::t_eval_e_");
}

const char* mob_state_params_s::t_hyst_normal_opts::to_string() const
{
  static const char* names[] = {"s30", "s60", "s120", "s180", "s240", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "mob_state_params_s::t_hyst_normal_e_");
}
uint8_t mob_state_params_s::t_hyst_normal_opts::to_number() const
{
  static const uint8_t numbers[] = {30, 60, 120, 180, 240};
  return map_enum_number(numbers, 5, value, "mob_state_params_s::t_hyst_normal_e_");
}

// NPN-IdentityInfo-r16 ::= SEQUENCE
SRSASN_CODE npn_id_info_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ranac_r16_present, 1));
  HANDLE_CODE(bref.pack(iab_support_r16_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, npn_id_list_r16, 1, 12));
  HANDLE_CODE(tac_r16.pack(bref));
  if (ranac_r16_present) {
    HANDLE_CODE(pack_integer(bref, ranac_r16, (uint16_t)0u, (uint16_t)255u));
  }
  HANDLE_CODE(cell_id_r16.pack(bref));
  HANDLE_CODE(cell_reserved_for_oper_r16.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= gnb_id_len_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(gnb_id_len_r17_present, 1));
      if (gnb_id_len_r17_present) {
        HANDLE_CODE(pack_integer(bref, gnb_id_len_r17, (uint8_t)22u, (uint8_t)32u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE npn_id_info_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ranac_r16_present, 1));
  HANDLE_CODE(bref.unpack(iab_support_r16_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(npn_id_list_r16, bref, 1, 12));
  HANDLE_CODE(tac_r16.unpack(bref));
  if (ranac_r16_present) {
    HANDLE_CODE(unpack_integer(ranac_r16, bref, (uint16_t)0u, (uint16_t)255u));
  }
  HANDLE_CODE(cell_id_r16.unpack(bref));
  HANDLE_CODE(cell_reserved_for_oper_r16.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(gnb_id_len_r17_present, 1));
      if (gnb_id_len_r17_present) {
        HANDLE_CODE(unpack_integer(gnb_id_len_r17, bref, (uint8_t)22u, (uint8_t)32u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void npn_id_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("npn-IdentityList-r16");
  for (const auto& e1 : npn_id_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_str("trackingAreaCode-r16", tac_r16.to_string());
  if (ranac_r16_present) {
    j.write_int("ranac-r16", ranac_r16);
  }
  j.write_str("cellIdentity-r16", cell_id_r16.to_string());
  j.write_str("cellReservedForOperatorUse-r16", cell_reserved_for_oper_r16.to_string());
  if (iab_support_r16_present) {
    j.write_str("iab-Support-r16", "true");
  }
  if (ext) {
    if (gnb_id_len_r17_present) {
      j.write_int("gNB-ID-Length-r17", gnb_id_len_r17);
    }
  }
  j.end_obj();
}

const char* npn_id_info_r16_s::cell_reserved_for_oper_r16_opts::to_string() const
{
  static const char* names[] = {"reserved", "notReserved"};
  return convert_enum_idx(names, 2, value, "npn_id_info_r16_s::cell_reserved_for_oper_r16_e_");
}

const char* pcch_cfg_s::nand_paging_frame_offset_c_::types_opts::to_string() const
{
  static const char* names[] = {"oneT", "halfT", "quarterT", "oneEighthT", "oneSixteenthT"};
  return convert_enum_idx(names, 5, value, "pcch_cfg_s::nand_paging_frame_offset_c_::types");
}
float pcch_cfg_s::nand_paging_frame_offset_c_::types_opts::to_number() const
{
  static const float numbers[] = {1.0, 0.5, 0.25, 0.125, 0.0625};
  return map_enum_number(numbers, 5, value, "pcch_cfg_s::nand_paging_frame_offset_c_::types");
}
const char* pcch_cfg_s::nand_paging_frame_offset_c_::types_opts::to_number_string() const
{
  static const char* number_strs[] = {"1", "0.5", "0.25", "1/8", "1/16"};
  return convert_enum_idx(number_strs, 5, value, "pcch_cfg_s::nand_paging_frame_offset_c_::types");
}

const char* pcch_cfg_s::first_pdcch_monitoring_occasion_of_po_c_::types_opts::to_string() const
{
  static const char* names[] = {"sCS15KHZoneT",
                                "sCS30KHZoneT-SCS15KHZhalfT",
                                "sCS60KHZoneT-SCS30KHZhalfT-SCS15KHZquarterT",
                                "sCS120KHZoneT-SCS60KHZhalfT-SCS30KHZquarterT-SCS15KHZoneEighthT",
                                "sCS120KHZhalfT-SCS60KHZquarterT-SCS30KHZoneEighthT-SCS15KHZoneSixteenthT",
                                "sCS480KHZoneT-SCS120KHZquarterT-SCS60KHZoneEighthT-SCS30KHZoneSixteenthT",
                                "sCS480KHZhalfT-SCS120KHZoneEighthT-SCS60KHZoneSixteenthT",
                                "sCS480KHZquarterT-SCS120KHZoneSixteenthT"};
  return convert_enum_idx(names, 8, value, "pcch_cfg_s::first_pdcch_monitoring_occasion_of_po_c_::types");
}

const char* pcch_cfg_s::first_pdcch_monitoring_occasion_of_po_v1710_c_::types_opts::to_string() const
{
  static const char* names[] = {"sCS480KHZoneEighthT", "sCS480KHZoneSixteenthT"};
  return convert_enum_idx(names, 2, value, "pcch_cfg_s::first_pdcch_monitoring_occasion_of_po_v1710_c_::types");
}

// PLMN-IdentityInfo ::= SEQUENCE
SRSASN_CODE plmn_id_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(tac_present, 1));
  HANDLE_CODE(bref.pack(ranac_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, plmn_id_list, 1, 12));
  if (tac_present) {
    HANDLE_CODE(tac.pack(bref));
  }
  if (ranac_present) {
    HANDLE_CODE(pack_integer(bref, ranac, (uint16_t)0u, (uint16_t)255u));
  }
  HANDLE_CODE(cell_id.pack(bref));
  HANDLE_CODE(cell_reserved_for_oper.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= iab_support_r16_present;
    group_flags[1] |= tracking_area_list_r17.is_present();
    group_flags[1] |= gnb_id_len_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(iab_support_r16_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(tracking_area_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(gnb_id_len_r17_present, 1));
      if (tracking_area_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *tracking_area_list_r17, 1, 12));
      }
      if (gnb_id_len_r17_present) {
        HANDLE_CODE(pack_integer(bref, gnb_id_len_r17, (uint8_t)22u, (uint8_t)32u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE plmn_id_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(tac_present, 1));
  HANDLE_CODE(bref.unpack(ranac_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(plmn_id_list, bref, 1, 12));
  if (tac_present) {
    HANDLE_CODE(tac.unpack(bref));
  }
  if (ranac_present) {
    HANDLE_CODE(unpack_integer(ranac, bref, (uint16_t)0u, (uint16_t)255u));
  }
  HANDLE_CODE(cell_id.unpack(bref));
  HANDLE_CODE(cell_reserved_for_oper.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(iab_support_r16_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(tracking_area_list_r17, bref);
      HANDLE_CODE(bref.unpack(gnb_id_len_r17_present, 1));
      if (tracking_area_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*tracking_area_list_r17, bref, 1, 12));
      }
      if (gnb_id_len_r17_present) {
        HANDLE_CODE(unpack_integer(gnb_id_len_r17, bref, (uint8_t)22u, (uint8_t)32u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void plmn_id_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("plmn-IdentityList");
  for (const auto& e1 : plmn_id_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (tac_present) {
    j.write_str("trackingAreaCode", tac.to_string());
  }
  if (ranac_present) {
    j.write_int("ranac", ranac);
  }
  j.write_str("cellIdentity", cell_id.to_string());
  j.write_str("cellReservedForOperatorUse", cell_reserved_for_oper.to_string());
  if (ext) {
    if (iab_support_r16_present) {
      j.write_str("iab-Support-r16", "true");
    }
    if (tracking_area_list_r17.is_present()) {
      j.start_array("trackingAreaList-r17");
      for (const auto& e1 : *tracking_area_list_r17) {
        j.write_str(e1.to_string());
      }
      j.end_array();
    }
    if (gnb_id_len_r17_present) {
      j.write_int("gNB-ID-Length-r17", gnb_id_len_r17);
    }
  }
  j.end_obj();
}

const char* plmn_id_info_s::cell_reserved_for_oper_opts::to_string() const
{
  static const char* names[] = {"reserved", "notReserved"};
  return convert_enum_idx(names, 2, value, "plmn_id_info_s::cell_reserved_for_oper_e_");
}

// PosSchedulingInfo-r16 ::= SEQUENCE
SRSASN_CODE pos_sched_info_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(offset_to_si_used_r16_present, 1));

  HANDLE_CODE(pos_si_periodicity_r16.pack(bref));
  HANDLE_CODE(pos_si_broadcast_status_r16.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, pos_sib_map_info_r16, 1, 32));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pos_sched_info_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(offset_to_si_used_r16_present, 1));

  HANDLE_CODE(pos_si_periodicity_r16.unpack(bref));
  HANDLE_CODE(pos_si_broadcast_status_r16.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(pos_sib_map_info_r16, bref, 1, 32));

  return SRSASN_SUCCESS;
}
void pos_sched_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (offset_to_si_used_r16_present) {
    j.write_str("offsetToSI-Used-r16", "true");
  }
  j.write_str("posSI-Periodicity-r16", pos_si_periodicity_r16.to_string());
  j.write_str("posSI-BroadcastStatus-r16", pos_si_broadcast_status_r16.to_string());
  j.start_array("posSIB-MappingInfo-r16");
  for (const auto& e1 : pos_sib_map_info_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

const char* pos_sched_info_r16_s::pos_si_periodicity_r16_opts::to_string() const
{
  static const char* names[] = {"rf8", "rf16", "rf32", "rf64", "rf128", "rf256", "rf512"};
  return convert_enum_idx(names, 7, value, "pos_sched_info_r16_s::pos_si_periodicity_r16_e_");
}
uint16_t pos_sched_info_r16_s::pos_si_periodicity_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {8, 16, 32, 64, 128, 256, 512};
  return map_enum_number(numbers, 7, value, "pos_sched_info_r16_s::pos_si_periodicity_r16_e_");
}

const char* pos_sched_info_r16_s::pos_si_broadcast_status_r16_opts::to_string() const
{
  static const char* names[] = {"broadcasting", "notBroadcasting"};
  return convert_enum_idx(names, 2, value, "pos_sched_info_r16_s::pos_si_broadcast_status_r16_e_");
}

// ReferenceTimeInfo-r16 ::= SEQUENCE
SRSASN_CODE ref_time_info_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(uncertainty_r16_present, 1));
  HANDLE_CODE(bref.pack(time_info_type_r16_present, 1));
  HANDLE_CODE(bref.pack(ref_sfn_r16_present, 1));

  HANDLE_CODE(time_r16.pack(bref));
  if (uncertainty_r16_present) {
    HANDLE_CODE(pack_integer(bref, uncertainty_r16, (uint16_t)0u, (uint16_t)32767u));
  }
  if (ref_sfn_r16_present) {
    HANDLE_CODE(pack_integer(bref, ref_sfn_r16, (uint16_t)0u, (uint16_t)1023u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ref_time_info_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(uncertainty_r16_present, 1));
  HANDLE_CODE(bref.unpack(time_info_type_r16_present, 1));
  HANDLE_CODE(bref.unpack(ref_sfn_r16_present, 1));

  HANDLE_CODE(time_r16.unpack(bref));
  if (uncertainty_r16_present) {
    HANDLE_CODE(unpack_integer(uncertainty_r16, bref, (uint16_t)0u, (uint16_t)32767u));
  }
  if (ref_sfn_r16_present) {
    HANDLE_CODE(unpack_integer(ref_sfn_r16, bref, (uint16_t)0u, (uint16_t)1023u));
  }

  return SRSASN_SUCCESS;
}
void ref_time_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("time-r16");
  time_r16.to_json(j);
  if (uncertainty_r16_present) {
    j.write_int("uncertainty-r16", uncertainty_r16);
  }
  if (time_info_type_r16_present) {
    j.write_str("timeInfoType-r16", "localClock");
  }
  if (ref_sfn_r16_present) {
    j.write_int("referenceSFN-r16", ref_sfn_r16);
  }
  j.end_obj();
}

// SIB1-v1700-IEs ::= SEQUENCE
SRSASN_CODE sib1_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(hsdn_cell_r17_present, 1));
  HANDLE_CODE(bref.pack(uac_barr_info_v1700_present, 1));
  HANDLE_CODE(bref.pack(sdt_cfg_common_r17_present, 1));
  HANDLE_CODE(bref.pack(red_cap_cfg_common_r17_present, 1));
  HANDLE_CODE(bref.pack(feature_priorities_r17_present, 1));
  HANDLE_CODE(bref.pack(si_sched_info_v1700_present, 1));
  HANDLE_CODE(bref.pack(hyper_sfn_r17_present, 1));
  HANDLE_CODE(bref.pack(edrx_allowed_idle_r17_present, 1));
  HANDLE_CODE(bref.pack(edrx_allowed_inactive_r17_present, 1));
  HANDLE_CODE(bref.pack(intra_freq_resel_red_cap_r17_present, 1));
  HANDLE_CODE(bref.pack(cell_barred_ntn_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (uac_barr_info_v1700_present) {
    HANDLE_CODE(pack_dyn_seq_of(bref, uac_barr_info_v1700.uac_barr_info_set_list_v1700, 1, 8));
  }
  if (sdt_cfg_common_r17_present) {
    HANDLE_CODE(sdt_cfg_common_r17.pack(bref));
  }
  if (red_cap_cfg_common_r17_present) {
    HANDLE_CODE(red_cap_cfg_common_r17.pack(bref));
  }
  if (feature_priorities_r17_present) {
    HANDLE_CODE(bref.pack(feature_priorities_r17.red_cap_prio_r17_present, 1));
    HANDLE_CODE(bref.pack(feature_priorities_r17.slicing_prio_r17_present, 1));
    HANDLE_CODE(bref.pack(feature_priorities_r17.msg3_repeats_prio_r17_present, 1));
    HANDLE_CODE(bref.pack(feature_priorities_r17.sdt_prio_r17_present, 1));
    if (feature_priorities_r17.red_cap_prio_r17_present) {
      HANDLE_CODE(pack_integer(bref, feature_priorities_r17.red_cap_prio_r17, (uint8_t)0u, (uint8_t)7u));
    }
    if (feature_priorities_r17.slicing_prio_r17_present) {
      HANDLE_CODE(pack_integer(bref, feature_priorities_r17.slicing_prio_r17, (uint8_t)0u, (uint8_t)7u));
    }
    if (feature_priorities_r17.msg3_repeats_prio_r17_present) {
      HANDLE_CODE(pack_integer(bref, feature_priorities_r17.msg3_repeats_prio_r17, (uint8_t)0u, (uint8_t)7u));
    }
    if (feature_priorities_r17.sdt_prio_r17_present) {
      HANDLE_CODE(pack_integer(bref, feature_priorities_r17.sdt_prio_r17, (uint8_t)0u, (uint8_t)7u));
    }
  }
  if (si_sched_info_v1700_present) {
    HANDLE_CODE(si_sched_info_v1700.pack(bref));
  }
  if (hyper_sfn_r17_present) {
    HANDLE_CODE(hyper_sfn_r17.pack(bref));
  }
  if (intra_freq_resel_red_cap_r17_present) {
    HANDLE_CODE(intra_freq_resel_red_cap_r17.pack(bref));
  }
  if (cell_barred_ntn_r17_present) {
    HANDLE_CODE(cell_barred_ntn_r17.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib1_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(hsdn_cell_r17_present, 1));
  HANDLE_CODE(bref.unpack(uac_barr_info_v1700_present, 1));
  HANDLE_CODE(bref.unpack(sdt_cfg_common_r17_present, 1));
  HANDLE_CODE(bref.unpack(red_cap_cfg_common_r17_present, 1));
  HANDLE_CODE(bref.unpack(feature_priorities_r17_present, 1));
  HANDLE_CODE(bref.unpack(si_sched_info_v1700_present, 1));
  HANDLE_CODE(bref.unpack(hyper_sfn_r17_present, 1));
  HANDLE_CODE(bref.unpack(edrx_allowed_idle_r17_present, 1));
  HANDLE_CODE(bref.unpack(edrx_allowed_inactive_r17_present, 1));
  HANDLE_CODE(bref.unpack(intra_freq_resel_red_cap_r17_present, 1));
  HANDLE_CODE(bref.unpack(cell_barred_ntn_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (uac_barr_info_v1700_present) {
    HANDLE_CODE(unpack_dyn_seq_of(uac_barr_info_v1700.uac_barr_info_set_list_v1700, bref, 1, 8));
  }
  if (sdt_cfg_common_r17_present) {
    HANDLE_CODE(sdt_cfg_common_r17.unpack(bref));
  }
  if (red_cap_cfg_common_r17_present) {
    HANDLE_CODE(red_cap_cfg_common_r17.unpack(bref));
  }
  if (feature_priorities_r17_present) {
    HANDLE_CODE(bref.unpack(feature_priorities_r17.red_cap_prio_r17_present, 1));
    HANDLE_CODE(bref.unpack(feature_priorities_r17.slicing_prio_r17_present, 1));
    HANDLE_CODE(bref.unpack(feature_priorities_r17.msg3_repeats_prio_r17_present, 1));
    HANDLE_CODE(bref.unpack(feature_priorities_r17.sdt_prio_r17_present, 1));
    if (feature_priorities_r17.red_cap_prio_r17_present) {
      HANDLE_CODE(unpack_integer(feature_priorities_r17.red_cap_prio_r17, bref, (uint8_t)0u, (uint8_t)7u));
    }
    if (feature_priorities_r17.slicing_prio_r17_present) {
      HANDLE_CODE(unpack_integer(feature_priorities_r17.slicing_prio_r17, bref, (uint8_t)0u, (uint8_t)7u));
    }
    if (feature_priorities_r17.msg3_repeats_prio_r17_present) {
      HANDLE_CODE(unpack_integer(feature_priorities_r17.msg3_repeats_prio_r17, bref, (uint8_t)0u, (uint8_t)7u));
    }
    if (feature_priorities_r17.sdt_prio_r17_present) {
      HANDLE_CODE(unpack_integer(feature_priorities_r17.sdt_prio_r17, bref, (uint8_t)0u, (uint8_t)7u));
    }
  }
  if (si_sched_info_v1700_present) {
    HANDLE_CODE(si_sched_info_v1700.unpack(bref));
  }
  if (hyper_sfn_r17_present) {
    HANDLE_CODE(hyper_sfn_r17.unpack(bref));
  }
  if (intra_freq_resel_red_cap_r17_present) {
    HANDLE_CODE(intra_freq_resel_red_cap_r17.unpack(bref));
  }
  if (cell_barred_ntn_r17_present) {
    HANDLE_CODE(cell_barred_ntn_r17.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib1_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (hsdn_cell_r17_present) {
    j.write_str("hsdn-Cell-r17", "true");
  }
  if (uac_barr_info_v1700_present) {
    j.write_fieldname("uac-BarringInfo-v1700");
    j.start_obj();
    j.start_array("uac-BarringInfoSetList-v1700");
    for (const auto& e1 : uac_barr_info_v1700.uac_barr_info_set_list_v1700) {
      e1.to_json(j);
    }
    j.end_array();
    j.end_obj();
  }
  if (sdt_cfg_common_r17_present) {
    j.write_fieldname("sdt-ConfigCommon-r17");
    sdt_cfg_common_r17.to_json(j);
  }
  if (red_cap_cfg_common_r17_present) {
    j.write_fieldname("redCap-ConfigCommon-r17");
    red_cap_cfg_common_r17.to_json(j);
  }
  if (feature_priorities_r17_present) {
    j.write_fieldname("featurePriorities-r17");
    j.start_obj();
    if (feature_priorities_r17.red_cap_prio_r17_present) {
      j.write_int("redCapPriority-r17", feature_priorities_r17.red_cap_prio_r17);
    }
    if (feature_priorities_r17.slicing_prio_r17_present) {
      j.write_int("slicingPriority-r17", feature_priorities_r17.slicing_prio_r17);
    }
    if (feature_priorities_r17.msg3_repeats_prio_r17_present) {
      j.write_int("msg3-Repetitions-Priority-r17", feature_priorities_r17.msg3_repeats_prio_r17);
    }
    if (feature_priorities_r17.sdt_prio_r17_present) {
      j.write_int("sdt-Priority-r17", feature_priorities_r17.sdt_prio_r17);
    }
    j.end_obj();
  }
  if (si_sched_info_v1700_present) {
    j.write_fieldname("si-SchedulingInfo-v1700");
    si_sched_info_v1700.to_json(j);
  }
  if (hyper_sfn_r17_present) {
    j.write_str("hyperSFN-r17", hyper_sfn_r17.to_string());
  }
  if (edrx_allowed_idle_r17_present) {
    j.write_str("eDRX-AllowedIdle-r17", "true");
  }
  if (edrx_allowed_inactive_r17_present) {
    j.write_str("eDRX-AllowedInactive-r17", "true");
  }
  if (intra_freq_resel_red_cap_r17_present) {
    j.write_str("intraFreqReselectionRedCap-r17", intra_freq_resel_red_cap_r17.to_string());
  }
  if (cell_barred_ntn_r17_present) {
    j.write_str("cellBarredNTN-r17", cell_barred_ntn_r17.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

const char* sib1_v1700_ies_s::intra_freq_resel_red_cap_r17_opts::to_string() const
{
  static const char* names[] = {"allowed", "notAllowed"};
  return convert_enum_idx(names, 2, value, "sib1_v1700_ies_s::intra_freq_resel_red_cap_r17_e_");
}

const char* sib1_v1700_ies_s::cell_barred_ntn_r17_opts::to_string() const
{
  static const char* names[] = {"barred", "notBarred"};
  return convert_enum_idx(names, 2, value, "sib1_v1700_ies_s::cell_barred_ntn_r17_e_");
}

// UAC-AC1-SelectAssistInfo-r16 ::= ENUMERATED
const char* uac_ac1_select_assist_info_r16_opts::to_string() const
{
  static const char* names[] = {"a", "b", "c", "notConfigured"};
  return convert_enum_idx(names, 4, value, "uac_ac1_select_assist_info_r16_e");
}

// PosSI-SchedulingInfo-r16 ::= SEQUENCE
SRSASN_CODE pos_si_sched_info_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(pos_si_request_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(pos_si_request_cfg_sul_r16_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, pos_sched_info_list_r16, 1, 32));
  if (pos_si_request_cfg_r16_present) {
    HANDLE_CODE(pos_si_request_cfg_r16.pack(bref));
  }
  if (pos_si_request_cfg_sul_r16_present) {
    HANDLE_CODE(pos_si_request_cfg_sul_r16.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= pos_si_request_cfg_red_cap_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(pos_si_request_cfg_red_cap_r17.is_present(), 1));
      if (pos_si_request_cfg_red_cap_r17.is_present()) {
        HANDLE_CODE(pos_si_request_cfg_red_cap_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pos_si_sched_info_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(pos_si_request_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(pos_si_request_cfg_sul_r16_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(pos_sched_info_list_r16, bref, 1, 32));
  if (pos_si_request_cfg_r16_present) {
    HANDLE_CODE(pos_si_request_cfg_r16.unpack(bref));
  }
  if (pos_si_request_cfg_sul_r16_present) {
    HANDLE_CODE(pos_si_request_cfg_sul_r16.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(pos_si_request_cfg_red_cap_r17, bref);
      if (pos_si_request_cfg_red_cap_r17.is_present()) {
        HANDLE_CODE(pos_si_request_cfg_red_cap_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void pos_si_sched_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("posSchedulingInfoList-r16");
  for (const auto& e1 : pos_sched_info_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  if (pos_si_request_cfg_r16_present) {
    j.write_fieldname("posSI-RequestConfig-r16");
    pos_si_request_cfg_r16.to_json(j);
  }
  if (pos_si_request_cfg_sul_r16_present) {
    j.write_fieldname("posSI-RequestConfigSUL-r16");
    pos_si_request_cfg_sul_r16.to_json(j);
  }
  if (ext) {
    if (pos_si_request_cfg_red_cap_r17.is_present()) {
      j.write_fieldname("posSI-RequestConfigRedCap-r17");
      pos_si_request_cfg_red_cap_r17->to_json(j);
    }
  }
  j.end_obj();
}

// SIB1-v1630-IEs ::= SEQUENCE
SRSASN_CODE sib1_v1630_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(uac_barr_info_v1630_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (uac_barr_info_v1630_present) {
    HANDLE_CODE(pack_dyn_seq_of(bref, uac_barr_info_v1630.uac_ac1_select_assist_info_r16, 2, 12));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib1_v1630_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(uac_barr_info_v1630_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (uac_barr_info_v1630_present) {
    HANDLE_CODE(unpack_dyn_seq_of(uac_barr_info_v1630.uac_ac1_select_assist_info_r16, bref, 2, 12));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib1_v1630_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (uac_barr_info_v1630_present) {
    j.write_fieldname("uac-BarringInfo-v1630");
    j.start_obj();
    j.start_array("uac-AC1-SelectAssistInfo-r16");
    for (const auto& e1 : uac_barr_info_v1630.uac_ac1_select_assist_info_r16) {
      j.write_str(e1.to_string());
    }
    j.end_array();
    j.end_obj();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// SIB10-r16 ::= SEQUENCE
SRSASN_CODE sib10_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(hrnn_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  if (hrnn_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, hrnn_list_r16, 1, 12));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib10_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool hrnn_list_r16_present;
  HANDLE_CODE(bref.unpack(hrnn_list_r16_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  if (hrnn_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(hrnn_list_r16, bref, 1, 12));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib10_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (hrnn_list_r16.size() > 0) {
    j.start_array("hrnn-List-r16");
    for (const auto& e1 : hrnn_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

// SIB11-r16 ::= SEQUENCE
SRSASN_CODE sib11_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_idle_cfg_sib_r16_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  if (meas_idle_cfg_sib_r16_present) {
    HANDLE_CODE(meas_idle_cfg_sib_r16.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib11_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(meas_idle_cfg_sib_r16_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  if (meas_idle_cfg_sib_r16_present) {
    HANDLE_CODE(meas_idle_cfg_sib_r16.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib11_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_idle_cfg_sib_r16_present) {
    j.write_fieldname("measIdleConfigSIB-r16");
    meas_idle_cfg_sib_r16.to_json(j);
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

// SIB12-r16 ::= SEQUENCE
SRSASN_CODE sib12_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, segment_num_r16, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(segment_type_r16.pack(bref));
  HANDLE_CODE(segment_container_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib12_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(segment_num_r16, bref, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(segment_type_r16.unpack(bref));
  HANDLE_CODE(segment_container_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sib12_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("segmentNumber-r16", segment_num_r16);
  j.write_str("segmentType-r16", segment_type_r16.to_string());
  j.write_str("segmentContainer-r16", segment_container_r16.to_string());
  j.end_obj();
}

const char* sib12_r16_s::segment_type_r16_opts::to_string() const
{
  static const char* names[] = {"notLastSegment", "lastSegment"};
  return convert_enum_idx(names, 2, value, "sib12_r16_s::segment_type_r16_e_");
}

// SIB13-r16 ::= SEQUENCE
SRSASN_CODE sib13_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  HANDLE_CODE(sl_v2x_cfg_common_r16.pack(bref));
  HANDLE_CODE(dummy.pack(bref));
  HANDLE_CODE(tdd_cfg_r16.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib13_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  HANDLE_CODE(sl_v2x_cfg_common_r16.unpack(bref));
  HANDLE_CODE(dummy.unpack(bref));
  HANDLE_CODE(tdd_cfg_r16.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib13_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sl-V2X-ConfigCommon-r16", sl_v2x_cfg_common_r16.to_string());
  j.write_str("dummy", dummy.to_string());
  j.write_str("tdd-Config-r16", tdd_cfg_r16.to_string());
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

// SIB14-r16 ::= SEQUENCE
SRSASN_CODE sib14_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  HANDLE_CODE(sl_v2x_cfg_common_ext_r16.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib14_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  HANDLE_CODE(sl_v2x_cfg_common_ext_r16.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib14_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sl-V2X-ConfigCommonExt-r16", sl_v2x_cfg_common_ext_r16.to_string());
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

// SIB15-r17 ::= SEQUENCE
SRSASN_CODE sib15_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(common_plmns_with_disaster_condition_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(applicable_disaster_info_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  if (common_plmns_with_disaster_condition_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, common_plmns_with_disaster_condition_r17, 1, 12));
  }
  if (applicable_disaster_info_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, applicable_disaster_info_list_r17, 1, 12));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib15_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool common_plmns_with_disaster_condition_r17_present;
  HANDLE_CODE(bref.unpack(common_plmns_with_disaster_condition_r17_present, 1));
  bool applicable_disaster_info_list_r17_present;
  HANDLE_CODE(bref.unpack(applicable_disaster_info_list_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  if (common_plmns_with_disaster_condition_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(common_plmns_with_disaster_condition_r17, bref, 1, 12));
  }
  if (applicable_disaster_info_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(applicable_disaster_info_list_r17, bref, 1, 12));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib15_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (common_plmns_with_disaster_condition_r17.size() > 0) {
    j.start_array("commonPLMNsWithDisasterCondition-r17");
    for (const auto& e1 : common_plmns_with_disaster_condition_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (applicable_disaster_info_list_r17.size() > 0) {
    j.start_array("applicableDisasterInfoList-r17");
    for (const auto& e1 : applicable_disaster_info_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

// SIB16-r17 ::= SEQUENCE
SRSASN_CODE sib16_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(freq_prio_list_slicing_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  if (freq_prio_list_slicing_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, freq_prio_list_slicing_r17, 1, 9));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib16_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool freq_prio_list_slicing_r17_present;
  HANDLE_CODE(bref.unpack(freq_prio_list_slicing_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  if (freq_prio_list_slicing_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(freq_prio_list_slicing_r17, bref, 1, 9));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib16_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (freq_prio_list_slicing_r17.size() > 0) {
    j.start_array("freqPriorityListSlicing-r17");
    for (const auto& e1 : freq_prio_list_slicing_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

// SIB17-r17 ::= SEQUENCE
SRSASN_CODE sib17_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, segment_num_r17, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(segment_type_r17.pack(bref));
  HANDLE_CODE(segment_container_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib17_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(segment_num_r17, bref, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(segment_type_r17.unpack(bref));
  HANDLE_CODE(segment_container_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void sib17_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("segmentNumber-r17", segment_num_r17);
  j.write_str("segmentType-r17", segment_type_r17.to_string());
  j.write_str("segmentContainer-r17", segment_container_r17.to_string());
  j.end_obj();
}

const char* sib17_r17_s::segment_type_r17_opts::to_string() const
{
  static const char* names[] = {"notLastSegment", "lastSegment"};
  return convert_enum_idx(names, 2, value, "sib17_r17_s::segment_type_r17_e_");
}

// SIB18-r17 ::= SEQUENCE
SRSASN_CODE sib18_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(gin_elem_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(gins_per_sn_pn_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  if (gin_elem_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, gin_elem_list_r17, 1, 24));
  }
  if (gins_per_sn_pn_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, gins_per_sn_pn_list_r17, 1, 12));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib18_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool gin_elem_list_r17_present;
  HANDLE_CODE(bref.unpack(gin_elem_list_r17_present, 1));
  bool gins_per_sn_pn_list_r17_present;
  HANDLE_CODE(bref.unpack(gins_per_sn_pn_list_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  if (gin_elem_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(gin_elem_list_r17, bref, 1, 24));
  }
  if (gins_per_sn_pn_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(gins_per_sn_pn_list_r17, bref, 1, 12));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib18_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (gin_elem_list_r17.size() > 0) {
    j.start_array("gin-ElementList-r17");
    for (const auto& e1 : gin_elem_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (gins_per_sn_pn_list_r17.size() > 0) {
    j.start_array("gins-PerSNPN-List-r17");
    for (const auto& e1 : gins_per_sn_pn_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

// SIB19-r17 ::= SEQUENCE
SRSASN_CODE sib19_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ntn_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(t_service_r17_present, 1));
  HANDLE_CODE(bref.pack(ref_location_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(distance_thresh_r17_present, 1));
  HANDLE_CODE(bref.pack(ntn_neigh_cell_cfg_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  if (ntn_cfg_r17_present) {
    HANDLE_CODE(ntn_cfg_r17.pack(bref));
  }
  if (t_service_r17_present) {
    HANDLE_CODE(pack_integer(bref, t_service_r17, (uint64_t)0u, (uint64_t)549755813887u));
  }
  if (ref_location_r17.size() > 0) {
    HANDLE_CODE(ref_location_r17.pack(bref));
  }
  if (distance_thresh_r17_present) {
    HANDLE_CODE(pack_integer(bref, distance_thresh_r17, (uint16_t)0u, (uint16_t)65525u));
  }
  if (ntn_neigh_cell_cfg_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ntn_neigh_cell_cfg_list_r17, 1, 4));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ntn_neigh_cell_cfg_list_ext_v1720.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ntn_neigh_cell_cfg_list_ext_v1720.is_present(), 1));
      if (ntn_neigh_cell_cfg_list_ext_v1720.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *ntn_neigh_cell_cfg_list_ext_v1720, 1, 4));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sib19_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ntn_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(t_service_r17_present, 1));
  bool ref_location_r17_present;
  HANDLE_CODE(bref.unpack(ref_location_r17_present, 1));
  HANDLE_CODE(bref.unpack(distance_thresh_r17_present, 1));
  bool ntn_neigh_cell_cfg_list_r17_present;
  HANDLE_CODE(bref.unpack(ntn_neigh_cell_cfg_list_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  if (ntn_cfg_r17_present) {
    HANDLE_CODE(ntn_cfg_r17.unpack(bref));
  }
  if (t_service_r17_present) {
    HANDLE_CODE(unpack_integer(t_service_r17, bref, (uint64_t)0u, (uint64_t)549755813887u));
  }
  if (ref_location_r17_present) {
    HANDLE_CODE(ref_location_r17.unpack(bref));
  }
  if (distance_thresh_r17_present) {
    HANDLE_CODE(unpack_integer(distance_thresh_r17, bref, (uint16_t)0u, (uint16_t)65525u));
  }
  if (ntn_neigh_cell_cfg_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ntn_neigh_cell_cfg_list_r17, bref, 1, 4));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(ntn_neigh_cell_cfg_list_ext_v1720, bref);
      if (ntn_neigh_cell_cfg_list_ext_v1720.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*ntn_neigh_cell_cfg_list_ext_v1720, bref, 1, 4));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sib19_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ntn_cfg_r17_present) {
    j.write_fieldname("ntn-Config-r17");
    ntn_cfg_r17.to_json(j);
  }
  if (t_service_r17_present) {
    j.write_int("t-Service-r17", t_service_r17);
  }
  if (ref_location_r17.size() > 0) {
    j.write_str("referenceLocation-r17", ref_location_r17.to_string());
  }
  if (distance_thresh_r17_present) {
    j.write_int("distanceThresh-r17", distance_thresh_r17);
  }
  if (ntn_neigh_cell_cfg_list_r17.size() > 0) {
    j.start_array("ntn-NeighCellConfigList-r17");
    for (const auto& e1 : ntn_neigh_cell_cfg_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (ext) {
    if (ntn_neigh_cell_cfg_list_ext_v1720.is_present()) {
      j.start_array("ntn-NeighCellConfigListExt-v1720");
      for (const auto& e1 : *ntn_neigh_cell_cfg_list_ext_v1720) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

// SIB2 ::= SEQUENCE
SRSASN_CODE sib2_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  bref.pack(cell_resel_info_common.ext, 1);
  HANDLE_CODE(bref.pack(cell_resel_info_common.nrof_ss_blocks_to_average_present, 1));
  HANDLE_CODE(bref.pack(cell_resel_info_common.abs_thresh_ss_blocks_consolidation_present, 1));
  HANDLE_CODE(bref.pack(cell_resel_info_common.range_to_best_cell_present, 1));
  HANDLE_CODE(bref.pack(cell_resel_info_common.speed_state_resel_pars_present, 1));
  if (cell_resel_info_common.nrof_ss_blocks_to_average_present) {
    HANDLE_CODE(pack_integer(bref, cell_resel_info_common.nrof_ss_blocks_to_average, (uint8_t)2u, (uint8_t)16u));
  }
  if (cell_resel_info_common.abs_thresh_ss_blocks_consolidation_present) {
    HANDLE_CODE(cell_resel_info_common.abs_thresh_ss_blocks_consolidation.pack(bref));
  }
  if (cell_resel_info_common.range_to_best_cell_present) {
    HANDLE_CODE(cell_resel_info_common.range_to_best_cell.pack(bref));
  }
  HANDLE_CODE(cell_resel_info_common.q_hyst.pack(bref));
  if (cell_resel_info_common.speed_state_resel_pars_present) {
    HANDLE_CODE(cell_resel_info_common.speed_state_resel_pars.mob_state_params.pack(bref));
    HANDLE_CODE(cell_resel_info_common.speed_state_resel_pars.q_hyst_sf.sf_medium.pack(bref));
    HANDLE_CODE(cell_resel_info_common.speed_state_resel_pars.q_hyst_sf.sf_high.pack(bref));
  }
  bref.pack(cell_resel_serving_freq_info.ext, 1);
  HANDLE_CODE(bref.pack(cell_resel_serving_freq_info.s_non_intra_search_p_present, 1));
  HANDLE_CODE(bref.pack(cell_resel_serving_freq_info.s_non_intra_search_q_present, 1));
  HANDLE_CODE(bref.pack(cell_resel_serving_freq_info.thresh_serving_low_q_present, 1));
  HANDLE_CODE(bref.pack(cell_resel_serving_freq_info.cell_resel_sub_prio_present, 1));
  if (cell_resel_serving_freq_info.s_non_intra_search_p_present) {
    HANDLE_CODE(pack_integer(bref, cell_resel_serving_freq_info.s_non_intra_search_p, (uint8_t)0u, (uint8_t)31u));
  }
  if (cell_resel_serving_freq_info.s_non_intra_search_q_present) {
    HANDLE_CODE(pack_integer(bref, cell_resel_serving_freq_info.s_non_intra_search_q, (uint8_t)0u, (uint8_t)31u));
  }
  HANDLE_CODE(pack_integer(bref, cell_resel_serving_freq_info.thresh_serving_low_p, (uint8_t)0u, (uint8_t)31u));
  if (cell_resel_serving_freq_info.thresh_serving_low_q_present) {
    HANDLE_CODE(pack_integer(bref, cell_resel_serving_freq_info.thresh_serving_low_q, (uint8_t)0u, (uint8_t)31u));
  }
  HANDLE_CODE(pack_integer(bref, cell_resel_serving_freq_info.cell_resel_prio, (uint8_t)0u, (uint8_t)7u));
  if (cell_resel_serving_freq_info.cell_resel_sub_prio_present) {
    HANDLE_CODE(cell_resel_serving_freq_info.cell_resel_sub_prio.pack(bref));
  }
  HANDLE_CODE(intra_freq_cell_resel_info.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= relaxed_meas_r16.is_present();
    group_flags[1] |= cell_equivalent_size_r17_present;
    group_flags[1] |= relaxed_meas_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(relaxed_meas_r16.is_present(), 1));
      if (relaxed_meas_r16.is_present()) {
        HANDLE_CODE(bref.pack(relaxed_meas_r16->low_mob_eval_r16_present, 1));
        HANDLE_CODE(bref.pack(relaxed_meas_r16->cell_edge_eval_r16_present, 1));
        HANDLE_CODE(bref.pack(relaxed_meas_r16->combine_relaxed_meas_condition_r16_present, 1));
        HANDLE_CODE(bref.pack(relaxed_meas_r16->high_prio_meas_relax_r16_present, 1));
        if (relaxed_meas_r16->low_mob_eval_r16_present) {
          HANDLE_CODE(relaxed_meas_r16->low_mob_eval_r16.s_search_delta_p_r16.pack(bref));
          HANDLE_CODE(relaxed_meas_r16->low_mob_eval_r16.t_search_delta_p_r16.pack(bref));
        }
        if (relaxed_meas_r16->cell_edge_eval_r16_present) {
          HANDLE_CODE(bref.pack(relaxed_meas_r16->cell_edge_eval_r16.s_search_thres_q_r16_present, 1));
          HANDLE_CODE(
              pack_integer(bref, relaxed_meas_r16->cell_edge_eval_r16.s_search_thres_p_r16, (uint8_t)0u, (uint8_t)31u));
          if (relaxed_meas_r16->cell_edge_eval_r16.s_search_thres_q_r16_present) {
            HANDLE_CODE(pack_integer(
                bref, relaxed_meas_r16->cell_edge_eval_r16.s_search_thres_q_r16, (uint8_t)0u, (uint8_t)31u));
          }
        }
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(cell_equivalent_size_r17_present, 1));
      HANDLE_CODE(bref.pack(relaxed_meas_r17.is_present(), 1));
      if (cell_equivalent_size_r17_present) {
        HANDLE_CODE(pack_integer(bref, cell_equivalent_size_r17, (uint8_t)2u, (uint8_t)16u));
      }
      if (relaxed_meas_r17.is_present()) {
        HANDLE_CODE(bref.pack(relaxed_meas_r17->cell_edge_eval_while_stationary_r17_present, 1));
        HANDLE_CODE(bref.pack(relaxed_meas_r17->combine_relaxed_meas_condition2_r17_present, 1));
        HANDLE_CODE(relaxed_meas_r17->stationary_mob_eval_r17.s_search_delta_p_stationary_r17.pack(bref));
        HANDLE_CODE(relaxed_meas_r17->stationary_mob_eval_r17.t_search_delta_p_stationary_r17.pack(bref));
        if (relaxed_meas_r17->cell_edge_eval_while_stationary_r17_present) {
          HANDLE_CODE(
              bref.pack(relaxed_meas_r17->cell_edge_eval_while_stationary_r17.s_search_thres_q2_r17_present, 1));
          HANDLE_CODE(pack_integer(bref,
                                   relaxed_meas_r17->cell_edge_eval_while_stationary_r17.s_search_thres_p2_r17,
                                   (uint8_t)0u,
                                   (uint8_t)31u));
          if (relaxed_meas_r17->cell_edge_eval_while_stationary_r17.s_search_thres_q2_r17_present) {
            HANDLE_CODE(pack_integer(bref,
                                     relaxed_meas_r17->cell_edge_eval_while_stationary_r17.s_search_thres_q2_r17,
                                     (uint8_t)0u,
                                     (uint8_t)31u));
          }
        }
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sib2_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bref.unpack(cell_resel_info_common.ext, 1);
  HANDLE_CODE(bref.unpack(cell_resel_info_common.nrof_ss_blocks_to_average_present, 1));
  HANDLE_CODE(bref.unpack(cell_resel_info_common.abs_thresh_ss_blocks_consolidation_present, 1));
  HANDLE_CODE(bref.unpack(cell_resel_info_common.range_to_best_cell_present, 1));
  HANDLE_CODE(bref.unpack(cell_resel_info_common.speed_state_resel_pars_present, 1));
  if (cell_resel_info_common.nrof_ss_blocks_to_average_present) {
    HANDLE_CODE(unpack_integer(cell_resel_info_common.nrof_ss_blocks_to_average, bref, (uint8_t)2u, (uint8_t)16u));
  }
  if (cell_resel_info_common.abs_thresh_ss_blocks_consolidation_present) {
    HANDLE_CODE(cell_resel_info_common.abs_thresh_ss_blocks_consolidation.unpack(bref));
  }
  if (cell_resel_info_common.range_to_best_cell_present) {
    HANDLE_CODE(cell_resel_info_common.range_to_best_cell.unpack(bref));
  }
  HANDLE_CODE(cell_resel_info_common.q_hyst.unpack(bref));
  if (cell_resel_info_common.speed_state_resel_pars_present) {
    HANDLE_CODE(cell_resel_info_common.speed_state_resel_pars.mob_state_params.unpack(bref));
    HANDLE_CODE(cell_resel_info_common.speed_state_resel_pars.q_hyst_sf.sf_medium.unpack(bref));
    HANDLE_CODE(cell_resel_info_common.speed_state_resel_pars.q_hyst_sf.sf_high.unpack(bref));
  }
  bref.unpack(cell_resel_serving_freq_info.ext, 1);
  HANDLE_CODE(bref.unpack(cell_resel_serving_freq_info.s_non_intra_search_p_present, 1));
  HANDLE_CODE(bref.unpack(cell_resel_serving_freq_info.s_non_intra_search_q_present, 1));
  HANDLE_CODE(bref.unpack(cell_resel_serving_freq_info.thresh_serving_low_q_present, 1));
  HANDLE_CODE(bref.unpack(cell_resel_serving_freq_info.cell_resel_sub_prio_present, 1));
  if (cell_resel_serving_freq_info.s_non_intra_search_p_present) {
    HANDLE_CODE(unpack_integer(cell_resel_serving_freq_info.s_non_intra_search_p, bref, (uint8_t)0u, (uint8_t)31u));
  }
  if (cell_resel_serving_freq_info.s_non_intra_search_q_present) {
    HANDLE_CODE(unpack_integer(cell_resel_serving_freq_info.s_non_intra_search_q, bref, (uint8_t)0u, (uint8_t)31u));
  }
  HANDLE_CODE(unpack_integer(cell_resel_serving_freq_info.thresh_serving_low_p, bref, (uint8_t)0u, (uint8_t)31u));
  if (cell_resel_serving_freq_info.thresh_serving_low_q_present) {
    HANDLE_CODE(unpack_integer(cell_resel_serving_freq_info.thresh_serving_low_q, bref, (uint8_t)0u, (uint8_t)31u));
  }
  HANDLE_CODE(unpack_integer(cell_resel_serving_freq_info.cell_resel_prio, bref, (uint8_t)0u, (uint8_t)7u));
  if (cell_resel_serving_freq_info.cell_resel_sub_prio_present) {
    HANDLE_CODE(cell_resel_serving_freq_info.cell_resel_sub_prio.unpack(bref));
  }
  HANDLE_CODE(intra_freq_cell_resel_info.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(relaxed_meas_r16, bref);
      if (relaxed_meas_r16.is_present()) {
        HANDLE_CODE(bref.unpack(relaxed_meas_r16->low_mob_eval_r16_present, 1));
        HANDLE_CODE(bref.unpack(relaxed_meas_r16->cell_edge_eval_r16_present, 1));
        HANDLE_CODE(bref.unpack(relaxed_meas_r16->combine_relaxed_meas_condition_r16_present, 1));
        HANDLE_CODE(bref.unpack(relaxed_meas_r16->high_prio_meas_relax_r16_present, 1));
        if (relaxed_meas_r16->low_mob_eval_r16_present) {
          HANDLE_CODE(relaxed_meas_r16->low_mob_eval_r16.s_search_delta_p_r16.unpack(bref));
          HANDLE_CODE(relaxed_meas_r16->low_mob_eval_r16.t_search_delta_p_r16.unpack(bref));
        }
        if (relaxed_meas_r16->cell_edge_eval_r16_present) {
          HANDLE_CODE(bref.unpack(relaxed_meas_r16->cell_edge_eval_r16.s_search_thres_q_r16_present, 1));
          HANDLE_CODE(unpack_integer(
              relaxed_meas_r16->cell_edge_eval_r16.s_search_thres_p_r16, bref, (uint8_t)0u, (uint8_t)31u));
          if (relaxed_meas_r16->cell_edge_eval_r16.s_search_thres_q_r16_present) {
            HANDLE_CODE(unpack_integer(
                relaxed_meas_r16->cell_edge_eval_r16.s_search_thres_q_r16, bref, (uint8_t)0u, (uint8_t)31u));
          }
        }
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(cell_equivalent_size_r17_present, 1));
      unpack_presence_flag(relaxed_meas_r17, bref);
      if (cell_equivalent_size_r17_present) {
        HANDLE_CODE(unpack_integer(cell_equivalent_size_r17, bref, (uint8_t)2u, (uint8_t)16u));
      }
      if (relaxed_meas_r17.is_present()) {
        HANDLE_CODE(bref.unpack(relaxed_meas_r17->cell_edge_eval_while_stationary_r17_present, 1));
        HANDLE_CODE(bref.unpack(relaxed_meas_r17->combine_relaxed_meas_condition2_r17_present, 1));
        HANDLE_CODE(relaxed_meas_r17->stationary_mob_eval_r17.s_search_delta_p_stationary_r17.unpack(bref));
        HANDLE_CODE(relaxed_meas_r17->stationary_mob_eval_r17.t_search_delta_p_stationary_r17.unpack(bref));
        if (relaxed_meas_r17->cell_edge_eval_while_stationary_r17_present) {
          HANDLE_CODE(
              bref.unpack(relaxed_meas_r17->cell_edge_eval_while_stationary_r17.s_search_thres_q2_r17_present, 1));
          HANDLE_CODE(unpack_integer(relaxed_meas_r17->cell_edge_eval_while_stationary_r17.s_search_thres_p2_r17,
                                     bref,
                                     (uint8_t)0u,
                                     (uint8_t)31u));
          if (relaxed_meas_r17->cell_edge_eval_while_stationary_r17.s_search_thres_q2_r17_present) {
            HANDLE_CODE(unpack_integer(relaxed_meas_r17->cell_edge_eval_while_stationary_r17.s_search_thres_q2_r17,
                                       bref,
                                       (uint8_t)0u,
                                       (uint8_t)31u));
          }
        }
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sib2_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("cellReselectionInfoCommon");
  j.start_obj();
  if (cell_resel_info_common.nrof_ss_blocks_to_average_present) {
    j.write_int("nrofSS-BlocksToAverage", cell_resel_info_common.nrof_ss_blocks_to_average);
  }
  if (cell_resel_info_common.abs_thresh_ss_blocks_consolidation_present) {
    j.write_fieldname("absThreshSS-BlocksConsolidation");
    cell_resel_info_common.abs_thresh_ss_blocks_consolidation.to_json(j);
  }
  if (cell_resel_info_common.range_to_best_cell_present) {
    j.write_str("rangeToBestCell", cell_resel_info_common.range_to_best_cell.to_string());
  }
  j.write_str("q-Hyst", cell_resel_info_common.q_hyst.to_string());
  if (cell_resel_info_common.speed_state_resel_pars_present) {
    j.write_fieldname("speedStateReselectionPars");
    j.start_obj();
    j.write_fieldname("mobilityStateParameters");
    cell_resel_info_common.speed_state_resel_pars.mob_state_params.to_json(j);
    j.write_fieldname("q-HystSF");
    j.start_obj();
    j.write_str("sf-Medium", cell_resel_info_common.speed_state_resel_pars.q_hyst_sf.sf_medium.to_string());
    j.write_str("sf-High", cell_resel_info_common.speed_state_resel_pars.q_hyst_sf.sf_high.to_string());
    j.end_obj();
    j.end_obj();
  }
  j.end_obj();
  j.write_fieldname("cellReselectionServingFreqInfo");
  j.start_obj();
  if (cell_resel_serving_freq_info.s_non_intra_search_p_present) {
    j.write_int("s-NonIntraSearchP", cell_resel_serving_freq_info.s_non_intra_search_p);
  }
  if (cell_resel_serving_freq_info.s_non_intra_search_q_present) {
    j.write_int("s-NonIntraSearchQ", cell_resel_serving_freq_info.s_non_intra_search_q);
  }
  j.write_int("threshServingLowP", cell_resel_serving_freq_info.thresh_serving_low_p);
  if (cell_resel_serving_freq_info.thresh_serving_low_q_present) {
    j.write_int("threshServingLowQ", cell_resel_serving_freq_info.thresh_serving_low_q);
  }
  j.write_int("cellReselectionPriority", cell_resel_serving_freq_info.cell_resel_prio);
  if (cell_resel_serving_freq_info.cell_resel_sub_prio_present) {
    j.write_str("cellReselectionSubPriority", cell_resel_serving_freq_info.cell_resel_sub_prio.to_string());
  }
  j.end_obj();
  j.write_fieldname("intraFreqCellReselectionInfo");
  intra_freq_cell_resel_info.to_json(j);
  if (ext) {
    if (relaxed_meas_r16.is_present()) {
      j.write_fieldname("relaxedMeasurement-r16");
      j.start_obj();
      if (relaxed_meas_r16->low_mob_eval_r16_present) {
        j.write_fieldname("lowMobilityEvaluation-r16");
        j.start_obj();
        j.write_str("s-SearchDeltaP-r16", relaxed_meas_r16->low_mob_eval_r16.s_search_delta_p_r16.to_string());
        j.write_str("t-SearchDeltaP-r16", relaxed_meas_r16->low_mob_eval_r16.t_search_delta_p_r16.to_string());
        j.end_obj();
      }
      if (relaxed_meas_r16->cell_edge_eval_r16_present) {
        j.write_fieldname("cellEdgeEvaluation-r16");
        j.start_obj();
        j.write_int("s-SearchThresholdP-r16", relaxed_meas_r16->cell_edge_eval_r16.s_search_thres_p_r16);
        if (relaxed_meas_r16->cell_edge_eval_r16.s_search_thres_q_r16_present) {
          j.write_int("s-SearchThresholdQ-r16", relaxed_meas_r16->cell_edge_eval_r16.s_search_thres_q_r16);
        }
        j.end_obj();
      }
      if (relaxed_meas_r16->combine_relaxed_meas_condition_r16_present) {
        j.write_str("combineRelaxedMeasCondition-r16", "true");
      }
      if (relaxed_meas_r16->high_prio_meas_relax_r16_present) {
        j.write_str("highPriorityMeasRelax-r16", "true");
      }
      j.end_obj();
    }
    if (cell_equivalent_size_r17_present) {
      j.write_int("cellEquivalentSize-r17", cell_equivalent_size_r17);
    }
    if (relaxed_meas_r17.is_present()) {
      j.write_fieldname("relaxedMeasurement-r17");
      j.start_obj();
      j.write_fieldname("stationaryMobilityEvaluation-r17");
      j.start_obj();
      j.write_str("s-SearchDeltaP-Stationary-r17",
                  relaxed_meas_r17->stationary_mob_eval_r17.s_search_delta_p_stationary_r17.to_string());
      j.write_str("t-SearchDeltaP-Stationary-r17",
                  relaxed_meas_r17->stationary_mob_eval_r17.t_search_delta_p_stationary_r17.to_string());
      j.end_obj();
      if (relaxed_meas_r17->cell_edge_eval_while_stationary_r17_present) {
        j.write_fieldname("cellEdgeEvaluationWhileStationary-r17");
        j.start_obj();
        j.write_int("s-SearchThresholdP2-r17",
                    relaxed_meas_r17->cell_edge_eval_while_stationary_r17.s_search_thres_p2_r17);
        if (relaxed_meas_r17->cell_edge_eval_while_stationary_r17.s_search_thres_q2_r17_present) {
          j.write_int("s-SearchThresholdQ2-r17",
                      relaxed_meas_r17->cell_edge_eval_while_stationary_r17.s_search_thres_q2_r17);
        }
        j.end_obj();
      }
      if (relaxed_meas_r17->combine_relaxed_meas_condition2_r17_present) {
        j.write_str("combineRelaxedMeasCondition2-r17", "true");
      }
      j.end_obj();
    }
  }
  j.end_obj();
}

const char* sib2_s::cell_resel_info_common_s_::q_hyst_opts::to_string() const
{
  static const char* names[] = {"dB0",
                                "dB1",
                                "dB2",
                                "dB3",
                                "dB4",
                                "dB5",
                                "dB6",
                                "dB8",
                                "dB10",
                                "dB12",
                                "dB14",
                                "dB16",
                                "dB18",
                                "dB20",
                                "dB22",
                                "dB24"};
  return convert_enum_idx(names, 16, value, "sib2_s::cell_resel_info_common_s_::q_hyst_e_");
}
uint8_t sib2_s::cell_resel_info_common_s_::q_hyst_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 3, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24};
  return map_enum_number(numbers, 16, value, "sib2_s::cell_resel_info_common_s_::q_hyst_e_");
}

const char*
sib2_s::cell_resel_info_common_s_::speed_state_resel_pars_s_::q_hyst_sf_s_::sf_medium_opts::to_string() const
{
  static const char* names[] = {"dB-6", "dB-4", "dB-2", "dB0"};
  return convert_enum_idx(
      names, 4, value, "sib2_s::cell_resel_info_common_s_::speed_state_resel_pars_s_::q_hyst_sf_s_::sf_medium_e_");
}
int8_t sib2_s::cell_resel_info_common_s_::speed_state_resel_pars_s_::q_hyst_sf_s_::sf_medium_opts::to_number() const
{
  static const int8_t numbers[] = {-6, -4, -2, 0};
  return map_enum_number(
      numbers, 4, value, "sib2_s::cell_resel_info_common_s_::speed_state_resel_pars_s_::q_hyst_sf_s_::sf_medium_e_");
}

const char* sib2_s::cell_resel_info_common_s_::speed_state_resel_pars_s_::q_hyst_sf_s_::sf_high_opts::to_string() const
{
  static const char* names[] = {"dB-6", "dB-4", "dB-2", "dB0"};
  return convert_enum_idx(
      names, 4, value, "sib2_s::cell_resel_info_common_s_::speed_state_resel_pars_s_::q_hyst_sf_s_::sf_high_e_");
}
int8_t sib2_s::cell_resel_info_common_s_::speed_state_resel_pars_s_::q_hyst_sf_s_::sf_high_opts::to_number() const
{
  static const int8_t numbers[] = {-6, -4, -2, 0};
  return map_enum_number(
      numbers, 4, value, "sib2_s::cell_resel_info_common_s_::speed_state_resel_pars_s_::q_hyst_sf_s_::sf_high_e_");
}

SRSASN_CODE sib2_s::intra_freq_cell_resel_info_s_::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(q_rx_lev_min_sul_present, 1));
  HANDLE_CODE(bref.pack(q_qual_min_present, 1));
  HANDLE_CODE(bref.pack(s_intra_search_q_present, 1));
  HANDLE_CODE(bref.pack(freq_band_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(freq_band_list_sul.size() > 0, 1));
  HANDLE_CODE(bref.pack(p_max_present, 1));
  HANDLE_CODE(bref.pack(smtc_present, 1));
  HANDLE_CODE(bref.pack(ss_rssi_meas_present, 1));
  HANDLE_CODE(bref.pack(ssb_to_measure_present, 1));

  HANDLE_CODE(pack_integer(bref, q_rx_lev_min, (int8_t)-70, (int8_t)-22));
  if (q_rx_lev_min_sul_present) {
    HANDLE_CODE(pack_integer(bref, q_rx_lev_min_sul, (int8_t)-70, (int8_t)-22));
  }
  if (q_qual_min_present) {
    HANDLE_CODE(pack_integer(bref, q_qual_min, (int8_t)-43, (int8_t)-12));
  }
  HANDLE_CODE(pack_integer(bref, s_intra_search_p, (uint8_t)0u, (uint8_t)31u));
  if (s_intra_search_q_present) {
    HANDLE_CODE(pack_integer(bref, s_intra_search_q, (uint8_t)0u, (uint8_t)31u));
  }
  HANDLE_CODE(pack_integer(bref, t_resel_nr, (uint8_t)0u, (uint8_t)7u));
  if (freq_band_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, freq_band_list, 1, 8));
  }
  if (freq_band_list_sul.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, freq_band_list_sul, 1, 8));
  }
  if (p_max_present) {
    HANDLE_CODE(pack_integer(bref, p_max, (int8_t)-30, (int8_t)33));
  }
  if (smtc_present) {
    HANDLE_CODE(smtc.pack(bref));
  }
  if (ss_rssi_meas_present) {
    HANDLE_CODE(ss_rssi_meas.pack(bref));
  }
  if (ssb_to_measure_present) {
    HANDLE_CODE(ssb_to_measure.pack(bref));
  }
  HANDLE_CODE(bref.pack(derive_ssb_idx_from_cell, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= t_resel_nr_sf.is_present();
    group_flags[1] |= smtc2_lp_r16.is_present();
    group_flags[1] |= ssb_position_qcl_common_r16_present;
    group_flags[2] |= ssb_position_qcl_common_r17_present;
    group_flags[3] |= smtc4list_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(t_resel_nr_sf.is_present(), 1));
      if (t_resel_nr_sf.is_present()) {
        HANDLE_CODE(t_resel_nr_sf->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(smtc2_lp_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(ssb_position_qcl_common_r16_present, 1));
      if (smtc2_lp_r16.is_present()) {
        HANDLE_CODE(smtc2_lp_r16->pack(bref));
      }
      if (ssb_position_qcl_common_r16_present) {
        HANDLE_CODE(ssb_position_qcl_common_r16.pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ssb_position_qcl_common_r17_present, 1));
      if (ssb_position_qcl_common_r17_present) {
        HANDLE_CODE(ssb_position_qcl_common_r17.pack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(smtc4list_r17.is_present(), 1));
      if (smtc4list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *smtc4list_r17, 1, 3));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sib2_s::intra_freq_cell_resel_info_s_::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(q_rx_lev_min_sul_present, 1));
  HANDLE_CODE(bref.unpack(q_qual_min_present, 1));
  HANDLE_CODE(bref.unpack(s_intra_search_q_present, 1));
  bool freq_band_list_present;
  HANDLE_CODE(bref.unpack(freq_band_list_present, 1));
  bool freq_band_list_sul_present;
  HANDLE_CODE(bref.unpack(freq_band_list_sul_present, 1));
  HANDLE_CODE(bref.unpack(p_max_present, 1));
  HANDLE_CODE(bref.unpack(smtc_present, 1));
  HANDLE_CODE(bref.unpack(ss_rssi_meas_present, 1));
  HANDLE_CODE(bref.unpack(ssb_to_measure_present, 1));

  HANDLE_CODE(unpack_integer(q_rx_lev_min, bref, (int8_t)-70, (int8_t)-22));
  if (q_rx_lev_min_sul_present) {
    HANDLE_CODE(unpack_integer(q_rx_lev_min_sul, bref, (int8_t)-70, (int8_t)-22));
  }
  if (q_qual_min_present) {
    HANDLE_CODE(unpack_integer(q_qual_min, bref, (int8_t)-43, (int8_t)-12));
  }
  HANDLE_CODE(unpack_integer(s_intra_search_p, bref, (uint8_t)0u, (uint8_t)31u));
  if (s_intra_search_q_present) {
    HANDLE_CODE(unpack_integer(s_intra_search_q, bref, (uint8_t)0u, (uint8_t)31u));
  }
  HANDLE_CODE(unpack_integer(t_resel_nr, bref, (uint8_t)0u, (uint8_t)7u));
  if (freq_band_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(freq_band_list, bref, 1, 8));
  }
  if (freq_band_list_sul_present) {
    HANDLE_CODE(unpack_dyn_seq_of(freq_band_list_sul, bref, 1, 8));
  }
  if (p_max_present) {
    HANDLE_CODE(unpack_integer(p_max, bref, (int8_t)-30, (int8_t)33));
  }
  if (smtc_present) {
    HANDLE_CODE(smtc.unpack(bref));
  }
  if (ss_rssi_meas_present) {
    HANDLE_CODE(ss_rssi_meas.unpack(bref));
  }
  if (ssb_to_measure_present) {
    HANDLE_CODE(ssb_to_measure.unpack(bref));
  }
  HANDLE_CODE(bref.unpack(derive_ssb_idx_from_cell, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(4);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(t_resel_nr_sf, bref);
      if (t_resel_nr_sf.is_present()) {
        HANDLE_CODE(t_resel_nr_sf->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(smtc2_lp_r16, bref);
      HANDLE_CODE(bref.unpack(ssb_position_qcl_common_r16_present, 1));
      if (smtc2_lp_r16.is_present()) {
        HANDLE_CODE(smtc2_lp_r16->unpack(bref));
      }
      if (ssb_position_qcl_common_r16_present) {
        HANDLE_CODE(ssb_position_qcl_common_r16.unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ssb_position_qcl_common_r17_present, 1));
      if (ssb_position_qcl_common_r17_present) {
        HANDLE_CODE(ssb_position_qcl_common_r17.unpack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(smtc4list_r17, bref);
      if (smtc4list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*smtc4list_r17, bref, 1, 3));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sib2_s::intra_freq_cell_resel_info_s_::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("q-RxLevMin", q_rx_lev_min);
  if (q_rx_lev_min_sul_present) {
    j.write_int("q-RxLevMinSUL", q_rx_lev_min_sul);
  }
  if (q_qual_min_present) {
    j.write_int("q-QualMin", q_qual_min);
  }
  j.write_int("s-IntraSearchP", s_intra_search_p);
  if (s_intra_search_q_present) {
    j.write_int("s-IntraSearchQ", s_intra_search_q);
  }
  j.write_int("t-ReselectionNR", t_resel_nr);
  if (freq_band_list.size() > 0) {
    j.start_array("frequencyBandList");
    for (const auto& e1 : freq_band_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (freq_band_list_sul.size() > 0) {
    j.start_array("frequencyBandListSUL");
    for (const auto& e1 : freq_band_list_sul) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (p_max_present) {
    j.write_int("p-Max", p_max);
  }
  if (smtc_present) {
    j.write_fieldname("smtc");
    smtc.to_json(j);
  }
  if (ss_rssi_meas_present) {
    j.write_fieldname("ss-RSSI-Measurement");
    ss_rssi_meas.to_json(j);
  }
  if (ssb_to_measure_present) {
    j.write_fieldname("ssb-ToMeasure");
    ssb_to_measure.to_json(j);
  }
  j.write_bool("deriveSSB-IndexFromCell", derive_ssb_idx_from_cell);
  if (ext) {
    if (t_resel_nr_sf.is_present()) {
      j.write_fieldname("t-ReselectionNR-SF");
      t_resel_nr_sf->to_json(j);
    }
    if (smtc2_lp_r16.is_present()) {
      j.write_fieldname("smtc2-LP-r16");
      smtc2_lp_r16->to_json(j);
    }
    if (ssb_position_qcl_common_r16_present) {
      j.write_str("ssb-PositionQCL-Common-r16", ssb_position_qcl_common_r16.to_string());
    }
    if (ssb_position_qcl_common_r17_present) {
      j.write_str("ssb-PositionQCL-Common-r17", ssb_position_qcl_common_r17.to_string());
    }
    if (smtc4list_r17.is_present()) {
      j.start_array("smtc4list-r17");
      for (const auto& e1 : *smtc4list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

const char* sib2_s::relaxed_meas_r16_s_::low_mob_eval_r16_s_::s_search_delta_p_r16_opts::to_string() const
{
  static const char* names[] = {"dB3", "dB6", "dB9", "dB12", "dB15", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "sib2_s::relaxed_meas_r16_s_::low_mob_eval_r16_s_::s_search_delta_p_r16_e_");
}
uint8_t sib2_s::relaxed_meas_r16_s_::low_mob_eval_r16_s_::s_search_delta_p_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {3, 6, 9, 12, 15};
  return map_enum_number(
      numbers, 5, value, "sib2_s::relaxed_meas_r16_s_::low_mob_eval_r16_s_::s_search_delta_p_r16_e_");
}

const char* sib2_s::relaxed_meas_r16_s_::low_mob_eval_r16_s_::t_search_delta_p_r16_opts::to_string() const
{
  static const char* names[] = {"s5",
                                "s10",
                                "s20",
                                "s30",
                                "s60",
                                "s120",
                                "s180",
                                "s240",
                                "s300",
                                "spare7",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(
      names, 16, value, "sib2_s::relaxed_meas_r16_s_::low_mob_eval_r16_s_::t_search_delta_p_r16_e_");
}
uint16_t sib2_s::relaxed_meas_r16_s_::low_mob_eval_r16_s_::t_search_delta_p_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {5, 10, 20, 30, 60, 120, 180, 240, 300};
  return map_enum_number(
      numbers, 9, value, "sib2_s::relaxed_meas_r16_s_::low_mob_eval_r16_s_::t_search_delta_p_r16_e_");
}

const char*
sib2_s::relaxed_meas_r17_s_::stationary_mob_eval_r17_s_::s_search_delta_p_stationary_r17_opts::to_string() const
{
  static const char* names[] = {"dB2", "dB3", "dB6", "dB9", "dB12", "dB15", "spare2", "spare1"};
  return convert_enum_idx(
      names, 8, value, "sib2_s::relaxed_meas_r17_s_::stationary_mob_eval_r17_s_::s_search_delta_p_stationary_r17_e_");
}
uint8_t sib2_s::relaxed_meas_r17_s_::stationary_mob_eval_r17_s_::s_search_delta_p_stationary_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 6, 9, 12, 15};
  return map_enum_number(
      numbers, 6, value, "sib2_s::relaxed_meas_r17_s_::stationary_mob_eval_r17_s_::s_search_delta_p_stationary_r17_e_");
}

const char*
sib2_s::relaxed_meas_r17_s_::stationary_mob_eval_r17_s_::t_search_delta_p_stationary_r17_opts::to_string() const
{
  static const char* names[] = {"s5",
                                "s10",
                                "s20",
                                "s30",
                                "s60",
                                "s120",
                                "s180",
                                "s240",
                                "s300",
                                "spare7",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(
      names, 16, value, "sib2_s::relaxed_meas_r17_s_::stationary_mob_eval_r17_s_::t_search_delta_p_stationary_r17_e_");
}
uint16_t
sib2_s::relaxed_meas_r17_s_::stationary_mob_eval_r17_s_::t_search_delta_p_stationary_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {5, 10, 20, 30, 60, 120, 180, 240, 300};
  return map_enum_number(
      numbers, 9, value, "sib2_s::relaxed_meas_r17_s_::stationary_mob_eval_r17_s_::t_search_delta_p_stationary_r17_e_");
}

// SIB20-r17 ::= SEQUENCE
SRSASN_CODE sib20_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cfr_cfg_mcch_mtch_r17_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  HANDLE_CODE(mcch_cfg_r17.pack(bref));
  if (cfr_cfg_mcch_mtch_r17_present) {
    HANDLE_CODE(cfr_cfg_mcch_mtch_r17.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib20_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(cfr_cfg_mcch_mtch_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  HANDLE_CODE(mcch_cfg_r17.unpack(bref));
  if (cfr_cfg_mcch_mtch_r17_present) {
    HANDLE_CODE(cfr_cfg_mcch_mtch_r17.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib20_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("mcch-Config-r17");
  mcch_cfg_r17.to_json(j);
  if (cfr_cfg_mcch_mtch_r17_present) {
    j.write_fieldname("cfr-ConfigMCCH-MTCH-r17");
    cfr_cfg_mcch_mtch_r17.to_json(j);
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

// SIB21-r17 ::= SEQUENCE
SRSASN_CODE sib21_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(mbs_fsai_intra_freq_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(mbs_fsai_inter_freq_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  if (mbs_fsai_intra_freq_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, mbs_fsai_intra_freq_r17, 1, 64));
  }
  if (mbs_fsai_inter_freq_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, mbs_fsai_inter_freq_list_r17, 1, 8));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib21_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool mbs_fsai_intra_freq_r17_present;
  HANDLE_CODE(bref.unpack(mbs_fsai_intra_freq_r17_present, 1));
  bool mbs_fsai_inter_freq_list_r17_present;
  HANDLE_CODE(bref.unpack(mbs_fsai_inter_freq_list_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  if (mbs_fsai_intra_freq_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(mbs_fsai_intra_freq_r17, bref, 1, 64));
  }
  if (mbs_fsai_inter_freq_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(mbs_fsai_inter_freq_list_r17, bref, 1, 8));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib21_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mbs_fsai_intra_freq_r17.size() > 0) {
    j.start_array("mbs-FSAI-IntraFreq-r17");
    for (const auto& e1 : mbs_fsai_intra_freq_r17) {
      j.write_str(e1.to_string());
    }
    j.end_array();
  }
  if (mbs_fsai_inter_freq_list_r17.size() > 0) {
    j.start_array("mbs-FSAI-InterFreqList-r17");
    for (const auto& e1 : mbs_fsai_inter_freq_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

// SIB3 ::= SEQUENCE
SRSASN_CODE sib3_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(intra_freq_neigh_cell_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(intra_freq_excluded_cell_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  if (intra_freq_neigh_cell_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, intra_freq_neigh_cell_list, 1, 16));
  }
  if (intra_freq_excluded_cell_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, intra_freq_excluded_cell_list, 1, 16));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= intra_freq_neigh_cell_list_v1610.is_present();
    group_flags[0] |= intra_freq_allowed_cell_list_r16.is_present();
    group_flags[0] |= intra_freq_cag_cell_list_r16.is_present();
    group_flags[1] |= intra_freq_neigh_hsdn_cell_list_r17.is_present();
    group_flags[1] |= intra_freq_neigh_cell_list_v1710.is_present();
    group_flags[2] |= ch_access_mode2_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(intra_freq_neigh_cell_list_v1610.is_present(), 1));
      HANDLE_CODE(bref.pack(intra_freq_allowed_cell_list_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(intra_freq_cag_cell_list_r16.is_present(), 1));
      if (intra_freq_neigh_cell_list_v1610.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *intra_freq_neigh_cell_list_v1610, 1, 16));
      }
      if (intra_freq_allowed_cell_list_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *intra_freq_allowed_cell_list_r16, 1, 16));
      }
      if (intra_freq_cag_cell_list_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *intra_freq_cag_cell_list_r16, 1, 12));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(intra_freq_neigh_hsdn_cell_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(intra_freq_neigh_cell_list_v1710.is_present(), 1));
      if (intra_freq_neigh_hsdn_cell_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *intra_freq_neigh_hsdn_cell_list_r17, 1, 16));
      }
      if (intra_freq_neigh_cell_list_v1710.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *intra_freq_neigh_cell_list_v1710, 1, 16));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ch_access_mode2_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sib3_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool intra_freq_neigh_cell_list_present;
  HANDLE_CODE(bref.unpack(intra_freq_neigh_cell_list_present, 1));
  bool intra_freq_excluded_cell_list_present;
  HANDLE_CODE(bref.unpack(intra_freq_excluded_cell_list_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  if (intra_freq_neigh_cell_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(intra_freq_neigh_cell_list, bref, 1, 16));
  }
  if (intra_freq_excluded_cell_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(intra_freq_excluded_cell_list, bref, 1, 16));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(3);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(intra_freq_neigh_cell_list_v1610, bref);
      unpack_presence_flag(intra_freq_allowed_cell_list_r16, bref);
      unpack_presence_flag(intra_freq_cag_cell_list_r16, bref);
      if (intra_freq_neigh_cell_list_v1610.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*intra_freq_neigh_cell_list_v1610, bref, 1, 16));
      }
      if (intra_freq_allowed_cell_list_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*intra_freq_allowed_cell_list_r16, bref, 1, 16));
      }
      if (intra_freq_cag_cell_list_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*intra_freq_cag_cell_list_r16, bref, 1, 12));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(intra_freq_neigh_hsdn_cell_list_r17, bref);
      unpack_presence_flag(intra_freq_neigh_cell_list_v1710, bref);
      if (intra_freq_neigh_hsdn_cell_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*intra_freq_neigh_hsdn_cell_list_r17, bref, 1, 16));
      }
      if (intra_freq_neigh_cell_list_v1710.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*intra_freq_neigh_cell_list_v1710, bref, 1, 16));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ch_access_mode2_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void sib3_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (intra_freq_neigh_cell_list.size() > 0) {
    j.start_array("intraFreqNeighCellList");
    for (const auto& e1 : intra_freq_neigh_cell_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (intra_freq_excluded_cell_list.size() > 0) {
    j.start_array("intraFreqExcludedCellList");
    for (const auto& e1 : intra_freq_excluded_cell_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (ext) {
    if (intra_freq_neigh_cell_list_v1610.is_present()) {
      j.start_array("intraFreqNeighCellList-v1610");
      for (const auto& e1 : *intra_freq_neigh_cell_list_v1610) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (intra_freq_allowed_cell_list_r16.is_present()) {
      j.start_array("intraFreqAllowedCellList-r16");
      for (const auto& e1 : *intra_freq_allowed_cell_list_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (intra_freq_cag_cell_list_r16.is_present()) {
      j.start_array("intraFreqCAG-CellList-r16");
      for (const auto& e1 : *intra_freq_cag_cell_list_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (intra_freq_neigh_hsdn_cell_list_r17.is_present()) {
      j.start_array("intraFreqNeighHSDN-CellList-r17");
      for (const auto& e1 : *intra_freq_neigh_hsdn_cell_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (intra_freq_neigh_cell_list_v1710.is_present()) {
      j.start_array("intraFreqNeighCellList-v1710");
      for (const auto& e1 : *intra_freq_neigh_cell_list_v1710) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (ch_access_mode2_r17_present) {
      j.write_str("channelAccessMode2-r17", "enabled");
    }
  }
  j.end_obj();
}

// SIB4 ::= SEQUENCE
SRSASN_CODE sib4_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, inter_freq_carrier_freq_list, 1, 8));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= inter_freq_carrier_freq_list_v1610.is_present();
    group_flags[1] |= inter_freq_carrier_freq_list_v1700.is_present();
    group_flags[2] |= inter_freq_carrier_freq_list_v1720.is_present();
    group_flags[3] |= inter_freq_carrier_freq_list_v1730.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(inter_freq_carrier_freq_list_v1610.is_present(), 1));
      if (inter_freq_carrier_freq_list_v1610.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *inter_freq_carrier_freq_list_v1610, 1, 8));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(inter_freq_carrier_freq_list_v1700.is_present(), 1));
      if (inter_freq_carrier_freq_list_v1700.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *inter_freq_carrier_freq_list_v1700, 1, 8));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(inter_freq_carrier_freq_list_v1720.is_present(), 1));
      if (inter_freq_carrier_freq_list_v1720.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *inter_freq_carrier_freq_list_v1720, 1, 8));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(inter_freq_carrier_freq_list_v1730.is_present(), 1));
      if (inter_freq_carrier_freq_list_v1730.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *inter_freq_carrier_freq_list_v1730, 1, 8));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sib4_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(inter_freq_carrier_freq_list, bref, 1, 8));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(4);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(inter_freq_carrier_freq_list_v1610, bref);
      if (inter_freq_carrier_freq_list_v1610.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*inter_freq_carrier_freq_list_v1610, bref, 1, 8));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(inter_freq_carrier_freq_list_v1700, bref);
      if (inter_freq_carrier_freq_list_v1700.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*inter_freq_carrier_freq_list_v1700, bref, 1, 8));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(inter_freq_carrier_freq_list_v1720, bref);
      if (inter_freq_carrier_freq_list_v1720.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*inter_freq_carrier_freq_list_v1720, bref, 1, 8));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(inter_freq_carrier_freq_list_v1730, bref);
      if (inter_freq_carrier_freq_list_v1730.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*inter_freq_carrier_freq_list_v1730, bref, 1, 8));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sib4_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("interFreqCarrierFreqList");
  for (const auto& e1 : inter_freq_carrier_freq_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (ext) {
    if (inter_freq_carrier_freq_list_v1610.is_present()) {
      j.start_array("interFreqCarrierFreqList-v1610");
      for (const auto& e1 : *inter_freq_carrier_freq_list_v1610) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (inter_freq_carrier_freq_list_v1700.is_present()) {
      j.start_array("interFreqCarrierFreqList-v1700");
      for (const auto& e1 : *inter_freq_carrier_freq_list_v1700) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (inter_freq_carrier_freq_list_v1720.is_present()) {
      j.start_array("interFreqCarrierFreqList-v1720");
      for (const auto& e1 : *inter_freq_carrier_freq_list_v1720) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (inter_freq_carrier_freq_list_v1730.is_present()) {
      j.start_array("interFreqCarrierFreqList-v1730");
      for (const auto& e1 : *inter_freq_carrier_freq_list_v1730) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

// SIB5 ::= SEQUENCE
SRSASN_CODE sib5_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(carrier_freq_list_eutra.size() > 0, 1));
  HANDLE_CODE(bref.pack(t_resel_eutra_sf_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  if (carrier_freq_list_eutra.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, carrier_freq_list_eutra, 1, 8));
  }
  HANDLE_CODE(pack_integer(bref, t_resel_eutra, (uint8_t)0u, (uint8_t)7u));
  if (t_resel_eutra_sf_present) {
    HANDLE_CODE(t_resel_eutra_sf.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= carrier_freq_list_eutra_v1610.is_present();
    group_flags[1] |= carrier_freq_list_eutra_v1700.is_present();
    group_flags[1] |= idle_mode_meas_voice_fallback_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(carrier_freq_list_eutra_v1610.is_present(), 1));
      if (carrier_freq_list_eutra_v1610.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *carrier_freq_list_eutra_v1610, 1, 8));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(carrier_freq_list_eutra_v1700.is_present(), 1));
      HANDLE_CODE(bref.pack(idle_mode_meas_voice_fallback_r17_present, 1));
      if (carrier_freq_list_eutra_v1700.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *carrier_freq_list_eutra_v1700, 1, 8));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sib5_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool carrier_freq_list_eutra_present;
  HANDLE_CODE(bref.unpack(carrier_freq_list_eutra_present, 1));
  HANDLE_CODE(bref.unpack(t_resel_eutra_sf_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  if (carrier_freq_list_eutra_present) {
    HANDLE_CODE(unpack_dyn_seq_of(carrier_freq_list_eutra, bref, 1, 8));
  }
  HANDLE_CODE(unpack_integer(t_resel_eutra, bref, (uint8_t)0u, (uint8_t)7u));
  if (t_resel_eutra_sf_present) {
    HANDLE_CODE(t_resel_eutra_sf.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(carrier_freq_list_eutra_v1610, bref);
      if (carrier_freq_list_eutra_v1610.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*carrier_freq_list_eutra_v1610, bref, 1, 8));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(carrier_freq_list_eutra_v1700, bref);
      HANDLE_CODE(bref.unpack(idle_mode_meas_voice_fallback_r17_present, 1));
      if (carrier_freq_list_eutra_v1700.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*carrier_freq_list_eutra_v1700, bref, 1, 8));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sib5_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (carrier_freq_list_eutra.size() > 0) {
    j.start_array("carrierFreqListEUTRA");
    for (const auto& e1 : carrier_freq_list_eutra) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_int("t-ReselectionEUTRA", t_resel_eutra);
  if (t_resel_eutra_sf_present) {
    j.write_fieldname("t-ReselectionEUTRA-SF");
    t_resel_eutra_sf.to_json(j);
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (ext) {
    if (carrier_freq_list_eutra_v1610.is_present()) {
      j.start_array("carrierFreqListEUTRA-v1610");
      for (const auto& e1 : *carrier_freq_list_eutra_v1610) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (carrier_freq_list_eutra_v1700.is_present()) {
      j.start_array("carrierFreqListEUTRA-v1700");
      for (const auto& e1 : *carrier_freq_list_eutra_v1700) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (idle_mode_meas_voice_fallback_r17_present) {
      j.write_str("idleModeMeasVoiceFallback-r17", "true");
    }
  }
  j.end_obj();
}

// SIB6 ::= SEQUENCE
SRSASN_CODE sib6_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  HANDLE_CODE(msg_id.pack(bref));
  HANDLE_CODE(serial_num.pack(bref));
  HANDLE_CODE(warning_type.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib6_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  HANDLE_CODE(msg_id.unpack(bref));
  HANDLE_CODE(serial_num.unpack(bref));
  HANDLE_CODE(warning_type.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib6_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("messageIdentifier", msg_id.to_string());
  j.write_str("serialNumber", serial_num.to_string());
  j.write_str("warningType", warning_type.to_string());
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

// SIB7 ::= SEQUENCE
SRSASN_CODE sib7_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(data_coding_scheme_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  HANDLE_CODE(msg_id.pack(bref));
  HANDLE_CODE(serial_num.pack(bref));
  HANDLE_CODE(warning_msg_segment_type.pack(bref));
  HANDLE_CODE(pack_integer(bref, warning_msg_segment_num, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(warning_msg_segment.pack(bref));
  if (data_coding_scheme_present) {
    HANDLE_CODE(data_coding_scheme.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib7_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(data_coding_scheme_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  HANDLE_CODE(msg_id.unpack(bref));
  HANDLE_CODE(serial_num.unpack(bref));
  HANDLE_CODE(warning_msg_segment_type.unpack(bref));
  HANDLE_CODE(unpack_integer(warning_msg_segment_num, bref, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(warning_msg_segment.unpack(bref));
  if (data_coding_scheme_present) {
    HANDLE_CODE(data_coding_scheme.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib7_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("messageIdentifier", msg_id.to_string());
  j.write_str("serialNumber", serial_num.to_string());
  j.write_str("warningMessageSegmentType", warning_msg_segment_type.to_string());
  j.write_int("warningMessageSegmentNumber", warning_msg_segment_num);
  j.write_str("warningMessageSegment", warning_msg_segment.to_string());
  if (data_coding_scheme_present) {
    j.write_str("dataCodingScheme", data_coding_scheme.to_string());
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

const char* sib7_s::warning_msg_segment_type_opts::to_string() const
{
  static const char* names[] = {"notLastSegment", "lastSegment"};
  return convert_enum_idx(names, 2, value, "sib7_s::warning_msg_segment_type_e_");
}

// SIB8 ::= SEQUENCE
SRSASN_CODE sib8_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(data_coding_scheme_present, 1));
  HANDLE_CODE(bref.pack(warning_area_coordinates_segment.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  HANDLE_CODE(msg_id.pack(bref));
  HANDLE_CODE(serial_num.pack(bref));
  HANDLE_CODE(warning_msg_segment_type.pack(bref));
  HANDLE_CODE(pack_integer(bref, warning_msg_segment_num, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(warning_msg_segment.pack(bref));
  if (data_coding_scheme_present) {
    HANDLE_CODE(data_coding_scheme.pack(bref));
  }
  if (warning_area_coordinates_segment.size() > 0) {
    HANDLE_CODE(warning_area_coordinates_segment.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib8_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(data_coding_scheme_present, 1));
  bool warning_area_coordinates_segment_present;
  HANDLE_CODE(bref.unpack(warning_area_coordinates_segment_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  HANDLE_CODE(msg_id.unpack(bref));
  HANDLE_CODE(serial_num.unpack(bref));
  HANDLE_CODE(warning_msg_segment_type.unpack(bref));
  HANDLE_CODE(unpack_integer(warning_msg_segment_num, bref, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(warning_msg_segment.unpack(bref));
  if (data_coding_scheme_present) {
    HANDLE_CODE(data_coding_scheme.unpack(bref));
  }
  if (warning_area_coordinates_segment_present) {
    HANDLE_CODE(warning_area_coordinates_segment.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib8_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("messageIdentifier", msg_id.to_string());
  j.write_str("serialNumber", serial_num.to_string());
  j.write_str("warningMessageSegmentType", warning_msg_segment_type.to_string());
  j.write_int("warningMessageSegmentNumber", warning_msg_segment_num);
  j.write_str("warningMessageSegment", warning_msg_segment.to_string());
  if (data_coding_scheme_present) {
    j.write_str("dataCodingScheme", data_coding_scheme.to_string());
  }
  if (warning_area_coordinates_segment.size() > 0) {
    j.write_str("warningAreaCoordinatesSegment", warning_area_coordinates_segment.to_string());
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

const char* sib8_s::warning_msg_segment_type_opts::to_string() const
{
  static const char* names[] = {"notLastSegment", "lastSegment"};
  return convert_enum_idx(names, 2, value, "sib8_s::warning_msg_segment_type_e_");
}

// SIB9 ::= SEQUENCE
SRSASN_CODE sib9_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(time_info_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  if (time_info_present) {
    HANDLE_CODE(bref.pack(time_info.day_light_saving_time_present, 1));
    HANDLE_CODE(bref.pack(time_info.leap_seconds_present, 1));
    HANDLE_CODE(bref.pack(time_info.local_time_offset_present, 1));
    HANDLE_CODE(pack_integer(bref, time_info.time_info_utc, (uint64_t)0u, (uint64_t)549755813887u));
    if (time_info.day_light_saving_time_present) {
      HANDLE_CODE(time_info.day_light_saving_time.pack(bref));
    }
    if (time_info.leap_seconds_present) {
      HANDLE_CODE(pack_integer(bref, time_info.leap_seconds, (int16_t)-127, (int16_t)128));
    }
    if (time_info.local_time_offset_present) {
      HANDLE_CODE(pack_integer(bref, time_info.local_time_offset, (int8_t)-63, (int8_t)64));
    }
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ref_time_info_r16.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ref_time_info_r16.is_present(), 1));
      if (ref_time_info_r16.is_present()) {
        HANDLE_CODE(ref_time_info_r16->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sib9_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(time_info_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  if (time_info_present) {
    HANDLE_CODE(bref.unpack(time_info.day_light_saving_time_present, 1));
    HANDLE_CODE(bref.unpack(time_info.leap_seconds_present, 1));
    HANDLE_CODE(bref.unpack(time_info.local_time_offset_present, 1));
    HANDLE_CODE(unpack_integer(time_info.time_info_utc, bref, (uint64_t)0u, (uint64_t)549755813887u));
    if (time_info.day_light_saving_time_present) {
      HANDLE_CODE(time_info.day_light_saving_time.unpack(bref));
    }
    if (time_info.leap_seconds_present) {
      HANDLE_CODE(unpack_integer(time_info.leap_seconds, bref, (int16_t)-127, (int16_t)128));
    }
    if (time_info.local_time_offset_present) {
      HANDLE_CODE(unpack_integer(time_info.local_time_offset, bref, (int8_t)-63, (int8_t)64));
    }
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(ref_time_info_r16, bref);
      if (ref_time_info_r16.is_present()) {
        HANDLE_CODE(ref_time_info_r16->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sib9_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (time_info_present) {
    j.write_fieldname("timeInfo");
    j.start_obj();
    j.write_int("timeInfoUTC", time_info.time_info_utc);
    if (time_info.day_light_saving_time_present) {
      j.write_str("dayLightSavingTime", time_info.day_light_saving_time.to_string());
    }
    if (time_info.leap_seconds_present) {
      j.write_int("leapSeconds", time_info.leap_seconds);
    }
    if (time_info.local_time_offset_present) {
      j.write_int("localTimeOffset", time_info.local_time_offset);
    }
    j.end_obj();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (ext) {
    if (ref_time_info_r16.is_present()) {
      j.write_fieldname("referenceTimeInfo-r16");
      ref_time_info_r16->to_json(j);
    }
  }
  j.end_obj();
}

// SIBpos-r16 ::= SEQUENCE
SRSASN_CODE sib_pos_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  HANDLE_CODE(assist_data_sib_elem_r16.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib_pos_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  HANDLE_CODE(assist_data_sib_elem_r16.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib_pos_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("assistanceDataSIB-Element-r16", assist_data_sib_elem_r16.to_string());
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

// SNPN-AccessInfo-r17 ::= SEQUENCE
SRSASN_CODE sn_pn_access_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ext_ch_supported_r17_present, 1));
  HANDLE_CODE(bref.pack(ext_ch_without_cfg_allowed_r17_present, 1));
  HANDLE_CODE(bref.pack(onboarding_enabled_r17_present, 1));
  HANDLE_CODE(bref.pack(ims_emergency_support_for_sn_pn_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sn_pn_access_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ext_ch_supported_r17_present, 1));
  HANDLE_CODE(bref.unpack(ext_ch_without_cfg_allowed_r17_present, 1));
  HANDLE_CODE(bref.unpack(onboarding_enabled_r17_present, 1));
  HANDLE_CODE(bref.unpack(ims_emergency_support_for_sn_pn_r17_present, 1));

  return SRSASN_SUCCESS;
}
void sn_pn_access_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ext_ch_supported_r17_present) {
    j.write_str("extCH-Supported-r17", "true");
  }
  if (ext_ch_without_cfg_allowed_r17_present) {
    j.write_str("extCH-WithoutConfigAllowed-r17", "true");
  }
  if (onboarding_enabled_r17_present) {
    j.write_str("onboardingEnabled-r17", "true");
  }
  if (ims_emergency_support_for_sn_pn_r17_present) {
    j.write_str("imsEmergencySupportForSNPN-r17", "true");
  }
  j.end_obj();
}

// SchedulingInfo ::= SEQUENCE
SRSASN_CODE sched_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(si_broadcast_status.pack(bref));
  HANDLE_CODE(si_periodicity.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, sib_map_info, 1, 32));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sched_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(si_broadcast_status.unpack(bref));
  HANDLE_CODE(si_periodicity.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(sib_map_info, bref, 1, 32));

  return SRSASN_SUCCESS;
}
void sched_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("si-BroadcastStatus", si_broadcast_status.to_string());
  j.write_str("si-Periodicity", si_periodicity.to_string());
  j.start_array("sib-MappingInfo");
  for (const auto& e1 : sib_map_info) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

const char* sched_info_s::si_broadcast_status_opts::to_string() const
{
  static const char* names[] = {"broadcasting", "notBroadcasting"};
  return convert_enum_idx(names, 2, value, "sched_info_s::si_broadcast_status_e_");
}

const char* sched_info_s::si_periodicity_opts::to_string() const
{
  static const char* names[] = {"rf8", "rf16", "rf32", "rf64", "rf128", "rf256", "rf512"};
  return convert_enum_idx(names, 7, value, "sched_info_s::si_periodicity_e_");
}
uint16_t sched_info_s::si_periodicity_opts::to_number() const
{
  static const uint16_t numbers[] = {8, 16, 32, 64, 128, 256, 512};
  return map_enum_number(numbers, 7, value, "sched_info_s::si_periodicity_e_");
}

// UAC-BarringInfoSet ::= SEQUENCE
SRSASN_CODE uac_barr_info_set_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(uac_barr_factor.pack(bref));
  HANDLE_CODE(uac_barr_time.pack(bref));
  HANDLE_CODE(uac_barr_for_access_id.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE uac_barr_info_set_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(uac_barr_factor.unpack(bref));
  HANDLE_CODE(uac_barr_time.unpack(bref));
  HANDLE_CODE(uac_barr_for_access_id.unpack(bref));

  return SRSASN_SUCCESS;
}
void uac_barr_info_set_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("uac-BarringFactor", uac_barr_factor.to_string());
  j.write_str("uac-BarringTime", uac_barr_time.to_string());
  j.write_str("uac-BarringForAccessIdentity", uac_barr_for_access_id.to_string());
  j.end_obj();
}

const char* uac_barr_info_set_s::uac_barr_factor_opts::to_string() const
{
  static const char* names[] = {
      "p00", "p05", "p10", "p15", "p20", "p25", "p30", "p40", "p50", "p60", "p70", "p75", "p80", "p85", "p90", "p95"};
  return convert_enum_idx(names, 16, value, "uac_barr_info_set_s::uac_barr_factor_e_");
}
float uac_barr_info_set_s::uac_barr_factor_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 6.0, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5};
  return map_enum_number(numbers, 16, value, "uac_barr_info_set_s::uac_barr_factor_e_");
}
const char* uac_barr_info_set_s::uac_barr_factor_opts::to_number_string() const
{
  static const char* number_strs[] = {
      "0.0", "0.5", "1.0", "1.5", "2.0", "2.5", "3.0", "4.0", "5.0", "6.0", "7.0", "7.5", "8.0", "8.5", "9.0", "9.5"};
  return convert_enum_idx(number_strs, 16, value, "uac_barr_info_set_s::uac_barr_factor_e_");
}

const char* uac_barr_info_set_s::uac_barr_time_opts::to_string() const
{
  static const char* names[] = {"s4", "s8", "s16", "s32", "s64", "s128", "s256", "s512"};
  return convert_enum_idx(names, 8, value, "uac_barr_info_set_s::uac_barr_time_e_");
}
uint16_t uac_barr_info_set_s::uac_barr_time_opts::to_number() const
{
  static const uint16_t numbers[] = {4, 8, 16, 32, 64, 128, 256, 512};
  return map_enum_number(numbers, 8, value, "uac_barr_info_set_s::uac_barr_time_e_");
}

// UAC-BarringPerPLMN ::= SEQUENCE
SRSASN_CODE uac_barr_per_plmn_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(uac_ac_barr_list_type_present, 1));

  HANDLE_CODE(pack_integer(bref, plmn_id_idx, (uint8_t)1u, (uint8_t)12u));
  if (uac_ac_barr_list_type_present) {
    HANDLE_CODE(uac_ac_barr_list_type.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE uac_barr_per_plmn_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(uac_ac_barr_list_type_present, 1));

  HANDLE_CODE(unpack_integer(plmn_id_idx, bref, (uint8_t)1u, (uint8_t)12u));
  if (uac_ac_barr_list_type_present) {
    HANDLE_CODE(uac_ac_barr_list_type.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void uac_barr_per_plmn_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("plmn-IdentityIndex", plmn_id_idx);
  if (uac_ac_barr_list_type_present) {
    j.write_fieldname("uac-ACBarringListType");
    uac_ac_barr_list_type.to_json(j);
  }
  j.end_obj();
}

void uac_barr_per_plmn_s::uac_ac_barr_list_type_c_::destroy_()
{
  switch (type_) {
    case types::uac_implicit_ac_barr_list:
      c.destroy<uac_implicit_ac_barr_list_l_>();
      break;
    case types::uac_explicit_ac_barr_list:
      c.destroy<uac_barr_per_cat_list_l>();
      break;
    default:
      break;
  }
}
void uac_barr_per_plmn_s::uac_ac_barr_list_type_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::uac_implicit_ac_barr_list:
      c.init<uac_implicit_ac_barr_list_l_>();
      break;
    case types::uac_explicit_ac_barr_list:
      c.init<uac_barr_per_cat_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "uac_barr_per_plmn_s::uac_ac_barr_list_type_c_");
  }
}
uac_barr_per_plmn_s::uac_ac_barr_list_type_c_::uac_ac_barr_list_type_c_(
    const uac_barr_per_plmn_s::uac_ac_barr_list_type_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::uac_implicit_ac_barr_list:
      c.init(other.c.get<uac_implicit_ac_barr_list_l_>());
      break;
    case types::uac_explicit_ac_barr_list:
      c.init(other.c.get<uac_barr_per_cat_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "uac_barr_per_plmn_s::uac_ac_barr_list_type_c_");
  }
}
uac_barr_per_plmn_s::uac_ac_barr_list_type_c_&
uac_barr_per_plmn_s::uac_ac_barr_list_type_c_::operator=(const uac_barr_per_plmn_s::uac_ac_barr_list_type_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::uac_implicit_ac_barr_list:
      c.set(other.c.get<uac_implicit_ac_barr_list_l_>());
      break;
    case types::uac_explicit_ac_barr_list:
      c.set(other.c.get<uac_barr_per_cat_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "uac_barr_per_plmn_s::uac_ac_barr_list_type_c_");
  }

  return *this;
}
uac_barr_per_plmn_s::uac_ac_barr_list_type_c_::uac_implicit_ac_barr_list_l_&
uac_barr_per_plmn_s::uac_ac_barr_list_type_c_::set_uac_implicit_ac_barr_list()
{
  set(types::uac_implicit_ac_barr_list);
  return c.get<uac_implicit_ac_barr_list_l_>();
}
uac_barr_per_cat_list_l& uac_barr_per_plmn_s::uac_ac_barr_list_type_c_::set_uac_explicit_ac_barr_list()
{
  set(types::uac_explicit_ac_barr_list);
  return c.get<uac_barr_per_cat_list_l>();
}
void uac_barr_per_plmn_s::uac_ac_barr_list_type_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::uac_implicit_ac_barr_list:
      j.start_array("uac-ImplicitACBarringList");
      for (const auto& e1 : c.get<uac_implicit_ac_barr_list_l_>()) {
        j.write_int(e1);
      }
      j.end_array();
      break;
    case types::uac_explicit_ac_barr_list:
      j.start_array("uac-ExplicitACBarringList");
      for (const auto& e1 : c.get<uac_barr_per_cat_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "uac_barr_per_plmn_s::uac_ac_barr_list_type_c_");
  }
  j.end_obj();
}
SRSASN_CODE uac_barr_per_plmn_s::uac_ac_barr_list_type_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::uac_implicit_ac_barr_list:
      HANDLE_CODE(pack_fixed_seq_of(bref,
                                    c.get<uac_implicit_ac_barr_list_l_>(),
                                    c.get<uac_implicit_ac_barr_list_l_>().size(),
                                    integer_packer<uint8_t>(1, 8)));
      break;
    case types::uac_explicit_ac_barr_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<uac_barr_per_cat_list_l>(), 1, 63));
      break;
    default:
      log_invalid_choice_id(type_, "uac_barr_per_plmn_s::uac_ac_barr_list_type_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE uac_barr_per_plmn_s::uac_ac_barr_list_type_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::uac_implicit_ac_barr_list:
      HANDLE_CODE(unpack_fixed_seq_of(c.get<uac_implicit_ac_barr_list_l_>(),
                                      bref,
                                      c.get<uac_implicit_ac_barr_list_l_>().size(),
                                      integer_packer<uint8_t>(1, 8)));
      break;
    case types::uac_explicit_ac_barr_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<uac_barr_per_cat_list_l>(), bref, 1, 63));
      break;
    default:
      log_invalid_choice_id(type_, "uac_barr_per_plmn_s::uac_ac_barr_list_type_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* uac_barr_per_plmn_s::uac_ac_barr_list_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"uac-ImplicitACBarringList", "uac-ExplicitACBarringList"};
  return convert_enum_idx(names, 2, value, "uac_barr_per_plmn_s::uac_ac_barr_list_type_c_::types");
}

// CellAccessRelatedInfo ::= SEQUENCE
SRSASN_CODE cell_access_related_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cell_reserved_for_other_use_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, plmn_id_info_list, 1, 12));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= cell_reserved_for_future_use_r16_present;
    group_flags[0] |= npn_id_info_list_r16.is_present();
    group_flags[1] |= snpn_access_info_list_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(cell_reserved_for_future_use_r16_present, 1));
      HANDLE_CODE(bref.pack(npn_id_info_list_r16.is_present(), 1));
      if (npn_id_info_list_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *npn_id_info_list_r16, 1, 12));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(snpn_access_info_list_r17.is_present(), 1));
      if (snpn_access_info_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *snpn_access_info_list_r17, 1, 12));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cell_access_related_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(cell_reserved_for_other_use_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(plmn_id_info_list, bref, 1, 12));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(cell_reserved_for_future_use_r16_present, 1));
      unpack_presence_flag(npn_id_info_list_r16, bref);
      if (npn_id_info_list_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*npn_id_info_list_r16, bref, 1, 12));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(snpn_access_info_list_r17, bref);
      if (snpn_access_info_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*snpn_access_info_list_r17, bref, 1, 12));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void cell_access_related_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("plmn-IdentityInfoList");
  for (const auto& e1 : plmn_id_info_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (cell_reserved_for_other_use_present) {
    j.write_str("cellReservedForOtherUse", "true");
  }
  if (ext) {
    if (cell_reserved_for_future_use_r16_present) {
      j.write_str("cellReservedForFutureUse-r16", "true");
    }
    if (npn_id_info_list_r16.is_present()) {
      j.start_array("npn-IdentityInfoList-r16");
      for (const auto& e1 : *npn_id_info_list_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (snpn_access_info_list_r17.is_present()) {
      j.start_array("snpn-AccessInfoList-r17");
      for (const auto& e1 : *snpn_access_info_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

// ConnEstFailureControl ::= SEQUENCE
SRSASN_CODE conn_est_fail_ctrl_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(conn_est_fail_offset_present, 1));

  HANDLE_CODE(conn_est_fail_count.pack(bref));
  HANDLE_CODE(conn_est_fail_offset_validity.pack(bref));
  if (conn_est_fail_offset_present) {
    HANDLE_CODE(pack_integer(bref, conn_est_fail_offset, (uint8_t)0u, (uint8_t)15u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE conn_est_fail_ctrl_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(conn_est_fail_offset_present, 1));

  HANDLE_CODE(conn_est_fail_count.unpack(bref));
  HANDLE_CODE(conn_est_fail_offset_validity.unpack(bref));
  if (conn_est_fail_offset_present) {
    HANDLE_CODE(unpack_integer(conn_est_fail_offset, bref, (uint8_t)0u, (uint8_t)15u));
  }

  return SRSASN_SUCCESS;
}
void conn_est_fail_ctrl_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("connEstFailCount", conn_est_fail_count.to_string());
  j.write_str("connEstFailOffsetValidity", conn_est_fail_offset_validity.to_string());
  if (conn_est_fail_offset_present) {
    j.write_int("connEstFailOffset", conn_est_fail_offset);
  }
  j.end_obj();
}

const char* conn_est_fail_ctrl_s::conn_est_fail_count_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4"};
  return convert_enum_idx(names, 4, value, "conn_est_fail_ctrl_s::conn_est_fail_count_e_");
}
uint8_t conn_est_fail_ctrl_s::conn_est_fail_count_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4};
  return map_enum_number(numbers, 4, value, "conn_est_fail_ctrl_s::conn_est_fail_count_e_");
}

const char* conn_est_fail_ctrl_s::conn_est_fail_offset_validity_opts::to_string() const
{
  static const char* names[] = {"s30", "s60", "s120", "s240", "s300", "s420", "s600", "s900"};
  return convert_enum_idx(names, 8, value, "conn_est_fail_ctrl_s::conn_est_fail_offset_validity_e_");
}
uint16_t conn_est_fail_ctrl_s::conn_est_fail_offset_validity_opts::to_number() const
{
  static const uint16_t numbers[] = {30, 60, 120, 240, 300, 420, 600, 900};
  return map_enum_number(numbers, 8, value, "conn_est_fail_ctrl_s::conn_est_fail_offset_validity_e_");
}

// PosSystemInformation-r16-IEs ::= SEQUENCE
SRSASN_CODE pos_sys_info_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, pos_sib_type_and_info_r16, 1, 32));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pos_sys_info_r16_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(pos_sib_type_and_info_r16, bref, 1, 32));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void pos_sys_info_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("posSIB-TypeAndInfo-r16");
  for (const auto& e1 : pos_sib_type_and_info_r16) {
    e1.to_json(j);
  }
  j.end_array();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

void pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::destroy_()
{
  switch (type_) {
    case types::pos_sib1_1_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib1_2_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib1_3_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib1_4_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib1_5_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib1_6_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib1_7_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib1_8_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_1_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_2_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_3_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_4_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_5_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_6_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_7_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_8_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_9_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_10_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_11_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_12_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_13_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_14_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_15_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_16_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_17_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_18_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_19_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_20_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_21_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_22_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_23_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib3_1_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib4_1_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib5_1_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib6_1_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib6_2_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib6_3_r16:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib1_9_v1700:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib1_10_v1700:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_24_v1700:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib2_25_v1700:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib6_4_v1700:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib6_5_v1700:
      c.destroy<sib_pos_r16_s>();
      break;
    case types::pos_sib6_6_v1700:
      c.destroy<sib_pos_r16_s>();
      break;
    default:
      break;
  }
}
void pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::pos_sib1_1_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib1_2_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib1_3_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib1_4_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib1_5_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib1_6_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib1_7_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib1_8_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_1_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_2_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_3_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_4_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_5_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_6_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_7_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_8_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_9_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_10_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_11_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_12_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_13_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_14_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_15_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_16_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_17_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_18_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_19_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_20_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_21_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_22_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_23_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib3_1_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib4_1_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib5_1_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib6_1_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib6_2_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib6_3_r16:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib1_9_v1700:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib1_10_v1700:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_24_v1700:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib2_25_v1700:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib6_4_v1700:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib6_5_v1700:
      c.init<sib_pos_r16_s>();
      break;
    case types::pos_sib6_6_v1700:
      c.init<sib_pos_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_");
  }
}
pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::pos_sib_type_and_info_r16_item_c_(
    const pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::pos_sib1_1_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_2_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_3_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_4_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_5_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_6_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_7_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_8_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_1_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_2_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_3_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_4_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_5_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_6_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_7_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_8_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_9_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_10_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_11_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_12_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_13_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_14_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_15_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_16_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_17_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_18_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_19_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_20_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_21_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_22_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_23_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib3_1_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib4_1_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib5_1_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib6_1_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib6_2_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib6_3_r16:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_9_v1700:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_10_v1700:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_24_v1700:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_25_v1700:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib6_4_v1700:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib6_5_v1700:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib6_6_v1700:
      c.init(other.c.get<sib_pos_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_");
  }
}
pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_&
pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::operator=(
    const pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::pos_sib1_1_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_2_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_3_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_4_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_5_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_6_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_7_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_8_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_1_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_2_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_3_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_4_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_5_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_6_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_7_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_8_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_9_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_10_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_11_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_12_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_13_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_14_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_15_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_16_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_17_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_18_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_19_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_20_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_21_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_22_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_23_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib3_1_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib4_1_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib5_1_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib6_1_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib6_2_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib6_3_r16:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_9_v1700:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib1_10_v1700:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_24_v1700:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib2_25_v1700:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib6_4_v1700:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib6_5_v1700:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::pos_sib6_6_v1700:
      c.set(other.c.get<sib_pos_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_");
  }

  return *this;
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib1_1_r16()
{
  set(types::pos_sib1_1_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib1_2_r16()
{
  set(types::pos_sib1_2_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib1_3_r16()
{
  set(types::pos_sib1_3_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib1_4_r16()
{
  set(types::pos_sib1_4_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib1_5_r16()
{
  set(types::pos_sib1_5_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib1_6_r16()
{
  set(types::pos_sib1_6_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib1_7_r16()
{
  set(types::pos_sib1_7_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib1_8_r16()
{
  set(types::pos_sib1_8_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_1_r16()
{
  set(types::pos_sib2_1_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_2_r16()
{
  set(types::pos_sib2_2_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_3_r16()
{
  set(types::pos_sib2_3_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_4_r16()
{
  set(types::pos_sib2_4_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_5_r16()
{
  set(types::pos_sib2_5_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_6_r16()
{
  set(types::pos_sib2_6_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_7_r16()
{
  set(types::pos_sib2_7_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_8_r16()
{
  set(types::pos_sib2_8_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_9_r16()
{
  set(types::pos_sib2_9_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_10_r16()
{
  set(types::pos_sib2_10_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_11_r16()
{
  set(types::pos_sib2_11_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_12_r16()
{
  set(types::pos_sib2_12_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_13_r16()
{
  set(types::pos_sib2_13_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_14_r16()
{
  set(types::pos_sib2_14_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_15_r16()
{
  set(types::pos_sib2_15_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_16_r16()
{
  set(types::pos_sib2_16_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_17_r16()
{
  set(types::pos_sib2_17_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_18_r16()
{
  set(types::pos_sib2_18_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_19_r16()
{
  set(types::pos_sib2_19_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_20_r16()
{
  set(types::pos_sib2_20_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_21_r16()
{
  set(types::pos_sib2_21_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_22_r16()
{
  set(types::pos_sib2_22_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_23_r16()
{
  set(types::pos_sib2_23_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib3_1_r16()
{
  set(types::pos_sib3_1_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib4_1_r16()
{
  set(types::pos_sib4_1_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib5_1_r16()
{
  set(types::pos_sib5_1_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib6_1_r16()
{
  set(types::pos_sib6_1_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib6_2_r16()
{
  set(types::pos_sib6_2_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib6_3_r16()
{
  set(types::pos_sib6_3_r16);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib1_9_v1700()
{
  set(types::pos_sib1_9_v1700);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib1_10_v1700()
{
  set(types::pos_sib1_10_v1700);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_24_v1700()
{
  set(types::pos_sib2_24_v1700);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib2_25_v1700()
{
  set(types::pos_sib2_25_v1700);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib6_4_v1700()
{
  set(types::pos_sib6_4_v1700);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib6_5_v1700()
{
  set(types::pos_sib6_5_v1700);
  return c.get<sib_pos_r16_s>();
}
sib_pos_r16_s& pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::set_pos_sib6_6_v1700()
{
  set(types::pos_sib6_6_v1700);
  return c.get<sib_pos_r16_s>();
}
void pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::pos_sib1_1_r16:
      j.write_fieldname("posSib1-1-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib1_2_r16:
      j.write_fieldname("posSib1-2-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib1_3_r16:
      j.write_fieldname("posSib1-3-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib1_4_r16:
      j.write_fieldname("posSib1-4-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib1_5_r16:
      j.write_fieldname("posSib1-5-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib1_6_r16:
      j.write_fieldname("posSib1-6-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib1_7_r16:
      j.write_fieldname("posSib1-7-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib1_8_r16:
      j.write_fieldname("posSib1-8-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_1_r16:
      j.write_fieldname("posSib2-1-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_2_r16:
      j.write_fieldname("posSib2-2-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_3_r16:
      j.write_fieldname("posSib2-3-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_4_r16:
      j.write_fieldname("posSib2-4-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_5_r16:
      j.write_fieldname("posSib2-5-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_6_r16:
      j.write_fieldname("posSib2-6-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_7_r16:
      j.write_fieldname("posSib2-7-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_8_r16:
      j.write_fieldname("posSib2-8-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_9_r16:
      j.write_fieldname("posSib2-9-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_10_r16:
      j.write_fieldname("posSib2-10-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_11_r16:
      j.write_fieldname("posSib2-11-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_12_r16:
      j.write_fieldname("posSib2-12-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_13_r16:
      j.write_fieldname("posSib2-13-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_14_r16:
      j.write_fieldname("posSib2-14-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_15_r16:
      j.write_fieldname("posSib2-15-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_16_r16:
      j.write_fieldname("posSib2-16-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_17_r16:
      j.write_fieldname("posSib2-17-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_18_r16:
      j.write_fieldname("posSib2-18-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_19_r16:
      j.write_fieldname("posSib2-19-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_20_r16:
      j.write_fieldname("posSib2-20-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_21_r16:
      j.write_fieldname("posSib2-21-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_22_r16:
      j.write_fieldname("posSib2-22-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_23_r16:
      j.write_fieldname("posSib2-23-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib3_1_r16:
      j.write_fieldname("posSib3-1-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib4_1_r16:
      j.write_fieldname("posSib4-1-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib5_1_r16:
      j.write_fieldname("posSib5-1-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib6_1_r16:
      j.write_fieldname("posSib6-1-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib6_2_r16:
      j.write_fieldname("posSib6-2-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib6_3_r16:
      j.write_fieldname("posSib6-3-r16");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib1_9_v1700:
      j.write_fieldname("posSib1-9-v1700");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib1_10_v1700:
      j.write_fieldname("posSib1-10-v1700");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_24_v1700:
      j.write_fieldname("posSib2-24-v1700");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib2_25_v1700:
      j.write_fieldname("posSib2-25-v1700");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib6_4_v1700:
      j.write_fieldname("posSib6-4-v1700");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib6_5_v1700:
      j.write_fieldname("posSib6-5-v1700");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    case types::pos_sib6_6_v1700:
      j.write_fieldname("posSib6-6-v1700");
      c.get<sib_pos_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_");
  }
  j.end_obj();
}
SRSASN_CODE pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::pos_sib1_1_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib1_2_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib1_3_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib1_4_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib1_5_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib1_6_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib1_7_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib1_8_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_1_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_2_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_3_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_4_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_5_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_6_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_7_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_8_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_9_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_10_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_11_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_12_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_13_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_14_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_15_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_16_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_17_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_18_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_19_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_20_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_21_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_22_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib2_23_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib3_1_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib4_1_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib5_1_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib6_1_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib6_2_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib6_3_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
      break;
    case types::pos_sib1_9_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
    } break;
    case types::pos_sib1_10_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
    } break;
    case types::pos_sib2_24_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
    } break;
    case types::pos_sib2_25_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
    } break;
    case types::pos_sib6_4_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
    } break;
    case types::pos_sib6_5_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
    } break;
    case types::pos_sib6_6_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().pack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::pos_sib1_1_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib1_2_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib1_3_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib1_4_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib1_5_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib1_6_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib1_7_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib1_8_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_1_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_2_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_3_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_4_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_5_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_6_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_7_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_8_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_9_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_10_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_11_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_12_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_13_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_14_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_15_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_16_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_17_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_18_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_19_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_20_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_21_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_22_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib2_23_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib3_1_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib4_1_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib5_1_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib6_1_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib6_2_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib6_3_r16:
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
      break;
    case types::pos_sib1_9_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
    } break;
    case types::pos_sib1_10_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
    } break;
    case types::pos_sib2_24_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
    } break;
    case types::pos_sib2_25_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
    } break;
    case types::pos_sib6_4_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
    } break;
    case types::pos_sib6_5_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
    } break;
    case types::pos_sib6_6_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib_pos_r16_s>().unpack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::types_opts::to_string() const
{
  static const char* names[] = {
      "posSib1-1-r16",    "posSib1-2-r16",   "posSib1-3-r16",   "posSib1-4-r16",    "posSib1-5-r16",
      "posSib1-6-r16",    "posSib1-7-r16",   "posSib1-8-r16",   "posSib2-1-r16",    "posSib2-2-r16",
      "posSib2-3-r16",    "posSib2-4-r16",   "posSib2-5-r16",   "posSib2-6-r16",    "posSib2-7-r16",
      "posSib2-8-r16",    "posSib2-9-r16",   "posSib2-10-r16",  "posSib2-11-r16",   "posSib2-12-r16",
      "posSib2-13-r16",   "posSib2-14-r16",  "posSib2-15-r16",  "posSib2-16-r16",   "posSib2-17-r16",
      "posSib2-18-r16",   "posSib2-19-r16",  "posSib2-20-r16",  "posSib2-21-r16",   "posSib2-22-r16",
      "posSib2-23-r16",   "posSib3-1-r16",   "posSib4-1-r16",   "posSib5-1-r16",    "posSib6-1-r16",
      "posSib6-2-r16",    "posSib6-3-r16",   "posSib1-9-v1700", "posSib1-10-v1700", "posSib2-24-v1700",
      "posSib2-25-v1700", "posSib6-4-v1700", "posSib6-5-v1700", "posSib6-6-v1700"};
  return convert_enum_idx(names, 44, value, "pos_sys_info_r16_ies_s::pos_sib_type_and_info_r16_item_c_::types");
}

// SI-SchedulingInfo ::= SEQUENCE
SRSASN_CODE si_sched_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(si_request_cfg_present, 1));
  HANDLE_CODE(bref.pack(si_request_cfg_sul_present, 1));
  HANDLE_CODE(bref.pack(sys_info_area_id_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, sched_info_list, 1, 32));
  HANDLE_CODE(si_win_len.pack(bref));
  if (si_request_cfg_present) {
    HANDLE_CODE(si_request_cfg.pack(bref));
  }
  if (si_request_cfg_sul_present) {
    HANDLE_CODE(si_request_cfg_sul.pack(bref));
  }
  if (sys_info_area_id_present) {
    HANDLE_CODE(sys_info_area_id.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE si_sched_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(si_request_cfg_present, 1));
  HANDLE_CODE(bref.unpack(si_request_cfg_sul_present, 1));
  HANDLE_CODE(bref.unpack(sys_info_area_id_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(sched_info_list, bref, 1, 32));
  HANDLE_CODE(si_win_len.unpack(bref));
  if (si_request_cfg_present) {
    HANDLE_CODE(si_request_cfg.unpack(bref));
  }
  if (si_request_cfg_sul_present) {
    HANDLE_CODE(si_request_cfg_sul.unpack(bref));
  }
  if (sys_info_area_id_present) {
    HANDLE_CODE(sys_info_area_id.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void si_sched_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("schedulingInfoList");
  for (const auto& e1 : sched_info_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_str("si-WindowLength", si_win_len.to_string());
  if (si_request_cfg_present) {
    j.write_fieldname("si-RequestConfig");
    si_request_cfg.to_json(j);
  }
  if (si_request_cfg_sul_present) {
    j.write_fieldname("si-RequestConfigSUL");
    si_request_cfg_sul.to_json(j);
  }
  if (sys_info_area_id_present) {
    j.write_str("systemInformationAreaID", sys_info_area_id.to_string());
  }
  j.end_obj();
}

const char* si_sched_info_s::si_win_len_opts::to_string() const
{
  static const char* names[] = {
      "s5", "s10", "s20", "s40", "s80", "s160", "s320", "s640", "s1280", "s2560-v1710", "s5120-v1710"};
  return convert_enum_idx(names, 11, value, "si_sched_info_s::si_win_len_e_");
}
uint16_t si_sched_info_s::si_win_len_opts::to_number() const
{
  static const uint16_t numbers[] = {5, 10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120};
  return map_enum_number(numbers, 11, value, "si_sched_info_s::si_win_len_e_");
}

// SIB1-v1610-IEs ::= SEQUENCE
SRSASN_CODE sib1_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(idle_mode_meass_eutra_r16_present, 1));
  HANDLE_CODE(bref.pack(idle_mode_meass_nr_r16_present, 1));
  HANDLE_CODE(bref.pack(pos_si_sched_info_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (pos_si_sched_info_r16_present) {
    HANDLE_CODE(pos_si_sched_info_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib1_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(idle_mode_meass_eutra_r16_present, 1));
  HANDLE_CODE(bref.unpack(idle_mode_meass_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(pos_si_sched_info_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (pos_si_sched_info_r16_present) {
    HANDLE_CODE(pos_si_sched_info_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib1_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (idle_mode_meass_eutra_r16_present) {
    j.write_str("idleModeMeasurementsEUTRA-r16", "true");
  }
  if (idle_mode_meass_nr_r16_present) {
    j.write_str("idleModeMeasurementsNR-r16", "true");
  }
  if (pos_si_sched_info_r16_present) {
    j.write_fieldname("posSI-SchedulingInfo-r16");
    pos_si_sched_info_r16.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

const char* serving_cell_cfg_common_sib_s::ch_access_mode_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"dynamic", "semiStatic"};
  return convert_enum_idx(names, 2, value, "serving_cell_cfg_common_sib_s::ch_access_mode_r16_c_::types");
}

// SystemInformation-IEs ::= SEQUENCE
SRSASN_CODE sys_info_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, sib_type_and_info, 1, 32));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sys_info_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(sib_type_and_info, bref, 1, 32));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sys_info_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("sib-TypeAndInfo");
  for (const auto& e1 : sib_type_and_info) {
    e1.to_json(j);
  }
  j.end_array();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

void sys_info_ies_s::sib_type_and_info_item_c_::destroy_()
{
  switch (type_) {
    case types::sib2:
      c.destroy<sib2_s>();
      break;
    case types::sib3:
      c.destroy<sib3_s>();
      break;
    case types::sib4:
      c.destroy<sib4_s>();
      break;
    case types::sib5:
      c.destroy<sib5_s>();
      break;
    case types::sib6:
      c.destroy<sib6_s>();
      break;
    case types::sib7:
      c.destroy<sib7_s>();
      break;
    case types::sib8:
      c.destroy<sib8_s>();
      break;
    case types::sib9:
      c.destroy<sib9_s>();
      break;
    case types::sib10_v1610:
      c.destroy<sib10_r16_s>();
      break;
    case types::sib11_v1610:
      c.destroy<sib11_r16_s>();
      break;
    case types::sib12_v1610:
      c.destroy<sib12_r16_s>();
      break;
    case types::sib13_v1610:
      c.destroy<sib13_r16_s>();
      break;
    case types::sib14_v1610:
      c.destroy<sib14_r16_s>();
      break;
    case types::sib15_v1700:
      c.destroy<sib15_r17_s>();
      break;
    case types::sib16_v1700:
      c.destroy<sib16_r17_s>();
      break;
    case types::sib17_v1700:
      c.destroy<sib17_r17_s>();
      break;
    case types::sib18_v1700:
      c.destroy<sib18_r17_s>();
      break;
    case types::sib19_v1700:
      c.destroy<sib19_r17_s>();
      break;
    case types::sib20_v1700:
      c.destroy<sib20_r17_s>();
      break;
    case types::sib21_v1700:
      c.destroy<sib21_r17_s>();
      break;
    default:
      break;
  }
}
void sys_info_ies_s::sib_type_and_info_item_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::sib2:
      c.init<sib2_s>();
      break;
    case types::sib3:
      c.init<sib3_s>();
      break;
    case types::sib4:
      c.init<sib4_s>();
      break;
    case types::sib5:
      c.init<sib5_s>();
      break;
    case types::sib6:
      c.init<sib6_s>();
      break;
    case types::sib7:
      c.init<sib7_s>();
      break;
    case types::sib8:
      c.init<sib8_s>();
      break;
    case types::sib9:
      c.init<sib9_s>();
      break;
    case types::sib10_v1610:
      c.init<sib10_r16_s>();
      break;
    case types::sib11_v1610:
      c.init<sib11_r16_s>();
      break;
    case types::sib12_v1610:
      c.init<sib12_r16_s>();
      break;
    case types::sib13_v1610:
      c.init<sib13_r16_s>();
      break;
    case types::sib14_v1610:
      c.init<sib14_r16_s>();
      break;
    case types::sib15_v1700:
      c.init<sib15_r17_s>();
      break;
    case types::sib16_v1700:
      c.init<sib16_r17_s>();
      break;
    case types::sib17_v1700:
      c.init<sib17_r17_s>();
      break;
    case types::sib18_v1700:
      c.init<sib18_r17_s>();
      break;
    case types::sib19_v1700:
      c.init<sib19_r17_s>();
      break;
    case types::sib20_v1700:
      c.init<sib20_r17_s>();
      break;
    case types::sib21_v1700:
      c.init<sib21_r17_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_ies_s::sib_type_and_info_item_c_");
  }
}
sys_info_ies_s::sib_type_and_info_item_c_::sib_type_and_info_item_c_(
    const sys_info_ies_s::sib_type_and_info_item_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sib2:
      c.init(other.c.get<sib2_s>());
      break;
    case types::sib3:
      c.init(other.c.get<sib3_s>());
      break;
    case types::sib4:
      c.init(other.c.get<sib4_s>());
      break;
    case types::sib5:
      c.init(other.c.get<sib5_s>());
      break;
    case types::sib6:
      c.init(other.c.get<sib6_s>());
      break;
    case types::sib7:
      c.init(other.c.get<sib7_s>());
      break;
    case types::sib8:
      c.init(other.c.get<sib8_s>());
      break;
    case types::sib9:
      c.init(other.c.get<sib9_s>());
      break;
    case types::sib10_v1610:
      c.init(other.c.get<sib10_r16_s>());
      break;
    case types::sib11_v1610:
      c.init(other.c.get<sib11_r16_s>());
      break;
    case types::sib12_v1610:
      c.init(other.c.get<sib12_r16_s>());
      break;
    case types::sib13_v1610:
      c.init(other.c.get<sib13_r16_s>());
      break;
    case types::sib14_v1610:
      c.init(other.c.get<sib14_r16_s>());
      break;
    case types::sib15_v1700:
      c.init(other.c.get<sib15_r17_s>());
      break;
    case types::sib16_v1700:
      c.init(other.c.get<sib16_r17_s>());
      break;
    case types::sib17_v1700:
      c.init(other.c.get<sib17_r17_s>());
      break;
    case types::sib18_v1700:
      c.init(other.c.get<sib18_r17_s>());
      break;
    case types::sib19_v1700:
      c.init(other.c.get<sib19_r17_s>());
      break;
    case types::sib20_v1700:
      c.init(other.c.get<sib20_r17_s>());
      break;
    case types::sib21_v1700:
      c.init(other.c.get<sib21_r17_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_ies_s::sib_type_and_info_item_c_");
  }
}
sys_info_ies_s::sib_type_and_info_item_c_&
sys_info_ies_s::sib_type_and_info_item_c_::operator=(const sys_info_ies_s::sib_type_and_info_item_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sib2:
      c.set(other.c.get<sib2_s>());
      break;
    case types::sib3:
      c.set(other.c.get<sib3_s>());
      break;
    case types::sib4:
      c.set(other.c.get<sib4_s>());
      break;
    case types::sib5:
      c.set(other.c.get<sib5_s>());
      break;
    case types::sib6:
      c.set(other.c.get<sib6_s>());
      break;
    case types::sib7:
      c.set(other.c.get<sib7_s>());
      break;
    case types::sib8:
      c.set(other.c.get<sib8_s>());
      break;
    case types::sib9:
      c.set(other.c.get<sib9_s>());
      break;
    case types::sib10_v1610:
      c.set(other.c.get<sib10_r16_s>());
      break;
    case types::sib11_v1610:
      c.set(other.c.get<sib11_r16_s>());
      break;
    case types::sib12_v1610:
      c.set(other.c.get<sib12_r16_s>());
      break;
    case types::sib13_v1610:
      c.set(other.c.get<sib13_r16_s>());
      break;
    case types::sib14_v1610:
      c.set(other.c.get<sib14_r16_s>());
      break;
    case types::sib15_v1700:
      c.set(other.c.get<sib15_r17_s>());
      break;
    case types::sib16_v1700:
      c.set(other.c.get<sib16_r17_s>());
      break;
    case types::sib17_v1700:
      c.set(other.c.get<sib17_r17_s>());
      break;
    case types::sib18_v1700:
      c.set(other.c.get<sib18_r17_s>());
      break;
    case types::sib19_v1700:
      c.set(other.c.get<sib19_r17_s>());
      break;
    case types::sib20_v1700:
      c.set(other.c.get<sib20_r17_s>());
      break;
    case types::sib21_v1700:
      c.set(other.c.get<sib21_r17_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_ies_s::sib_type_and_info_item_c_");
  }

  return *this;
}
sib2_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib2()
{
  set(types::sib2);
  return c.get<sib2_s>();
}
sib3_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib3()
{
  set(types::sib3);
  return c.get<sib3_s>();
}
sib4_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib4()
{
  set(types::sib4);
  return c.get<sib4_s>();
}
sib5_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib5()
{
  set(types::sib5);
  return c.get<sib5_s>();
}
sib6_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib6()
{
  set(types::sib6);
  return c.get<sib6_s>();
}
sib7_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib7()
{
  set(types::sib7);
  return c.get<sib7_s>();
}
sib8_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib8()
{
  set(types::sib8);
  return c.get<sib8_s>();
}
sib9_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib9()
{
  set(types::sib9);
  return c.get<sib9_s>();
}
sib10_r16_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib10_v1610()
{
  set(types::sib10_v1610);
  return c.get<sib10_r16_s>();
}
sib11_r16_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib11_v1610()
{
  set(types::sib11_v1610);
  return c.get<sib11_r16_s>();
}
sib12_r16_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib12_v1610()
{
  set(types::sib12_v1610);
  return c.get<sib12_r16_s>();
}
sib13_r16_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib13_v1610()
{
  set(types::sib13_v1610);
  return c.get<sib13_r16_s>();
}
sib14_r16_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib14_v1610()
{
  set(types::sib14_v1610);
  return c.get<sib14_r16_s>();
}
sib15_r17_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib15_v1700()
{
  set(types::sib15_v1700);
  return c.get<sib15_r17_s>();
}
sib16_r17_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib16_v1700()
{
  set(types::sib16_v1700);
  return c.get<sib16_r17_s>();
}
sib17_r17_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib17_v1700()
{
  set(types::sib17_v1700);
  return c.get<sib17_r17_s>();
}
sib18_r17_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib18_v1700()
{
  set(types::sib18_v1700);
  return c.get<sib18_r17_s>();
}
sib19_r17_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib19_v1700()
{
  set(types::sib19_v1700);
  return c.get<sib19_r17_s>();
}
sib20_r17_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib20_v1700()
{
  set(types::sib20_v1700);
  return c.get<sib20_r17_s>();
}
sib21_r17_s& sys_info_ies_s::sib_type_and_info_item_c_::set_sib21_v1700()
{
  set(types::sib21_v1700);
  return c.get<sib21_r17_s>();
}
void sys_info_ies_s::sib_type_and_info_item_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sib2:
      j.write_fieldname("sib2");
      c.get<sib2_s>().to_json(j);
      break;
    case types::sib3:
      j.write_fieldname("sib3");
      c.get<sib3_s>().to_json(j);
      break;
    case types::sib4:
      j.write_fieldname("sib4");
      c.get<sib4_s>().to_json(j);
      break;
    case types::sib5:
      j.write_fieldname("sib5");
      c.get<sib5_s>().to_json(j);
      break;
    case types::sib6:
      j.write_fieldname("sib6");
      c.get<sib6_s>().to_json(j);
      break;
    case types::sib7:
      j.write_fieldname("sib7");
      c.get<sib7_s>().to_json(j);
      break;
    case types::sib8:
      j.write_fieldname("sib8");
      c.get<sib8_s>().to_json(j);
      break;
    case types::sib9:
      j.write_fieldname("sib9");
      c.get<sib9_s>().to_json(j);
      break;
    case types::sib10_v1610:
      j.write_fieldname("sib10-v1610");
      c.get<sib10_r16_s>().to_json(j);
      break;
    case types::sib11_v1610:
      j.write_fieldname("sib11-v1610");
      c.get<sib11_r16_s>().to_json(j);
      break;
    case types::sib12_v1610:
      j.write_fieldname("sib12-v1610");
      c.get<sib12_r16_s>().to_json(j);
      break;
    case types::sib13_v1610:
      j.write_fieldname("sib13-v1610");
      c.get<sib13_r16_s>().to_json(j);
      break;
    case types::sib14_v1610:
      j.write_fieldname("sib14-v1610");
      c.get<sib14_r16_s>().to_json(j);
      break;
    case types::sib15_v1700:
      j.write_fieldname("sib15-v1700");
      c.get<sib15_r17_s>().to_json(j);
      break;
    case types::sib16_v1700:
      j.write_fieldname("sib16-v1700");
      c.get<sib16_r17_s>().to_json(j);
      break;
    case types::sib17_v1700:
      j.write_fieldname("sib17-v1700");
      c.get<sib17_r17_s>().to_json(j);
      break;
    case types::sib18_v1700:
      j.write_fieldname("sib18-v1700");
      c.get<sib18_r17_s>().to_json(j);
      break;
    case types::sib19_v1700:
      j.write_fieldname("sib19-v1700");
      c.get<sib19_r17_s>().to_json(j);
      break;
    case types::sib20_v1700:
      j.write_fieldname("sib20-v1700");
      c.get<sib20_r17_s>().to_json(j);
      break;
    case types::sib21_v1700:
      j.write_fieldname("sib21-v1700");
      c.get<sib21_r17_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_ies_s::sib_type_and_info_item_c_");
  }
  j.end_obj();
}
SRSASN_CODE sys_info_ies_s::sib_type_and_info_item_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sib2:
      HANDLE_CODE(c.get<sib2_s>().pack(bref));
      break;
    case types::sib3:
      HANDLE_CODE(c.get<sib3_s>().pack(bref));
      break;
    case types::sib4:
      HANDLE_CODE(c.get<sib4_s>().pack(bref));
      break;
    case types::sib5:
      HANDLE_CODE(c.get<sib5_s>().pack(bref));
      break;
    case types::sib6:
      HANDLE_CODE(c.get<sib6_s>().pack(bref));
      break;
    case types::sib7:
      HANDLE_CODE(c.get<sib7_s>().pack(bref));
      break;
    case types::sib8:
      HANDLE_CODE(c.get<sib8_s>().pack(bref));
      break;
    case types::sib9:
      HANDLE_CODE(c.get<sib9_s>().pack(bref));
      break;
    case types::sib10_v1610: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib10_r16_s>().pack(bref));
    } break;
    case types::sib11_v1610: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib11_r16_s>().pack(bref));
    } break;
    case types::sib12_v1610: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib12_r16_s>().pack(bref));
    } break;
    case types::sib13_v1610: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib13_r16_s>().pack(bref));
    } break;
    case types::sib14_v1610: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib14_r16_s>().pack(bref));
    } break;
    case types::sib15_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib15_r17_s>().pack(bref));
    } break;
    case types::sib16_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib16_r17_s>().pack(bref));
    } break;
    case types::sib17_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib17_r17_s>().pack(bref));
    } break;
    case types::sib18_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib18_r17_s>().pack(bref));
    } break;
    case types::sib19_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib19_r17_s>().pack(bref));
    } break;
    case types::sib20_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib20_r17_s>().pack(bref));
    } break;
    case types::sib21_v1700: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib21_r17_s>().pack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "sys_info_ies_s::sib_type_and_info_item_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sys_info_ies_s::sib_type_and_info_item_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sib2:
      HANDLE_CODE(c.get<sib2_s>().unpack(bref));
      break;
    case types::sib3:
      HANDLE_CODE(c.get<sib3_s>().unpack(bref));
      break;
    case types::sib4:
      HANDLE_CODE(c.get<sib4_s>().unpack(bref));
      break;
    case types::sib5:
      HANDLE_CODE(c.get<sib5_s>().unpack(bref));
      break;
    case types::sib6:
      HANDLE_CODE(c.get<sib6_s>().unpack(bref));
      break;
    case types::sib7:
      HANDLE_CODE(c.get<sib7_s>().unpack(bref));
      break;
    case types::sib8:
      HANDLE_CODE(c.get<sib8_s>().unpack(bref));
      break;
    case types::sib9:
      HANDLE_CODE(c.get<sib9_s>().unpack(bref));
      break;
    case types::sib10_v1610: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib10_r16_s>().unpack(bref));
    } break;
    case types::sib11_v1610: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib11_r16_s>().unpack(bref));
    } break;
    case types::sib12_v1610: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib12_r16_s>().unpack(bref));
    } break;
    case types::sib13_v1610: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib13_r16_s>().unpack(bref));
    } break;
    case types::sib14_v1610: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib14_r16_s>().unpack(bref));
    } break;
    case types::sib15_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib15_r17_s>().unpack(bref));
    } break;
    case types::sib16_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib16_r17_s>().unpack(bref));
    } break;
    case types::sib17_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib17_r17_s>().unpack(bref));
    } break;
    case types::sib18_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib18_r17_s>().unpack(bref));
    } break;
    case types::sib19_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib19_r17_s>().unpack(bref));
    } break;
    case types::sib20_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib20_r17_s>().unpack(bref));
    } break;
    case types::sib21_v1700: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sib21_r17_s>().unpack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "sys_info_ies_s::sib_type_and_info_item_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sys_info_ies_s::sib_type_and_info_item_c_::types_opts::to_string() const
{
  static const char* names[] = {"sib2",        "sib3",        "sib4",        "sib5",        "sib6",
                                "sib7",        "sib8",        "sib9",        "sib10-v1610", "sib11-v1610",
                                "sib12-v1610", "sib13-v1610", "sib14-v1610", "sib15-v1700", "sib16-v1700",
                                "sib17-v1700", "sib18-v1700", "sib19-v1700", "sib20-v1700", "sib21-v1700"};
  return convert_enum_idx(names, 20, value, "sys_info_ies_s::sib_type_and_info_item_c_::types");
}
uint8_t sys_info_ies_s::sib_type_and_info_item_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21};
  return map_enum_number(numbers, 20, value, "sys_info_ies_s::sib_type_and_info_item_c_::types");
}

// UAC-AccessCategory1-SelectionAssistanceInfo ::= ENUMERATED
const char* uac_access_category1_sel_assist_info_opts::to_string() const
{
  static const char* names[] = {"a", "b", "c"};
  return convert_enum_idx(names, 3, value, "uac_access_category1_sel_assist_info_e");
}

// UE-TimersAndConstants ::= SEQUENCE
SRSASN_CODE ue_timers_and_consts_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(t300.pack(bref));
  HANDLE_CODE(t301.pack(bref));
  HANDLE_CODE(t310.pack(bref));
  HANDLE_CODE(n310.pack(bref));
  HANDLE_CODE(t311.pack(bref));
  HANDLE_CODE(n311.pack(bref));
  HANDLE_CODE(t319.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_timers_and_consts_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(t300.unpack(bref));
  HANDLE_CODE(t301.unpack(bref));
  HANDLE_CODE(t310.unpack(bref));
  HANDLE_CODE(n310.unpack(bref));
  HANDLE_CODE(t311.unpack(bref));
  HANDLE_CODE(n311.unpack(bref));
  HANDLE_CODE(t319.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_timers_and_consts_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("t300", t300.to_string());
  j.write_str("t301", t301.to_string());
  j.write_str("t310", t310.to_string());
  j.write_str("n310", n310.to_string());
  j.write_str("t311", t311.to_string());
  j.write_str("n311", n311.to_string());
  j.write_str("t319", t319.to_string());
  j.end_obj();
}

const char* ue_timers_and_consts_s::t300_opts::to_string() const
{
  static const char* names[] = {"ms100", "ms200", "ms300", "ms400", "ms600", "ms1000", "ms1500", "ms2000"};
  return convert_enum_idx(names, 8, value, "ue_timers_and_consts_s::t300_e_");
}
uint16_t ue_timers_and_consts_s::t300_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 200, 300, 400, 600, 1000, 1500, 2000};
  return map_enum_number(numbers, 8, value, "ue_timers_and_consts_s::t300_e_");
}

const char* ue_timers_and_consts_s::t301_opts::to_string() const
{
  static const char* names[] = {"ms100", "ms200", "ms300", "ms400", "ms600", "ms1000", "ms1500", "ms2000"};
  return convert_enum_idx(names, 8, value, "ue_timers_and_consts_s::t301_e_");
}
uint16_t ue_timers_and_consts_s::t301_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 200, 300, 400, 600, 1000, 1500, 2000};
  return map_enum_number(numbers, 8, value, "ue_timers_and_consts_s::t301_e_");
}

const char* ue_timers_and_consts_s::t310_opts::to_string() const
{
  static const char* names[] = {"ms0", "ms50", "ms100", "ms200", "ms500", "ms1000", "ms2000"};
  return convert_enum_idx(names, 7, value, "ue_timers_and_consts_s::t310_e_");
}
uint16_t ue_timers_and_consts_s::t310_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 50, 100, 200, 500, 1000, 2000};
  return map_enum_number(numbers, 7, value, "ue_timers_and_consts_s::t310_e_");
}

const char* ue_timers_and_consts_s::n310_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n6", "n8", "n10", "n20"};
  return convert_enum_idx(names, 8, value, "ue_timers_and_consts_s::n310_e_");
}
uint8_t ue_timers_and_consts_s::n310_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 6, 8, 10, 20};
  return map_enum_number(numbers, 8, value, "ue_timers_and_consts_s::n310_e_");
}

const char* ue_timers_and_consts_s::t311_opts::to_string() const
{
  static const char* names[] = {"ms1000", "ms3000", "ms5000", "ms10000", "ms15000", "ms20000", "ms30000"};
  return convert_enum_idx(names, 7, value, "ue_timers_and_consts_s::t311_e_");
}
uint16_t ue_timers_and_consts_s::t311_opts::to_number() const
{
  static const uint16_t numbers[] = {1000, 3000, 5000, 10000, 15000, 20000, 30000};
  return map_enum_number(numbers, 7, value, "ue_timers_and_consts_s::t311_e_");
}

const char* ue_timers_and_consts_s::n311_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n5", "n6", "n8", "n10"};
  return convert_enum_idx(names, 8, value, "ue_timers_and_consts_s::n311_e_");
}
uint8_t ue_timers_and_consts_s::n311_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 6, 8, 10};
  return map_enum_number(numbers, 8, value, "ue_timers_and_consts_s::n311_e_");
}

const char* ue_timers_and_consts_s::t319_opts::to_string() const
{
  static const char* names[] = {"ms100", "ms200", "ms300", "ms400", "ms600", "ms1000", "ms1500", "ms2000"};
  return convert_enum_idx(names, 8, value, "ue_timers_and_consts_s::t319_e_");
}
uint16_t ue_timers_and_consts_s::t319_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 200, 300, 400, 600, 1000, 1500, 2000};
  return map_enum_number(numbers, 8, value, "ue_timers_and_consts_s::t319_e_");
}

// SIB1 ::= SEQUENCE
SRSASN_CODE sib1_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cell_sel_info_present, 1));
  HANDLE_CODE(bref.pack(conn_est_fail_ctrl_present, 1));
  HANDLE_CODE(bref.pack(si_sched_info_present, 1));
  HANDLE_CODE(bref.pack(serving_cell_cfg_common_present, 1));
  HANDLE_CODE(bref.pack(ims_emergency_support_present, 1));
  HANDLE_CODE(bref.pack(ecall_over_ims_support_present, 1));
  HANDLE_CODE(bref.pack(ue_timers_and_consts_present, 1));
  HANDLE_CODE(bref.pack(uac_barr_info_present, 1));
  HANDLE_CODE(bref.pack(use_full_resume_id_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (cell_sel_info_present) {
    HANDLE_CODE(bref.pack(cell_sel_info.q_rx_lev_min_offset_present, 1));
    HANDLE_CODE(bref.pack(cell_sel_info.q_rx_lev_min_sul_present, 1));
    HANDLE_CODE(bref.pack(cell_sel_info.q_qual_min_present, 1));
    HANDLE_CODE(bref.pack(cell_sel_info.q_qual_min_offset_present, 1));
    HANDLE_CODE(pack_integer(bref, cell_sel_info.q_rx_lev_min, (int8_t)-70, (int8_t)-22));
    if (cell_sel_info.q_rx_lev_min_offset_present) {
      HANDLE_CODE(pack_integer(bref, cell_sel_info.q_rx_lev_min_offset, (uint8_t)1u, (uint8_t)8u));
    }
    if (cell_sel_info.q_rx_lev_min_sul_present) {
      HANDLE_CODE(pack_integer(bref, cell_sel_info.q_rx_lev_min_sul, (int8_t)-70, (int8_t)-22));
    }
    if (cell_sel_info.q_qual_min_present) {
      HANDLE_CODE(pack_integer(bref, cell_sel_info.q_qual_min, (int8_t)-43, (int8_t)-12));
    }
    if (cell_sel_info.q_qual_min_offset_present) {
      HANDLE_CODE(pack_integer(bref, cell_sel_info.q_qual_min_offset, (uint8_t)1u, (uint8_t)8u));
    }
  }
  HANDLE_CODE(cell_access_related_info.pack(bref));
  if (conn_est_fail_ctrl_present) {
    HANDLE_CODE(conn_est_fail_ctrl.pack(bref));
  }
  if (si_sched_info_present) {
    HANDLE_CODE(si_sched_info.pack(bref));
  }
  if (serving_cell_cfg_common_present) {
    HANDLE_CODE(serving_cell_cfg_common.pack(bref));
  }
  if (ue_timers_and_consts_present) {
    HANDLE_CODE(ue_timers_and_consts.pack(bref));
  }
  if (uac_barr_info_present) {
    HANDLE_CODE(bref.pack(uac_barr_info.uac_barr_for_common.size() > 0, 1));
    HANDLE_CODE(bref.pack(uac_barr_info.uac_barr_per_plmn_list.size() > 0, 1));
    HANDLE_CODE(bref.pack(uac_barr_info.uac_access_category1_sel_assist_info_present, 1));
    if (uac_barr_info.uac_barr_for_common.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref, uac_barr_info.uac_barr_for_common, 1, 63));
    }
    if (uac_barr_info.uac_barr_per_plmn_list.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref, uac_barr_info.uac_barr_per_plmn_list, 1, 12));
    }
    HANDLE_CODE(pack_dyn_seq_of(bref, uac_barr_info.uac_barr_info_set_list, 1, 8));
    if (uac_barr_info.uac_access_category1_sel_assist_info_present) {
      HANDLE_CODE(uac_barr_info.uac_access_category1_sel_assist_info.pack(bref));
    }
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib1_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(cell_sel_info_present, 1));
  HANDLE_CODE(bref.unpack(conn_est_fail_ctrl_present, 1));
  HANDLE_CODE(bref.unpack(si_sched_info_present, 1));
  HANDLE_CODE(bref.unpack(serving_cell_cfg_common_present, 1));
  HANDLE_CODE(bref.unpack(ims_emergency_support_present, 1));
  HANDLE_CODE(bref.unpack(ecall_over_ims_support_present, 1));
  HANDLE_CODE(bref.unpack(ue_timers_and_consts_present, 1));
  HANDLE_CODE(bref.unpack(uac_barr_info_present, 1));
  HANDLE_CODE(bref.unpack(use_full_resume_id_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (cell_sel_info_present) {
    HANDLE_CODE(bref.unpack(cell_sel_info.q_rx_lev_min_offset_present, 1));
    HANDLE_CODE(bref.unpack(cell_sel_info.q_rx_lev_min_sul_present, 1));
    HANDLE_CODE(bref.unpack(cell_sel_info.q_qual_min_present, 1));
    HANDLE_CODE(bref.unpack(cell_sel_info.q_qual_min_offset_present, 1));
    HANDLE_CODE(unpack_integer(cell_sel_info.q_rx_lev_min, bref, (int8_t)-70, (int8_t)-22));
    if (cell_sel_info.q_rx_lev_min_offset_present) {
      HANDLE_CODE(unpack_integer(cell_sel_info.q_rx_lev_min_offset, bref, (uint8_t)1u, (uint8_t)8u));
    }
    if (cell_sel_info.q_rx_lev_min_sul_present) {
      HANDLE_CODE(unpack_integer(cell_sel_info.q_rx_lev_min_sul, bref, (int8_t)-70, (int8_t)-22));
    }
    if (cell_sel_info.q_qual_min_present) {
      HANDLE_CODE(unpack_integer(cell_sel_info.q_qual_min, bref, (int8_t)-43, (int8_t)-12));
    }
    if (cell_sel_info.q_qual_min_offset_present) {
      HANDLE_CODE(unpack_integer(cell_sel_info.q_qual_min_offset, bref, (uint8_t)1u, (uint8_t)8u));
    }
  }
  HANDLE_CODE(cell_access_related_info.unpack(bref));
  if (conn_est_fail_ctrl_present) {
    HANDLE_CODE(conn_est_fail_ctrl.unpack(bref));
  }
  if (si_sched_info_present) {
    HANDLE_CODE(si_sched_info.unpack(bref));
  }
  if (serving_cell_cfg_common_present) {
    HANDLE_CODE(serving_cell_cfg_common.unpack(bref));
  }
  if (ue_timers_and_consts_present) {
    HANDLE_CODE(ue_timers_and_consts.unpack(bref));
  }
  if (uac_barr_info_present) {
    bool uac_barr_for_common_present;
    HANDLE_CODE(bref.unpack(uac_barr_for_common_present, 1));
    bool uac_barr_per_plmn_list_present;
    HANDLE_CODE(bref.unpack(uac_barr_per_plmn_list_present, 1));
    HANDLE_CODE(bref.unpack(uac_barr_info.uac_access_category1_sel_assist_info_present, 1));
    if (uac_barr_for_common_present) {
      HANDLE_CODE(unpack_dyn_seq_of(uac_barr_info.uac_barr_for_common, bref, 1, 63));
    }
    if (uac_barr_per_plmn_list_present) {
      HANDLE_CODE(unpack_dyn_seq_of(uac_barr_info.uac_barr_per_plmn_list, bref, 1, 12));
    }
    HANDLE_CODE(unpack_dyn_seq_of(uac_barr_info.uac_barr_info_set_list, bref, 1, 8));
    if (uac_barr_info.uac_access_category1_sel_assist_info_present) {
      HANDLE_CODE(uac_barr_info.uac_access_category1_sel_assist_info.unpack(bref));
    }
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib1_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (cell_sel_info_present) {
    j.write_fieldname("cellSelectionInfo");
    j.start_obj();
    j.write_int("q-RxLevMin", cell_sel_info.q_rx_lev_min);
    if (cell_sel_info.q_rx_lev_min_offset_present) {
      j.write_int("q-RxLevMinOffset", cell_sel_info.q_rx_lev_min_offset);
    }
    if (cell_sel_info.q_rx_lev_min_sul_present) {
      j.write_int("q-RxLevMinSUL", cell_sel_info.q_rx_lev_min_sul);
    }
    if (cell_sel_info.q_qual_min_present) {
      j.write_int("q-QualMin", cell_sel_info.q_qual_min);
    }
    if (cell_sel_info.q_qual_min_offset_present) {
      j.write_int("q-QualMinOffset", cell_sel_info.q_qual_min_offset);
    }
    j.end_obj();
  }
  j.write_fieldname("cellAccessRelatedInfo");
  cell_access_related_info.to_json(j);
  if (conn_est_fail_ctrl_present) {
    j.write_fieldname("connEstFailureControl");
    conn_est_fail_ctrl.to_json(j);
  }
  if (si_sched_info_present) {
    j.write_fieldname("si-SchedulingInfo");
    si_sched_info.to_json(j);
  }
  if (serving_cell_cfg_common_present) {
    j.write_fieldname("servingCellConfigCommon");
    serving_cell_cfg_common.to_json(j);
  }
  if (ims_emergency_support_present) {
    j.write_str("ims-EmergencySupport", "true");
  }
  if (ecall_over_ims_support_present) {
    j.write_str("eCallOverIMS-Support", "true");
  }
  if (ue_timers_and_consts_present) {
    j.write_fieldname("ue-TimersAndConstants");
    ue_timers_and_consts.to_json(j);
  }
  if (uac_barr_info_present) {
    j.write_fieldname("uac-BarringInfo");
    j.start_obj();
    if (uac_barr_info.uac_barr_for_common.size() > 0) {
      j.start_array("uac-BarringForCommon");
      for (const auto& e1 : uac_barr_info.uac_barr_for_common) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (uac_barr_info.uac_barr_per_plmn_list.size() > 0) {
      j.start_array("uac-BarringPerPLMN-List");
      for (const auto& e1 : uac_barr_info.uac_barr_per_plmn_list) {
        e1.to_json(j);
      }
      j.end_array();
    }
    j.start_array("uac-BarringInfoSetList");
    for (const auto& e1 : uac_barr_info.uac_barr_info_set_list) {
      e1.to_json(j);
    }
    j.end_array();
    if (uac_barr_info.uac_access_category1_sel_assist_info_present) {
      j.write_fieldname("uac-AccessCategory1-SelectionAssistanceInfo");
      uac_barr_info.uac_access_category1_sel_assist_info.to_json(j);
    }
    j.end_obj();
  }
  if (use_full_resume_id_present) {
    j.write_str("useFullResumeID", "true");
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

void sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_::destroy_()
{
  switch (type_) {
    case types::individual_plmn_list:
      c.destroy<individual_plmn_list_l_>();
      break;
    default:
      break;
  }
}
void sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::plmn_common:
      break;
    case types::individual_plmn_list:
      c.init<individual_plmn_list_l_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_");
  }
}
sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_::uac_access_category1_sel_assist_info_c_(
    const sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::plmn_common:
      c.init(other.c.get<uac_access_category1_sel_assist_info_e>());
      break;
    case types::individual_plmn_list:
      c.init(other.c.get<individual_plmn_list_l_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_");
  }
}
sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_&
sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_::operator=(
    const sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::plmn_common:
      c.set(other.c.get<uac_access_category1_sel_assist_info_e>());
      break;
    case types::individual_plmn_list:
      c.set(other.c.get<individual_plmn_list_l_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_");
  }

  return *this;
}
uac_access_category1_sel_assist_info_e&
sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_::set_plmn_common()
{
  set(types::plmn_common);
  return c.get<uac_access_category1_sel_assist_info_e>();
}
sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_::individual_plmn_list_l_&
sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_::set_individual_plmn_list()
{
  set(types::individual_plmn_list);
  return c.get<individual_plmn_list_l_>();
}
void sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::plmn_common:
      j.write_str("plmnCommon", c.get<uac_access_category1_sel_assist_info_e>().to_string());
      break;
    case types::individual_plmn_list:
      j.start_array("individualPLMNList");
      for (const auto& e1 : c.get<individual_plmn_list_l_>()) {
        j.write_str(e1.to_string());
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_");
  }
  j.end_obj();
}
SRSASN_CODE sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::plmn_common:
      HANDLE_CODE(c.get<uac_access_category1_sel_assist_info_e>().pack(bref));
      break;
    case types::individual_plmn_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<individual_plmn_list_l_>(), 2, 12));
      break;
    default:
      log_invalid_choice_id(type_, "sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::plmn_common:
      HANDLE_CODE(c.get<uac_access_category1_sel_assist_info_e>().unpack(bref));
      break;
    case types::individual_plmn_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<individual_plmn_list_l_>(), bref, 2, 12));
      break;
    default:
      log_invalid_choice_id(type_, "sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_::types_opts::to_string() const
{
  static const char* names[] = {"plmnCommon", "individualPLMNList"};
  return convert_enum_idx(names, 2, value, "sib1_s::uac_barr_info_s_::uac_access_category1_sel_assist_info_c_::types");
}

// SystemInformation ::= SEQUENCE
SRSASN_CODE sys_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sys_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void sys_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void sys_info_s::crit_exts_c_::destroy_()
{
  switch (type_) {
    case types::sys_info:
      c.destroy<sys_info_ies_s>();
      break;
    case types::crit_exts_future_r16:
      c.destroy<crit_exts_future_r16_c_>();
      break;
    default:
      break;
  }
}
void sys_info_s::crit_exts_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::sys_info:
      c.init<sys_info_ies_s>();
      break;
    case types::crit_exts_future_r16:
      c.init<crit_exts_future_r16_c_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_s::crit_exts_c_");
  }
}
sys_info_s::crit_exts_c_::crit_exts_c_(const sys_info_s::crit_exts_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sys_info:
      c.init(other.c.get<sys_info_ies_s>());
      break;
    case types::crit_exts_future_r16:
      c.init(other.c.get<crit_exts_future_r16_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_s::crit_exts_c_");
  }
}
sys_info_s::crit_exts_c_& sys_info_s::crit_exts_c_::operator=(const sys_info_s::crit_exts_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sys_info:
      c.set(other.c.get<sys_info_ies_s>());
      break;
    case types::crit_exts_future_r16:
      c.set(other.c.get<crit_exts_future_r16_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_s::crit_exts_c_");
  }

  return *this;
}
sys_info_ies_s& sys_info_s::crit_exts_c_::set_sys_info()
{
  set(types::sys_info);
  return c.get<sys_info_ies_s>();
}
sys_info_s::crit_exts_c_::crit_exts_future_r16_c_& sys_info_s::crit_exts_c_::set_crit_exts_future_r16()
{
  set(types::crit_exts_future_r16);
  return c.get<crit_exts_future_r16_c_>();
}
void sys_info_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sys_info:
      j.write_fieldname("systemInformation");
      c.get<sys_info_ies_s>().to_json(j);
      break;
    case types::crit_exts_future_r16:
      j.write_fieldname("criticalExtensionsFuture-r16");
      c.get<crit_exts_future_r16_c_>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE sys_info_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sys_info:
      HANDLE_CODE(c.get<sys_info_ies_s>().pack(bref));
      break;
    case types::crit_exts_future_r16:
      HANDLE_CODE(c.get<crit_exts_future_r16_c_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sys_info_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sys_info:
      HANDLE_CODE(c.get<sys_info_ies_s>().unpack(bref));
      break;
    case types::crit_exts_future_r16:
      HANDLE_CODE(c.get<crit_exts_future_r16_c_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void sys_info_s::crit_exts_c_::crit_exts_future_r16_c_::set(types::options e)
{
  type_ = e;
}
pos_sys_info_r16_ies_s& sys_info_s::crit_exts_c_::crit_exts_future_r16_c_::set_pos_sys_info_r16()
{
  set(types::pos_sys_info_r16);
  return c;
}
void sys_info_s::crit_exts_c_::crit_exts_future_r16_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void sys_info_s::crit_exts_c_::crit_exts_future_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::pos_sys_info_r16:
      j.write_fieldname("posSystemInformation-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_s::crit_exts_c_::crit_exts_future_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE sys_info_s::crit_exts_c_::crit_exts_future_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::pos_sys_info_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_s::crit_exts_c_::crit_exts_future_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sys_info_s::crit_exts_c_::crit_exts_future_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::pos_sys_info_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_s::crit_exts_c_::crit_exts_future_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sys_info_s::crit_exts_c_::crit_exts_future_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"posSystemInformation-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "sys_info_s::crit_exts_c_::crit_exts_future_r16_c_::types");
}

const char* sys_info_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"systemInformation", "criticalExtensionsFuture-r16"};
  return convert_enum_idx(names, 2, value, "sys_info_s::crit_exts_c_::types");
}

// BCCH-DL-SCH-MessageType ::= CHOICE
void bcch_dl_sch_msg_type_c::set(types::options e)
{
  type_ = e;
}
bcch_dl_sch_msg_type_c::c1_c_& bcch_dl_sch_msg_type_c::set_c1()
{
  set(types::c1);
  return c;
}
void bcch_dl_sch_msg_type_c::set_msg_class_ext()
{
  set(types::msg_class_ext);
}
void bcch_dl_sch_msg_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "bcch_dl_sch_msg_type_c");
  }
  j.end_obj();
}
SRSASN_CODE bcch_dl_sch_msg_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "bcch_dl_sch_msg_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE bcch_dl_sch_msg_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "bcch_dl_sch_msg_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void bcch_dl_sch_msg_type_c::c1_c_::destroy_()
{
  switch (type_) {
    case types::sys_info:
      c.destroy<sys_info_s>();
      break;
    case types::sib_type1:
      c.destroy<sib1_s>();
      break;
    default:
      break;
  }
}
void bcch_dl_sch_msg_type_c::c1_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::sys_info:
      c.init<sys_info_s>();
      break;
    case types::sib_type1:
      c.init<sib1_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bcch_dl_sch_msg_type_c::c1_c_");
  }
}
bcch_dl_sch_msg_type_c::c1_c_::c1_c_(const bcch_dl_sch_msg_type_c::c1_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sys_info:
      c.init(other.c.get<sys_info_s>());
      break;
    case types::sib_type1:
      c.init(other.c.get<sib1_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bcch_dl_sch_msg_type_c::c1_c_");
  }
}
bcch_dl_sch_msg_type_c::c1_c_& bcch_dl_sch_msg_type_c::c1_c_::operator=(const bcch_dl_sch_msg_type_c::c1_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sys_info:
      c.set(other.c.get<sys_info_s>());
      break;
    case types::sib_type1:
      c.set(other.c.get<sib1_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bcch_dl_sch_msg_type_c::c1_c_");
  }

  return *this;
}
sys_info_s& bcch_dl_sch_msg_type_c::c1_c_::set_sys_info()
{
  set(types::sys_info);
  return c.get<sys_info_s>();
}
sib1_s& bcch_dl_sch_msg_type_c::c1_c_::set_sib_type1()
{
  set(types::sib_type1);
  return c.get<sib1_s>();
}
void bcch_dl_sch_msg_type_c::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sys_info:
      j.write_fieldname("systemInformation");
      c.get<sys_info_s>().to_json(j);
      break;
    case types::sib_type1:
      j.write_fieldname("systemInformationBlockType1");
      c.get<sib1_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "bcch_dl_sch_msg_type_c::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE bcch_dl_sch_msg_type_c::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sys_info:
      HANDLE_CODE(c.get<sys_info_s>().pack(bref));
      break;
    case types::sib_type1:
      HANDLE_CODE(c.get<sib1_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "bcch_dl_sch_msg_type_c::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE bcch_dl_sch_msg_type_c::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sys_info:
      HANDLE_CODE(c.get<sys_info_s>().unpack(bref));
      break;
    case types::sib_type1:
      HANDLE_CODE(c.get<sib1_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "bcch_dl_sch_msg_type_c::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* bcch_dl_sch_msg_type_c::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"systemInformation", "systemInformationBlockType1"};
  return convert_enum_idx(names, 2, value, "bcch_dl_sch_msg_type_c::c1_c_::types");
}
uint8_t bcch_dl_sch_msg_type_c::c1_c_::types_opts::to_number() const
{
  if (value == sib_type1) {
    return 1;
  }
  invalid_enum_number(value, "bcch_dl_sch_msg_type_c::c1_c_::types");
  return 0;
}

const char* bcch_dl_sch_msg_type_c::types_opts::to_string() const
{
  static const char* names[] = {"c1", "messageClassExtension"};
  return convert_enum_idx(names, 2, value, "bcch_dl_sch_msg_type_c::types");
}
uint8_t bcch_dl_sch_msg_type_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "bcch_dl_sch_msg_type_c::types");
}

// BCCH-DL-SCH-Message ::= SEQUENCE
SRSASN_CODE bcch_dl_sch_msg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(msg.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE bcch_dl_sch_msg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(msg.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void bcch_dl_sch_msg_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("BCCH-DL-SCH-Message");
  j.write_fieldname("message");
  msg.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

// SL-MinMaxMCS-Config-r16 ::= SEQUENCE
SRSASN_CODE sl_min_max_mcs_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(sl_mcs_table_r16.pack(bref));
  HANDLE_CODE(pack_integer(bref, sl_min_mcs_pssch_r16, (uint8_t)0u, (uint8_t)27u));
  HANDLE_CODE(pack_integer(bref, sl_max_mcs_pssch_r16, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_min_max_mcs_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(sl_mcs_table_r16.unpack(bref));
  HANDLE_CODE(unpack_integer(sl_min_mcs_pssch_r16, bref, (uint8_t)0u, (uint8_t)27u));
  HANDLE_CODE(unpack_integer(sl_max_mcs_pssch_r16, bref, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
void sl_min_max_mcs_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sl-MCS-Table-r16", sl_mcs_table_r16.to_string());
  j.write_int("sl-MinMCS-PSSCH-r16", sl_min_mcs_pssch_r16);
  j.write_int("sl-MaxMCS-PSSCH-r16", sl_max_mcs_pssch_r16);
  j.end_obj();
}

const char* sl_min_max_mcs_cfg_r16_s::sl_mcs_table_r16_opts::to_string() const
{
  static const char* names[] = {"qam64", "qam256", "qam64LowSE"};
  return convert_enum_idx(names, 3, value, "sl_min_max_mcs_cfg_r16_s::sl_mcs_table_r16_e_");
}

// SL-PriorityTxConfigIndex-r16 ::= SEQUENCE
SRSASN_CODE sl_prio_tx_cfg_idx_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_prio_thres_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_default_tx_cfg_idx_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_cbr_cfg_idx_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_tx_cfg_idx_list_r16.size() > 0, 1));

  if (sl_prio_thres_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_prio_thres_r16, (uint8_t)1u, (uint8_t)8u));
  }
  if (sl_default_tx_cfg_idx_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_default_tx_cfg_idx_r16, (uint8_t)0u, (uint8_t)15u));
  }
  if (sl_cbr_cfg_idx_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_cbr_cfg_idx_r16, (uint8_t)0u, (uint8_t)7u));
  }
  if (sl_tx_cfg_idx_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_tx_cfg_idx_list_r16, 1, 16, integer_packer<uint8_t>(0, 63)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_prio_tx_cfg_idx_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_prio_thres_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_default_tx_cfg_idx_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_cbr_cfg_idx_r16_present, 1));
  bool sl_tx_cfg_idx_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_tx_cfg_idx_list_r16_present, 1));

  if (sl_prio_thres_r16_present) {
    HANDLE_CODE(unpack_integer(sl_prio_thres_r16, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (sl_default_tx_cfg_idx_r16_present) {
    HANDLE_CODE(unpack_integer(sl_default_tx_cfg_idx_r16, bref, (uint8_t)0u, (uint8_t)15u));
  }
  if (sl_cbr_cfg_idx_r16_present) {
    HANDLE_CODE(unpack_integer(sl_cbr_cfg_idx_r16, bref, (uint8_t)0u, (uint8_t)7u));
  }
  if (sl_tx_cfg_idx_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_tx_cfg_idx_list_r16, bref, 1, 16, integer_packer<uint8_t>(0, 63)));
  }

  return SRSASN_SUCCESS;
}
void sl_prio_tx_cfg_idx_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_prio_thres_r16_present) {
    j.write_int("sl-PriorityThreshold-r16", sl_prio_thres_r16);
  }
  if (sl_default_tx_cfg_idx_r16_present) {
    j.write_int("sl-DefaultTxConfigIndex-r16", sl_default_tx_cfg_idx_r16);
  }
  if (sl_cbr_cfg_idx_r16_present) {
    j.write_int("sl-CBR-ConfigIndex-r16", sl_cbr_cfg_idx_r16);
  }
  if (sl_tx_cfg_idx_list_r16.size() > 0) {
    j.start_array("sl-Tx-ConfigIndexList-r16");
    for (const auto& e1 : sl_tx_cfg_idx_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// SL-PriorityTxConfigIndex-v1650 ::= SEQUENCE
SRSASN_CODE sl_prio_tx_cfg_idx_v1650_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_mcs_range_list_r16.size() > 0, 1));

  if (sl_mcs_range_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_mcs_range_list_r16, 1, 16, SeqOfPacker<Packer>(1, 3, Packer())));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_prio_tx_cfg_idx_v1650_s::unpack(cbit_ref& bref)
{
  bool sl_mcs_range_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_mcs_range_list_r16_present, 1));

  if (sl_mcs_range_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_mcs_range_list_r16, bref, 1, 16, SeqOfPacker<Packer>(1, 3, Packer())));
  }

  return SRSASN_SUCCESS;
}
void sl_prio_tx_cfg_idx_v1650_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_mcs_range_list_r16.size() > 0) {
    j.start_array("sl-MCS-RangeList-r16");
    for (const auto& e1 : sl_mcs_range_list_r16) {
      j.start_array();
      for (const auto& e2 : e1) {
        e2.to_json(j);
      }
      j.end_array();
    }
    j.end_array();
  }
  j.end_obj();
}

// SL-SelectionWindowConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_sel_win_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, sl_prio_r16, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(sl_sel_win_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_sel_win_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(sl_prio_r16, bref, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(sl_sel_win_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_sel_win_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-Priority-r16", sl_prio_r16);
  j.write_str("sl-SelectionWindow-r16", sl_sel_win_r16.to_string());
  j.end_obj();
}

const char* sl_sel_win_cfg_r16_s::sl_sel_win_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n5", "n10", "n20"};
  return convert_enum_idx(names, 4, value, "sl_sel_win_cfg_r16_s::sl_sel_win_r16_e_");
}
uint8_t sl_sel_win_cfg_r16_s::sl_sel_win_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 5, 10, 20};
  return map_enum_number(numbers, 4, value, "sl_sel_win_cfg_r16_s::sl_sel_win_r16_e_");
}

// SL-ThresholdRSRP-Condition1-B-1-r17 ::= SEQUENCE
SRSASN_CODE sl_thres_rsrp_condition1_b_1_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, sl_prio_r17, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(pack_integer(bref, sl_thres_rsrp_condition1_b_1_r17, (uint8_t)0u, (uint8_t)66u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_thres_rsrp_condition1_b_1_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(sl_prio_r17, bref, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(unpack_integer(sl_thres_rsrp_condition1_b_1_r17, bref, (uint8_t)0u, (uint8_t)66u));

  return SRSASN_SUCCESS;
}
void sl_thres_rsrp_condition1_b_1_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-Priority-r17", sl_prio_r17);
  j.write_int("sl-ThresholdRSRP-Condition1-B-1-r17", sl_thres_rsrp_condition1_b_1_r17);
  j.end_obj();
}

// SL-InterUE-CoordinationScheme1-r17 ::= SEQUENCE
SRSASN_CODE sl_inter_ue_coordination_scheme1_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_iuc_explicit_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_iuc_condition_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_condition1_a_2_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_thres_rsrp_condition1_b_1_option1_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_thres_rsrp_condition1_b_1_option2_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_container_coord_info_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_container_request_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_trigger_condition_coord_info_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_trigger_condition_request_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_prio_coord_info_explicit_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_prio_coord_info_condition_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_prio_request_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_prio_preferred_res_set_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_max_slot_offset_triv_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_num_sub_ch_preferred_res_set_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_reserved_period_preferred_res_set_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_determine_res_type_r17_present, 1));

  if (sl_iuc_explicit_r17_present) {
    HANDLE_CODE(sl_iuc_explicit_r17.pack(bref));
  }
  if (sl_iuc_condition_r17_present) {
    HANDLE_CODE(sl_iuc_condition_r17.pack(bref));
  }
  if (sl_thres_rsrp_condition1_b_1_option1_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_thres_rsrp_condition1_b_1_option1_list_r17, 1, 8));
  }
  if (sl_thres_rsrp_condition1_b_1_option2_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_thres_rsrp_condition1_b_1_option2_list_r17, 1, 8));
  }
  if (sl_container_coord_info_r17_present) {
    HANDLE_CODE(sl_container_coord_info_r17.pack(bref));
  }
  if (sl_container_request_r17_present) {
    HANDLE_CODE(sl_container_request_r17.pack(bref));
  }
  if (sl_trigger_condition_coord_info_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_trigger_condition_coord_info_r17, (uint8_t)0u, (uint8_t)1u));
  }
  if (sl_trigger_condition_request_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_trigger_condition_request_r17, (uint8_t)0u, (uint8_t)1u));
  }
  if (sl_prio_coord_info_explicit_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_prio_coord_info_explicit_r17, (uint8_t)1u, (uint8_t)8u));
  }
  if (sl_prio_coord_info_condition_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_prio_coord_info_condition_r17, (uint8_t)1u, (uint8_t)8u));
  }
  if (sl_prio_request_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_prio_request_r17, (uint8_t)1u, (uint8_t)8u));
  }
  if (sl_prio_preferred_res_set_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_prio_preferred_res_set_r17, (uint8_t)1u, (uint8_t)8u));
  }
  if (sl_max_slot_offset_triv_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_max_slot_offset_triv_r17, (uint16_t)1u, (uint16_t)8000u));
  }
  if (sl_num_sub_ch_preferred_res_set_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_num_sub_ch_preferred_res_set_r17, (uint8_t)1u, (uint8_t)27u));
  }
  if (sl_reserved_period_preferred_res_set_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_reserved_period_preferred_res_set_r17, (uint8_t)1u, (uint8_t)16u));
  }
  if (sl_determine_res_type_r17_present) {
    HANDLE_CODE(sl_determine_res_type_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_inter_ue_coordination_scheme1_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_iuc_explicit_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_iuc_condition_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_condition1_a_2_r17_present, 1));
  bool sl_thres_rsrp_condition1_b_1_option1_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_thres_rsrp_condition1_b_1_option1_list_r17_present, 1));
  bool sl_thres_rsrp_condition1_b_1_option2_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_thres_rsrp_condition1_b_1_option2_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_container_coord_info_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_container_request_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_trigger_condition_coord_info_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_trigger_condition_request_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_prio_coord_info_explicit_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_prio_coord_info_condition_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_prio_request_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_prio_preferred_res_set_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_max_slot_offset_triv_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_num_sub_ch_preferred_res_set_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_reserved_period_preferred_res_set_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_determine_res_type_r17_present, 1));

  if (sl_iuc_explicit_r17_present) {
    HANDLE_CODE(sl_iuc_explicit_r17.unpack(bref));
  }
  if (sl_iuc_condition_r17_present) {
    HANDLE_CODE(sl_iuc_condition_r17.unpack(bref));
  }
  if (sl_thres_rsrp_condition1_b_1_option1_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_thres_rsrp_condition1_b_1_option1_list_r17, bref, 1, 8));
  }
  if (sl_thres_rsrp_condition1_b_1_option2_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_thres_rsrp_condition1_b_1_option2_list_r17, bref, 1, 8));
  }
  if (sl_container_coord_info_r17_present) {
    HANDLE_CODE(sl_container_coord_info_r17.unpack(bref));
  }
  if (sl_container_request_r17_present) {
    HANDLE_CODE(sl_container_request_r17.unpack(bref));
  }
  if (sl_trigger_condition_coord_info_r17_present) {
    HANDLE_CODE(unpack_integer(sl_trigger_condition_coord_info_r17, bref, (uint8_t)0u, (uint8_t)1u));
  }
  if (sl_trigger_condition_request_r17_present) {
    HANDLE_CODE(unpack_integer(sl_trigger_condition_request_r17, bref, (uint8_t)0u, (uint8_t)1u));
  }
  if (sl_prio_coord_info_explicit_r17_present) {
    HANDLE_CODE(unpack_integer(sl_prio_coord_info_explicit_r17, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (sl_prio_coord_info_condition_r17_present) {
    HANDLE_CODE(unpack_integer(sl_prio_coord_info_condition_r17, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (sl_prio_request_r17_present) {
    HANDLE_CODE(unpack_integer(sl_prio_request_r17, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (sl_prio_preferred_res_set_r17_present) {
    HANDLE_CODE(unpack_integer(sl_prio_preferred_res_set_r17, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (sl_max_slot_offset_triv_r17_present) {
    HANDLE_CODE(unpack_integer(sl_max_slot_offset_triv_r17, bref, (uint16_t)1u, (uint16_t)8000u));
  }
  if (sl_num_sub_ch_preferred_res_set_r17_present) {
    HANDLE_CODE(unpack_integer(sl_num_sub_ch_preferred_res_set_r17, bref, (uint8_t)1u, (uint8_t)27u));
  }
  if (sl_reserved_period_preferred_res_set_r17_present) {
    HANDLE_CODE(unpack_integer(sl_reserved_period_preferred_res_set_r17, bref, (uint8_t)1u, (uint8_t)16u));
  }
  if (sl_determine_res_type_r17_present) {
    HANDLE_CODE(sl_determine_res_type_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_inter_ue_coordination_scheme1_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_iuc_explicit_r17_present) {
    j.write_str("sl-IUC-Explicit-r17", sl_iuc_explicit_r17.to_string());
  }
  if (sl_iuc_condition_r17_present) {
    j.write_str("sl-IUC-Condition-r17", sl_iuc_condition_r17.to_string());
  }
  if (sl_condition1_a_2_r17_present) {
    j.write_str("sl-Condition1-A-2-r17", "disabled");
  }
  if (sl_thres_rsrp_condition1_b_1_option1_list_r17.size() > 0) {
    j.start_array("sl-ThresholdRSRP-Condition1-B-1-Option1List-r17");
    for (const auto& e1 : sl_thres_rsrp_condition1_b_1_option1_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_thres_rsrp_condition1_b_1_option2_list_r17.size() > 0) {
    j.start_array("sl-ThresholdRSRP-Condition1-B-1-Option2List-r17");
    for (const auto& e1 : sl_thres_rsrp_condition1_b_1_option2_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_container_coord_info_r17_present) {
    j.write_str("sl-ContainerCoordInfo-r17", sl_container_coord_info_r17.to_string());
  }
  if (sl_container_request_r17_present) {
    j.write_str("sl-ContainerRequest-r17", sl_container_request_r17.to_string());
  }
  if (sl_trigger_condition_coord_info_r17_present) {
    j.write_int("sl-TriggerConditionCoordInfo-r17", sl_trigger_condition_coord_info_r17);
  }
  if (sl_trigger_condition_request_r17_present) {
    j.write_int("sl-TriggerConditionRequest-r17", sl_trigger_condition_request_r17);
  }
  if (sl_prio_coord_info_explicit_r17_present) {
    j.write_int("sl-PriorityCoordInfoExplicit-r17", sl_prio_coord_info_explicit_r17);
  }
  if (sl_prio_coord_info_condition_r17_present) {
    j.write_int("sl-PriorityCoordInfoCondition-r17", sl_prio_coord_info_condition_r17);
  }
  if (sl_prio_request_r17_present) {
    j.write_int("sl-PriorityRequest-r17", sl_prio_request_r17);
  }
  if (sl_prio_preferred_res_set_r17_present) {
    j.write_int("sl-PriorityPreferredResourceSet-r17", sl_prio_preferred_res_set_r17);
  }
  if (sl_max_slot_offset_triv_r17_present) {
    j.write_int("sl-MaxSlotOffsetTRIV-r17", sl_max_slot_offset_triv_r17);
  }
  if (sl_num_sub_ch_preferred_res_set_r17_present) {
    j.write_int("sl-NumSubCH-PreferredResourceSet-r17", sl_num_sub_ch_preferred_res_set_r17);
  }
  if (sl_reserved_period_preferred_res_set_r17_present) {
    j.write_int("sl-ReservedPeriodPreferredResourceSet-r17", sl_reserved_period_preferred_res_set_r17);
  }
  if (sl_determine_res_type_r17_present) {
    j.write_str("sl-DetermineResourceType-r17", sl_determine_res_type_r17.to_string());
  }
  j.end_obj();
}

const char* sl_inter_ue_coordination_scheme1_r17_s::sl_iuc_explicit_r17_opts::to_string() const
{
  static const char* names[] = {"enabled", "disabled"};
  return convert_enum_idx(names, 2, value, "sl_inter_ue_coordination_scheme1_r17_s::sl_iuc_explicit_r17_e_");
}

const char* sl_inter_ue_coordination_scheme1_r17_s::sl_iuc_condition_r17_opts::to_string() const
{
  static const char* names[] = {"enabled", "disabled"};
  return convert_enum_idx(names, 2, value, "sl_inter_ue_coordination_scheme1_r17_s::sl_iuc_condition_r17_e_");
}

const char* sl_inter_ue_coordination_scheme1_r17_s::sl_container_coord_info_r17_opts::to_string() const
{
  static const char* names[] = {"enabled", "disabled"};
  return convert_enum_idx(names, 2, value, "sl_inter_ue_coordination_scheme1_r17_s::sl_container_coord_info_r17_e_");
}

const char* sl_inter_ue_coordination_scheme1_r17_s::sl_container_request_r17_opts::to_string() const
{
  static const char* names[] = {"enabled", "disabled"};
  return convert_enum_idx(names, 2, value, "sl_inter_ue_coordination_scheme1_r17_s::sl_container_request_r17_e_");
}

const char* sl_inter_ue_coordination_scheme1_r17_s::sl_determine_res_type_r17_opts::to_string() const
{
  static const char* names[] = {"uea", "ueb"};
  return convert_enum_idx(names, 2, value, "sl_inter_ue_coordination_scheme1_r17_s::sl_determine_res_type_r17_e_");
}

// SL-InterUE-CoordinationScheme2-r17 ::= SEQUENCE
SRSASN_CODE sl_inter_ue_coordination_scheme2_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_iuc_scheme2_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_rb_set_psfch_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_type_ue_a_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_psfch_occasion_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_slot_level_res_exclusion_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_option_for_condition2_a_1_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_ind_ue_b_r17_present, 1));

  if (sl_rb_set_psfch_r17_present) {
    HANDLE_CODE(sl_rb_set_psfch_r17.pack(bref));
  }
  if (sl_psfch_occasion_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_psfch_occasion_r17, (uint8_t)0u, (uint8_t)1u));
  }
  if (sl_option_for_condition2_a_1_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_option_for_condition2_a_1_r17, (uint8_t)0u, (uint8_t)1u));
  }
  if (sl_ind_ue_b_r17_present) {
    HANDLE_CODE(sl_ind_ue_b_r17.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sl_delta_rsrp_thresh_v1720_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_delta_rsrp_thresh_v1720_present, 1));
      if (sl_delta_rsrp_thresh_v1720_present) {
        HANDLE_CODE(pack_integer(bref, sl_delta_rsrp_thresh_v1720, (int8_t)-30, (int8_t)30));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_inter_ue_coordination_scheme2_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_iuc_scheme2_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_rb_set_psfch_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_type_ue_a_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_psfch_occasion_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_slot_level_res_exclusion_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_option_for_condition2_a_1_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_ind_ue_b_r17_present, 1));

  if (sl_rb_set_psfch_r17_present) {
    HANDLE_CODE(sl_rb_set_psfch_r17.unpack(bref));
  }
  if (sl_psfch_occasion_r17_present) {
    HANDLE_CODE(unpack_integer(sl_psfch_occasion_r17, bref, (uint8_t)0u, (uint8_t)1u));
  }
  if (sl_option_for_condition2_a_1_r17_present) {
    HANDLE_CODE(unpack_integer(sl_option_for_condition2_a_1_r17, bref, (uint8_t)0u, (uint8_t)1u));
  }
  if (sl_ind_ue_b_r17_present) {
    HANDLE_CODE(sl_ind_ue_b_r17.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(sl_delta_rsrp_thresh_v1720_present, 1));
      if (sl_delta_rsrp_thresh_v1720_present) {
        HANDLE_CODE(unpack_integer(sl_delta_rsrp_thresh_v1720, bref, (int8_t)-30, (int8_t)30));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sl_inter_ue_coordination_scheme2_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_iuc_scheme2_r17_present) {
    j.write_str("sl-IUC-Scheme2-r17", "enabled");
  }
  if (sl_rb_set_psfch_r17_present) {
    j.write_str("sl-RB-SetPSFCH-r17", sl_rb_set_psfch_r17.to_string());
  }
  if (sl_type_ue_a_r17_present) {
    j.write_str("sl-TypeUE-A-r17", "enabled");
  }
  if (sl_psfch_occasion_r17_present) {
    j.write_int("sl-PSFCH-Occasion-r17", sl_psfch_occasion_r17);
  }
  if (sl_slot_level_res_exclusion_r17_present) {
    j.write_str("sl-SlotLevelResourceExclusion-r17", "enabled");
  }
  if (sl_option_for_condition2_a_1_r17_present) {
    j.write_int("sl-OptionForCondition2-A-1-r17", sl_option_for_condition2_a_1_r17);
  }
  if (sl_ind_ue_b_r17_present) {
    j.write_str("sl-IndicationUE-B-r17", sl_ind_ue_b_r17.to_string());
  }
  if (ext) {
    if (sl_delta_rsrp_thresh_v1720_present) {
      j.write_int("sl-DeltaRSRP-Thresh-v1720", sl_delta_rsrp_thresh_v1720);
    }
  }
  j.end_obj();
}

const char* sl_inter_ue_coordination_scheme2_r17_s::sl_ind_ue_b_r17_opts::to_string() const
{
  static const char* names[] = {"enabled", "disabled"};
  return convert_enum_idx(names, 2, value, "sl_inter_ue_coordination_scheme2_r17_s::sl_ind_ue_b_r17_e_");
}

// SL-ResourceReservePeriod-r16 ::= CHOICE
void sl_res_reserve_period_r16_c::destroy_() {}
void sl_res_reserve_period_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
sl_res_reserve_period_r16_c::sl_res_reserve_period_r16_c(const sl_res_reserve_period_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sl_res_reserve_period1_r16:
      c.init(other.c.get<sl_res_reserve_period1_r16_e_>());
      break;
    case types::sl_res_reserve_period2_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_res_reserve_period_r16_c");
  }
}
sl_res_reserve_period_r16_c& sl_res_reserve_period_r16_c::operator=(const sl_res_reserve_period_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sl_res_reserve_period1_r16:
      c.set(other.c.get<sl_res_reserve_period1_r16_e_>());
      break;
    case types::sl_res_reserve_period2_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_res_reserve_period_r16_c");
  }

  return *this;
}
sl_res_reserve_period_r16_c::sl_res_reserve_period1_r16_e_&
sl_res_reserve_period_r16_c::set_sl_res_reserve_period1_r16()
{
  set(types::sl_res_reserve_period1_r16);
  return c.get<sl_res_reserve_period1_r16_e_>();
}
uint8_t& sl_res_reserve_period_r16_c::set_sl_res_reserve_period2_r16()
{
  set(types::sl_res_reserve_period2_r16);
  return c.get<uint8_t>();
}
void sl_res_reserve_period_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sl_res_reserve_period1_r16:
      j.write_str("sl-ResourceReservePeriod1-r16", c.get<sl_res_reserve_period1_r16_e_>().to_string());
      break;
    case types::sl_res_reserve_period2_r16:
      j.write_int("sl-ResourceReservePeriod2-r16", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "sl_res_reserve_period_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE sl_res_reserve_period_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sl_res_reserve_period1_r16:
      HANDLE_CODE(c.get<sl_res_reserve_period1_r16_e_>().pack(bref));
      break;
    case types::sl_res_reserve_period2_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)99u));
      break;
    default:
      log_invalid_choice_id(type_, "sl_res_reserve_period_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_res_reserve_period_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sl_res_reserve_period1_r16:
      HANDLE_CODE(c.get<sl_res_reserve_period1_r16_e_>().unpack(bref));
      break;
    case types::sl_res_reserve_period2_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)99u));
      break;
    default:
      log_invalid_choice_id(type_, "sl_res_reserve_period_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_res_reserve_period_r16_c::sl_res_reserve_period1_r16_opts::to_string() const
{
  static const char* names[] = {
      "ms0", "ms100", "ms200", "ms300", "ms400", "ms500", "ms600", "ms700", "ms800", "ms900", "ms1000"};
  return convert_enum_idx(names, 11, value, "sl_res_reserve_period_r16_c::sl_res_reserve_period1_r16_e_");
}
uint16_t sl_res_reserve_period_r16_c::sl_res_reserve_period1_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000};
  return map_enum_number(numbers, 11, value, "sl_res_reserve_period_r16_c::sl_res_reserve_period1_r16_e_");
}

const char* sl_res_reserve_period_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"sl-ResourceReservePeriod1-r16", "sl-ResourceReservePeriod2-r16"};
  return convert_enum_idx(names, 2, value, "sl_res_reserve_period_r16_c::types");
}
uint8_t sl_res_reserve_period_r16_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "sl_res_reserve_period_r16_c::types");
}

// SL-TxPercentageConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_tx_percentage_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, sl_prio_r16, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(sl_tx_percentage_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_tx_percentage_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(sl_prio_r16, bref, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(sl_tx_percentage_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_tx_percentage_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-Priority-r16", sl_prio_r16);
  j.write_str("sl-TxPercentage-r16", sl_tx_percentage_r16.to_string());
  j.end_obj();
}

const char* sl_tx_percentage_cfg_r16_s::sl_tx_percentage_r16_opts::to_string() const
{
  static const char* names[] = {"p20", "p35", "p50"};
  return convert_enum_idx(names, 3, value, "sl_tx_percentage_cfg_r16_s::sl_tx_percentage_r16_e_");
}
uint8_t sl_tx_percentage_cfg_r16_s::sl_tx_percentage_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {20, 35, 50};
  return map_enum_number(numbers, 3, value, "sl_tx_percentage_cfg_r16_s::sl_tx_percentage_r16_e_");
}

// SL-ZoneConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_zone_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(sl_zone_len_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_zone_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(sl_zone_len_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_zone_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sl-ZoneLength-r16", sl_zone_len_r16.to_string());
  j.end_obj();
}

const char* sl_zone_cfg_r16_s::sl_zone_len_r16_opts::to_string() const
{
  static const char* names[] = {"m5", "m10", "m20", "m30", "m40", "m50", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "sl_zone_cfg_r16_s::sl_zone_len_r16_e_");
}
uint8_t sl_zone_cfg_r16_s::sl_zone_len_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 10, 20, 30, 40, 50};
  return map_enum_number(numbers, 6, value, "sl_zone_cfg_r16_s::sl_zone_len_r16_e_");
}

// FilterCoefficient ::= ENUMERATED
const char* filt_coef_opts::to_string() const
{
  static const char* names[] = {"fc0",
                                "fc1",
                                "fc2",
                                "fc3",
                                "fc4",
                                "fc5",
                                "fc6",
                                "fc7",
                                "fc8",
                                "fc9",
                                "fc11",
                                "fc13",
                                "fc15",
                                "fc17",
                                "fc19",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "filt_coef_e");
}
uint8_t filt_coef_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 17, 19};
  return map_enum_number(numbers, 15, value, "filt_coef_e");
}

// SL-InterUE-CoordinationConfig-r17 ::= SEQUENCE
SRSASN_CODE sl_inter_ue_coordination_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_inter_ue_coordination_scheme1_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_inter_ue_coordination_scheme2_r17_present, 1));

  if (sl_inter_ue_coordination_scheme1_r17_present) {
    HANDLE_CODE(sl_inter_ue_coordination_scheme1_r17.pack(bref));
  }
  if (sl_inter_ue_coordination_scheme2_r17_present) {
    HANDLE_CODE(sl_inter_ue_coordination_scheme2_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_inter_ue_coordination_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_inter_ue_coordination_scheme1_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_inter_ue_coordination_scheme2_r17_present, 1));

  if (sl_inter_ue_coordination_scheme1_r17_present) {
    HANDLE_CODE(sl_inter_ue_coordination_scheme1_r17.unpack(bref));
  }
  if (sl_inter_ue_coordination_scheme2_r17_present) {
    HANDLE_CODE(sl_inter_ue_coordination_scheme2_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_inter_ue_coordination_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_inter_ue_coordination_scheme1_r17_present) {
    j.write_fieldname("sl-InterUE-CoordinationScheme1-r17");
    sl_inter_ue_coordination_scheme1_r17.to_json(j);
  }
  if (sl_inter_ue_coordination_scheme2_r17_present) {
    j.write_fieldname("sl-InterUE-CoordinationScheme2-r17");
    sl_inter_ue_coordination_scheme2_r17.to_json(j);
  }
  j.end_obj();
}

// SL-PBPS-CPS-Config-r17 ::= SEQUENCE
SRSASN_CODE sl_pbps_cp_s_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_allowed_res_sel_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_min_num_candidate_slots_periodic_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_pbps_occasion_reserve_period_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_add_pbps_occasion_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_cp_s_win_periodic_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_min_num_candidate_slots_aperiodic_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_min_num_rssi_meas_slots_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_default_cbr_random_sel_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_default_cbr_partial_sensing_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_cp_s_win_aperiodic_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_partial_sensing_inactive_time_r17_present, 1));

  if (sl_allowed_res_sel_cfg_r17_present) {
    HANDLE_CODE(sl_allowed_res_sel_cfg_r17.pack(bref));
  }
  if (sl_min_num_candidate_slots_periodic_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_min_num_candidate_slots_periodic_r17, (uint8_t)1u, (uint8_t)32u));
  }
  if (sl_pbps_occasion_reserve_period_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_pbps_occasion_reserve_period_list_r17, 1, 16, integer_packer<uint8_t>(1, 16)));
  }
  if (sl_cp_s_win_periodic_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_cp_s_win_periodic_r17, (uint8_t)5u, (uint8_t)30u));
  }
  if (sl_min_num_candidate_slots_aperiodic_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_min_num_candidate_slots_aperiodic_r17, (uint8_t)1u, (uint8_t)32u));
  }
  if (sl_min_num_rssi_meas_slots_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_min_num_rssi_meas_slots_r17, (uint16_t)1u, (uint16_t)800u));
  }
  if (sl_default_cbr_random_sel_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_default_cbr_random_sel_r17, (uint8_t)0u, (uint8_t)100u));
  }
  if (sl_default_cbr_partial_sensing_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_default_cbr_partial_sensing_r17, (uint8_t)0u, (uint8_t)100u));
  }
  if (sl_cp_s_win_aperiodic_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_cp_s_win_aperiodic_r17, (uint8_t)0u, (uint8_t)30u));
  }
  if (sl_partial_sensing_inactive_time_r17_present) {
    HANDLE_CODE(sl_partial_sensing_inactive_time_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_pbps_cp_s_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_allowed_res_sel_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_min_num_candidate_slots_periodic_r17_present, 1));
  bool sl_pbps_occasion_reserve_period_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_pbps_occasion_reserve_period_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_add_pbps_occasion_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_cp_s_win_periodic_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_min_num_candidate_slots_aperiodic_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_min_num_rssi_meas_slots_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_default_cbr_random_sel_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_default_cbr_partial_sensing_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_cp_s_win_aperiodic_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_partial_sensing_inactive_time_r17_present, 1));

  if (sl_allowed_res_sel_cfg_r17_present) {
    HANDLE_CODE(sl_allowed_res_sel_cfg_r17.unpack(bref));
  }
  if (sl_min_num_candidate_slots_periodic_r17_present) {
    HANDLE_CODE(unpack_integer(sl_min_num_candidate_slots_periodic_r17, bref, (uint8_t)1u, (uint8_t)32u));
  }
  if (sl_pbps_occasion_reserve_period_list_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(sl_pbps_occasion_reserve_period_list_r17, bref, 1, 16, integer_packer<uint8_t>(1, 16)));
  }
  if (sl_cp_s_win_periodic_r17_present) {
    HANDLE_CODE(unpack_integer(sl_cp_s_win_periodic_r17, bref, (uint8_t)5u, (uint8_t)30u));
  }
  if (sl_min_num_candidate_slots_aperiodic_r17_present) {
    HANDLE_CODE(unpack_integer(sl_min_num_candidate_slots_aperiodic_r17, bref, (uint8_t)1u, (uint8_t)32u));
  }
  if (sl_min_num_rssi_meas_slots_r17_present) {
    HANDLE_CODE(unpack_integer(sl_min_num_rssi_meas_slots_r17, bref, (uint16_t)1u, (uint16_t)800u));
  }
  if (sl_default_cbr_random_sel_r17_present) {
    HANDLE_CODE(unpack_integer(sl_default_cbr_random_sel_r17, bref, (uint8_t)0u, (uint8_t)100u));
  }
  if (sl_default_cbr_partial_sensing_r17_present) {
    HANDLE_CODE(unpack_integer(sl_default_cbr_partial_sensing_r17, bref, (uint8_t)0u, (uint8_t)100u));
  }
  if (sl_cp_s_win_aperiodic_r17_present) {
    HANDLE_CODE(unpack_integer(sl_cp_s_win_aperiodic_r17, bref, (uint8_t)0u, (uint8_t)30u));
  }
  if (sl_partial_sensing_inactive_time_r17_present) {
    HANDLE_CODE(sl_partial_sensing_inactive_time_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_pbps_cp_s_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_allowed_res_sel_cfg_r17_present) {
    j.write_str("sl-AllowedResourceSelectionConfig-r17", sl_allowed_res_sel_cfg_r17.to_string());
  }
  if (sl_min_num_candidate_slots_periodic_r17_present) {
    j.write_int("sl-MinNumCandidateSlotsPeriodic-r17", sl_min_num_candidate_slots_periodic_r17);
  }
  if (sl_pbps_occasion_reserve_period_list_r17.size() > 0) {
    j.start_array("sl-PBPS-OccasionReservePeriodList-r17");
    for (const auto& e1 : sl_pbps_occasion_reserve_period_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_add_pbps_occasion_r17_present) {
    j.write_str("sl-Additional-PBPS-Occasion-r17", "monitored");
  }
  if (sl_cp_s_win_periodic_r17_present) {
    j.write_int("sl-CPS-WindowPeriodic-r17", sl_cp_s_win_periodic_r17);
  }
  if (sl_min_num_candidate_slots_aperiodic_r17_present) {
    j.write_int("sl-MinNumCandidateSlotsAperiodic-r17", sl_min_num_candidate_slots_aperiodic_r17);
  }
  if (sl_min_num_rssi_meas_slots_r17_present) {
    j.write_int("sl-MinNumRssiMeasurementSlots-r17", sl_min_num_rssi_meas_slots_r17);
  }
  if (sl_default_cbr_random_sel_r17_present) {
    j.write_int("sl-DefaultCBR-RandomSelection-r17", sl_default_cbr_random_sel_r17);
  }
  if (sl_default_cbr_partial_sensing_r17_present) {
    j.write_int("sl-DefaultCBR-PartialSensing-r17", sl_default_cbr_partial_sensing_r17);
  }
  if (sl_cp_s_win_aperiodic_r17_present) {
    j.write_int("sl-CPS-WindowAperiodic-r17", sl_cp_s_win_aperiodic_r17);
  }
  if (sl_partial_sensing_inactive_time_r17_present) {
    j.write_str("sl-PartialSensingInactiveTime-r17", sl_partial_sensing_inactive_time_r17.to_string());
  }
  j.end_obj();
}

const char* sl_pbps_cp_s_cfg_r17_s::sl_allowed_res_sel_cfg_r17_opts::to_string() const
{
  static const char* names[] = {"c1", "c2", "c3", "c4", "c5", "c6", "c7"};
  return convert_enum_idx(names, 7, value, "sl_pbps_cp_s_cfg_r17_s::sl_allowed_res_sel_cfg_r17_e_");
}
uint8_t sl_pbps_cp_s_cfg_r17_s::sl_allowed_res_sel_cfg_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 6, 7};
  return map_enum_number(numbers, 7, value, "sl_pbps_cp_s_cfg_r17_s::sl_allowed_res_sel_cfg_r17_e_");
}

const char* sl_pbps_cp_s_cfg_r17_s::sl_partial_sensing_inactive_time_r17_opts::to_string() const
{
  static const char* names[] = {"enabled", "disabled"};
  return convert_enum_idx(names, 2, value, "sl_pbps_cp_s_cfg_r17_s::sl_partial_sensing_inactive_time_r17_e_");
}

// SL-PSCCH-Config-r16 ::= SEQUENCE
SRSASN_CODE sl_pscch_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_time_res_pscch_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_freq_res_pscch_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_dmrs_scramble_id_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_num_reserved_bits_r16_present, 1));

  if (sl_time_res_pscch_r16_present) {
    HANDLE_CODE(sl_time_res_pscch_r16.pack(bref));
  }
  if (sl_freq_res_pscch_r16_present) {
    HANDLE_CODE(sl_freq_res_pscch_r16.pack(bref));
  }
  if (sl_dmrs_scramble_id_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_dmrs_scramble_id_r16, (uint32_t)0u, (uint32_t)65535u));
  }
  if (sl_num_reserved_bits_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_num_reserved_bits_r16, (uint8_t)2u, (uint8_t)4u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_pscch_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_time_res_pscch_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_freq_res_pscch_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_dmrs_scramble_id_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_num_reserved_bits_r16_present, 1));

  if (sl_time_res_pscch_r16_present) {
    HANDLE_CODE(sl_time_res_pscch_r16.unpack(bref));
  }
  if (sl_freq_res_pscch_r16_present) {
    HANDLE_CODE(sl_freq_res_pscch_r16.unpack(bref));
  }
  if (sl_dmrs_scramble_id_r16_present) {
    HANDLE_CODE(unpack_integer(sl_dmrs_scramble_id_r16, bref, (uint32_t)0u, (uint32_t)65535u));
  }
  if (sl_num_reserved_bits_r16_present) {
    HANDLE_CODE(unpack_integer(sl_num_reserved_bits_r16, bref, (uint8_t)2u, (uint8_t)4u));
  }

  return SRSASN_SUCCESS;
}
void sl_pscch_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_time_res_pscch_r16_present) {
    j.write_str("sl-TimeResourcePSCCH-r16", sl_time_res_pscch_r16.to_string());
  }
  if (sl_freq_res_pscch_r16_present) {
    j.write_str("sl-FreqResourcePSCCH-r16", sl_freq_res_pscch_r16.to_string());
  }
  if (sl_dmrs_scramble_id_r16_present) {
    j.write_int("sl-DMRS-ScrambleID-r16", sl_dmrs_scramble_id_r16);
  }
  if (sl_num_reserved_bits_r16_present) {
    j.write_int("sl-NumReservedBits-r16", sl_num_reserved_bits_r16);
  }
  j.end_obj();
}

const char* sl_pscch_cfg_r16_s::sl_time_res_pscch_r16_opts::to_string() const
{
  static const char* names[] = {"n2", "n3"};
  return convert_enum_idx(names, 2, value, "sl_pscch_cfg_r16_s::sl_time_res_pscch_r16_e_");
}
uint8_t sl_pscch_cfg_r16_s::sl_time_res_pscch_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3};
  return map_enum_number(numbers, 2, value, "sl_pscch_cfg_r16_s::sl_time_res_pscch_r16_e_");
}

const char* sl_pscch_cfg_r16_s::sl_freq_res_pscch_r16_opts::to_string() const
{
  static const char* names[] = {"n10", "n12", "n15", "n20", "n25"};
  return convert_enum_idx(names, 5, value, "sl_pscch_cfg_r16_s::sl_freq_res_pscch_r16_e_");
}
uint8_t sl_pscch_cfg_r16_s::sl_freq_res_pscch_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {10, 12, 15, 20, 25};
  return map_enum_number(numbers, 5, value, "sl_pscch_cfg_r16_s::sl_freq_res_pscch_r16_e_");
}

// SL-PSFCH-Config-r16 ::= SEQUENCE
SRSASN_CODE sl_psfch_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_psfch_period_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_psfch_rb_set_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_num_mux_cs_pair_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_min_time_gap_psfch_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_psfch_hop_id_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_psfch_candidate_res_type_r16_present, 1));

  if (sl_psfch_period_r16_present) {
    HANDLE_CODE(sl_psfch_period_r16.pack(bref));
  }
  if (sl_psfch_rb_set_r16_present) {
    HANDLE_CODE(sl_psfch_rb_set_r16.pack(bref));
  }
  if (sl_num_mux_cs_pair_r16_present) {
    HANDLE_CODE(sl_num_mux_cs_pair_r16.pack(bref));
  }
  if (sl_min_time_gap_psfch_r16_present) {
    HANDLE_CODE(sl_min_time_gap_psfch_r16.pack(bref));
  }
  if (sl_psfch_hop_id_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_psfch_hop_id_r16, (uint16_t)0u, (uint16_t)1023u));
  }
  if (sl_psfch_candidate_res_type_r16_present) {
    HANDLE_CODE(sl_psfch_candidate_res_type_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_psfch_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_psfch_period_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_psfch_rb_set_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_num_mux_cs_pair_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_min_time_gap_psfch_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_psfch_hop_id_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_psfch_candidate_res_type_r16_present, 1));

  if (sl_psfch_period_r16_present) {
    HANDLE_CODE(sl_psfch_period_r16.unpack(bref));
  }
  if (sl_psfch_rb_set_r16_present) {
    HANDLE_CODE(sl_psfch_rb_set_r16.unpack(bref));
  }
  if (sl_num_mux_cs_pair_r16_present) {
    HANDLE_CODE(sl_num_mux_cs_pair_r16.unpack(bref));
  }
  if (sl_min_time_gap_psfch_r16_present) {
    HANDLE_CODE(sl_min_time_gap_psfch_r16.unpack(bref));
  }
  if (sl_psfch_hop_id_r16_present) {
    HANDLE_CODE(unpack_integer(sl_psfch_hop_id_r16, bref, (uint16_t)0u, (uint16_t)1023u));
  }
  if (sl_psfch_candidate_res_type_r16_present) {
    HANDLE_CODE(sl_psfch_candidate_res_type_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_psfch_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_psfch_period_r16_present) {
    j.write_str("sl-PSFCH-Period-r16", sl_psfch_period_r16.to_string());
  }
  if (sl_psfch_rb_set_r16_present) {
    j.write_str("sl-PSFCH-RB-Set-r16", sl_psfch_rb_set_r16.to_string());
  }
  if (sl_num_mux_cs_pair_r16_present) {
    j.write_str("sl-NumMuxCS-Pair-r16", sl_num_mux_cs_pair_r16.to_string());
  }
  if (sl_min_time_gap_psfch_r16_present) {
    j.write_str("sl-MinTimeGapPSFCH-r16", sl_min_time_gap_psfch_r16.to_string());
  }
  if (sl_psfch_hop_id_r16_present) {
    j.write_int("sl-PSFCH-HopID-r16", sl_psfch_hop_id_r16);
  }
  if (sl_psfch_candidate_res_type_r16_present) {
    j.write_str("sl-PSFCH-CandidateResourceType-r16", sl_psfch_candidate_res_type_r16.to_string());
  }
  j.end_obj();
}

const char* sl_psfch_cfg_r16_s::sl_psfch_period_r16_opts::to_string() const
{
  static const char* names[] = {"sl0", "sl1", "sl2", "sl4"};
  return convert_enum_idx(names, 4, value, "sl_psfch_cfg_r16_s::sl_psfch_period_r16_e_");
}
uint8_t sl_psfch_cfg_r16_s::sl_psfch_period_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 4};
  return map_enum_number(numbers, 4, value, "sl_psfch_cfg_r16_s::sl_psfch_period_r16_e_");
}

const char* sl_psfch_cfg_r16_s::sl_num_mux_cs_pair_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n6"};
  return convert_enum_idx(names, 4, value, "sl_psfch_cfg_r16_s::sl_num_mux_cs_pair_r16_e_");
}
uint8_t sl_psfch_cfg_r16_s::sl_num_mux_cs_pair_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 6};
  return map_enum_number(numbers, 4, value, "sl_psfch_cfg_r16_s::sl_num_mux_cs_pair_r16_e_");
}

const char* sl_psfch_cfg_r16_s::sl_min_time_gap_psfch_r16_opts::to_string() const
{
  static const char* names[] = {"sl2", "sl3"};
  return convert_enum_idx(names, 2, value, "sl_psfch_cfg_r16_s::sl_min_time_gap_psfch_r16_e_");
}
uint8_t sl_psfch_cfg_r16_s::sl_min_time_gap_psfch_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3};
  return map_enum_number(numbers, 2, value, "sl_psfch_cfg_r16_s::sl_min_time_gap_psfch_r16_e_");
}

const char* sl_psfch_cfg_r16_s::sl_psfch_candidate_res_type_r16_opts::to_string() const
{
  static const char* names[] = {"startSubCH", "allocSubCH"};
  return convert_enum_idx(names, 2, value, "sl_psfch_cfg_r16_s::sl_psfch_candidate_res_type_r16_e_");
}

// SL-PSSCH-Config-r16 ::= SEQUENCE
SRSASN_CODE sl_pssch_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_pssch_dmrs_time_pattern_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_beta_offsets2nd_sci_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_scaling_r16_present, 1));

  if (sl_pssch_dmrs_time_pattern_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_pssch_dmrs_time_pattern_list_r16, 1, 3, integer_packer<uint8_t>(2, 4)));
  }
  if (sl_beta_offsets2nd_sci_r16_present) {
    HANDLE_CODE(pack_fixed_seq_of(
        bref, sl_beta_offsets2nd_sci_r16, sl_beta_offsets2nd_sci_r16.size(), integer_packer<uint8_t>(0, 31)));
  }
  if (sl_scaling_r16_present) {
    HANDLE_CODE(sl_scaling_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_pssch_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sl_pssch_dmrs_time_pattern_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_pssch_dmrs_time_pattern_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_beta_offsets2nd_sci_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_scaling_r16_present, 1));

  if (sl_pssch_dmrs_time_pattern_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_pssch_dmrs_time_pattern_list_r16, bref, 1, 3, integer_packer<uint8_t>(2, 4)));
  }
  if (sl_beta_offsets2nd_sci_r16_present) {
    HANDLE_CODE(unpack_fixed_seq_of(
        sl_beta_offsets2nd_sci_r16, bref, sl_beta_offsets2nd_sci_r16.size(), integer_packer<uint8_t>(0, 31)));
  }
  if (sl_scaling_r16_present) {
    HANDLE_CODE(sl_scaling_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_pssch_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_pssch_dmrs_time_pattern_list_r16.size() > 0) {
    j.start_array("sl-PSSCH-DMRS-TimePatternList-r16");
    for (const auto& e1 : sl_pssch_dmrs_time_pattern_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_beta_offsets2nd_sci_r16_present) {
    j.start_array("sl-BetaOffsets2ndSCI-r16");
    for (const auto& e1 : sl_beta_offsets2nd_sci_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_scaling_r16_present) {
    j.write_str("sl-Scaling-r16", sl_scaling_r16.to_string());
  }
  j.end_obj();
}

const char* sl_pssch_cfg_r16_s::sl_scaling_r16_opts::to_string() const
{
  static const char* names[] = {"f0p5", "f0p65", "f0p8", "f1"};
  return convert_enum_idx(names, 4, value, "sl_pssch_cfg_r16_s::sl_scaling_r16_e_");
}

// SL-PTRS-Config-r16 ::= SEQUENCE
SRSASN_CODE sl_ptrs_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_ptrs_freq_density_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ptrs_time_density_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ptrs_re_offset_r16_present, 1));

  if (sl_ptrs_freq_density_r16_present) {
    HANDLE_CODE(pack_fixed_seq_of(
        bref, sl_ptrs_freq_density_r16, sl_ptrs_freq_density_r16.size(), integer_packer<uint16_t>(1, 276)));
  }
  if (sl_ptrs_time_density_r16_present) {
    HANDLE_CODE(pack_fixed_seq_of(
        bref, sl_ptrs_time_density_r16, sl_ptrs_time_density_r16.size(), integer_packer<uint8_t>(0, 29)));
  }
  if (sl_ptrs_re_offset_r16_present) {
    HANDLE_CODE(sl_ptrs_re_offset_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_ptrs_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_ptrs_freq_density_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ptrs_time_density_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ptrs_re_offset_r16_present, 1));

  if (sl_ptrs_freq_density_r16_present) {
    HANDLE_CODE(unpack_fixed_seq_of(
        sl_ptrs_freq_density_r16, bref, sl_ptrs_freq_density_r16.size(), integer_packer<uint16_t>(1, 276)));
  }
  if (sl_ptrs_time_density_r16_present) {
    HANDLE_CODE(unpack_fixed_seq_of(
        sl_ptrs_time_density_r16, bref, sl_ptrs_time_density_r16.size(), integer_packer<uint8_t>(0, 29)));
  }
  if (sl_ptrs_re_offset_r16_present) {
    HANDLE_CODE(sl_ptrs_re_offset_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_ptrs_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_ptrs_freq_density_r16_present) {
    j.start_array("sl-PTRS-FreqDensity-r16");
    for (const auto& e1 : sl_ptrs_freq_density_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_ptrs_time_density_r16_present) {
    j.start_array("sl-PTRS-TimeDensity-r16");
    for (const auto& e1 : sl_ptrs_time_density_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_ptrs_re_offset_r16_present) {
    j.write_str("sl-PTRS-RE-Offset-r16", sl_ptrs_re_offset_r16.to_string());
  }
  j.end_obj();
}

const char* sl_ptrs_cfg_r16_s::sl_ptrs_re_offset_r16_opts::to_string() const
{
  static const char* names[] = {"offset01", "offset10", "offset11"};
  return convert_enum_idx(names, 3, value, "sl_ptrs_cfg_r16_s::sl_ptrs_re_offset_r16_e_");
}
float sl_ptrs_cfg_r16_s::sl_ptrs_re_offset_r16_opts::to_number() const
{
  static const float numbers[] = {0.1, 1.0, 1.1};
  return map_enum_number(numbers, 3, value, "sl_ptrs_cfg_r16_s::sl_ptrs_re_offset_r16_e_");
}
const char* sl_ptrs_cfg_r16_s::sl_ptrs_re_offset_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0.1", "1.0", "1.1"};
  return convert_enum_idx(number_strs, 3, value, "sl_ptrs_cfg_r16_s::sl_ptrs_re_offset_r16_e_");
}

// SL-PowerControl-r16 ::= SEQUENCE
SRSASN_CODE sl_pwr_ctrl_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_alpha_pssch_pscch_r16_present, 1));
  HANDLE_CODE(bref.pack(dl_alpha_pssch_pscch_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_p0_pssch_pscch_r16_present, 1));
  HANDLE_CODE(bref.pack(dl_p0_pssch_pscch_r16_present, 1));
  HANDLE_CODE(bref.pack(dl_alpha_psfch_r16_present, 1));
  HANDLE_CODE(bref.pack(dl_p0_psfch_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, sl_max_trans_pwr_r16, (int8_t)-30, (int8_t)33));
  if (sl_alpha_pssch_pscch_r16_present) {
    HANDLE_CODE(sl_alpha_pssch_pscch_r16.pack(bref));
  }
  if (dl_alpha_pssch_pscch_r16_present) {
    HANDLE_CODE(dl_alpha_pssch_pscch_r16.pack(bref));
  }
  if (sl_p0_pssch_pscch_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_p0_pssch_pscch_r16, (int8_t)-16, (int8_t)15));
  }
  if (dl_p0_pssch_pscch_r16_present) {
    HANDLE_CODE(pack_integer(bref, dl_p0_pssch_pscch_r16, (int8_t)-16, (int8_t)15));
  }
  if (dl_alpha_psfch_r16_present) {
    HANDLE_CODE(dl_alpha_psfch_r16.pack(bref));
  }
  if (dl_p0_psfch_r16_present) {
    HANDLE_CODE(pack_integer(bref, dl_p0_psfch_r16, (int8_t)-16, (int8_t)15));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= dl_p0_pssch_pscch_r17_present;
    group_flags[0] |= sl_p0_pssch_pscch_r17_present;
    group_flags[0] |= dl_p0_psfch_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(dl_p0_pssch_pscch_r17_present, 1));
      HANDLE_CODE(bref.pack(sl_p0_pssch_pscch_r17_present, 1));
      HANDLE_CODE(bref.pack(dl_p0_psfch_r17_present, 1));
      if (dl_p0_pssch_pscch_r17_present) {
        HANDLE_CODE(pack_integer(bref, dl_p0_pssch_pscch_r17, (int16_t)-202, (int16_t)24));
      }
      if (sl_p0_pssch_pscch_r17_present) {
        HANDLE_CODE(pack_integer(bref, sl_p0_pssch_pscch_r17, (int16_t)-202, (int16_t)24));
      }
      if (dl_p0_psfch_r17_present) {
        HANDLE_CODE(pack_integer(bref, dl_p0_psfch_r17, (int16_t)-202, (int16_t)24));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_pwr_ctrl_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_alpha_pssch_pscch_r16_present, 1));
  HANDLE_CODE(bref.unpack(dl_alpha_pssch_pscch_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_p0_pssch_pscch_r16_present, 1));
  HANDLE_CODE(bref.unpack(dl_p0_pssch_pscch_r16_present, 1));
  HANDLE_CODE(bref.unpack(dl_alpha_psfch_r16_present, 1));
  HANDLE_CODE(bref.unpack(dl_p0_psfch_r16_present, 1));

  HANDLE_CODE(unpack_integer(sl_max_trans_pwr_r16, bref, (int8_t)-30, (int8_t)33));
  if (sl_alpha_pssch_pscch_r16_present) {
    HANDLE_CODE(sl_alpha_pssch_pscch_r16.unpack(bref));
  }
  if (dl_alpha_pssch_pscch_r16_present) {
    HANDLE_CODE(dl_alpha_pssch_pscch_r16.unpack(bref));
  }
  if (sl_p0_pssch_pscch_r16_present) {
    HANDLE_CODE(unpack_integer(sl_p0_pssch_pscch_r16, bref, (int8_t)-16, (int8_t)15));
  }
  if (dl_p0_pssch_pscch_r16_present) {
    HANDLE_CODE(unpack_integer(dl_p0_pssch_pscch_r16, bref, (int8_t)-16, (int8_t)15));
  }
  if (dl_alpha_psfch_r16_present) {
    HANDLE_CODE(dl_alpha_psfch_r16.unpack(bref));
  }
  if (dl_p0_psfch_r16_present) {
    HANDLE_CODE(unpack_integer(dl_p0_psfch_r16, bref, (int8_t)-16, (int8_t)15));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(dl_p0_pssch_pscch_r17_present, 1));
      HANDLE_CODE(bref.unpack(sl_p0_pssch_pscch_r17_present, 1));
      HANDLE_CODE(bref.unpack(dl_p0_psfch_r17_present, 1));
      if (dl_p0_pssch_pscch_r17_present) {
        HANDLE_CODE(unpack_integer(dl_p0_pssch_pscch_r17, bref, (int16_t)-202, (int16_t)24));
      }
      if (sl_p0_pssch_pscch_r17_present) {
        HANDLE_CODE(unpack_integer(sl_p0_pssch_pscch_r17, bref, (int16_t)-202, (int16_t)24));
      }
      if (dl_p0_psfch_r17_present) {
        HANDLE_CODE(unpack_integer(dl_p0_psfch_r17, bref, (int16_t)-202, (int16_t)24));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sl_pwr_ctrl_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-MaxTransPower-r16", sl_max_trans_pwr_r16);
  if (sl_alpha_pssch_pscch_r16_present) {
    j.write_str("sl-Alpha-PSSCH-PSCCH-r16", sl_alpha_pssch_pscch_r16.to_string());
  }
  if (dl_alpha_pssch_pscch_r16_present) {
    j.write_str("dl-Alpha-PSSCH-PSCCH-r16", dl_alpha_pssch_pscch_r16.to_string());
  }
  if (sl_p0_pssch_pscch_r16_present) {
    j.write_int("sl-P0-PSSCH-PSCCH-r16", sl_p0_pssch_pscch_r16);
  }
  if (dl_p0_pssch_pscch_r16_present) {
    j.write_int("dl-P0-PSSCH-PSCCH-r16", dl_p0_pssch_pscch_r16);
  }
  if (dl_alpha_psfch_r16_present) {
    j.write_str("dl-Alpha-PSFCH-r16", dl_alpha_psfch_r16.to_string());
  }
  if (dl_p0_psfch_r16_present) {
    j.write_int("dl-P0-PSFCH-r16", dl_p0_psfch_r16);
  }
  if (ext) {
    if (dl_p0_pssch_pscch_r17_present) {
      j.write_int("dl-P0-PSSCH-PSCCH-r17", dl_p0_pssch_pscch_r17);
    }
    if (sl_p0_pssch_pscch_r17_present) {
      j.write_int("sl-P0-PSSCH-PSCCH-r17", sl_p0_pssch_pscch_r17);
    }
    if (dl_p0_psfch_r17_present) {
      j.write_int("dl-P0-PSFCH-r17", dl_p0_psfch_r17);
    }
  }
  j.end_obj();
}

const char* sl_pwr_ctrl_r16_s::sl_alpha_pssch_pscch_r16_opts::to_string() const
{
  static const char* names[] = {"alpha0", "alpha04", "alpha05", "alpha06", "alpha07", "alpha08", "alpha09", "alpha1"};
  return convert_enum_idx(names, 8, value, "sl_pwr_ctrl_r16_s::sl_alpha_pssch_pscch_r16_e_");
}
float sl_pwr_ctrl_r16_s::sl_alpha_pssch_pscch_r16_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
  return map_enum_number(numbers, 8, value, "sl_pwr_ctrl_r16_s::sl_alpha_pssch_pscch_r16_e_");
}
const char* sl_pwr_ctrl_r16_s::sl_alpha_pssch_pscch_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1"};
  return convert_enum_idx(number_strs, 8, value, "sl_pwr_ctrl_r16_s::sl_alpha_pssch_pscch_r16_e_");
}

const char* sl_pwr_ctrl_r16_s::dl_alpha_pssch_pscch_r16_opts::to_string() const
{
  static const char* names[] = {"alpha0", "alpha04", "alpha05", "alpha06", "alpha07", "alpha08", "alpha09", "alpha1"};
  return convert_enum_idx(names, 8, value, "sl_pwr_ctrl_r16_s::dl_alpha_pssch_pscch_r16_e_");
}
float sl_pwr_ctrl_r16_s::dl_alpha_pssch_pscch_r16_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
  return map_enum_number(numbers, 8, value, "sl_pwr_ctrl_r16_s::dl_alpha_pssch_pscch_r16_e_");
}
const char* sl_pwr_ctrl_r16_s::dl_alpha_pssch_pscch_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1"};
  return convert_enum_idx(number_strs, 8, value, "sl_pwr_ctrl_r16_s::dl_alpha_pssch_pscch_r16_e_");
}

const char* sl_pwr_ctrl_r16_s::dl_alpha_psfch_r16_opts::to_string() const
{
  static const char* names[] = {"alpha0", "alpha04", "alpha05", "alpha06", "alpha07", "alpha08", "alpha09", "alpha1"};
  return convert_enum_idx(names, 8, value, "sl_pwr_ctrl_r16_s::dl_alpha_psfch_r16_e_");
}
float sl_pwr_ctrl_r16_s::dl_alpha_psfch_r16_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
  return map_enum_number(numbers, 8, value, "sl_pwr_ctrl_r16_s::dl_alpha_psfch_r16_e_");
}
const char* sl_pwr_ctrl_r16_s::dl_alpha_psfch_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1"};
  return convert_enum_idx(number_strs, 8, value, "sl_pwr_ctrl_r16_s::dl_alpha_psfch_r16_e_");
}

// SL-SyncAllowed-r16 ::= SEQUENCE
SRSASN_CODE sl_sync_allowed_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(gnss_sync_r16_present, 1));
  HANDLE_CODE(bref.pack(gnb_enb_sync_r16_present, 1));
  HANDLE_CODE(bref.pack(ue_sync_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_sync_allowed_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(gnss_sync_r16_present, 1));
  HANDLE_CODE(bref.unpack(gnb_enb_sync_r16_present, 1));
  HANDLE_CODE(bref.unpack(ue_sync_r16_present, 1));

  return SRSASN_SUCCESS;
}
void sl_sync_allowed_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (gnss_sync_r16_present) {
    j.write_str("gnss-Sync-r16", "true");
  }
  if (gnb_enb_sync_r16_present) {
    j.write_str("gnbEnb-Sync-r16", "true");
  }
  if (ue_sync_r16_present) {
    j.write_str("ue-Sync-r16", "true");
  }
  j.end_obj();
}

// SL-UE-SelectedConfigRP-r16 ::= SEQUENCE
SRSASN_CODE sl_ue_sel_cfg_rp_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_cbr_prio_tx_cfg_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_thres_rsrp_list_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_multi_reserve_res_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_max_num_per_reserve_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_sensing_win_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_sel_win_list_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_res_reserve_period_list_r16.size() > 0, 1));

  if (sl_cbr_prio_tx_cfg_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_cbr_prio_tx_cfg_list_r16, 1, 8));
  }
  if (sl_thres_rsrp_list_r16_present) {
    HANDLE_CODE(
        pack_fixed_seq_of(bref, sl_thres_rsrp_list_r16, sl_thres_rsrp_list_r16.size(), integer_packer<uint8_t>(0, 66)));
  }
  if (sl_max_num_per_reserve_r16_present) {
    HANDLE_CODE(sl_max_num_per_reserve_r16.pack(bref));
  }
  if (sl_sensing_win_r16_present) {
    HANDLE_CODE(sl_sensing_win_r16.pack(bref));
  }
  if (sl_sel_win_list_r16_present) {
    HANDLE_CODE(pack_fixed_seq_of(bref, sl_sel_win_list_r16, sl_sel_win_list_r16.size()));
  }
  if (sl_res_reserve_period_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_res_reserve_period_list_r16, 1, 16));
  }
  HANDLE_CODE(sl_rs_for_sensing_r16.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sl_cbr_prio_tx_cfg_list_v1650.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_cbr_prio_tx_cfg_list_v1650.is_present(), 1));
      if (sl_cbr_prio_tx_cfg_list_v1650.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *sl_cbr_prio_tx_cfg_list_v1650, 1, 8));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_ue_sel_cfg_rp_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sl_cbr_prio_tx_cfg_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_cbr_prio_tx_cfg_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_thres_rsrp_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_multi_reserve_res_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_max_num_per_reserve_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_sensing_win_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_sel_win_list_r16_present, 1));
  bool sl_res_reserve_period_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_res_reserve_period_list_r16_present, 1));

  if (sl_cbr_prio_tx_cfg_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_cbr_prio_tx_cfg_list_r16, bref, 1, 8));
  }
  if (sl_thres_rsrp_list_r16_present) {
    HANDLE_CODE(unpack_fixed_seq_of(
        sl_thres_rsrp_list_r16, bref, sl_thres_rsrp_list_r16.size(), integer_packer<uint8_t>(0, 66)));
  }
  if (sl_max_num_per_reserve_r16_present) {
    HANDLE_CODE(sl_max_num_per_reserve_r16.unpack(bref));
  }
  if (sl_sensing_win_r16_present) {
    HANDLE_CODE(sl_sensing_win_r16.unpack(bref));
  }
  if (sl_sel_win_list_r16_present) {
    HANDLE_CODE(unpack_fixed_seq_of(sl_sel_win_list_r16, bref, sl_sel_win_list_r16.size()));
  }
  if (sl_res_reserve_period_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_res_reserve_period_list_r16, bref, 1, 16));
  }
  HANDLE_CODE(sl_rs_for_sensing_r16.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sl_cbr_prio_tx_cfg_list_v1650, bref);
      if (sl_cbr_prio_tx_cfg_list_v1650.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*sl_cbr_prio_tx_cfg_list_v1650, bref, 1, 8));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sl_ue_sel_cfg_rp_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_cbr_prio_tx_cfg_list_r16.size() > 0) {
    j.start_array("sl-CBR-PriorityTxConfigList-r16");
    for (const auto& e1 : sl_cbr_prio_tx_cfg_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_thres_rsrp_list_r16_present) {
    j.start_array("sl-Thres-RSRP-List-r16");
    for (const auto& e1 : sl_thres_rsrp_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_multi_reserve_res_r16_present) {
    j.write_str("sl-MultiReserveResource-r16", "enabled");
  }
  if (sl_max_num_per_reserve_r16_present) {
    j.write_str("sl-MaxNumPerReserve-r16", sl_max_num_per_reserve_r16.to_string());
  }
  if (sl_sensing_win_r16_present) {
    j.write_str("sl-SensingWindow-r16", sl_sensing_win_r16.to_string());
  }
  if (sl_sel_win_list_r16_present) {
    j.start_array("sl-SelectionWindowList-r16");
    for (const auto& e1 : sl_sel_win_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_res_reserve_period_list_r16.size() > 0) {
    j.start_array("sl-ResourceReservePeriodList-r16");
    for (const auto& e1 : sl_res_reserve_period_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_str("sl-RS-ForSensing-r16", sl_rs_for_sensing_r16.to_string());
  if (ext) {
    if (sl_cbr_prio_tx_cfg_list_v1650.is_present()) {
      j.start_array("sl-CBR-PriorityTxConfigList-v1650");
      for (const auto& e1 : *sl_cbr_prio_tx_cfg_list_v1650) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

const char* sl_ue_sel_cfg_rp_r16_s::sl_max_num_per_reserve_r16_opts::to_string() const
{
  static const char* names[] = {"n2", "n3"};
  return convert_enum_idx(names, 2, value, "sl_ue_sel_cfg_rp_r16_s::sl_max_num_per_reserve_r16_e_");
}
uint8_t sl_ue_sel_cfg_rp_r16_s::sl_max_num_per_reserve_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3};
  return map_enum_number(numbers, 2, value, "sl_ue_sel_cfg_rp_r16_s::sl_max_num_per_reserve_r16_e_");
}

const char* sl_ue_sel_cfg_rp_r16_s::sl_sensing_win_r16_opts::to_string() const
{
  static const char* names[] = {"ms100", "ms1100"};
  return convert_enum_idx(names, 2, value, "sl_ue_sel_cfg_rp_r16_s::sl_sensing_win_r16_e_");
}
uint16_t sl_ue_sel_cfg_rp_r16_s::sl_sensing_win_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 1100};
  return map_enum_number(numbers, 2, value, "sl_ue_sel_cfg_rp_r16_s::sl_sensing_win_r16_e_");
}

const char* sl_ue_sel_cfg_rp_r16_s::sl_rs_for_sensing_r16_opts::to_string() const
{
  static const char* names[] = {"pscch", "pssch"};
  return convert_enum_idx(names, 2, value, "sl_ue_sel_cfg_rp_r16_s::sl_rs_for_sensing_r16_e_");
}

// SL-ZoneConfigMCR-r16 ::= SEQUENCE
SRSASN_CODE sl_zone_cfg_mcr_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_trans_range_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_zone_cfg_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, sl_zone_cfg_mcr_idx_r16, (uint8_t)0u, (uint8_t)15u));
  if (sl_trans_range_r16_present) {
    HANDLE_CODE(sl_trans_range_r16.pack(bref));
  }
  if (sl_zone_cfg_r16_present) {
    HANDLE_CODE(sl_zone_cfg_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_zone_cfg_mcr_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_trans_range_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_zone_cfg_r16_present, 1));

  HANDLE_CODE(unpack_integer(sl_zone_cfg_mcr_idx_r16, bref, (uint8_t)0u, (uint8_t)15u));
  if (sl_trans_range_r16_present) {
    HANDLE_CODE(sl_trans_range_r16.unpack(bref));
  }
  if (sl_zone_cfg_r16_present) {
    HANDLE_CODE(sl_zone_cfg_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_zone_cfg_mcr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-ZoneConfigMCR-Index-r16", sl_zone_cfg_mcr_idx_r16);
  if (sl_trans_range_r16_present) {
    j.write_str("sl-TransRange-r16", sl_trans_range_r16.to_string());
  }
  if (sl_zone_cfg_r16_present) {
    j.write_fieldname("sl-ZoneConfig-r16");
    sl_zone_cfg_r16.to_json(j);
  }
  j.end_obj();
}

const char* sl_zone_cfg_mcr_r16_s::sl_trans_range_r16_opts::to_string() const
{
  static const char* names[] = {"m20",    "m50",    "m80",    "m100",   "m120",   "m150",   "m180",   "m200",
                                "m220",   "m250",   "m270",   "m300",   "m350",   "m370",   "m400",   "m420",
                                "m450",   "m480",   "m500",   "m550",   "m600",   "m700",   "m1000",  "spare9",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "sl_zone_cfg_mcr_r16_s::sl_trans_range_r16_e_");
}
uint16_t sl_zone_cfg_mcr_r16_s::sl_trans_range_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {20,  50,  80,  100, 120, 150, 180, 200, 220, 250, 270, 300,
                                     350, 370, 400, 420, 450, 480, 500, 550, 600, 700, 1000};
  return map_enum_number(numbers, 23, value, "sl_zone_cfg_mcr_r16_s::sl_trans_range_r16_e_");
}

// ReportInterval ::= ENUMERATED
const char* report_interv_opts::to_string() const
{
  static const char* names[] = {"ms120",
                                "ms240",
                                "ms480",
                                "ms640",
                                "ms1024",
                                "ms2048",
                                "ms5120",
                                "ms10240",
                                "ms20480",
                                "ms40960",
                                "min1",
                                "min6",
                                "min12",
                                "min30"};
  return convert_enum_idx(names, 14, value, "report_interv_e");
}
uint16_t report_interv_opts::to_number() const
{
  static const uint16_t numbers[] = {120, 240, 480, 640, 1024, 2048, 5120, 10240, 20480, 40960, 1, 6, 12, 30};
  return map_enum_number(numbers, 14, value, "report_interv_e");
}

// SL-MeasReportQuantity-r16 ::= CHOICE
void sl_meas_report_quant_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_bool("sl-RSRP-r16", c);
  j.end_obj();
}
SRSASN_CODE sl_meas_report_quant_r16_c::pack(bit_ref& bref) const
{
  pack_enum(bref, type());
  HANDLE_CODE(bref.pack(c, 1));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_meas_report_quant_r16_c::unpack(cbit_ref& bref)
{
  types e;
  unpack_enum(e, bref);
  if (e != type()) {
    log_invalid_choice_id(e, "sl_meas_report_quant_r16_c");
    return SRSASN_ERROR_DECODE_FAIL;
  }
  HANDLE_CODE(bref.unpack(c, 1));
  return SRSASN_SUCCESS;
}

const char* sl_meas_report_quant_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"sl-RSRP-r16"};
  return convert_enum_idx(names, 1, value, "sl_meas_report_quant_r16_c::types");
}

// SL-MeasTriggerQuantity-r16 ::= CHOICE
void sl_meas_trigger_quant_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-RSRP-r16", c);
  j.end_obj();
}
SRSASN_CODE sl_meas_trigger_quant_r16_c::pack(bit_ref& bref) const
{
  pack_enum(bref, type());
  HANDLE_CODE(pack_integer(bref, c, (uint8_t)0u, (uint8_t)127u));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_meas_trigger_quant_r16_c::unpack(cbit_ref& bref)
{
  types e;
  unpack_enum(e, bref);
  if (e != type()) {
    log_invalid_choice_id(e, "sl_meas_trigger_quant_r16_c");
    return SRSASN_ERROR_DECODE_FAIL;
  }
  HANDLE_CODE(unpack_integer(c, bref, (uint8_t)0u, (uint8_t)127u));
  return SRSASN_SUCCESS;
}

const char* sl_meas_trigger_quant_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"sl-RSRP-r16"};
  return convert_enum_idx(names, 1, value, "sl_meas_trigger_quant_r16_c::types");
}

// SL-RS-Type-r16 ::= ENUMERATED
const char* sl_rs_type_r16_opts::to_string() const
{
  static const char* names[] = {"dmrs", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "sl_rs_type_r16_e");
}

// SL-ResourcePool-r16 ::= SEQUENCE
SRSASN_CODE sl_res_pool_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_pscch_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_pssch_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_psfch_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_sync_allowed_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_subch_size_r16_present, 1));
  HANDLE_CODE(bref.pack(dummy_present, 1));
  HANDLE_CODE(bref.pack(sl_start_rb_subch_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_num_subch_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_add_mcs_table_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_thresh_s_rssi_cbr_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_time_win_size_cbr_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_time_win_size_cr_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ptrs_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ue_sel_cfg_rp_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_rx_params_ncell_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_zone_cfg_mcr_list_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_filt_coef_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_rb_num_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_preemption_enable_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_prio_thres_ul_urllc_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_prio_thres_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_x_overhead_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_pwr_ctrl_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_tx_percentage_list_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_min_max_mcs_list_r16.size() > 0, 1));

  if (sl_pscch_cfg_r16_present) {
    HANDLE_CODE(sl_pscch_cfg_r16.pack(bref));
  }
  if (sl_pssch_cfg_r16_present) {
    HANDLE_CODE(sl_pssch_cfg_r16.pack(bref));
  }
  if (sl_psfch_cfg_r16_present) {
    HANDLE_CODE(sl_psfch_cfg_r16.pack(bref));
  }
  if (sl_sync_allowed_r16_present) {
    HANDLE_CODE(sl_sync_allowed_r16.pack(bref));
  }
  if (sl_subch_size_r16_present) {
    HANDLE_CODE(sl_subch_size_r16.pack(bref));
  }
  if (dummy_present) {
    HANDLE_CODE(pack_integer(bref, dummy, (uint8_t)10u, (uint8_t)160u));
  }
  if (sl_start_rb_subch_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_start_rb_subch_r16, (uint16_t)0u, (uint16_t)265u));
  }
  if (sl_num_subch_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_num_subch_r16, (uint8_t)1u, (uint8_t)27u));
  }
  if (sl_add_mcs_table_r16_present) {
    HANDLE_CODE(sl_add_mcs_table_r16.pack(bref));
  }
  if (sl_thresh_s_rssi_cbr_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_thresh_s_rssi_cbr_r16, (uint8_t)0u, (uint8_t)45u));
  }
  if (sl_time_win_size_cbr_r16_present) {
    HANDLE_CODE(sl_time_win_size_cbr_r16.pack(bref));
  }
  if (sl_time_win_size_cr_r16_present) {
    HANDLE_CODE(sl_time_win_size_cr_r16.pack(bref));
  }
  if (sl_ptrs_cfg_r16_present) {
    HANDLE_CODE(sl_ptrs_cfg_r16.pack(bref));
  }
  if (sl_ue_sel_cfg_rp_r16_present) {
    HANDLE_CODE(sl_ue_sel_cfg_rp_r16.pack(bref));
  }
  if (sl_rx_params_ncell_r16_present) {
    HANDLE_CODE(bref.pack(sl_rx_params_ncell_r16.sl_tdd_cfg_r16_present, 1));
    if (sl_rx_params_ncell_r16.sl_tdd_cfg_r16_present) {
      HANDLE_CODE(sl_rx_params_ncell_r16.sl_tdd_cfg_r16.pack(bref));
    }
    HANDLE_CODE(pack_integer(bref, sl_rx_params_ncell_r16.sl_sync_cfg_idx_r16, (uint8_t)0u, (uint8_t)15u));
  }
  if (sl_zone_cfg_mcr_list_r16_present) {
    HANDLE_CODE(pack_fixed_seq_of(bref, sl_zone_cfg_mcr_list_r16, sl_zone_cfg_mcr_list_r16.size()));
  }
  if (sl_filt_coef_r16_present) {
    HANDLE_CODE(sl_filt_coef_r16.pack(bref));
  }
  if (sl_rb_num_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_rb_num_r16, (uint16_t)10u, (uint16_t)275u));
  }
  if (sl_preemption_enable_r16_present) {
    HANDLE_CODE(sl_preemption_enable_r16.pack(bref));
  }
  if (sl_prio_thres_ul_urllc_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_prio_thres_ul_urllc_r16, (uint8_t)1u, (uint8_t)9u));
  }
  if (sl_prio_thres_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_prio_thres_r16, (uint8_t)1u, (uint8_t)9u));
  }
  if (sl_x_overhead_r16_present) {
    HANDLE_CODE(sl_x_overhead_r16.pack(bref));
  }
  if (sl_pwr_ctrl_r16_present) {
    HANDLE_CODE(sl_pwr_ctrl_r16.pack(bref));
  }
  if (sl_tx_percentage_list_r16_present) {
    HANDLE_CODE(pack_fixed_seq_of(bref, sl_tx_percentage_list_r16, sl_tx_percentage_list_r16.size()));
  }
  if (sl_min_max_mcs_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_min_max_mcs_list_r16, 1, 3));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sl_time_res_r16_present;
    group_flags[1] |= sl_pbps_cp_s_cfg_r17.is_present();
    group_flags[1] |= sl_inter_ue_coordination_cfg_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_time_res_r16_present, 1));
      if (sl_time_res_r16_present) {
        HANDLE_CODE(sl_time_res_r16.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_pbps_cp_s_cfg_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(sl_inter_ue_coordination_cfg_r17.is_present(), 1));
      if (sl_pbps_cp_s_cfg_r17.is_present()) {
        HANDLE_CODE(sl_pbps_cp_s_cfg_r17->pack(bref));
      }
      if (sl_inter_ue_coordination_cfg_r17.is_present()) {
        HANDLE_CODE(sl_inter_ue_coordination_cfg_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_res_pool_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_pscch_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_pssch_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_psfch_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_sync_allowed_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_subch_size_r16_present, 1));
  HANDLE_CODE(bref.unpack(dummy_present, 1));
  HANDLE_CODE(bref.unpack(sl_start_rb_subch_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_num_subch_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_add_mcs_table_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_thresh_s_rssi_cbr_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_time_win_size_cbr_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_time_win_size_cr_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ptrs_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ue_sel_cfg_rp_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_rx_params_ncell_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_zone_cfg_mcr_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_filt_coef_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_rb_num_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_preemption_enable_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_prio_thres_ul_urllc_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_prio_thres_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_x_overhead_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_pwr_ctrl_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_tx_percentage_list_r16_present, 1));
  bool sl_min_max_mcs_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_min_max_mcs_list_r16_present, 1));

  if (sl_pscch_cfg_r16_present) {
    HANDLE_CODE(sl_pscch_cfg_r16.unpack(bref));
  }
  if (sl_pssch_cfg_r16_present) {
    HANDLE_CODE(sl_pssch_cfg_r16.unpack(bref));
  }
  if (sl_psfch_cfg_r16_present) {
    HANDLE_CODE(sl_psfch_cfg_r16.unpack(bref));
  }
  if (sl_sync_allowed_r16_present) {
    HANDLE_CODE(sl_sync_allowed_r16.unpack(bref));
  }
  if (sl_subch_size_r16_present) {
    HANDLE_CODE(sl_subch_size_r16.unpack(bref));
  }
  if (dummy_present) {
    HANDLE_CODE(unpack_integer(dummy, bref, (uint8_t)10u, (uint8_t)160u));
  }
  if (sl_start_rb_subch_r16_present) {
    HANDLE_CODE(unpack_integer(sl_start_rb_subch_r16, bref, (uint16_t)0u, (uint16_t)265u));
  }
  if (sl_num_subch_r16_present) {
    HANDLE_CODE(unpack_integer(sl_num_subch_r16, bref, (uint8_t)1u, (uint8_t)27u));
  }
  if (sl_add_mcs_table_r16_present) {
    HANDLE_CODE(sl_add_mcs_table_r16.unpack(bref));
  }
  if (sl_thresh_s_rssi_cbr_r16_present) {
    HANDLE_CODE(unpack_integer(sl_thresh_s_rssi_cbr_r16, bref, (uint8_t)0u, (uint8_t)45u));
  }
  if (sl_time_win_size_cbr_r16_present) {
    HANDLE_CODE(sl_time_win_size_cbr_r16.unpack(bref));
  }
  if (sl_time_win_size_cr_r16_present) {
    HANDLE_CODE(sl_time_win_size_cr_r16.unpack(bref));
  }
  if (sl_ptrs_cfg_r16_present) {
    HANDLE_CODE(sl_ptrs_cfg_r16.unpack(bref));
  }
  if (sl_ue_sel_cfg_rp_r16_present) {
    HANDLE_CODE(sl_ue_sel_cfg_rp_r16.unpack(bref));
  }
  if (sl_rx_params_ncell_r16_present) {
    HANDLE_CODE(bref.unpack(sl_rx_params_ncell_r16.sl_tdd_cfg_r16_present, 1));
    if (sl_rx_params_ncell_r16.sl_tdd_cfg_r16_present) {
      HANDLE_CODE(sl_rx_params_ncell_r16.sl_tdd_cfg_r16.unpack(bref));
    }
    HANDLE_CODE(unpack_integer(sl_rx_params_ncell_r16.sl_sync_cfg_idx_r16, bref, (uint8_t)0u, (uint8_t)15u));
  }
  if (sl_zone_cfg_mcr_list_r16_present) {
    HANDLE_CODE(unpack_fixed_seq_of(sl_zone_cfg_mcr_list_r16, bref, sl_zone_cfg_mcr_list_r16.size()));
  }
  if (sl_filt_coef_r16_present) {
    HANDLE_CODE(sl_filt_coef_r16.unpack(bref));
  }
  if (sl_rb_num_r16_present) {
    HANDLE_CODE(unpack_integer(sl_rb_num_r16, bref, (uint16_t)10u, (uint16_t)275u));
  }
  if (sl_preemption_enable_r16_present) {
    HANDLE_CODE(sl_preemption_enable_r16.unpack(bref));
  }
  if (sl_prio_thres_ul_urllc_r16_present) {
    HANDLE_CODE(unpack_integer(sl_prio_thres_ul_urllc_r16, bref, (uint8_t)1u, (uint8_t)9u));
  }
  if (sl_prio_thres_r16_present) {
    HANDLE_CODE(unpack_integer(sl_prio_thres_r16, bref, (uint8_t)1u, (uint8_t)9u));
  }
  if (sl_x_overhead_r16_present) {
    HANDLE_CODE(sl_x_overhead_r16.unpack(bref));
  }
  if (sl_pwr_ctrl_r16_present) {
    HANDLE_CODE(sl_pwr_ctrl_r16.unpack(bref));
  }
  if (sl_tx_percentage_list_r16_present) {
    HANDLE_CODE(unpack_fixed_seq_of(sl_tx_percentage_list_r16, bref, sl_tx_percentage_list_r16.size()));
  }
  if (sl_min_max_mcs_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_min_max_mcs_list_r16, bref, 1, 3));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(sl_time_res_r16_present, 1));
      if (sl_time_res_r16_present) {
        HANDLE_CODE(sl_time_res_r16.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sl_pbps_cp_s_cfg_r17, bref);
      unpack_presence_flag(sl_inter_ue_coordination_cfg_r17, bref);
      if (sl_pbps_cp_s_cfg_r17.is_present()) {
        HANDLE_CODE(sl_pbps_cp_s_cfg_r17->unpack(bref));
      }
      if (sl_inter_ue_coordination_cfg_r17.is_present()) {
        HANDLE_CODE(sl_inter_ue_coordination_cfg_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sl_res_pool_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_pscch_cfg_r16_present) {
    j.write_fieldname("sl-PSCCH-Config-r16");
    sl_pscch_cfg_r16.to_json(j);
  }
  if (sl_pssch_cfg_r16_present) {
    j.write_fieldname("sl-PSSCH-Config-r16");
    sl_pssch_cfg_r16.to_json(j);
  }
  if (sl_psfch_cfg_r16_present) {
    j.write_fieldname("sl-PSFCH-Config-r16");
    sl_psfch_cfg_r16.to_json(j);
  }
  if (sl_sync_allowed_r16_present) {
    j.write_fieldname("sl-SyncAllowed-r16");
    sl_sync_allowed_r16.to_json(j);
  }
  if (sl_subch_size_r16_present) {
    j.write_str("sl-SubchannelSize-r16", sl_subch_size_r16.to_string());
  }
  if (dummy_present) {
    j.write_int("dummy", dummy);
  }
  if (sl_start_rb_subch_r16_present) {
    j.write_int("sl-StartRB-Subchannel-r16", sl_start_rb_subch_r16);
  }
  if (sl_num_subch_r16_present) {
    j.write_int("sl-NumSubchannel-r16", sl_num_subch_r16);
  }
  if (sl_add_mcs_table_r16_present) {
    j.write_str("sl-Additional-MCS-Table-r16", sl_add_mcs_table_r16.to_string());
  }
  if (sl_thresh_s_rssi_cbr_r16_present) {
    j.write_int("sl-ThreshS-RSSI-CBR-r16", sl_thresh_s_rssi_cbr_r16);
  }
  if (sl_time_win_size_cbr_r16_present) {
    j.write_str("sl-TimeWindowSizeCBR-r16", sl_time_win_size_cbr_r16.to_string());
  }
  if (sl_time_win_size_cr_r16_present) {
    j.write_str("sl-TimeWindowSizeCR-r16", sl_time_win_size_cr_r16.to_string());
  }
  if (sl_ptrs_cfg_r16_present) {
    j.write_fieldname("sl-PTRS-Config-r16");
    sl_ptrs_cfg_r16.to_json(j);
  }
  if (sl_ue_sel_cfg_rp_r16_present) {
    j.write_fieldname("sl-UE-SelectedConfigRP-r16");
    sl_ue_sel_cfg_rp_r16.to_json(j);
  }
  if (sl_rx_params_ncell_r16_present) {
    j.write_fieldname("sl-RxParametersNcell-r16");
    j.start_obj();
    if (sl_rx_params_ncell_r16.sl_tdd_cfg_r16_present) {
      j.write_fieldname("sl-TDD-Configuration-r16");
      sl_rx_params_ncell_r16.sl_tdd_cfg_r16.to_json(j);
    }
    j.write_int("sl-SyncConfigIndex-r16", sl_rx_params_ncell_r16.sl_sync_cfg_idx_r16);
    j.end_obj();
  }
  if (sl_zone_cfg_mcr_list_r16_present) {
    j.start_array("sl-ZoneConfigMCR-List-r16");
    for (const auto& e1 : sl_zone_cfg_mcr_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_filt_coef_r16_present) {
    j.write_str("sl-FilterCoefficient-r16", sl_filt_coef_r16.to_string());
  }
  if (sl_rb_num_r16_present) {
    j.write_int("sl-RB-Number-r16", sl_rb_num_r16);
  }
  if (sl_preemption_enable_r16_present) {
    j.write_str("sl-PreemptionEnable-r16", sl_preemption_enable_r16.to_string());
  }
  if (sl_prio_thres_ul_urllc_r16_present) {
    j.write_int("sl-PriorityThreshold-UL-URLLC-r16", sl_prio_thres_ul_urllc_r16);
  }
  if (sl_prio_thres_r16_present) {
    j.write_int("sl-PriorityThreshold-r16", sl_prio_thres_r16);
  }
  if (sl_x_overhead_r16_present) {
    j.write_str("sl-X-Overhead-r16", sl_x_overhead_r16.to_string());
  }
  if (sl_pwr_ctrl_r16_present) {
    j.write_fieldname("sl-PowerControl-r16");
    sl_pwr_ctrl_r16.to_json(j);
  }
  if (sl_tx_percentage_list_r16_present) {
    j.start_array("sl-TxPercentageList-r16");
    for (const auto& e1 : sl_tx_percentage_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_min_max_mcs_list_r16.size() > 0) {
    j.start_array("sl-MinMaxMCS-List-r16");
    for (const auto& e1 : sl_min_max_mcs_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ext) {
    if (sl_time_res_r16_present) {
      j.write_str("sl-TimeResource-r16", sl_time_res_r16.to_string());
    }
    if (sl_pbps_cp_s_cfg_r17.is_present()) {
      j.write_fieldname("sl-PBPS-CPS-Config-r17");
      sl_pbps_cp_s_cfg_r17->to_json(j);
    }
    if (sl_inter_ue_coordination_cfg_r17.is_present()) {
      j.write_fieldname("sl-InterUE-CoordinationConfig-r17");
      sl_inter_ue_coordination_cfg_r17->to_json(j);
    }
  }
  j.end_obj();
}

const char* sl_res_pool_r16_s::sl_subch_size_r16_opts::to_string() const
{
  static const char* names[] = {"n10", "n12", "n15", "n20", "n25", "n50", "n75", "n100"};
  return convert_enum_idx(names, 8, value, "sl_res_pool_r16_s::sl_subch_size_r16_e_");
}
uint8_t sl_res_pool_r16_s::sl_subch_size_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {10, 12, 15, 20, 25, 50, 75, 100};
  return map_enum_number(numbers, 8, value, "sl_res_pool_r16_s::sl_subch_size_r16_e_");
}

const char* sl_res_pool_r16_s::sl_add_mcs_table_r16_opts::to_string() const
{
  static const char* names[] = {"qam256", "qam64LowSE", "qam256-qam64LowSE"};
  return convert_enum_idx(names, 3, value, "sl_res_pool_r16_s::sl_add_mcs_table_r16_e_");
}

const char* sl_res_pool_r16_s::sl_time_win_size_cbr_r16_opts::to_string() const
{
  static const char* names[] = {"ms100", "slot100"};
  return convert_enum_idx(names, 2, value, "sl_res_pool_r16_s::sl_time_win_size_cbr_r16_e_");
}

const char* sl_res_pool_r16_s::sl_time_win_size_cr_r16_opts::to_string() const
{
  static const char* names[] = {"ms1000", "slot1000"};
  return convert_enum_idx(names, 2, value, "sl_res_pool_r16_s::sl_time_win_size_cr_r16_e_");
}

const char* sl_res_pool_r16_s::sl_preemption_enable_r16_opts::to_string() const
{
  static const char* names[] = {"enabled", "pl1", "pl2", "pl3", "pl4", "pl5", "pl6", "pl7", "pl8"};
  return convert_enum_idx(names, 9, value, "sl_res_pool_r16_s::sl_preemption_enable_r16_e_");
}
uint8_t sl_res_pool_r16_s::sl_preemption_enable_r16_opts::to_number() const
{
  switch (value) {
    case pl1:
      return 1;
    case pl2:
      return 2;
    case pl3:
      return 3;
    case pl4:
      return 4;
    case pl5:
      return 5;
    case pl6:
      return 6;
    case pl7:
      return 7;
    case pl8:
      return 8;
    default:
      invalid_enum_number(value, "sl_res_pool_r16_s::sl_preemption_enable_r16_e_");
  }
  return 0;
}

const char* sl_res_pool_r16_s::sl_x_overhead_r16_opts::to_string() const
{
  static const char* names[] = {"n0", "n3", "n6", "n9"};
  return convert_enum_idx(names, 4, value, "sl_res_pool_r16_s::sl_x_overhead_r16_e_");
}
uint8_t sl_res_pool_r16_s::sl_x_overhead_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 3, 6, 9};
  return map_enum_number(numbers, 4, value, "sl_res_pool_r16_s::sl_x_overhead_r16_e_");
}

// TimeToTrigger ::= ENUMERATED
const char* time_to_trigger_opts::to_string() const
{
  static const char* names[] = {"ms0",
                                "ms40",
                                "ms64",
                                "ms80",
                                "ms100",
                                "ms128",
                                "ms160",
                                "ms256",
                                "ms320",
                                "ms480",
                                "ms512",
                                "ms640",
                                "ms1024",
                                "ms1280",
                                "ms2560",
                                "ms5120"};
  return convert_enum_idx(names, 16, value, "time_to_trigger_e");
}
uint16_t time_to_trigger_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 40, 64, 80, 100, 128, 160, 256, 320, 480, 512, 640, 1024, 1280, 2560, 5120};
  return map_enum_number(numbers, 16, value, "time_to_trigger_e");
}

// SL-CG-MaxTransNum-r16 ::= SEQUENCE
SRSASN_CODE sl_cg_max_trans_num_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, sl_prio_r16, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(pack_integer(bref, sl_max_trans_num_r16, (uint8_t)1u, (uint8_t)32u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_cg_max_trans_num_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(sl_prio_r16, bref, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(unpack_integer(sl_max_trans_num_r16, bref, (uint8_t)1u, (uint8_t)32u));

  return SRSASN_SUCCESS;
}
void sl_cg_max_trans_num_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-Priority-r16", sl_prio_r16);
  j.write_int("sl-MaxTransNum-r16", sl_max_trans_num_r16);
  j.end_obj();
}

// SL-EventTriggerConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_event_trigger_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(sl_event_id_r16.pack(bref));
  HANDLE_CODE(sl_report_interv_r16.pack(bref));
  HANDLE_CODE(sl_report_amount_r16.pack(bref));
  HANDLE_CODE(sl_report_quant_r16.pack(bref));
  HANDLE_CODE(sl_rs_type_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_event_trigger_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(sl_event_id_r16.unpack(bref));
  HANDLE_CODE(sl_report_interv_r16.unpack(bref));
  HANDLE_CODE(sl_report_amount_r16.unpack(bref));
  HANDLE_CODE(sl_report_quant_r16.unpack(bref));
  HANDLE_CODE(sl_rs_type_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_event_trigger_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sl-EventId-r16");
  sl_event_id_r16.to_json(j);
  j.write_str("sl-ReportInterval-r16", sl_report_interv_r16.to_string());
  j.write_str("sl-ReportAmount-r16", sl_report_amount_r16.to_string());
  j.write_fieldname("sl-ReportQuantity-r16");
  sl_report_quant_r16.to_json(j);
  j.write_str("sl-RS-Type-r16", sl_rs_type_r16.to_string());
  j.end_obj();
}

void sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::destroy_()
{
  switch (type_) {
    case types::event_s1_r16:
      c.destroy<event_s1_r16_s_>();
      break;
    case types::event_s2_r16:
      c.destroy<event_s2_r16_s_>();
      break;
    default:
      break;
  }
}
void sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::event_s1_r16:
      c.init<event_s1_r16_s_>();
      break;
    case types::event_s2_r16:
      c.init<event_s2_r16_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_");
  }
}
sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::sl_event_id_r16_c_(
    const sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::event_s1_r16:
      c.init(other.c.get<event_s1_r16_s_>());
      break;
    case types::event_s2_r16:
      c.init(other.c.get<event_s2_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_");
  }
}
sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_&
sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::operator=(const sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::event_s1_r16:
      c.set(other.c.get<event_s1_r16_s_>());
      break;
    case types::event_s2_r16:
      c.set(other.c.get<event_s2_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_");
  }

  return *this;
}
sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::event_s1_r16_s_&
sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::set_event_s1_r16()
{
  set(types::event_s1_r16);
  return c.get<event_s1_r16_s_>();
}
sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::event_s2_r16_s_&
sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::set_event_s2_r16()
{
  set(types::event_s2_r16);
  return c.get<event_s2_r16_s_>();
}
void sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::event_s1_r16:
      j.write_fieldname("eventS1-r16");
      j.start_obj();
      j.write_fieldname("s1-Threshold-r16");
      c.get<event_s1_r16_s_>().s1_thres_r16.to_json(j);
      j.write_bool("sl-ReportOnLeave-r16", c.get<event_s1_r16_s_>().sl_report_on_leave_r16);
      j.write_int("sl-Hysteresis-r16", c.get<event_s1_r16_s_>().sl_hysteresis_r16);
      j.write_str("sl-TimeToTrigger-r16", c.get<event_s1_r16_s_>().sl_time_to_trigger_r16.to_string());
      j.end_obj();
      break;
    case types::event_s2_r16:
      j.write_fieldname("eventS2-r16");
      j.start_obj();
      j.write_fieldname("s2-Threshold-r16");
      c.get<event_s2_r16_s_>().s2_thres_r16.to_json(j);
      j.write_bool("sl-ReportOnLeave-r16", c.get<event_s2_r16_s_>().sl_report_on_leave_r16);
      j.write_int("sl-Hysteresis-r16", c.get<event_s2_r16_s_>().sl_hysteresis_r16);
      j.write_str("sl-TimeToTrigger-r16", c.get<event_s2_r16_s_>().sl_time_to_trigger_r16.to_string());
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::event_s1_r16:
      bref.pack(c.get<event_s1_r16_s_>().ext, 1);
      HANDLE_CODE(c.get<event_s1_r16_s_>().s1_thres_r16.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_s1_r16_s_>().sl_report_on_leave_r16, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_s1_r16_s_>().sl_hysteresis_r16, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_s1_r16_s_>().sl_time_to_trigger_r16.pack(bref));
      break;
    case types::event_s2_r16:
      bref.pack(c.get<event_s2_r16_s_>().ext, 1);
      HANDLE_CODE(c.get<event_s2_r16_s_>().s2_thres_r16.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_s2_r16_s_>().sl_report_on_leave_r16, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_s2_r16_s_>().sl_hysteresis_r16, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_s2_r16_s_>().sl_time_to_trigger_r16.pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::event_s1_r16:
      bref.unpack(c.get<event_s1_r16_s_>().ext, 1);
      HANDLE_CODE(c.get<event_s1_r16_s_>().s1_thres_r16.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_s1_r16_s_>().sl_report_on_leave_r16, 1));
      HANDLE_CODE(unpack_integer(c.get<event_s1_r16_s_>().sl_hysteresis_r16, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_s1_r16_s_>().sl_time_to_trigger_r16.unpack(bref));
      break;
    case types::event_s2_r16:
      bref.unpack(c.get<event_s2_r16_s_>().ext, 1);
      HANDLE_CODE(c.get<event_s2_r16_s_>().s2_thres_r16.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_s2_r16_s_>().sl_report_on_leave_r16, 1));
      HANDLE_CODE(unpack_integer(c.get<event_s2_r16_s_>().sl_hysteresis_r16, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_s2_r16_s_>().sl_time_to_trigger_r16.unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"eventS1-r16", "eventS2-r16"};
  return convert_enum_idx(names, 2, value, "sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::types");
}
uint8_t sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "sl_event_trigger_cfg_r16_s::sl_event_id_r16_c_::types");
}

const char* sl_event_trigger_cfg_r16_s::sl_report_amount_r16_opts::to_string() const
{
  static const char* names[] = {"r1", "r2", "r4", "r8", "r16", "r32", "r64", "infinity"};
  return convert_enum_idx(names, 8, value, "sl_event_trigger_cfg_r16_s::sl_report_amount_r16_e_");
}
int8_t sl_event_trigger_cfg_r16_s::sl_report_amount_r16_opts::to_number() const
{
  static const int8_t numbers[] = {1, 2, 4, 8, 16, 32, 64, -1};
  return map_enum_number(numbers, 8, value, "sl_event_trigger_cfg_r16_s::sl_report_amount_r16_e_");
}

// SL-PQI-r16 ::= CHOICE
void sl_pqi_r16_c::destroy_()
{
  switch (type_) {
    case types::sl_non_standardized_pqi_r16:
      c.destroy<sl_non_standardized_pqi_r16_s_>();
      break;
    default:
      break;
  }
}
void sl_pqi_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::sl_standardized_pqi_r16:
      break;
    case types::sl_non_standardized_pqi_r16:
      c.init<sl_non_standardized_pqi_r16_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_pqi_r16_c");
  }
}
sl_pqi_r16_c::sl_pqi_r16_c(const sl_pqi_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sl_standardized_pqi_r16:
      c.init(other.c.get<uint16_t>());
      break;
    case types::sl_non_standardized_pqi_r16:
      c.init(other.c.get<sl_non_standardized_pqi_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_pqi_r16_c");
  }
}
sl_pqi_r16_c& sl_pqi_r16_c::operator=(const sl_pqi_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sl_standardized_pqi_r16:
      c.set(other.c.get<uint16_t>());
      break;
    case types::sl_non_standardized_pqi_r16:
      c.set(other.c.get<sl_non_standardized_pqi_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_pqi_r16_c");
  }

  return *this;
}
uint16_t& sl_pqi_r16_c::set_sl_standardized_pqi_r16()
{
  set(types::sl_standardized_pqi_r16);
  return c.get<uint16_t>();
}
sl_pqi_r16_c::sl_non_standardized_pqi_r16_s_& sl_pqi_r16_c::set_sl_non_standardized_pqi_r16()
{
  set(types::sl_non_standardized_pqi_r16);
  return c.get<sl_non_standardized_pqi_r16_s_>();
}
void sl_pqi_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sl_standardized_pqi_r16:
      j.write_int("sl-StandardizedPQI-r16", c.get<uint16_t>());
      break;
    case types::sl_non_standardized_pqi_r16:
      j.write_fieldname("sl-Non-StandardizedPQI-r16");
      j.start_obj();
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_res_type_r16_present) {
        j.write_str("sl-ResourceType-r16", c.get<sl_non_standardized_pqi_r16_s_>().sl_res_type_r16.to_string());
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_prio_level_r16_present) {
        j.write_int("sl-PriorityLevel-r16", c.get<sl_non_standardized_pqi_r16_s_>().sl_prio_level_r16);
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_delay_budget_r16_present) {
        j.write_int("sl-PacketDelayBudget-r16", c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_delay_budget_r16);
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_error_rate_r16_present) {
        j.write_int("sl-PacketErrorRate-r16", c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_error_rate_r16);
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_averaging_win_r16_present) {
        j.write_int("sl-AveragingWindow-r16", c.get<sl_non_standardized_pqi_r16_s_>().sl_averaging_win_r16);
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_max_data_burst_volume_r16_present) {
        j.write_int("sl-MaxDataBurstVolume-r16", c.get<sl_non_standardized_pqi_r16_s_>().sl_max_data_burst_volume_r16);
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "sl_pqi_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE sl_pqi_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sl_standardized_pqi_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u));
      break;
    case types::sl_non_standardized_pqi_r16:
      bref.pack(c.get<sl_non_standardized_pqi_r16_s_>().ext, 1);
      HANDLE_CODE(bref.pack(c.get<sl_non_standardized_pqi_r16_s_>().sl_res_type_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<sl_non_standardized_pqi_r16_s_>().sl_prio_level_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_delay_budget_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_error_rate_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<sl_non_standardized_pqi_r16_s_>().sl_averaging_win_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<sl_non_standardized_pqi_r16_s_>().sl_max_data_burst_volume_r16_present, 1));
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_res_type_r16_present) {
        HANDLE_CODE(c.get<sl_non_standardized_pqi_r16_s_>().sl_res_type_r16.pack(bref));
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_prio_level_r16_present) {
        HANDLE_CODE(
            pack_integer(bref, c.get<sl_non_standardized_pqi_r16_s_>().sl_prio_level_r16, (uint8_t)1u, (uint8_t)8u));
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_delay_budget_r16_present) {
        HANDLE_CODE(pack_integer(
            bref, c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_delay_budget_r16, (uint16_t)0u, (uint16_t)1023u));
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_error_rate_r16_present) {
        HANDLE_CODE(pack_integer(
            bref, c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_error_rate_r16, (uint8_t)0u, (uint8_t)9u));
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_averaging_win_r16_present) {
        HANDLE_CODE(pack_integer(
            bref, c.get<sl_non_standardized_pqi_r16_s_>().sl_averaging_win_r16, (uint16_t)0u, (uint16_t)4095u));
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_max_data_burst_volume_r16_present) {
        HANDLE_CODE(pack_integer(
            bref, c.get<sl_non_standardized_pqi_r16_s_>().sl_max_data_burst_volume_r16, (uint16_t)0u, (uint16_t)4095u));
      }
      break;
    default:
      log_invalid_choice_id(type_, "sl_pqi_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_pqi_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sl_standardized_pqi_r16:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u));
      break;
    case types::sl_non_standardized_pqi_r16:
      bref.unpack(c.get<sl_non_standardized_pqi_r16_s_>().ext, 1);
      HANDLE_CODE(bref.unpack(c.get<sl_non_standardized_pqi_r16_s_>().sl_res_type_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<sl_non_standardized_pqi_r16_s_>().sl_prio_level_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_delay_budget_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_error_rate_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<sl_non_standardized_pqi_r16_s_>().sl_averaging_win_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<sl_non_standardized_pqi_r16_s_>().sl_max_data_burst_volume_r16_present, 1));
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_res_type_r16_present) {
        HANDLE_CODE(c.get<sl_non_standardized_pqi_r16_s_>().sl_res_type_r16.unpack(bref));
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_prio_level_r16_present) {
        HANDLE_CODE(
            unpack_integer(c.get<sl_non_standardized_pqi_r16_s_>().sl_prio_level_r16, bref, (uint8_t)1u, (uint8_t)8u));
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_delay_budget_r16_present) {
        HANDLE_CODE(unpack_integer(
            c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_delay_budget_r16, bref, (uint16_t)0u, (uint16_t)1023u));
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_error_rate_r16_present) {
        HANDLE_CODE(unpack_integer(
            c.get<sl_non_standardized_pqi_r16_s_>().sl_packet_error_rate_r16, bref, (uint8_t)0u, (uint8_t)9u));
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_averaging_win_r16_present) {
        HANDLE_CODE(unpack_integer(
            c.get<sl_non_standardized_pqi_r16_s_>().sl_averaging_win_r16, bref, (uint16_t)0u, (uint16_t)4095u));
      }
      if (c.get<sl_non_standardized_pqi_r16_s_>().sl_max_data_burst_volume_r16_present) {
        HANDLE_CODE(unpack_integer(
            c.get<sl_non_standardized_pqi_r16_s_>().sl_max_data_burst_volume_r16, bref, (uint16_t)0u, (uint16_t)4095u));
      }
      break;
    default:
      log_invalid_choice_id(type_, "sl_pqi_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_pqi_r16_c::sl_non_standardized_pqi_r16_s_::sl_res_type_r16_opts::to_string() const
{
  static const char* names[] = {"gbr", "non-GBR", "delayCriticalGBR", "spare1"};
  return convert_enum_idx(names, 4, value, "sl_pqi_r16_c::sl_non_standardized_pqi_r16_s_::sl_res_type_r16_e_");
}

const char* sl_pqi_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"sl-StandardizedPQI-r16", "sl-Non-StandardizedPQI-r16"};
  return convert_enum_idx(names, 2, value, "sl_pqi_r16_c::types");
}

// SL-PeriodicalReportConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_periodical_report_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(sl_report_interv_r16.pack(bref));
  HANDLE_CODE(sl_report_amount_r16.pack(bref));
  HANDLE_CODE(sl_report_quant_r16.pack(bref));
  HANDLE_CODE(sl_rs_type_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_periodical_report_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(sl_report_interv_r16.unpack(bref));
  HANDLE_CODE(sl_report_amount_r16.unpack(bref));
  HANDLE_CODE(sl_report_quant_r16.unpack(bref));
  HANDLE_CODE(sl_rs_type_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_periodical_report_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sl-ReportInterval-r16", sl_report_interv_r16.to_string());
  j.write_str("sl-ReportAmount-r16", sl_report_amount_r16.to_string());
  j.write_fieldname("sl-ReportQuantity-r16");
  sl_report_quant_r16.to_json(j);
  j.write_str("sl-RS-Type-r16", sl_rs_type_r16.to_string());
  j.end_obj();
}

const char* sl_periodical_report_cfg_r16_s::sl_report_amount_r16_opts::to_string() const
{
  static const char* names[] = {"r1", "r2", "r4", "r8", "r16", "r32", "r64", "infinity"};
  return convert_enum_idx(names, 8, value, "sl_periodical_report_cfg_r16_s::sl_report_amount_r16_e_");
}
int8_t sl_periodical_report_cfg_r16_s::sl_report_amount_r16_opts::to_number() const
{
  static const int8_t numbers[] = {1, 2, 4, 8, 16, 32, 64, -1};
  return map_enum_number(numbers, 8, value, "sl_periodical_report_cfg_r16_s::sl_report_amount_r16_e_");
}

// SL-ResourcePoolConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_res_pool_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_res_pool_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, sl_res_pool_id_r16, (uint8_t)1u, (uint8_t)16u));
  if (sl_res_pool_r16_present) {
    HANDLE_CODE(sl_res_pool_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_res_pool_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_res_pool_r16_present, 1));

  HANDLE_CODE(unpack_integer(sl_res_pool_id_r16, bref, (uint8_t)1u, (uint8_t)16u));
  if (sl_res_pool_r16_present) {
    HANDLE_CODE(sl_res_pool_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_res_pool_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-ResourcePoolID-r16", sl_res_pool_id_r16);
  if (sl_res_pool_r16_present) {
    j.write_fieldname("sl-ResourcePool-r16");
    sl_res_pool_r16.to_json(j);
  }
  j.end_obj();
}

// SL-TxPower-r16 ::= CHOICE
void sl_tx_pwr_r16_c::set(types::options e)
{
  type_ = e;
}
void sl_tx_pwr_r16_c::set_minusinfinity_r16()
{
  set(types::minusinfinity_r16);
}
int8_t& sl_tx_pwr_r16_c::set_tx_pwr_r16()
{
  set(types::tx_pwr_r16);
  return c;
}
void sl_tx_pwr_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::minusinfinity_r16:
      break;
    case types::tx_pwr_r16:
      j.write_int("txPower-r16", c);
      break;
    default:
      log_invalid_choice_id(type_, "sl_tx_pwr_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE sl_tx_pwr_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::minusinfinity_r16:
      break;
    case types::tx_pwr_r16:
      HANDLE_CODE(pack_integer(bref, c, (int8_t)-30, (int8_t)33));
      break;
    default:
      log_invalid_choice_id(type_, "sl_tx_pwr_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_tx_pwr_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::minusinfinity_r16:
      break;
    case types::tx_pwr_r16:
      HANDLE_CODE(unpack_integer(c, bref, (int8_t)-30, (int8_t)33));
      break;
    default:
      log_invalid_choice_id(type_, "sl_tx_pwr_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_tx_pwr_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"minusinfinity-r16", "txPower-r16"};
  return convert_enum_idx(names, 2, value, "sl_tx_pwr_r16_c::types");
}
int8_t sl_tx_pwr_r16_c::types_opts::to_number() const
{
  static const int8_t numbers[] = {-1};
  return map_enum_number(numbers, 1, value, "sl_tx_pwr_r16_c::types");
}

// SL-MeasObject-r16 ::= SEQUENCE
SRSASN_CODE sl_meas_obj_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, freq_info_sl_r16, (uint32_t)0u, (uint32_t)3279165u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_meas_obj_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(freq_info_sl_r16, bref, (uint32_t)0u, (uint32_t)3279165u));

  return SRSASN_SUCCESS;
}
void sl_meas_obj_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("frequencyInfoSL-r16", freq_info_sl_r16);
  j.end_obj();
}

// SL-PSBCH-Config-r16 ::= SEQUENCE
SRSASN_CODE sl_ps_bch_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(dl_p0_ps_bch_r16_present, 1));
  HANDLE_CODE(bref.pack(dl_alpha_ps_bch_r16_present, 1));

  if (dl_p0_ps_bch_r16_present) {
    HANDLE_CODE(pack_integer(bref, dl_p0_ps_bch_r16, (int8_t)-16, (int8_t)15));
  }
  if (dl_alpha_ps_bch_r16_present) {
    HANDLE_CODE(dl_alpha_ps_bch_r16.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= dl_p0_ps_bch_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(dl_p0_ps_bch_r17_present, 1));
      if (dl_p0_ps_bch_r17_present) {
        HANDLE_CODE(pack_integer(bref, dl_p0_ps_bch_r17, (int16_t)-202, (int16_t)24));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_ps_bch_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(dl_p0_ps_bch_r16_present, 1));
  HANDLE_CODE(bref.unpack(dl_alpha_ps_bch_r16_present, 1));

  if (dl_p0_ps_bch_r16_present) {
    HANDLE_CODE(unpack_integer(dl_p0_ps_bch_r16, bref, (int8_t)-16, (int8_t)15));
  }
  if (dl_alpha_ps_bch_r16_present) {
    HANDLE_CODE(dl_alpha_ps_bch_r16.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(dl_p0_ps_bch_r17_present, 1));
      if (dl_p0_ps_bch_r17_present) {
        HANDLE_CODE(unpack_integer(dl_p0_ps_bch_r17, bref, (int16_t)-202, (int16_t)24));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sl_ps_bch_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dl_p0_ps_bch_r16_present) {
    j.write_int("dl-P0-PSBCH-r16", dl_p0_ps_bch_r16);
  }
  if (dl_alpha_ps_bch_r16_present) {
    j.write_str("dl-Alpha-PSBCH-r16", dl_alpha_ps_bch_r16.to_string());
  }
  if (ext) {
    if (dl_p0_ps_bch_r17_present) {
      j.write_int("dl-P0-PSBCH-r17", dl_p0_ps_bch_r17);
    }
  }
  j.end_obj();
}

const char* sl_ps_bch_cfg_r16_s::dl_alpha_ps_bch_r16_opts::to_string() const
{
  static const char* names[] = {"alpha0", "alpha04", "alpha05", "alpha06", "alpha07", "alpha08", "alpha09", "alpha1"};
  return convert_enum_idx(names, 8, value, "sl_ps_bch_cfg_r16_s::dl_alpha_ps_bch_r16_e_");
}
float sl_ps_bch_cfg_r16_s::dl_alpha_ps_bch_r16_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
  return map_enum_number(numbers, 8, value, "sl_ps_bch_cfg_r16_s::dl_alpha_ps_bch_r16_e_");
}
const char* sl_ps_bch_cfg_r16_s::dl_alpha_ps_bch_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1"};
  return convert_enum_idx(number_strs, 8, value, "sl_ps_bch_cfg_r16_s::dl_alpha_ps_bch_r16_e_");
}

// SL-PSSCH-TxParameters-r16 ::= SEQUENCE
SRSASN_CODE sl_pssch_tx_params_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_max_tx_pwr_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, sl_min_mcs_pssch_r16, (uint8_t)0u, (uint8_t)27u));
  HANDLE_CODE(pack_integer(bref, sl_max_mcs_pssch_r16, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(pack_integer(bref, sl_min_sub_ch_num_pssch_r16, (uint8_t)1u, (uint8_t)27u));
  HANDLE_CODE(pack_integer(bref, sl_max_subch_num_pssch_r16, (uint8_t)1u, (uint8_t)27u));
  HANDLE_CODE(pack_integer(bref, sl_max_tx_trans_num_pssch_r16, (uint8_t)1u, (uint8_t)32u));
  if (sl_max_tx_pwr_r16_present) {
    HANDLE_CODE(sl_max_tx_pwr_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_pssch_tx_params_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_max_tx_pwr_r16_present, 1));

  HANDLE_CODE(unpack_integer(sl_min_mcs_pssch_r16, bref, (uint8_t)0u, (uint8_t)27u));
  HANDLE_CODE(unpack_integer(sl_max_mcs_pssch_r16, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(unpack_integer(sl_min_sub_ch_num_pssch_r16, bref, (uint8_t)1u, (uint8_t)27u));
  HANDLE_CODE(unpack_integer(sl_max_subch_num_pssch_r16, bref, (uint8_t)1u, (uint8_t)27u));
  HANDLE_CODE(unpack_integer(sl_max_tx_trans_num_pssch_r16, bref, (uint8_t)1u, (uint8_t)32u));
  if (sl_max_tx_pwr_r16_present) {
    HANDLE_CODE(sl_max_tx_pwr_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_pssch_tx_params_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-MinMCS-PSSCH-r16", sl_min_mcs_pssch_r16);
  j.write_int("sl-MaxMCS-PSSCH-r16", sl_max_mcs_pssch_r16);
  j.write_int("sl-MinSubChannelNumPSSCH-r16", sl_min_sub_ch_num_pssch_r16);
  j.write_int("sl-MaxSubchannelNumPSSCH-r16", sl_max_subch_num_pssch_r16);
  j.write_int("sl-MaxTxTransNumPSSCH-r16", sl_max_tx_trans_num_pssch_r16);
  if (sl_max_tx_pwr_r16_present) {
    j.write_fieldname("sl-MaxTxPower-r16");
    sl_max_tx_pwr_r16.to_json(j);
  }
  j.end_obj();
}

// SL-PeriodCG-r16 ::= CHOICE
void sl_period_cg_r16_c::destroy_() {}
void sl_period_cg_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
sl_period_cg_r16_c::sl_period_cg_r16_c(const sl_period_cg_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sl_period_cg1_r16:
      c.init(other.c.get<sl_period_cg1_r16_e_>());
      break;
    case types::sl_period_cg2_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_period_cg_r16_c");
  }
}
sl_period_cg_r16_c& sl_period_cg_r16_c::operator=(const sl_period_cg_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sl_period_cg1_r16:
      c.set(other.c.get<sl_period_cg1_r16_e_>());
      break;
    case types::sl_period_cg2_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_period_cg_r16_c");
  }

  return *this;
}
sl_period_cg_r16_c::sl_period_cg1_r16_e_& sl_period_cg_r16_c::set_sl_period_cg1_r16()
{
  set(types::sl_period_cg1_r16);
  return c.get<sl_period_cg1_r16_e_>();
}
uint8_t& sl_period_cg_r16_c::set_sl_period_cg2_r16()
{
  set(types::sl_period_cg2_r16);
  return c.get<uint8_t>();
}
void sl_period_cg_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sl_period_cg1_r16:
      j.write_str("sl-PeriodCG1-r16", c.get<sl_period_cg1_r16_e_>().to_string());
      break;
    case types::sl_period_cg2_r16:
      j.write_int("sl-PeriodCG2-r16", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "sl_period_cg_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE sl_period_cg_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sl_period_cg1_r16:
      HANDLE_CODE(c.get<sl_period_cg1_r16_e_>().pack(bref));
      break;
    case types::sl_period_cg2_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)99u));
      break;
    default:
      log_invalid_choice_id(type_, "sl_period_cg_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_period_cg_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sl_period_cg1_r16:
      HANDLE_CODE(c.get<sl_period_cg1_r16_e_>().unpack(bref));
      break;
    case types::sl_period_cg2_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)99u));
      break;
    default:
      log_invalid_choice_id(type_, "sl_period_cg_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_period_cg_r16_c::sl_period_cg1_r16_opts::to_string() const
{
  static const char* names[] = {"ms100",
                                "ms200",
                                "ms300",
                                "ms400",
                                "ms500",
                                "ms600",
                                "ms700",
                                "ms800",
                                "ms900",
                                "ms1000",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "sl_period_cg_r16_c::sl_period_cg1_r16_e_");
}
uint16_t sl_period_cg_r16_c::sl_period_cg1_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000};
  return map_enum_number(numbers, 10, value, "sl_period_cg_r16_c::sl_period_cg1_r16_e_");
}

const char* sl_period_cg_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"sl-PeriodCG1-r16", "sl-PeriodCG2-r16"};
  return convert_enum_idx(names, 2, value, "sl_period_cg_r16_c::types");
}
uint8_t sl_period_cg_r16_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "sl_period_cg_r16_c::types");
}

// SL-QoS-Profile-r16 ::= SEQUENCE
SRSASN_CODE sl_qos_profile_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_pqi_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_gfbr_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_mfbr_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_range_r16_present, 1));

  if (sl_pqi_r16_present) {
    HANDLE_CODE(sl_pqi_r16.pack(bref));
  }
  if (sl_gfbr_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_gfbr_r16, (uint32_t)0u, (uint32_t)4000000000u));
  }
  if (sl_mfbr_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_mfbr_r16, (uint32_t)0u, (uint32_t)4000000000u));
  }
  if (sl_range_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_range_r16, (uint16_t)1u, (uint16_t)1000u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_qos_profile_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_pqi_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_gfbr_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_mfbr_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_range_r16_present, 1));

  if (sl_pqi_r16_present) {
    HANDLE_CODE(sl_pqi_r16.unpack(bref));
  }
  if (sl_gfbr_r16_present) {
    HANDLE_CODE(unpack_integer(sl_gfbr_r16, bref, (uint32_t)0u, (uint32_t)4000000000u));
  }
  if (sl_mfbr_r16_present) {
    HANDLE_CODE(unpack_integer(sl_mfbr_r16, bref, (uint32_t)0u, (uint32_t)4000000000u));
  }
  if (sl_range_r16_present) {
    HANDLE_CODE(unpack_integer(sl_range_r16, bref, (uint16_t)1u, (uint16_t)1000u));
  }

  return SRSASN_SUCCESS;
}
void sl_qos_profile_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_pqi_r16_present) {
    j.write_fieldname("sl-PQI-r16");
    sl_pqi_r16.to_json(j);
  }
  if (sl_gfbr_r16_present) {
    j.write_int("sl-GFBR-r16", sl_gfbr_r16);
  }
  if (sl_mfbr_r16_present) {
    j.write_int("sl-MFBR-r16", sl_mfbr_r16);
  }
  if (sl_range_r16_present) {
    j.write_int("sl-Range-r16", sl_range_r16);
  }
  j.end_obj();
}

// SL-ReportConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_report_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(sl_report_type_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_report_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(sl_report_type_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_report_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sl-ReportType-r16");
  sl_report_type_r16.to_json(j);
  j.end_obj();
}

void sl_report_cfg_r16_s::sl_report_type_r16_c_::destroy_()
{
  switch (type_) {
    case types::sl_periodical_r16:
      c.destroy<sl_periodical_report_cfg_r16_s>();
      break;
    case types::sl_event_triggered_r16:
      c.destroy<sl_event_trigger_cfg_r16_s>();
      break;
    default:
      break;
  }
}
void sl_report_cfg_r16_s::sl_report_type_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::sl_periodical_r16:
      c.init<sl_periodical_report_cfg_r16_s>();
      break;
    case types::sl_event_triggered_r16:
      c.init<sl_event_trigger_cfg_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_report_cfg_r16_s::sl_report_type_r16_c_");
  }
}
sl_report_cfg_r16_s::sl_report_type_r16_c_::sl_report_type_r16_c_(
    const sl_report_cfg_r16_s::sl_report_type_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sl_periodical_r16:
      c.init(other.c.get<sl_periodical_report_cfg_r16_s>());
      break;
    case types::sl_event_triggered_r16:
      c.init(other.c.get<sl_event_trigger_cfg_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_report_cfg_r16_s::sl_report_type_r16_c_");
  }
}
sl_report_cfg_r16_s::sl_report_type_r16_c_&
sl_report_cfg_r16_s::sl_report_type_r16_c_::operator=(const sl_report_cfg_r16_s::sl_report_type_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sl_periodical_r16:
      c.set(other.c.get<sl_periodical_report_cfg_r16_s>());
      break;
    case types::sl_event_triggered_r16:
      c.set(other.c.get<sl_event_trigger_cfg_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_report_cfg_r16_s::sl_report_type_r16_c_");
  }

  return *this;
}
sl_periodical_report_cfg_r16_s& sl_report_cfg_r16_s::sl_report_type_r16_c_::set_sl_periodical_r16()
{
  set(types::sl_periodical_r16);
  return c.get<sl_periodical_report_cfg_r16_s>();
}
sl_event_trigger_cfg_r16_s& sl_report_cfg_r16_s::sl_report_type_r16_c_::set_sl_event_triggered_r16()
{
  set(types::sl_event_triggered_r16);
  return c.get<sl_event_trigger_cfg_r16_s>();
}
void sl_report_cfg_r16_s::sl_report_type_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sl_periodical_r16:
      j.write_fieldname("sl-Periodical-r16");
      c.get<sl_periodical_report_cfg_r16_s>().to_json(j);
      break;
    case types::sl_event_triggered_r16:
      j.write_fieldname("sl-EventTriggered-r16");
      c.get<sl_event_trigger_cfg_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "sl_report_cfg_r16_s::sl_report_type_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE sl_report_cfg_r16_s::sl_report_type_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sl_periodical_r16:
      HANDLE_CODE(c.get<sl_periodical_report_cfg_r16_s>().pack(bref));
      break;
    case types::sl_event_triggered_r16:
      HANDLE_CODE(c.get<sl_event_trigger_cfg_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_report_cfg_r16_s::sl_report_type_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_report_cfg_r16_s::sl_report_type_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sl_periodical_r16:
      HANDLE_CODE(c.get<sl_periodical_report_cfg_r16_s>().unpack(bref));
      break;
    case types::sl_event_triggered_r16:
      HANDLE_CODE(c.get<sl_event_trigger_cfg_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_report_cfg_r16_s::sl_report_type_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_report_cfg_r16_s::sl_report_type_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"sl-Periodical-r16", "sl-EventTriggered-r16"};
  return convert_enum_idx(names, 2, value, "sl_report_cfg_r16_s::sl_report_type_r16_c_::types");
}

// SL-SSB-TimeAllocation-r16 ::= SEQUENCE
SRSASN_CODE sl_ssb_time_alloc_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_num_ssb_within_period_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_time_offset_ssb_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_time_interv_r16_present, 1));

  if (sl_num_ssb_within_period_r16_present) {
    HANDLE_CODE(sl_num_ssb_within_period_r16.pack(bref));
  }
  if (sl_time_offset_ssb_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_time_offset_ssb_r16, (uint16_t)0u, (uint16_t)1279u));
  }
  if (sl_time_interv_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_time_interv_r16, (uint16_t)0u, (uint16_t)639u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_ssb_time_alloc_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_num_ssb_within_period_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_time_offset_ssb_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_time_interv_r16_present, 1));

  if (sl_num_ssb_within_period_r16_present) {
    HANDLE_CODE(sl_num_ssb_within_period_r16.unpack(bref));
  }
  if (sl_time_offset_ssb_r16_present) {
    HANDLE_CODE(unpack_integer(sl_time_offset_ssb_r16, bref, (uint16_t)0u, (uint16_t)1279u));
  }
  if (sl_time_interv_r16_present) {
    HANDLE_CODE(unpack_integer(sl_time_interv_r16, bref, (uint16_t)0u, (uint16_t)639u));
  }

  return SRSASN_SUCCESS;
}
void sl_ssb_time_alloc_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_num_ssb_within_period_r16_present) {
    j.write_str("sl-NumSSB-WithinPeriod-r16", sl_num_ssb_within_period_r16.to_string());
  }
  if (sl_time_offset_ssb_r16_present) {
    j.write_int("sl-TimeOffsetSSB-r16", sl_time_offset_ssb_r16);
  }
  if (sl_time_interv_r16_present) {
    j.write_int("sl-TimeInterval-r16", sl_time_interv_r16);
  }
  j.end_obj();
}

const char* sl_ssb_time_alloc_r16_s::sl_num_ssb_within_period_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(names, 7, value, "sl_ssb_time_alloc_r16_s::sl_num_ssb_within_period_r16_e_");
}
uint8_t sl_ssb_time_alloc_r16_s::sl_num_ssb_within_period_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16, 32, 64};
  return map_enum_number(numbers, 7, value, "sl_ssb_time_alloc_r16_s::sl_num_ssb_within_period_r16_e_");
}

// SL-TxPoolDedicated-r16 ::= SEQUENCE
SRSASN_CODE sl_tx_pool_ded_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_pool_to_release_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_pool_to_add_mod_list_r16.size() > 0, 1));

  if (sl_pool_to_release_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_pool_to_release_list_r16, 1, 8, integer_packer<uint8_t>(1, 16)));
  }
  if (sl_pool_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_pool_to_add_mod_list_r16, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_tx_pool_ded_r16_s::unpack(cbit_ref& bref)
{
  bool sl_pool_to_release_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_pool_to_release_list_r16_present, 1));
  bool sl_pool_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_pool_to_add_mod_list_r16_present, 1));

  if (sl_pool_to_release_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_pool_to_release_list_r16, bref, 1, 8, integer_packer<uint8_t>(1, 16)));
  }
  if (sl_pool_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_pool_to_add_mod_list_r16, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void sl_tx_pool_ded_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_pool_to_release_list_r16.size() > 0) {
    j.start_array("sl-PoolToReleaseList-r16");
    for (const auto& e1 : sl_pool_to_release_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_pool_to_add_mod_list_r16.size() > 0) {
    j.start_array("sl-PoolToAddModList-r16");
    for (const auto& e1 : sl_pool_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// SL-TypeTxSync-r16 ::= ENUMERATED
const char* sl_type_tx_sync_r16_opts::to_string() const
{
  static const char* names[] = {"gnss", "gnbEnb", "ue"};
  return convert_enum_idx(names, 3, value, "sl_type_tx_sync_r16_e");
}

// BSR-Config ::= SEQUENCE
SRSASN_CODE bsr_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(lc_ch_sr_delay_timer_present, 1));

  HANDLE_CODE(periodic_bsr_timer.pack(bref));
  HANDLE_CODE(retx_bsr_timer.pack(bref));
  if (lc_ch_sr_delay_timer_present) {
    HANDLE_CODE(lc_ch_sr_delay_timer.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE bsr_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(lc_ch_sr_delay_timer_present, 1));

  HANDLE_CODE(periodic_bsr_timer.unpack(bref));
  HANDLE_CODE(retx_bsr_timer.unpack(bref));
  if (lc_ch_sr_delay_timer_present) {
    HANDLE_CODE(lc_ch_sr_delay_timer.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void bsr_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("periodicBSR-Timer", periodic_bsr_timer.to_string());
  j.write_str("retxBSR-Timer", retx_bsr_timer.to_string());
  if (lc_ch_sr_delay_timer_present) {
    j.write_str("logicalChannelSR-DelayTimer", lc_ch_sr_delay_timer.to_string());
  }
  j.end_obj();
}

const char* bsr_cfg_s::periodic_bsr_timer_opts::to_string() const
{
  static const char* names[] = {"sf1",
                                "sf5",
                                "sf10",
                                "sf16",
                                "sf20",
                                "sf32",
                                "sf40",
                                "sf64",
                                "sf80",
                                "sf128",
                                "sf160",
                                "sf320",
                                "sf640",
                                "sf1280",
                                "sf2560",
                                "infinity"};
  return convert_enum_idx(names, 16, value, "bsr_cfg_s::periodic_bsr_timer_e_");
}
int16_t bsr_cfg_s::periodic_bsr_timer_opts::to_number() const
{
  static const int16_t numbers[] = {1, 5, 10, 16, 20, 32, 40, 64, 80, 128, 160, 320, 640, 1280, 2560, -1};
  return map_enum_number(numbers, 16, value, "bsr_cfg_s::periodic_bsr_timer_e_");
}

const char* bsr_cfg_s::retx_bsr_timer_opts::to_string() const
{
  static const char* names[] = {"sf10",
                                "sf20",
                                "sf40",
                                "sf80",
                                "sf160",
                                "sf320",
                                "sf640",
                                "sf1280",
                                "sf2560",
                                "sf5120",
                                "sf10240",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "bsr_cfg_s::retx_bsr_timer_e_");
}
uint16_t bsr_cfg_s::retx_bsr_timer_opts::to_number() const
{
  static const uint16_t numbers[] = {10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240};
  return map_enum_number(numbers, 11, value, "bsr_cfg_s::retx_bsr_timer_e_");
}

const char* bsr_cfg_s::lc_ch_sr_delay_timer_opts::to_string() const
{
  static const char* names[] = {"sf20", "sf40", "sf64", "sf128", "sf512", "sf1024", "sf2560", "spare1"};
  return convert_enum_idx(names, 8, value, "bsr_cfg_s::lc_ch_sr_delay_timer_e_");
}
uint16_t bsr_cfg_s::lc_ch_sr_delay_timer_opts::to_number() const
{
  static const uint16_t numbers[] = {20, 40, 64, 128, 512, 1024, 2560};
  return map_enum_number(numbers, 7, value, "bsr_cfg_s::lc_ch_sr_delay_timer_e_");
}

// PollByte ::= ENUMERATED
const char* poll_byte_opts::to_string() const
{
  static const char* names[] = {"kB1",     "kB2",     "kB5",     "kB8",      "kB10",    "kB15",    "kB25",    "kB50",
                                "kB75",    "kB100",   "kB125",   "kB250",    "kB375",   "kB500",   "kB750",   "kB1000",
                                "kB1250",  "kB1500",  "kB2000",  "kB3000",   "kB4000",  "kB4500",  "kB5000",  "kB5500",
                                "kB6000",  "kB6500",  "kB7000",  "kB7500",   "mB8",     "mB9",     "mB10",    "mB11",
                                "mB12",    "mB13",    "mB14",    "mB15",     "mB16",    "mB17",    "mB18",    "mB20",
                                "mB25",    "mB30",    "mB40",    "infinity", "spare20", "spare19", "spare18", "spare17",
                                "spare16", "spare15", "spare14", "spare13",  "spare12", "spare11", "spare10", "spare9",
                                "spare8",  "spare7",  "spare6",  "spare5",   "spare4",  "spare3",  "spare2",  "spare1"};
  return convert_enum_idx(names, 64, value, "poll_byte_e");
}
int32_t poll_byte_opts::to_number() const
{
  static const int32_t numbers[] = {1,     2,     5,     8,     10,    15,    25,    50,    75,    100,   125,
                                    250,   375,   500,   750,   1000,  1250,  1500,  2000,  3000,  4000,  4500,
                                    5000,  5500,  6000,  6500,  7000,  7500,  8000,  9000,  10000, 11000, 12000,
                                    13000, 14000, 15000, 16000, 17000, 18000, 20000, 25000, 30000, 40000, -1};
  return map_enum_number(numbers, 44, value, "poll_byte_e");
}

// PollPDU ::= ENUMERATED
const char* poll_pdu_opts::to_string() const
{
  static const char* names[] = {"p4",     "p8",     "p16",    "p32",    "p64",    "p128",   "p256",   "p512",
                                "p1024",  "p2048",  "p4096",  "p6144",  "p8192",  "p12288", "p16384", "p20480",
                                "p24576", "p28672", "p32768", "p40960", "p49152", "p57344", "p65536", "infinity",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "poll_pdu_e");
}
int32_t poll_pdu_opts::to_number() const
{
  static const int32_t numbers[] = {4,    8,     16,    32,    64,    128,   256,   512,   1024,  2048,  4096,  6144,
                                    8192, 12288, 16384, 20480, 24576, 28672, 32768, 40960, 49152, 57344, 65536, -1};
  return map_enum_number(numbers, 24, value, "poll_pdu_e");
}

// SL-BWP-DiscPoolConfig-r17 ::= SEQUENCE
SRSASN_CODE sl_bwp_disc_pool_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_disc_rx_pool_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_disc_tx_pool_sel_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_disc_tx_pool_sched_r17_present, 1));

  if (sl_disc_rx_pool_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_disc_rx_pool_r17, 1, 16));
  }
  if (sl_disc_tx_pool_sel_r17_present) {
    HANDLE_CODE(sl_disc_tx_pool_sel_r17.pack(bref));
  }
  if (sl_disc_tx_pool_sched_r17_present) {
    HANDLE_CODE(sl_disc_tx_pool_sched_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_bwp_disc_pool_cfg_r17_s::unpack(cbit_ref& bref)
{
  bool sl_disc_rx_pool_r17_present;
  HANDLE_CODE(bref.unpack(sl_disc_rx_pool_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_disc_tx_pool_sel_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_disc_tx_pool_sched_r17_present, 1));

  if (sl_disc_rx_pool_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_disc_rx_pool_r17, bref, 1, 16));
  }
  if (sl_disc_tx_pool_sel_r17_present) {
    HANDLE_CODE(sl_disc_tx_pool_sel_r17.unpack(bref));
  }
  if (sl_disc_tx_pool_sched_r17_present) {
    HANDLE_CODE(sl_disc_tx_pool_sched_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_bwp_disc_pool_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_disc_rx_pool_r17.size() > 0) {
    j.start_array("sl-DiscRxPool-r17");
    for (const auto& e1 : sl_disc_rx_pool_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_disc_tx_pool_sel_r17_present) {
    j.write_fieldname("sl-DiscTxPoolSelected-r17");
    sl_disc_tx_pool_sel_r17.to_json(j);
  }
  if (sl_disc_tx_pool_sched_r17_present) {
    j.write_fieldname("sl-DiscTxPoolScheduling-r17");
    sl_disc_tx_pool_sched_r17.to_json(j);
  }
  j.end_obj();
}

// SL-BWP-Generic-r16 ::= SEQUENCE
SRSASN_CODE sl_bwp_generic_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_bwp_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_len_symbols_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_start_symbol_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ps_bch_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_tx_direct_current_location_r16_present, 1));

  if (sl_bwp_r16_present) {
    HANDLE_CODE(sl_bwp_r16.pack(bref));
  }
  if (sl_len_symbols_r16_present) {
    HANDLE_CODE(sl_len_symbols_r16.pack(bref));
  }
  if (sl_start_symbol_r16_present) {
    HANDLE_CODE(sl_start_symbol_r16.pack(bref));
  }
  if (sl_ps_bch_cfg_r16_present) {
    HANDLE_CODE(sl_ps_bch_cfg_r16.pack(bref));
  }
  if (sl_tx_direct_current_location_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_tx_direct_current_location_r16, (uint16_t)0u, (uint16_t)3301u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_bwp_generic_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_bwp_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_len_symbols_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_start_symbol_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ps_bch_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_tx_direct_current_location_r16_present, 1));

  if (sl_bwp_r16_present) {
    HANDLE_CODE(sl_bwp_r16.unpack(bref));
  }
  if (sl_len_symbols_r16_present) {
    HANDLE_CODE(sl_len_symbols_r16.unpack(bref));
  }
  if (sl_start_symbol_r16_present) {
    HANDLE_CODE(sl_start_symbol_r16.unpack(bref));
  }
  if (sl_ps_bch_cfg_r16_present) {
    HANDLE_CODE(sl_ps_bch_cfg_r16.unpack(bref));
  }
  if (sl_tx_direct_current_location_r16_present) {
    HANDLE_CODE(unpack_integer(sl_tx_direct_current_location_r16, bref, (uint16_t)0u, (uint16_t)3301u));
  }

  return SRSASN_SUCCESS;
}
void sl_bwp_generic_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_bwp_r16_present) {
    j.write_fieldname("sl-BWP-r16");
    sl_bwp_r16.to_json(j);
  }
  if (sl_len_symbols_r16_present) {
    j.write_str("sl-LengthSymbols-r16", sl_len_symbols_r16.to_string());
  }
  if (sl_start_symbol_r16_present) {
    j.write_str("sl-StartSymbol-r16", sl_start_symbol_r16.to_string());
  }
  if (sl_ps_bch_cfg_r16_present) {
    j.write_fieldname("sl-PSBCH-Config-r16");
    sl_ps_bch_cfg_r16.to_json(j);
  }
  if (sl_tx_direct_current_location_r16_present) {
    j.write_int("sl-TxDirectCurrentLocation-r16", sl_tx_direct_current_location_r16);
  }
  j.end_obj();
}

const char* sl_bwp_generic_r16_s::sl_len_symbols_r16_opts::to_string() const
{
  static const char* names[] = {"sym7", "sym8", "sym9", "sym10", "sym11", "sym12", "sym13", "sym14"};
  return convert_enum_idx(names, 8, value, "sl_bwp_generic_r16_s::sl_len_symbols_r16_e_");
}
uint8_t sl_bwp_generic_r16_s::sl_len_symbols_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {7, 8, 9, 10, 11, 12, 13, 14};
  return map_enum_number(numbers, 8, value, "sl_bwp_generic_r16_s::sl_len_symbols_r16_e_");
}

const char* sl_bwp_generic_r16_s::sl_start_symbol_r16_opts::to_string() const
{
  static const char* names[] = {"sym0", "sym1", "sym2", "sym3", "sym4", "sym5", "sym6", "sym7"};
  return convert_enum_idx(names, 8, value, "sl_bwp_generic_r16_s::sl_start_symbol_r16_e_");
}
uint8_t sl_bwp_generic_r16_s::sl_start_symbol_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 3, 4, 5, 6, 7};
  return map_enum_number(numbers, 8, value, "sl_bwp_generic_r16_s::sl_start_symbol_r16_e_");
}

// SL-BWP-PoolConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_bwp_pool_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_rx_pool_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_tx_pool_sel_normal_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_tx_pool_sched_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_tx_pool_exceptional_r16_present, 1));

  if (sl_rx_pool_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rx_pool_r16, 1, 16));
  }
  if (sl_tx_pool_sel_normal_r16_present) {
    HANDLE_CODE(sl_tx_pool_sel_normal_r16.pack(bref));
  }
  if (sl_tx_pool_sched_r16_present) {
    HANDLE_CODE(sl_tx_pool_sched_r16.pack(bref));
  }
  if (sl_tx_pool_exceptional_r16_present) {
    HANDLE_CODE(sl_tx_pool_exceptional_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_bwp_pool_cfg_r16_s::unpack(cbit_ref& bref)
{
  bool sl_rx_pool_r16_present;
  HANDLE_CODE(bref.unpack(sl_rx_pool_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_tx_pool_sel_normal_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_tx_pool_sched_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_tx_pool_exceptional_r16_present, 1));

  if (sl_rx_pool_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rx_pool_r16, bref, 1, 16));
  }
  if (sl_tx_pool_sel_normal_r16_present) {
    HANDLE_CODE(sl_tx_pool_sel_normal_r16.unpack(bref));
  }
  if (sl_tx_pool_sched_r16_present) {
    HANDLE_CODE(sl_tx_pool_sched_r16.unpack(bref));
  }
  if (sl_tx_pool_exceptional_r16_present) {
    HANDLE_CODE(sl_tx_pool_exceptional_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_bwp_pool_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_rx_pool_r16.size() > 0) {
    j.start_array("sl-RxPool-r16");
    for (const auto& e1 : sl_rx_pool_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_tx_pool_sel_normal_r16_present) {
    j.write_fieldname("sl-TxPoolSelectedNormal-r16");
    sl_tx_pool_sel_normal_r16.to_json(j);
  }
  if (sl_tx_pool_sched_r16_present) {
    j.write_fieldname("sl-TxPoolScheduling-r16");
    sl_tx_pool_sched_r16.to_json(j);
  }
  if (sl_tx_pool_exceptional_r16_present) {
    j.write_fieldname("sl-TxPoolExceptional-r16");
    sl_tx_pool_exceptional_r16.to_json(j);
  }
  j.end_obj();
}

// SL-CBR-PSSCH-TxConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_cbr_pssch_tx_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_cr_limit_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_tx_params_r16_present, 1));

  if (sl_cr_limit_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_cr_limit_r16, (uint16_t)0u, (uint16_t)10000u));
  }
  if (sl_tx_params_r16_present) {
    HANDLE_CODE(sl_tx_params_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_cbr_pssch_tx_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_cr_limit_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_tx_params_r16_present, 1));

  if (sl_cr_limit_r16_present) {
    HANDLE_CODE(unpack_integer(sl_cr_limit_r16, bref, (uint16_t)0u, (uint16_t)10000u));
  }
  if (sl_tx_params_r16_present) {
    HANDLE_CODE(sl_tx_params_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_cbr_pssch_tx_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_cr_limit_r16_present) {
    j.write_int("sl-CR-Limit-r16", sl_cr_limit_r16);
  }
  if (sl_tx_params_r16_present) {
    j.write_fieldname("sl-TxParameters-r16");
    sl_tx_params_r16.to_json(j);
  }
  j.end_obj();
}

// SL-ConfiguredGrantConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_cfg_grant_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_period_cg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_nr_of_harq_processes_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_harq_proc_id_offset_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_cg_max_trans_num_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(rrc_cfg_sidelink_grant_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, sl_cfg_idx_cg_r16, (uint8_t)0u, (uint8_t)7u));
  if (sl_period_cg_r16_present) {
    HANDLE_CODE(sl_period_cg_r16.pack(bref));
  }
  if (sl_nr_of_harq_processes_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_nr_of_harq_processes_r16, (uint8_t)1u, (uint8_t)16u));
  }
  if (sl_harq_proc_id_offset_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_harq_proc_id_offset_r16, (uint8_t)0u, (uint8_t)15u));
  }
  if (sl_cg_max_trans_num_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_cg_max_trans_num_list_r16, 1, 8));
  }
  if (rrc_cfg_sidelink_grant_r16_present) {
    HANDLE_CODE(bref.pack(rrc_cfg_sidelink_grant_r16.sl_time_res_cg_type1_r16_present, 1));
    HANDLE_CODE(bref.pack(rrc_cfg_sidelink_grant_r16.sl_start_subch_cg_type1_r16_present, 1));
    HANDLE_CODE(bref.pack(rrc_cfg_sidelink_grant_r16.sl_freq_res_cg_type1_r16_present, 1));
    HANDLE_CODE(bref.pack(rrc_cfg_sidelink_grant_r16.sl_time_offset_cg_type1_r16_present, 1));
    HANDLE_CODE(bref.pack(rrc_cfg_sidelink_grant_r16.sl_n1_pucch_an_r16_present, 1));
    HANDLE_CODE(bref.pack(rrc_cfg_sidelink_grant_r16.sl_psfch_to_pucch_cg_type1_r16_present, 1));
    HANDLE_CODE(bref.pack(rrc_cfg_sidelink_grant_r16.sl_res_pool_id_r16_present, 1));
    HANDLE_CODE(bref.pack(rrc_cfg_sidelink_grant_r16.sl_time_ref_sfn_type1_r16_present, 1));
    if (rrc_cfg_sidelink_grant_r16.sl_time_res_cg_type1_r16_present) {
      HANDLE_CODE(
          pack_integer(bref, rrc_cfg_sidelink_grant_r16.sl_time_res_cg_type1_r16, (uint16_t)0u, (uint16_t)496u));
    }
    if (rrc_cfg_sidelink_grant_r16.sl_start_subch_cg_type1_r16_present) {
      HANDLE_CODE(
          pack_integer(bref, rrc_cfg_sidelink_grant_r16.sl_start_subch_cg_type1_r16, (uint8_t)0u, (uint8_t)26u));
    }
    if (rrc_cfg_sidelink_grant_r16.sl_freq_res_cg_type1_r16_present) {
      HANDLE_CODE(
          pack_integer(bref, rrc_cfg_sidelink_grant_r16.sl_freq_res_cg_type1_r16, (uint16_t)0u, (uint16_t)6929u));
    }
    if (rrc_cfg_sidelink_grant_r16.sl_time_offset_cg_type1_r16_present) {
      HANDLE_CODE(
          pack_integer(bref, rrc_cfg_sidelink_grant_r16.sl_time_offset_cg_type1_r16, (uint16_t)0u, (uint16_t)7999u));
    }
    if (rrc_cfg_sidelink_grant_r16.sl_n1_pucch_an_r16_present) {
      HANDLE_CODE(pack_integer(bref, rrc_cfg_sidelink_grant_r16.sl_n1_pucch_an_r16, (uint8_t)0u, (uint8_t)127u));
    }
    if (rrc_cfg_sidelink_grant_r16.sl_psfch_to_pucch_cg_type1_r16_present) {
      HANDLE_CODE(
          pack_integer(bref, rrc_cfg_sidelink_grant_r16.sl_psfch_to_pucch_cg_type1_r16, (uint8_t)0u, (uint8_t)15u));
    }
    if (rrc_cfg_sidelink_grant_r16.sl_res_pool_id_r16_present) {
      HANDLE_CODE(pack_integer(bref, rrc_cfg_sidelink_grant_r16.sl_res_pool_id_r16, (uint8_t)1u, (uint8_t)16u));
    }
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sl_n1_pucch_an_type2_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_n1_pucch_an_type2_r16_present, 1));
      if (sl_n1_pucch_an_type2_r16_present) {
        HANDLE_CODE(pack_integer(bref, sl_n1_pucch_an_type2_r16, (uint8_t)0u, (uint8_t)127u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_cfg_grant_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_period_cg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_nr_of_harq_processes_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_harq_proc_id_offset_r16_present, 1));
  bool sl_cg_max_trans_num_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_cg_max_trans_num_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(rrc_cfg_sidelink_grant_r16_present, 1));

  HANDLE_CODE(unpack_integer(sl_cfg_idx_cg_r16, bref, (uint8_t)0u, (uint8_t)7u));
  if (sl_period_cg_r16_present) {
    HANDLE_CODE(sl_period_cg_r16.unpack(bref));
  }
  if (sl_nr_of_harq_processes_r16_present) {
    HANDLE_CODE(unpack_integer(sl_nr_of_harq_processes_r16, bref, (uint8_t)1u, (uint8_t)16u));
  }
  if (sl_harq_proc_id_offset_r16_present) {
    HANDLE_CODE(unpack_integer(sl_harq_proc_id_offset_r16, bref, (uint8_t)0u, (uint8_t)15u));
  }
  if (sl_cg_max_trans_num_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_cg_max_trans_num_list_r16, bref, 1, 8));
  }
  if (rrc_cfg_sidelink_grant_r16_present) {
    HANDLE_CODE(bref.unpack(rrc_cfg_sidelink_grant_r16.sl_time_res_cg_type1_r16_present, 1));
    HANDLE_CODE(bref.unpack(rrc_cfg_sidelink_grant_r16.sl_start_subch_cg_type1_r16_present, 1));
    HANDLE_CODE(bref.unpack(rrc_cfg_sidelink_grant_r16.sl_freq_res_cg_type1_r16_present, 1));
    HANDLE_CODE(bref.unpack(rrc_cfg_sidelink_grant_r16.sl_time_offset_cg_type1_r16_present, 1));
    HANDLE_CODE(bref.unpack(rrc_cfg_sidelink_grant_r16.sl_n1_pucch_an_r16_present, 1));
    HANDLE_CODE(bref.unpack(rrc_cfg_sidelink_grant_r16.sl_psfch_to_pucch_cg_type1_r16_present, 1));
    HANDLE_CODE(bref.unpack(rrc_cfg_sidelink_grant_r16.sl_res_pool_id_r16_present, 1));
    HANDLE_CODE(bref.unpack(rrc_cfg_sidelink_grant_r16.sl_time_ref_sfn_type1_r16_present, 1));
    if (rrc_cfg_sidelink_grant_r16.sl_time_res_cg_type1_r16_present) {
      HANDLE_CODE(
          unpack_integer(rrc_cfg_sidelink_grant_r16.sl_time_res_cg_type1_r16, bref, (uint16_t)0u, (uint16_t)496u));
    }
    if (rrc_cfg_sidelink_grant_r16.sl_start_subch_cg_type1_r16_present) {
      HANDLE_CODE(
          unpack_integer(rrc_cfg_sidelink_grant_r16.sl_start_subch_cg_type1_r16, bref, (uint8_t)0u, (uint8_t)26u));
    }
    if (rrc_cfg_sidelink_grant_r16.sl_freq_res_cg_type1_r16_present) {
      HANDLE_CODE(
          unpack_integer(rrc_cfg_sidelink_grant_r16.sl_freq_res_cg_type1_r16, bref, (uint16_t)0u, (uint16_t)6929u));
    }
    if (rrc_cfg_sidelink_grant_r16.sl_time_offset_cg_type1_r16_present) {
      HANDLE_CODE(
          unpack_integer(rrc_cfg_sidelink_grant_r16.sl_time_offset_cg_type1_r16, bref, (uint16_t)0u, (uint16_t)7999u));
    }
    if (rrc_cfg_sidelink_grant_r16.sl_n1_pucch_an_r16_present) {
      HANDLE_CODE(unpack_integer(rrc_cfg_sidelink_grant_r16.sl_n1_pucch_an_r16, bref, (uint8_t)0u, (uint8_t)127u));
    }
    if (rrc_cfg_sidelink_grant_r16.sl_psfch_to_pucch_cg_type1_r16_present) {
      HANDLE_CODE(
          unpack_integer(rrc_cfg_sidelink_grant_r16.sl_psfch_to_pucch_cg_type1_r16, bref, (uint8_t)0u, (uint8_t)15u));
    }
    if (rrc_cfg_sidelink_grant_r16.sl_res_pool_id_r16_present) {
      HANDLE_CODE(unpack_integer(rrc_cfg_sidelink_grant_r16.sl_res_pool_id_r16, bref, (uint8_t)1u, (uint8_t)16u));
    }
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(sl_n1_pucch_an_type2_r16_present, 1));
      if (sl_n1_pucch_an_type2_r16_present) {
        HANDLE_CODE(unpack_integer(sl_n1_pucch_an_type2_r16, bref, (uint8_t)0u, (uint8_t)127u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sl_cfg_grant_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-ConfigIndexCG-r16", sl_cfg_idx_cg_r16);
  if (sl_period_cg_r16_present) {
    j.write_fieldname("sl-PeriodCG-r16");
    sl_period_cg_r16.to_json(j);
  }
  if (sl_nr_of_harq_processes_r16_present) {
    j.write_int("sl-NrOfHARQ-Processes-r16", sl_nr_of_harq_processes_r16);
  }
  if (sl_harq_proc_id_offset_r16_present) {
    j.write_int("sl-HARQ-ProcID-offset-r16", sl_harq_proc_id_offset_r16);
  }
  if (sl_cg_max_trans_num_list_r16.size() > 0) {
    j.start_array("sl-CG-MaxTransNumList-r16");
    for (const auto& e1 : sl_cg_max_trans_num_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (rrc_cfg_sidelink_grant_r16_present) {
    j.write_fieldname("rrc-ConfiguredSidelinkGrant-r16");
    j.start_obj();
    if (rrc_cfg_sidelink_grant_r16.sl_time_res_cg_type1_r16_present) {
      j.write_int("sl-TimeResourceCG-Type1-r16", rrc_cfg_sidelink_grant_r16.sl_time_res_cg_type1_r16);
    }
    if (rrc_cfg_sidelink_grant_r16.sl_start_subch_cg_type1_r16_present) {
      j.write_int("sl-StartSubchannelCG-Type1-r16", rrc_cfg_sidelink_grant_r16.sl_start_subch_cg_type1_r16);
    }
    if (rrc_cfg_sidelink_grant_r16.sl_freq_res_cg_type1_r16_present) {
      j.write_int("sl-FreqResourceCG-Type1-r16", rrc_cfg_sidelink_grant_r16.sl_freq_res_cg_type1_r16);
    }
    if (rrc_cfg_sidelink_grant_r16.sl_time_offset_cg_type1_r16_present) {
      j.write_int("sl-TimeOffsetCG-Type1-r16", rrc_cfg_sidelink_grant_r16.sl_time_offset_cg_type1_r16);
    }
    if (rrc_cfg_sidelink_grant_r16.sl_n1_pucch_an_r16_present) {
      j.write_int("sl-N1PUCCH-AN-r16", rrc_cfg_sidelink_grant_r16.sl_n1_pucch_an_r16);
    }
    if (rrc_cfg_sidelink_grant_r16.sl_psfch_to_pucch_cg_type1_r16_present) {
      j.write_int("sl-PSFCH-ToPUCCH-CG-Type1-r16", rrc_cfg_sidelink_grant_r16.sl_psfch_to_pucch_cg_type1_r16);
    }
    if (rrc_cfg_sidelink_grant_r16.sl_res_pool_id_r16_present) {
      j.write_int("sl-ResourcePoolID-r16", rrc_cfg_sidelink_grant_r16.sl_res_pool_id_r16);
    }
    if (rrc_cfg_sidelink_grant_r16.sl_time_ref_sfn_type1_r16_present) {
      j.write_str("sl-TimeReferenceSFN-Type1-r16", "sfn512");
    }
    j.end_obj();
  }
  if (ext) {
    if (sl_n1_pucch_an_type2_r16_present) {
      j.write_int("sl-N1PUCCH-AN-Type2-r16", sl_n1_pucch_an_type2_r16);
    }
  }
  j.end_obj();
}

// SL-DRX-ConfigUC-r17 ::= SEQUENCE
SRSASN_CODE sl_drx_cfg_uc_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_drx_harq_rtt_timer1_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_drx_harq_rtt_timer2_r17_present, 1));

  HANDLE_CODE(sl_drx_on_dur_timer_r17.pack(bref));
  HANDLE_CODE(sl_drx_inactivity_timer_r17.pack(bref));
  if (sl_drx_harq_rtt_timer1_r17_present) {
    HANDLE_CODE(sl_drx_harq_rtt_timer1_r17.pack(bref));
  }
  if (sl_drx_harq_rtt_timer2_r17_present) {
    HANDLE_CODE(sl_drx_harq_rtt_timer2_r17.pack(bref));
  }
  HANDLE_CODE(sl_drx_retx_timer_r17.pack(bref));
  HANDLE_CODE(sl_drx_cycle_start_offset_r17.pack(bref));
  HANDLE_CODE(pack_integer(bref, sl_drx_slot_offset, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drx_cfg_uc_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_drx_harq_rtt_timer1_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_drx_harq_rtt_timer2_r17_present, 1));

  HANDLE_CODE(sl_drx_on_dur_timer_r17.unpack(bref));
  HANDLE_CODE(sl_drx_inactivity_timer_r17.unpack(bref));
  if (sl_drx_harq_rtt_timer1_r17_present) {
    HANDLE_CODE(sl_drx_harq_rtt_timer1_r17.unpack(bref));
  }
  if (sl_drx_harq_rtt_timer2_r17_present) {
    HANDLE_CODE(sl_drx_harq_rtt_timer2_r17.unpack(bref));
  }
  HANDLE_CODE(sl_drx_retx_timer_r17.unpack(bref));
  HANDLE_CODE(sl_drx_cycle_start_offset_r17.unpack(bref));
  HANDLE_CODE(unpack_integer(sl_drx_slot_offset, bref, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
void sl_drx_cfg_uc_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sl-drx-onDurationTimer-r17");
  sl_drx_on_dur_timer_r17.to_json(j);
  j.write_str("sl-drx-InactivityTimer-r17", sl_drx_inactivity_timer_r17.to_string());
  if (sl_drx_harq_rtt_timer1_r17_present) {
    j.write_str("sl-drx-HARQ-RTT-Timer1-r17", sl_drx_harq_rtt_timer1_r17.to_string());
  }
  if (sl_drx_harq_rtt_timer2_r17_present) {
    j.write_str("sl-drx-HARQ-RTT-Timer2-r17", sl_drx_harq_rtt_timer2_r17.to_string());
  }
  j.write_str("sl-drx-RetransmissionTimer-r17", sl_drx_retx_timer_r17.to_string());
  j.write_fieldname("sl-drx-CycleStartOffset-r17");
  sl_drx_cycle_start_offset_r17.to_json(j);
  j.write_int("sl-drx-SlotOffset", sl_drx_slot_offset);
  j.end_obj();
}

void sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::destroy_() {}
void sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::sl_drx_on_dur_timer_r17_c_(
    const sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sub_milli_seconds:
      c.init(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.init(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_");
  }
}
sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_&
sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::operator=(const sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sub_milli_seconds:
      c.set(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.set(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_");
  }

  return *this;
}
uint8_t& sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::set_sub_milli_seconds()
{
  set(types::sub_milli_seconds);
  return c.get<uint8_t>();
}
sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::milli_seconds_e_&
sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::set_milli_seconds()
{
  set(types::milli_seconds);
  return c.get<milli_seconds_e_>();
}
void sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sub_milli_seconds:
      j.write_int("subMilliSeconds", c.get<uint8_t>());
      break;
    case types::milli_seconds:
      j.write_str("milliSeconds", c.get<milli_seconds_e_>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::milli_seconds_opts::to_string() const
{
  static const char* names[] = {"ms1",    "ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms8",    "ms10",
                                "ms20",   "ms30",   "ms40",   "ms50",   "ms60",   "ms80",   "ms100",  "ms200",
                                "ms300",  "ms400",  "ms500",  "ms600",  "ms800",  "ms1000", "ms1200", "ms1600",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::milli_seconds_e_");
}
uint16_t sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::milli_seconds_opts::to_number() const
{
  static const uint16_t numbers[] = {1,  2,  3,   4,   5,   6,   8,   10,  20,  30,   40,   50,
                                     60, 80, 100, 200, 300, 400, 500, 600, 800, 1000, 1200, 1600};
  return map_enum_number(numbers, 24, value, "sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::milli_seconds_e_");
}

const char* sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"subMilliSeconds", "milliSeconds"};
  return convert_enum_idx(names, 2, value, "sl_drx_cfg_uc_r17_s::sl_drx_on_dur_timer_r17_c_::types");
}

const char* sl_drx_cfg_uc_r17_s::sl_drx_inactivity_timer_r17_opts::to_string() const
{
  static const char* names[] = {"ms0",    "ms1",    "ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms8",
                                "ms10",   "ms20",   "ms30",   "ms40",   "ms50",   "ms60",   "ms80",   "ms100",
                                "ms200",  "ms300",  "ms500",  "ms750",  "ms1280", "ms1920", "ms2560", "spare9",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "sl_drx_cfg_uc_r17_s::sl_drx_inactivity_timer_r17_e_");
}
uint16_t sl_drx_cfg_uc_r17_s::sl_drx_inactivity_timer_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {0,  1,  2,  3,   4,   5,   6,   8,   10,   20,   30,  40,
                                     50, 60, 80, 100, 200, 300, 500, 750, 1280, 1920, 2560};
  return map_enum_number(numbers, 23, value, "sl_drx_cfg_uc_r17_s::sl_drx_inactivity_timer_r17_e_");
}

const char* sl_drx_cfg_uc_r17_s::sl_drx_harq_rtt_timer1_r17_opts::to_string() const
{
  static const char* names[] = {"sl0", "sl1", "sl2", "sl4", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "sl_drx_cfg_uc_r17_s::sl_drx_harq_rtt_timer1_r17_e_");
}
uint8_t sl_drx_cfg_uc_r17_s::sl_drx_harq_rtt_timer1_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 4};
  return map_enum_number(numbers, 4, value, "sl_drx_cfg_uc_r17_s::sl_drx_harq_rtt_timer1_r17_e_");
}

const char* sl_drx_cfg_uc_r17_s::sl_drx_harq_rtt_timer2_r17_opts::to_string() const
{
  static const char* names[] = {"sl0", "sl1", "sl2", "sl4", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "sl_drx_cfg_uc_r17_s::sl_drx_harq_rtt_timer2_r17_e_");
}
uint8_t sl_drx_cfg_uc_r17_s::sl_drx_harq_rtt_timer2_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 4};
  return map_enum_number(numbers, 4, value, "sl_drx_cfg_uc_r17_s::sl_drx_harq_rtt_timer2_r17_e_");
}

const char* sl_drx_cfg_uc_r17_s::sl_drx_retx_timer_r17_opts::to_string() const
{
  static const char* names[] = {"sl0",    "sl1",     "sl2",     "sl4",     "sl6",     "sl8",     "sl16",    "sl24",
                                "sl33",   "sl40",    "sl64",    "sl80",    "sl96",    "sl112",   "sl128",   "sl160",
                                "sl320",  "spare15", "spare14", "spare13", "spare12", "spare11", "spare10", "spare9",
                                "spare8", "spare7",  "spare6",  "spare5",  "spare4",  "spare3",  "spare2",  "spare1"};
  return convert_enum_idx(names, 32, value, "sl_drx_cfg_uc_r17_s::sl_drx_retx_timer_r17_e_");
}
uint16_t sl_drx_cfg_uc_r17_s::sl_drx_retx_timer_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 1, 2, 4, 6, 8, 16, 24, 33, 40, 64, 80, 96, 112, 128, 160, 320};
  return map_enum_number(numbers, 17, value, "sl_drx_cfg_uc_r17_s::sl_drx_retx_timer_r17_e_");
}

void sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::destroy_() {}
void sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::sl_drx_cycle_start_offset_r17_c_(
    const sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ms10:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms32:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms40:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms60:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms64:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms70:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms80:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms128:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms160:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms256:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms320:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms512:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms640:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms1024:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms1280:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms2048:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms2560:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms5120:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms10240:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_");
  }
}
sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::operator=(
    const sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ms10:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms32:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms40:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms60:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms64:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms70:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms80:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms128:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms160:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms256:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms320:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms512:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms640:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms1024:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms1280:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms2048:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms2560:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms5120:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms10240:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_");
  }

  return *this;
}
uint8_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms10()
{
  set(types::ms10);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms20()
{
  set(types::ms20);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms32()
{
  set(types::ms32);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms40()
{
  set(types::ms40);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms60()
{
  set(types::ms60);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms64()
{
  set(types::ms64);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms70()
{
  set(types::ms70);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms80()
{
  set(types::ms80);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms128()
{
  set(types::ms128);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms160()
{
  set(types::ms160);
  return c.get<uint8_t>();
}
uint16_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms256()
{
  set(types::ms256);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms320()
{
  set(types::ms320);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms512()
{
  set(types::ms512);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms640()
{
  set(types::ms640);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms1024()
{
  set(types::ms1024);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms1280()
{
  set(types::ms1280);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms2048()
{
  set(types::ms2048);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms2560()
{
  set(types::ms2560);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms5120()
{
  set(types::ms5120);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms10240()
{
  set(types::ms10240);
  return c.get<uint16_t>();
}
void sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ms10:
      j.write_int("ms10", c.get<uint8_t>());
      break;
    case types::ms20:
      j.write_int("ms20", c.get<uint8_t>());
      break;
    case types::ms32:
      j.write_int("ms32", c.get<uint8_t>());
      break;
    case types::ms40:
      j.write_int("ms40", c.get<uint8_t>());
      break;
    case types::ms60:
      j.write_int("ms60", c.get<uint8_t>());
      break;
    case types::ms64:
      j.write_int("ms64", c.get<uint8_t>());
      break;
    case types::ms70:
      j.write_int("ms70", c.get<uint8_t>());
      break;
    case types::ms80:
      j.write_int("ms80", c.get<uint8_t>());
      break;
    case types::ms128:
      j.write_int("ms128", c.get<uint8_t>());
      break;
    case types::ms160:
      j.write_int("ms160", c.get<uint8_t>());
      break;
    case types::ms256:
      j.write_int("ms256", c.get<uint16_t>());
      break;
    case types::ms320:
      j.write_int("ms320", c.get<uint16_t>());
      break;
    case types::ms512:
      j.write_int("ms512", c.get<uint16_t>());
      break;
    case types::ms640:
      j.write_int("ms640", c.get<uint16_t>());
      break;
    case types::ms1024:
      j.write_int("ms1024", c.get<uint16_t>());
      break;
    case types::ms1280:
      j.write_int("ms1280", c.get<uint16_t>());
      break;
    case types::ms2048:
      j.write_int("ms2048", c.get<uint16_t>());
      break;
    case types::ms2560:
      j.write_int("ms2560", c.get<uint16_t>());
      break;
    case types::ms5120:
      j.write_int("ms5120", c.get<uint16_t>());
      break;
    case types::ms10240:
      j.write_int("ms10240", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ms10:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)9u));
      break;
    case types::ms20:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms32:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms40:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms60:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)59u));
      break;
    case types::ms64:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)63u));
      break;
    case types::ms70:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)69u));
      break;
    case types::ms80:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms128:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    case types::ms160:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms256:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u));
      break;
    case types::ms320:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms512:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)511u));
      break;
    case types::ms640:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms1024:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1023u));
      break;
    case types::ms1280:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms2048:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)2047u));
      break;
    case types::ms2560:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)2559u));
      break;
    case types::ms5120:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)5119u));
      break;
    case types::ms10240:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)10239u));
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ms10:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)9u));
      break;
    case types::ms20:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms32:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms40:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms60:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)59u));
      break;
    case types::ms64:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)63u));
      break;
    case types::ms70:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)69u));
      break;
    case types::ms80:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms128:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    case types::ms160:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms256:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u));
      break;
    case types::ms320:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms512:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)511u));
      break;
    case types::ms640:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms1024:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1023u));
      break;
    case types::ms1280:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms2048:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)2047u));
      break;
    case types::ms2560:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)2559u));
      break;
    case types::ms5120:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)5119u));
      break;
    case types::ms10240:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)10239u));
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"ms10",   "ms20",   "ms32",   "ms40",   "ms60",   "ms64",   "ms70",
                                "ms80",   "ms128",  "ms160",  "ms256",  "ms320",  "ms512",  "ms640",
                                "ms1024", "ms1280", "ms2048", "ms2560", "ms5120", "ms10240"};
  return convert_enum_idx(names, 20, value, "sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::types");
}
uint16_t sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {10,  20,  32,  40,  60,   64,   70,   80,   128,  160,
                                     256, 320, 512, 640, 1024, 1280, 2048, 2560, 5120, 10240};
  return map_enum_number(numbers, 20, value, "sl_drx_cfg_uc_r17_s::sl_drx_cycle_start_offset_r17_c_::types");
}

// SL-DRX-GC-BC-QoS-r17 ::= SEQUENCE
SRSASN_CODE sl_drx_gc_bc_qos_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_drx_gc_bc_mapped_qos_flow_list_r17.size() > 0, 1));

  if (sl_drx_gc_bc_mapped_qos_flow_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_drx_gc_bc_mapped_qos_flow_list_r17, 1, 2048));
  }
  HANDLE_CODE(sl_drx_gc_bc_on_dur_timer_r17.pack(bref));
  HANDLE_CODE(sl_drx_gc_inactivity_timer_r17.pack(bref));
  HANDLE_CODE(sl_drx_gc_bc_cycle_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drx_gc_bc_qos_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sl_drx_gc_bc_mapped_qos_flow_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_drx_gc_bc_mapped_qos_flow_list_r17_present, 1));

  if (sl_drx_gc_bc_mapped_qos_flow_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_drx_gc_bc_mapped_qos_flow_list_r17, bref, 1, 2048));
  }
  HANDLE_CODE(sl_drx_gc_bc_on_dur_timer_r17.unpack(bref));
  HANDLE_CODE(sl_drx_gc_inactivity_timer_r17.unpack(bref));
  HANDLE_CODE(sl_drx_gc_bc_cycle_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_drx_gc_bc_qos_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_drx_gc_bc_mapped_qos_flow_list_r17.size() > 0) {
    j.start_array("sl-DRX-GC-BC-MappedQoS-FlowList-r17");
    for (const auto& e1 : sl_drx_gc_bc_mapped_qos_flow_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_fieldname("sl-DRX-GC-BC-OnDurationTimer-r17");
  sl_drx_gc_bc_on_dur_timer_r17.to_json(j);
  j.write_str("sl-DRX-GC-InactivityTimer-r17", sl_drx_gc_inactivity_timer_r17.to_string());
  j.write_str("sl-DRX-GC-BC-Cycle-r17", sl_drx_gc_bc_cycle_r17.to_string());
  j.end_obj();
}

void sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::destroy_() {}
void sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::sl_drx_gc_bc_on_dur_timer_r17_c_(
    const sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sub_milli_seconds:
      c.init(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.init(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_");
  }
}
sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_&
sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::operator=(
    const sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sub_milli_seconds:
      c.set(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.set(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_");
  }

  return *this;
}
uint8_t& sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::set_sub_milli_seconds()
{
  set(types::sub_milli_seconds);
  return c.get<uint8_t>();
}
sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::milli_seconds_e_&
sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::set_milli_seconds()
{
  set(types::milli_seconds);
  return c.get<milli_seconds_e_>();
}
void sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sub_milli_seconds:
      j.write_int("subMilliSeconds", c.get<uint8_t>());
      break;
    case types::milli_seconds:
      j.write_str("milliSeconds", c.get<milli_seconds_e_>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::milli_seconds_opts::to_string() const
{
  static const char* names[] = {"ms1",    "ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms8",    "ms10",
                                "ms20",   "ms30",   "ms40",   "ms50",   "ms60",   "ms80",   "ms100",  "ms200",
                                "ms300",  "ms400",  "ms500",  "ms600",  "ms800",  "ms1000", "ms1200", "ms1600",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(
      names, 32, value, "sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::milli_seconds_e_");
}
uint16_t sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::milli_seconds_opts::to_number() const
{
  static const uint16_t numbers[] = {1,  2,  3,   4,   5,   6,   8,   10,  20,  30,   40,   50,
                                     60, 80, 100, 200, 300, 400, 500, 600, 800, 1000, 1200, 1600};
  return map_enum_number(
      numbers, 24, value, "sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::milli_seconds_e_");
}

const char* sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"subMilliSeconds", "milliSeconds"};
  return convert_enum_idx(names, 2, value, "sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_on_dur_timer_r17_c_::types");
}

const char* sl_drx_gc_bc_qos_r17_s::sl_drx_gc_inactivity_timer_r17_opts::to_string() const
{
  static const char* names[] = {"ms0",    "ms1",    "ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms8",
                                "ms10",   "ms20",   "ms30",   "ms40",   "ms50",   "ms60",   "ms80",   "ms100",
                                "ms200",  "ms300",  "ms500",  "ms750",  "ms1280", "ms1920", "ms2560", "spare9",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "sl_drx_gc_bc_qos_r17_s::sl_drx_gc_inactivity_timer_r17_e_");
}
uint16_t sl_drx_gc_bc_qos_r17_s::sl_drx_gc_inactivity_timer_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {0,  1,  2,  3,   4,   5,   6,   8,   10,   20,   30,  40,
                                     50, 60, 80, 100, 200, 300, 500, 750, 1280, 1920, 2560};
  return map_enum_number(numbers, 23, value, "sl_drx_gc_bc_qos_r17_s::sl_drx_gc_inactivity_timer_r17_e_");
}

const char* sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_cycle_r17_opts::to_string() const
{
  static const char* names[] = {"ms10",   "ms20",   "ms32",   "ms40",    "ms60",    "ms64",    "ms70",    "ms80",
                                "ms128",  "ms160",  "ms256",  "ms320",   "ms512",   "ms640",   "ms1024",  "ms1280",
                                "ms2048", "ms2560", "ms5120", "ms10240", "spare12", "spare11", "spare10", "spare9",
                                "spare8", "spare7", "spare6", "spare5",  "spare4",  "spare3",  "spare2",  "spare1"};
  return convert_enum_idx(names, 32, value, "sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_cycle_r17_e_");
}
uint16_t sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_cycle_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {10,  20,  32,  40,  60,   64,   70,   80,   128,  160,
                                     256, 320, 512, 640, 1024, 1280, 2048, 2560, 5120, 10240};
  return map_enum_number(numbers, 20, value, "sl_drx_gc_bc_qos_r17_s::sl_drx_gc_bc_cycle_r17_e_");
}

// SL-DRX-GC-Generic-r17 ::= SEQUENCE
SRSASN_CODE sl_drx_gc_generic_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_drx_gc_harq_rtt_timer1_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_drx_gc_harq_rtt_timer2_r17_present, 1));

  if (sl_drx_gc_harq_rtt_timer1_r17_present) {
    HANDLE_CODE(sl_drx_gc_harq_rtt_timer1_r17.pack(bref));
  }
  if (sl_drx_gc_harq_rtt_timer2_r17_present) {
    HANDLE_CODE(sl_drx_gc_harq_rtt_timer2_r17.pack(bref));
  }
  HANDLE_CODE(sl_drx_gc_retx_timer_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drx_gc_generic_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_drx_gc_harq_rtt_timer1_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_drx_gc_harq_rtt_timer2_r17_present, 1));

  if (sl_drx_gc_harq_rtt_timer1_r17_present) {
    HANDLE_CODE(sl_drx_gc_harq_rtt_timer1_r17.unpack(bref));
  }
  if (sl_drx_gc_harq_rtt_timer2_r17_present) {
    HANDLE_CODE(sl_drx_gc_harq_rtt_timer2_r17.unpack(bref));
  }
  HANDLE_CODE(sl_drx_gc_retx_timer_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_drx_gc_generic_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_drx_gc_harq_rtt_timer1_r17_present) {
    j.write_str("sl-DRX-GC-HARQ-RTT-Timer1-r17", sl_drx_gc_harq_rtt_timer1_r17.to_string());
  }
  if (sl_drx_gc_harq_rtt_timer2_r17_present) {
    j.write_str("sl-DRX-GC-HARQ-RTT-Timer2-r17", sl_drx_gc_harq_rtt_timer2_r17.to_string());
  }
  j.write_str("sl-DRX-GC-RetransmissionTimer-r17", sl_drx_gc_retx_timer_r17.to_string());
  j.end_obj();
}

const char* sl_drx_gc_generic_r17_s::sl_drx_gc_harq_rtt_timer1_r17_opts::to_string() const
{
  static const char* names[] = {"sl0", "sl1", "sl2", "sl4", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "sl_drx_gc_generic_r17_s::sl_drx_gc_harq_rtt_timer1_r17_e_");
}
uint8_t sl_drx_gc_generic_r17_s::sl_drx_gc_harq_rtt_timer1_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 4};
  return map_enum_number(numbers, 4, value, "sl_drx_gc_generic_r17_s::sl_drx_gc_harq_rtt_timer1_r17_e_");
}

const char* sl_drx_gc_generic_r17_s::sl_drx_gc_harq_rtt_timer2_r17_opts::to_string() const
{
  static const char* names[] = {"sl0", "sl1", "sl2", "sl4", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "sl_drx_gc_generic_r17_s::sl_drx_gc_harq_rtt_timer2_r17_e_");
}
uint8_t sl_drx_gc_generic_r17_s::sl_drx_gc_harq_rtt_timer2_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 4};
  return map_enum_number(numbers, 4, value, "sl_drx_gc_generic_r17_s::sl_drx_gc_harq_rtt_timer2_r17_e_");
}

const char* sl_drx_gc_generic_r17_s::sl_drx_gc_retx_timer_r17_opts::to_string() const
{
  static const char* names[] = {"sl0",    "sl1",     "sl2",     "sl4",     "sl6",     "sl8",     "sl16",    "sl24",
                                "sl33",   "sl40",    "sl64",    "sl80",    "sl96",    "sl112",   "sl128",   "sl160",
                                "sl320",  "spare15", "spare14", "spare13", "spare12", "spare11", "spare10", "spare9",
                                "spare8", "spare7",  "spare6",  "spare5",  "spare4",  "spare3",  "spare2",  "spare1"};
  return convert_enum_idx(names, 32, value, "sl_drx_gc_generic_r17_s::sl_drx_gc_retx_timer_r17_e_");
}
uint16_t sl_drx_gc_generic_r17_s::sl_drx_gc_retx_timer_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 1, 2, 4, 6, 8, 16, 24, 33, 40, 64, 80, 96, 112, 128, 160, 320};
  return map_enum_number(numbers, 17, value, "sl_drx_gc_generic_r17_s::sl_drx_gc_retx_timer_r17_e_");
}

// SL-MeasIdInfo-r16 ::= SEQUENCE
SRSASN_CODE sl_meas_id_info_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, sl_meas_id_r16, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, sl_meas_obj_id_r16, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, sl_report_cfg_id_r16, (uint8_t)1u, (uint8_t)64u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_meas_id_info_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(sl_meas_id_r16, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(sl_meas_obj_id_r16, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(sl_report_cfg_id_r16, bref, (uint8_t)1u, (uint8_t)64u));

  return SRSASN_SUCCESS;
}
void sl_meas_id_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-MeasId-r16", sl_meas_id_r16);
  j.write_int("sl-MeasObjectId-r16", sl_meas_obj_id_r16);
  j.write_int("sl-ReportConfigId-r16", sl_report_cfg_id_r16);
  j.end_obj();
}

// SL-MeasObjectInfo-r16 ::= SEQUENCE
SRSASN_CODE sl_meas_obj_info_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, sl_meas_obj_id_r16, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(sl_meas_obj_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_meas_obj_info_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(sl_meas_obj_id_r16, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(sl_meas_obj_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_meas_obj_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-MeasObjectId-r16", sl_meas_obj_id_r16);
  j.write_fieldname("sl-MeasObject-r16");
  sl_meas_obj_r16.to_json(j);
  j.end_obj();
}

// SL-PSSCH-TxConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_pssch_tx_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_type_tx_sync_r16_present, 1));

  if (sl_type_tx_sync_r16_present) {
    HANDLE_CODE(sl_type_tx_sync_r16.pack(bref));
  }
  HANDLE_CODE(sl_thres_ue_speed_r16.pack(bref));
  HANDLE_CODE(sl_params_above_thres_r16.pack(bref));
  HANDLE_CODE(sl_params_below_thres_r16.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sl_params_above_thres_v1650.is_present();
    group_flags[0] |= sl_params_below_thres_v1650.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_params_above_thres_v1650.is_present(), 1));
      HANDLE_CODE(bref.pack(sl_params_below_thres_v1650.is_present(), 1));
      if (sl_params_above_thres_v1650.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *sl_params_above_thres_v1650, 1, 3));
      }
      if (sl_params_below_thres_v1650.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *sl_params_below_thres_v1650, 1, 3));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_pssch_tx_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_type_tx_sync_r16_present, 1));

  if (sl_type_tx_sync_r16_present) {
    HANDLE_CODE(sl_type_tx_sync_r16.unpack(bref));
  }
  HANDLE_CODE(sl_thres_ue_speed_r16.unpack(bref));
  HANDLE_CODE(sl_params_above_thres_r16.unpack(bref));
  HANDLE_CODE(sl_params_below_thres_r16.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sl_params_above_thres_v1650, bref);
      unpack_presence_flag(sl_params_below_thres_v1650, bref);
      if (sl_params_above_thres_v1650.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*sl_params_above_thres_v1650, bref, 1, 3));
      }
      if (sl_params_below_thres_v1650.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*sl_params_below_thres_v1650, bref, 1, 3));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sl_pssch_tx_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_type_tx_sync_r16_present) {
    j.write_str("sl-TypeTxSync-r16", sl_type_tx_sync_r16.to_string());
  }
  j.write_str("sl-ThresUE-Speed-r16", sl_thres_ue_speed_r16.to_string());
  j.write_fieldname("sl-ParametersAboveThres-r16");
  sl_params_above_thres_r16.to_json(j);
  j.write_fieldname("sl-ParametersBelowThres-r16");
  sl_params_below_thres_r16.to_json(j);
  if (ext) {
    if (sl_params_above_thres_v1650.is_present()) {
      j.start_array("sl-ParametersAboveThres-v1650");
      for (const auto& e1 : *sl_params_above_thres_v1650) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (sl_params_below_thres_v1650.is_present()) {
      j.start_array("sl-ParametersBelowThres-v1650");
      for (const auto& e1 : *sl_params_below_thres_v1650) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

const char* sl_pssch_tx_cfg_r16_s::sl_thres_ue_speed_r16_opts::to_string() const
{
  static const char* names[] = {"kmph60", "kmph80", "kmph100", "kmph120", "kmph140", "kmph160", "kmph180", "kmph200"};
  return convert_enum_idx(names, 8, value, "sl_pssch_tx_cfg_r16_s::sl_thres_ue_speed_r16_e_");
}
uint8_t sl_pssch_tx_cfg_r16_s::sl_thres_ue_speed_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {60, 80, 100, 120, 140, 160, 180, 200};
  return map_enum_number(numbers, 8, value, "sl_pssch_tx_cfg_r16_s::sl_thres_ue_speed_r16_e_");
}

// SL-ReportConfigInfo-r16 ::= SEQUENCE
SRSASN_CODE sl_report_cfg_info_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, sl_report_cfg_id_r16, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(sl_report_cfg_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_report_cfg_info_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(sl_report_cfg_id_r16, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(sl_report_cfg_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_report_cfg_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-ReportConfigId-r16", sl_report_cfg_id_r16);
  j.write_fieldname("sl-ReportConfig-r16");
  sl_report_cfg_r16.to_json(j);
  j.end_obj();
}

// SL-SyncConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_sync_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_sync_ref_min_hyst_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_sync_ref_diff_hyst_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_filt_coef_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ssb_time_alloc1_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ssb_time_alloc2_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ssb_time_alloc3_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_s_si_d_r16_present, 1));
  HANDLE_CODE(bref.pack(gnss_sync_r16_present, 1));

  if (sl_sync_ref_min_hyst_r16_present) {
    HANDLE_CODE(sl_sync_ref_min_hyst_r16.pack(bref));
  }
  if (sl_sync_ref_diff_hyst_r16_present) {
    HANDLE_CODE(sl_sync_ref_diff_hyst_r16.pack(bref));
  }
  if (sl_filt_coef_r16_present) {
    HANDLE_CODE(sl_filt_coef_r16.pack(bref));
  }
  if (sl_ssb_time_alloc1_r16_present) {
    HANDLE_CODE(sl_ssb_time_alloc1_r16.pack(bref));
  }
  if (sl_ssb_time_alloc2_r16_present) {
    HANDLE_CODE(sl_ssb_time_alloc2_r16.pack(bref));
  }
  if (sl_ssb_time_alloc3_r16_present) {
    HANDLE_CODE(sl_ssb_time_alloc3_r16.pack(bref));
  }
  if (sl_s_si_d_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_s_si_d_r16, (uint16_t)0u, (uint16_t)671u));
  }
  HANDLE_CODE(bref.pack(tx_params_r16.sync_tx_thresh_ic_r16_present, 1));
  HANDLE_CODE(bref.pack(tx_params_r16.sync_tx_thresh_oo_c_r16_present, 1));
  HANDLE_CODE(bref.pack(tx_params_r16.sync_info_reserved_r16_present, 1));
  if (tx_params_r16.sync_tx_thresh_ic_r16_present) {
    HANDLE_CODE(pack_integer(bref, tx_params_r16.sync_tx_thresh_ic_r16, (uint8_t)0u, (uint8_t)13u));
  }
  if (tx_params_r16.sync_tx_thresh_oo_c_r16_present) {
    HANDLE_CODE(pack_integer(bref, tx_params_r16.sync_tx_thresh_oo_c_r16, (uint8_t)0u, (uint8_t)13u));
  }
  if (tx_params_r16.sync_info_reserved_r16_present) {
    HANDLE_CODE(tx_params_r16.sync_info_reserved_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_sync_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_sync_ref_min_hyst_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_sync_ref_diff_hyst_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_filt_coef_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ssb_time_alloc1_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ssb_time_alloc2_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ssb_time_alloc3_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_s_si_d_r16_present, 1));
  HANDLE_CODE(bref.unpack(gnss_sync_r16_present, 1));

  if (sl_sync_ref_min_hyst_r16_present) {
    HANDLE_CODE(sl_sync_ref_min_hyst_r16.unpack(bref));
  }
  if (sl_sync_ref_diff_hyst_r16_present) {
    HANDLE_CODE(sl_sync_ref_diff_hyst_r16.unpack(bref));
  }
  if (sl_filt_coef_r16_present) {
    HANDLE_CODE(sl_filt_coef_r16.unpack(bref));
  }
  if (sl_ssb_time_alloc1_r16_present) {
    HANDLE_CODE(sl_ssb_time_alloc1_r16.unpack(bref));
  }
  if (sl_ssb_time_alloc2_r16_present) {
    HANDLE_CODE(sl_ssb_time_alloc2_r16.unpack(bref));
  }
  if (sl_ssb_time_alloc3_r16_present) {
    HANDLE_CODE(sl_ssb_time_alloc3_r16.unpack(bref));
  }
  if (sl_s_si_d_r16_present) {
    HANDLE_CODE(unpack_integer(sl_s_si_d_r16, bref, (uint16_t)0u, (uint16_t)671u));
  }
  HANDLE_CODE(bref.unpack(tx_params_r16.sync_tx_thresh_ic_r16_present, 1));
  HANDLE_CODE(bref.unpack(tx_params_r16.sync_tx_thresh_oo_c_r16_present, 1));
  HANDLE_CODE(bref.unpack(tx_params_r16.sync_info_reserved_r16_present, 1));
  if (tx_params_r16.sync_tx_thresh_ic_r16_present) {
    HANDLE_CODE(unpack_integer(tx_params_r16.sync_tx_thresh_ic_r16, bref, (uint8_t)0u, (uint8_t)13u));
  }
  if (tx_params_r16.sync_tx_thresh_oo_c_r16_present) {
    HANDLE_CODE(unpack_integer(tx_params_r16.sync_tx_thresh_oo_c_r16, bref, (uint8_t)0u, (uint8_t)13u));
  }
  if (tx_params_r16.sync_info_reserved_r16_present) {
    HANDLE_CODE(tx_params_r16.sync_info_reserved_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_sync_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_sync_ref_min_hyst_r16_present) {
    j.write_str("sl-SyncRefMinHyst-r16", sl_sync_ref_min_hyst_r16.to_string());
  }
  if (sl_sync_ref_diff_hyst_r16_present) {
    j.write_str("sl-SyncRefDiffHyst-r16", sl_sync_ref_diff_hyst_r16.to_string());
  }
  if (sl_filt_coef_r16_present) {
    j.write_str("sl-filterCoefficient-r16", sl_filt_coef_r16.to_string());
  }
  if (sl_ssb_time_alloc1_r16_present) {
    j.write_fieldname("sl-SSB-TimeAllocation1-r16");
    sl_ssb_time_alloc1_r16.to_json(j);
  }
  if (sl_ssb_time_alloc2_r16_present) {
    j.write_fieldname("sl-SSB-TimeAllocation2-r16");
    sl_ssb_time_alloc2_r16.to_json(j);
  }
  if (sl_ssb_time_alloc3_r16_present) {
    j.write_fieldname("sl-SSB-TimeAllocation3-r16");
    sl_ssb_time_alloc3_r16.to_json(j);
  }
  if (sl_s_si_d_r16_present) {
    j.write_int("sl-SSID-r16", sl_s_si_d_r16);
  }
  j.write_fieldname("txParameters-r16");
  j.start_obj();
  if (tx_params_r16.sync_tx_thresh_ic_r16_present) {
    j.write_int("syncTxThreshIC-r16", tx_params_r16.sync_tx_thresh_ic_r16);
  }
  if (tx_params_r16.sync_tx_thresh_oo_c_r16_present) {
    j.write_int("syncTxThreshOoC-r16", tx_params_r16.sync_tx_thresh_oo_c_r16);
  }
  if (tx_params_r16.sync_info_reserved_r16_present) {
    j.write_str("syncInfoReserved-r16", tx_params_r16.sync_info_reserved_r16.to_string());
  }
  j.end_obj();
  if (gnss_sync_r16_present) {
    j.write_str("gnss-Sync-r16", "true");
  }
  j.end_obj();
}

const char* sl_sync_cfg_r16_s::sl_sync_ref_min_hyst_r16_opts::to_string() const
{
  static const char* names[] = {"dB0", "dB3", "dB6", "dB9", "dB12"};
  return convert_enum_idx(names, 5, value, "sl_sync_cfg_r16_s::sl_sync_ref_min_hyst_r16_e_");
}
uint8_t sl_sync_cfg_r16_s::sl_sync_ref_min_hyst_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 3, 6, 9, 12};
  return map_enum_number(numbers, 5, value, "sl_sync_cfg_r16_s::sl_sync_ref_min_hyst_r16_e_");
}

const char* sl_sync_cfg_r16_s::sl_sync_ref_diff_hyst_r16_opts::to_string() const
{
  static const char* names[] = {"dB0", "dB3", "dB6", "dB9", "dB12", "dBinf"};
  return convert_enum_idx(names, 6, value, "sl_sync_cfg_r16_s::sl_sync_ref_diff_hyst_r16_e_");
}
uint8_t sl_sync_cfg_r16_s::sl_sync_ref_diff_hyst_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 3, 6, 9, 12};
  return map_enum_number(numbers, 5, value, "sl_sync_cfg_r16_s::sl_sync_ref_diff_hyst_r16_e_");
}

// SN-FieldLengthAM ::= ENUMERATED
const char* sn_field_len_am_opts::to_string() const
{
  static const char* names[] = {"size12", "size18"};
  return convert_enum_idx(names, 2, value, "sn_field_len_am_e");
}
uint8_t sn_field_len_am_opts::to_number() const
{
  static const uint8_t numbers[] = {12, 18};
  return map_enum_number(numbers, 2, value, "sn_field_len_am_e");
}

// SN-FieldLengthUM ::= ENUMERATED
const char* sn_field_len_um_opts::to_string() const
{
  static const char* names[] = {"size6", "size12"};
  return convert_enum_idx(names, 2, value, "sn_field_len_um_e");
}
uint8_t sn_field_len_um_opts::to_number() const
{
  static const uint8_t numbers[] = {6, 12};
  return map_enum_number(numbers, 2, value, "sn_field_len_um_e");
}

// T-PollRetransmit ::= ENUMERATED
const char* t_poll_retx_opts::to_string() const
{
  static const char* names[] = {
      "ms5",       "ms10",      "ms15",      "ms20",  "ms25",  "ms30",  "ms35",   "ms40",   "ms45",   "ms50",
      "ms55",      "ms60",      "ms65",      "ms70",  "ms75",  "ms80",  "ms85",   "ms90",   "ms95",   "ms100",
      "ms105",     "ms110",     "ms115",     "ms120", "ms125", "ms130", "ms135",  "ms140",  "ms145",  "ms150",
      "ms155",     "ms160",     "ms165",     "ms170", "ms175", "ms180", "ms185",  "ms190",  "ms195",  "ms200",
      "ms205",     "ms210",     "ms215",     "ms220", "ms225", "ms230", "ms235",  "ms240",  "ms245",  "ms250",
      "ms300",     "ms350",     "ms400",     "ms450", "ms500", "ms800", "ms1000", "ms2000", "ms4000", "ms1-v1610",
      "ms2-v1610", "ms3-v1610", "ms4-v1610", "spare1"};
  return convert_enum_idx(names, 64, value, "t_poll_retx_e");
}
uint16_t t_poll_retx_opts::to_number() const
{
  static const uint16_t numbers[] = {5,   10,  15,  20,  25,  30,  35,  40,  45,   50,   55,   60,  65,  70,  75,  80,
                                     85,  90,  95,  100, 105, 110, 115, 120, 125,  130,  135,  140, 145, 150, 155, 160,
                                     165, 170, 175, 180, 185, 190, 195, 200, 205,  210,  215,  220, 225, 230, 235, 240,
                                     245, 250, 300, 350, 400, 450, 500, 800, 1000, 2000, 4000, 1,   2,   3,   4};
  return map_enum_number(numbers, 63, value, "t_poll_retx_e");
}

// DiscardTimerExt-r16 ::= ENUMERATED
const char* discard_timer_ext_r16_opts::to_string() const
{
  static const char* names[] = {"ms0dot5", "ms1", "ms2", "ms4", "ms6", "ms8", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "discard_timer_ext_r16_e");
}
float discard_timer_ext_r16_opts::to_number() const
{
  static const float numbers[] = {0.5, 1.0, 2.0, 4.0, 6.0, 8.0};
  return map_enum_number(numbers, 6, value, "discard_timer_ext_r16_e");
}
const char* discard_timer_ext_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0.5", "1", "2", "4", "6", "8"};
  return convert_enum_idx(number_strs, 8, value, "discard_timer_ext_r16_e");
}

// DiscardTimerExt2-r17 ::= ENUMERATED
const char* discard_timer_ext2_r17_opts::to_string() const
{
  static const char* names[] = {"ms2000", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "discard_timer_ext2_r17_e");
}
uint16_t discard_timer_ext2_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {2000};
  return map_enum_number(numbers, 1, value, "discard_timer_ext2_r17_e");
}

// EthernetHeaderCompression-r16 ::= SEQUENCE
SRSASN_CODE ethernet_hdr_compress_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ehc_dl_r16_present, 1));
  HANDLE_CODE(bref.pack(ehc_ul_r16_present, 1));

  bref.pack(ehc_common_r16.ext, 1);
  HANDLE_CODE(ehc_common_r16.ehc_c_id_len_r16.pack(bref));
  if (ehc_dl_r16_present) {
    bref.pack(ehc_dl_r16.ext, 1);
    HANDLE_CODE(bref.pack(ehc_dl_r16.drb_continue_ehc_dl_r16_present, 1));
  }
  if (ehc_ul_r16_present) {
    bref.pack(ehc_ul_r16.ext, 1);
    HANDLE_CODE(bref.pack(ehc_ul_r16.drb_continue_ehc_ul_r16_present, 1));
    HANDLE_CODE(pack_integer(bref, ehc_ul_r16.max_c_id_ehc_ul_r16, (uint16_t)1u, (uint16_t)32767u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ethernet_hdr_compress_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ehc_dl_r16_present, 1));
  HANDLE_CODE(bref.unpack(ehc_ul_r16_present, 1));

  bref.unpack(ehc_common_r16.ext, 1);
  HANDLE_CODE(ehc_common_r16.ehc_c_id_len_r16.unpack(bref));
  if (ehc_dl_r16_present) {
    bref.unpack(ehc_dl_r16.ext, 1);
    HANDLE_CODE(bref.unpack(ehc_dl_r16.drb_continue_ehc_dl_r16_present, 1));
  }
  if (ehc_ul_r16_present) {
    bref.unpack(ehc_ul_r16.ext, 1);
    HANDLE_CODE(bref.unpack(ehc_ul_r16.drb_continue_ehc_ul_r16_present, 1));
    HANDLE_CODE(unpack_integer(ehc_ul_r16.max_c_id_ehc_ul_r16, bref, (uint16_t)1u, (uint16_t)32767u));
  }

  return SRSASN_SUCCESS;
}
void ethernet_hdr_compress_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("ehc-Common-r16");
  j.start_obj();
  j.write_str("ehc-CID-Length-r16", ehc_common_r16.ehc_c_id_len_r16.to_string());
  j.end_obj();
  if (ehc_dl_r16_present) {
    j.write_fieldname("ehc-Downlink-r16");
    j.start_obj();
    if (ehc_dl_r16.drb_continue_ehc_dl_r16_present) {
      j.write_str("drb-ContinueEHC-DL-r16", "true");
    }
    j.end_obj();
  }
  if (ehc_ul_r16_present) {
    j.write_fieldname("ehc-Uplink-r16");
    j.start_obj();
    j.write_int("maxCID-EHC-UL-r16", ehc_ul_r16.max_c_id_ehc_ul_r16);
    if (ehc_ul_r16.drb_continue_ehc_ul_r16_present) {
      j.write_str("drb-ContinueEHC-UL-r16", "true");
    }
    j.end_obj();
  }
  j.end_obj();
}

const char* ethernet_hdr_compress_r16_s::ehc_common_r16_s_::ehc_c_id_len_r16_opts::to_string() const
{
  static const char* names[] = {"bits7", "bits15"};
  return convert_enum_idx(names, 2, value, "ethernet_hdr_compress_r16_s::ehc_common_r16_s_::ehc_c_id_len_r16_e_");
}
uint8_t ethernet_hdr_compress_r16_s::ehc_common_r16_s_::ehc_c_id_len_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {7, 15};
  return map_enum_number(numbers, 2, value, "ethernet_hdr_compress_r16_s::ehc_common_r16_s_::ehc_c_id_len_r16_e_");
}

// MAC-MainConfigSL-r16 ::= SEQUENCE
SRSASN_CODE mac_main_cfg_sl_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_bsr_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_prioritization_thres_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_prioritization_thres_r16_present, 1));

  if (sl_bsr_cfg_r16_present) {
    HANDLE_CODE(sl_bsr_cfg_r16.pack(bref));
  }
  if (ul_prioritization_thres_r16_present) {
    HANDLE_CODE(pack_integer(bref, ul_prioritization_thres_r16, (uint8_t)1u, (uint8_t)16u));
  }
  if (sl_prioritization_thres_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_prioritization_thres_r16, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mac_main_cfg_sl_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_bsr_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_prioritization_thres_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_prioritization_thres_r16_present, 1));

  if (sl_bsr_cfg_r16_present) {
    HANDLE_CODE(sl_bsr_cfg_r16.unpack(bref));
  }
  if (ul_prioritization_thres_r16_present) {
    HANDLE_CODE(unpack_integer(ul_prioritization_thres_r16, bref, (uint8_t)1u, (uint8_t)16u));
  }
  if (sl_prioritization_thres_r16_present) {
    HANDLE_CODE(unpack_integer(sl_prioritization_thres_r16, bref, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
void mac_main_cfg_sl_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_bsr_cfg_r16_present) {
    j.write_fieldname("sl-BSR-Config-r16");
    sl_bsr_cfg_r16.to_json(j);
  }
  if (ul_prioritization_thres_r16_present) {
    j.write_int("ul-PrioritizationThres-r16", ul_prioritization_thres_r16);
  }
  if (sl_prioritization_thres_r16_present) {
    j.write_int("sl-PrioritizationThres-r16", sl_prioritization_thres_r16);
  }
  j.end_obj();
}

// SL-BWP-Config-r16 ::= SEQUENCE
SRSASN_CODE sl_bwp_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_bwp_generic_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_bwp_pool_cfg_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, sl_bwp_id, (uint8_t)0u, (uint8_t)4u));
  if (sl_bwp_generic_r16_present) {
    HANDLE_CODE(sl_bwp_generic_r16.pack(bref));
  }
  if (sl_bwp_pool_cfg_r16_present) {
    HANDLE_CODE(sl_bwp_pool_cfg_r16.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sl_bwp_pool_cfg_ps_r17.is_present();
    group_flags[0] |= sl_bwp_disc_pool_cfg_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_bwp_pool_cfg_ps_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(sl_bwp_disc_pool_cfg_r17.is_present(), 1));
      if (sl_bwp_pool_cfg_ps_r17.is_present()) {
        HANDLE_CODE(sl_bwp_pool_cfg_ps_r17->pack(bref));
      }
      if (sl_bwp_disc_pool_cfg_r17.is_present()) {
        HANDLE_CODE(sl_bwp_disc_pool_cfg_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_bwp_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_bwp_generic_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_bwp_pool_cfg_r16_present, 1));

  HANDLE_CODE(unpack_integer(sl_bwp_id, bref, (uint8_t)0u, (uint8_t)4u));
  if (sl_bwp_generic_r16_present) {
    HANDLE_CODE(sl_bwp_generic_r16.unpack(bref));
  }
  if (sl_bwp_pool_cfg_r16_present) {
    HANDLE_CODE(sl_bwp_pool_cfg_r16.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sl_bwp_pool_cfg_ps_r17, bref);
      unpack_presence_flag(sl_bwp_disc_pool_cfg_r17, bref);
      if (sl_bwp_pool_cfg_ps_r17.is_present()) {
        HANDLE_CODE(sl_bwp_pool_cfg_ps_r17->unpack(bref));
      }
      if (sl_bwp_disc_pool_cfg_r17.is_present()) {
        HANDLE_CODE(sl_bwp_disc_pool_cfg_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sl_bwp_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-BWP-Id", sl_bwp_id);
  if (sl_bwp_generic_r16_present) {
    j.write_fieldname("sl-BWP-Generic-r16");
    sl_bwp_generic_r16.to_json(j);
  }
  if (sl_bwp_pool_cfg_r16_present) {
    j.write_fieldname("sl-BWP-PoolConfig-r16");
    sl_bwp_pool_cfg_r16.to_json(j);
  }
  if (ext) {
    if (sl_bwp_pool_cfg_ps_r17.is_present()) {
      j.write_fieldname("sl-BWP-PoolConfigPS-r17");
      sl_bwp_pool_cfg_ps_r17->to_json(j);
    }
    if (sl_bwp_disc_pool_cfg_r17.is_present()) {
      j.write_fieldname("sl-BWP-DiscPoolConfig-r17");
      sl_bwp_disc_pool_cfg_r17->to_json(j);
    }
  }
  j.end_obj();
}

// SL-CBR-CommonTxConfigList-r16 ::= SEQUENCE
SRSASN_CODE sl_cbr_common_tx_cfg_list_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_cbr_range_cfg_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_cbr_pssch_tx_cfg_list_r16.size() > 0, 1));

  if (sl_cbr_range_cfg_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref,
                                sl_cbr_range_cfg_list_r16,
                                1,
                                8,
                                SeqOfPacker<integer_packer<uint8_t>>(1, 16, integer_packer<uint8_t>(0, 100))));
  }
  if (sl_cbr_pssch_tx_cfg_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_cbr_pssch_tx_cfg_list_r16, 1, 64));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_cbr_common_tx_cfg_list_r16_s::unpack(cbit_ref& bref)
{
  bool sl_cbr_range_cfg_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_cbr_range_cfg_list_r16_present, 1));
  bool sl_cbr_pssch_tx_cfg_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_cbr_pssch_tx_cfg_list_r16_present, 1));

  if (sl_cbr_range_cfg_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_cbr_range_cfg_list_r16,
                                  bref,
                                  1,
                                  8,
                                  SeqOfPacker<integer_packer<uint8_t>>(1, 16, integer_packer<uint8_t>(0, 100))));
  }
  if (sl_cbr_pssch_tx_cfg_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_cbr_pssch_tx_cfg_list_r16, bref, 1, 64));
  }

  return SRSASN_SUCCESS;
}
void sl_cbr_common_tx_cfg_list_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_cbr_range_cfg_list_r16.size() > 0) {
    j.start_array("sl-CBR-RangeConfigList-r16");
    for (const auto& e1 : sl_cbr_range_cfg_list_r16) {
      j.start_array();
      for (const auto& e2 : e1) {
        j.write_int(e2);
      }
      j.end_array();
    }
    j.end_array();
  }
  if (sl_cbr_pssch_tx_cfg_list_r16.size() > 0) {
    j.start_array("sl-CBR-PSSCH-TxConfigList-r16");
    for (const auto& e1 : sl_cbr_pssch_tx_cfg_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// SL-ConfiguredGrantConfigList-r16 ::= SEQUENCE
SRSASN_CODE sl_cfg_grant_cfg_list_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_cfg_grant_cfg_to_release_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_cfg_grant_cfg_to_add_mod_list_r16.size() > 0, 1));

  if (sl_cfg_grant_cfg_to_release_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_cfg_grant_cfg_to_release_list_r16, 1, 8, integer_packer<uint8_t>(0, 7)));
  }
  if (sl_cfg_grant_cfg_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_cfg_grant_cfg_to_add_mod_list_r16, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_cfg_grant_cfg_list_r16_s::unpack(cbit_ref& bref)
{
  bool sl_cfg_grant_cfg_to_release_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_cfg_grant_cfg_to_release_list_r16_present, 1));
  bool sl_cfg_grant_cfg_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_cfg_grant_cfg_to_add_mod_list_r16_present, 1));

  if (sl_cfg_grant_cfg_to_release_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_cfg_grant_cfg_to_release_list_r16, bref, 1, 8, integer_packer<uint8_t>(0, 7)));
  }
  if (sl_cfg_grant_cfg_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_cfg_grant_cfg_to_add_mod_list_r16, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void sl_cfg_grant_cfg_list_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_cfg_grant_cfg_to_release_list_r16.size() > 0) {
    j.start_array("sl-ConfiguredGrantConfigToReleaseList-r16");
    for (const auto& e1 : sl_cfg_grant_cfg_to_release_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_cfg_grant_cfg_to_add_mod_list_r16.size() > 0) {
    j.start_array("sl-ConfiguredGrantConfigToAddModList-r16");
    for (const auto& e1 : sl_cfg_grant_cfg_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// SL-DRX-ConfigGC-BC-r17 ::= SEQUENCE
SRSASN_CODE sl_drx_cfg_gc_bc_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_drx_gc_bc_per_qos_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_drx_gc_generic_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_default_drx_gc_bc_r17_present, 1));

  if (sl_drx_gc_bc_per_qos_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_drx_gc_bc_per_qos_list_r17, 1, 16));
  }
  if (sl_drx_gc_generic_r17_present) {
    HANDLE_CODE(sl_drx_gc_generic_r17.pack(bref));
  }
  if (sl_default_drx_gc_bc_r17_present) {
    HANDLE_CODE(sl_default_drx_gc_bc_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drx_cfg_gc_bc_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sl_drx_gc_bc_per_qos_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_drx_gc_bc_per_qos_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_drx_gc_generic_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_default_drx_gc_bc_r17_present, 1));

  if (sl_drx_gc_bc_per_qos_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_drx_gc_bc_per_qos_list_r17, bref, 1, 16));
  }
  if (sl_drx_gc_generic_r17_present) {
    HANDLE_CODE(sl_drx_gc_generic_r17.unpack(bref));
  }
  if (sl_default_drx_gc_bc_r17_present) {
    HANDLE_CODE(sl_default_drx_gc_bc_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_drx_cfg_gc_bc_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_drx_gc_bc_per_qos_list_r17.size() > 0) {
    j.start_array("sl-DRX-GC-BC-PerQoS-List-r17");
    for (const auto& e1 : sl_drx_gc_bc_per_qos_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_drx_gc_generic_r17_present) {
    j.write_fieldname("sl-DRX-GC-generic-r17");
    sl_drx_gc_generic_r17.to_json(j);
  }
  if (sl_default_drx_gc_bc_r17_present) {
    j.write_fieldname("sl-DefaultDRX-GC-BC-r17");
    sl_default_drx_gc_bc_r17.to_json(j);
  }
  j.end_obj();
}

// SL-DRX-ConfigUC-Info-r17 ::= SEQUENCE
SRSASN_CODE sl_drx_cfg_uc_info_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_dest_idx_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_drx_cfg_uc_r17_present, 1));

  if (sl_dest_idx_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_dest_idx_r17, (uint8_t)0u, (uint8_t)31u));
  }
  if (sl_drx_cfg_uc_r17_present) {
    HANDLE_CODE(sl_drx_cfg_uc_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drx_cfg_uc_info_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_dest_idx_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_drx_cfg_uc_r17_present, 1));

  if (sl_dest_idx_r17_present) {
    HANDLE_CODE(unpack_integer(sl_dest_idx_r17, bref, (uint8_t)0u, (uint8_t)31u));
  }
  if (sl_drx_cfg_uc_r17_present) {
    HANDLE_CODE(sl_drx_cfg_uc_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_drx_cfg_uc_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_dest_idx_r17_present) {
    j.write_int("sl-DestinationIndex-r17", sl_dest_idx_r17);
  }
  if (sl_drx_cfg_uc_r17_present) {
    j.write_fieldname("sl-DRX-ConfigUC-r17");
    sl_drx_cfg_uc_r17.to_json(j);
  }
  j.end_obj();
}

// SL-LogicalChannelConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_lc_ch_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_cfg_grant_type1_allowed_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_harq_feedback_enabled_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_allowed_cg_list_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_allowed_scs_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_max_pusch_dur_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_lc_ch_group_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_sched_request_id_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_lc_ch_sr_delay_timer_applied_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, sl_prio_r16, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(sl_prioritised_bit_rate_r16.pack(bref));
  HANDLE_CODE(sl_bucket_size_dur_r16.pack(bref));
  if (sl_harq_feedback_enabled_r16_present) {
    HANDLE_CODE(sl_harq_feedback_enabled_r16.pack(bref));
  }
  if (sl_allowed_cg_list_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_allowed_cg_list_r16, 0, 7, integer_packer<uint8_t>(0, 7)));
  }
  if (sl_allowed_scs_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_allowed_scs_list_r16, 1, 5));
  }
  if (sl_max_pusch_dur_r16_present) {
    HANDLE_CODE(sl_max_pusch_dur_r16.pack(bref));
  }
  if (sl_lc_ch_group_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_lc_ch_group_r16, (uint8_t)0u, (uint8_t)7u));
  }
  if (sl_sched_request_id_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_sched_request_id_r16, (uint8_t)0u, (uint8_t)7u));
  }
  if (sl_lc_ch_sr_delay_timer_applied_r16_present) {
    HANDLE_CODE(bref.pack(sl_lc_ch_sr_delay_timer_applied_r16, 1));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_lc_ch_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_cfg_grant_type1_allowed_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_harq_feedback_enabled_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_allowed_cg_list_r16_present, 1));
  bool sl_allowed_scs_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_allowed_scs_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_max_pusch_dur_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_lc_ch_group_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_sched_request_id_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_lc_ch_sr_delay_timer_applied_r16_present, 1));

  HANDLE_CODE(unpack_integer(sl_prio_r16, bref, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(sl_prioritised_bit_rate_r16.unpack(bref));
  HANDLE_CODE(sl_bucket_size_dur_r16.unpack(bref));
  if (sl_harq_feedback_enabled_r16_present) {
    HANDLE_CODE(sl_harq_feedback_enabled_r16.unpack(bref));
  }
  if (sl_allowed_cg_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_allowed_cg_list_r16, bref, 0, 7, integer_packer<uint8_t>(0, 7)));
  }
  if (sl_allowed_scs_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_allowed_scs_list_r16, bref, 1, 5));
  }
  if (sl_max_pusch_dur_r16_present) {
    HANDLE_CODE(sl_max_pusch_dur_r16.unpack(bref));
  }
  if (sl_lc_ch_group_r16_present) {
    HANDLE_CODE(unpack_integer(sl_lc_ch_group_r16, bref, (uint8_t)0u, (uint8_t)7u));
  }
  if (sl_sched_request_id_r16_present) {
    HANDLE_CODE(unpack_integer(sl_sched_request_id_r16, bref, (uint8_t)0u, (uint8_t)7u));
  }
  if (sl_lc_ch_sr_delay_timer_applied_r16_present) {
    HANDLE_CODE(bref.unpack(sl_lc_ch_sr_delay_timer_applied_r16, 1));
  }

  return SRSASN_SUCCESS;
}
void sl_lc_ch_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-Priority-r16", sl_prio_r16);
  j.write_str("sl-PrioritisedBitRate-r16", sl_prioritised_bit_rate_r16.to_string());
  j.write_str("sl-BucketSizeDuration-r16", sl_bucket_size_dur_r16.to_string());
  if (sl_cfg_grant_type1_allowed_r16_present) {
    j.write_str("sl-ConfiguredGrantType1Allowed-r16", "true");
  }
  if (sl_harq_feedback_enabled_r16_present) {
    j.write_str("sl-HARQ-FeedbackEnabled-r16", sl_harq_feedback_enabled_r16.to_string());
  }
  if (sl_allowed_cg_list_r16_present) {
    j.start_array("sl-AllowedCG-List-r16");
    for (const auto& e1 : sl_allowed_cg_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_allowed_scs_list_r16.size() > 0) {
    j.start_array("sl-AllowedSCS-List-r16");
    for (const auto& e1 : sl_allowed_scs_list_r16) {
      j.write_str(e1.to_string());
    }
    j.end_array();
  }
  if (sl_max_pusch_dur_r16_present) {
    j.write_str("sl-MaxPUSCH-Duration-r16", sl_max_pusch_dur_r16.to_string());
  }
  if (sl_lc_ch_group_r16_present) {
    j.write_int("sl-LogicalChannelGroup-r16", sl_lc_ch_group_r16);
  }
  if (sl_sched_request_id_r16_present) {
    j.write_int("sl-SchedulingRequestId-r16", sl_sched_request_id_r16);
  }
  if (sl_lc_ch_sr_delay_timer_applied_r16_present) {
    j.write_bool("sl-LogicalChannelSR-DelayTimerApplied-r16", sl_lc_ch_sr_delay_timer_applied_r16);
  }
  j.end_obj();
}

const char* sl_lc_ch_cfg_r16_s::sl_prioritised_bit_rate_r16_opts::to_string() const
{
  static const char* names[] = {"kBps0",
                                "kBps8",
                                "kBps16",
                                "kBps32",
                                "kBps64",
                                "kBps128",
                                "kBps256",
                                "kBps512",
                                "kBps1024",
                                "kBps2048",
                                "kBps4096",
                                "kBps8192",
                                "kBps16384",
                                "kBps32768",
                                "kBps65536",
                                "infinity"};
  return convert_enum_idx(names, 16, value, "sl_lc_ch_cfg_r16_s::sl_prioritised_bit_rate_r16_e_");
}
int32_t sl_lc_ch_cfg_r16_s::sl_prioritised_bit_rate_r16_opts::to_number() const
{
  static const int32_t numbers[] = {0, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, -1};
  return map_enum_number(numbers, 16, value, "sl_lc_ch_cfg_r16_s::sl_prioritised_bit_rate_r16_e_");
}

const char* sl_lc_ch_cfg_r16_s::sl_bucket_size_dur_r16_opts::to_string() const
{
  static const char* names[] = {"ms5",
                                "ms10",
                                "ms20",
                                "ms50",
                                "ms100",
                                "ms150",
                                "ms300",
                                "ms500",
                                "ms1000",
                                "spare7",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "sl_lc_ch_cfg_r16_s::sl_bucket_size_dur_r16_e_");
}
uint16_t sl_lc_ch_cfg_r16_s::sl_bucket_size_dur_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {5, 10, 20, 50, 100, 150, 300, 500, 1000};
  return map_enum_number(numbers, 9, value, "sl_lc_ch_cfg_r16_s::sl_bucket_size_dur_r16_e_");
}

const char* sl_lc_ch_cfg_r16_s::sl_harq_feedback_enabled_r16_opts::to_string() const
{
  static const char* names[] = {"enabled", "disabled"};
  return convert_enum_idx(names, 2, value, "sl_lc_ch_cfg_r16_s::sl_harq_feedback_enabled_r16_e_");
}

const char* sl_lc_ch_cfg_r16_s::sl_max_pusch_dur_r16_opts::to_string() const
{
  static const char* names[] = {"ms0p02", "ms0p04", "ms0p0625", "ms0p125", "ms0p25", "ms0p5", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "sl_lc_ch_cfg_r16_s::sl_max_pusch_dur_r16_e_");
}

// SL-MappedQoS-FlowsListDedicated-r16 ::= SEQUENCE
SRSASN_CODE sl_mapped_qos_flows_list_ded_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_mapped_qos_flows_to_add_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_mapped_qos_flows_to_release_list_r16.size() > 0, 1));

  if (sl_mapped_qos_flows_to_add_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_mapped_qos_flows_to_add_list_r16, 1, 2048, integer_packer<uint16_t>(1, 2048)));
  }
  if (sl_mapped_qos_flows_to_release_list_r16.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, sl_mapped_qos_flows_to_release_list_r16, 1, 2048, integer_packer<uint16_t>(1, 2048)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_mapped_qos_flows_list_ded_r16_s::unpack(cbit_ref& bref)
{
  bool sl_mapped_qos_flows_to_add_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_mapped_qos_flows_to_add_list_r16_present, 1));
  bool sl_mapped_qos_flows_to_release_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_mapped_qos_flows_to_release_list_r16_present, 1));

  if (sl_mapped_qos_flows_to_add_list_r16_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(sl_mapped_qos_flows_to_add_list_r16, bref, 1, 2048, integer_packer<uint16_t>(1, 2048)));
  }
  if (sl_mapped_qos_flows_to_release_list_r16_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(sl_mapped_qos_flows_to_release_list_r16, bref, 1, 2048, integer_packer<uint16_t>(1, 2048)));
  }

  return SRSASN_SUCCESS;
}
void sl_mapped_qos_flows_list_ded_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_mapped_qos_flows_to_add_list_r16.size() > 0) {
    j.start_array("sl-MappedQoS-FlowsToAddList-r16");
    for (const auto& e1 : sl_mapped_qos_flows_to_add_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_mapped_qos_flows_to_release_list_r16.size() > 0) {
    j.start_array("sl-MappedQoS-FlowsToReleaseList-r16");
    for (const auto& e1 : sl_mapped_qos_flows_to_release_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// SL-QuantityConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_quant_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_filt_coef_dmrs_r16_present, 1));

  if (sl_filt_coef_dmrs_r16_present) {
    HANDLE_CODE(sl_filt_coef_dmrs_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_quant_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_filt_coef_dmrs_r16_present, 1));

  if (sl_filt_coef_dmrs_r16_present) {
    HANDLE_CODE(sl_filt_coef_dmrs_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_quant_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_filt_coef_dmrs_r16_present) {
    j.write_str("sl-FilterCoefficientDMRS-r16", sl_filt_coef_dmrs_r16.to_string());
  }
  j.end_obj();
}

// SL-RLC-Config-r16 ::= CHOICE
void sl_rlc_cfg_r16_c::destroy_()
{
  switch (type_) {
    case types::sl_am_rlc_r16:
      c.destroy<sl_am_rlc_r16_s_>();
      break;
    case types::sl_um_rlc_r16:
      c.destroy<sl_um_rlc_r16_s_>();
      break;
    default:
      break;
  }
}
void sl_rlc_cfg_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::sl_am_rlc_r16:
      c.init<sl_am_rlc_r16_s_>();
      break;
    case types::sl_um_rlc_r16:
      c.init<sl_um_rlc_r16_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_rlc_cfg_r16_c");
  }
}
sl_rlc_cfg_r16_c::sl_rlc_cfg_r16_c(const sl_rlc_cfg_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sl_am_rlc_r16:
      c.init(other.c.get<sl_am_rlc_r16_s_>());
      break;
    case types::sl_um_rlc_r16:
      c.init(other.c.get<sl_um_rlc_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_rlc_cfg_r16_c");
  }
}
sl_rlc_cfg_r16_c& sl_rlc_cfg_r16_c::operator=(const sl_rlc_cfg_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sl_am_rlc_r16:
      c.set(other.c.get<sl_am_rlc_r16_s_>());
      break;
    case types::sl_um_rlc_r16:
      c.set(other.c.get<sl_um_rlc_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_rlc_cfg_r16_c");
  }

  return *this;
}
sl_rlc_cfg_r16_c::sl_am_rlc_r16_s_& sl_rlc_cfg_r16_c::set_sl_am_rlc_r16()
{
  set(types::sl_am_rlc_r16);
  return c.get<sl_am_rlc_r16_s_>();
}
sl_rlc_cfg_r16_c::sl_um_rlc_r16_s_& sl_rlc_cfg_r16_c::set_sl_um_rlc_r16()
{
  set(types::sl_um_rlc_r16);
  return c.get<sl_um_rlc_r16_s_>();
}
void sl_rlc_cfg_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sl_am_rlc_r16:
      j.write_fieldname("sl-AM-RLC-r16");
      j.start_obj();
      if (c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16_present) {
        j.write_str("sl-SN-FieldLengthAM-r16", c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16.to_string());
      }
      j.write_str("sl-T-PollRetransmit-r16", c.get<sl_am_rlc_r16_s_>().sl_t_poll_retx_r16.to_string());
      j.write_str("sl-PollPDU-r16", c.get<sl_am_rlc_r16_s_>().sl_poll_pdu_r16.to_string());
      j.write_str("sl-PollByte-r16", c.get<sl_am_rlc_r16_s_>().sl_poll_byte_r16.to_string());
      j.write_str("sl-MaxRetxThreshold-r16", c.get<sl_am_rlc_r16_s_>().sl_max_retx_thres_r16.to_string());
      j.end_obj();
      break;
    case types::sl_um_rlc_r16:
      j.write_fieldname("sl-UM-RLC-r16");
      j.start_obj();
      if (c.get<sl_um_rlc_r16_s_>().sl_sn_field_len_um_r16_present) {
        j.write_str("sl-SN-FieldLengthUM-r16", c.get<sl_um_rlc_r16_s_>().sl_sn_field_len_um_r16.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "sl_rlc_cfg_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE sl_rlc_cfg_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sl_am_rlc_r16:
      bref.pack(c.get<sl_am_rlc_r16_s_>().ext, 1);
      HANDLE_CODE(bref.pack(c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16_present, 1));
      if (c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16_present) {
        HANDLE_CODE(c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16.pack(bref));
      }
      HANDLE_CODE(c.get<sl_am_rlc_r16_s_>().sl_t_poll_retx_r16.pack(bref));
      HANDLE_CODE(c.get<sl_am_rlc_r16_s_>().sl_poll_pdu_r16.pack(bref));
      HANDLE_CODE(c.get<sl_am_rlc_r16_s_>().sl_poll_byte_r16.pack(bref));
      HANDLE_CODE(c.get<sl_am_rlc_r16_s_>().sl_max_retx_thres_r16.pack(bref));
      break;
    case types::sl_um_rlc_r16:
      bref.pack(c.get<sl_um_rlc_r16_s_>().ext, 1);
      HANDLE_CODE(bref.pack(c.get<sl_um_rlc_r16_s_>().sl_sn_field_len_um_r16_present, 1));
      if (c.get<sl_um_rlc_r16_s_>().sl_sn_field_len_um_r16_present) {
        HANDLE_CODE(c.get<sl_um_rlc_r16_s_>().sl_sn_field_len_um_r16.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "sl_rlc_cfg_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_rlc_cfg_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sl_am_rlc_r16:
      bref.unpack(c.get<sl_am_rlc_r16_s_>().ext, 1);
      HANDLE_CODE(bref.unpack(c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16_present, 1));
      if (c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16_present) {
        HANDLE_CODE(c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16.unpack(bref));
      }
      HANDLE_CODE(c.get<sl_am_rlc_r16_s_>().sl_t_poll_retx_r16.unpack(bref));
      HANDLE_CODE(c.get<sl_am_rlc_r16_s_>().sl_poll_pdu_r16.unpack(bref));
      HANDLE_CODE(c.get<sl_am_rlc_r16_s_>().sl_poll_byte_r16.unpack(bref));
      HANDLE_CODE(c.get<sl_am_rlc_r16_s_>().sl_max_retx_thres_r16.unpack(bref));
      break;
    case types::sl_um_rlc_r16:
      bref.unpack(c.get<sl_um_rlc_r16_s_>().ext, 1);
      HANDLE_CODE(bref.unpack(c.get<sl_um_rlc_r16_s_>().sl_sn_field_len_um_r16_present, 1));
      if (c.get<sl_um_rlc_r16_s_>().sl_sn_field_len_um_r16_present) {
        HANDLE_CODE(c.get<sl_um_rlc_r16_s_>().sl_sn_field_len_um_r16.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "sl_rlc_cfg_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_rlc_cfg_r16_c::sl_am_rlc_r16_s_::sl_max_retx_thres_r16_opts::to_string() const
{
  static const char* names[] = {"t1", "t2", "t3", "t4", "t6", "t8", "t16", "t32"};
  return convert_enum_idx(names, 8, value, "sl_rlc_cfg_r16_c::sl_am_rlc_r16_s_::sl_max_retx_thres_r16_e_");
}
uint8_t sl_rlc_cfg_r16_c::sl_am_rlc_r16_s_::sl_max_retx_thres_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 6, 8, 16, 32};
  return map_enum_number(numbers, 8, value, "sl_rlc_cfg_r16_c::sl_am_rlc_r16_s_::sl_max_retx_thres_r16_e_");
}

const char* sl_rlc_cfg_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"sl-AM-RLC-r16", "sl-UM-RLC-r16"};
  return convert_enum_idx(names, 2, value, "sl_rlc_cfg_r16_c::types");
}

// SL-RemoteUE-RB-Identity-r17 ::= CHOICE
void sl_remote_ue_rb_id_r17_c::destroy_() {}
void sl_remote_ue_rb_id_r17_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
sl_remote_ue_rb_id_r17_c::sl_remote_ue_rb_id_r17_c(const sl_remote_ue_rb_id_r17_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::srb_id_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::drb_id_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_remote_ue_rb_id_r17_c");
  }
}
sl_remote_ue_rb_id_r17_c& sl_remote_ue_rb_id_r17_c::operator=(const sl_remote_ue_rb_id_r17_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::srb_id_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::drb_id_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_remote_ue_rb_id_r17_c");
  }

  return *this;
}
uint8_t& sl_remote_ue_rb_id_r17_c::set_srb_id_r17()
{
  set(types::srb_id_r17);
  return c.get<uint8_t>();
}
uint8_t& sl_remote_ue_rb_id_r17_c::set_drb_id_r17()
{
  set(types::drb_id_r17);
  return c.get<uint8_t>();
}
void sl_remote_ue_rb_id_r17_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::srb_id_r17:
      j.write_int("srb-Identity-r17", c.get<uint8_t>());
      break;
    case types::drb_id_r17:
      j.write_int("drb-Identity-r17", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "sl_remote_ue_rb_id_r17_c");
  }
  j.end_obj();
}
SRSASN_CODE sl_remote_ue_rb_id_r17_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::srb_id_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)3u));
      break;
    case types::drb_id_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)32u));
      break;
    default:
      log_invalid_choice_id(type_, "sl_remote_ue_rb_id_r17_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_remote_ue_rb_id_r17_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::srb_id_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)3u));
      break;
    case types::drb_id_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)32u));
      break;
    default:
      log_invalid_choice_id(type_, "sl_remote_ue_rb_id_r17_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_remote_ue_rb_id_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"srb-Identity-r17", "drb-Identity-r17"};
  return convert_enum_idx(names, 2, value, "sl_remote_ue_rb_id_r17_c::types");
}

// SL-ReselectionConfig-r17 ::= SEQUENCE
SRSASN_CODE sl_resel_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_rsrp_thresh_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_filt_coef_rsrp_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_hyst_min_r17_present, 1));

  if (sl_rsrp_thresh_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_rsrp_thresh_r17, (uint8_t)0u, (uint8_t)13u));
  }
  if (sl_filt_coef_rsrp_r17_present) {
    HANDLE_CODE(sl_filt_coef_rsrp_r17.pack(bref));
  }
  if (sl_hyst_min_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_hyst_min_r17, (uint8_t)0u, (uint8_t)30u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_resel_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_rsrp_thresh_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_filt_coef_rsrp_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_hyst_min_r17_present, 1));

  if (sl_rsrp_thresh_r17_present) {
    HANDLE_CODE(unpack_integer(sl_rsrp_thresh_r17, bref, (uint8_t)0u, (uint8_t)13u));
  }
  if (sl_filt_coef_rsrp_r17_present) {
    HANDLE_CODE(sl_filt_coef_rsrp_r17.unpack(bref));
  }
  if (sl_hyst_min_r17_present) {
    HANDLE_CODE(unpack_integer(sl_hyst_min_r17, bref, (uint8_t)0u, (uint8_t)30u));
  }

  return SRSASN_SUCCESS;
}
void sl_resel_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_rsrp_thresh_r17_present) {
    j.write_int("sl-RSRP-Thresh-r17", sl_rsrp_thresh_r17);
  }
  if (sl_filt_coef_rsrp_r17_present) {
    j.write_str("sl-FilterCoefficientRSRP-r17", sl_filt_coef_rsrp_r17.to_string());
  }
  if (sl_hyst_min_r17_present) {
    j.write_int("sl-HystMin-r17", sl_hyst_min_r17);
  }
  j.end_obj();
}

// UL-DataSplitThreshold ::= ENUMERATED
const char* ul_data_split_thres_opts::to_string() const
{
  static const char* names[] = {"b0",       "b100",     "b200",     "b400",     "b800",     "b1600",    "b3200",
                                "b6400",    "b12800",   "b25600",   "b51200",   "b102400",  "b204800",  "b409600",
                                "b819200",  "b1228800", "b1638400", "b2457600", "b3276800", "b4096000", "b4915200",
                                "b5734400", "b6553600", "infinity", "spare8",   "spare7",   "spare6",   "spare5",
                                "spare4",   "spare3",   "spare2",   "spare1"};
  return convert_enum_idx(names, 32, value, "ul_data_split_thres_e");
}
int32_t ul_data_split_thres_opts::to_number() const
{
  static const int32_t numbers[] = {0,       100,     200,     400,     800,     1600,    3200,    6400,
                                    12800,   25600,   51200,   102400,  204800,  409600,  819200,  1228800,
                                    1638400, 2457600, 3276800, 4096000, 4915200, 5734400, 6553600, -1};
  return map_enum_number(numbers, 24, value, "ul_data_split_thres_e");
}

// UplinkDataCompression-r17 ::= CHOICE
void ul_data_compress_r17_c::set(types::options e)
{
  type_ = e;
}
ul_data_compress_r17_c::new_setup_s_& ul_data_compress_r17_c::set_new_setup()
{
  set(types::new_setup);
  return c;
}
void ul_data_compress_r17_c::set_drb_continue_udc()
{
  set(types::drb_continue_udc);
}
void ul_data_compress_r17_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::new_setup:
      j.write_fieldname("newSetup");
      j.start_obj();
      j.write_str("bufferSize-r17", c.buffer_size_r17.to_string());
      if (c.dictionary_r17_present) {
        j.write_str("dictionary-r17", c.dictionary_r17.to_string());
      }
      j.end_obj();
      break;
    case types::drb_continue_udc:
      break;
    default:
      log_invalid_choice_id(type_, "ul_data_compress_r17_c");
  }
  j.end_obj();
}
SRSASN_CODE ul_data_compress_r17_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::new_setup:
      HANDLE_CODE(bref.pack(c.dictionary_r17_present, 1));
      HANDLE_CODE(c.buffer_size_r17.pack(bref));
      if (c.dictionary_r17_present) {
        HANDLE_CODE(c.dictionary_r17.pack(bref));
      }
      break;
    case types::drb_continue_udc:
      break;
    default:
      log_invalid_choice_id(type_, "ul_data_compress_r17_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_data_compress_r17_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::new_setup:
      HANDLE_CODE(bref.unpack(c.dictionary_r17_present, 1));
      HANDLE_CODE(c.buffer_size_r17.unpack(bref));
      if (c.dictionary_r17_present) {
        HANDLE_CODE(c.dictionary_r17.unpack(bref));
      }
      break;
    case types::drb_continue_udc:
      break;
    default:
      log_invalid_choice_id(type_, "ul_data_compress_r17_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ul_data_compress_r17_c::new_setup_s_::buffer_size_r17_opts::to_string() const
{
  static const char* names[] = {"kbyte2", "kbyte4", "kbyte8", "spare1"};
  return convert_enum_idx(names, 4, value, "ul_data_compress_r17_c::new_setup_s_::buffer_size_r17_e_");
}
uint8_t ul_data_compress_r17_c::new_setup_s_::buffer_size_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8};
  return map_enum_number(numbers, 3, value, "ul_data_compress_r17_c::new_setup_s_::buffer_size_r17_e_");
}

const char* ul_data_compress_r17_c::new_setup_s_::dictionary_r17_opts::to_string() const
{
  static const char* names[] = {"sip-SDP", "operator"};
  return convert_enum_idx(names, 2, value, "ul_data_compress_r17_c::new_setup_s_::dictionary_r17_e_");
}

const char* ul_data_compress_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"newSetup", "drb-ContinueUDC"};
  return convert_enum_idx(names, 2, value, "ul_data_compress_r17_c::types");
}

// CipheringAlgorithm ::= ENUMERATED
const char* ciphering_algorithm_opts::to_string() const
{
  static const char* names[] = {"nea0", "nea1", "nea2", "nea3", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "ciphering_algorithm_e");
}
uint8_t ciphering_algorithm_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 3};
  return map_enum_number(numbers, 4, value, "ciphering_algorithm_e");
}

// IntegrityProtAlgorithm ::= ENUMERATED
const char* integrity_prot_algorithm_opts::to_string() const
{
  static const char* names[] = {"nia0", "nia1", "nia2", "nia3", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "integrity_prot_algorithm_e");
}
uint8_t integrity_prot_algorithm_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 3};
  return map_enum_number(numbers, 4, value, "integrity_prot_algorithm_e");
}

// PDCP-Config ::= SEQUENCE
SRSASN_CODE pdcp_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(drb_present, 1));
  HANDLE_CODE(bref.pack(more_than_one_rlc_present, 1));
  HANDLE_CODE(bref.pack(t_reordering_present, 1));

  if (drb_present) {
    HANDLE_CODE(bref.pack(drb.discard_timer_present, 1));
    HANDLE_CODE(bref.pack(drb.pdcp_sn_size_ul_present, 1));
    HANDLE_CODE(bref.pack(drb.pdcp_sn_size_dl_present, 1));
    HANDLE_CODE(bref.pack(drb.integrity_protection_present, 1));
    HANDLE_CODE(bref.pack(drb.status_report_required_present, 1));
    HANDLE_CODE(bref.pack(drb.out_of_order_delivery_present, 1));
    if (drb.discard_timer_present) {
      HANDLE_CODE(drb.discard_timer.pack(bref));
    }
    if (drb.pdcp_sn_size_ul_present) {
      HANDLE_CODE(drb.pdcp_sn_size_ul.pack(bref));
    }
    if (drb.pdcp_sn_size_dl_present) {
      HANDLE_CODE(drb.pdcp_sn_size_dl.pack(bref));
    }
    HANDLE_CODE(drb.hdr_compress.pack(bref));
  }
  if (more_than_one_rlc_present) {
    HANDLE_CODE(bref.pack(more_than_one_rlc.ul_data_split_thres_present, 1));
    HANDLE_CODE(bref.pack(more_than_one_rlc.pdcp_dupl_present, 1));
    HANDLE_CODE(bref.pack(more_than_one_rlc.primary_path.cell_group_present, 1));
    HANDLE_CODE(bref.pack(more_than_one_rlc.primary_path.lc_ch_present, 1));
    if (more_than_one_rlc.primary_path.cell_group_present) {
      HANDLE_CODE(pack_integer(bref, more_than_one_rlc.primary_path.cell_group, (uint8_t)0u, (uint8_t)3u));
    }
    if (more_than_one_rlc.primary_path.lc_ch_present) {
      HANDLE_CODE(pack_integer(bref, more_than_one_rlc.primary_path.lc_ch, (uint8_t)1u, (uint8_t)32u));
    }
    if (more_than_one_rlc.ul_data_split_thres_present) {
      HANDLE_CODE(more_than_one_rlc.ul_data_split_thres.pack(bref));
    }
    if (more_than_one_rlc.pdcp_dupl_present) {
      HANDLE_CODE(bref.pack(more_than_one_rlc.pdcp_dupl, 1));
    }
  }
  if (t_reordering_present) {
    HANDLE_CODE(t_reordering.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ciphering_disabled_present;
    group_flags[1] |= discard_timer_ext_r16.is_present();
    group_flags[1] |= more_than_two_rlc_drb_r16.is_present();
    group_flags[1] |= ethernet_hdr_compress_r16.is_present();
    group_flags[2] |= survival_time_state_support_r17_present;
    group_flags[2] |= ul_data_compress_r17.is_present();
    group_flags[2] |= discard_timer_ext2_r17.is_present();
    group_flags[2] |= init_rx_deliv_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ciphering_disabled_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(discard_timer_ext_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(more_than_two_rlc_drb_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(ethernet_hdr_compress_r16.is_present(), 1));
      if (discard_timer_ext_r16.is_present()) {
        HANDLE_CODE(discard_timer_ext_r16->pack(bref));
      }
      if (more_than_two_rlc_drb_r16.is_present()) {
        HANDLE_CODE(bref.pack(more_than_two_rlc_drb_r16->split_secondary_path_r16_present, 1));
        HANDLE_CODE(bref.pack(more_than_two_rlc_drb_r16->dupl_state_r16_present, 1));
        if (more_than_two_rlc_drb_r16->split_secondary_path_r16_present) {
          HANDLE_CODE(
              pack_integer(bref, more_than_two_rlc_drb_r16->split_secondary_path_r16, (uint8_t)1u, (uint8_t)32u));
        }
        if (more_than_two_rlc_drb_r16->dupl_state_r16_present) {
          HANDLE_CODE(pack_fixed_seq_of(bref,
                                        more_than_two_rlc_drb_r16->dupl_state_r16,
                                        more_than_two_rlc_drb_r16->dupl_state_r16.size(),
                                        BitPacker(1)));
        }
      }
      if (ethernet_hdr_compress_r16.is_present()) {
        HANDLE_CODE(ethernet_hdr_compress_r16->pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(survival_time_state_support_r17_present, 1));
      HANDLE_CODE(bref.pack(ul_data_compress_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(discard_timer_ext2_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(init_rx_deliv_r17_present, 1));
      if (ul_data_compress_r17.is_present()) {
        HANDLE_CODE(ul_data_compress_r17->pack(bref));
      }
      if (discard_timer_ext2_r17.is_present()) {
        HANDLE_CODE(discard_timer_ext2_r17->pack(bref));
      }
      if (init_rx_deliv_r17_present) {
        HANDLE_CODE(init_rx_deliv_r17.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcp_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(drb_present, 1));
  HANDLE_CODE(bref.unpack(more_than_one_rlc_present, 1));
  HANDLE_CODE(bref.unpack(t_reordering_present, 1));

  if (drb_present) {
    HANDLE_CODE(bref.unpack(drb.discard_timer_present, 1));
    HANDLE_CODE(bref.unpack(drb.pdcp_sn_size_ul_present, 1));
    HANDLE_CODE(bref.unpack(drb.pdcp_sn_size_dl_present, 1));
    HANDLE_CODE(bref.unpack(drb.integrity_protection_present, 1));
    HANDLE_CODE(bref.unpack(drb.status_report_required_present, 1));
    HANDLE_CODE(bref.unpack(drb.out_of_order_delivery_present, 1));
    if (drb.discard_timer_present) {
      HANDLE_CODE(drb.discard_timer.unpack(bref));
    }
    if (drb.pdcp_sn_size_ul_present) {
      HANDLE_CODE(drb.pdcp_sn_size_ul.unpack(bref));
    }
    if (drb.pdcp_sn_size_dl_present) {
      HANDLE_CODE(drb.pdcp_sn_size_dl.unpack(bref));
    }
    HANDLE_CODE(drb.hdr_compress.unpack(bref));
  }
  if (more_than_one_rlc_present) {
    HANDLE_CODE(bref.unpack(more_than_one_rlc.ul_data_split_thres_present, 1));
    HANDLE_CODE(bref.unpack(more_than_one_rlc.pdcp_dupl_present, 1));
    HANDLE_CODE(bref.unpack(more_than_one_rlc.primary_path.cell_group_present, 1));
    HANDLE_CODE(bref.unpack(more_than_one_rlc.primary_path.lc_ch_present, 1));
    if (more_than_one_rlc.primary_path.cell_group_present) {
      HANDLE_CODE(unpack_integer(more_than_one_rlc.primary_path.cell_group, bref, (uint8_t)0u, (uint8_t)3u));
    }
    if (more_than_one_rlc.primary_path.lc_ch_present) {
      HANDLE_CODE(unpack_integer(more_than_one_rlc.primary_path.lc_ch, bref, (uint8_t)1u, (uint8_t)32u));
    }
    if (more_than_one_rlc.ul_data_split_thres_present) {
      HANDLE_CODE(more_than_one_rlc.ul_data_split_thres.unpack(bref));
    }
    if (more_than_one_rlc.pdcp_dupl_present) {
      HANDLE_CODE(bref.unpack(more_than_one_rlc.pdcp_dupl, 1));
    }
  }
  if (t_reordering_present) {
    HANDLE_CODE(t_reordering.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(3);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ciphering_disabled_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(discard_timer_ext_r16, bref);
      unpack_presence_flag(more_than_two_rlc_drb_r16, bref);
      unpack_presence_flag(ethernet_hdr_compress_r16, bref);
      if (discard_timer_ext_r16.is_present()) {
        HANDLE_CODE(discard_timer_ext_r16->unpack(bref));
      }
      if (more_than_two_rlc_drb_r16.is_present()) {
        HANDLE_CODE(bref.unpack(more_than_two_rlc_drb_r16->split_secondary_path_r16_present, 1));
        HANDLE_CODE(bref.unpack(more_than_two_rlc_drb_r16->dupl_state_r16_present, 1));
        if (more_than_two_rlc_drb_r16->split_secondary_path_r16_present) {
          HANDLE_CODE(
              unpack_integer(more_than_two_rlc_drb_r16->split_secondary_path_r16, bref, (uint8_t)1u, (uint8_t)32u));
        }
        if (more_than_two_rlc_drb_r16->dupl_state_r16_present) {
          HANDLE_CODE(unpack_fixed_seq_of(more_than_two_rlc_drb_r16->dupl_state_r16,
                                          bref,
                                          more_than_two_rlc_drb_r16->dupl_state_r16.size(),
                                          BitPacker(1)));
        }
      }
      if (ethernet_hdr_compress_r16.is_present()) {
        HANDLE_CODE(ethernet_hdr_compress_r16->unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(survival_time_state_support_r17_present, 1));
      unpack_presence_flag(ul_data_compress_r17, bref);
      unpack_presence_flag(discard_timer_ext2_r17, bref);
      HANDLE_CODE(bref.unpack(init_rx_deliv_r17_present, 1));
      if (ul_data_compress_r17.is_present()) {
        HANDLE_CODE(ul_data_compress_r17->unpack(bref));
      }
      if (discard_timer_ext2_r17.is_present()) {
        HANDLE_CODE(discard_timer_ext2_r17->unpack(bref));
      }
      if (init_rx_deliv_r17_present) {
        HANDLE_CODE(init_rx_deliv_r17.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void pdcp_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (drb_present) {
    j.write_fieldname("drb");
    j.start_obj();
    if (drb.discard_timer_present) {
      j.write_str("discardTimer", drb.discard_timer.to_string());
    }
    if (drb.pdcp_sn_size_ul_present) {
      j.write_str("pdcp-SN-SizeUL", drb.pdcp_sn_size_ul.to_string());
    }
    if (drb.pdcp_sn_size_dl_present) {
      j.write_str("pdcp-SN-SizeDL", drb.pdcp_sn_size_dl.to_string());
    }
    j.write_fieldname("headerCompression");
    drb.hdr_compress.to_json(j);
    if (drb.integrity_protection_present) {
      j.write_str("integrityProtection", "enabled");
    }
    if (drb.status_report_required_present) {
      j.write_str("statusReportRequired", "true");
    }
    if (drb.out_of_order_delivery_present) {
      j.write_str("outOfOrderDelivery", "true");
    }
    j.end_obj();
  }
  if (more_than_one_rlc_present) {
    j.write_fieldname("moreThanOneRLC");
    j.start_obj();
    j.write_fieldname("primaryPath");
    j.start_obj();
    if (more_than_one_rlc.primary_path.cell_group_present) {
      j.write_int("cellGroup", more_than_one_rlc.primary_path.cell_group);
    }
    if (more_than_one_rlc.primary_path.lc_ch_present) {
      j.write_int("logicalChannel", more_than_one_rlc.primary_path.lc_ch);
    }
    j.end_obj();
    if (more_than_one_rlc.ul_data_split_thres_present) {
      j.write_str("ul-DataSplitThreshold", more_than_one_rlc.ul_data_split_thres.to_string());
    }
    if (more_than_one_rlc.pdcp_dupl_present) {
      j.write_bool("pdcp-Duplication", more_than_one_rlc.pdcp_dupl);
    }
    j.end_obj();
  }
  if (t_reordering_present) {
    j.write_str("t-Reordering", t_reordering.to_string());
  }
  if (ext) {
    if (ciphering_disabled_present) {
      j.write_str("cipheringDisabled", "true");
    }
    if (discard_timer_ext_r16.is_present()) {
      j.write_fieldname("discardTimerExt-r16");
      discard_timer_ext_r16->to_json(j);
    }
    if (more_than_two_rlc_drb_r16.is_present()) {
      j.write_fieldname("moreThanTwoRLC-DRB-r16");
      j.start_obj();
      if (more_than_two_rlc_drb_r16->split_secondary_path_r16_present) {
        j.write_int("splitSecondaryPath-r16", more_than_two_rlc_drb_r16->split_secondary_path_r16);
      }
      if (more_than_two_rlc_drb_r16->dupl_state_r16_present) {
        j.start_array("duplicationState-r16");
        for (const auto& e1 : more_than_two_rlc_drb_r16->dupl_state_r16) {
          j.write_bool(e1);
        }
        j.end_array();
      }
      j.end_obj();
    }
    if (ethernet_hdr_compress_r16.is_present()) {
      j.write_fieldname("ethernetHeaderCompression-r16");
      ethernet_hdr_compress_r16->to_json(j);
    }
    if (survival_time_state_support_r17_present) {
      j.write_str("survivalTimeStateSupport-r17", "true");
    }
    if (ul_data_compress_r17.is_present()) {
      j.write_fieldname("uplinkDataCompression-r17");
      ul_data_compress_r17->to_json(j);
    }
    if (discard_timer_ext2_r17.is_present()) {
      j.write_fieldname("discardTimerExt2-r17");
      discard_timer_ext2_r17->to_json(j);
    }
    if (init_rx_deliv_r17_present) {
      j.write_str("initialRX-DELIV-r17", init_rx_deliv_r17.to_string());
    }
  }
  j.end_obj();
}

const char* pdcp_cfg_s::drb_s_::discard_timer_opts::to_string() const
{
  static const char* names[] = {"ms10",
                                "ms20",
                                "ms30",
                                "ms40",
                                "ms50",
                                "ms60",
                                "ms75",
                                "ms100",
                                "ms150",
                                "ms200",
                                "ms250",
                                "ms300",
                                "ms500",
                                "ms750",
                                "ms1500",
                                "infinity"};
  return convert_enum_idx(names, 16, value, "pdcp_cfg_s::drb_s_::discard_timer_e_");
}
int16_t pdcp_cfg_s::drb_s_::discard_timer_opts::to_number() const
{
  static const int16_t numbers[] = {10, 20, 30, 40, 50, 60, 75, 100, 150, 200, 250, 300, 500, 750, 1500, -1};
  return map_enum_number(numbers, 16, value, "pdcp_cfg_s::drb_s_::discard_timer_e_");
}

const char* pdcp_cfg_s::drb_s_::pdcp_sn_size_ul_opts::to_string() const
{
  static const char* names[] = {"len12bits", "len18bits"};
  return convert_enum_idx(names, 2, value, "pdcp_cfg_s::drb_s_::pdcp_sn_size_ul_e_");
}
uint8_t pdcp_cfg_s::drb_s_::pdcp_sn_size_ul_opts::to_number() const
{
  static const uint8_t numbers[] = {12, 18};
  return map_enum_number(numbers, 2, value, "pdcp_cfg_s::drb_s_::pdcp_sn_size_ul_e_");
}

const char* pdcp_cfg_s::drb_s_::pdcp_sn_size_dl_opts::to_string() const
{
  static const char* names[] = {"len12bits", "len18bits"};
  return convert_enum_idx(names, 2, value, "pdcp_cfg_s::drb_s_::pdcp_sn_size_dl_e_");
}
uint8_t pdcp_cfg_s::drb_s_::pdcp_sn_size_dl_opts::to_number() const
{
  static const uint8_t numbers[] = {12, 18};
  return map_enum_number(numbers, 2, value, "pdcp_cfg_s::drb_s_::pdcp_sn_size_dl_e_");
}

void pdcp_cfg_s::drb_s_::hdr_compress_c_::destroy_()
{
  switch (type_) {
    case types::rohc:
      c.destroy<rohc_s_>();
      break;
    case types::ul_only_rohc:
      c.destroy<ul_only_rohc_s_>();
      break;
    default:
      break;
  }
}
void pdcp_cfg_s::drb_s_::hdr_compress_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::not_used:
      break;
    case types::rohc:
      c.init<rohc_s_>();
      break;
    case types::ul_only_rohc:
      c.init<ul_only_rohc_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdcp_cfg_s::drb_s_::hdr_compress_c_");
  }
}
pdcp_cfg_s::drb_s_::hdr_compress_c_::hdr_compress_c_(const pdcp_cfg_s::drb_s_::hdr_compress_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::not_used:
      break;
    case types::rohc:
      c.init(other.c.get<rohc_s_>());
      break;
    case types::ul_only_rohc:
      c.init(other.c.get<ul_only_rohc_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdcp_cfg_s::drb_s_::hdr_compress_c_");
  }
}
pdcp_cfg_s::drb_s_::hdr_compress_c_&
pdcp_cfg_s::drb_s_::hdr_compress_c_::operator=(const pdcp_cfg_s::drb_s_::hdr_compress_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::not_used:
      break;
    case types::rohc:
      c.set(other.c.get<rohc_s_>());
      break;
    case types::ul_only_rohc:
      c.set(other.c.get<ul_only_rohc_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdcp_cfg_s::drb_s_::hdr_compress_c_");
  }

  return *this;
}
void pdcp_cfg_s::drb_s_::hdr_compress_c_::set_not_used()
{
  set(types::not_used);
}
pdcp_cfg_s::drb_s_::hdr_compress_c_::rohc_s_& pdcp_cfg_s::drb_s_::hdr_compress_c_::set_rohc()
{
  set(types::rohc);
  return c.get<rohc_s_>();
}
pdcp_cfg_s::drb_s_::hdr_compress_c_::ul_only_rohc_s_& pdcp_cfg_s::drb_s_::hdr_compress_c_::set_ul_only_rohc()
{
  set(types::ul_only_rohc);
  return c.get<ul_only_rohc_s_>();
}
void pdcp_cfg_s::drb_s_::hdr_compress_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::not_used:
      break;
    case types::rohc:
      j.write_fieldname("rohc");
      j.start_obj();
      if (c.get<rohc_s_>().max_c_id_present) {
        j.write_int("maxCID", c.get<rohc_s_>().max_c_id);
      }
      j.write_fieldname("profiles");
      j.start_obj();
      j.write_bool("profile0x0001", c.get<rohc_s_>().profiles.profile0x0001);
      j.write_bool("profile0x0002", c.get<rohc_s_>().profiles.profile0x0002);
      j.write_bool("profile0x0003", c.get<rohc_s_>().profiles.profile0x0003);
      j.write_bool("profile0x0004", c.get<rohc_s_>().profiles.profile0x0004);
      j.write_bool("profile0x0006", c.get<rohc_s_>().profiles.profile0x0006);
      j.write_bool("profile0x0101", c.get<rohc_s_>().profiles.profile0x0101);
      j.write_bool("profile0x0102", c.get<rohc_s_>().profiles.profile0x0102);
      j.write_bool("profile0x0103", c.get<rohc_s_>().profiles.profile0x0103);
      j.write_bool("profile0x0104", c.get<rohc_s_>().profiles.profile0x0104);
      j.end_obj();
      if (c.get<rohc_s_>().drb_continue_rohc_present) {
        j.write_str("drb-ContinueROHC", "true");
      }
      j.end_obj();
      break;
    case types::ul_only_rohc:
      j.write_fieldname("uplinkOnlyROHC");
      j.start_obj();
      if (c.get<ul_only_rohc_s_>().max_c_id_present) {
        j.write_int("maxCID", c.get<ul_only_rohc_s_>().max_c_id);
      }
      j.write_fieldname("profiles");
      j.start_obj();
      j.write_bool("profile0x0006", c.get<ul_only_rohc_s_>().profiles.profile0x0006);
      j.end_obj();
      if (c.get<ul_only_rohc_s_>().drb_continue_rohc_present) {
        j.write_str("drb-ContinueROHC", "true");
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "pdcp_cfg_s::drb_s_::hdr_compress_c_");
  }
  j.end_obj();
}
SRSASN_CODE pdcp_cfg_s::drb_s_::hdr_compress_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::not_used:
      break;
    case types::rohc:
      HANDLE_CODE(bref.pack(c.get<rohc_s_>().max_c_id_present, 1));
      HANDLE_CODE(bref.pack(c.get<rohc_s_>().drb_continue_rohc_present, 1));
      if (c.get<rohc_s_>().max_c_id_present) {
        HANDLE_CODE(pack_integer(bref, c.get<rohc_s_>().max_c_id, (uint16_t)1u, (uint16_t)16383u));
      }
      HANDLE_CODE(bref.pack(c.get<rohc_s_>().profiles.profile0x0001, 1));
      HANDLE_CODE(bref.pack(c.get<rohc_s_>().profiles.profile0x0002, 1));
      HANDLE_CODE(bref.pack(c.get<rohc_s_>().profiles.profile0x0003, 1));
      HANDLE_CODE(bref.pack(c.get<rohc_s_>().profiles.profile0x0004, 1));
      HANDLE_CODE(bref.pack(c.get<rohc_s_>().profiles.profile0x0006, 1));
      HANDLE_CODE(bref.pack(c.get<rohc_s_>().profiles.profile0x0101, 1));
      HANDLE_CODE(bref.pack(c.get<rohc_s_>().profiles.profile0x0102, 1));
      HANDLE_CODE(bref.pack(c.get<rohc_s_>().profiles.profile0x0103, 1));
      HANDLE_CODE(bref.pack(c.get<rohc_s_>().profiles.profile0x0104, 1));
      break;
    case types::ul_only_rohc:
      HANDLE_CODE(bref.pack(c.get<ul_only_rohc_s_>().max_c_id_present, 1));
      HANDLE_CODE(bref.pack(c.get<ul_only_rohc_s_>().drb_continue_rohc_present, 1));
      if (c.get<ul_only_rohc_s_>().max_c_id_present) {
        HANDLE_CODE(pack_integer(bref, c.get<ul_only_rohc_s_>().max_c_id, (uint16_t)1u, (uint16_t)16383u));
      }
      HANDLE_CODE(bref.pack(c.get<ul_only_rohc_s_>().profiles.profile0x0006, 1));
      break;
    default:
      log_invalid_choice_id(type_, "pdcp_cfg_s::drb_s_::hdr_compress_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcp_cfg_s::drb_s_::hdr_compress_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::not_used:
      break;
    case types::rohc:
      HANDLE_CODE(bref.unpack(c.get<rohc_s_>().max_c_id_present, 1));
      HANDLE_CODE(bref.unpack(c.get<rohc_s_>().drb_continue_rohc_present, 1));
      if (c.get<rohc_s_>().max_c_id_present) {
        HANDLE_CODE(unpack_integer(c.get<rohc_s_>().max_c_id, bref, (uint16_t)1u, (uint16_t)16383u));
      }
      HANDLE_CODE(bref.unpack(c.get<rohc_s_>().profiles.profile0x0001, 1));
      HANDLE_CODE(bref.unpack(c.get<rohc_s_>().profiles.profile0x0002, 1));
      HANDLE_CODE(bref.unpack(c.get<rohc_s_>().profiles.profile0x0003, 1));
      HANDLE_CODE(bref.unpack(c.get<rohc_s_>().profiles.profile0x0004, 1));
      HANDLE_CODE(bref.unpack(c.get<rohc_s_>().profiles.profile0x0006, 1));
      HANDLE_CODE(bref.unpack(c.get<rohc_s_>().profiles.profile0x0101, 1));
      HANDLE_CODE(bref.unpack(c.get<rohc_s_>().profiles.profile0x0102, 1));
      HANDLE_CODE(bref.unpack(c.get<rohc_s_>().profiles.profile0x0103, 1));
      HANDLE_CODE(bref.unpack(c.get<rohc_s_>().profiles.profile0x0104, 1));
      break;
    case types::ul_only_rohc:
      HANDLE_CODE(bref.unpack(c.get<ul_only_rohc_s_>().max_c_id_present, 1));
      HANDLE_CODE(bref.unpack(c.get<ul_only_rohc_s_>().drb_continue_rohc_present, 1));
      if (c.get<ul_only_rohc_s_>().max_c_id_present) {
        HANDLE_CODE(unpack_integer(c.get<ul_only_rohc_s_>().max_c_id, bref, (uint16_t)1u, (uint16_t)16383u));
      }
      HANDLE_CODE(bref.unpack(c.get<ul_only_rohc_s_>().profiles.profile0x0006, 1));
      break;
    default:
      log_invalid_choice_id(type_, "pdcp_cfg_s::drb_s_::hdr_compress_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* pdcp_cfg_s::drb_s_::hdr_compress_c_::types_opts::to_string() const
{
  static const char* names[] = {"notUsed", "rohc", "uplinkOnlyROHC"};
  return convert_enum_idx(names, 3, value, "pdcp_cfg_s::drb_s_::hdr_compress_c_::types");
}

const char* pdcp_cfg_s::t_reordering_opts::to_string() const
{
  static const char* names[] = {"ms0",     "ms1",     "ms2",     "ms4",     "ms5",     "ms8",     "ms10",    "ms15",
                                "ms20",    "ms30",    "ms40",    "ms50",    "ms60",    "ms80",    "ms100",   "ms120",
                                "ms140",   "ms160",   "ms180",   "ms200",   "ms220",   "ms240",   "ms260",   "ms280",
                                "ms300",   "ms500",   "ms750",   "ms1000",  "ms1250",  "ms1500",  "ms1750",  "ms2000",
                                "ms2250",  "ms2500",  "ms2750",  "ms3000",  "spare28", "spare27", "spare26", "spare25",
                                "spare24", "spare23", "spare22", "spare21", "spare20", "spare19", "spare18", "spare17",
                                "spare16", "spare15", "spare14", "spare13", "spare12", "spare11", "spare10", "spare09",
                                "spare08", "spare07", "spare06", "spare05", "spare04", "spare03", "spare02", "spare01"};
  return convert_enum_idx(names, 64, value, "pdcp_cfg_s::t_reordering_e_");
}
uint16_t pdcp_cfg_s::t_reordering_opts::to_number() const
{
  static const uint16_t numbers[] = {0,   1,   2,   4,    5,    8,    10,   15,   20,   30,   40,   50,
                                     60,  80,  100, 120,  140,  160,  180,  200,  220,  240,  260,  280,
                                     300, 500, 750, 1000, 1250, 1500, 1750, 2000, 2250, 2500, 2750, 3000};
  return map_enum_number(numbers, 36, value, "pdcp_cfg_s::t_reordering_e_");
}

// SDAP-Config ::= SEQUENCE
SRSASN_CODE sdap_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(mapped_qos_flows_to_add.size() > 0, 1));
  HANDLE_CODE(bref.pack(mapped_qos_flows_to_release.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, pdu_session, (uint16_t)0u, (uint16_t)255u));
  HANDLE_CODE(sdap_hdr_dl.pack(bref));
  HANDLE_CODE(sdap_hdr_ul.pack(bref));
  HANDLE_CODE(bref.pack(default_drb, 1));
  if (mapped_qos_flows_to_add.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, mapped_qos_flows_to_add, 1, 64, integer_packer<uint8_t>(0, 63)));
  }
  if (mapped_qos_flows_to_release.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, mapped_qos_flows_to_release, 1, 64, integer_packer<uint8_t>(0, 63)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sdap_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool mapped_qos_flows_to_add_present;
  HANDLE_CODE(bref.unpack(mapped_qos_flows_to_add_present, 1));
  bool mapped_qos_flows_to_release_present;
  HANDLE_CODE(bref.unpack(mapped_qos_flows_to_release_present, 1));

  HANDLE_CODE(unpack_integer(pdu_session, bref, (uint16_t)0u, (uint16_t)255u));
  HANDLE_CODE(sdap_hdr_dl.unpack(bref));
  HANDLE_CODE(sdap_hdr_ul.unpack(bref));
  HANDLE_CODE(bref.unpack(default_drb, 1));
  if (mapped_qos_flows_to_add_present) {
    HANDLE_CODE(unpack_dyn_seq_of(mapped_qos_flows_to_add, bref, 1, 64, integer_packer<uint8_t>(0, 63)));
  }
  if (mapped_qos_flows_to_release_present) {
    HANDLE_CODE(unpack_dyn_seq_of(mapped_qos_flows_to_release, bref, 1, 64, integer_packer<uint8_t>(0, 63)));
  }

  return SRSASN_SUCCESS;
}
void sdap_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("pdu-Session", pdu_session);
  j.write_str("sdap-HeaderDL", sdap_hdr_dl.to_string());
  j.write_str("sdap-HeaderUL", sdap_hdr_ul.to_string());
  j.write_bool("defaultDRB", default_drb);
  if (mapped_qos_flows_to_add.size() > 0) {
    j.start_array("mappedQoS-FlowsToAdd");
    for (const auto& e1 : mapped_qos_flows_to_add) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (mapped_qos_flows_to_release.size() > 0) {
    j.start_array("mappedQoS-FlowsToRelease");
    for (const auto& e1 : mapped_qos_flows_to_release) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

const char* sdap_cfg_s::sdap_hdr_dl_opts::to_string() const
{
  static const char* names[] = {"present", "absent"};
  return convert_enum_idx(names, 2, value, "sdap_cfg_s::sdap_hdr_dl_e_");
}

const char* sdap_cfg_s::sdap_hdr_ul_opts::to_string() const
{
  static const char* names[] = {"present", "absent"};
  return convert_enum_idx(names, 2, value, "sdap_cfg_s::sdap_hdr_ul_e_");
}

// SL-DRX-Config-r17 ::= SEQUENCE
SRSASN_CODE sl_drx_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_drx_cfg_gc_bc_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_drx_cfg_uc_to_release_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_drx_cfg_uc_to_add_mod_list_r17.size() > 0, 1));

  if (sl_drx_cfg_gc_bc_r17_present) {
    HANDLE_CODE(sl_drx_cfg_gc_bc_r17.pack(bref));
  }
  if (sl_drx_cfg_uc_to_release_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_drx_cfg_uc_to_release_list_r17, 1, 32, integer_packer<uint8_t>(0, 31)));
  }
  if (sl_drx_cfg_uc_to_add_mod_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_drx_cfg_uc_to_add_mod_list_r17, 1, 32));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drx_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_drx_cfg_gc_bc_r17_present, 1));
  bool sl_drx_cfg_uc_to_release_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_drx_cfg_uc_to_release_list_r17_present, 1));
  bool sl_drx_cfg_uc_to_add_mod_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_drx_cfg_uc_to_add_mod_list_r17_present, 1));

  if (sl_drx_cfg_gc_bc_r17_present) {
    HANDLE_CODE(sl_drx_cfg_gc_bc_r17.unpack(bref));
  }
  if (sl_drx_cfg_uc_to_release_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_drx_cfg_uc_to_release_list_r17, bref, 1, 32, integer_packer<uint8_t>(0, 31)));
  }
  if (sl_drx_cfg_uc_to_add_mod_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_drx_cfg_uc_to_add_mod_list_r17, bref, 1, 32));
  }

  return SRSASN_SUCCESS;
}
void sl_drx_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_drx_cfg_gc_bc_r17_present) {
    j.write_fieldname("sl-DRX-ConfigGC-BC-r17");
    sl_drx_cfg_gc_bc_r17.to_json(j);
  }
  if (sl_drx_cfg_uc_to_release_list_r17.size() > 0) {
    j.start_array("sl-DRX-ConfigUC-ToReleaseList-r17");
    for (const auto& e1 : sl_drx_cfg_uc_to_release_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_drx_cfg_uc_to_add_mod_list_r17.size() > 0) {
    j.start_array("sl-DRX-ConfigUC-ToAddModList-r17");
    for (const auto& e1 : sl_drx_cfg_uc_to_add_mod_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// SL-FreqConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_freq_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_absolute_freq_point_a_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_absolute_freq_ssb_r16_present, 1));
  HANDLE_CODE(bref.pack(freq_shift7p5khz_sl_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_bwp_to_release_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_bwp_to_add_mod_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_sync_cfg_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_sync_prio_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, sl_freq_id_r16, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(pack_dyn_seq_of(bref, sl_scs_specific_carrier_list_r16, 1, 5));
  if (sl_absolute_freq_point_a_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_absolute_freq_point_a_r16, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (sl_absolute_freq_ssb_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_absolute_freq_ssb_r16, (uint32_t)0u, (uint32_t)3279165u));
  }
  HANDLE_CODE(pack_integer(bref, value_n_r16, (int8_t)-1, (int8_t)1));
  if (sl_bwp_to_release_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_bwp_to_release_list_r16, 1, 4, integer_packer<uint8_t>(0, 4)));
  }
  if (sl_bwp_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_bwp_to_add_mod_list_r16, 1, 4));
  }
  if (sl_sync_cfg_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_sync_cfg_list_r16, 1, 16));
  }
  if (sl_sync_prio_r16_present) {
    HANDLE_CODE(sl_sync_prio_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_freq_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_absolute_freq_point_a_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_absolute_freq_ssb_r16_present, 1));
  HANDLE_CODE(bref.unpack(freq_shift7p5khz_sl_r16_present, 1));
  bool sl_bwp_to_release_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_bwp_to_release_list_r16_present, 1));
  bool sl_bwp_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_bwp_to_add_mod_list_r16_present, 1));
  bool sl_sync_cfg_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_sync_cfg_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_sync_prio_r16_present, 1));

  HANDLE_CODE(unpack_integer(sl_freq_id_r16, bref, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(unpack_dyn_seq_of(sl_scs_specific_carrier_list_r16, bref, 1, 5));
  if (sl_absolute_freq_point_a_r16_present) {
    HANDLE_CODE(unpack_integer(sl_absolute_freq_point_a_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (sl_absolute_freq_ssb_r16_present) {
    HANDLE_CODE(unpack_integer(sl_absolute_freq_ssb_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  }
  HANDLE_CODE(unpack_integer(value_n_r16, bref, (int8_t)-1, (int8_t)1));
  if (sl_bwp_to_release_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_bwp_to_release_list_r16, bref, 1, 4, integer_packer<uint8_t>(0, 4)));
  }
  if (sl_bwp_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_bwp_to_add_mod_list_r16, bref, 1, 4));
  }
  if (sl_sync_cfg_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_sync_cfg_list_r16, bref, 1, 16));
  }
  if (sl_sync_prio_r16_present) {
    HANDLE_CODE(sl_sync_prio_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_freq_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-Freq-Id-r16", sl_freq_id_r16);
  j.start_array("sl-SCS-SpecificCarrierList-r16");
  for (const auto& e1 : sl_scs_specific_carrier_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  if (sl_absolute_freq_point_a_r16_present) {
    j.write_int("sl-AbsoluteFrequencyPointA-r16", sl_absolute_freq_point_a_r16);
  }
  if (sl_absolute_freq_ssb_r16_present) {
    j.write_int("sl-AbsoluteFrequencySSB-r16", sl_absolute_freq_ssb_r16);
  }
  if (freq_shift7p5khz_sl_r16_present) {
    j.write_str("frequencyShift7p5khzSL-r16", "true");
  }
  j.write_int("valueN-r16", value_n_r16);
  if (sl_bwp_to_release_list_r16.size() > 0) {
    j.start_array("sl-BWP-ToReleaseList-r16");
    for (const auto& e1 : sl_bwp_to_release_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_bwp_to_add_mod_list_r16.size() > 0) {
    j.start_array("sl-BWP-ToAddModList-r16");
    for (const auto& e1 : sl_bwp_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_sync_cfg_list_r16.size() > 0) {
    j.start_array("sl-SyncConfigList-r16");
    for (const auto& e1 : sl_sync_cfg_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_sync_prio_r16_present) {
    j.write_str("sl-SyncPriority-r16", sl_sync_prio_r16.to_string());
  }
  j.end_obj();
}

const char* sl_freq_cfg_r16_s::sl_sync_prio_r16_opts::to_string() const
{
  static const char* names[] = {"gnss", "gnbEnb"};
  return convert_enum_idx(names, 2, value, "sl_freq_cfg_r16_s::sl_sync_prio_r16_e_");
}

// SL-MappingToAddMod-r17 ::= SEQUENCE
SRSASN_CODE sl_map_to_add_mod_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_egress_rlc_ch_uu_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_egress_rlc_ch_pc5_r17_present, 1));

  HANDLE_CODE(sl_remote_ue_rb_id_r17.pack(bref));
  if (sl_egress_rlc_ch_uu_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_egress_rlc_ch_uu_r17, (uint8_t)1u, (uint8_t)32u));
  }
  if (sl_egress_rlc_ch_pc5_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_egress_rlc_ch_pc5_r17, (uint16_t)1u, (uint16_t)512u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_map_to_add_mod_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_egress_rlc_ch_uu_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_egress_rlc_ch_pc5_r17_present, 1));

  HANDLE_CODE(sl_remote_ue_rb_id_r17.unpack(bref));
  if (sl_egress_rlc_ch_uu_r17_present) {
    HANDLE_CODE(unpack_integer(sl_egress_rlc_ch_uu_r17, bref, (uint8_t)1u, (uint8_t)32u));
  }
  if (sl_egress_rlc_ch_pc5_r17_present) {
    HANDLE_CODE(unpack_integer(sl_egress_rlc_ch_pc5_r17, bref, (uint16_t)1u, (uint16_t)512u));
  }

  return SRSASN_SUCCESS;
}
void sl_map_to_add_mod_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sl-RemoteUE-RB-Identity-r17");
  sl_remote_ue_rb_id_r17.to_json(j);
  if (sl_egress_rlc_ch_uu_r17_present) {
    j.write_int("sl-EgressRLC-ChannelUu-r17", sl_egress_rlc_ch_uu_r17);
  }
  if (sl_egress_rlc_ch_pc5_r17_present) {
    j.write_int("sl-EgressRLC-ChannelPC5-r17", sl_egress_rlc_ch_pc5_r17);
  }
  j.end_obj();
}

// SL-MeasConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_meas_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_meas_obj_to_rem_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_meas_obj_to_add_mod_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_report_cfg_to_rem_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_report_cfg_to_add_mod_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_meas_id_to_rem_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_meas_id_to_add_mod_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_quant_cfg_r16_present, 1));

  if (sl_meas_obj_to_rem_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_meas_obj_to_rem_list_r16, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (sl_meas_obj_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_meas_obj_to_add_mod_list_r16, 1, 64));
  }
  if (sl_report_cfg_to_rem_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_report_cfg_to_rem_list_r16, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (sl_report_cfg_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_report_cfg_to_add_mod_list_r16, 1, 64));
  }
  if (sl_meas_id_to_rem_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_meas_id_to_rem_list_r16, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (sl_meas_id_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_meas_id_to_add_mod_list_r16, 1, 64));
  }
  if (sl_quant_cfg_r16_present) {
    HANDLE_CODE(sl_quant_cfg_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_meas_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sl_meas_obj_to_rem_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_meas_obj_to_rem_list_r16_present, 1));
  bool sl_meas_obj_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_meas_obj_to_add_mod_list_r16_present, 1));
  bool sl_report_cfg_to_rem_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_report_cfg_to_rem_list_r16_present, 1));
  bool sl_report_cfg_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_report_cfg_to_add_mod_list_r16_present, 1));
  bool sl_meas_id_to_rem_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_meas_id_to_rem_list_r16_present, 1));
  bool sl_meas_id_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_meas_id_to_add_mod_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_quant_cfg_r16_present, 1));

  if (sl_meas_obj_to_rem_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_meas_obj_to_rem_list_r16, bref, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (sl_meas_obj_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_meas_obj_to_add_mod_list_r16, bref, 1, 64));
  }
  if (sl_report_cfg_to_rem_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_report_cfg_to_rem_list_r16, bref, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (sl_report_cfg_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_report_cfg_to_add_mod_list_r16, bref, 1, 64));
  }
  if (sl_meas_id_to_rem_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_meas_id_to_rem_list_r16, bref, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (sl_meas_id_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_meas_id_to_add_mod_list_r16, bref, 1, 64));
  }
  if (sl_quant_cfg_r16_present) {
    HANDLE_CODE(sl_quant_cfg_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_meas_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_meas_obj_to_rem_list_r16.size() > 0) {
    j.start_array("sl-MeasObjectToRemoveList-r16");
    for (const auto& e1 : sl_meas_obj_to_rem_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_meas_obj_to_add_mod_list_r16.size() > 0) {
    j.start_array("sl-MeasObjectToAddModList-r16");
    for (const auto& e1 : sl_meas_obj_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_report_cfg_to_rem_list_r16.size() > 0) {
    j.start_array("sl-ReportConfigToRemoveList-r16");
    for (const auto& e1 : sl_report_cfg_to_rem_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_report_cfg_to_add_mod_list_r16.size() > 0) {
    j.start_array("sl-ReportConfigToAddModList-r16");
    for (const auto& e1 : sl_report_cfg_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_meas_id_to_rem_list_r16.size() > 0) {
    j.start_array("sl-MeasIdToRemoveList-r16");
    for (const auto& e1 : sl_meas_id_to_rem_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_meas_id_to_add_mod_list_r16.size() > 0) {
    j.start_array("sl-MeasIdToAddModList-r16");
    for (const auto& e1 : sl_meas_id_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_quant_cfg_r16_present) {
    j.write_fieldname("sl-QuantityConfig-r16");
    sl_quant_cfg_r16.to_json(j);
  }
  j.end_obj();
}

// SL-PDCP-Config-r16 ::= SEQUENCE
SRSASN_CODE sl_pdcp_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_discard_timer_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_pdcp_sn_size_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_out_of_order_delivery_present, 1));

  if (sl_discard_timer_r16_present) {
    HANDLE_CODE(sl_discard_timer_r16.pack(bref));
  }
  if (sl_pdcp_sn_size_r16_present) {
    HANDLE_CODE(sl_pdcp_sn_size_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_pdcp_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_discard_timer_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_pdcp_sn_size_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_out_of_order_delivery_present, 1));

  if (sl_discard_timer_r16_present) {
    HANDLE_CODE(sl_discard_timer_r16.unpack(bref));
  }
  if (sl_pdcp_sn_size_r16_present) {
    HANDLE_CODE(sl_pdcp_sn_size_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_pdcp_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_discard_timer_r16_present) {
    j.write_str("sl-DiscardTimer-r16", sl_discard_timer_r16.to_string());
  }
  if (sl_pdcp_sn_size_r16_present) {
    j.write_str("sl-PDCP-SN-Size-r16", sl_pdcp_sn_size_r16.to_string());
  }
  if (sl_out_of_order_delivery_present) {
    j.write_str("sl-OutOfOrderDelivery", "true");
  }
  j.end_obj();
}

const char* sl_pdcp_cfg_r16_s::sl_discard_timer_r16_opts::to_string() const
{
  static const char* names[] = {"ms3",
                                "ms10",
                                "ms20",
                                "ms25",
                                "ms30",
                                "ms40",
                                "ms50",
                                "ms60",
                                "ms75",
                                "ms100",
                                "ms150",
                                "ms200",
                                "ms250",
                                "ms300",
                                "ms500",
                                "ms750",
                                "ms1500",
                                "infinity"};
  return convert_enum_idx(names, 18, value, "sl_pdcp_cfg_r16_s::sl_discard_timer_r16_e_");
}
int16_t sl_pdcp_cfg_r16_s::sl_discard_timer_r16_opts::to_number() const
{
  static const int16_t numbers[] = {3, 10, 20, 25, 30, 40, 50, 60, 75, 100, 150, 200, 250, 300, 500, 750, 1500, -1};
  return map_enum_number(numbers, 18, value, "sl_pdcp_cfg_r16_s::sl_discard_timer_r16_e_");
}

const char* sl_pdcp_cfg_r16_s::sl_pdcp_sn_size_r16_opts::to_string() const
{
  static const char* names[] = {"len12bits", "len18bits"};
  return convert_enum_idx(names, 2, value, "sl_pdcp_cfg_r16_s::sl_pdcp_sn_size_r16_e_");
}
uint8_t sl_pdcp_cfg_r16_s::sl_pdcp_sn_size_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {12, 18};
  return map_enum_number(numbers, 2, value, "sl_pdcp_cfg_r16_s::sl_pdcp_sn_size_r16_e_");
}

// SL-RLC-BearerConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_rlc_bearer_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_served_radio_bearer_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_rlc_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_mac_lc_ch_cfg_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, sl_rlc_bearer_cfg_idx_r16, (uint16_t)1u, (uint16_t)512u));
  if (sl_served_radio_bearer_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_served_radio_bearer_r16, (uint16_t)1u, (uint16_t)512u));
  }
  if (sl_rlc_cfg_r16_present) {
    HANDLE_CODE(sl_rlc_cfg_r16.pack(bref));
  }
  if (sl_mac_lc_ch_cfg_r16_present) {
    HANDLE_CODE(sl_mac_lc_ch_cfg_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_rlc_bearer_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_served_radio_bearer_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_rlc_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_mac_lc_ch_cfg_r16_present, 1));

  HANDLE_CODE(unpack_integer(sl_rlc_bearer_cfg_idx_r16, bref, (uint16_t)1u, (uint16_t)512u));
  if (sl_served_radio_bearer_r16_present) {
    HANDLE_CODE(unpack_integer(sl_served_radio_bearer_r16, bref, (uint16_t)1u, (uint16_t)512u));
  }
  if (sl_rlc_cfg_r16_present) {
    HANDLE_CODE(sl_rlc_cfg_r16.unpack(bref));
  }
  if (sl_mac_lc_ch_cfg_r16_present) {
    HANDLE_CODE(sl_mac_lc_ch_cfg_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_rlc_bearer_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-RLC-BearerConfigIndex-r16", sl_rlc_bearer_cfg_idx_r16);
  if (sl_served_radio_bearer_r16_present) {
    j.write_int("sl-ServedRadioBearer-r16", sl_served_radio_bearer_r16);
  }
  if (sl_rlc_cfg_r16_present) {
    j.write_fieldname("sl-RLC-Config-r16");
    sl_rlc_cfg_r16.to_json(j);
  }
  if (sl_mac_lc_ch_cfg_r16_present) {
    j.write_fieldname("sl-MAC-LogicalChannelConfig-r16");
    sl_mac_lc_ch_cfg_r16.to_json(j);
  }
  j.end_obj();
}

// SL-RLC-ChannelConfig-r17 ::= SEQUENCE
SRSASN_CODE sl_rlc_ch_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_rlc_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_mac_lc_ch_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_packet_delay_budget_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, sl_rlc_ch_id_r17, (uint16_t)1u, (uint16_t)512u));
  if (sl_rlc_cfg_r17_present) {
    HANDLE_CODE(sl_rlc_cfg_r17.pack(bref));
  }
  if (sl_mac_lc_ch_cfg_r17_present) {
    HANDLE_CODE(sl_mac_lc_ch_cfg_r17.pack(bref));
  }
  if (sl_packet_delay_budget_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_packet_delay_budget_r17, (uint16_t)0u, (uint16_t)1023u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_rlc_ch_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_rlc_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_mac_lc_ch_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_packet_delay_budget_r17_present, 1));

  HANDLE_CODE(unpack_integer(sl_rlc_ch_id_r17, bref, (uint16_t)1u, (uint16_t)512u));
  if (sl_rlc_cfg_r17_present) {
    HANDLE_CODE(sl_rlc_cfg_r17.unpack(bref));
  }
  if (sl_mac_lc_ch_cfg_r17_present) {
    HANDLE_CODE(sl_mac_lc_ch_cfg_r17.unpack(bref));
  }
  if (sl_packet_delay_budget_r17_present) {
    HANDLE_CODE(unpack_integer(sl_packet_delay_budget_r17, bref, (uint16_t)0u, (uint16_t)1023u));
  }

  return SRSASN_SUCCESS;
}
void sl_rlc_ch_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-RLC-ChannelID-r17", sl_rlc_ch_id_r17);
  if (sl_rlc_cfg_r17_present) {
    j.write_fieldname("sl-RLC-Config-r17");
    sl_rlc_cfg_r17.to_json(j);
  }
  if (sl_mac_lc_ch_cfg_r17_present) {
    j.write_fieldname("sl-MAC-LogicalChannelConfig-r17");
    sl_mac_lc_ch_cfg_r17.to_json(j);
  }
  if (sl_packet_delay_budget_r17_present) {
    j.write_int("sl-PacketDelayBudget-r17", sl_packet_delay_budget_r17);
  }
  j.end_obj();
}

// SL-RelayUE-Config-r17 ::= SEQUENCE
SRSASN_CODE sl_relay_ue_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(thresh_high_relay_r17_present, 1));
  HANDLE_CODE(bref.pack(thresh_low_relay_r17_present, 1));
  HANDLE_CODE(bref.pack(hyst_max_relay_r17_present, 1));
  HANDLE_CODE(bref.pack(hyst_min_relay_r17_present, 1));

  if (thresh_high_relay_r17_present) {
    HANDLE_CODE(pack_integer(bref, thresh_high_relay_r17, (uint8_t)0u, (uint8_t)127u));
  }
  if (thresh_low_relay_r17_present) {
    HANDLE_CODE(pack_integer(bref, thresh_low_relay_r17, (uint8_t)0u, (uint8_t)127u));
  }
  if (hyst_max_relay_r17_present) {
    HANDLE_CODE(pack_integer(bref, hyst_max_relay_r17, (uint8_t)0u, (uint8_t)30u));
  }
  if (hyst_min_relay_r17_present) {
    HANDLE_CODE(pack_integer(bref, hyst_min_relay_r17, (uint8_t)0u, (uint8_t)30u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_relay_ue_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(thresh_high_relay_r17_present, 1));
  HANDLE_CODE(bref.unpack(thresh_low_relay_r17_present, 1));
  HANDLE_CODE(bref.unpack(hyst_max_relay_r17_present, 1));
  HANDLE_CODE(bref.unpack(hyst_min_relay_r17_present, 1));

  if (thresh_high_relay_r17_present) {
    HANDLE_CODE(unpack_integer(thresh_high_relay_r17, bref, (uint8_t)0u, (uint8_t)127u));
  }
  if (thresh_low_relay_r17_present) {
    HANDLE_CODE(unpack_integer(thresh_low_relay_r17, bref, (uint8_t)0u, (uint8_t)127u));
  }
  if (hyst_max_relay_r17_present) {
    HANDLE_CODE(unpack_integer(hyst_max_relay_r17, bref, (uint8_t)0u, (uint8_t)30u));
  }
  if (hyst_min_relay_r17_present) {
    HANDLE_CODE(unpack_integer(hyst_min_relay_r17, bref, (uint8_t)0u, (uint8_t)30u));
  }

  return SRSASN_SUCCESS;
}
void sl_relay_ue_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (thresh_high_relay_r17_present) {
    j.write_int("threshHighRelay-r17", thresh_high_relay_r17);
  }
  if (thresh_low_relay_r17_present) {
    j.write_int("threshLowRelay-r17", thresh_low_relay_r17);
  }
  if (hyst_max_relay_r17_present) {
    j.write_int("hystMaxRelay-r17", hyst_max_relay_r17);
  }
  if (hyst_min_relay_r17_present) {
    j.write_int("hystMinRelay-r17", hyst_min_relay_r17);
  }
  j.end_obj();
}

// SL-RemoteUE-Config-r17 ::= SEQUENCE
SRSASN_CODE sl_remote_ue_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(thresh_high_remote_r17_present, 1));
  HANDLE_CODE(bref.pack(hyst_max_remote_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_resel_cfg_r17_present, 1));

  if (thresh_high_remote_r17_present) {
    HANDLE_CODE(pack_integer(bref, thresh_high_remote_r17, (uint8_t)0u, (uint8_t)127u));
  }
  if (hyst_max_remote_r17_present) {
    HANDLE_CODE(pack_integer(bref, hyst_max_remote_r17, (uint8_t)0u, (uint8_t)30u));
  }
  if (sl_resel_cfg_r17_present) {
    HANDLE_CODE(sl_resel_cfg_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_remote_ue_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(thresh_high_remote_r17_present, 1));
  HANDLE_CODE(bref.unpack(hyst_max_remote_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_resel_cfg_r17_present, 1));

  if (thresh_high_remote_r17_present) {
    HANDLE_CODE(unpack_integer(thresh_high_remote_r17, bref, (uint8_t)0u, (uint8_t)127u));
  }
  if (hyst_max_remote_r17_present) {
    HANDLE_CODE(unpack_integer(hyst_max_remote_r17, bref, (uint8_t)0u, (uint8_t)30u));
  }
  if (sl_resel_cfg_r17_present) {
    HANDLE_CODE(sl_resel_cfg_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_remote_ue_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (thresh_high_remote_r17_present) {
    j.write_int("threshHighRemote-r17", thresh_high_remote_r17);
  }
  if (hyst_max_remote_r17_present) {
    j.write_int("hystMaxRemote-r17", hyst_max_remote_r17);
  }
  if (sl_resel_cfg_r17_present) {
    j.write_fieldname("sl-ReselectionConfig-r17");
    sl_resel_cfg_r17.to_json(j);
  }
  j.end_obj();
}

// SL-SDAP-Config-r16 ::= SEQUENCE
SRSASN_CODE sl_sdap_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_mapped_qos_flows_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_cast_type_r16_present, 1));

  HANDLE_CODE(sl_sdap_hdr_r16.pack(bref));
  HANDLE_CODE(bref.pack(sl_default_rb_r16, 1));
  if (sl_mapped_qos_flows_r16_present) {
    HANDLE_CODE(sl_mapped_qos_flows_r16.pack(bref));
  }
  if (sl_cast_type_r16_present) {
    HANDLE_CODE(sl_cast_type_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_sdap_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_mapped_qos_flows_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_cast_type_r16_present, 1));

  HANDLE_CODE(sl_sdap_hdr_r16.unpack(bref));
  HANDLE_CODE(bref.unpack(sl_default_rb_r16, 1));
  if (sl_mapped_qos_flows_r16_present) {
    HANDLE_CODE(sl_mapped_qos_flows_r16.unpack(bref));
  }
  if (sl_cast_type_r16_present) {
    HANDLE_CODE(sl_cast_type_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_sdap_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sl-SDAP-Header-r16", sl_sdap_hdr_r16.to_string());
  j.write_bool("sl-DefaultRB-r16", sl_default_rb_r16);
  if (sl_mapped_qos_flows_r16_present) {
    j.write_fieldname("sl-MappedQoS-Flows-r16");
    sl_mapped_qos_flows_r16.to_json(j);
  }
  if (sl_cast_type_r16_present) {
    j.write_str("sl-CastType-r16", sl_cast_type_r16.to_string());
  }
  j.end_obj();
}

const char* sl_sdap_cfg_r16_s::sl_sdap_hdr_r16_opts::to_string() const
{
  static const char* names[] = {"present", "absent"};
  return convert_enum_idx(names, 2, value, "sl_sdap_cfg_r16_s::sl_sdap_hdr_r16_e_");
}

void sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_::destroy_()
{
  switch (type_) {
    case types::sl_mapped_qos_flows_list_r16:
      c.destroy<sl_mapped_qos_flows_list_r16_l_>();
      break;
    case types::sl_mapped_qos_flows_list_ded_r16:
      c.destroy<sl_mapped_qos_flows_list_ded_r16_s>();
      break;
    default:
      break;
  }
}
void sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::sl_mapped_qos_flows_list_r16:
      c.init<sl_mapped_qos_flows_list_r16_l_>();
      break;
    case types::sl_mapped_qos_flows_list_ded_r16:
      c.init<sl_mapped_qos_flows_list_ded_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_");
  }
}
sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_::sl_mapped_qos_flows_r16_c_(
    const sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sl_mapped_qos_flows_list_r16:
      c.init(other.c.get<sl_mapped_qos_flows_list_r16_l_>());
      break;
    case types::sl_mapped_qos_flows_list_ded_r16:
      c.init(other.c.get<sl_mapped_qos_flows_list_ded_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_");
  }
}
sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_&
sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_::operator=(const sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sl_mapped_qos_flows_list_r16:
      c.set(other.c.get<sl_mapped_qos_flows_list_r16_l_>());
      break;
    case types::sl_mapped_qos_flows_list_ded_r16:
      c.set(other.c.get<sl_mapped_qos_flows_list_ded_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_");
  }

  return *this;
}
sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_::sl_mapped_qos_flows_list_r16_l_&
sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_::set_sl_mapped_qos_flows_list_r16()
{
  set(types::sl_mapped_qos_flows_list_r16);
  return c.get<sl_mapped_qos_flows_list_r16_l_>();
}
sl_mapped_qos_flows_list_ded_r16_s&
sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_::set_sl_mapped_qos_flows_list_ded_r16()
{
  set(types::sl_mapped_qos_flows_list_ded_r16);
  return c.get<sl_mapped_qos_flows_list_ded_r16_s>();
}
void sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sl_mapped_qos_flows_list_r16:
      j.start_array("sl-MappedQoS-FlowsList-r16");
      for (const auto& e1 : c.get<sl_mapped_qos_flows_list_r16_l_>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sl_mapped_qos_flows_list_ded_r16:
      j.write_fieldname("sl-MappedQoS-FlowsListDedicated-r16");
      c.get<sl_mapped_qos_flows_list_ded_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sl_mapped_qos_flows_list_r16:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sl_mapped_qos_flows_list_r16_l_>(), 1, 2048));
      break;
    case types::sl_mapped_qos_flows_list_ded_r16:
      HANDLE_CODE(c.get<sl_mapped_qos_flows_list_ded_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sl_mapped_qos_flows_list_r16:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sl_mapped_qos_flows_list_r16_l_>(), bref, 1, 2048));
      break;
    case types::sl_mapped_qos_flows_list_ded_r16:
      HANDLE_CODE(c.get<sl_mapped_qos_flows_list_ded_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"sl-MappedQoS-FlowsList-r16", "sl-MappedQoS-FlowsListDedicated-r16"};
  return convert_enum_idx(names, 2, value, "sl_sdap_cfg_r16_s::sl_mapped_qos_flows_r16_c_::types");
}

const char* sl_sdap_cfg_r16_s::sl_cast_type_r16_opts::to_string() const
{
  static const char* names[] = {"broadcast", "groupcast", "unicast", "spare1"};
  return convert_enum_idx(names, 4, value, "sl_sdap_cfg_r16_s::sl_cast_type_r16_e_");
}

// SL-ScheduledConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_sched_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(mac_main_cfg_sl_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_cs_rnti_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_psfch_to_pucch_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_cfg_grant_cfg_list_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, sl_rnti_r16, (uint32_t)0u, (uint32_t)65535u));
  if (mac_main_cfg_sl_r16_present) {
    HANDLE_CODE(mac_main_cfg_sl_r16.pack(bref));
  }
  if (sl_cs_rnti_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_cs_rnti_r16, (uint32_t)0u, (uint32_t)65535u));
  }
  if (sl_psfch_to_pucch_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_psfch_to_pucch_r16, 1, 8, integer_packer<uint8_t>(0, 15)));
  }
  if (sl_cfg_grant_cfg_list_r16_present) {
    HANDLE_CODE(sl_cfg_grant_cfg_list_r16.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sl_dci_to_sl_trans_r16.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_dci_to_sl_trans_r16.is_present(), 1));
      if (sl_dci_to_sl_trans_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *sl_dci_to_sl_trans_r16, 1, 8, integer_packer<uint8_t>(1, 32)));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_sched_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(mac_main_cfg_sl_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_cs_rnti_r16_present, 1));
  bool sl_psfch_to_pucch_r16_present;
  HANDLE_CODE(bref.unpack(sl_psfch_to_pucch_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_cfg_grant_cfg_list_r16_present, 1));

  HANDLE_CODE(unpack_integer(sl_rnti_r16, bref, (uint32_t)0u, (uint32_t)65535u));
  if (mac_main_cfg_sl_r16_present) {
    HANDLE_CODE(mac_main_cfg_sl_r16.unpack(bref));
  }
  if (sl_cs_rnti_r16_present) {
    HANDLE_CODE(unpack_integer(sl_cs_rnti_r16, bref, (uint32_t)0u, (uint32_t)65535u));
  }
  if (sl_psfch_to_pucch_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_psfch_to_pucch_r16, bref, 1, 8, integer_packer<uint8_t>(0, 15)));
  }
  if (sl_cfg_grant_cfg_list_r16_present) {
    HANDLE_CODE(sl_cfg_grant_cfg_list_r16.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sl_dci_to_sl_trans_r16, bref);
      if (sl_dci_to_sl_trans_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*sl_dci_to_sl_trans_r16, bref, 1, 8, integer_packer<uint8_t>(1, 32)));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sl_sched_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-RNTI-r16", sl_rnti_r16);
  if (mac_main_cfg_sl_r16_present) {
    j.write_fieldname("mac-MainConfigSL-r16");
    mac_main_cfg_sl_r16.to_json(j);
  }
  if (sl_cs_rnti_r16_present) {
    j.write_int("sl-CS-RNTI-r16", sl_cs_rnti_r16);
  }
  if (sl_psfch_to_pucch_r16.size() > 0) {
    j.start_array("sl-PSFCH-ToPUCCH-r16");
    for (const auto& e1 : sl_psfch_to_pucch_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_cfg_grant_cfg_list_r16_present) {
    j.write_fieldname("sl-ConfiguredGrantConfigList-r16");
    sl_cfg_grant_cfg_list_r16.to_json(j);
  }
  if (ext) {
    if (sl_dci_to_sl_trans_r16.is_present()) {
      j.start_array("sl-DCI-ToSL-Trans-r16");
      for (const auto& e1 : *sl_dci_to_sl_trans_r16) {
        j.write_int(e1);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

// SL-UE-SelectedConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_ue_sel_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_pssch_tx_cfg_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_prob_res_keep_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_reselect_after_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_cbr_common_tx_cfg_list_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_prioritization_thres_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_prioritization_thres_r16_present, 1));

  if (sl_pssch_tx_cfg_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_pssch_tx_cfg_list_r16, 1, 16));
  }
  if (sl_prob_res_keep_r16_present) {
    HANDLE_CODE(sl_prob_res_keep_r16.pack(bref));
  }
  if (sl_reselect_after_r16_present) {
    HANDLE_CODE(sl_reselect_after_r16.pack(bref));
  }
  if (sl_cbr_common_tx_cfg_list_r16_present) {
    HANDLE_CODE(sl_cbr_common_tx_cfg_list_r16.pack(bref));
  }
  if (ul_prioritization_thres_r16_present) {
    HANDLE_CODE(pack_integer(bref, ul_prioritization_thres_r16, (uint8_t)1u, (uint8_t)16u));
  }
  if (sl_prioritization_thres_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_prioritization_thres_r16, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_ue_sel_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sl_pssch_tx_cfg_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_pssch_tx_cfg_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_prob_res_keep_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_reselect_after_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_cbr_common_tx_cfg_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_prioritization_thres_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_prioritization_thres_r16_present, 1));

  if (sl_pssch_tx_cfg_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_pssch_tx_cfg_list_r16, bref, 1, 16));
  }
  if (sl_prob_res_keep_r16_present) {
    HANDLE_CODE(sl_prob_res_keep_r16.unpack(bref));
  }
  if (sl_reselect_after_r16_present) {
    HANDLE_CODE(sl_reselect_after_r16.unpack(bref));
  }
  if (sl_cbr_common_tx_cfg_list_r16_present) {
    HANDLE_CODE(sl_cbr_common_tx_cfg_list_r16.unpack(bref));
  }
  if (ul_prioritization_thres_r16_present) {
    HANDLE_CODE(unpack_integer(ul_prioritization_thres_r16, bref, (uint8_t)1u, (uint8_t)16u));
  }
  if (sl_prioritization_thres_r16_present) {
    HANDLE_CODE(unpack_integer(sl_prioritization_thres_r16, bref, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
void sl_ue_sel_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_pssch_tx_cfg_list_r16.size() > 0) {
    j.start_array("sl-PSSCH-TxConfigList-r16");
    for (const auto& e1 : sl_pssch_tx_cfg_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_prob_res_keep_r16_present) {
    j.write_str("sl-ProbResourceKeep-r16", sl_prob_res_keep_r16.to_string());
  }
  if (sl_reselect_after_r16_present) {
    j.write_str("sl-ReselectAfter-r16", sl_reselect_after_r16.to_string());
  }
  if (sl_cbr_common_tx_cfg_list_r16_present) {
    j.write_fieldname("sl-CBR-CommonTxConfigList-r16");
    sl_cbr_common_tx_cfg_list_r16.to_json(j);
  }
  if (ul_prioritization_thres_r16_present) {
    j.write_int("ul-PrioritizationThres-r16", ul_prioritization_thres_r16);
  }
  if (sl_prioritization_thres_r16_present) {
    j.write_int("sl-PrioritizationThres-r16", sl_prioritization_thres_r16);
  }
  j.end_obj();
}

const char* sl_ue_sel_cfg_r16_s::sl_prob_res_keep_r16_opts::to_string() const
{
  static const char* names[] = {"v0", "v0dot2", "v0dot4", "v0dot6", "v0dot8"};
  return convert_enum_idx(names, 5, value, "sl_ue_sel_cfg_r16_s::sl_prob_res_keep_r16_e_");
}
float sl_ue_sel_cfg_r16_s::sl_prob_res_keep_r16_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.2, 0.4, 0.6, 0.8};
  return map_enum_number(numbers, 5, value, "sl_ue_sel_cfg_r16_s::sl_prob_res_keep_r16_e_");
}
const char* sl_ue_sel_cfg_r16_s::sl_prob_res_keep_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.2", "0.4", "0.6", "0.8"};
  return convert_enum_idx(number_strs, 5, value, "sl_ue_sel_cfg_r16_s::sl_prob_res_keep_r16_e_");
}

const char* sl_ue_sel_cfg_r16_s::sl_reselect_after_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n5", "n6", "n7", "n8", "n9"};
  return convert_enum_idx(names, 9, value, "sl_ue_sel_cfg_r16_s::sl_reselect_after_r16_e_");
}
uint8_t sl_ue_sel_cfg_r16_s::sl_reselect_after_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
  return map_enum_number(numbers, 9, value, "sl_ue_sel_cfg_r16_s::sl_reselect_after_r16_e_");
}

// TMGI-r17 ::= SEQUENCE
SRSASN_CODE tmgi_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(plmn_id_r17.pack(bref));
  HANDLE_CODE(service_id_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE tmgi_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(plmn_id_r17.unpack(bref));
  HANDLE_CODE(service_id_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void tmgi_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("plmn-Id-r17");
  plmn_id_r17.to_json(j);
  j.write_str("serviceId-r17", service_id_r17.to_string());
  j.end_obj();
}

void tmgi_r17_s::plmn_id_r17_c_::destroy_()
{
  switch (type_) {
    case types::explicit_value:
      c.destroy<plmn_id_s>();
      break;
    default:
      break;
  }
}
void tmgi_r17_s::plmn_id_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::plmn_idx:
      break;
    case types::explicit_value:
      c.init<plmn_id_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "tmgi_r17_s::plmn_id_r17_c_");
  }
}
tmgi_r17_s::plmn_id_r17_c_::plmn_id_r17_c_(const tmgi_r17_s::plmn_id_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::plmn_idx:
      c.init(other.c.get<uint8_t>());
      break;
    case types::explicit_value:
      c.init(other.c.get<plmn_id_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "tmgi_r17_s::plmn_id_r17_c_");
  }
}
tmgi_r17_s::plmn_id_r17_c_& tmgi_r17_s::plmn_id_r17_c_::operator=(const tmgi_r17_s::plmn_id_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::plmn_idx:
      c.set(other.c.get<uint8_t>());
      break;
    case types::explicit_value:
      c.set(other.c.get<plmn_id_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "tmgi_r17_s::plmn_id_r17_c_");
  }

  return *this;
}
uint8_t& tmgi_r17_s::plmn_id_r17_c_::set_plmn_idx()
{
  set(types::plmn_idx);
  return c.get<uint8_t>();
}
plmn_id_s& tmgi_r17_s::plmn_id_r17_c_::set_explicit_value()
{
  set(types::explicit_value);
  return c.get<plmn_id_s>();
}
void tmgi_r17_s::plmn_id_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::plmn_idx:
      j.write_int("plmn-Index", c.get<uint8_t>());
      break;
    case types::explicit_value:
      j.write_fieldname("explicitValue");
      c.get<plmn_id_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "tmgi_r17_s::plmn_id_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE tmgi_r17_s::plmn_id_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::plmn_idx:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)12u));
      break;
    case types::explicit_value:
      HANDLE_CODE(c.get<plmn_id_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "tmgi_r17_s::plmn_id_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE tmgi_r17_s::plmn_id_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::plmn_idx:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)12u));
      break;
    case types::explicit_value:
      HANDLE_CODE(c.get<plmn_id_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "tmgi_r17_s::plmn_id_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* tmgi_r17_s::plmn_id_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"plmn-Index", "explicitValue"};
  return convert_enum_idx(names, 2, value, "tmgi_r17_s::plmn_id_r17_c_::types");
}

// DRB-ToAddMod ::= SEQUENCE
SRSASN_CODE drb_to_add_mod_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cn_assoc_present, 1));
  HANDLE_CODE(bref.pack(reestablish_pdcp_present, 1));
  HANDLE_CODE(bref.pack(recover_pdcp_present, 1));
  HANDLE_CODE(bref.pack(pdcp_cfg_present, 1));

  if (cn_assoc_present) {
    HANDLE_CODE(cn_assoc.pack(bref));
  }
  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u));
  if (pdcp_cfg_present) {
    HANDLE_CODE(pdcp_cfg.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= daps_cfg_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(daps_cfg_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE drb_to_add_mod_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(cn_assoc_present, 1));
  HANDLE_CODE(bref.unpack(reestablish_pdcp_present, 1));
  HANDLE_CODE(bref.unpack(recover_pdcp_present, 1));
  HANDLE_CODE(bref.unpack(pdcp_cfg_present, 1));

  if (cn_assoc_present) {
    HANDLE_CODE(cn_assoc.unpack(bref));
  }
  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u));
  if (pdcp_cfg_present) {
    HANDLE_CODE(pdcp_cfg.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(daps_cfg_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void drb_to_add_mod_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (cn_assoc_present) {
    j.write_fieldname("cnAssociation");
    cn_assoc.to_json(j);
  }
  j.write_int("drb-Identity", drb_id);
  if (reestablish_pdcp_present) {
    j.write_str("reestablishPDCP", "true");
  }
  if (recover_pdcp_present) {
    j.write_str("recoverPDCP", "true");
  }
  if (pdcp_cfg_present) {
    j.write_fieldname("pdcp-Config");
    pdcp_cfg.to_json(j);
  }
  if (ext) {
    if (daps_cfg_r16_present) {
      j.write_str("daps-Config-r16", "true");
    }
  }
  j.end_obj();
}

void drb_to_add_mod_s::cn_assoc_c_::destroy_()
{
  switch (type_) {
    case types::sdap_cfg:
      c.destroy<sdap_cfg_s>();
      break;
    default:
      break;
  }
}
void drb_to_add_mod_s::cn_assoc_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::eps_bearer_id:
      break;
    case types::sdap_cfg:
      c.init<sdap_cfg_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drb_to_add_mod_s::cn_assoc_c_");
  }
}
drb_to_add_mod_s::cn_assoc_c_::cn_assoc_c_(const drb_to_add_mod_s::cn_assoc_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::eps_bearer_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sdap_cfg:
      c.init(other.c.get<sdap_cfg_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drb_to_add_mod_s::cn_assoc_c_");
  }
}
drb_to_add_mod_s::cn_assoc_c_& drb_to_add_mod_s::cn_assoc_c_::operator=(const drb_to_add_mod_s::cn_assoc_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::eps_bearer_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sdap_cfg:
      c.set(other.c.get<sdap_cfg_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drb_to_add_mod_s::cn_assoc_c_");
  }

  return *this;
}
uint8_t& drb_to_add_mod_s::cn_assoc_c_::set_eps_bearer_id()
{
  set(types::eps_bearer_id);
  return c.get<uint8_t>();
}
sdap_cfg_s& drb_to_add_mod_s::cn_assoc_c_::set_sdap_cfg()
{
  set(types::sdap_cfg);
  return c.get<sdap_cfg_s>();
}
void drb_to_add_mod_s::cn_assoc_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::eps_bearer_id:
      j.write_int("eps-BearerIdentity", c.get<uint8_t>());
      break;
    case types::sdap_cfg:
      j.write_fieldname("sdap-Config");
      c.get<sdap_cfg_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "drb_to_add_mod_s::cn_assoc_c_");
  }
  j.end_obj();
}
SRSASN_CODE drb_to_add_mod_s::cn_assoc_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::eps_bearer_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)15u));
      break;
    case types::sdap_cfg:
      HANDLE_CODE(c.get<sdap_cfg_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drb_to_add_mod_s::cn_assoc_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE drb_to_add_mod_s::cn_assoc_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::eps_bearer_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)15u));
      break;
    case types::sdap_cfg:
      HANDLE_CODE(c.get<sdap_cfg_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drb_to_add_mod_s::cn_assoc_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* drb_to_add_mod_s::cn_assoc_c_::types_opts::to_string() const
{
  static const char* names[] = {"eps-BearerIdentity", "sdap-Config"};
  return convert_enum_idx(names, 2, value, "drb_to_add_mod_s::cn_assoc_c_::types");
}

// MRB-ToAddMod-r17 ::= SEQUENCE
SRSASN_CODE mrb_to_add_mod_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(mbs_session_id_r17_present, 1));
  HANDLE_CODE(bref.pack(mrb_id_new_r17_present, 1));
  HANDLE_CODE(bref.pack(reestablish_pdcp_r17_present, 1));
  HANDLE_CODE(bref.pack(recover_pdcp_r17_present, 1));
  HANDLE_CODE(bref.pack(pdcp_cfg_r17_present, 1));

  if (mbs_session_id_r17_present) {
    HANDLE_CODE(mbs_session_id_r17.pack(bref));
  }
  HANDLE_CODE(pack_integer(bref, mrb_id_r17, (uint16_t)1u, (uint16_t)512u));
  if (mrb_id_new_r17_present) {
    HANDLE_CODE(pack_integer(bref, mrb_id_new_r17, (uint16_t)1u, (uint16_t)512u));
  }
  if (pdcp_cfg_r17_present) {
    HANDLE_CODE(pdcp_cfg_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mrb_to_add_mod_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(mbs_session_id_r17_present, 1));
  HANDLE_CODE(bref.unpack(mrb_id_new_r17_present, 1));
  HANDLE_CODE(bref.unpack(reestablish_pdcp_r17_present, 1));
  HANDLE_CODE(bref.unpack(recover_pdcp_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdcp_cfg_r17_present, 1));

  if (mbs_session_id_r17_present) {
    HANDLE_CODE(mbs_session_id_r17.unpack(bref));
  }
  HANDLE_CODE(unpack_integer(mrb_id_r17, bref, (uint16_t)1u, (uint16_t)512u));
  if (mrb_id_new_r17_present) {
    HANDLE_CODE(unpack_integer(mrb_id_new_r17, bref, (uint16_t)1u, (uint16_t)512u));
  }
  if (pdcp_cfg_r17_present) {
    HANDLE_CODE(pdcp_cfg_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mrb_to_add_mod_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mbs_session_id_r17_present) {
    j.write_fieldname("mbs-SessionId-r17");
    mbs_session_id_r17.to_json(j);
  }
  j.write_int("mrb-Identity-r17", mrb_id_r17);
  if (mrb_id_new_r17_present) {
    j.write_int("mrb-IdentityNew-r17", mrb_id_new_r17);
  }
  if (reestablish_pdcp_r17_present) {
    j.write_str("reestablishPDCP-r17", "true");
  }
  if (recover_pdcp_r17_present) {
    j.write_str("recoverPDCP-r17", "true");
  }
  if (pdcp_cfg_r17_present) {
    j.write_fieldname("pdcp-Config-r17");
    pdcp_cfg_r17.to_json(j);
  }
  j.end_obj();
}

// SL-DiscConfig-r17 ::= SEQUENCE
SRSASN_CODE sl_disc_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_relay_ue_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_remote_ue_cfg_r17_present, 1));

  if (sl_relay_ue_cfg_r17_present) {
    HANDLE_CODE(sl_relay_ue_cfg_r17.pack(bref));
  }
  if (sl_remote_ue_cfg_r17_present) {
    HANDLE_CODE(sl_remote_ue_cfg_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_disc_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_relay_ue_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_remote_ue_cfg_r17_present, 1));

  if (sl_relay_ue_cfg_r17_present) {
    HANDLE_CODE(sl_relay_ue_cfg_r17.unpack(bref));
  }
  if (sl_remote_ue_cfg_r17_present) {
    HANDLE_CODE(sl_remote_ue_cfg_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_disc_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_relay_ue_cfg_r17_present) {
    j.write_fieldname("sl-RelayUE-Config-r17");
    sl_relay_ue_cfg_r17.to_json(j);
  }
  if (sl_remote_ue_cfg_r17_present) {
    j.write_fieldname("sl-RemoteUE-Config-r17");
    sl_remote_ue_cfg_r17.to_json(j);
  }
  j.end_obj();
}

// SL-MeasConfigInfo-r16 ::= SEQUENCE
SRSASN_CODE sl_meas_cfg_info_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, sl_dest_idx_r16, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(sl_meas_cfg_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_meas_cfg_info_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(sl_dest_idx_r16, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(sl_meas_cfg_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_meas_cfg_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-DestinationIndex-r16", sl_dest_idx_r16);
  j.write_fieldname("sl-MeasConfig-r16");
  sl_meas_cfg_r16.to_json(j);
  j.end_obj();
}

// SL-PHY-MAC-RLC-Config-r16 ::= SEQUENCE
SRSASN_CODE sl_phy_mac_rlc_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_sched_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ue_sel_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_freq_info_to_release_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_freq_info_to_add_mod_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_rlc_bearer_to_release_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_rlc_bearer_to_add_mod_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_max_num_consecutive_dtx_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_csi_acquisition_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_csi_sched_request_id_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ssb_prio_nr_r16_present, 1));
  HANDLE_CODE(bref.pack(network_ctrl_sync_tx_r16_present, 1));

  if (sl_sched_cfg_r16_present) {
    HANDLE_CODE(sl_sched_cfg_r16.pack(bref));
  }
  if (sl_ue_sel_cfg_r16_present) {
    HANDLE_CODE(sl_ue_sel_cfg_r16.pack(bref));
  }
  if (sl_freq_info_to_release_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_freq_info_to_release_list_r16, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (sl_freq_info_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_freq_info_to_add_mod_list_r16, 1, 8));
  }
  if (sl_rlc_bearer_to_release_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rlc_bearer_to_release_list_r16, 1, 512, integer_packer<uint16_t>(1, 512)));
  }
  if (sl_rlc_bearer_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rlc_bearer_to_add_mod_list_r16, 1, 512));
  }
  if (sl_max_num_consecutive_dtx_r16_present) {
    HANDLE_CODE(sl_max_num_consecutive_dtx_r16.pack(bref));
  }
  if (sl_csi_sched_request_id_r16_present) {
    HANDLE_CODE(sl_csi_sched_request_id_r16.pack(bref));
  }
  if (sl_ssb_prio_nr_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_ssb_prio_nr_r16, (uint8_t)1u, (uint8_t)8u));
  }
  if (network_ctrl_sync_tx_r16_present) {
    HANDLE_CODE(network_ctrl_sync_tx_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_phy_mac_rlc_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_sched_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ue_sel_cfg_r16_present, 1));
  bool sl_freq_info_to_release_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_freq_info_to_release_list_r16_present, 1));
  bool sl_freq_info_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_freq_info_to_add_mod_list_r16_present, 1));
  bool sl_rlc_bearer_to_release_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_rlc_bearer_to_release_list_r16_present, 1));
  bool sl_rlc_bearer_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_rlc_bearer_to_add_mod_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_max_num_consecutive_dtx_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_csi_acquisition_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_csi_sched_request_id_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ssb_prio_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(network_ctrl_sync_tx_r16_present, 1));

  if (sl_sched_cfg_r16_present) {
    HANDLE_CODE(sl_sched_cfg_r16.unpack(bref));
  }
  if (sl_ue_sel_cfg_r16_present) {
    HANDLE_CODE(sl_ue_sel_cfg_r16.unpack(bref));
  }
  if (sl_freq_info_to_release_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_freq_info_to_release_list_r16, bref, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (sl_freq_info_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_freq_info_to_add_mod_list_r16, bref, 1, 8));
  }
  if (sl_rlc_bearer_to_release_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rlc_bearer_to_release_list_r16, bref, 1, 512, integer_packer<uint16_t>(1, 512)));
  }
  if (sl_rlc_bearer_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rlc_bearer_to_add_mod_list_r16, bref, 1, 512));
  }
  if (sl_max_num_consecutive_dtx_r16_present) {
    HANDLE_CODE(sl_max_num_consecutive_dtx_r16.unpack(bref));
  }
  if (sl_csi_sched_request_id_r16_present) {
    HANDLE_CODE(sl_csi_sched_request_id_r16.unpack(bref));
  }
  if (sl_ssb_prio_nr_r16_present) {
    HANDLE_CODE(unpack_integer(sl_ssb_prio_nr_r16, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (network_ctrl_sync_tx_r16_present) {
    HANDLE_CODE(network_ctrl_sync_tx_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_phy_mac_rlc_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_sched_cfg_r16_present) {
    j.write_fieldname("sl-ScheduledConfig-r16");
    sl_sched_cfg_r16.to_json(j);
  }
  if (sl_ue_sel_cfg_r16_present) {
    j.write_fieldname("sl-UE-SelectedConfig-r16");
    sl_ue_sel_cfg_r16.to_json(j);
  }
  if (sl_freq_info_to_release_list_r16.size() > 0) {
    j.start_array("sl-FreqInfoToReleaseList-r16");
    for (const auto& e1 : sl_freq_info_to_release_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_freq_info_to_add_mod_list_r16.size() > 0) {
    j.start_array("sl-FreqInfoToAddModList-r16");
    for (const auto& e1 : sl_freq_info_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_rlc_bearer_to_release_list_r16.size() > 0) {
    j.start_array("sl-RLC-BearerToReleaseList-r16");
    for (const auto& e1 : sl_rlc_bearer_to_release_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_rlc_bearer_to_add_mod_list_r16.size() > 0) {
    j.start_array("sl-RLC-BearerToAddModList-r16");
    for (const auto& e1 : sl_rlc_bearer_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_max_num_consecutive_dtx_r16_present) {
    j.write_str("sl-MaxNumConsecutiveDTX-r16", sl_max_num_consecutive_dtx_r16.to_string());
  }
  if (sl_csi_acquisition_r16_present) {
    j.write_str("sl-CSI-Acquisition-r16", "enabled");
  }
  if (sl_csi_sched_request_id_r16_present) {
    j.write_fieldname("sl-CSI-SchedulingRequestId-r16");
    sl_csi_sched_request_id_r16.to_json(j);
  }
  if (sl_ssb_prio_nr_r16_present) {
    j.write_int("sl-SSB-PriorityNR-r16", sl_ssb_prio_nr_r16);
  }
  if (network_ctrl_sync_tx_r16_present) {
    j.write_str("networkControlledSyncTx-r16", network_ctrl_sync_tx_r16.to_string());
  }
  j.end_obj();
}

const char* sl_phy_mac_rlc_cfg_r16_s::sl_max_num_consecutive_dtx_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n6", "n8", "n16", "n32"};
  return convert_enum_idx(names, 8, value, "sl_phy_mac_rlc_cfg_r16_s::sl_max_num_consecutive_dtx_r16_e_");
}
uint8_t sl_phy_mac_rlc_cfg_r16_s::sl_max_num_consecutive_dtx_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 6, 8, 16, 32};
  return map_enum_number(numbers, 8, value, "sl_phy_mac_rlc_cfg_r16_s::sl_max_num_consecutive_dtx_r16_e_");
}

const char* sl_phy_mac_rlc_cfg_r16_s::network_ctrl_sync_tx_r16_opts::to_string() const
{
  static const char* names[] = {"on", "off"};
  return convert_enum_idx(names, 2, value, "sl_phy_mac_rlc_cfg_r16_s::network_ctrl_sync_tx_r16_e_");
}

// SL-PHY-MAC-RLC-Config-v1700 ::= SEQUENCE
SRSASN_CODE sl_phy_mac_rlc_cfg_v1700_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_drx_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_rlc_ch_to_release_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_rlc_ch_to_add_mod_list_r17.size() > 0, 1));

  if (sl_drx_cfg_r17_present) {
    HANDLE_CODE(sl_drx_cfg_r17.pack(bref));
  }
  if (sl_rlc_ch_to_release_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rlc_ch_to_release_list_r17, 1, 512, integer_packer<uint16_t>(1, 512)));
  }
  if (sl_rlc_ch_to_add_mod_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rlc_ch_to_add_mod_list_r17, 1, 512));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_phy_mac_rlc_cfg_v1700_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_drx_cfg_r17_present, 1));
  bool sl_rlc_ch_to_release_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_rlc_ch_to_release_list_r17_present, 1));
  bool sl_rlc_ch_to_add_mod_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_rlc_ch_to_add_mod_list_r17_present, 1));

  if (sl_drx_cfg_r17_present) {
    HANDLE_CODE(sl_drx_cfg_r17.unpack(bref));
  }
  if (sl_rlc_ch_to_release_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rlc_ch_to_release_list_r17, bref, 1, 512, integer_packer<uint16_t>(1, 512)));
  }
  if (sl_rlc_ch_to_add_mod_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rlc_ch_to_add_mod_list_r17, bref, 1, 512));
  }

  return SRSASN_SUCCESS;
}
void sl_phy_mac_rlc_cfg_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_drx_cfg_r17_present) {
    j.write_fieldname("sl-DRX-Config-r17");
    sl_drx_cfg_r17.to_json(j);
  }
  if (sl_rlc_ch_to_release_list_r17.size() > 0) {
    j.start_array("sl-RLC-ChannelToReleaseList-r17");
    for (const auto& e1 : sl_rlc_ch_to_release_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_rlc_ch_to_add_mod_list_r17.size() > 0) {
    j.start_array("sl-RLC-ChannelToAddModList-r17");
    for (const auto& e1 : sl_rlc_ch_to_add_mod_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// SL-RadioBearerConfig-r16 ::= SEQUENCE
SRSASN_CODE sl_radio_bearer_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_sdap_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_pdcp_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_trans_range_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, slrb_uu_cfg_idx_r16, (uint16_t)1u, (uint16_t)512u));
  if (sl_sdap_cfg_r16_present) {
    HANDLE_CODE(sl_sdap_cfg_r16.pack(bref));
  }
  if (sl_pdcp_cfg_r16_present) {
    HANDLE_CODE(sl_pdcp_cfg_r16.pack(bref));
  }
  if (sl_trans_range_r16_present) {
    HANDLE_CODE(sl_trans_range_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_radio_bearer_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_sdap_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_pdcp_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_trans_range_r16_present, 1));

  HANDLE_CODE(unpack_integer(slrb_uu_cfg_idx_r16, bref, (uint16_t)1u, (uint16_t)512u));
  if (sl_sdap_cfg_r16_present) {
    HANDLE_CODE(sl_sdap_cfg_r16.unpack(bref));
  }
  if (sl_pdcp_cfg_r16_present) {
    HANDLE_CODE(sl_pdcp_cfg_r16.unpack(bref));
  }
  if (sl_trans_range_r16_present) {
    HANDLE_CODE(sl_trans_range_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_radio_bearer_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("slrb-Uu-ConfigIndex-r16", slrb_uu_cfg_idx_r16);
  if (sl_sdap_cfg_r16_present) {
    j.write_fieldname("sl-SDAP-Config-r16");
    sl_sdap_cfg_r16.to_json(j);
  }
  if (sl_pdcp_cfg_r16_present) {
    j.write_fieldname("sl-PDCP-Config-r16");
    sl_pdcp_cfg_r16.to_json(j);
  }
  if (sl_trans_range_r16_present) {
    j.write_str("sl-TransRange-r16", sl_trans_range_r16.to_string());
  }
  j.end_obj();
}

const char* sl_radio_bearer_cfg_r16_s::sl_trans_range_r16_opts::to_string() const
{
  static const char* names[] = {"m20",    "m50",    "m80",    "m100",   "m120",   "m150",   "m180",   "m200",
                                "m220",   "m250",   "m270",   "m300",   "m350",   "m370",   "m400",   "m420",
                                "m450",   "m480",   "m500",   "m550",   "m600",   "m700",   "m1000",  "spare9",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "sl_radio_bearer_cfg_r16_s::sl_trans_range_r16_e_");
}
uint16_t sl_radio_bearer_cfg_r16_s::sl_trans_range_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {20,  50,  80,  100, 120, 150, 180, 200, 220, 250, 270, 300,
                                     350, 370, 400, 420, 450, 480, 500, 550, 600, 700, 1000};
  return map_enum_number(numbers, 23, value, "sl_radio_bearer_cfg_r16_s::sl_trans_range_r16_e_");
}

// SL-SRAP-Config-r17 ::= SEQUENCE
SRSASN_CODE sl_srap_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_local_id_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_map_to_add_mod_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_map_to_release_list_r17.size() > 0, 1));

  if (sl_local_id_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_local_id_r17, (uint16_t)0u, (uint16_t)255u));
  }
  if (sl_map_to_add_mod_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_map_to_add_mod_list_r17, 1, 32));
  }
  if (sl_map_to_release_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_map_to_release_list_r17, 1, 32));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_srap_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_local_id_r17_present, 1));
  bool sl_map_to_add_mod_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_map_to_add_mod_list_r17_present, 1));
  bool sl_map_to_release_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_map_to_release_list_r17_present, 1));

  if (sl_local_id_r17_present) {
    HANDLE_CODE(unpack_integer(sl_local_id_r17, bref, (uint16_t)0u, (uint16_t)255u));
  }
  if (sl_map_to_add_mod_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_map_to_add_mod_list_r17, bref, 1, 32));
  }
  if (sl_map_to_release_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_map_to_release_list_r17, bref, 1, 32));
  }

  return SRSASN_SUCCESS;
}
void sl_srap_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_local_id_r17_present) {
    j.write_int("sl-LocalIdentity-r17", sl_local_id_r17);
  }
  if (sl_map_to_add_mod_list_r17.size() > 0) {
    j.start_array("sl-MappingToAddModList-r17");
    for (const auto& e1 : sl_map_to_add_mod_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_map_to_release_list_r17.size() > 0) {
    j.start_array("sl-MappingToReleaseList-r17");
    for (const auto& e1 : sl_map_to_release_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// SRB-ToAddMod ::= SEQUENCE
SRSASN_CODE srb_to_add_mod_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(reestablish_pdcp_present, 1));
  HANDLE_CODE(bref.pack(discard_on_pdcp_present, 1));
  HANDLE_CODE(bref.pack(pdcp_cfg_present, 1));

  HANDLE_CODE(pack_integer(bref, srb_id, (uint8_t)1u, (uint8_t)3u));
  if (pdcp_cfg_present) {
    HANDLE_CODE(pdcp_cfg.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= srb_id_v1700_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(srb_id_v1700_present, 1));
      if (srb_id_v1700_present) {
        HANDLE_CODE(pack_integer(bref, srb_id_v1700, (uint8_t)4u, (uint8_t)4u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE srb_to_add_mod_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(reestablish_pdcp_present, 1));
  HANDLE_CODE(bref.unpack(discard_on_pdcp_present, 1));
  HANDLE_CODE(bref.unpack(pdcp_cfg_present, 1));

  HANDLE_CODE(unpack_integer(srb_id, bref, (uint8_t)1u, (uint8_t)3u));
  if (pdcp_cfg_present) {
    HANDLE_CODE(pdcp_cfg.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(srb_id_v1700_present, 1));
      if (srb_id_v1700_present) {
        HANDLE_CODE(unpack_integer(srb_id_v1700, bref, (uint8_t)4u, (uint8_t)4u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void srb_to_add_mod_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("srb-Identity", srb_id);
  if (reestablish_pdcp_present) {
    j.write_str("reestablishPDCP", "true");
  }
  if (discard_on_pdcp_present) {
    j.write_str("discardOnPDCP", "true");
  }
  if (pdcp_cfg_present) {
    j.write_fieldname("pdcp-Config");
    pdcp_cfg.to_json(j);
  }
  if (ext) {
    if (srb_id_v1700_present) {
      j.write_int("srb-Identity-v1700", srb_id_v1700);
    }
  }
  j.end_obj();
}

// SecurityAlgorithmConfig ::= SEQUENCE
SRSASN_CODE security_algorithm_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(integrity_prot_algorithm_present, 1));

  HANDLE_CODE(ciphering_algorithm.pack(bref));
  if (integrity_prot_algorithm_present) {
    HANDLE_CODE(integrity_prot_algorithm.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE security_algorithm_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(integrity_prot_algorithm_present, 1));

  HANDLE_CODE(ciphering_algorithm.unpack(bref));
  if (integrity_prot_algorithm_present) {
    HANDLE_CODE(integrity_prot_algorithm.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void security_algorithm_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("cipheringAlgorithm", ciphering_algorithm.to_string());
  if (integrity_prot_algorithm_present) {
    j.write_str("integrityProtAlgorithm", integrity_prot_algorithm.to_string());
  }
  j.end_obj();
}

// SL-ConfigDedicatedNR-r16 ::= SEQUENCE
SRSASN_CODE sl_cfg_ded_nr_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_phy_mac_rlc_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_radio_bearer_to_release_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_radio_bearer_to_add_mod_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_meas_cfg_info_to_release_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_meas_cfg_info_to_add_mod_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(t400_r16_present, 1));

  if (sl_phy_mac_rlc_cfg_r16_present) {
    HANDLE_CODE(sl_phy_mac_rlc_cfg_r16.pack(bref));
  }
  if (sl_radio_bearer_to_release_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_radio_bearer_to_release_list_r16, 1, 512, integer_packer<uint16_t>(1, 512)));
  }
  if (sl_radio_bearer_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_radio_bearer_to_add_mod_list_r16, 1, 512));
  }
  if (sl_meas_cfg_info_to_release_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_meas_cfg_info_to_release_list_r16, 1, 32, integer_packer<uint8_t>(0, 31)));
  }
  if (sl_meas_cfg_info_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_meas_cfg_info_to_add_mod_list_r16, 1, 32));
  }
  if (t400_r16_present) {
    HANDLE_CODE(t400_r16.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sl_phy_mac_rlc_cfg_v1700.is_present();
    group_flags[0] |= sl_disc_cfg_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_phy_mac_rlc_cfg_v1700.is_present(), 1));
      HANDLE_CODE(bref.pack(sl_disc_cfg_r17.is_present(), 1));
      if (sl_phy_mac_rlc_cfg_v1700.is_present()) {
        HANDLE_CODE(sl_phy_mac_rlc_cfg_v1700->pack(bref));
      }
      if (sl_disc_cfg_r17.is_present()) {
        HANDLE_CODE(sl_disc_cfg_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_cfg_ded_nr_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_phy_mac_rlc_cfg_r16_present, 1));
  bool sl_radio_bearer_to_release_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_radio_bearer_to_release_list_r16_present, 1));
  bool sl_radio_bearer_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_radio_bearer_to_add_mod_list_r16_present, 1));
  bool sl_meas_cfg_info_to_release_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_meas_cfg_info_to_release_list_r16_present, 1));
  bool sl_meas_cfg_info_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_meas_cfg_info_to_add_mod_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(t400_r16_present, 1));

  if (sl_phy_mac_rlc_cfg_r16_present) {
    HANDLE_CODE(sl_phy_mac_rlc_cfg_r16.unpack(bref));
  }
  if (sl_radio_bearer_to_release_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_radio_bearer_to_release_list_r16, bref, 1, 512, integer_packer<uint16_t>(1, 512)));
  }
  if (sl_radio_bearer_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_radio_bearer_to_add_mod_list_r16, bref, 1, 512));
  }
  if (sl_meas_cfg_info_to_release_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_meas_cfg_info_to_release_list_r16, bref, 1, 32, integer_packer<uint8_t>(0, 31)));
  }
  if (sl_meas_cfg_info_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_meas_cfg_info_to_add_mod_list_r16, bref, 1, 32));
  }
  if (t400_r16_present) {
    HANDLE_CODE(t400_r16.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sl_phy_mac_rlc_cfg_v1700, bref);
      unpack_presence_flag(sl_disc_cfg_r17, bref);
      if (sl_phy_mac_rlc_cfg_v1700.is_present()) {
        HANDLE_CODE(sl_phy_mac_rlc_cfg_v1700->unpack(bref));
      }
      if (sl_disc_cfg_r17.is_present()) {
        HANDLE_CODE(sl_disc_cfg_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sl_cfg_ded_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_phy_mac_rlc_cfg_r16_present) {
    j.write_fieldname("sl-PHY-MAC-RLC-Config-r16");
    sl_phy_mac_rlc_cfg_r16.to_json(j);
  }
  if (sl_radio_bearer_to_release_list_r16.size() > 0) {
    j.start_array("sl-RadioBearerToReleaseList-r16");
    for (const auto& e1 : sl_radio_bearer_to_release_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_radio_bearer_to_add_mod_list_r16.size() > 0) {
    j.start_array("sl-RadioBearerToAddModList-r16");
    for (const auto& e1 : sl_radio_bearer_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_meas_cfg_info_to_release_list_r16.size() > 0) {
    j.start_array("sl-MeasConfigInfoToReleaseList-r16");
    for (const auto& e1 : sl_meas_cfg_info_to_release_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_meas_cfg_info_to_add_mod_list_r16.size() > 0) {
    j.start_array("sl-MeasConfigInfoToAddModList-r16");
    for (const auto& e1 : sl_meas_cfg_info_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (t400_r16_present) {
    j.write_str("t400-r16", t400_r16.to_string());
  }
  if (ext) {
    if (sl_phy_mac_rlc_cfg_v1700.is_present()) {
      j.write_fieldname("sl-PHY-MAC-RLC-Config-v1700");
      sl_phy_mac_rlc_cfg_v1700->to_json(j);
    }
    if (sl_disc_cfg_r17.is_present()) {
      j.write_fieldname("sl-DiscConfig-r17");
      sl_disc_cfg_r17->to_json(j);
    }
  }
  j.end_obj();
}

const char* sl_cfg_ded_nr_r16_s::t400_r16_opts::to_string() const
{
  static const char* names[] = {"ms100", "ms200", "ms300", "ms400", "ms600", "ms1000", "ms1500", "ms2000"};
  return convert_enum_idx(names, 8, value, "sl_cfg_ded_nr_r16_s::t400_r16_e_");
}
uint16_t sl_cfg_ded_nr_r16_s::t400_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 200, 300, 400, 600, 1000, 1500, 2000};
  return map_enum_number(numbers, 8, value, "sl_cfg_ded_nr_r16_s::t400_r16_e_");
}

// SL-L2RemoteUE-Config-r17 ::= SEQUENCE
SRSASN_CODE sl_l2_remote_ue_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_srap_cfg_remote_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_ue_id_remote_r17_present, 1));

  if (sl_srap_cfg_remote_r17_present) {
    HANDLE_CODE(sl_srap_cfg_remote_r17.pack(bref));
  }
  if (sl_ue_id_remote_r17_present) {
    HANDLE_CODE(pack_integer(bref, sl_ue_id_remote_r17, (uint32_t)0u, (uint32_t)65535u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_l2_remote_ue_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_srap_cfg_remote_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_ue_id_remote_r17_present, 1));

  if (sl_srap_cfg_remote_r17_present) {
    HANDLE_CODE(sl_srap_cfg_remote_r17.unpack(bref));
  }
  if (sl_ue_id_remote_r17_present) {
    HANDLE_CODE(unpack_integer(sl_ue_id_remote_r17, bref, (uint32_t)0u, (uint32_t)65535u));
  }

  return SRSASN_SUCCESS;
}
void sl_l2_remote_ue_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_srap_cfg_remote_r17_present) {
    j.write_fieldname("sl-SRAP-ConfigRemote-r17");
    sl_srap_cfg_remote_r17.to_json(j);
  }
  if (sl_ue_id_remote_r17_present) {
    j.write_int("sl-UEIdentityRemote-r17", sl_ue_id_remote_r17);
  }
  j.end_obj();
}

// SecurityConfig ::= SEQUENCE
SRSASN_CODE security_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(security_algorithm_cfg_present, 1));
  HANDLE_CODE(bref.pack(key_to_use_present, 1));

  if (security_algorithm_cfg_present) {
    HANDLE_CODE(security_algorithm_cfg.pack(bref));
  }
  if (key_to_use_present) {
    HANDLE_CODE(key_to_use.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE security_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(security_algorithm_cfg_present, 1));
  HANDLE_CODE(bref.unpack(key_to_use_present, 1));

  if (security_algorithm_cfg_present) {
    HANDLE_CODE(security_algorithm_cfg.unpack(bref));
  }
  if (key_to_use_present) {
    HANDLE_CODE(key_to_use.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void security_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (security_algorithm_cfg_present) {
    j.write_fieldname("securityAlgorithmConfig");
    security_algorithm_cfg.to_json(j);
  }
  if (key_to_use_present) {
    j.write_str("keyToUse", key_to_use.to_string());
  }
  j.end_obj();
}

const char* security_cfg_s::key_to_use_opts::to_string() const
{
  static const char* names[] = {"master", "secondary"};
  return convert_enum_idx(names, 2, value, "security_cfg_s::key_to_use_e_");
}

// RRCSetup-v1700-IEs ::= SEQUENCE
SRSASN_CODE rrc_setup_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_cfg_ded_nr_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_l2_remote_ue_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (sl_cfg_ded_nr_r17_present) {
    HANDLE_CODE(sl_cfg_ded_nr_r17.pack(bref));
  }
  if (sl_l2_remote_ue_cfg_r17_present) {
    HANDLE_CODE(sl_l2_remote_ue_cfg_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_setup_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_cfg_ded_nr_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_l2_remote_ue_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (sl_cfg_ded_nr_r17_present) {
    HANDLE_CODE(sl_cfg_ded_nr_r17.unpack(bref));
  }
  if (sl_l2_remote_ue_cfg_r17_present) {
    HANDLE_CODE(sl_l2_remote_ue_cfg_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_setup_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_cfg_ded_nr_r17_present) {
    j.write_fieldname("sl-ConfigDedicatedNR-r17");
    sl_cfg_ded_nr_r17.to_json(j);
  }
  if (sl_l2_remote_ue_cfg_r17_present) {
    j.write_fieldname("sl-L2RemoteUE-Config-r17");
    sl_l2_remote_ue_cfg_r17.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// RadioBearerConfig ::= SEQUENCE
SRSASN_CODE radio_bearer_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(srb_to_add_mod_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(srb3_to_release_present, 1));
  HANDLE_CODE(bref.pack(drb_to_add_mod_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(drb_to_release_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(security_cfg_present, 1));

  if (srb_to_add_mod_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, srb_to_add_mod_list, 1, 2));
  }
  if (drb_to_add_mod_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, drb_to_add_mod_list, 1, 29));
  }
  if (drb_to_release_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, drb_to_release_list, 1, 29, integer_packer<uint8_t>(1, 32)));
  }
  if (security_cfg_present) {
    HANDLE_CODE(security_cfg.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= mrb_to_add_mod_list_r17.is_present();
    group_flags[0] |= mrb_to_release_list_r17.is_present();
    group_flags[0] |= srb4_to_add_mod_r17.is_present();
    group_flags[0] |= srb4_to_release_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(mrb_to_add_mod_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(mrb_to_release_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(srb4_to_add_mod_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(srb4_to_release_r17_present, 1));
      if (mrb_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *mrb_to_add_mod_list_r17, 1, 32));
      }
      if (mrb_to_release_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *mrb_to_release_list_r17, 1, 32, integer_packer<uint16_t>(1, 512)));
      }
      if (srb4_to_add_mod_r17.is_present()) {
        HANDLE_CODE(srb4_to_add_mod_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE radio_bearer_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool srb_to_add_mod_list_present;
  HANDLE_CODE(bref.unpack(srb_to_add_mod_list_present, 1));
  HANDLE_CODE(bref.unpack(srb3_to_release_present, 1));
  bool drb_to_add_mod_list_present;
  HANDLE_CODE(bref.unpack(drb_to_add_mod_list_present, 1));
  bool drb_to_release_list_present;
  HANDLE_CODE(bref.unpack(drb_to_release_list_present, 1));
  HANDLE_CODE(bref.unpack(security_cfg_present, 1));

  if (srb_to_add_mod_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(srb_to_add_mod_list, bref, 1, 2));
  }
  if (drb_to_add_mod_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(drb_to_add_mod_list, bref, 1, 29));
  }
  if (drb_to_release_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(drb_to_release_list, bref, 1, 29, integer_packer<uint8_t>(1, 32)));
  }
  if (security_cfg_present) {
    HANDLE_CODE(security_cfg.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(mrb_to_add_mod_list_r17, bref);
      unpack_presence_flag(mrb_to_release_list_r17, bref);
      unpack_presence_flag(srb4_to_add_mod_r17, bref);
      HANDLE_CODE(bref.unpack(srb4_to_release_r17_present, 1));
      if (mrb_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*mrb_to_add_mod_list_r17, bref, 1, 32));
      }
      if (mrb_to_release_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*mrb_to_release_list_r17, bref, 1, 32, integer_packer<uint16_t>(1, 512)));
      }
      if (srb4_to_add_mod_r17.is_present()) {
        HANDLE_CODE(srb4_to_add_mod_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void radio_bearer_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (srb_to_add_mod_list.size() > 0) {
    j.start_array("srb-ToAddModList");
    for (const auto& e1 : srb_to_add_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (srb3_to_release_present) {
    j.write_str("srb3-ToRelease", "true");
  }
  if (drb_to_add_mod_list.size() > 0) {
    j.start_array("drb-ToAddModList");
    for (const auto& e1 : drb_to_add_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (drb_to_release_list.size() > 0) {
    j.start_array("drb-ToReleaseList");
    for (const auto& e1 : drb_to_release_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (security_cfg_present) {
    j.write_fieldname("securityConfig");
    security_cfg.to_json(j);
  }
  if (ext) {
    if (mrb_to_add_mod_list_r17.is_present()) {
      j.start_array("mrb-ToAddModList-r17");
      for (const auto& e1 : *mrb_to_add_mod_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (mrb_to_release_list_r17.is_present()) {
      j.start_array("mrb-ToReleaseList-r17");
      for (const auto& e1 : *mrb_to_release_list_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (srb4_to_add_mod_r17.is_present()) {
      j.write_fieldname("srb4-ToAddMod-r17");
      srb4_to_add_mod_r17->to_json(j);
    }
    if (srb4_to_release_r17_present) {
      j.write_str("srb4-ToRelease-r17", "true");
    }
  }
  j.end_obj();
}

// RRCReject-IEs ::= SEQUENCE
SRSASN_CODE rrc_reject_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(wait_time_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (wait_time_present) {
    HANDLE_CODE(pack_integer(bref, wait_time, (uint8_t)1u, (uint8_t)16u));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_reject_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(wait_time_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (wait_time_present) {
    HANDLE_CODE(unpack_integer(wait_time, bref, (uint8_t)1u, (uint8_t)16u));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_reject_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (wait_time_present) {
    j.write_int("waitTime", wait_time);
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// RRCSetup-IEs ::= SEQUENCE
SRSASN_CODE rrc_setup_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(radio_bearer_cfg.pack(bref));
  HANDLE_CODE(master_cell_group.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_setup_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(radio_bearer_cfg.unpack(bref));
  HANDLE_CODE(master_cell_group.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_setup_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("radioBearerConfig");
  radio_bearer_cfg.to_json(j);
  j.write_str("masterCellGroup", master_cell_group.to_string());
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCReject ::= SEQUENCE
SRSASN_CODE rrc_reject_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_reject_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_reject_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_reject_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
rrc_reject_ies_s& rrc_reject_s::crit_exts_c_::set_rrc_reject()
{
  set(types::rrc_reject);
  return c;
}
void rrc_reject_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_reject_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_reject:
      j.write_fieldname("rrcReject");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_reject_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_reject_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_reject:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_reject_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_reject_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_reject:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_reject_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_reject_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcReject", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_reject_s::crit_exts_c_::types");
}

// RRCSetup ::= SEQUENCE
SRSASN_CODE rrc_setup_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_setup_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_setup_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_setup_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
rrc_setup_ies_s& rrc_setup_s::crit_exts_c_::set_rrc_setup()
{
  set(types::rrc_setup);
  return c;
}
void rrc_setup_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_setup_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_setup:
      j.write_fieldname("rrcSetup");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_setup_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_setup_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_setup:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_setup_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_setup_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_setup:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_setup_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_setup_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcSetup", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_setup_s::crit_exts_c_::types");
}

// DL-CCCH-MessageType ::= CHOICE
void dl_ccch_msg_type_c::set(types::options e)
{
  type_ = e;
}
dl_ccch_msg_type_c::c1_c_& dl_ccch_msg_type_c::set_c1()
{
  set(types::c1);
  return c;
}
void dl_ccch_msg_type_c::set_msg_class_ext()
{
  set(types::msg_class_ext);
}
void dl_ccch_msg_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "dl_ccch_msg_type_c");
  }
  j.end_obj();
}
SRSASN_CODE dl_ccch_msg_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "dl_ccch_msg_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_ccch_msg_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "dl_ccch_msg_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void dl_ccch_msg_type_c::c1_c_::destroy_()
{
  switch (type_) {
    case types::rrc_reject:
      c.destroy<rrc_reject_s>();
      break;
    case types::rrc_setup:
      c.destroy<rrc_setup_s>();
      break;
    default:
      break;
  }
}
void dl_ccch_msg_type_c::c1_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::rrc_reject:
      c.init<rrc_reject_s>();
      break;
    case types::rrc_setup:
      c.init<rrc_setup_s>();
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "dl_ccch_msg_type_c::c1_c_");
  }
}
dl_ccch_msg_type_c::c1_c_::c1_c_(const dl_ccch_msg_type_c::c1_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::rrc_reject:
      c.init(other.c.get<rrc_reject_s>());
      break;
    case types::rrc_setup:
      c.init(other.c.get<rrc_setup_s>());
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "dl_ccch_msg_type_c::c1_c_");
  }
}
dl_ccch_msg_type_c::c1_c_& dl_ccch_msg_type_c::c1_c_::operator=(const dl_ccch_msg_type_c::c1_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::rrc_reject:
      c.set(other.c.get<rrc_reject_s>());
      break;
    case types::rrc_setup:
      c.set(other.c.get<rrc_setup_s>());
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "dl_ccch_msg_type_c::c1_c_");
  }

  return *this;
}
rrc_reject_s& dl_ccch_msg_type_c::c1_c_::set_rrc_reject()
{
  set(types::rrc_reject);
  return c.get<rrc_reject_s>();
}
rrc_setup_s& dl_ccch_msg_type_c::c1_c_::set_rrc_setup()
{
  set(types::rrc_setup);
  return c.get<rrc_setup_s>();
}
void dl_ccch_msg_type_c::c1_c_::set_spare2()
{
  set(types::spare2);
}
void dl_ccch_msg_type_c::c1_c_::set_spare1()
{
  set(types::spare1);
}
void dl_ccch_msg_type_c::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_reject:
      j.write_fieldname("rrcReject");
      c.get<rrc_reject_s>().to_json(j);
      break;
    case types::rrc_setup:
      j.write_fieldname("rrcSetup");
      c.get<rrc_setup_s>().to_json(j);
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "dl_ccch_msg_type_c::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE dl_ccch_msg_type_c::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_reject:
      HANDLE_CODE(c.get<rrc_reject_s>().pack(bref));
      break;
    case types::rrc_setup:
      HANDLE_CODE(c.get<rrc_setup_s>().pack(bref));
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "dl_ccch_msg_type_c::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_ccch_msg_type_c::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_reject:
      HANDLE_CODE(c.get<rrc_reject_s>().unpack(bref));
      break;
    case types::rrc_setup:
      HANDLE_CODE(c.get<rrc_setup_s>().unpack(bref));
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "dl_ccch_msg_type_c::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* dl_ccch_msg_type_c::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcReject", "rrcSetup", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "dl_ccch_msg_type_c::c1_c_::types");
}

const char* dl_ccch_msg_type_c::types_opts::to_string() const
{
  static const char* names[] = {"c1", "messageClassExtension"};
  return convert_enum_idx(names, 2, value, "dl_ccch_msg_type_c::types");
}
uint8_t dl_ccch_msg_type_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "dl_ccch_msg_type_c::types");
}

// DL-CCCH-Message ::= SEQUENCE
SRSASN_CODE dl_ccch_msg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(msg.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_ccch_msg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(msg.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void dl_ccch_msg_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("DL-CCCH-Message");
  j.write_fieldname("message");
  msg.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

// MUSIM-Starting-SFN-AndSubframe-r17 ::= SEQUENCE
SRSASN_CODE mu_si_m_start_sfn_and_sf_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, start_sfn_r17, (uint16_t)0u, (uint16_t)1023u));
  HANDLE_CODE(pack_integer(bref, start_sf_r17, (uint8_t)0u, (uint8_t)9u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mu_si_m_start_sfn_and_sf_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(start_sfn_r17, bref, (uint16_t)0u, (uint16_t)1023u));
  HANDLE_CODE(unpack_integer(start_sf_r17, bref, (uint8_t)0u, (uint8_t)9u));

  return SRSASN_SUCCESS;
}
void mu_si_m_start_sfn_and_sf_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("starting-SFN-r17", start_sfn_r17);
  j.write_int("startingSubframe-r17", start_sf_r17);
  j.end_obj();
}

const char* srs_periodicity_and_offset_c::types_opts::to_string() const
{
  static const char* names[] = {"sl1",
                                "sl2",
                                "sl4",
                                "sl5",
                                "sl8",
                                "sl10",
                                "sl16",
                                "sl20",
                                "sl32",
                                "sl40",
                                "sl64",
                                "sl80",
                                "sl160",
                                "sl320",
                                "sl640",
                                "sl1280",
                                "sl2560"};
  return convert_enum_idx(names, 17, value, "srs_periodicity_and_offset_c::types");
}
uint16_t srs_periodicity_and_offset_c::types_opts::to_number() const
{
  static const uint16_t numbers[] = {1, 2, 4, 5, 8, 10, 16, 20, 32, 40, 64, 80, 160, 320, 640, 1280, 2560};
  return map_enum_number(numbers, 17, value, "srs_periodicity_and_offset_c::types");
}

const char* srs_spatial_relation_info_s::ref_sig_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-Index", "csi-RS-Index", "srs"};
  return convert_enum_idx(names, 3, value, "srs_spatial_relation_info_s::ref_sig_c_::types");
}

const char* spatial_relation_info_pdc_r17_s::ref_sig_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-Index", "csi-RS-Index", "dl-PRS-PDC", "srs"};
  return convert_enum_idx(names, 4, value, "spatial_relation_info_pdc_r17_s::ref_sig_c_::types");
}

// CSI-RS-Resource-Mobility ::= SEQUENCE
SRSASN_CODE csi_rs_res_mob_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(associated_ssb_present, 1));

  HANDLE_CODE(pack_integer(bref, csi_rs_idx, (uint8_t)0u, (uint8_t)95u));
  HANDLE_CODE(slot_cfg.pack(bref));
  if (associated_ssb_present) {
    HANDLE_CODE(pack_integer(bref, associated_ssb.ssb_idx, (uint8_t)0u, (uint8_t)63u));
    HANDLE_CODE(bref.pack(associated_ssb.is_quasi_colocated, 1));
  }
  HANDLE_CODE(freq_domain_alloc.pack(bref));
  HANDLE_CODE(pack_integer(bref, first_ofdm_symbol_in_time_domain, (uint8_t)0u, (uint8_t)13u));
  HANDLE_CODE(pack_integer(bref, seq_generation_cfg, (uint16_t)0u, (uint16_t)1023u));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= slot_cfg_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(slot_cfg_r17.is_present(), 1));
      if (slot_cfg_r17.is_present()) {
        HANDLE_CODE(slot_cfg_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE csi_rs_res_mob_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(associated_ssb_present, 1));

  HANDLE_CODE(unpack_integer(csi_rs_idx, bref, (uint8_t)0u, (uint8_t)95u));
  HANDLE_CODE(slot_cfg.unpack(bref));
  if (associated_ssb_present) {
    HANDLE_CODE(unpack_integer(associated_ssb.ssb_idx, bref, (uint8_t)0u, (uint8_t)63u));
    HANDLE_CODE(bref.unpack(associated_ssb.is_quasi_colocated, 1));
  }
  HANDLE_CODE(freq_domain_alloc.unpack(bref));
  HANDLE_CODE(unpack_integer(first_ofdm_symbol_in_time_domain, bref, (uint8_t)0u, (uint8_t)13u));
  HANDLE_CODE(unpack_integer(seq_generation_cfg, bref, (uint16_t)0u, (uint16_t)1023u));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(slot_cfg_r17, bref);
      if (slot_cfg_r17.is_present()) {
        HANDLE_CODE(slot_cfg_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void csi_rs_res_mob_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("csi-RS-Index", csi_rs_idx);
  j.write_fieldname("slotConfig");
  slot_cfg.to_json(j);
  if (associated_ssb_present) {
    j.write_fieldname("associatedSSB");
    j.start_obj();
    j.write_int("ssb-Index", associated_ssb.ssb_idx);
    j.write_bool("isQuasiColocated", associated_ssb.is_quasi_colocated);
    j.end_obj();
  }
  j.write_fieldname("frequencyDomainAllocation");
  freq_domain_alloc.to_json(j);
  j.write_int("firstOFDMSymbolInTimeDomain", first_ofdm_symbol_in_time_domain);
  j.write_int("sequenceGenerationConfig", seq_generation_cfg);
  if (ext) {
    if (slot_cfg_r17.is_present()) {
      j.write_fieldname("slotConfig-r17");
      slot_cfg_r17->to_json(j);
    }
  }
  j.end_obj();
}

void csi_rs_res_mob_s::slot_cfg_c_::destroy_() {}
void csi_rs_res_mob_s::slot_cfg_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
csi_rs_res_mob_s::slot_cfg_c_::slot_cfg_c_(const csi_rs_res_mob_s::slot_cfg_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ms4:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms5:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms10:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms40:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::slot_cfg_c_");
  }
}
csi_rs_res_mob_s::slot_cfg_c_& csi_rs_res_mob_s::slot_cfg_c_::operator=(const csi_rs_res_mob_s::slot_cfg_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ms4:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms5:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms10:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms40:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::slot_cfg_c_");
  }

  return *this;
}
uint8_t& csi_rs_res_mob_s::slot_cfg_c_::set_ms4()
{
  set(types::ms4);
  return c.get<uint8_t>();
}
uint8_t& csi_rs_res_mob_s::slot_cfg_c_::set_ms5()
{
  set(types::ms5);
  return c.get<uint8_t>();
}
uint8_t& csi_rs_res_mob_s::slot_cfg_c_::set_ms10()
{
  set(types::ms10);
  return c.get<uint8_t>();
}
uint8_t& csi_rs_res_mob_s::slot_cfg_c_::set_ms20()
{
  set(types::ms20);
  return c.get<uint8_t>();
}
uint16_t& csi_rs_res_mob_s::slot_cfg_c_::set_ms40()
{
  set(types::ms40);
  return c.get<uint16_t>();
}
void csi_rs_res_mob_s::slot_cfg_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ms4:
      j.write_int("ms4", c.get<uint8_t>());
      break;
    case types::ms5:
      j.write_int("ms5", c.get<uint8_t>());
      break;
    case types::ms10:
      j.write_int("ms10", c.get<uint8_t>());
      break;
    case types::ms20:
      j.write_int("ms20", c.get<uint8_t>());
      break;
    case types::ms40:
      j.write_int("ms40", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::slot_cfg_c_");
  }
  j.end_obj();
}
SRSASN_CODE csi_rs_res_mob_s::slot_cfg_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ms4:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms5:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms10:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms20:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms40:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)319u));
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::slot_cfg_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE csi_rs_res_mob_s::slot_cfg_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ms4:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms5:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms10:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms20:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms40:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)319u));
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::slot_cfg_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* csi_rs_res_mob_s::slot_cfg_c_::types_opts::to_string() const
{
  static const char* names[] = {"ms4", "ms5", "ms10", "ms20", "ms40"};
  return convert_enum_idx(names, 5, value, "csi_rs_res_mob_s::slot_cfg_c_::types");
}
uint8_t csi_rs_res_mob_s::slot_cfg_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 5, 10, 20, 40};
  return map_enum_number(numbers, 5, value, "csi_rs_res_mob_s::slot_cfg_c_::types");
}

void csi_rs_res_mob_s::freq_domain_alloc_c_::destroy_()
{
  switch (type_) {
    case types::row1:
      c.destroy<fixed_bitstring<4>>();
      break;
    case types::row2:
      c.destroy<fixed_bitstring<12>>();
      break;
    default:
      break;
  }
}
void csi_rs_res_mob_s::freq_domain_alloc_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::row1:
      c.init<fixed_bitstring<4>>();
      break;
    case types::row2:
      c.init<fixed_bitstring<12>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::freq_domain_alloc_c_");
  }
}
csi_rs_res_mob_s::freq_domain_alloc_c_::freq_domain_alloc_c_(const csi_rs_res_mob_s::freq_domain_alloc_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::row1:
      c.init(other.c.get<fixed_bitstring<4>>());
      break;
    case types::row2:
      c.init(other.c.get<fixed_bitstring<12>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::freq_domain_alloc_c_");
  }
}
csi_rs_res_mob_s::freq_domain_alloc_c_&
csi_rs_res_mob_s::freq_domain_alloc_c_::operator=(const csi_rs_res_mob_s::freq_domain_alloc_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::row1:
      c.set(other.c.get<fixed_bitstring<4>>());
      break;
    case types::row2:
      c.set(other.c.get<fixed_bitstring<12>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::freq_domain_alloc_c_");
  }

  return *this;
}
fixed_bitstring<4>& csi_rs_res_mob_s::freq_domain_alloc_c_::set_row1()
{
  set(types::row1);
  return c.get<fixed_bitstring<4>>();
}
fixed_bitstring<12>& csi_rs_res_mob_s::freq_domain_alloc_c_::set_row2()
{
  set(types::row2);
  return c.get<fixed_bitstring<12>>();
}
void csi_rs_res_mob_s::freq_domain_alloc_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::row1:
      j.write_str("row1", c.get<fixed_bitstring<4>>().to_string());
      break;
    case types::row2:
      j.write_str("row2", c.get<fixed_bitstring<12>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::freq_domain_alloc_c_");
  }
  j.end_obj();
}
SRSASN_CODE csi_rs_res_mob_s::freq_domain_alloc_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::row1:
      HANDLE_CODE(c.get<fixed_bitstring<4>>().pack(bref));
      break;
    case types::row2:
      HANDLE_CODE(c.get<fixed_bitstring<12>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::freq_domain_alloc_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE csi_rs_res_mob_s::freq_domain_alloc_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::row1:
      HANDLE_CODE(c.get<fixed_bitstring<4>>().unpack(bref));
      break;
    case types::row2:
      HANDLE_CODE(c.get<fixed_bitstring<12>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::freq_domain_alloc_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* csi_rs_res_mob_s::freq_domain_alloc_c_::types_opts::to_string() const
{
  static const char* names[] = {"row1", "row2"};
  return convert_enum_idx(names, 2, value, "csi_rs_res_mob_s::freq_domain_alloc_c_::types");
}
uint8_t csi_rs_res_mob_s::freq_domain_alloc_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "csi_rs_res_mob_s::freq_domain_alloc_c_::types");
}

void csi_rs_res_mob_s::slot_cfg_r17_c_::destroy_() {}
void csi_rs_res_mob_s::slot_cfg_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
csi_rs_res_mob_s::slot_cfg_r17_c_::slot_cfg_r17_c_(const csi_rs_res_mob_s::slot_cfg_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ms4:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms5:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms10:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms20:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms40:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::slot_cfg_r17_c_");
  }
}
csi_rs_res_mob_s::slot_cfg_r17_c_&
csi_rs_res_mob_s::slot_cfg_r17_c_::operator=(const csi_rs_res_mob_s::slot_cfg_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ms4:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms5:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms10:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms20:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms40:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::slot_cfg_r17_c_");
  }

  return *this;
}
uint16_t& csi_rs_res_mob_s::slot_cfg_r17_c_::set_ms4()
{
  set(types::ms4);
  return c.get<uint16_t>();
}
uint16_t& csi_rs_res_mob_s::slot_cfg_r17_c_::set_ms5()
{
  set(types::ms5);
  return c.get<uint16_t>();
}
uint16_t& csi_rs_res_mob_s::slot_cfg_r17_c_::set_ms10()
{
  set(types::ms10);
  return c.get<uint16_t>();
}
uint16_t& csi_rs_res_mob_s::slot_cfg_r17_c_::set_ms20()
{
  set(types::ms20);
  return c.get<uint16_t>();
}
uint16_t& csi_rs_res_mob_s::slot_cfg_r17_c_::set_ms40()
{
  set(types::ms40);
  return c.get<uint16_t>();
}
void csi_rs_res_mob_s::slot_cfg_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ms4:
      j.write_int("ms4", c.get<uint16_t>());
      break;
    case types::ms5:
      j.write_int("ms5", c.get<uint16_t>());
      break;
    case types::ms10:
      j.write_int("ms10", c.get<uint16_t>());
      break;
    case types::ms20:
      j.write_int("ms20", c.get<uint16_t>());
      break;
    case types::ms40:
      j.write_int("ms40", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::slot_cfg_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE csi_rs_res_mob_s::slot_cfg_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ms4:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u));
      break;
    case types::ms5:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms10:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms20:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms40:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)2559u));
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::slot_cfg_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE csi_rs_res_mob_s::slot_cfg_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ms4:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u));
      break;
    case types::ms5:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms10:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms20:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms40:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)2559u));
      break;
    default:
      log_invalid_choice_id(type_, "csi_rs_res_mob_s::slot_cfg_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* csi_rs_res_mob_s::slot_cfg_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"ms4", "ms5", "ms10", "ms20", "ms40"};
  return convert_enum_idx(names, 5, value, "csi_rs_res_mob_s::slot_cfg_r17_c_::types");
}
uint8_t csi_rs_res_mob_s::slot_cfg_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 5, 10, 20, 40};
  return map_enum_number(numbers, 5, value, "csi_rs_res_mob_s::slot_cfg_r17_c_::types");
}

// MUSIM-GapInfo-r17 ::= SEQUENCE
SRSASN_CODE mu_si_m_gap_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(musim_start_sfn_and_sf_r17_present, 1));
  HANDLE_CODE(bref.pack(musim_gap_len_r17_present, 1));
  HANDLE_CODE(bref.pack(musim_gap_repeat_and_offset_r17_present, 1));

  if (musim_start_sfn_and_sf_r17_present) {
    HANDLE_CODE(musim_start_sfn_and_sf_r17.pack(bref));
  }
  if (musim_gap_len_r17_present) {
    HANDLE_CODE(musim_gap_len_r17.pack(bref));
  }
  if (musim_gap_repeat_and_offset_r17_present) {
    HANDLE_CODE(musim_gap_repeat_and_offset_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mu_si_m_gap_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(musim_start_sfn_and_sf_r17_present, 1));
  HANDLE_CODE(bref.unpack(musim_gap_len_r17_present, 1));
  HANDLE_CODE(bref.unpack(musim_gap_repeat_and_offset_r17_present, 1));

  if (musim_start_sfn_and_sf_r17_present) {
    HANDLE_CODE(musim_start_sfn_and_sf_r17.unpack(bref));
  }
  if (musim_gap_len_r17_present) {
    HANDLE_CODE(musim_gap_len_r17.unpack(bref));
  }
  if (musim_gap_repeat_and_offset_r17_present) {
    HANDLE_CODE(musim_gap_repeat_and_offset_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mu_si_m_gap_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (musim_start_sfn_and_sf_r17_present) {
    j.write_fieldname("musim-Starting-SFN-AndSubframe-r17");
    musim_start_sfn_and_sf_r17.to_json(j);
  }
  if (musim_gap_len_r17_present) {
    j.write_str("musim-GapLength-r17", musim_gap_len_r17.to_string());
  }
  if (musim_gap_repeat_and_offset_r17_present) {
    j.write_fieldname("musim-GapRepetitionAndOffset-r17");
    musim_gap_repeat_and_offset_r17.to_json(j);
  }
  j.end_obj();
}

const char* mu_si_m_gap_info_r17_s::musim_gap_len_r17_opts::to_string() const
{
  static const char* names[] = {"ms3", "ms4", "ms6", "ms10", "ms20"};
  return convert_enum_idx(names, 5, value, "mu_si_m_gap_info_r17_s::musim_gap_len_r17_e_");
}
uint8_t mu_si_m_gap_info_r17_s::musim_gap_len_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {3, 4, 6, 10, 20};
  return map_enum_number(numbers, 5, value, "mu_si_m_gap_info_r17_s::musim_gap_len_r17_e_");
}

void mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::destroy_() {}
void mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::musim_gap_repeat_and_offset_r17_c_(
    const mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ms20_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms40_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms80_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms160_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms320_r17:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms640_r17:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms1280_r17:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms2560_r17:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms5120_r17:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_");
  }
}
mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_&
mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::operator=(
    const mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ms20_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms40_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms80_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms160_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms320_r17:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms640_r17:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms1280_r17:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms2560_r17:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms5120_r17:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_");
  }

  return *this;
}
uint8_t& mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::set_ms20_r17()
{
  set(types::ms20_r17);
  return c.get<uint8_t>();
}
uint8_t& mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::set_ms40_r17()
{
  set(types::ms40_r17);
  return c.get<uint8_t>();
}
uint8_t& mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::set_ms80_r17()
{
  set(types::ms80_r17);
  return c.get<uint8_t>();
}
uint8_t& mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::set_ms160_r17()
{
  set(types::ms160_r17);
  return c.get<uint8_t>();
}
uint16_t& mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::set_ms320_r17()
{
  set(types::ms320_r17);
  return c.get<uint16_t>();
}
uint16_t& mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::set_ms640_r17()
{
  set(types::ms640_r17);
  return c.get<uint16_t>();
}
uint16_t& mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::set_ms1280_r17()
{
  set(types::ms1280_r17);
  return c.get<uint16_t>();
}
uint16_t& mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::set_ms2560_r17()
{
  set(types::ms2560_r17);
  return c.get<uint16_t>();
}
uint16_t& mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::set_ms5120_r17()
{
  set(types::ms5120_r17);
  return c.get<uint16_t>();
}
void mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ms20_r17:
      j.write_int("ms20-r17", c.get<uint8_t>());
      break;
    case types::ms40_r17:
      j.write_int("ms40-r17", c.get<uint8_t>());
      break;
    case types::ms80_r17:
      j.write_int("ms80-r17", c.get<uint8_t>());
      break;
    case types::ms160_r17:
      j.write_int("ms160-r17", c.get<uint8_t>());
      break;
    case types::ms320_r17:
      j.write_int("ms320-r17", c.get<uint16_t>());
      break;
    case types::ms640_r17:
      j.write_int("ms640-r17", c.get<uint16_t>());
      break;
    case types::ms1280_r17:
      j.write_int("ms1280-r17", c.get<uint16_t>());
      break;
    case types::ms2560_r17:
      j.write_int("ms2560-r17", c.get<uint16_t>());
      break;
    case types::ms5120_r17:
      j.write_int("ms5120-r17", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ms20_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms40_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms80_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms160_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms320_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms640_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms1280_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms2560_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)2559u));
      break;
    case types::ms5120_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)5119u));
      break;
    default:
      log_invalid_choice_id(type_, "mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ms20_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms40_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms80_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms160_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms320_r17:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms640_r17:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms1280_r17:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms2560_r17:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)2559u));
      break;
    case types::ms5120_r17:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)5119u));
      break;
    default:
      log_invalid_choice_id(type_, "mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"ms20-r17",
                                "ms40-r17",
                                "ms80-r17",
                                "ms160-r17",
                                "ms320-r17",
                                "ms640-r17",
                                "ms1280-r17",
                                "ms2560-r17",
                                "ms5120-r17"};
  return convert_enum_idx(names, 9, value, "mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::types");
}
uint16_t mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {20, 40, 80, 160, 320, 640, 1280, 2560, 5120};
  return map_enum_number(numbers, 9, value, "mu_si_m_gap_info_r17_s::musim_gap_repeat_and_offset_r17_c_::types");
}

// NeighbourCellInfo-r17 ::= SEQUENCE
SRSASN_CODE neighbour_cell_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(epoch_time_r17.pack(bref));
  HANDLE_CODE(ephemeris_info_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE neighbour_cell_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(epoch_time_r17.unpack(bref));
  HANDLE_CODE(ephemeris_info_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void neighbour_cell_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("epochTime-r17");
  epoch_time_r17.to_json(j);
  j.write_fieldname("ephemerisInfo-r17");
  ephemeris_info_r17.to_json(j);
  j.end_obj();
}

// RAN-VisibleParameters-r17 ::= SEQUENCE
SRSASN_CODE ran_visible_params_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ran_visible_periodicity_r17_present, 1));
  HANDLE_CODE(bref.pack(nof_buffer_level_entries_r17_present, 1));
  HANDLE_CODE(bref.pack(report_playout_delay_for_media_startup_r17_present, 1));

  if (ran_visible_periodicity_r17_present) {
    HANDLE_CODE(ran_visible_periodicity_r17.pack(bref));
  }
  if (nof_buffer_level_entries_r17_present) {
    HANDLE_CODE(pack_integer(bref, nof_buffer_level_entries_r17, (uint8_t)1u, (uint8_t)8u));
  }
  if (report_playout_delay_for_media_startup_r17_present) {
    HANDLE_CODE(bref.pack(report_playout_delay_for_media_startup_r17, 1));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ran_visible_params_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ran_visible_periodicity_r17_present, 1));
  HANDLE_CODE(bref.unpack(nof_buffer_level_entries_r17_present, 1));
  HANDLE_CODE(bref.unpack(report_playout_delay_for_media_startup_r17_present, 1));

  if (ran_visible_periodicity_r17_present) {
    HANDLE_CODE(ran_visible_periodicity_r17.unpack(bref));
  }
  if (nof_buffer_level_entries_r17_present) {
    HANDLE_CODE(unpack_integer(nof_buffer_level_entries_r17, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (report_playout_delay_for_media_startup_r17_present) {
    HANDLE_CODE(bref.unpack(report_playout_delay_for_media_startup_r17, 1));
  }

  return SRSASN_SUCCESS;
}
void ran_visible_params_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ran_visible_periodicity_r17_present) {
    j.write_str("ran-VisiblePeriodicity-r17", ran_visible_periodicity_r17.to_string());
  }
  if (nof_buffer_level_entries_r17_present) {
    j.write_int("numberOfBufferLevelEntries-r17", nof_buffer_level_entries_r17);
  }
  if (report_playout_delay_for_media_startup_r17_present) {
    j.write_bool("reportPlayoutDelayForMediaStartup-r17", report_playout_delay_for_media_startup_r17);
  }
  j.end_obj();
}

const char* ran_visible_params_r17_s::ran_visible_periodicity_r17_opts::to_string() const
{
  static const char* names[] = {"ms120", "ms240", "ms480", "ms640", "ms1024"};
  return convert_enum_idx(names, 5, value, "ran_visible_params_r17_s::ran_visible_periodicity_r17_e_");
}
uint16_t ran_visible_params_r17_s::ran_visible_periodicity_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {120, 240, 480, 640, 1024};
  return map_enum_number(numbers, 5, value, "ran_visible_params_r17_s::ran_visible_periodicity_r17_e_");
}

// RSSI-PeriodicityAndOffset-r16 ::= CHOICE
void rssi_periodicity_and_offset_r16_c::destroy_() {}
void rssi_periodicity_and_offset_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
rssi_periodicity_and_offset_r16_c::rssi_periodicity_and_offset_r16_c(const rssi_periodicity_and_offset_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sl10:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sl20:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sl40:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sl80:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sl160:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sl320:
      c.init(other.c.get<uint16_t>());
      break;
    case types::s1640:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rssi_periodicity_and_offset_r16_c");
  }
}
rssi_periodicity_and_offset_r16_c&
rssi_periodicity_and_offset_r16_c::operator=(const rssi_periodicity_and_offset_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sl10:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sl20:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sl40:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sl80:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sl160:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sl320:
      c.set(other.c.get<uint16_t>());
      break;
    case types::s1640:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rssi_periodicity_and_offset_r16_c");
  }

  return *this;
}
uint8_t& rssi_periodicity_and_offset_r16_c::set_sl10()
{
  set(types::sl10);
  return c.get<uint8_t>();
}
uint8_t& rssi_periodicity_and_offset_r16_c::set_sl20()
{
  set(types::sl20);
  return c.get<uint8_t>();
}
uint8_t& rssi_periodicity_and_offset_r16_c::set_sl40()
{
  set(types::sl40);
  return c.get<uint8_t>();
}
uint8_t& rssi_periodicity_and_offset_r16_c::set_sl80()
{
  set(types::sl80);
  return c.get<uint8_t>();
}
uint8_t& rssi_periodicity_and_offset_r16_c::set_sl160()
{
  set(types::sl160);
  return c.get<uint8_t>();
}
uint16_t& rssi_periodicity_and_offset_r16_c::set_sl320()
{
  set(types::sl320);
  return c.get<uint16_t>();
}
uint16_t& rssi_periodicity_and_offset_r16_c::set_s1640()
{
  set(types::s1640);
  return c.get<uint16_t>();
}
void rssi_periodicity_and_offset_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sl10:
      j.write_int("sl10", c.get<uint8_t>());
      break;
    case types::sl20:
      j.write_int("sl20", c.get<uint8_t>());
      break;
    case types::sl40:
      j.write_int("sl40", c.get<uint8_t>());
      break;
    case types::sl80:
      j.write_int("sl80", c.get<uint8_t>());
      break;
    case types::sl160:
      j.write_int("sl160", c.get<uint8_t>());
      break;
    case types::sl320:
      j.write_int("sl320", c.get<uint16_t>());
      break;
    case types::s1640:
      j.write_int("s1640", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "rssi_periodicity_and_offset_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE rssi_periodicity_and_offset_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sl10:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)9u));
      break;
    case types::sl20:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)19u));
      break;
    case types::sl40:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)39u));
      break;
    case types::sl80:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u));
      break;
    case types::sl160:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)159u));
      break;
    case types::sl320:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)319u));
      break;
    case types::s1640:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)639u));
      break;
    default:
      log_invalid_choice_id(type_, "rssi_periodicity_and_offset_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rssi_periodicity_and_offset_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sl10:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)9u));
      break;
    case types::sl20:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)19u));
      break;
    case types::sl40:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)39u));
      break;
    case types::sl80:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u));
      break;
    case types::sl160:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)159u));
      break;
    case types::sl320:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)319u));
      break;
    case types::s1640:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)639u));
      break;
    default:
      log_invalid_choice_id(type_, "rssi_periodicity_and_offset_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rssi_periodicity_and_offset_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"sl10", "sl20", "sl40", "sl80", "sl160", "sl320", "s1640"};
  return convert_enum_idx(names, 7, value, "rssi_periodicity_and_offset_r16_c::types");
}
uint16_t rssi_periodicity_and_offset_r16_c::types_opts::to_number() const
{
  static const uint16_t numbers[] = {10, 20, 40, 80, 160, 320, 1640};
  return map_enum_number(numbers, 7, value, "rssi_periodicity_and_offset_r16_c::types");
}

const char* srs_res_s::tx_comb_c_::types_opts::to_string() const
{
  static const char* names[] = {"n2", "n4"};
  return convert_enum_idx(names, 2, value, "srs_res_s::tx_comb_c_::types");
}
uint8_t srs_res_s::tx_comb_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4};
  return map_enum_number(numbers, 2, value, "srs_res_s::tx_comb_c_::types");
}

const char* srs_res_s::res_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"aperiodic", "semi-persistent", "periodic"};
  return convert_enum_idx(names, 3, value, "srs_res_s::res_type_c_::types");
}

const char* srs_res_s::partial_freq_sr17_s_::start_rb_idx_f_scaling_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"startRBIndexAndFreqScalingFactor2-r17", "startRBIndexAndFreqScalingFactor4-r17"};
  return convert_enum_idx(names, 2, value, "srs_res_s::partial_freq_sr17_s_::start_rb_idx_f_scaling_r17_c_::types");
}
uint8_t srs_res_s::partial_freq_sr17_s_::start_rb_idx_f_scaling_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4};
  return map_enum_number(numbers, 2, value, "srs_res_s::partial_freq_sr17_s_::start_rb_idx_f_scaling_r17_c_::types");
}

const char* srs_res_s::srs_tci_state_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"srs-UL-TCI-State", "srs-DLorJointTCI-State"};
  return convert_enum_idx(names, 2, value, "srs_res_s::srs_tci_state_r17_c_::types");
}

// SSB-PositionQCL-Cell-r17 ::= SEQUENCE
SRSASN_CODE ssb_position_qcl_cell_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, pci_r17, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(ssb_position_qcl_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ssb_position_qcl_cell_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(pci_r17, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(ssb_position_qcl_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void ssb_position_qcl_cell_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId-r17", pci_r17);
  j.write_str("ssb-PositionQCL-r17", ssb_position_qcl_r17.to_string());
  j.end_obj();
}

// SSB-PositionQCL-CellsToAddMod-r16 ::= SEQUENCE
SRSASN_CODE ssb_position_qcl_cells_to_add_mod_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, pci_r16, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(ssb_position_qcl_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ssb_position_qcl_cells_to_add_mod_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(pci_r16, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(ssb_position_qcl_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void ssb_position_qcl_cells_to_add_mod_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId-r16", pci_r16);
  j.write_str("ssb-PositionQCL-r16", ssb_position_qcl_r16.to_string());
  j.end_obj();
}

// BFD-RelaxationReportingConfig-r17 ::= SEQUENCE
SRSASN_CODE bfd_relaxation_report_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bfd_relaxtion_report_prohibit_timer.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE bfd_relaxation_report_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bfd_relaxtion_report_prohibit_timer.unpack(bref));

  return SRSASN_SUCCESS;
}
void bfd_relaxation_report_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("bfd-RelaxtionReportingProhibitTimer", bfd_relaxtion_report_prohibit_timer.to_string());
  j.end_obj();
}

const char* bfd_relaxation_report_cfg_r17_s::bfd_relaxtion_report_prohibit_timer_opts::to_string() const
{
  static const char* names[] = {"s0",
                                "s0dot5",
                                "s1",
                                "s2",
                                "s5",
                                "s10",
                                "s20",
                                "s30",
                                "s60",
                                "s90",
                                "s120",
                                "s300",
                                "s600",
                                "infinity",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "bfd_relaxation_report_cfg_r17_s::bfd_relaxtion_report_prohibit_timer_e_");
}
float bfd_relaxation_report_cfg_r17_s::bfd_relaxtion_report_prohibit_timer_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 30.0, 60.0, 90.0, 120.0, 300.0, 600.0, -1.0};
  return map_enum_number(numbers, 14, value, "bfd_relaxation_report_cfg_r17_s::bfd_relaxtion_report_prohibit_timer_e_");
}
const char* bfd_relaxation_report_cfg_r17_s::bfd_relaxtion_report_prohibit_timer_opts::to_number_string() const
{
  static const char* number_strs[] = {
      "0", "0.5", "1", "2", "5", "10", "20", "30", "60", "90", "120", "300", "600", "inf"};
  return convert_enum_idx(
      number_strs, 16, value, "bfd_relaxation_report_cfg_r17_s::bfd_relaxtion_report_prohibit_timer_e_");
}

// CSI-RS-CellMobility ::= SEQUENCE
SRSASN_CODE csi_rs_cell_mob_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(density_present, 1));

  HANDLE_CODE(pack_integer(bref, cell_id, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(csi_rs_meas_bw.nrof_prbs.pack(bref));
  HANDLE_CODE(pack_integer(bref, csi_rs_meas_bw.start_prb, (uint16_t)0u, (uint16_t)2169u));
  if (density_present) {
    HANDLE_CODE(density.pack(bref));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, csi_rs_res_list_mob, 1, 96));

  return SRSASN_SUCCESS;
}
SRSASN_CODE csi_rs_cell_mob_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(density_present, 1));

  HANDLE_CODE(unpack_integer(cell_id, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(csi_rs_meas_bw.nrof_prbs.unpack(bref));
  HANDLE_CODE(unpack_integer(csi_rs_meas_bw.start_prb, bref, (uint16_t)0u, (uint16_t)2169u));
  if (density_present) {
    HANDLE_CODE(density.unpack(bref));
  }
  HANDLE_CODE(unpack_dyn_seq_of(csi_rs_res_list_mob, bref, 1, 96));

  return SRSASN_SUCCESS;
}
void csi_rs_cell_mob_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("cellId", cell_id);
  j.write_fieldname("csi-rs-MeasurementBW");
  j.start_obj();
  j.write_str("nrofPRBs", csi_rs_meas_bw.nrof_prbs.to_string());
  j.write_int("startPRB", csi_rs_meas_bw.start_prb);
  j.end_obj();
  if (density_present) {
    j.write_str("density", density.to_string());
  }
  j.start_array("csi-rs-ResourceList-Mobility");
  for (const auto& e1 : csi_rs_res_list_mob) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

const char* csi_rs_cell_mob_s::csi_rs_meas_bw_s_::nrof_prbs_opts::to_string() const
{
  static const char* names[] = {"size24", "size48", "size96", "size192", "size264"};
  return convert_enum_idx(names, 5, value, "csi_rs_cell_mob_s::csi_rs_meas_bw_s_::nrof_prbs_e_");
}
uint16_t csi_rs_cell_mob_s::csi_rs_meas_bw_s_::nrof_prbs_opts::to_number() const
{
  static const uint16_t numbers[] = {24, 48, 96, 192, 264};
  return map_enum_number(numbers, 5, value, "csi_rs_cell_mob_s::csi_rs_meas_bw_s_::nrof_prbs_e_");
}

const char* csi_rs_cell_mob_s::density_opts::to_string() const
{
  static const char* names[] = {"d1", "d3"};
  return convert_enum_idx(names, 2, value, "csi_rs_cell_mob_s::density_e_");
}
uint8_t csi_rs_cell_mob_s::density_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 3};
  return map_enum_number(numbers, 2, value, "csi_rs_cell_mob_s::density_e_");
}

// CondReconfigToAddMod-r16 ::= SEQUENCE
SRSASN_CODE cond_recfg_to_add_mod_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cond_execution_cond_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(cond_rrc_recfg_r16.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, cond_recfg_id_r16, (uint8_t)1u, (uint8_t)8u));
  if (cond_execution_cond_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cond_execution_cond_r16, 1, 2, integer_packer<uint8_t>(1, 64)));
  }
  if (cond_rrc_recfg_r16.size() > 0) {
    HANDLE_CODE(cond_rrc_recfg_r16.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= cond_execution_cond_scg_r17.size() > 0;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(cond_execution_cond_scg_r17.size() > 0, 1));
      if (cond_execution_cond_scg_r17.size() > 0) {
        HANDLE_CODE(cond_execution_cond_scg_r17.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cond_recfg_to_add_mod_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool cond_execution_cond_r16_present;
  HANDLE_CODE(bref.unpack(cond_execution_cond_r16_present, 1));
  bool cond_rrc_recfg_r16_present;
  HANDLE_CODE(bref.unpack(cond_rrc_recfg_r16_present, 1));

  HANDLE_CODE(unpack_integer(cond_recfg_id_r16, bref, (uint8_t)1u, (uint8_t)8u));
  if (cond_execution_cond_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cond_execution_cond_r16, bref, 1, 2, integer_packer<uint8_t>(1, 64)));
  }
  if (cond_rrc_recfg_r16_present) {
    HANDLE_CODE(cond_rrc_recfg_r16.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      bool cond_execution_cond_scg_r17_present;
      HANDLE_CODE(bref.unpack(cond_execution_cond_scg_r17_present, 1));
      if (cond_execution_cond_scg_r17_present) {
        HANDLE_CODE(cond_execution_cond_scg_r17.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void cond_recfg_to_add_mod_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("condReconfigId-r16", cond_recfg_id_r16);
  if (cond_execution_cond_r16.size() > 0) {
    j.start_array("condExecutionCond-r16");
    for (const auto& e1 : cond_execution_cond_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (cond_rrc_recfg_r16.size() > 0) {
    j.write_str("condRRCReconfig-r16", cond_rrc_recfg_r16.to_string());
  }
  if (ext) {
    if (cond_execution_cond_scg_r17.size() > 0) {
      j.write_str("condExecutionCondSCG-r17", cond_execution_cond_scg_r17.to_string());
    }
  }
  j.end_obj();
}

// ExcessDelay-DRB-IdentityInfo-r17 ::= SEQUENCE
SRSASN_CODE excess_delay_drb_id_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, drb_id_list, 1, 29, integer_packer<uint8_t>(1, 32)));
  HANDLE_CODE(delay_thres.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE excess_delay_drb_id_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(drb_id_list, bref, 1, 29, integer_packer<uint8_t>(1, 32)));
  HANDLE_CODE(delay_thres.unpack(bref));

  return SRSASN_SUCCESS;
}
void excess_delay_drb_id_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("drb-IdentityList");
  for (const auto& e1 : drb_id_list) {
    j.write_int(e1);
  }
  j.end_array();
  j.write_str("delayThreshold", delay_thres.to_string());
  j.end_obj();
}

const char* excess_delay_drb_id_info_r17_s::delay_thres_opts::to_string() const
{
  static const char* names[] = {"ms0dot25",
                                "ms0dot5",
                                "ms1",
                                "ms2",
                                "ms4",
                                "ms5",
                                "ms10",
                                "ms20",
                                "ms30",
                                "ms40",
                                "ms50",
                                "ms60",
                                "ms70",
                                "ms80",
                                "ms90",
                                "ms100",
                                "ms150",
                                "ms300",
                                "ms500"};
  return convert_enum_idx(names, 19, value, "excess_delay_drb_id_info_r17_s::delay_thres_e_");
}
float excess_delay_drb_id_info_r17_s::delay_thres_opts::to_number() const
{
  static const float numbers[] = {
      0.25, 0.5, 1.0, 2.0, 4.0, 5.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0, 150.0, 300.0, 500.0};
  return map_enum_number(numbers, 19, value, "excess_delay_drb_id_info_r17_s::delay_thres_e_");
}
const char* excess_delay_drb_id_info_r17_s::delay_thres_opts::to_number_string() const
{
  static const char* number_strs[] = {"0.25",
                                      "0.5",
                                      "1",
                                      "2",
                                      "4",
                                      "5",
                                      "10",
                                      "20",
                                      "30",
                                      "40",
                                      "50",
                                      "60",
                                      "70",
                                      "80",
                                      "90",
                                      "100",
                                      "150",
                                      "300",
                                      "500"};
  return convert_enum_idx(number_strs, 19, value, "excess_delay_drb_id_info_r17_s::delay_thres_e_");
}

// IAB-IP-Address-r16 ::= CHOICE
void iab_ip_address_r16_c::destroy_()
{
  switch (type_) {
    case types::ip_v4_address_r16:
      c.destroy<fixed_bitstring<32>>();
      break;
    case types::ip_v6_address_r16:
      c.destroy<fixed_bitstring<128>>();
      break;
    case types::ip_v6_prefix_r16:
      c.destroy<fixed_bitstring<64>>();
      break;
    default:
      break;
  }
}
void iab_ip_address_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ip_v4_address_r16:
      c.init<fixed_bitstring<32>>();
      break;
    case types::ip_v6_address_r16:
      c.init<fixed_bitstring<128>>();
      break;
    case types::ip_v6_prefix_r16:
      c.init<fixed_bitstring<64>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_ip_address_r16_c");
  }
}
iab_ip_address_r16_c::iab_ip_address_r16_c(const iab_ip_address_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ip_v4_address_r16:
      c.init(other.c.get<fixed_bitstring<32>>());
      break;
    case types::ip_v6_address_r16:
      c.init(other.c.get<fixed_bitstring<128>>());
      break;
    case types::ip_v6_prefix_r16:
      c.init(other.c.get<fixed_bitstring<64>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_ip_address_r16_c");
  }
}
iab_ip_address_r16_c& iab_ip_address_r16_c::operator=(const iab_ip_address_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ip_v4_address_r16:
      c.set(other.c.get<fixed_bitstring<32>>());
      break;
    case types::ip_v6_address_r16:
      c.set(other.c.get<fixed_bitstring<128>>());
      break;
    case types::ip_v6_prefix_r16:
      c.set(other.c.get<fixed_bitstring<64>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_ip_address_r16_c");
  }

  return *this;
}
fixed_bitstring<32>& iab_ip_address_r16_c::set_ip_v4_address_r16()
{
  set(types::ip_v4_address_r16);
  return c.get<fixed_bitstring<32>>();
}
fixed_bitstring<128>& iab_ip_address_r16_c::set_ip_v6_address_r16()
{
  set(types::ip_v6_address_r16);
  return c.get<fixed_bitstring<128>>();
}
fixed_bitstring<64>& iab_ip_address_r16_c::set_ip_v6_prefix_r16()
{
  set(types::ip_v6_prefix_r16);
  return c.get<fixed_bitstring<64>>();
}
void iab_ip_address_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ip_v4_address_r16:
      j.write_str("iPv4-Address-r16", c.get<fixed_bitstring<32>>().to_string());
      break;
    case types::ip_v6_address_r16:
      j.write_str("iPv6-Address-r16", c.get<fixed_bitstring<128>>().to_string());
      break;
    case types::ip_v6_prefix_r16:
      j.write_str("iPv6-Prefix-r16", c.get<fixed_bitstring<64>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "iab_ip_address_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE iab_ip_address_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ip_v4_address_r16:
      HANDLE_CODE(c.get<fixed_bitstring<32>>().pack(bref));
      break;
    case types::ip_v6_address_r16:
      HANDLE_CODE(c.get<fixed_bitstring<128>>().pack(bref));
      break;
    case types::ip_v6_prefix_r16:
      HANDLE_CODE(c.get<fixed_bitstring<64>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_ip_address_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_ip_address_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ip_v4_address_r16:
      HANDLE_CODE(c.get<fixed_bitstring<32>>().unpack(bref));
      break;
    case types::ip_v6_address_r16:
      HANDLE_CODE(c.get<fixed_bitstring<128>>().unpack(bref));
      break;
    case types::ip_v6_prefix_r16:
      HANDLE_CODE(c.get<fixed_bitstring<64>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_ip_address_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* iab_ip_address_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"iPv4-Address-r16", "iPv6-Address-r16", "iPv6-Prefix-r16"};
  return convert_enum_idx(names, 3, value, "iab_ip_address_r16_c::types");
}

// IAB-IP-Usage-r16 ::= ENUMERATED
const char* iab_ip_usage_r16_opts::to_string() const
{
  static const char* names[] = {"f1-C", "f1-U", "non-F1", "spare"};
  return convert_enum_idx(names, 4, value, "iab_ip_usage_r16_e");
}

// MUSIM-Gap-r17 ::= SEQUENCE
SRSASN_CODE mu_si_m_gap_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, musim_gap_id_r17, (uint8_t)0u, (uint8_t)2u));
  HANDLE_CODE(musim_gap_info_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mu_si_m_gap_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(musim_gap_id_r17, bref, (uint8_t)0u, (uint8_t)2u));
  HANDLE_CODE(musim_gap_info_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void mu_si_m_gap_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("musim-GapId-r17", musim_gap_id_r17);
  j.write_fieldname("musim-GapInfo-r17");
  musim_gap_info_r17.to_json(j);
  j.end_obj();
}

// MUSIM-GapAssistanceConfig-r17 ::= SEQUENCE
SRSASN_CODE mu_si_m_gap_assist_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(musim_gap_prohibit_timer_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mu_si_m_gap_assist_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(musim_gap_prohibit_timer_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void mu_si_m_gap_assist_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("musim-GapProhibitTimer-r17", musim_gap_prohibit_timer_r17.to_string());
  j.end_obj();
}

const char* mu_si_m_gap_assist_cfg_r17_s::musim_gap_prohibit_timer_r17_opts::to_string() const
{
  static const char* names[] = {"s0",
                                "s0dot1",
                                "s0dot2",
                                "s0dot3",
                                "s0dot4",
                                "s0dot5",
                                "s1",
                                "s2",
                                "s3",
                                "s4",
                                "s5",
                                "s6",
                                "s7",
                                "s8",
                                "s9",
                                "s10"};
  return convert_enum_idx(names, 16, value, "mu_si_m_gap_assist_cfg_r17_s::musim_gap_prohibit_timer_r17_e_");
}
float mu_si_m_gap_assist_cfg_r17_s::musim_gap_prohibit_timer_r17_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
  return map_enum_number(numbers, 16, value, "mu_si_m_gap_assist_cfg_r17_s::musim_gap_prohibit_timer_r17_e_");
}
const char* mu_si_m_gap_assist_cfg_r17_s::musim_gap_prohibit_timer_r17_opts::to_number_string() const
{
  static const char* number_strs[] = {
      "0", "0.1", "0.2", "0.3", "0.4", "0.5", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
  return convert_enum_idx(number_strs, 16, value, "mu_si_m_gap_assist_cfg_r17_s::musim_gap_prohibit_timer_r17_e_");
}

// MUSIM-LeaveAssistanceConfig-r17 ::= SEQUENCE
SRSASN_CODE mu_si_m_leave_assist_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(musim_leave_without_resp_timer_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mu_si_m_leave_assist_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(musim_leave_without_resp_timer_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void mu_si_m_leave_assist_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("musim-LeaveWithoutResponseTimer-r17", musim_leave_without_resp_timer_r17.to_string());
  j.end_obj();
}

const char* mu_si_m_leave_assist_cfg_r17_s::musim_leave_without_resp_timer_r17_opts::to_string() const
{
  static const char* names[] = {"ms10", "ms20", "ms40", "ms60", "ms80", "ms100", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "mu_si_m_leave_assist_cfg_r17_s::musim_leave_without_resp_timer_r17_e_");
}
uint8_t mu_si_m_leave_assist_cfg_r17_s::musim_leave_without_resp_timer_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {10, 20, 40, 60, 80, 100};
  return map_enum_number(numbers, 6, value, "mu_si_m_leave_assist_cfg_r17_s::musim_leave_without_resp_timer_r17_e_");
}

// MeasConfigAppLayer-r17 ::= SEQUENCE
SRSASN_CODE meas_cfg_app_layer_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_cfg_app_layer_container_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(service_type_r17_present, 1));
  HANDLE_CODE(bref.pack(pause_report_r17_present, 1));
  HANDLE_CODE(bref.pack(tx_of_session_start_stop_r17_present, 1));
  HANDLE_CODE(bref.pack(ran_visible_params_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, meas_cfg_app_layer_id_r17, (uint8_t)0u, (uint8_t)15u));
  if (meas_cfg_app_layer_container_r17.size() > 0) {
    HANDLE_CODE(meas_cfg_app_layer_container_r17.pack(bref));
  }
  if (service_type_r17_present) {
    HANDLE_CODE(service_type_r17.pack(bref));
  }
  if (pause_report_r17_present) {
    HANDLE_CODE(bref.pack(pause_report_r17, 1));
  }
  if (tx_of_session_start_stop_r17_present) {
    HANDLE_CODE(bref.pack(tx_of_session_start_stop_r17, 1));
  }
  if (ran_visible_params_r17_present) {
    HANDLE_CODE(ran_visible_params_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_cfg_app_layer_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool meas_cfg_app_layer_container_r17_present;
  HANDLE_CODE(bref.unpack(meas_cfg_app_layer_container_r17_present, 1));
  HANDLE_CODE(bref.unpack(service_type_r17_present, 1));
  HANDLE_CODE(bref.unpack(pause_report_r17_present, 1));
  HANDLE_CODE(bref.unpack(tx_of_session_start_stop_r17_present, 1));
  HANDLE_CODE(bref.unpack(ran_visible_params_r17_present, 1));

  HANDLE_CODE(unpack_integer(meas_cfg_app_layer_id_r17, bref, (uint8_t)0u, (uint8_t)15u));
  if (meas_cfg_app_layer_container_r17_present) {
    HANDLE_CODE(meas_cfg_app_layer_container_r17.unpack(bref));
  }
  if (service_type_r17_present) {
    HANDLE_CODE(service_type_r17.unpack(bref));
  }
  if (pause_report_r17_present) {
    HANDLE_CODE(bref.unpack(pause_report_r17, 1));
  }
  if (tx_of_session_start_stop_r17_present) {
    HANDLE_CODE(bref.unpack(tx_of_session_start_stop_r17, 1));
  }
  if (ran_visible_params_r17_present) {
    HANDLE_CODE(ran_visible_params_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_cfg_app_layer_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("measConfigAppLayerId-r17", meas_cfg_app_layer_id_r17);
  if (meas_cfg_app_layer_container_r17.size() > 0) {
    j.write_str("measConfigAppLayerContainer-r17", meas_cfg_app_layer_container_r17.to_string());
  }
  if (service_type_r17_present) {
    j.write_str("serviceType-r17", service_type_r17.to_string());
  }
  if (pause_report_r17_present) {
    j.write_bool("pauseReporting-r17", pause_report_r17);
  }
  if (tx_of_session_start_stop_r17_present) {
    j.write_bool("transmissionOfSessionStartStop-r17", tx_of_session_start_stop_r17);
  }
  if (ran_visible_params_r17_present) {
    j.write_fieldname("ran-VisibleParameters-r17");
    ran_visible_params_r17.to_json(j);
  }
  j.end_obj();
}

const char* meas_cfg_app_layer_r17_s::service_type_r17_opts::to_string() const
{
  static const char* names[] = {"streaming", "mtsi", "vr", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "meas_cfg_app_layer_r17_s::service_type_r17_e_");
}

// PropDelayDiffReportConfig-r17 ::= SEQUENCE
SRSASN_CODE prop_delay_diff_report_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(thresh_prop_delay_diff_r17_present, 1));
  HANDLE_CODE(bref.pack(neigh_cell_info_list_r17.size() > 0, 1));

  if (thresh_prop_delay_diff_r17_present) {
    HANDLE_CODE(thresh_prop_delay_diff_r17.pack(bref));
  }
  if (neigh_cell_info_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, neigh_cell_info_list_r17, 1, 4));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE prop_delay_diff_report_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(thresh_prop_delay_diff_r17_present, 1));
  bool neigh_cell_info_list_r17_present;
  HANDLE_CODE(bref.unpack(neigh_cell_info_list_r17_present, 1));

  if (thresh_prop_delay_diff_r17_present) {
    HANDLE_CODE(thresh_prop_delay_diff_r17.unpack(bref));
  }
  if (neigh_cell_info_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(neigh_cell_info_list_r17, bref, 1, 4));
  }

  return SRSASN_SUCCESS;
}
void prop_delay_diff_report_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (thresh_prop_delay_diff_r17_present) {
    j.write_str("threshPropDelayDiff-r17", thresh_prop_delay_diff_r17.to_string());
  }
  if (neigh_cell_info_list_r17.size() > 0) {
    j.start_array("neighCellInfoList-r17");
    for (const auto& e1 : neigh_cell_info_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

const char* prop_delay_diff_report_cfg_r17_s::thresh_prop_delay_diff_r17_opts::to_string() const
{
  static const char* names[] = {"ms0dot5",
                                "ms1",
                                "ms2",
                                "ms3",
                                "ms4",
                                "ms5",
                                "ms6",
                                "ms7",
                                "ms8",
                                "ms9",
                                "ms10",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "prop_delay_diff_report_cfg_r17_s::thresh_prop_delay_diff_r17_e_");
}
float prop_delay_diff_report_cfg_r17_s::thresh_prop_delay_diff_r17_opts::to_number() const
{
  static const float numbers[] = {0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
  return map_enum_number(numbers, 11, value, "prop_delay_diff_report_cfg_r17_s::thresh_prop_delay_diff_r17_e_");
}
const char* prop_delay_diff_report_cfg_r17_s::thresh_prop_delay_diff_r17_opts::to_number_string() const
{
  static const char* number_strs[] = {"0.5", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
  return convert_enum_idx(number_strs, 16, value, "prop_delay_diff_report_cfg_r17_s::thresh_prop_delay_diff_r17_e_");
}

// Q-OffsetRangeList ::= SEQUENCE
SRSASN_CODE q_offset_range_list_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rsrp_offset_ssb_present, 1));
  HANDLE_CODE(bref.pack(rsrq_offset_ssb_present, 1));
  HANDLE_CODE(bref.pack(sinr_offset_ssb_present, 1));
  HANDLE_CODE(bref.pack(rsrp_offset_csi_rs_present, 1));
  HANDLE_CODE(bref.pack(rsrq_offset_csi_rs_present, 1));
  HANDLE_CODE(bref.pack(sinr_offset_csi_rs_present, 1));

  if (rsrp_offset_ssb_present) {
    HANDLE_CODE(rsrp_offset_ssb.pack(bref));
  }
  if (rsrq_offset_ssb_present) {
    HANDLE_CODE(rsrq_offset_ssb.pack(bref));
  }
  if (sinr_offset_ssb_present) {
    HANDLE_CODE(sinr_offset_ssb.pack(bref));
  }
  if (rsrp_offset_csi_rs_present) {
    HANDLE_CODE(rsrp_offset_csi_rs.pack(bref));
  }
  if (rsrq_offset_csi_rs_present) {
    HANDLE_CODE(rsrq_offset_csi_rs.pack(bref));
  }
  if (sinr_offset_csi_rs_present) {
    HANDLE_CODE(sinr_offset_csi_rs.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE q_offset_range_list_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(rsrp_offset_ssb_present, 1));
  HANDLE_CODE(bref.unpack(rsrq_offset_ssb_present, 1));
  HANDLE_CODE(bref.unpack(sinr_offset_ssb_present, 1));
  HANDLE_CODE(bref.unpack(rsrp_offset_csi_rs_present, 1));
  HANDLE_CODE(bref.unpack(rsrq_offset_csi_rs_present, 1));
  HANDLE_CODE(bref.unpack(sinr_offset_csi_rs_present, 1));

  if (rsrp_offset_ssb_present) {
    HANDLE_CODE(rsrp_offset_ssb.unpack(bref));
  }
  if (rsrq_offset_ssb_present) {
    HANDLE_CODE(rsrq_offset_ssb.unpack(bref));
  }
  if (sinr_offset_ssb_present) {
    HANDLE_CODE(sinr_offset_ssb.unpack(bref));
  }
  if (rsrp_offset_csi_rs_present) {
    HANDLE_CODE(rsrp_offset_csi_rs.unpack(bref));
  }
  if (rsrq_offset_csi_rs_present) {
    HANDLE_CODE(rsrq_offset_csi_rs.unpack(bref));
  }
  if (sinr_offset_csi_rs_present) {
    HANDLE_CODE(sinr_offset_csi_rs.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void q_offset_range_list_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rsrp_offset_ssb_present) {
    j.write_str("rsrpOffsetSSB", rsrp_offset_ssb.to_string());
  }
  if (rsrq_offset_ssb_present) {
    j.write_str("rsrqOffsetSSB", rsrq_offset_ssb.to_string());
  }
  if (sinr_offset_ssb_present) {
    j.write_str("sinrOffsetSSB", sinr_offset_ssb.to_string());
  }
  if (rsrp_offset_csi_rs_present) {
    j.write_str("rsrpOffsetCSI-RS", rsrp_offset_csi_rs.to_string());
  }
  if (rsrq_offset_csi_rs_present) {
    j.write_str("rsrqOffsetCSI-RS", rsrq_offset_csi_rs.to_string());
  }
  if (sinr_offset_csi_rs_present) {
    j.write_str("sinrOffsetCSI-RS", sinr_offset_csi_rs.to_string());
  }
  j.end_obj();
}

// RLM-RelaxationReportingConfig-r17 ::= SEQUENCE
SRSASN_CODE rlm_relaxation_report_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(rlm_relaxtion_report_prohibit_timer.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rlm_relaxation_report_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(rlm_relaxtion_report_prohibit_timer.unpack(bref));

  return SRSASN_SUCCESS;
}
void rlm_relaxation_report_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("rlm-RelaxtionReportingProhibitTimer", rlm_relaxtion_report_prohibit_timer.to_string());
  j.end_obj();
}

const char* rlm_relaxation_report_cfg_r17_s::rlm_relaxtion_report_prohibit_timer_opts::to_string() const
{
  static const char* names[] = {"s0",
                                "s0dot5",
                                "s1",
                                "s2",
                                "s5",
                                "s10",
                                "s20",
                                "s30",
                                "s60",
                                "s90",
                                "s120",
                                "s300",
                                "s600",
                                "infinity",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "rlm_relaxation_report_cfg_r17_s::rlm_relaxtion_report_prohibit_timer_e_");
}
float rlm_relaxation_report_cfg_r17_s::rlm_relaxtion_report_prohibit_timer_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 30.0, 60.0, 90.0, 120.0, 300.0, 600.0, -1.0};
  return map_enum_number(numbers, 14, value, "rlm_relaxation_report_cfg_r17_s::rlm_relaxtion_report_prohibit_timer_e_");
}
const char* rlm_relaxation_report_cfg_r17_s::rlm_relaxtion_report_prohibit_timer_opts::to_number_string() const
{
  static const char* number_strs[] = {
      "0", "0.5", "1", "2", "5", "10", "20", "30", "60", "90", "120", "300", "600", "inf"};
  return convert_enum_idx(
      number_strs, 16, value, "rlm_relaxation_report_cfg_r17_s::rlm_relaxtion_report_prohibit_timer_e_");
}

// RRM-MeasRelaxationReportingConfig-r17 ::= SEQUENCE
SRSASN_CODE rrm_meas_relaxation_report_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(s_search_delta_p_stationary_r17.pack(bref));
  HANDLE_CODE(t_search_delta_p_stationary_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrm_meas_relaxation_report_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(s_search_delta_p_stationary_r17.unpack(bref));
  HANDLE_CODE(t_search_delta_p_stationary_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrm_meas_relaxation_report_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("s-SearchDeltaP-Stationary-r17", s_search_delta_p_stationary_r17.to_string());
  j.write_str("t-SearchDeltaP-Stationary-r17", t_search_delta_p_stationary_r17.to_string());
  j.end_obj();
}

const char* rrm_meas_relaxation_report_cfg_r17_s::s_search_delta_p_stationary_r17_opts::to_string() const
{
  static const char* names[] = {"dB2", "dB3", "dB6", "dB9", "dB12", "dB15", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "rrm_meas_relaxation_report_cfg_r17_s::s_search_delta_p_stationary_r17_e_");
}
uint8_t rrm_meas_relaxation_report_cfg_r17_s::s_search_delta_p_stationary_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 6, 9, 12, 15};
  return map_enum_number(numbers, 6, value, "rrm_meas_relaxation_report_cfg_r17_s::s_search_delta_p_stationary_r17_e_");
}

const char* rrm_meas_relaxation_report_cfg_r17_s::t_search_delta_p_stationary_r17_opts::to_string() const
{
  static const char* names[] = {"s5",
                                "s10",
                                "s20",
                                "s30",
                                "s60",
                                "s120",
                                "s180",
                                "s240",
                                "s300",
                                "spare7",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "rrm_meas_relaxation_report_cfg_r17_s::t_search_delta_p_stationary_r17_e_");
}
uint16_t rrm_meas_relaxation_report_cfg_r17_s::t_search_delta_p_stationary_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {5, 10, 20, 30, 60, 120, 180, 240, 300};
  return map_enum_number(numbers, 9, value, "rrm_meas_relaxation_report_cfg_r17_s::t_search_delta_p_stationary_r17_e_");
}

// RSSI-ResourceConfigCLI-r16 ::= SEQUENCE
SRSASN_CODE rssi_res_cfg_cli_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ref_serv_cell_idx_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, rssi_res_id_r16, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(rssi_scs_r16.pack(bref));
  HANDLE_CODE(pack_integer(bref, start_prb_r16, (uint16_t)0u, (uint16_t)2169u));
  HANDLE_CODE(pack_integer(bref, nrof_prbs_r16, (uint16_t)4u, (uint16_t)276u));
  HANDLE_CODE(pack_integer(bref, start_position_r16, (uint8_t)0u, (uint8_t)13u));
  HANDLE_CODE(pack_integer(bref, nrof_symbols_r16, (uint8_t)1u, (uint8_t)14u));
  HANDLE_CODE(rssi_periodicity_and_offset_r16.pack(bref));
  if (ref_serv_cell_idx_r16_present) {
    HANDLE_CODE(pack_integer(bref, ref_serv_cell_idx_r16, (uint8_t)0u, (uint8_t)31u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rssi_res_cfg_cli_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ref_serv_cell_idx_r16_present, 1));

  HANDLE_CODE(unpack_integer(rssi_res_id_r16, bref, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(rssi_scs_r16.unpack(bref));
  HANDLE_CODE(unpack_integer(start_prb_r16, bref, (uint16_t)0u, (uint16_t)2169u));
  HANDLE_CODE(unpack_integer(nrof_prbs_r16, bref, (uint16_t)4u, (uint16_t)276u));
  HANDLE_CODE(unpack_integer(start_position_r16, bref, (uint8_t)0u, (uint8_t)13u));
  HANDLE_CODE(unpack_integer(nrof_symbols_r16, bref, (uint8_t)1u, (uint8_t)14u));
  HANDLE_CODE(rssi_periodicity_and_offset_r16.unpack(bref));
  if (ref_serv_cell_idx_r16_present) {
    HANDLE_CODE(unpack_integer(ref_serv_cell_idx_r16, bref, (uint8_t)0u, (uint8_t)31u));
  }

  return SRSASN_SUCCESS;
}
void rssi_res_cfg_cli_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rssi-ResourceId-r16", rssi_res_id_r16);
  j.write_str("rssi-SCS-r16", rssi_scs_r16.to_string());
  j.write_int("startPRB-r16", start_prb_r16);
  j.write_int("nrofPRBs-r16", nrof_prbs_r16);
  j.write_int("startPosition-r16", start_position_r16);
  j.write_int("nrofSymbols-r16", nrof_symbols_r16);
  j.write_fieldname("rssi-PeriodicityAndOffset-r16");
  rssi_periodicity_and_offset_r16.to_json(j);
  if (ref_serv_cell_idx_r16_present) {
    j.write_int("refServCellIndex-r16", ref_serv_cell_idx_r16);
  }
  j.end_obj();
}

// SCG-DeactivationPreferenceConfig-r17 ::= SEQUENCE
SRSASN_CODE scg_deactivation_pref_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(scg_deactivation_pref_prohibit_timer_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE scg_deactivation_pref_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(scg_deactivation_pref_prohibit_timer_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void scg_deactivation_pref_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("scg-DeactivationPreferenceProhibitTimer-r17", scg_deactivation_pref_prohibit_timer_r17.to_string());
  j.end_obj();
}

const char* scg_deactivation_pref_cfg_r17_s::scg_deactivation_pref_prohibit_timer_r17_opts::to_string() const
{
  static const char* names[] = {"s0",
                                "s1",
                                "s2",
                                "s4",
                                "s8",
                                "s10",
                                "s15",
                                "s30",
                                "s60",
                                "s120",
                                "s180",
                                "s240",
                                "s300",
                                "s600",
                                "s900",
                                "s1800"};
  return convert_enum_idx(
      names, 16, value, "scg_deactivation_pref_cfg_r17_s::scg_deactivation_pref_prohibit_timer_r17_e_");
}
uint16_t scg_deactivation_pref_cfg_r17_s::scg_deactivation_pref_prohibit_timer_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 1, 2, 4, 8, 10, 15, 30, 60, 120, 180, 240, 300, 600, 900, 1800};
  return map_enum_number(
      numbers, 16, value, "scg_deactivation_pref_cfg_r17_s::scg_deactivation_pref_prohibit_timer_r17_e_");
}

// SL-RemoteUE-ToAddMod-r17 ::= SEQUENCE
SRSASN_CODE sl_remote_ue_to_add_mod_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_srap_cfg_relay_r17_present, 1));

  HANDLE_CODE(sl_l2_id_remote_r17.pack(bref));
  if (sl_srap_cfg_relay_r17_present) {
    HANDLE_CODE(sl_srap_cfg_relay_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_remote_ue_to_add_mod_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_srap_cfg_relay_r17_present, 1));

  HANDLE_CODE(sl_l2_id_remote_r17.unpack(bref));
  if (sl_srap_cfg_relay_r17_present) {
    HANDLE_CODE(sl_srap_cfg_relay_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_remote_ue_to_add_mod_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sl-L2IdentityRemote-r17", sl_l2_id_remote_r17.to_string());
  if (sl_srap_cfg_relay_r17_present) {
    j.write_fieldname("sl-SRAP-ConfigRelay-r17");
    sl_srap_cfg_relay_r17.to_json(j);
  }
  j.end_obj();
}

// SRS-ResourceConfigCLI-r16 ::= SEQUENCE
SRSASN_CODE srs_res_cfg_cli_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ref_serv_cell_idx_r16_present, 1));

  HANDLE_CODE(srs_res_r16.pack(bref));
  HANDLE_CODE(srs_scs_r16.pack(bref));
  if (ref_serv_cell_idx_r16_present) {
    HANDLE_CODE(pack_integer(bref, ref_serv_cell_idx_r16, (uint8_t)0u, (uint8_t)31u));
  }
  HANDLE_CODE(pack_integer(bref, ref_bwp_r16, (uint8_t)0u, (uint8_t)4u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE srs_res_cfg_cli_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ref_serv_cell_idx_r16_present, 1));

  HANDLE_CODE(srs_res_r16.unpack(bref));
  HANDLE_CODE(srs_scs_r16.unpack(bref));
  if (ref_serv_cell_idx_r16_present) {
    HANDLE_CODE(unpack_integer(ref_serv_cell_idx_r16, bref, (uint8_t)0u, (uint8_t)31u));
  }
  HANDLE_CODE(unpack_integer(ref_bwp_r16, bref, (uint8_t)0u, (uint8_t)4u));

  return SRSASN_SUCCESS;
}
void srs_res_cfg_cli_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("srs-Resource-r16");
  srs_res_r16.to_json(j);
  j.write_str("srs-SCS-r16", srs_scs_r16.to_string());
  if (ref_serv_cell_idx_r16_present) {
    j.write_int("refServCellIndex-r16", ref_serv_cell_idx_r16);
  }
  j.write_int("refBWP-r16", ref_bwp_r16);
  j.end_obj();
}

// SuccessHO-Config-r17 ::= SEQUENCE
SRSASN_CODE success_ho_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(thres_percentage_t304_r17_present, 1));
  HANDLE_CODE(bref.pack(thres_percentage_t310_r17_present, 1));
  HANDLE_CODE(bref.pack(thres_percentage_t312_r17_present, 1));
  HANDLE_CODE(bref.pack(source_daps_fail_report_r17_present, 1));

  if (thres_percentage_t304_r17_present) {
    HANDLE_CODE(thres_percentage_t304_r17.pack(bref));
  }
  if (thres_percentage_t310_r17_present) {
    HANDLE_CODE(thres_percentage_t310_r17.pack(bref));
  }
  if (thres_percentage_t312_r17_present) {
    HANDLE_CODE(thres_percentage_t312_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE success_ho_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(thres_percentage_t304_r17_present, 1));
  HANDLE_CODE(bref.unpack(thres_percentage_t310_r17_present, 1));
  HANDLE_CODE(bref.unpack(thres_percentage_t312_r17_present, 1));
  HANDLE_CODE(bref.unpack(source_daps_fail_report_r17_present, 1));

  if (thres_percentage_t304_r17_present) {
    HANDLE_CODE(thres_percentage_t304_r17.unpack(bref));
  }
  if (thres_percentage_t310_r17_present) {
    HANDLE_CODE(thres_percentage_t310_r17.unpack(bref));
  }
  if (thres_percentage_t312_r17_present) {
    HANDLE_CODE(thres_percentage_t312_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void success_ho_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (thres_percentage_t304_r17_present) {
    j.write_str("thresholdPercentageT304-r17", thres_percentage_t304_r17.to_string());
  }
  if (thres_percentage_t310_r17_present) {
    j.write_str("thresholdPercentageT310-r17", thres_percentage_t310_r17.to_string());
  }
  if (thres_percentage_t312_r17_present) {
    j.write_str("thresholdPercentageT312-r17", thres_percentage_t312_r17.to_string());
  }
  if (source_daps_fail_report_r17_present) {
    j.write_str("sourceDAPS-FailureReporting-r17", "true");
  }
  j.end_obj();
}

const char* success_ho_cfg_r17_s::thres_percentage_t304_r17_opts::to_string() const
{
  static const char* names[] = {"p40", "p60", "p80", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "success_ho_cfg_r17_s::thres_percentage_t304_r17_e_");
}
uint8_t success_ho_cfg_r17_s::thres_percentage_t304_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {40, 60, 80};
  return map_enum_number(numbers, 3, value, "success_ho_cfg_r17_s::thres_percentage_t304_r17_e_");
}

const char* success_ho_cfg_r17_s::thres_percentage_t310_r17_opts::to_string() const
{
  static const char* names[] = {"p40", "p60", "p80", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "success_ho_cfg_r17_s::thres_percentage_t310_r17_e_");
}
uint8_t success_ho_cfg_r17_s::thres_percentage_t310_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {40, 60, 80};
  return map_enum_number(numbers, 3, value, "success_ho_cfg_r17_s::thres_percentage_t310_r17_e_");
}

const char* success_ho_cfg_r17_s::thres_percentage_t312_r17_opts::to_string() const
{
  static const char* names[] = {"p20", "p40", "p60", "p80", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "success_ho_cfg_r17_s::thres_percentage_t312_r17_e_");
}
uint8_t success_ho_cfg_r17_s::thres_percentage_t312_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {20, 40, 60, 80};
  return map_enum_number(numbers, 4, value, "success_ho_cfg_r17_s::thres_percentage_t312_r17_e_");
}

// AppLayerMeasConfig-r17 ::= SEQUENCE
SRSASN_CODE app_layer_meas_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_cfg_app_layer_to_add_mod_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_cfg_app_layer_to_release_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(rrc_seg_allowed_r17_present, 1));

  if (meas_cfg_app_layer_to_add_mod_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_cfg_app_layer_to_add_mod_list_r17, 1, 16));
  }
  if (meas_cfg_app_layer_to_release_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_cfg_app_layer_to_release_list_r17, 1, 16, integer_packer<uint8_t>(0, 15)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE app_layer_meas_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool meas_cfg_app_layer_to_add_mod_list_r17_present;
  HANDLE_CODE(bref.unpack(meas_cfg_app_layer_to_add_mod_list_r17_present, 1));
  bool meas_cfg_app_layer_to_release_list_r17_present;
  HANDLE_CODE(bref.unpack(meas_cfg_app_layer_to_release_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(rrc_seg_allowed_r17_present, 1));

  if (meas_cfg_app_layer_to_add_mod_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_cfg_app_layer_to_add_mod_list_r17, bref, 1, 16));
  }
  if (meas_cfg_app_layer_to_release_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_cfg_app_layer_to_release_list_r17, bref, 1, 16, integer_packer<uint8_t>(0, 15)));
  }

  return SRSASN_SUCCESS;
}
void app_layer_meas_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_cfg_app_layer_to_add_mod_list_r17.size() > 0) {
    j.start_array("measConfigAppLayerToAddModList-r17");
    for (const auto& e1 : meas_cfg_app_layer_to_add_mod_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_cfg_app_layer_to_release_list_r17.size() > 0) {
    j.start_array("measConfigAppLayerToReleaseList-r17");
    for (const auto& e1 : meas_cfg_app_layer_to_release_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (rrc_seg_allowed_r17_present) {
    j.write_str("rrc-SegAllowed-r17", "enabled");
  }
  j.end_obj();
}

// BAP-RoutingID-r16 ::= SEQUENCE
SRSASN_CODE bap_routing_id_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bap_address_r16.pack(bref));
  HANDLE_CODE(bap_path_id_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_routing_id_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bap_address_r16.unpack(bref));
  HANDLE_CODE(bap_path_id_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void bap_routing_id_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("bap-Address-r16", bap_address_r16.to_string());
  j.write_str("bap-PathId-r16", bap_path_id_r16.to_string());
  j.end_obj();
}

// CSI-RS-ResourceConfigMobility ::= SEQUENCE
SRSASN_CODE csi_rs_res_cfg_mob_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(subcarrier_spacing.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, csi_rs_cell_list_mob, 1, 96));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ref_serv_cell_idx_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ref_serv_cell_idx_present, 1));
      if (ref_serv_cell_idx_present) {
        HANDLE_CODE(pack_integer(bref, ref_serv_cell_idx, (uint8_t)0u, (uint8_t)31u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE csi_rs_res_cfg_mob_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(subcarrier_spacing.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(csi_rs_cell_list_mob, bref, 1, 96));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ref_serv_cell_idx_present, 1));
      if (ref_serv_cell_idx_present) {
        HANDLE_CODE(unpack_integer(ref_serv_cell_idx, bref, (uint8_t)0u, (uint8_t)31u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void csi_rs_res_cfg_mob_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("subcarrierSpacing", subcarrier_spacing.to_string());
  j.start_array("csi-RS-CellList-Mobility");
  for (const auto& e1 : csi_rs_cell_list_mob) {
    e1.to_json(j);
  }
  j.end_array();
  if (ext) {
    if (ref_serv_cell_idx_present) {
      j.write_int("refServCellIndex", ref_serv_cell_idx);
    }
  }
  j.end_obj();
}

// CellsToAddMod ::= SEQUENCE
SRSASN_CODE cells_to_add_mod_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, pci, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(cell_individual_offset.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_add_mod_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(pci, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(cell_individual_offset.unpack(bref));

  return SRSASN_SUCCESS;
}
void cells_to_add_mod_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId", pci);
  j.write_fieldname("cellIndividualOffset");
  cell_individual_offset.to_json(j);
  j.end_obj();
}

// CellsToAddModExt-v1710 ::= SEQUENCE
SRSASN_CODE cells_to_add_mod_ext_v1710_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ntn_polarization_dl_r17_present, 1));
  HANDLE_CODE(bref.pack(ntn_polarization_ul_r17_present, 1));

  if (ntn_polarization_dl_r17_present) {
    HANDLE_CODE(ntn_polarization_dl_r17.pack(bref));
  }
  if (ntn_polarization_ul_r17_present) {
    HANDLE_CODE(ntn_polarization_ul_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_add_mod_ext_v1710_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ntn_polarization_dl_r17_present, 1));
  HANDLE_CODE(bref.unpack(ntn_polarization_ul_r17_present, 1));

  if (ntn_polarization_dl_r17_present) {
    HANDLE_CODE(ntn_polarization_dl_r17.unpack(bref));
  }
  if (ntn_polarization_ul_r17_present) {
    HANDLE_CODE(ntn_polarization_ul_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cells_to_add_mod_ext_v1710_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ntn_polarization_dl_r17_present) {
    j.write_str("ntn-PolarizationDL-r17", ntn_polarization_dl_r17.to_string());
  }
  if (ntn_polarization_ul_r17_present) {
    j.write_str("ntn-PolarizationUL-r17", ntn_polarization_ul_r17.to_string());
  }
  j.end_obj();
}

const char* cells_to_add_mod_ext_v1710_s::ntn_polarization_dl_r17_opts::to_string() const
{
  static const char* names[] = {"rhcp", "lhcp", "linear"};
  return convert_enum_idx(names, 3, value, "cells_to_add_mod_ext_v1710_s::ntn_polarization_dl_r17_e_");
}

const char* cells_to_add_mod_ext_v1710_s::ntn_polarization_ul_r17_opts::to_string() const
{
  static const char* names[] = {"rhcp", "lhcp", "linear"};
  return convert_enum_idx(names, 3, value, "cells_to_add_mod_ext_v1710_s::ntn_polarization_ul_r17_e_");
}

// CellsToAddModUTRA-FDD-r16 ::= SEQUENCE
SRSASN_CODE cells_to_add_mod_utra_fdd_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, cell_idx_utra_fdd_r16, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(pack_integer(bref, pci_r16, (uint16_t)0u, (uint16_t)511u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_add_mod_utra_fdd_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(cell_idx_utra_fdd_r16, bref, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(unpack_integer(pci_r16, bref, (uint16_t)0u, (uint16_t)511u));

  return SRSASN_SUCCESS;
}
void cells_to_add_mod_utra_fdd_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("cellIndexUTRA-FDD-r16", cell_idx_utra_fdd_r16);
  j.write_int("physCellId-r16", pci_r16);
  j.end_obj();
}

// DRX-PreferenceConfig-r16 ::= SEQUENCE
SRSASN_CODE drx_pref_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(drx_pref_prohibit_timer_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_pref_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(drx_pref_prohibit_timer_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void drx_pref_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("drx-PreferenceProhibitTimer-r16", drx_pref_prohibit_timer_r16.to_string());
  j.end_obj();
}

const char* drx_pref_cfg_r16_s::drx_pref_prohibit_timer_r16_opts::to_string() const
{
  static const char* names[] = {
      "s0", "s0dot5", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "s10", "s20", "s30", "spare2", "spare1"};
  return convert_enum_idx(names, 16, value, "drx_pref_cfg_r16_s::drx_pref_prohibit_timer_r16_e_");
}
float drx_pref_cfg_r16_s::drx_pref_prohibit_timer_r16_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20.0, 30.0};
  return map_enum_number(numbers, 14, value, "drx_pref_cfg_r16_s::drx_pref_prohibit_timer_r16_e_");
}
const char* drx_pref_cfg_r16_s::drx_pref_prohibit_timer_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.5", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "20", "30"};
  return convert_enum_idx(number_strs, 16, value, "drx_pref_cfg_r16_s::drx_pref_prohibit_timer_r16_e_");
}

// IAB-IP-AddressConfiguration-r16 ::= SEQUENCE
SRSASN_CODE iab_ip_address_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(iab_ip_address_r16_present, 1));
  HANDLE_CODE(bref.pack(iab_ip_usage_r16_present, 1));
  HANDLE_CODE(bref.pack(iab_donor_du_bap_address_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, iab_ip_address_idx_r16, (uint8_t)1u, (uint8_t)32u));
  if (iab_ip_address_r16_present) {
    HANDLE_CODE(iab_ip_address_r16.pack(bref));
  }
  if (iab_ip_usage_r16_present) {
    HANDLE_CODE(iab_ip_usage_r16.pack(bref));
  }
  if (iab_donor_du_bap_address_r16_present) {
    HANDLE_CODE(iab_donor_du_bap_address_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_ip_address_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(iab_ip_address_r16_present, 1));
  HANDLE_CODE(bref.unpack(iab_ip_usage_r16_present, 1));
  HANDLE_CODE(bref.unpack(iab_donor_du_bap_address_r16_present, 1));

  HANDLE_CODE(unpack_integer(iab_ip_address_idx_r16, bref, (uint8_t)1u, (uint8_t)32u));
  if (iab_ip_address_r16_present) {
    HANDLE_CODE(iab_ip_address_r16.unpack(bref));
  }
  if (iab_ip_usage_r16_present) {
    HANDLE_CODE(iab_ip_usage_r16.unpack(bref));
  }
  if (iab_donor_du_bap_address_r16_present) {
    HANDLE_CODE(iab_donor_du_bap_address_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void iab_ip_address_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("iab-IP-AddressIndex-r16", iab_ip_address_idx_r16);
  if (iab_ip_address_r16_present) {
    j.write_fieldname("iab-IP-Address-r16");
    iab_ip_address_r16.to_json(j);
  }
  if (iab_ip_usage_r16_present) {
    j.write_str("iab-IP-Usage-r16", iab_ip_usage_r16.to_string());
  }
  if (iab_donor_du_bap_address_r16_present) {
    j.write_str("iab-donor-DU-BAP-Address-r16", iab_donor_du_bap_address_r16.to_string());
  }
  j.end_obj();
}

// IDC-AssistanceConfig-r16 ::= SEQUENCE
SRSASN_CODE idc_assist_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(candidate_serving_freq_list_nr_r16.size() > 0, 1));

  if (candidate_serving_freq_list_nr_r16.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, candidate_serving_freq_list_nr_r16, 1, 128, integer_packer<uint32_t>(0, 3279165)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE idc_assist_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool candidate_serving_freq_list_nr_r16_present;
  HANDLE_CODE(bref.unpack(candidate_serving_freq_list_nr_r16_present, 1));

  if (candidate_serving_freq_list_nr_r16_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(candidate_serving_freq_list_nr_r16, bref, 1, 128, integer_packer<uint32_t>(0, 3279165)));
  }

  return SRSASN_SUCCESS;
}
void idc_assist_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (candidate_serving_freq_list_nr_r16.size() > 0) {
    j.start_array("candidateServingFreqListNR-r16");
    for (const auto& e1 : candidate_serving_freq_list_nr_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// MUSIM-GapConfig-r17 ::= SEQUENCE
SRSASN_CODE mu_si_m_gap_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(musim_gap_to_release_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(musim_gap_to_add_mod_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(musim_aperiodic_gap_r17_present, 1));

  if (musim_gap_to_release_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, musim_gap_to_release_list_r17, 1, 3, integer_packer<uint8_t>(0, 2)));
  }
  if (musim_gap_to_add_mod_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, musim_gap_to_add_mod_list_r17, 1, 3));
  }
  if (musim_aperiodic_gap_r17_present) {
    HANDLE_CODE(musim_aperiodic_gap_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mu_si_m_gap_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool musim_gap_to_release_list_r17_present;
  HANDLE_CODE(bref.unpack(musim_gap_to_release_list_r17_present, 1));
  bool musim_gap_to_add_mod_list_r17_present;
  HANDLE_CODE(bref.unpack(musim_gap_to_add_mod_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(musim_aperiodic_gap_r17_present, 1));

  if (musim_gap_to_release_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(musim_gap_to_release_list_r17, bref, 1, 3, integer_packer<uint8_t>(0, 2)));
  }
  if (musim_gap_to_add_mod_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(musim_gap_to_add_mod_list_r17, bref, 1, 3));
  }
  if (musim_aperiodic_gap_r17_present) {
    HANDLE_CODE(musim_aperiodic_gap_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mu_si_m_gap_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (musim_gap_to_release_list_r17.size() > 0) {
    j.start_array("musim-GapToReleaseList-r17");
    for (const auto& e1 : musim_gap_to_release_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (musim_gap_to_add_mod_list_r17.size() > 0) {
    j.start_array("musim-GapToAddModList-r17");
    for (const auto& e1 : musim_gap_to_add_mod_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (musim_aperiodic_gap_r17_present) {
    j.write_fieldname("musim-AperiodicGap-r17");
    musim_aperiodic_gap_r17.to_json(j);
  }
  j.end_obj();
}

// MaxBW-PreferenceConfig-r16 ::= SEQUENCE
SRSASN_CODE max_bw_pref_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(max_bw_pref_prohibit_timer_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE max_bw_pref_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(max_bw_pref_prohibit_timer_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void max_bw_pref_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxBW-PreferenceProhibitTimer-r16", max_bw_pref_prohibit_timer_r16.to_string());
  j.end_obj();
}

const char* max_bw_pref_cfg_r16_s::max_bw_pref_prohibit_timer_r16_opts::to_string() const
{
  static const char* names[] = {
      "s0", "s0dot5", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "s10", "s20", "s30", "spare2", "spare1"};
  return convert_enum_idx(names, 16, value, "max_bw_pref_cfg_r16_s::max_bw_pref_prohibit_timer_r16_e_");
}
float max_bw_pref_cfg_r16_s::max_bw_pref_prohibit_timer_r16_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20.0, 30.0};
  return map_enum_number(numbers, 14, value, "max_bw_pref_cfg_r16_s::max_bw_pref_prohibit_timer_r16_e_");
}
const char* max_bw_pref_cfg_r16_s::max_bw_pref_prohibit_timer_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.5", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "20", "30"};
  return convert_enum_idx(number_strs, 16, value, "max_bw_pref_cfg_r16_s::max_bw_pref_prohibit_timer_r16_e_");
}

// MaxCC-PreferenceConfig-r16 ::= SEQUENCE
SRSASN_CODE max_cc_pref_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(max_cc_pref_prohibit_timer_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE max_cc_pref_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(max_cc_pref_prohibit_timer_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void max_cc_pref_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxCC-PreferenceProhibitTimer-r16", max_cc_pref_prohibit_timer_r16.to_string());
  j.end_obj();
}

const char* max_cc_pref_cfg_r16_s::max_cc_pref_prohibit_timer_r16_opts::to_string() const
{
  static const char* names[] = {
      "s0", "s0dot5", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "s10", "s20", "s30", "spare2", "spare1"};
  return convert_enum_idx(names, 16, value, "max_cc_pref_cfg_r16_s::max_cc_pref_prohibit_timer_r16_e_");
}
float max_cc_pref_cfg_r16_s::max_cc_pref_prohibit_timer_r16_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20.0, 30.0};
  return map_enum_number(numbers, 14, value, "max_cc_pref_cfg_r16_s::max_cc_pref_prohibit_timer_r16_e_");
}
const char* max_cc_pref_cfg_r16_s::max_cc_pref_prohibit_timer_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.5", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "20", "30"};
  return convert_enum_idx(number_strs, 16, value, "max_cc_pref_cfg_r16_s::max_cc_pref_prohibit_timer_r16_e_");
}

// MaxMIMO-LayerPreferenceConfig-r16 ::= SEQUENCE
SRSASN_CODE max_mimo_layer_pref_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(max_mimo_layer_pref_prohibit_timer_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE max_mimo_layer_pref_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(max_mimo_layer_pref_prohibit_timer_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void max_mimo_layer_pref_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxMIMO-LayerPreferenceProhibitTimer-r16", max_mimo_layer_pref_prohibit_timer_r16.to_string());
  j.end_obj();
}

const char* max_mimo_layer_pref_cfg_r16_s::max_mimo_layer_pref_prohibit_timer_r16_opts::to_string() const
{
  static const char* names[] = {
      "s0", "s0dot5", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "s10", "s20", "s30", "spare2", "spare1"};
  return convert_enum_idx(names, 16, value, "max_mimo_layer_pref_cfg_r16_s::max_mimo_layer_pref_prohibit_timer_r16_e_");
}
float max_mimo_layer_pref_cfg_r16_s::max_mimo_layer_pref_prohibit_timer_r16_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20.0, 30.0};
  return map_enum_number(
      numbers, 14, value, "max_mimo_layer_pref_cfg_r16_s::max_mimo_layer_pref_prohibit_timer_r16_e_");
}
const char* max_mimo_layer_pref_cfg_r16_s::max_mimo_layer_pref_prohibit_timer_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.5", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "20", "30"};
  return convert_enum_idx(
      number_strs, 16, value, "max_mimo_layer_pref_cfg_r16_s::max_mimo_layer_pref_prohibit_timer_r16_e_");
}

// MeasRSSI-ReportConfig-r16 ::= SEQUENCE
SRSASN_CODE meas_rssi_report_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ch_occupancy_thres_r16_present, 1));

  if (ch_occupancy_thres_r16_present) {
    HANDLE_CODE(pack_integer(bref, ch_occupancy_thres_r16, (uint8_t)0u, (uint8_t)76u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_rssi_report_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ch_occupancy_thres_r16_present, 1));

  if (ch_occupancy_thres_r16_present) {
    HANDLE_CODE(unpack_integer(ch_occupancy_thres_r16, bref, (uint8_t)0u, (uint8_t)76u));
  }

  return SRSASN_SUCCESS;
}
void meas_rssi_report_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ch_occupancy_thres_r16_present) {
    j.write_int("channelOccupancyThreshold-r16", ch_occupancy_thres_r16);
  }
  j.end_obj();
}

// MeasReportQuantity ::= SEQUENCE
SRSASN_CODE meas_report_quant_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rsrp, 1));
  HANDLE_CODE(bref.pack(rsrq, 1));
  HANDLE_CODE(bref.pack(sinr, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_report_quant_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(rsrp, 1));
  HANDLE_CODE(bref.unpack(rsrq, 1));
  HANDLE_CODE(bref.unpack(sinr, 1));

  return SRSASN_SUCCESS;
}
void meas_report_quant_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_bool("rsrp", rsrp);
  j.write_bool("rsrq", rsrq);
  j.write_bool("sinr", sinr);
  j.end_obj();
}

// MeasReportQuantity-r16 ::= SEQUENCE
SRSASN_CODE meas_report_quant_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cbr_r16, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_report_quant_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(cbr_r16, 1));

  return SRSASN_SUCCESS;
}
void meas_report_quant_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_bool("cbr-r16", cbr_r16);
  j.end_obj();
}

// MeasReportQuantityCLI-r16 ::= ENUMERATED
const char* meas_report_quant_cli_r16_opts::to_string() const
{
  static const char* names[] = {"srs-rsrp", "cli-rssi"};
  return convert_enum_idx(names, 2, value, "meas_report_quant_cli_r16_e");
}

// MeasReportQuantityUTRA-FDD-r16 ::= SEQUENCE
SRSASN_CODE meas_report_quant_utra_fdd_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cpich_rs_cp, 1));
  HANDLE_CODE(bref.pack(cpich_ec_n0, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_report_quant_utra_fdd_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(cpich_rs_cp, 1));
  HANDLE_CODE(bref.unpack(cpich_ec_n0, 1));

  return SRSASN_SUCCESS;
}
void meas_report_quant_utra_fdd_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_bool("cpich-RSCP", cpich_rs_cp);
  j.write_bool("cpich-EcN0", cpich_ec_n0);
  j.end_obj();
}

// MeasTriggerQuantity ::= CHOICE
void meas_trigger_quant_c::destroy_() {}
void meas_trigger_quant_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
meas_trigger_quant_c::meas_trigger_quant_c(const meas_trigger_quant_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::rsrp:
      c.init(other.c.get<uint8_t>());
      break;
    case types::rsrq:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sinr:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_c");
  }
}
meas_trigger_quant_c& meas_trigger_quant_c::operator=(const meas_trigger_quant_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::rsrp:
      c.set(other.c.get<uint8_t>());
      break;
    case types::rsrq:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sinr:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_c");
  }

  return *this;
}
uint8_t& meas_trigger_quant_c::set_rsrp()
{
  set(types::rsrp);
  return c.get<uint8_t>();
}
uint8_t& meas_trigger_quant_c::set_rsrq()
{
  set(types::rsrq);
  return c.get<uint8_t>();
}
uint8_t& meas_trigger_quant_c::set_sinr()
{
  set(types::sinr);
  return c.get<uint8_t>();
}
void meas_trigger_quant_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rsrp:
      j.write_int("rsrp", c.get<uint8_t>());
      break;
    case types::rsrq:
      j.write_int("rsrq", c.get<uint8_t>());
      break;
    case types::sinr:
      j.write_int("sinr", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_c");
  }
  j.end_obj();
}
SRSASN_CODE meas_trigger_quant_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rsrp:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    case types::rsrq:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    case types::sinr:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_trigger_quant_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rsrp:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    case types::rsrq:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    case types::sinr:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* meas_trigger_quant_c::types_opts::to_string() const
{
  static const char* names[] = {"rsrp", "rsrq", "sinr"};
  return convert_enum_idx(names, 3, value, "meas_trigger_quant_c::types");
}

// MeasTriggerQuantityCLI-r16 ::= CHOICE
void meas_trigger_quant_cli_r16_c::destroy_() {}
void meas_trigger_quant_cli_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
meas_trigger_quant_cli_r16_c::meas_trigger_quant_cli_r16_c(const meas_trigger_quant_cli_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::srs_rsrp_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::cli_rssi_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_cli_r16_c");
  }
}
meas_trigger_quant_cli_r16_c& meas_trigger_quant_cli_r16_c::operator=(const meas_trigger_quant_cli_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::srs_rsrp_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::cli_rssi_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_cli_r16_c");
  }

  return *this;
}
uint8_t& meas_trigger_quant_cli_r16_c::set_srs_rsrp_r16()
{
  set(types::srs_rsrp_r16);
  return c.get<uint8_t>();
}
uint8_t& meas_trigger_quant_cli_r16_c::set_cli_rssi_r16()
{
  set(types::cli_rssi_r16);
  return c.get<uint8_t>();
}
void meas_trigger_quant_cli_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::srs_rsrp_r16:
      j.write_int("srs-RSRP-r16", c.get<uint8_t>());
      break;
    case types::cli_rssi_r16:
      j.write_int("cli-RSSI-r16", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_cli_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE meas_trigger_quant_cli_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::srs_rsrp_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)98u));
      break;
    case types::cli_rssi_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)76u));
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_cli_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_trigger_quant_cli_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::srs_rsrp_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)98u));
      break;
    case types::cli_rssi_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)76u));
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_cli_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* meas_trigger_quant_cli_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"srs-RSRP-r16", "cli-RSSI-r16"};
  return convert_enum_idx(names, 2, value, "meas_trigger_quant_cli_r16_c::types");
}

// MeasTriggerQuantityEUTRA ::= CHOICE
void meas_trigger_quant_eutra_c::destroy_() {}
void meas_trigger_quant_eutra_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
meas_trigger_quant_eutra_c::meas_trigger_quant_eutra_c(const meas_trigger_quant_eutra_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::rsrp:
      c.init(other.c.get<uint8_t>());
      break;
    case types::rsrq:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sinr:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_eutra_c");
  }
}
meas_trigger_quant_eutra_c& meas_trigger_quant_eutra_c::operator=(const meas_trigger_quant_eutra_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::rsrp:
      c.set(other.c.get<uint8_t>());
      break;
    case types::rsrq:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sinr:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_eutra_c");
  }

  return *this;
}
uint8_t& meas_trigger_quant_eutra_c::set_rsrp()
{
  set(types::rsrp);
  return c.get<uint8_t>();
}
uint8_t& meas_trigger_quant_eutra_c::set_rsrq()
{
  set(types::rsrq);
  return c.get<uint8_t>();
}
uint8_t& meas_trigger_quant_eutra_c::set_sinr()
{
  set(types::sinr);
  return c.get<uint8_t>();
}
void meas_trigger_quant_eutra_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rsrp:
      j.write_int("rsrp", c.get<uint8_t>());
      break;
    case types::rsrq:
      j.write_int("rsrq", c.get<uint8_t>());
      break;
    case types::sinr:
      j.write_int("sinr", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_eutra_c");
  }
  j.end_obj();
}
SRSASN_CODE meas_trigger_quant_eutra_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rsrp:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)97u));
      break;
    case types::rsrq:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)34u));
      break;
    case types::sinr:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_eutra_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_trigger_quant_eutra_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rsrp:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)97u));
      break;
    case types::rsrq:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)34u));
      break;
    case types::sinr:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_eutra_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* meas_trigger_quant_eutra_c::types_opts::to_string() const
{
  static const char* names[] = {"rsrp", "rsrq", "sinr"};
  return convert_enum_idx(names, 3, value, "meas_trigger_quant_eutra_c::types");
}

// MeasTriggerQuantityOffset ::= CHOICE
void meas_trigger_quant_offset_c::destroy_() {}
void meas_trigger_quant_offset_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
meas_trigger_quant_offset_c::meas_trigger_quant_offset_c(const meas_trigger_quant_offset_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::rsrp:
      c.init(other.c.get<int8_t>());
      break;
    case types::rsrq:
      c.init(other.c.get<int8_t>());
      break;
    case types::sinr:
      c.init(other.c.get<int8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_offset_c");
  }
}
meas_trigger_quant_offset_c& meas_trigger_quant_offset_c::operator=(const meas_trigger_quant_offset_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::rsrp:
      c.set(other.c.get<int8_t>());
      break;
    case types::rsrq:
      c.set(other.c.get<int8_t>());
      break;
    case types::sinr:
      c.set(other.c.get<int8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_offset_c");
  }

  return *this;
}
int8_t& meas_trigger_quant_offset_c::set_rsrp()
{
  set(types::rsrp);
  return c.get<int8_t>();
}
int8_t& meas_trigger_quant_offset_c::set_rsrq()
{
  set(types::rsrq);
  return c.get<int8_t>();
}
int8_t& meas_trigger_quant_offset_c::set_sinr()
{
  set(types::sinr);
  return c.get<int8_t>();
}
void meas_trigger_quant_offset_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rsrp:
      j.write_int("rsrp", c.get<int8_t>());
      break;
    case types::rsrq:
      j.write_int("rsrq", c.get<int8_t>());
      break;
    case types::sinr:
      j.write_int("sinr", c.get<int8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_offset_c");
  }
  j.end_obj();
}
SRSASN_CODE meas_trigger_quant_offset_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rsrp:
      HANDLE_CODE(pack_integer(bref, c.get<int8_t>(), (int8_t)-30, (int8_t)30));
      break;
    case types::rsrq:
      HANDLE_CODE(pack_integer(bref, c.get<int8_t>(), (int8_t)-30, (int8_t)30));
      break;
    case types::sinr:
      HANDLE_CODE(pack_integer(bref, c.get<int8_t>(), (int8_t)-30, (int8_t)30));
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_offset_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_trigger_quant_offset_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rsrp:
      HANDLE_CODE(unpack_integer(c.get<int8_t>(), bref, (int8_t)-30, (int8_t)30));
      break;
    case types::rsrq:
      HANDLE_CODE(unpack_integer(c.get<int8_t>(), bref, (int8_t)-30, (int8_t)30));
      break;
    case types::sinr:
      HANDLE_CODE(unpack_integer(c.get<int8_t>(), bref, (int8_t)-30, (int8_t)30));
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_offset_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* meas_trigger_quant_offset_c::types_opts::to_string() const
{
  static const char* names[] = {"rsrp", "rsrq", "sinr"};
  return convert_enum_idx(names, 3, value, "meas_trigger_quant_offset_c::types");
}

// MeasTriggerQuantityUTRA-FDD-r16 ::= CHOICE
void meas_trigger_quant_utra_fdd_r16_c::destroy_() {}
void meas_trigger_quant_utra_fdd_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
meas_trigger_quant_utra_fdd_r16_c::meas_trigger_quant_utra_fdd_r16_c(const meas_trigger_quant_utra_fdd_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::utra_fdd_rs_cp_r16:
      c.init(other.c.get<int8_t>());
      break;
    case types::utra_fdd_ec_n0_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_utra_fdd_r16_c");
  }
}
meas_trigger_quant_utra_fdd_r16_c&
meas_trigger_quant_utra_fdd_r16_c::operator=(const meas_trigger_quant_utra_fdd_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::utra_fdd_rs_cp_r16:
      c.set(other.c.get<int8_t>());
      break;
    case types::utra_fdd_ec_n0_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_utra_fdd_r16_c");
  }

  return *this;
}
int8_t& meas_trigger_quant_utra_fdd_r16_c::set_utra_fdd_rs_cp_r16()
{
  set(types::utra_fdd_rs_cp_r16);
  return c.get<int8_t>();
}
uint8_t& meas_trigger_quant_utra_fdd_r16_c::set_utra_fdd_ec_n0_r16()
{
  set(types::utra_fdd_ec_n0_r16);
  return c.get<uint8_t>();
}
void meas_trigger_quant_utra_fdd_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::utra_fdd_rs_cp_r16:
      j.write_int("utra-FDD-RSCP-r16", c.get<int8_t>());
      break;
    case types::utra_fdd_ec_n0_r16:
      j.write_int("utra-FDD-EcN0-r16", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_utra_fdd_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE meas_trigger_quant_utra_fdd_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::utra_fdd_rs_cp_r16:
      HANDLE_CODE(pack_integer(bref, c.get<int8_t>(), (int8_t)-5, (int8_t)91));
      break;
    case types::utra_fdd_ec_n0_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)49u));
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_utra_fdd_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_trigger_quant_utra_fdd_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::utra_fdd_rs_cp_r16:
      HANDLE_CODE(unpack_integer(c.get<int8_t>(), bref, (int8_t)-5, (int8_t)91));
      break;
    case types::utra_fdd_ec_n0_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)49u));
      break;
    default:
      log_invalid_choice_id(type_, "meas_trigger_quant_utra_fdd_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* meas_trigger_quant_utra_fdd_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"utra-FDD-RSCP-r16", "utra-FDD-EcN0-r16"};
  return convert_enum_idx(names, 2, value, "meas_trigger_quant_utra_fdd_r16_c::types");
}
uint8_t meas_trigger_quant_utra_fdd_r16_c::types_opts::to_number() const
{
  if (value == utra_fdd_ec_n0_r16) {
    return 0;
  }
  invalid_enum_number(value, "meas_trigger_quant_utra_fdd_r16_c::types");
  return 0;
}

// MinSchedulingOffsetPreferenceConfig-r16 ::= SEQUENCE
SRSASN_CODE min_sched_offset_pref_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(min_sched_offset_pref_prohibit_timer_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE min_sched_offset_pref_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(min_sched_offset_pref_prohibit_timer_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void min_sched_offset_pref_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("minSchedulingOffsetPreferenceProhibitTimer-r16", min_sched_offset_pref_prohibit_timer_r16.to_string());
  j.end_obj();
}

const char* min_sched_offset_pref_cfg_r16_s::min_sched_offset_pref_prohibit_timer_r16_opts::to_string() const
{
  static const char* names[] = {
      "s0", "s0dot5", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "s10", "s20", "s30", "spare2", "spare1"};
  return convert_enum_idx(
      names, 16, value, "min_sched_offset_pref_cfg_r16_s::min_sched_offset_pref_prohibit_timer_r16_e_");
}
float min_sched_offset_pref_cfg_r16_s::min_sched_offset_pref_prohibit_timer_r16_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20.0, 30.0};
  return map_enum_number(
      numbers, 14, value, "min_sched_offset_pref_cfg_r16_s::min_sched_offset_pref_prohibit_timer_r16_e_");
}
const char* min_sched_offset_pref_cfg_r16_s::min_sched_offset_pref_prohibit_timer_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.5", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "20", "30"};
  return convert_enum_idx(
      number_strs, 16, value, "min_sched_offset_pref_cfg_r16_s::min_sched_offset_pref_prohibit_timer_r16_e_");
}

// NR-RS-Type ::= ENUMERATED
const char* nr_rs_type_opts::to_string() const
{
  static const char* names[] = {"ssb", "csi-rs"};
  return convert_enum_idx(names, 2, value, "nr_rs_type_e");
}

// NeedForGapNCSG-ConfigEUTRA-r17 ::= SEQUENCE
SRSASN_CODE need_for_gap_ncsg_cfg_eutra_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(requested_target_band_filt_ncsg_eutra_r17.size() > 0, 1));

  if (requested_target_band_filt_ncsg_eutra_r17.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, requested_target_band_filt_ncsg_eutra_r17, 1, 256, integer_packer<uint16_t>(1, 256)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE need_for_gap_ncsg_cfg_eutra_r17_s::unpack(cbit_ref& bref)
{
  bool requested_target_band_filt_ncsg_eutra_r17_present;
  HANDLE_CODE(bref.unpack(requested_target_band_filt_ncsg_eutra_r17_present, 1));

  if (requested_target_band_filt_ncsg_eutra_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(requested_target_band_filt_ncsg_eutra_r17, bref, 1, 256, integer_packer<uint16_t>(1, 256)));
  }

  return SRSASN_SUCCESS;
}
void need_for_gap_ncsg_cfg_eutra_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (requested_target_band_filt_ncsg_eutra_r17.size() > 0) {
    j.start_array("requestedTargetBandFilterNCSG-EUTRA-r17");
    for (const auto& e1 : requested_target_band_filt_ncsg_eutra_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// NeedForGapNCSG-ConfigNR-r17 ::= SEQUENCE
SRSASN_CODE need_for_gap_ncsg_cfg_nr_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(requested_target_band_filt_ncsg_nr_r17.size() > 0, 1));

  if (requested_target_band_filt_ncsg_nr_r17.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, requested_target_band_filt_ncsg_nr_r17, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE need_for_gap_ncsg_cfg_nr_r17_s::unpack(cbit_ref& bref)
{
  bool requested_target_band_filt_ncsg_nr_r17_present;
  HANDLE_CODE(bref.unpack(requested_target_band_filt_ncsg_nr_r17_present, 1));

  if (requested_target_band_filt_ncsg_nr_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(requested_target_band_filt_ncsg_nr_r17, bref, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  }

  return SRSASN_SUCCESS;
}
void need_for_gap_ncsg_cfg_nr_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (requested_target_band_filt_ncsg_nr_r17.size() > 0) {
    j.start_array("requestedTargetBandFilterNCSG-NR-r17");
    for (const auto& e1 : requested_target_band_filt_ncsg_nr_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// OtherConfig-v1700 ::= SEQUENCE
SRSASN_CODE other_cfg_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_gap_fr2_pref_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(musim_gap_assist_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(musim_leave_assist_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(success_ho_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(max_bw_pref_cfg_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.pack(max_mimo_layer_pref_cfg_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.pack(min_sched_offset_pref_cfg_ext_r17_present, 1));
  HANDLE_CODE(bref.pack(rlm_relaxation_report_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(bfd_relaxation_report_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(scg_deactivation_pref_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(rrm_meas_relaxation_report_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(prop_delay_diff_report_cfg_r17_present, 1));

  if (musim_gap_assist_cfg_r17_present) {
    HANDLE_CODE(musim_gap_assist_cfg_r17.pack(bref));
  }
  if (musim_leave_assist_cfg_r17_present) {
    HANDLE_CODE(musim_leave_assist_cfg_r17.pack(bref));
  }
  if (success_ho_cfg_r17_present) {
    HANDLE_CODE(success_ho_cfg_r17.pack(bref));
  }
  if (rlm_relaxation_report_cfg_r17_present) {
    HANDLE_CODE(rlm_relaxation_report_cfg_r17.pack(bref));
  }
  if (bfd_relaxation_report_cfg_r17_present) {
    HANDLE_CODE(bfd_relaxation_report_cfg_r17.pack(bref));
  }
  if (scg_deactivation_pref_cfg_r17_present) {
    HANDLE_CODE(scg_deactivation_pref_cfg_r17.pack(bref));
  }
  if (rrm_meas_relaxation_report_cfg_r17_present) {
    HANDLE_CODE(rrm_meas_relaxation_report_cfg_r17.pack(bref));
  }
  if (prop_delay_diff_report_cfg_r17_present) {
    HANDLE_CODE(prop_delay_diff_report_cfg_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE other_cfg_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ul_gap_fr2_pref_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(musim_gap_assist_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(musim_leave_assist_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(success_ho_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_bw_pref_cfg_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_mimo_layer_pref_cfg_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.unpack(min_sched_offset_pref_cfg_ext_r17_present, 1));
  HANDLE_CODE(bref.unpack(rlm_relaxation_report_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(bfd_relaxation_report_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(scg_deactivation_pref_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(rrm_meas_relaxation_report_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(prop_delay_diff_report_cfg_r17_present, 1));

  if (musim_gap_assist_cfg_r17_present) {
    HANDLE_CODE(musim_gap_assist_cfg_r17.unpack(bref));
  }
  if (musim_leave_assist_cfg_r17_present) {
    HANDLE_CODE(musim_leave_assist_cfg_r17.unpack(bref));
  }
  if (success_ho_cfg_r17_present) {
    HANDLE_CODE(success_ho_cfg_r17.unpack(bref));
  }
  if (rlm_relaxation_report_cfg_r17_present) {
    HANDLE_CODE(rlm_relaxation_report_cfg_r17.unpack(bref));
  }
  if (bfd_relaxation_report_cfg_r17_present) {
    HANDLE_CODE(bfd_relaxation_report_cfg_r17.unpack(bref));
  }
  if (scg_deactivation_pref_cfg_r17_present) {
    HANDLE_CODE(scg_deactivation_pref_cfg_r17.unpack(bref));
  }
  if (rrm_meas_relaxation_report_cfg_r17_present) {
    HANDLE_CODE(rrm_meas_relaxation_report_cfg_r17.unpack(bref));
  }
  if (prop_delay_diff_report_cfg_r17_present) {
    HANDLE_CODE(prop_delay_diff_report_cfg_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void other_cfg_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_gap_fr2_pref_cfg_r17_present) {
    j.write_str("ul-GapFR2-PreferenceConfig-r17", "true");
  }
  if (musim_gap_assist_cfg_r17_present) {
    j.write_fieldname("musim-GapAssistanceConfig-r17");
    musim_gap_assist_cfg_r17.to_json(j);
  }
  if (musim_leave_assist_cfg_r17_present) {
    j.write_fieldname("musim-LeaveAssistanceConfig-r17");
    musim_leave_assist_cfg_r17.to_json(j);
  }
  if (success_ho_cfg_r17_present) {
    j.write_fieldname("successHO-Config-r17");
    success_ho_cfg_r17.to_json(j);
  }
  if (max_bw_pref_cfg_fr2_2_r17_present) {
    j.write_str("maxBW-PreferenceConfigFR2-2-r17", "true");
  }
  if (max_mimo_layer_pref_cfg_fr2_2_r17_present) {
    j.write_str("maxMIMO-LayerPreferenceConfigFR2-2-r17", "true");
  }
  if (min_sched_offset_pref_cfg_ext_r17_present) {
    j.write_str("minSchedulingOffsetPreferenceConfigExt-r17", "true");
  }
  if (rlm_relaxation_report_cfg_r17_present) {
    j.write_fieldname("rlm-RelaxationReportingConfig-r17");
    rlm_relaxation_report_cfg_r17.to_json(j);
  }
  if (bfd_relaxation_report_cfg_r17_present) {
    j.write_fieldname("bfd-RelaxationReportingConfig-r17");
    bfd_relaxation_report_cfg_r17.to_json(j);
  }
  if (scg_deactivation_pref_cfg_r17_present) {
    j.write_fieldname("scg-DeactivationPreferenceConfig-r17");
    scg_deactivation_pref_cfg_r17.to_json(j);
  }
  if (rrm_meas_relaxation_report_cfg_r17_present) {
    j.write_fieldname("rrm-MeasRelaxationReportingConfig-r17");
    rrm_meas_relaxation_report_cfg_r17.to_json(j);
  }
  if (prop_delay_diff_report_cfg_r17_present) {
    j.write_fieldname("propDelayDiffReportConfig-r17");
    prop_delay_diff_report_cfg_r17.to_json(j);
  }
  j.end_obj();
}

// ReleasePreferenceConfig-r16 ::= SEQUENCE
SRSASN_CODE release_pref_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(connected_report_present, 1));

  HANDLE_CODE(release_pref_prohibit_timer_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE release_pref_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(connected_report_present, 1));

  HANDLE_CODE(release_pref_prohibit_timer_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void release_pref_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("releasePreferenceProhibitTimer-r16", release_pref_prohibit_timer_r16.to_string());
  if (connected_report_present) {
    j.write_str("connectedReporting", "true");
  }
  j.end_obj();
}

const char* release_pref_cfg_r16_s::release_pref_prohibit_timer_r16_opts::to_string() const
{
  static const char* names[] = {
      "s0", "s0dot5", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "s10", "s20", "s30", "infinity", "spare1"};
  return convert_enum_idx(names, 16, value, "release_pref_cfg_r16_s::release_pref_prohibit_timer_r16_e_");
}
float release_pref_cfg_r16_s::release_pref_prohibit_timer_r16_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20.0, 30.0, -1.0};
  return map_enum_number(numbers, 15, value, "release_pref_cfg_r16_s::release_pref_prohibit_timer_r16_e_");
}
const char* release_pref_cfg_r16_s::release_pref_prohibit_timer_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.5", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "20", "30", "inf"};
  return convert_enum_idx(number_strs, 16, value, "release_pref_cfg_r16_s::release_pref_prohibit_timer_r16_e_");
}

// RxTxReportInterval-r17 ::= ENUMERATED
const char* rx_tx_report_interv_r17_opts::to_string() const
{
  static const char* names[] = {"ms80",
                                "ms120",
                                "ms160",
                                "ms240",
                                "ms320",
                                "ms480",
                                "ms640",
                                "ms1024",
                                "ms1280",
                                "ms2048",
                                "ms2560",
                                "ms5120",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "rx_tx_report_interv_r17_e");
}
uint16_t rx_tx_report_interv_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {80, 120, 160, 240, 320, 480, 640, 1024, 1280, 2048, 2560, 5120};
  return map_enum_number(numbers, 12, value, "rx_tx_report_interv_r17_e");
}

// SL-L2RelayUE-Config-r17 ::= SEQUENCE
SRSASN_CODE sl_l2_relay_ue_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_remote_ue_to_add_mod_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_remote_ue_to_release_list_r17.size() > 0, 1));

  if (sl_remote_ue_to_add_mod_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_remote_ue_to_add_mod_list_r17, 1, 32));
  }
  if (sl_remote_ue_to_release_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_remote_ue_to_release_list_r17, 1, 32));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_l2_relay_ue_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sl_remote_ue_to_add_mod_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_remote_ue_to_add_mod_list_r17_present, 1));
  bool sl_remote_ue_to_release_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_remote_ue_to_release_list_r17_present, 1));

  if (sl_remote_ue_to_add_mod_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_remote_ue_to_add_mod_list_r17, bref, 1, 32));
  }
  if (sl_remote_ue_to_release_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_remote_ue_to_release_list_r17, bref, 1, 32));
  }

  return SRSASN_SUCCESS;
}
void sl_l2_relay_ue_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_remote_ue_to_add_mod_list_r17.size() > 0) {
    j.start_array("sl-RemoteUE-ToAddModList-r17");
    for (const auto& e1 : sl_remote_ue_to_add_mod_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_remote_ue_to_release_list_r17.size() > 0) {
    j.start_array("sl-RemoteUE-ToReleaseList-r17");
    for (const auto& e1 : sl_remote_ue_to_release_list_r17) {
      j.write_str(e1.to_string());
    }
    j.end_array();
  }
  j.end_obj();
}

// SL-TimeOffsetEUTRA-r16 ::= ENUMERATED
const char* sl_time_offset_eutra_r16_opts::to_string() const
{
  static const char* names[] = {"ms0",
                                "ms0dot25",
                                "ms0dot5",
                                "ms0dot625",
                                "ms0dot75",
                                "ms1",
                                "ms1dot25",
                                "ms1dot5",
                                "ms1dot75",
                                "ms2",
                                "ms2dot5",
                                "ms3",
                                "ms4",
                                "ms5",
                                "ms6",
                                "ms8",
                                "ms10",
                                "ms20"};
  return convert_enum_idx(names, 18, value, "sl_time_offset_eutra_r16_e");
}
float sl_time_offset_eutra_r16_opts::to_number() const
{
  static const float numbers[] = {
      0.0, 0.25, 0.5, 0.625, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.5, 3.0, 4.0, 5.0, 6.0, 8.0, 10.0, 20.0};
  return map_enum_number(numbers, 18, value, "sl_time_offset_eutra_r16_e");
}
const char* sl_time_offset_eutra_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {
      "0", "0.25", "0.5", "0.625", "0.75", "1", "1.25", "1.5", "1.75", "2", "2.5", "3", "4", "5", "6", "8", "10", "20"};
  return convert_enum_idx(number_strs, 18, value, "sl_time_offset_eutra_r16_e");
}

// SSB-ConfigMobility ::= SEQUENCE
SRSASN_CODE ssb_cfg_mob_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ssb_to_measure_present, 1));
  HANDLE_CODE(bref.pack(ss_rssi_meas_present, 1));

  if (ssb_to_measure_present) {
    HANDLE_CODE(ssb_to_measure.pack(bref));
  }
  HANDLE_CODE(bref.pack(derive_ssb_idx_from_cell, 1));
  if (ss_rssi_meas_present) {
    HANDLE_CODE(ss_rssi_meas.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ssb_position_qcl_common_r16_present;
    group_flags[0] |= ssb_position_qcl_cells_to_add_mod_list_r16.is_present();
    group_flags[0] |= ssb_position_qcl_cells_to_rem_list_r16.is_present();
    group_flags[1] |= derive_ssb_idx_from_cell_inter_r17_present;
    group_flags[1] |= ssb_position_qcl_common_r17_present;
    group_flags[1] |= ssb_position_qcl_cells_r17.is_present();
    group_flags[2] |= cca_cells_to_add_mod_list_r17.is_present();
    group_flags[2] |= cca_cells_to_rem_list_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ssb_position_qcl_common_r16_present, 1));
      HANDLE_CODE(bref.pack(ssb_position_qcl_cells_to_add_mod_list_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(ssb_position_qcl_cells_to_rem_list_r16.is_present(), 1));
      if (ssb_position_qcl_common_r16_present) {
        HANDLE_CODE(ssb_position_qcl_common_r16.pack(bref));
      }
      if (ssb_position_qcl_cells_to_add_mod_list_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *ssb_position_qcl_cells_to_add_mod_list_r16, 1, 32));
      }
      if (ssb_position_qcl_cells_to_rem_list_r16.is_present()) {
        HANDLE_CODE(
            pack_dyn_seq_of(bref, *ssb_position_qcl_cells_to_rem_list_r16, 1, 32, integer_packer<uint16_t>(0, 1007)));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(derive_ssb_idx_from_cell_inter_r17_present, 1));
      HANDLE_CODE(bref.pack(ssb_position_qcl_common_r17_present, 1));
      HANDLE_CODE(bref.pack(ssb_position_qcl_cells_r17.is_present(), 1));
      if (derive_ssb_idx_from_cell_inter_r17_present) {
        HANDLE_CODE(pack_integer(bref, derive_ssb_idx_from_cell_inter_r17, (uint8_t)0u, (uint8_t)31u));
      }
      if (ssb_position_qcl_common_r17_present) {
        HANDLE_CODE(ssb_position_qcl_common_r17.pack(bref));
      }
      if (ssb_position_qcl_cells_r17.is_present()) {
        HANDLE_CODE(ssb_position_qcl_cells_r17->pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(cca_cells_to_add_mod_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(cca_cells_to_rem_list_r17.is_present(), 1));
      if (cca_cells_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *cca_cells_to_add_mod_list_r17, 1, 32, integer_packer<uint16_t>(0, 1007)));
      }
      if (cca_cells_to_rem_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *cca_cells_to_rem_list_r17, 1, 32, integer_packer<uint16_t>(0, 1007)));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ssb_cfg_mob_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ssb_to_measure_present, 1));
  HANDLE_CODE(bref.unpack(ss_rssi_meas_present, 1));

  if (ssb_to_measure_present) {
    HANDLE_CODE(ssb_to_measure.unpack(bref));
  }
  HANDLE_CODE(bref.unpack(derive_ssb_idx_from_cell, 1));
  if (ss_rssi_meas_present) {
    HANDLE_CODE(ss_rssi_meas.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(3);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ssb_position_qcl_common_r16_present, 1));
      unpack_presence_flag(ssb_position_qcl_cells_to_add_mod_list_r16, bref);
      unpack_presence_flag(ssb_position_qcl_cells_to_rem_list_r16, bref);
      if (ssb_position_qcl_common_r16_present) {
        HANDLE_CODE(ssb_position_qcl_common_r16.unpack(bref));
      }
      if (ssb_position_qcl_cells_to_add_mod_list_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*ssb_position_qcl_cells_to_add_mod_list_r16, bref, 1, 32));
      }
      if (ssb_position_qcl_cells_to_rem_list_r16.is_present()) {
        HANDLE_CODE(
            unpack_dyn_seq_of(*ssb_position_qcl_cells_to_rem_list_r16, bref, 1, 32, integer_packer<uint16_t>(0, 1007)));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(derive_ssb_idx_from_cell_inter_r17_present, 1));
      HANDLE_CODE(bref.unpack(ssb_position_qcl_common_r17_present, 1));
      unpack_presence_flag(ssb_position_qcl_cells_r17, bref);
      if (derive_ssb_idx_from_cell_inter_r17_present) {
        HANDLE_CODE(unpack_integer(derive_ssb_idx_from_cell_inter_r17, bref, (uint8_t)0u, (uint8_t)31u));
      }
      if (ssb_position_qcl_common_r17_present) {
        HANDLE_CODE(ssb_position_qcl_common_r17.unpack(bref));
      }
      if (ssb_position_qcl_cells_r17.is_present()) {
        HANDLE_CODE(ssb_position_qcl_cells_r17->unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(cca_cells_to_add_mod_list_r17, bref);
      unpack_presence_flag(cca_cells_to_rem_list_r17, bref);
      if (cca_cells_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*cca_cells_to_add_mod_list_r17, bref, 1, 32, integer_packer<uint16_t>(0, 1007)));
      }
      if (cca_cells_to_rem_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*cca_cells_to_rem_list_r17, bref, 1, 32, integer_packer<uint16_t>(0, 1007)));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void ssb_cfg_mob_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ssb_to_measure_present) {
    j.write_fieldname("ssb-ToMeasure");
    ssb_to_measure.to_json(j);
  }
  j.write_bool("deriveSSB-IndexFromCell", derive_ssb_idx_from_cell);
  if (ss_rssi_meas_present) {
    j.write_fieldname("ss-RSSI-Measurement");
    ss_rssi_meas.to_json(j);
  }
  if (ext) {
    if (ssb_position_qcl_common_r16_present) {
      j.write_str("ssb-PositionQCL-Common-r16", ssb_position_qcl_common_r16.to_string());
    }
    if (ssb_position_qcl_cells_to_add_mod_list_r16.is_present()) {
      j.start_array("ssb-PositionQCL-CellsToAddModList-r16");
      for (const auto& e1 : *ssb_position_qcl_cells_to_add_mod_list_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (ssb_position_qcl_cells_to_rem_list_r16.is_present()) {
      j.start_array("ssb-PositionQCL-CellsToRemoveList-r16");
      for (const auto& e1 : *ssb_position_qcl_cells_to_rem_list_r16) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (derive_ssb_idx_from_cell_inter_r17_present) {
      j.write_int("deriveSSB-IndexFromCellInter-r17", derive_ssb_idx_from_cell_inter_r17);
    }
    if (ssb_position_qcl_common_r17_present) {
      j.write_str("ssb-PositionQCL-Common-r17", ssb_position_qcl_common_r17.to_string());
    }
    if (ssb_position_qcl_cells_r17.is_present()) {
      j.write_fieldname("ssb-PositionQCL-Cells-r17");
      ssb_position_qcl_cells_r17->to_json(j);
    }
    if (cca_cells_to_add_mod_list_r17.is_present()) {
      j.start_array("cca-CellsToAddModList-r17");
      for (const auto& e1 : *cca_cells_to_add_mod_list_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (cca_cells_to_rem_list_r17.is_present()) {
      j.start_array("cca-CellsToRemoveList-r17");
      for (const auto& e1 : *cca_cells_to_rem_list_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

// SSB-MTC3-r16 ::= SEQUENCE
SRSASN_CODE ssb_mtc3_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pci_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ssb_to_measure_r16_present, 1));

  HANDLE_CODE(periodicity_and_offset_r16.pack(bref));
  HANDLE_CODE(dur_r16.pack(bref));
  if (pci_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, pci_list_r16, 1, 64, integer_packer<uint16_t>(0, 1007)));
  }
  if (ssb_to_measure_r16_present) {
    HANDLE_CODE(ssb_to_measure_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ssb_mtc3_r16_s::unpack(cbit_ref& bref)
{
  bool pci_list_r16_present;
  HANDLE_CODE(bref.unpack(pci_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(ssb_to_measure_r16_present, 1));

  HANDLE_CODE(periodicity_and_offset_r16.unpack(bref));
  HANDLE_CODE(dur_r16.unpack(bref));
  if (pci_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(pci_list_r16, bref, 1, 64, integer_packer<uint16_t>(0, 1007)));
  }
  if (ssb_to_measure_r16_present) {
    HANDLE_CODE(ssb_to_measure_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ssb_mtc3_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("periodicityAndOffset-r16");
  periodicity_and_offset_r16.to_json(j);
  j.write_str("duration-r16", dur_r16.to_string());
  if (pci_list_r16.size() > 0) {
    j.start_array("pci-List-r16");
    for (const auto& e1 : pci_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ssb_to_measure_r16_present) {
    j.write_fieldname("ssb-ToMeasure-r16");
    ssb_to_measure_r16.to_json(j);
  }
  j.end_obj();
}

void ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::destroy_() {}
void ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::periodicity_and_offset_r16_c_(
    const ssb_mtc3_r16_s::periodicity_and_offset_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sf5_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sf10_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sf20_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sf40_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sf80_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sf160_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sf320_r16:
      c.init(other.c.get<uint16_t>());
      break;
    case types::sf640_r16:
      c.init(other.c.get<uint16_t>());
      break;
    case types::sf1280_r16:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ssb_mtc3_r16_s::periodicity_and_offset_r16_c_");
  }
}
ssb_mtc3_r16_s::periodicity_and_offset_r16_c_&
ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::operator=(const ssb_mtc3_r16_s::periodicity_and_offset_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sf5_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sf10_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sf20_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sf40_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sf80_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sf160_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sf320_r16:
      c.set(other.c.get<uint16_t>());
      break;
    case types::sf640_r16:
      c.set(other.c.get<uint16_t>());
      break;
    case types::sf1280_r16:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ssb_mtc3_r16_s::periodicity_and_offset_r16_c_");
  }

  return *this;
}
uint8_t& ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::set_sf5_r16()
{
  set(types::sf5_r16);
  return c.get<uint8_t>();
}
uint8_t& ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::set_sf10_r16()
{
  set(types::sf10_r16);
  return c.get<uint8_t>();
}
uint8_t& ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::set_sf20_r16()
{
  set(types::sf20_r16);
  return c.get<uint8_t>();
}
uint8_t& ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::set_sf40_r16()
{
  set(types::sf40_r16);
  return c.get<uint8_t>();
}
uint8_t& ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::set_sf80_r16()
{
  set(types::sf80_r16);
  return c.get<uint8_t>();
}
uint8_t& ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::set_sf160_r16()
{
  set(types::sf160_r16);
  return c.get<uint8_t>();
}
uint16_t& ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::set_sf320_r16()
{
  set(types::sf320_r16);
  return c.get<uint16_t>();
}
uint16_t& ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::set_sf640_r16()
{
  set(types::sf640_r16);
  return c.get<uint16_t>();
}
uint16_t& ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::set_sf1280_r16()
{
  set(types::sf1280_r16);
  return c.get<uint16_t>();
}
void ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sf5_r16:
      j.write_int("sf5-r16", c.get<uint8_t>());
      break;
    case types::sf10_r16:
      j.write_int("sf10-r16", c.get<uint8_t>());
      break;
    case types::sf20_r16:
      j.write_int("sf20-r16", c.get<uint8_t>());
      break;
    case types::sf40_r16:
      j.write_int("sf40-r16", c.get<uint8_t>());
      break;
    case types::sf80_r16:
      j.write_int("sf80-r16", c.get<uint8_t>());
      break;
    case types::sf160_r16:
      j.write_int("sf160-r16", c.get<uint8_t>());
      break;
    case types::sf320_r16:
      j.write_int("sf320-r16", c.get<uint16_t>());
      break;
    case types::sf640_r16:
      j.write_int("sf640-r16", c.get<uint16_t>());
      break;
    case types::sf1280_r16:
      j.write_int("sf1280-r16", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "ssb_mtc3_r16_s::periodicity_and_offset_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sf5_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)4u));
      break;
    case types::sf10_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)9u));
      break;
    case types::sf20_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)19u));
      break;
    case types::sf40_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)39u));
      break;
    case types::sf80_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u));
      break;
    case types::sf160_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)159u));
      break;
    case types::sf320_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)319u));
      break;
    case types::sf640_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)639u));
      break;
    case types::sf1280_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1279u));
      break;
    default:
      log_invalid_choice_id(type_, "ssb_mtc3_r16_s::periodicity_and_offset_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sf5_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)4u));
      break;
    case types::sf10_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)9u));
      break;
    case types::sf20_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)19u));
      break;
    case types::sf40_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)39u));
      break;
    case types::sf80_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u));
      break;
    case types::sf160_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)159u));
      break;
    case types::sf320_r16:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)319u));
      break;
    case types::sf640_r16:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)639u));
      break;
    case types::sf1280_r16:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1279u));
      break;
    default:
      log_invalid_choice_id(type_, "ssb_mtc3_r16_s::periodicity_and_offset_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {
      "sf5-r16", "sf10-r16", "sf20-r16", "sf40-r16", "sf80-r16", "sf160-r16", "sf320-r16", "sf640-r16", "sf1280-r16"};
  return convert_enum_idx(names, 9, value, "ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::types");
}
uint16_t ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {5, 10, 20, 40, 80, 160, 320, 640, 1280};
  return map_enum_number(numbers, 9, value, "ssb_mtc3_r16_s::periodicity_and_offset_r16_c_::types");
}

const char* ssb_mtc3_r16_s::dur_r16_opts::to_string() const
{
  static const char* names[] = {"sf1", "sf2", "sf3", "sf4", "sf5"};
  return convert_enum_idx(names, 5, value, "ssb_mtc3_r16_s::dur_r16_e_");
}
uint8_t ssb_mtc3_r16_s::dur_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5};
  return map_enum_number(numbers, 5, value, "ssb_mtc3_r16_s::dur_r16_e_");
}

// Sensor-NameList-r16 ::= SEQUENCE
SRSASN_CODE sensor_name_list_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_uncom_bar_pre_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_ue_speed_present, 1));
  HANDLE_CODE(bref.pack(meas_ue_orientation_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sensor_name_list_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_uncom_bar_pre_r16_present, 1));
  HANDLE_CODE(bref.unpack(meas_ue_speed_present, 1));
  HANDLE_CODE(bref.unpack(meas_ue_orientation_present, 1));

  return SRSASN_SUCCESS;
}
void sensor_name_list_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_uncom_bar_pre_r16_present) {
    j.write_str("measUncomBarPre-r16", "true");
  }
  if (meas_ue_speed_present) {
    j.write_str("measUeSpeed", "true");
  }
  if (meas_ue_orientation_present) {
    j.write_str("measUeOrientation", "true");
  }
  j.end_obj();
}

// UE-TxTEG-RequestUL-TDOA-Config-r17 ::= CHOICE
void ue_tx_teg_request_ul_tdoa_cfg_r17_c::set(types::options e)
{
  type_ = e;
}
void ue_tx_teg_request_ul_tdoa_cfg_r17_c::set_one_shot_r17()
{
  set(types::one_shot_r17);
}
ue_tx_teg_request_ul_tdoa_cfg_r17_c::periodic_report_r17_e_&
ue_tx_teg_request_ul_tdoa_cfg_r17_c::set_periodic_report_r17()
{
  set(types::periodic_report_r17);
  return c;
}
void ue_tx_teg_request_ul_tdoa_cfg_r17_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::one_shot_r17:
      break;
    case types::periodic_report_r17:
      j.write_str("periodicReporting-r17", c.to_string());
      break;
    default:
      log_invalid_choice_id(type_, "ue_tx_teg_request_ul_tdoa_cfg_r17_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_tx_teg_request_ul_tdoa_cfg_r17_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::one_shot_r17:
      break;
    case types::periodic_report_r17:
      HANDLE_CODE(c.pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_tx_teg_request_ul_tdoa_cfg_r17_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_tx_teg_request_ul_tdoa_cfg_r17_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::one_shot_r17:
      break;
    case types::periodic_report_r17:
      HANDLE_CODE(c.unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_tx_teg_request_ul_tdoa_cfg_r17_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_tx_teg_request_ul_tdoa_cfg_r17_c::periodic_report_r17_opts::to_string() const
{
  static const char* names[] = {"ms160", "ms320", "ms1280", "ms2560", "ms61440", "ms81920", "ms368640", "ms737280"};
  return convert_enum_idx(names, 8, value, "ue_tx_teg_request_ul_tdoa_cfg_r17_c::periodic_report_r17_e_");
}
uint32_t ue_tx_teg_request_ul_tdoa_cfg_r17_c::periodic_report_r17_opts::to_number() const
{
  static const uint32_t numbers[] = {160, 320, 1280, 2560, 61440, 81920, 368640, 737280};
  return map_enum_number(numbers, 8, value, "ue_tx_teg_request_ul_tdoa_cfg_r17_c::periodic_report_r17_e_");
}

const char* ue_tx_teg_request_ul_tdoa_cfg_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"oneShot-r17", "periodicReporting-r17"};
  return convert_enum_idx(names, 2, value, "ue_tx_teg_request_ul_tdoa_cfg_r17_c::types");
}
uint8_t ue_tx_teg_request_ul_tdoa_cfg_r17_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "ue_tx_teg_request_ul_tdoa_cfg_r17_c::types");
}

// UL-DelayValueConfig-r16 ::= SEQUENCE
SRSASN_CODE ul_delay_value_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, delay_drb_list_r16, 1, 29, integer_packer<uint8_t>(1, 32)));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_delay_value_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(delay_drb_list_r16, bref, 1, 29, integer_packer<uint8_t>(1, 32)));

  return SRSASN_SUCCESS;
}
void ul_delay_value_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("delay-DRBlist-r16");
  for (const auto& e1 : delay_drb_list_r16) {
    j.write_int(e1);
  }
  j.end_array();
  j.end_obj();
}

// UL-ExcessDelayConfig-r17 ::= SEQUENCE
SRSASN_CODE ul_excess_delay_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, excess_delay_drb_list_r17, 1, 29));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_excess_delay_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(excess_delay_drb_list_r17, bref, 1, 29));

  return SRSASN_SUCCESS;
}
void ul_excess_delay_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("excessDelay-DRBlist-r17");
  for (const auto& e1 : excess_delay_drb_list_r17) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// UL-GapFR2-Config-r17 ::= SEQUENCE
SRSASN_CODE ul_gap_fr2_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ref_fr2_serv_cell_async_ca_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, gap_offset_r17, (uint8_t)0u, (uint8_t)159u));
  HANDLE_CODE(ugl_r17.pack(bref));
  HANDLE_CODE(ugrp_r17.pack(bref));
  if (ref_fr2_serv_cell_async_ca_r17_present) {
    HANDLE_CODE(pack_integer(bref, ref_fr2_serv_cell_async_ca_r17, (uint8_t)0u, (uint8_t)31u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_gap_fr2_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ref_fr2_serv_cell_async_ca_r17_present, 1));

  HANDLE_CODE(unpack_integer(gap_offset_r17, bref, (uint8_t)0u, (uint8_t)159u));
  HANDLE_CODE(ugl_r17.unpack(bref));
  HANDLE_CODE(ugrp_r17.unpack(bref));
  if (ref_fr2_serv_cell_async_ca_r17_present) {
    HANDLE_CODE(unpack_integer(ref_fr2_serv_cell_async_ca_r17, bref, (uint8_t)0u, (uint8_t)31u));
  }

  return SRSASN_SUCCESS;
}
void ul_gap_fr2_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("gapOffset-r17", gap_offset_r17);
  j.write_str("ugl-r17", ugl_r17.to_string());
  j.write_str("ugrp-r17", ugrp_r17.to_string());
  if (ref_fr2_serv_cell_async_ca_r17_present) {
    j.write_int("refFR2-ServCellAsyncCA-r17", ref_fr2_serv_cell_async_ca_r17);
  }
  j.end_obj();
}

const char* ul_gap_fr2_cfg_r17_s::ugl_r17_opts::to_string() const
{
  static const char* names[] = {"ms0dot125", "ms0dot25", "ms0dot5", "ms1"};
  return convert_enum_idx(names, 4, value, "ul_gap_fr2_cfg_r17_s::ugl_r17_e_");
}
float ul_gap_fr2_cfg_r17_s::ugl_r17_opts::to_number() const
{
  static const float numbers[] = {0.125, 0.25, 0.5, 1.0};
  return map_enum_number(numbers, 4, value, "ul_gap_fr2_cfg_r17_s::ugl_r17_e_");
}
const char* ul_gap_fr2_cfg_r17_s::ugl_r17_opts::to_number_string() const
{
  static const char* number_strs[] = {"0.125", "0.25", "0.5", "1"};
  return convert_enum_idx(number_strs, 4, value, "ul_gap_fr2_cfg_r17_s::ugl_r17_e_");
}

const char* ul_gap_fr2_cfg_r17_s::ugrp_r17_opts::to_string() const
{
  static const char* names[] = {"ms5", "ms20", "ms40", "ms160"};
  return convert_enum_idx(names, 4, value, "ul_gap_fr2_cfg_r17_s::ugrp_r17_e_");
}
uint8_t ul_gap_fr2_cfg_r17_s::ugrp_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 20, 40, 160};
  return map_enum_number(numbers, 4, value, "ul_gap_fr2_cfg_r17_s::ugrp_r17_e_");
}

// BAP-Config-r16 ::= SEQUENCE
SRSASN_CODE bap_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(bap_address_r16_present, 1));
  HANDLE_CODE(bref.pack(default_ul_bap_routing_id_r16_present, 1));
  HANDLE_CODE(bref.pack(default_ul_bh_rlc_ch_r16_present, 1));
  HANDLE_CODE(bref.pack(flow_ctrl_feedback_type_r16_present, 1));

  if (bap_address_r16_present) {
    HANDLE_CODE(bap_address_r16.pack(bref));
  }
  if (default_ul_bap_routing_id_r16_present) {
    HANDLE_CODE(default_ul_bap_routing_id_r16.pack(bref));
  }
  if (default_ul_bh_rlc_ch_r16_present) {
    HANDLE_CODE(default_ul_bh_rlc_ch_r16.pack(bref));
  }
  if (flow_ctrl_feedback_type_r16_present) {
    HANDLE_CODE(flow_ctrl_feedback_type_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(bap_address_r16_present, 1));
  HANDLE_CODE(bref.unpack(default_ul_bap_routing_id_r16_present, 1));
  HANDLE_CODE(bref.unpack(default_ul_bh_rlc_ch_r16_present, 1));
  HANDLE_CODE(bref.unpack(flow_ctrl_feedback_type_r16_present, 1));

  if (bap_address_r16_present) {
    HANDLE_CODE(bap_address_r16.unpack(bref));
  }
  if (default_ul_bap_routing_id_r16_present) {
    HANDLE_CODE(default_ul_bap_routing_id_r16.unpack(bref));
  }
  if (default_ul_bh_rlc_ch_r16_present) {
    HANDLE_CODE(default_ul_bh_rlc_ch_r16.unpack(bref));
  }
  if (flow_ctrl_feedback_type_r16_present) {
    HANDLE_CODE(flow_ctrl_feedback_type_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void bap_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (bap_address_r16_present) {
    j.write_str("bap-Address-r16", bap_address_r16.to_string());
  }
  if (default_ul_bap_routing_id_r16_present) {
    j.write_fieldname("defaultUL-BAP-RoutingID-r16");
    default_ul_bap_routing_id_r16.to_json(j);
  }
  if (default_ul_bh_rlc_ch_r16_present) {
    j.write_str("defaultUL-BH-RLC-Channel-r16", default_ul_bh_rlc_ch_r16.to_string());
  }
  if (flow_ctrl_feedback_type_r16_present) {
    j.write_str("flowControlFeedbackType-r16", flow_ctrl_feedback_type_r16.to_string());
  }
  j.end_obj();
}

const char* bap_cfg_r16_s::flow_ctrl_feedback_type_r16_opts::to_string() const
{
  static const char* names[] = {"perBH-RLC-Channel", "perRoutingID", "both"};
  return convert_enum_idx(names, 3, value, "bap_cfg_r16_s::flow_ctrl_feedback_type_r16_e_");
}

// CGI-Info-Logging-r16 ::= SEQUENCE
SRSASN_CODE cgi_info_logging_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(tac_r16_present, 1));

  HANDLE_CODE(plmn_id_r16.pack(bref));
  HANDLE_CODE(cell_id_r16.pack(bref));
  if (tac_r16_present) {
    HANDLE_CODE(tac_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cgi_info_logging_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(tac_r16_present, 1));

  HANDLE_CODE(plmn_id_r16.unpack(bref));
  HANDLE_CODE(cell_id_r16.unpack(bref));
  if (tac_r16_present) {
    HANDLE_CODE(tac_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cgi_info_logging_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("plmn-Identity-r16");
  plmn_id_r16.to_json(j);
  j.write_str("cellIdentity-r16", cell_id_r16.to_string());
  if (tac_r16_present) {
    j.write_str("trackingAreaCode-r16", tac_r16.to_string());
  }
  j.end_obj();
}

// CLI-EventTriggerConfig-r16 ::= SEQUENCE
SRSASN_CODE cli_event_trigger_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(event_id_r16.pack(bref));
  HANDLE_CODE(report_interv_r16.pack(bref));
  HANDLE_CODE(report_amount_r16.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_report_cli_r16, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cli_event_trigger_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(event_id_r16.unpack(bref));
  HANDLE_CODE(report_interv_r16.unpack(bref));
  HANDLE_CODE(report_amount_r16.unpack(bref));
  HANDLE_CODE(unpack_integer(max_report_cli_r16, bref, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
void cli_event_trigger_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("eventId-r16");
  event_id_r16.to_json(j);
  j.write_str("reportInterval-r16", report_interv_r16.to_string());
  j.write_str("reportAmount-r16", report_amount_r16.to_string());
  j.write_int("maxReportCLI-r16", max_report_cli_r16);
  j.end_obj();
}

void cli_event_trigger_cfg_r16_s::event_id_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("eventI1-r16");
  j.start_obj();
  j.write_fieldname("i1-Threshold-r16");
  c.i1_thres_r16.to_json(j);
  j.write_bool("reportOnLeave-r16", c.report_on_leave_r16);
  j.write_int("hysteresis-r16", c.hysteresis_r16);
  j.write_str("timeToTrigger-r16", c.time_to_trigger_r16.to_string());
  j.end_obj();
  j.end_obj();
}
SRSASN_CODE cli_event_trigger_cfg_r16_s::event_id_r16_c_::pack(bit_ref& bref) const
{
  pack_enum(bref, type());
  HANDLE_CODE(c.i1_thres_r16.pack(bref));
  HANDLE_CODE(bref.pack(c.report_on_leave_r16, 1));
  HANDLE_CODE(pack_integer(bref, c.hysteresis_r16, (uint8_t)0u, (uint8_t)30u));
  HANDLE_CODE(c.time_to_trigger_r16.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cli_event_trigger_cfg_r16_s::event_id_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  unpack_enum(e, bref);
  if (e != type()) {
    log_invalid_choice_id(e, "cli_event_trigger_cfg_r16_s::event_id_r16_c_");
    return SRSASN_ERROR_DECODE_FAIL;
  }
  HANDLE_CODE(c.i1_thres_r16.unpack(bref));
  HANDLE_CODE(bref.unpack(c.report_on_leave_r16, 1));
  HANDLE_CODE(unpack_integer(c.hysteresis_r16, bref, (uint8_t)0u, (uint8_t)30u));
  HANDLE_CODE(c.time_to_trigger_r16.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* cli_event_trigger_cfg_r16_s::event_id_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"eventI1-r16"};
  return convert_enum_idx(names, 1, value, "cli_event_trigger_cfg_r16_s::event_id_r16_c_::types");
}
uint8_t cli_event_trigger_cfg_r16_s::event_id_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "cli_event_trigger_cfg_r16_s::event_id_r16_c_::types");
}

const char* cli_event_trigger_cfg_r16_s::report_amount_r16_opts::to_string() const
{
  static const char* names[] = {"r1", "r2", "r4", "r8", "r16", "r32", "r64", "infinity"};
  return convert_enum_idx(names, 8, value, "cli_event_trigger_cfg_r16_s::report_amount_r16_e_");
}
int8_t cli_event_trigger_cfg_r16_s::report_amount_r16_opts::to_number() const
{
  static const int8_t numbers[] = {1, 2, 4, 8, 16, 32, 64, -1};
  return map_enum_number(numbers, 8, value, "cli_event_trigger_cfg_r16_s::report_amount_r16_e_");
}

// CLI-PeriodicalReportConfig-r16 ::= SEQUENCE
SRSASN_CODE cli_periodical_report_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(report_interv_r16.pack(bref));
  HANDLE_CODE(report_amount_r16.pack(bref));
  HANDLE_CODE(report_quant_cli_r16.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_report_cli_r16, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cli_periodical_report_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(report_interv_r16.unpack(bref));
  HANDLE_CODE(report_amount_r16.unpack(bref));
  HANDLE_CODE(report_quant_cli_r16.unpack(bref));
  HANDLE_CODE(unpack_integer(max_report_cli_r16, bref, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
void cli_periodical_report_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("reportInterval-r16", report_interv_r16.to_string());
  j.write_str("reportAmount-r16", report_amount_r16.to_string());
  j.write_str("reportQuantityCLI-r16", report_quant_cli_r16.to_string());
  j.write_int("maxReportCLI-r16", max_report_cli_r16);
  j.end_obj();
}

const char* cli_periodical_report_cfg_r16_s::report_amount_r16_opts::to_string() const
{
  static const char* names[] = {"r1", "r2", "r4", "r8", "r16", "r32", "r64", "infinity"};
  return convert_enum_idx(names, 8, value, "cli_periodical_report_cfg_r16_s::report_amount_r16_e_");
}
int8_t cli_periodical_report_cfg_r16_s::report_amount_r16_opts::to_number() const
{
  static const int8_t numbers[] = {1, 2, 4, 8, 16, 32, 64, -1};
  return map_enum_number(numbers, 8, value, "cli_periodical_report_cfg_r16_s::report_amount_r16_e_");
}

// CLI-ResourceConfig-r16 ::= SEQUENCE
SRSASN_CODE cli_res_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(srs_res_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(rssi_res_cfg_r16_present, 1));

  if (srs_res_cfg_r16_present) {
    HANDLE_CODE(srs_res_cfg_r16.pack(bref));
  }
  if (rssi_res_cfg_r16_present) {
    HANDLE_CODE(rssi_res_cfg_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cli_res_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(srs_res_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(rssi_res_cfg_r16_present, 1));

  if (srs_res_cfg_r16_present) {
    HANDLE_CODE(srs_res_cfg_r16.unpack(bref));
  }
  if (rssi_res_cfg_r16_present) {
    HANDLE_CODE(rssi_res_cfg_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cli_res_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (srs_res_cfg_r16_present) {
    j.write_fieldname("srs-ResourceConfig-r16");
    srs_res_cfg_r16.to_json(j);
  }
  if (rssi_res_cfg_r16_present) {
    j.write_fieldname("rssi-ResourceConfig-r16");
    rssi_res_cfg_r16.to_json(j);
  }
  j.end_obj();
}

// CondTriggerConfig-r16 ::= SEQUENCE
SRSASN_CODE cond_trigger_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(cond_event_id.pack(bref));
  HANDLE_CODE(rs_type_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cond_trigger_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(cond_event_id.unpack(bref));
  HANDLE_CODE(rs_type_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void cond_trigger_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("condEventId");
  cond_event_id.to_json(j);
  j.write_str("rsType-r16", rs_type_r16.to_string());
  j.end_obj();
}

void cond_trigger_cfg_r16_s::cond_event_id_c_::destroy_()
{
  switch (type_) {
    case types::cond_event_a3:
      c.destroy<cond_event_a3_s_>();
      break;
    case types::cond_event_a5:
      c.destroy<cond_event_a5_s_>();
      break;
    case types::cond_event_a4_r17:
      c.destroy<cond_event_a4_r17_s_>();
      break;
    case types::cond_event_d1_r17:
      c.destroy<cond_event_d1_r17_s_>();
      break;
    case types::cond_event_t1_r17:
      c.destroy<cond_event_t1_r17_s_>();
      break;
    default:
      break;
  }
}
void cond_trigger_cfg_r16_s::cond_event_id_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::cond_event_a3:
      c.init<cond_event_a3_s_>();
      break;
    case types::cond_event_a5:
      c.init<cond_event_a5_s_>();
      break;
    case types::cond_event_a4_r17:
      c.init<cond_event_a4_r17_s_>();
      break;
    case types::cond_event_d1_r17:
      c.init<cond_event_d1_r17_s_>();
      break;
    case types::cond_event_t1_r17:
      c.init<cond_event_t1_r17_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cond_trigger_cfg_r16_s::cond_event_id_c_");
  }
}
cond_trigger_cfg_r16_s::cond_event_id_c_::cond_event_id_c_(const cond_trigger_cfg_r16_s::cond_event_id_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::cond_event_a3:
      c.init(other.c.get<cond_event_a3_s_>());
      break;
    case types::cond_event_a5:
      c.init(other.c.get<cond_event_a5_s_>());
      break;
    case types::cond_event_a4_r17:
      c.init(other.c.get<cond_event_a4_r17_s_>());
      break;
    case types::cond_event_d1_r17:
      c.init(other.c.get<cond_event_d1_r17_s_>());
      break;
    case types::cond_event_t1_r17:
      c.init(other.c.get<cond_event_t1_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cond_trigger_cfg_r16_s::cond_event_id_c_");
  }
}
cond_trigger_cfg_r16_s::cond_event_id_c_&
cond_trigger_cfg_r16_s::cond_event_id_c_::operator=(const cond_trigger_cfg_r16_s::cond_event_id_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::cond_event_a3:
      c.set(other.c.get<cond_event_a3_s_>());
      break;
    case types::cond_event_a5:
      c.set(other.c.get<cond_event_a5_s_>());
      break;
    case types::cond_event_a4_r17:
      c.set(other.c.get<cond_event_a4_r17_s_>());
      break;
    case types::cond_event_d1_r17:
      c.set(other.c.get<cond_event_d1_r17_s_>());
      break;
    case types::cond_event_t1_r17:
      c.set(other.c.get<cond_event_t1_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cond_trigger_cfg_r16_s::cond_event_id_c_");
  }

  return *this;
}
cond_trigger_cfg_r16_s::cond_event_id_c_::cond_event_a3_s_&
cond_trigger_cfg_r16_s::cond_event_id_c_::set_cond_event_a3()
{
  set(types::cond_event_a3);
  return c.get<cond_event_a3_s_>();
}
cond_trigger_cfg_r16_s::cond_event_id_c_::cond_event_a5_s_&
cond_trigger_cfg_r16_s::cond_event_id_c_::set_cond_event_a5()
{
  set(types::cond_event_a5);
  return c.get<cond_event_a5_s_>();
}
cond_trigger_cfg_r16_s::cond_event_id_c_::cond_event_a4_r17_s_&
cond_trigger_cfg_r16_s::cond_event_id_c_::set_cond_event_a4_r17()
{
  set(types::cond_event_a4_r17);
  return c.get<cond_event_a4_r17_s_>();
}
cond_trigger_cfg_r16_s::cond_event_id_c_::cond_event_d1_r17_s_&
cond_trigger_cfg_r16_s::cond_event_id_c_::set_cond_event_d1_r17()
{
  set(types::cond_event_d1_r17);
  return c.get<cond_event_d1_r17_s_>();
}
cond_trigger_cfg_r16_s::cond_event_id_c_::cond_event_t1_r17_s_&
cond_trigger_cfg_r16_s::cond_event_id_c_::set_cond_event_t1_r17()
{
  set(types::cond_event_t1_r17);
  return c.get<cond_event_t1_r17_s_>();
}
void cond_trigger_cfg_r16_s::cond_event_id_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cond_event_a3:
      j.write_fieldname("condEventA3");
      j.start_obj();
      j.write_fieldname("a3-Offset");
      c.get<cond_event_a3_s_>().a3_offset.to_json(j);
      j.write_int("hysteresis", c.get<cond_event_a3_s_>().hysteresis);
      j.write_str("timeToTrigger", c.get<cond_event_a3_s_>().time_to_trigger.to_string());
      j.end_obj();
      break;
    case types::cond_event_a5:
      j.write_fieldname("condEventA5");
      j.start_obj();
      j.write_fieldname("a5-Threshold1");
      c.get<cond_event_a5_s_>().a5_thres1.to_json(j);
      j.write_fieldname("a5-Threshold2");
      c.get<cond_event_a5_s_>().a5_thres2.to_json(j);
      j.write_int("hysteresis", c.get<cond_event_a5_s_>().hysteresis);
      j.write_str("timeToTrigger", c.get<cond_event_a5_s_>().time_to_trigger.to_string());
      j.end_obj();
      break;
    case types::cond_event_a4_r17:
      j.write_fieldname("condEventA4-r17");
      j.start_obj();
      j.write_fieldname("a4-Threshold-r17");
      c.get<cond_event_a4_r17_s_>().a4_thres_r17.to_json(j);
      j.write_int("hysteresis-r17", c.get<cond_event_a4_r17_s_>().hysteresis_r17);
      j.write_str("timeToTrigger-r17", c.get<cond_event_a4_r17_s_>().time_to_trigger_r17.to_string());
      j.end_obj();
      break;
    case types::cond_event_d1_r17:
      j.write_fieldname("condEventD1-r17");
      j.start_obj();
      j.write_int("distanceThreshFromReference1-r17", c.get<cond_event_d1_r17_s_>().distance_thresh_from_ref1_r17);
      j.write_int("distanceThreshFromReference2-r17", c.get<cond_event_d1_r17_s_>().distance_thresh_from_ref2_r17);
      j.write_str("referenceLocation1-r17", c.get<cond_event_d1_r17_s_>().ref_location1_r17.to_string());
      j.write_str("referenceLocation2-r17", c.get<cond_event_d1_r17_s_>().ref_location2_r17.to_string());
      j.write_int("hysteresisLocation-r17", c.get<cond_event_d1_r17_s_>().hysteresis_location_r17);
      j.write_str("timeToTrigger-r17", c.get<cond_event_d1_r17_s_>().time_to_trigger_r17.to_string());
      j.end_obj();
      break;
    case types::cond_event_t1_r17:
      j.write_fieldname("condEventT1-r17");
      j.start_obj();
      j.write_int("t1-Threshold-r17", c.get<cond_event_t1_r17_s_>().t1_thres_r17);
      j.write_int("duration-r17", c.get<cond_event_t1_r17_s_>().dur_r17);
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "cond_trigger_cfg_r16_s::cond_event_id_c_");
  }
  j.end_obj();
}
SRSASN_CODE cond_trigger_cfg_r16_s::cond_event_id_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cond_event_a3:
      HANDLE_CODE(c.get<cond_event_a3_s_>().a3_offset.pack(bref));
      HANDLE_CODE(pack_integer(bref, c.get<cond_event_a3_s_>().hysteresis, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<cond_event_a3_s_>().time_to_trigger.pack(bref));
      break;
    case types::cond_event_a5:
      HANDLE_CODE(c.get<cond_event_a5_s_>().a5_thres1.pack(bref));
      HANDLE_CODE(c.get<cond_event_a5_s_>().a5_thres2.pack(bref));
      HANDLE_CODE(pack_integer(bref, c.get<cond_event_a5_s_>().hysteresis, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<cond_event_a5_s_>().time_to_trigger.pack(bref));
      break;
    case types::cond_event_a4_r17: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<cond_event_a4_r17_s_>().a4_thres_r17.pack(bref));
      HANDLE_CODE(pack_integer(bref, c.get<cond_event_a4_r17_s_>().hysteresis_r17, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<cond_event_a4_r17_s_>().time_to_trigger_r17.pack(bref));
    } break;
    case types::cond_event_d1_r17: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(pack_integer(
          bref, c.get<cond_event_d1_r17_s_>().distance_thresh_from_ref1_r17, (uint16_t)0u, (uint16_t)65525u));
      HANDLE_CODE(pack_integer(
          bref, c.get<cond_event_d1_r17_s_>().distance_thresh_from_ref2_r17, (uint16_t)0u, (uint16_t)65525u));
      HANDLE_CODE(c.get<cond_event_d1_r17_s_>().ref_location1_r17.pack(bref));
      HANDLE_CODE(c.get<cond_event_d1_r17_s_>().ref_location2_r17.pack(bref));
      HANDLE_CODE(
          pack_integer(bref, c.get<cond_event_d1_r17_s_>().hysteresis_location_r17, (uint16_t)0u, (uint16_t)32768u));
      HANDLE_CODE(c.get<cond_event_d1_r17_s_>().time_to_trigger_r17.pack(bref));
    } break;
    case types::cond_event_t1_r17: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(
          pack_integer(bref, c.get<cond_event_t1_r17_s_>().t1_thres_r17, (uint64_t)0u, (uint64_t)549755813887u));
      HANDLE_CODE(pack_integer(bref, c.get<cond_event_t1_r17_s_>().dur_r17, (uint16_t)1u, (uint16_t)6000u));
    } break;
    default:
      log_invalid_choice_id(type_, "cond_trigger_cfg_r16_s::cond_event_id_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cond_trigger_cfg_r16_s::cond_event_id_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cond_event_a3:
      HANDLE_CODE(c.get<cond_event_a3_s_>().a3_offset.unpack(bref));
      HANDLE_CODE(unpack_integer(c.get<cond_event_a3_s_>().hysteresis, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<cond_event_a3_s_>().time_to_trigger.unpack(bref));
      break;
    case types::cond_event_a5:
      HANDLE_CODE(c.get<cond_event_a5_s_>().a5_thres1.unpack(bref));
      HANDLE_CODE(c.get<cond_event_a5_s_>().a5_thres2.unpack(bref));
      HANDLE_CODE(unpack_integer(c.get<cond_event_a5_s_>().hysteresis, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<cond_event_a5_s_>().time_to_trigger.unpack(bref));
      break;
    case types::cond_event_a4_r17: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<cond_event_a4_r17_s_>().a4_thres_r17.unpack(bref));
      HANDLE_CODE(unpack_integer(c.get<cond_event_a4_r17_s_>().hysteresis_r17, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<cond_event_a4_r17_s_>().time_to_trigger_r17.unpack(bref));
    } break;
    case types::cond_event_d1_r17: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(unpack_integer(
          c.get<cond_event_d1_r17_s_>().distance_thresh_from_ref1_r17, bref, (uint16_t)0u, (uint16_t)65525u));
      HANDLE_CODE(unpack_integer(
          c.get<cond_event_d1_r17_s_>().distance_thresh_from_ref2_r17, bref, (uint16_t)0u, (uint16_t)65525u));
      HANDLE_CODE(c.get<cond_event_d1_r17_s_>().ref_location1_r17.unpack(bref));
      HANDLE_CODE(c.get<cond_event_d1_r17_s_>().ref_location2_r17.unpack(bref));
      HANDLE_CODE(
          unpack_integer(c.get<cond_event_d1_r17_s_>().hysteresis_location_r17, bref, (uint16_t)0u, (uint16_t)32768u));
      HANDLE_CODE(c.get<cond_event_d1_r17_s_>().time_to_trigger_r17.unpack(bref));
    } break;
    case types::cond_event_t1_r17: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(
          unpack_integer(c.get<cond_event_t1_r17_s_>().t1_thres_r17, bref, (uint64_t)0u, (uint64_t)549755813887u));
      HANDLE_CODE(unpack_integer(c.get<cond_event_t1_r17_s_>().dur_r17, bref, (uint16_t)1u, (uint16_t)6000u));
    } break;
    default:
      log_invalid_choice_id(type_, "cond_trigger_cfg_r16_s::cond_event_id_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cond_trigger_cfg_r16_s::cond_event_id_c_::types_opts::to_string() const
{
  static const char* names[] = {"condEventA3", "condEventA5", "condEventA4-r17", "condEventD1-r17", "condEventT1-r17"};
  return convert_enum_idx(names, 5, value, "cond_trigger_cfg_r16_s::cond_event_id_c_::types");
}

// ConditionalReconfiguration-r16 ::= SEQUENCE
SRSASN_CODE conditional_recfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(attempt_cond_recfg_r16_present, 1));
  HANDLE_CODE(bref.pack(cond_recfg_to_rem_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(cond_recfg_to_add_mod_list_r16.size() > 0, 1));

  if (cond_recfg_to_rem_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cond_recfg_to_rem_list_r16, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (cond_recfg_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cond_recfg_to_add_mod_list_r16, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE conditional_recfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(attempt_cond_recfg_r16_present, 1));
  bool cond_recfg_to_rem_list_r16_present;
  HANDLE_CODE(bref.unpack(cond_recfg_to_rem_list_r16_present, 1));
  bool cond_recfg_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(cond_recfg_to_add_mod_list_r16_present, 1));

  if (cond_recfg_to_rem_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cond_recfg_to_rem_list_r16, bref, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (cond_recfg_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cond_recfg_to_add_mod_list_r16, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void conditional_recfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (attempt_cond_recfg_r16_present) {
    j.write_str("attemptCondReconfig-r16", "true");
  }
  if (cond_recfg_to_rem_list_r16.size() > 0) {
    j.start_array("condReconfigToRemoveList-r16");
    for (const auto& e1 : cond_recfg_to_rem_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (cond_recfg_to_add_mod_list_r16.size() > 0) {
    j.start_array("condReconfigToAddModList-r16");
    for (const auto& e1 : cond_recfg_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// EUTRA-Cell ::= SEQUENCE
SRSASN_CODE eutra_cell_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, cell_idx_eutra, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(pack_integer(bref, pci, (uint16_t)0u, (uint16_t)503u));
  HANDLE_CODE(cell_individual_offset.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_cell_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(cell_idx_eutra, bref, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(unpack_integer(pci, bref, (uint16_t)0u, (uint16_t)503u));
  HANDLE_CODE(cell_individual_offset.unpack(bref));

  return SRSASN_SUCCESS;
}
void eutra_cell_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("cellIndexEUTRA", cell_idx_eutra);
  j.write_int("physCellId", pci);
  j.write_str("cellIndividualOffset", cell_individual_offset.to_string());
  j.end_obj();
}

// EUTRA-ExcludedCell ::= SEQUENCE
SRSASN_CODE eutra_excluded_cell_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, cell_idx_eutra, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(pci_range.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_excluded_cell_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(cell_idx_eutra, bref, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(pci_range.unpack(bref));

  return SRSASN_SUCCESS;
}
void eutra_excluded_cell_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("cellIndexEUTRA", cell_idx_eutra);
  j.write_fieldname("physCellIdRange");
  pci_range.to_json(j);
  j.end_obj();
}

// EventTriggerConfig ::= SEQUENCE
SRSASN_CODE event_trigger_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(report_quant_rs_idxes_present, 1));
  HANDLE_CODE(bref.pack(max_nrof_rs_idxes_to_report_present, 1));
  HANDLE_CODE(bref.pack(report_add_neigh_meas_present, 1));

  HANDLE_CODE(event_id.pack(bref));
  HANDLE_CODE(rs_type.pack(bref));
  HANDLE_CODE(report_interv.pack(bref));
  HANDLE_CODE(report_amount.pack(bref));
  HANDLE_CODE(report_quant_cell.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_report_cells, (uint8_t)1u, (uint8_t)8u));
  if (report_quant_rs_idxes_present) {
    HANDLE_CODE(report_quant_rs_idxes.pack(bref));
  }
  if (max_nrof_rs_idxes_to_report_present) {
    HANDLE_CODE(pack_integer(bref, max_nrof_rs_idxes_to_report, (uint8_t)1u, (uint8_t)32u));
  }
  HANDLE_CODE(bref.pack(include_beam_meass, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= meas_rssi_report_cfg_r16.is_present();
    group_flags[0] |= use_t312_r16_present;
    group_flags[0] |= include_common_location_info_r16_present;
    group_flags[0] |= include_bt_meas_r16.is_present();
    group_flags[0] |= include_wlan_meas_r16.is_present();
    group_flags[0] |= include_sensor_meas_r16.is_present();
    group_flags[1] |= coarse_location_request_r17_present;
    group_flags[1] |= report_quant_relay_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(meas_rssi_report_cfg_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(use_t312_r16_present, 1));
      HANDLE_CODE(bref.pack(include_common_location_info_r16_present, 1));
      HANDLE_CODE(bref.pack(include_bt_meas_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(include_wlan_meas_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(include_sensor_meas_r16.is_present(), 1));
      if (meas_rssi_report_cfg_r16.is_present()) {
        HANDLE_CODE(meas_rssi_report_cfg_r16->pack(bref));
      }
      if (use_t312_r16_present) {
        HANDLE_CODE(bref.pack(use_t312_r16, 1));
      }
      if (include_bt_meas_r16.is_present()) {
        HANDLE_CODE(include_bt_meas_r16->pack(bref));
      }
      if (include_wlan_meas_r16.is_present()) {
        HANDLE_CODE(include_wlan_meas_r16->pack(bref));
      }
      if (include_sensor_meas_r16.is_present()) {
        HANDLE_CODE(include_sensor_meas_r16->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(coarse_location_request_r17_present, 1));
      HANDLE_CODE(bref.pack(report_quant_relay_r17.is_present(), 1));
      if (report_quant_relay_r17.is_present()) {
        HANDLE_CODE(report_quant_relay_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE event_trigger_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(report_quant_rs_idxes_present, 1));
  HANDLE_CODE(bref.unpack(max_nrof_rs_idxes_to_report_present, 1));
  HANDLE_CODE(bref.unpack(report_add_neigh_meas_present, 1));

  HANDLE_CODE(event_id.unpack(bref));
  HANDLE_CODE(rs_type.unpack(bref));
  HANDLE_CODE(report_interv.unpack(bref));
  HANDLE_CODE(report_amount.unpack(bref));
  HANDLE_CODE(report_quant_cell.unpack(bref));
  HANDLE_CODE(unpack_integer(max_report_cells, bref, (uint8_t)1u, (uint8_t)8u));
  if (report_quant_rs_idxes_present) {
    HANDLE_CODE(report_quant_rs_idxes.unpack(bref));
  }
  if (max_nrof_rs_idxes_to_report_present) {
    HANDLE_CODE(unpack_integer(max_nrof_rs_idxes_to_report, bref, (uint8_t)1u, (uint8_t)32u));
  }
  HANDLE_CODE(bref.unpack(include_beam_meass, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(meas_rssi_report_cfg_r16, bref);
      HANDLE_CODE(bref.unpack(use_t312_r16_present, 1));
      HANDLE_CODE(bref.unpack(include_common_location_info_r16_present, 1));
      unpack_presence_flag(include_bt_meas_r16, bref);
      unpack_presence_flag(include_wlan_meas_r16, bref);
      unpack_presence_flag(include_sensor_meas_r16, bref);
      if (meas_rssi_report_cfg_r16.is_present()) {
        HANDLE_CODE(meas_rssi_report_cfg_r16->unpack(bref));
      }
      if (use_t312_r16_present) {
        HANDLE_CODE(bref.unpack(use_t312_r16, 1));
      }
      if (include_bt_meas_r16.is_present()) {
        HANDLE_CODE(include_bt_meas_r16->unpack(bref));
      }
      if (include_wlan_meas_r16.is_present()) {
        HANDLE_CODE(include_wlan_meas_r16->unpack(bref));
      }
      if (include_sensor_meas_r16.is_present()) {
        HANDLE_CODE(include_sensor_meas_r16->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(coarse_location_request_r17_present, 1));
      unpack_presence_flag(report_quant_relay_r17, bref);
      if (report_quant_relay_r17.is_present()) {
        HANDLE_CODE(report_quant_relay_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void event_trigger_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("eventId");
  event_id.to_json(j);
  j.write_str("rsType", rs_type.to_string());
  j.write_str("reportInterval", report_interv.to_string());
  j.write_str("reportAmount", report_amount.to_string());
  j.write_fieldname("reportQuantityCell");
  report_quant_cell.to_json(j);
  j.write_int("maxReportCells", max_report_cells);
  if (report_quant_rs_idxes_present) {
    j.write_fieldname("reportQuantityRS-Indexes");
    report_quant_rs_idxes.to_json(j);
  }
  if (max_nrof_rs_idxes_to_report_present) {
    j.write_int("maxNrofRS-IndexesToReport", max_nrof_rs_idxes_to_report);
  }
  j.write_bool("includeBeamMeasurements", include_beam_meass);
  if (report_add_neigh_meas_present) {
    j.write_str("reportAddNeighMeas", "setup");
  }
  if (ext) {
    if (meas_rssi_report_cfg_r16.is_present()) {
      j.write_fieldname("measRSSI-ReportConfig-r16");
      meas_rssi_report_cfg_r16->to_json(j);
    }
    if (use_t312_r16_present) {
      j.write_bool("useT312-r16", use_t312_r16);
    }
    if (include_common_location_info_r16_present) {
      j.write_str("includeCommonLocationInfo-r16", "true");
    }
    if (include_bt_meas_r16.is_present()) {
      j.write_fieldname("includeBT-Meas-r16");
      include_bt_meas_r16->to_json(j);
    }
    if (include_wlan_meas_r16.is_present()) {
      j.write_fieldname("includeWLAN-Meas-r16");
      include_wlan_meas_r16->to_json(j);
    }
    if (include_sensor_meas_r16.is_present()) {
      j.write_fieldname("includeSensor-Meas-r16");
      include_sensor_meas_r16->to_json(j);
    }
    if (coarse_location_request_r17_present) {
      j.write_str("coarseLocationRequest-r17", "true");
    }
    if (report_quant_relay_r17.is_present()) {
      j.write_fieldname("reportQuantityRelay-r17");
      report_quant_relay_r17->to_json(j);
    }
  }
  j.end_obj();
}

void event_trigger_cfg_s::event_id_c_::destroy_()
{
  switch (type_) {
    case types::event_a1:
      c.destroy<event_a1_s_>();
      break;
    case types::event_a2:
      c.destroy<event_a2_s_>();
      break;
    case types::event_a3:
      c.destroy<event_a3_s_>();
      break;
    case types::event_a4:
      c.destroy<event_a4_s_>();
      break;
    case types::event_a5:
      c.destroy<event_a5_s_>();
      break;
    case types::event_a6:
      c.destroy<event_a6_s_>();
      break;
    case types::event_x1_r17:
      c.destroy<event_x1_r17_s_>();
      break;
    case types::event_x2_r17:
      c.destroy<event_x2_r17_s_>();
      break;
    case types::event_d1_r17:
      c.destroy<event_d1_r17_s_>();
      break;
    default:
      break;
  }
}
void event_trigger_cfg_s::event_id_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::event_a1:
      c.init<event_a1_s_>();
      break;
    case types::event_a2:
      c.init<event_a2_s_>();
      break;
    case types::event_a3:
      c.init<event_a3_s_>();
      break;
    case types::event_a4:
      c.init<event_a4_s_>();
      break;
    case types::event_a5:
      c.init<event_a5_s_>();
      break;
    case types::event_a6:
      c.init<event_a6_s_>();
      break;
    case types::event_x1_r17:
      c.init<event_x1_r17_s_>();
      break;
    case types::event_x2_r17:
      c.init<event_x2_r17_s_>();
      break;
    case types::event_d1_r17:
      c.init<event_d1_r17_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_s::event_id_c_");
  }
}
event_trigger_cfg_s::event_id_c_::event_id_c_(const event_trigger_cfg_s::event_id_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::event_a1:
      c.init(other.c.get<event_a1_s_>());
      break;
    case types::event_a2:
      c.init(other.c.get<event_a2_s_>());
      break;
    case types::event_a3:
      c.init(other.c.get<event_a3_s_>());
      break;
    case types::event_a4:
      c.init(other.c.get<event_a4_s_>());
      break;
    case types::event_a5:
      c.init(other.c.get<event_a5_s_>());
      break;
    case types::event_a6:
      c.init(other.c.get<event_a6_s_>());
      break;
    case types::event_x1_r17:
      c.init(other.c.get<event_x1_r17_s_>());
      break;
    case types::event_x2_r17:
      c.init(other.c.get<event_x2_r17_s_>());
      break;
    case types::event_d1_r17:
      c.init(other.c.get<event_d1_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_s::event_id_c_");
  }
}
event_trigger_cfg_s::event_id_c_&
event_trigger_cfg_s::event_id_c_::operator=(const event_trigger_cfg_s::event_id_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::event_a1:
      c.set(other.c.get<event_a1_s_>());
      break;
    case types::event_a2:
      c.set(other.c.get<event_a2_s_>());
      break;
    case types::event_a3:
      c.set(other.c.get<event_a3_s_>());
      break;
    case types::event_a4:
      c.set(other.c.get<event_a4_s_>());
      break;
    case types::event_a5:
      c.set(other.c.get<event_a5_s_>());
      break;
    case types::event_a6:
      c.set(other.c.get<event_a6_s_>());
      break;
    case types::event_x1_r17:
      c.set(other.c.get<event_x1_r17_s_>());
      break;
    case types::event_x2_r17:
      c.set(other.c.get<event_x2_r17_s_>());
      break;
    case types::event_d1_r17:
      c.set(other.c.get<event_d1_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_s::event_id_c_");
  }

  return *this;
}
event_trigger_cfg_s::event_id_c_::event_a1_s_& event_trigger_cfg_s::event_id_c_::set_event_a1()
{
  set(types::event_a1);
  return c.get<event_a1_s_>();
}
event_trigger_cfg_s::event_id_c_::event_a2_s_& event_trigger_cfg_s::event_id_c_::set_event_a2()
{
  set(types::event_a2);
  return c.get<event_a2_s_>();
}
event_trigger_cfg_s::event_id_c_::event_a3_s_& event_trigger_cfg_s::event_id_c_::set_event_a3()
{
  set(types::event_a3);
  return c.get<event_a3_s_>();
}
event_trigger_cfg_s::event_id_c_::event_a4_s_& event_trigger_cfg_s::event_id_c_::set_event_a4()
{
  set(types::event_a4);
  return c.get<event_a4_s_>();
}
event_trigger_cfg_s::event_id_c_::event_a5_s_& event_trigger_cfg_s::event_id_c_::set_event_a5()
{
  set(types::event_a5);
  return c.get<event_a5_s_>();
}
event_trigger_cfg_s::event_id_c_::event_a6_s_& event_trigger_cfg_s::event_id_c_::set_event_a6()
{
  set(types::event_a6);
  return c.get<event_a6_s_>();
}
event_trigger_cfg_s::event_id_c_::event_x1_r17_s_& event_trigger_cfg_s::event_id_c_::set_event_x1_r17()
{
  set(types::event_x1_r17);
  return c.get<event_x1_r17_s_>();
}
event_trigger_cfg_s::event_id_c_::event_x2_r17_s_& event_trigger_cfg_s::event_id_c_::set_event_x2_r17()
{
  set(types::event_x2_r17);
  return c.get<event_x2_r17_s_>();
}
event_trigger_cfg_s::event_id_c_::event_d1_r17_s_& event_trigger_cfg_s::event_id_c_::set_event_d1_r17()
{
  set(types::event_d1_r17);
  return c.get<event_d1_r17_s_>();
}
void event_trigger_cfg_s::event_id_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::event_a1:
      j.write_fieldname("eventA1");
      j.start_obj();
      j.write_fieldname("a1-Threshold");
      c.get<event_a1_s_>().a1_thres.to_json(j);
      j.write_bool("reportOnLeave", c.get<event_a1_s_>().report_on_leave);
      j.write_int("hysteresis", c.get<event_a1_s_>().hysteresis);
      j.write_str("timeToTrigger", c.get<event_a1_s_>().time_to_trigger.to_string());
      j.end_obj();
      break;
    case types::event_a2:
      j.write_fieldname("eventA2");
      j.start_obj();
      j.write_fieldname("a2-Threshold");
      c.get<event_a2_s_>().a2_thres.to_json(j);
      j.write_bool("reportOnLeave", c.get<event_a2_s_>().report_on_leave);
      j.write_int("hysteresis", c.get<event_a2_s_>().hysteresis);
      j.write_str("timeToTrigger", c.get<event_a2_s_>().time_to_trigger.to_string());
      j.end_obj();
      break;
    case types::event_a3:
      j.write_fieldname("eventA3");
      j.start_obj();
      j.write_fieldname("a3-Offset");
      c.get<event_a3_s_>().a3_offset.to_json(j);
      j.write_bool("reportOnLeave", c.get<event_a3_s_>().report_on_leave);
      j.write_int("hysteresis", c.get<event_a3_s_>().hysteresis);
      j.write_str("timeToTrigger", c.get<event_a3_s_>().time_to_trigger.to_string());
      j.write_bool("useAllowedCellList", c.get<event_a3_s_>().use_allowed_cell_list);
      j.end_obj();
      break;
    case types::event_a4:
      j.write_fieldname("eventA4");
      j.start_obj();
      j.write_fieldname("a4-Threshold");
      c.get<event_a4_s_>().a4_thres.to_json(j);
      j.write_bool("reportOnLeave", c.get<event_a4_s_>().report_on_leave);
      j.write_int("hysteresis", c.get<event_a4_s_>().hysteresis);
      j.write_str("timeToTrigger", c.get<event_a4_s_>().time_to_trigger.to_string());
      j.write_bool("useAllowedCellList", c.get<event_a4_s_>().use_allowed_cell_list);
      j.end_obj();
      break;
    case types::event_a5:
      j.write_fieldname("eventA5");
      j.start_obj();
      j.write_fieldname("a5-Threshold1");
      c.get<event_a5_s_>().a5_thres1.to_json(j);
      j.write_fieldname("a5-Threshold2");
      c.get<event_a5_s_>().a5_thres2.to_json(j);
      j.write_bool("reportOnLeave", c.get<event_a5_s_>().report_on_leave);
      j.write_int("hysteresis", c.get<event_a5_s_>().hysteresis);
      j.write_str("timeToTrigger", c.get<event_a5_s_>().time_to_trigger.to_string());
      j.write_bool("useAllowedCellList", c.get<event_a5_s_>().use_allowed_cell_list);
      j.end_obj();
      break;
    case types::event_a6:
      j.write_fieldname("eventA6");
      j.start_obj();
      j.write_fieldname("a6-Offset");
      c.get<event_a6_s_>().a6_offset.to_json(j);
      j.write_bool("reportOnLeave", c.get<event_a6_s_>().report_on_leave);
      j.write_int("hysteresis", c.get<event_a6_s_>().hysteresis);
      j.write_str("timeToTrigger", c.get<event_a6_s_>().time_to_trigger.to_string());
      j.write_bool("useAllowedCellList", c.get<event_a6_s_>().use_allowed_cell_list);
      j.end_obj();
      break;
    case types::event_x1_r17:
      j.write_fieldname("eventX1-r17");
      j.start_obj();
      j.write_fieldname("x1-Threshold1-Relay-r17");
      c.get<event_x1_r17_s_>().x1_thres1_relay_r17.to_json(j);
      j.write_fieldname("x1-Threshold2-r17");
      c.get<event_x1_r17_s_>().x1_thres2_r17.to_json(j);
      j.write_bool("reportOnLeave-r17", c.get<event_x1_r17_s_>().report_on_leave_r17);
      j.write_int("hysteresis-r17", c.get<event_x1_r17_s_>().hysteresis_r17);
      j.write_str("timeToTrigger-r17", c.get<event_x1_r17_s_>().time_to_trigger_r17.to_string());
      j.write_bool("useAllowedCellList-r17", c.get<event_x1_r17_s_>().use_allowed_cell_list_r17);
      j.end_obj();
      break;
    case types::event_x2_r17:
      j.write_fieldname("eventX2-r17");
      j.start_obj();
      j.write_fieldname("x2-Threshold-Relay-r17");
      c.get<event_x2_r17_s_>().x2_thres_relay_r17.to_json(j);
      j.write_bool("reportOnLeave-r17", c.get<event_x2_r17_s_>().report_on_leave_r17);
      j.write_int("hysteresis-r17", c.get<event_x2_r17_s_>().hysteresis_r17);
      j.write_str("timeToTrigger-r17", c.get<event_x2_r17_s_>().time_to_trigger_r17.to_string());
      j.end_obj();
      break;
    case types::event_d1_r17:
      j.write_fieldname("eventD1-r17");
      j.start_obj();
      j.write_int("distanceThreshFromReference1-r17", c.get<event_d1_r17_s_>().distance_thresh_from_ref1_r17);
      j.write_int("distanceThreshFromReference2-r17", c.get<event_d1_r17_s_>().distance_thresh_from_ref2_r17);
      j.write_str("referenceLocation1-r17", c.get<event_d1_r17_s_>().ref_location1_r17.to_string());
      j.write_str("referenceLocation2-r17", c.get<event_d1_r17_s_>().ref_location2_r17.to_string());
      j.write_bool("reportOnLeave-r17", c.get<event_d1_r17_s_>().report_on_leave_r17);
      j.write_int("hysteresisLocation-r17", c.get<event_d1_r17_s_>().hysteresis_location_r17);
      j.write_str("timeToTrigger-r17", c.get<event_d1_r17_s_>().time_to_trigger_r17.to_string());
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_s::event_id_c_");
  }
  j.end_obj();
}
SRSASN_CODE event_trigger_cfg_s::event_id_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::event_a1:
      HANDLE_CODE(c.get<event_a1_s_>().a1_thres.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_a1_s_>().report_on_leave, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_a1_s_>().hysteresis, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_a1_s_>().time_to_trigger.pack(bref));
      break;
    case types::event_a2:
      HANDLE_CODE(c.get<event_a2_s_>().a2_thres.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_a2_s_>().report_on_leave, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_a2_s_>().hysteresis, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_a2_s_>().time_to_trigger.pack(bref));
      break;
    case types::event_a3:
      HANDLE_CODE(c.get<event_a3_s_>().a3_offset.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_a3_s_>().report_on_leave, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_a3_s_>().hysteresis, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_a3_s_>().time_to_trigger.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_a3_s_>().use_allowed_cell_list, 1));
      break;
    case types::event_a4:
      HANDLE_CODE(c.get<event_a4_s_>().a4_thres.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_a4_s_>().report_on_leave, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_a4_s_>().hysteresis, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_a4_s_>().time_to_trigger.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_a4_s_>().use_allowed_cell_list, 1));
      break;
    case types::event_a5:
      HANDLE_CODE(c.get<event_a5_s_>().a5_thres1.pack(bref));
      HANDLE_CODE(c.get<event_a5_s_>().a5_thres2.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_a5_s_>().report_on_leave, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_a5_s_>().hysteresis, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_a5_s_>().time_to_trigger.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_a5_s_>().use_allowed_cell_list, 1));
      break;
    case types::event_a6:
      HANDLE_CODE(c.get<event_a6_s_>().a6_offset.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_a6_s_>().report_on_leave, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_a6_s_>().hysteresis, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_a6_s_>().time_to_trigger.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_a6_s_>().use_allowed_cell_list, 1));
      break;
    case types::event_x1_r17: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<event_x1_r17_s_>().x1_thres1_relay_r17.pack(bref));
      HANDLE_CODE(c.get<event_x1_r17_s_>().x1_thres2_r17.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_x1_r17_s_>().report_on_leave_r17, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_x1_r17_s_>().hysteresis_r17, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_x1_r17_s_>().time_to_trigger_r17.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_x1_r17_s_>().use_allowed_cell_list_r17, 1));
    } break;
    case types::event_x2_r17: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<event_x2_r17_s_>().x2_thres_relay_r17.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_x2_r17_s_>().report_on_leave_r17, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_x2_r17_s_>().hysteresis_r17, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_x2_r17_s_>().time_to_trigger_r17.pack(bref));
    } break;
    case types::event_d1_r17: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(
          pack_integer(bref, c.get<event_d1_r17_s_>().distance_thresh_from_ref1_r17, (uint16_t)1u, (uint16_t)65525u));
      HANDLE_CODE(
          pack_integer(bref, c.get<event_d1_r17_s_>().distance_thresh_from_ref2_r17, (uint16_t)1u, (uint16_t)65525u));
      HANDLE_CODE(c.get<event_d1_r17_s_>().ref_location1_r17.pack(bref));
      HANDLE_CODE(c.get<event_d1_r17_s_>().ref_location2_r17.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_d1_r17_s_>().report_on_leave_r17, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_d1_r17_s_>().hysteresis_location_r17, (uint16_t)0u, (uint16_t)32768u));
      HANDLE_CODE(c.get<event_d1_r17_s_>().time_to_trigger_r17.pack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_s::event_id_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE event_trigger_cfg_s::event_id_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::event_a1:
      HANDLE_CODE(c.get<event_a1_s_>().a1_thres.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_a1_s_>().report_on_leave, 1));
      HANDLE_CODE(unpack_integer(c.get<event_a1_s_>().hysteresis, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_a1_s_>().time_to_trigger.unpack(bref));
      break;
    case types::event_a2:
      HANDLE_CODE(c.get<event_a2_s_>().a2_thres.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_a2_s_>().report_on_leave, 1));
      HANDLE_CODE(unpack_integer(c.get<event_a2_s_>().hysteresis, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_a2_s_>().time_to_trigger.unpack(bref));
      break;
    case types::event_a3:
      HANDLE_CODE(c.get<event_a3_s_>().a3_offset.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_a3_s_>().report_on_leave, 1));
      HANDLE_CODE(unpack_integer(c.get<event_a3_s_>().hysteresis, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_a3_s_>().time_to_trigger.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_a3_s_>().use_allowed_cell_list, 1));
      break;
    case types::event_a4:
      HANDLE_CODE(c.get<event_a4_s_>().a4_thres.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_a4_s_>().report_on_leave, 1));
      HANDLE_CODE(unpack_integer(c.get<event_a4_s_>().hysteresis, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_a4_s_>().time_to_trigger.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_a4_s_>().use_allowed_cell_list, 1));
      break;
    case types::event_a5:
      HANDLE_CODE(c.get<event_a5_s_>().a5_thres1.unpack(bref));
      HANDLE_CODE(c.get<event_a5_s_>().a5_thres2.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_a5_s_>().report_on_leave, 1));
      HANDLE_CODE(unpack_integer(c.get<event_a5_s_>().hysteresis, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_a5_s_>().time_to_trigger.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_a5_s_>().use_allowed_cell_list, 1));
      break;
    case types::event_a6:
      HANDLE_CODE(c.get<event_a6_s_>().a6_offset.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_a6_s_>().report_on_leave, 1));
      HANDLE_CODE(unpack_integer(c.get<event_a6_s_>().hysteresis, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_a6_s_>().time_to_trigger.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_a6_s_>().use_allowed_cell_list, 1));
      break;
    case types::event_x1_r17: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<event_x1_r17_s_>().x1_thres1_relay_r17.unpack(bref));
      HANDLE_CODE(c.get<event_x1_r17_s_>().x1_thres2_r17.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_x1_r17_s_>().report_on_leave_r17, 1));
      HANDLE_CODE(unpack_integer(c.get<event_x1_r17_s_>().hysteresis_r17, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_x1_r17_s_>().time_to_trigger_r17.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_x1_r17_s_>().use_allowed_cell_list_r17, 1));
    } break;
    case types::event_x2_r17: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<event_x2_r17_s_>().x2_thres_relay_r17.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_x2_r17_s_>().report_on_leave_r17, 1));
      HANDLE_CODE(unpack_integer(c.get<event_x2_r17_s_>().hysteresis_r17, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_x2_r17_s_>().time_to_trigger_r17.unpack(bref));
    } break;
    case types::event_d1_r17: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(
          unpack_integer(c.get<event_d1_r17_s_>().distance_thresh_from_ref1_r17, bref, (uint16_t)1u, (uint16_t)65525u));
      HANDLE_CODE(
          unpack_integer(c.get<event_d1_r17_s_>().distance_thresh_from_ref2_r17, bref, (uint16_t)1u, (uint16_t)65525u));
      HANDLE_CODE(c.get<event_d1_r17_s_>().ref_location1_r17.unpack(bref));
      HANDLE_CODE(c.get<event_d1_r17_s_>().ref_location2_r17.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_d1_r17_s_>().report_on_leave_r17, 1));
      HANDLE_CODE(
          unpack_integer(c.get<event_d1_r17_s_>().hysteresis_location_r17, bref, (uint16_t)0u, (uint16_t)32768u));
      HANDLE_CODE(c.get<event_d1_r17_s_>().time_to_trigger_r17.unpack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_s::event_id_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* event_trigger_cfg_s::event_id_c_::types_opts::to_string() const
{
  static const char* names[] = {
      "eventA1", "eventA2", "eventA3", "eventA4", "eventA5", "eventA6", "eventX1-r17", "eventX2-r17", "eventD1-r17"};
  return convert_enum_idx(names, 9, value, "event_trigger_cfg_s::event_id_c_::types");
}

const char* event_trigger_cfg_s::report_amount_opts::to_string() const
{
  static const char* names[] = {"r1", "r2", "r4", "r8", "r16", "r32", "r64", "infinity"};
  return convert_enum_idx(names, 8, value, "event_trigger_cfg_s::report_amount_e_");
}
int8_t event_trigger_cfg_s::report_amount_opts::to_number() const
{
  static const int8_t numbers[] = {1, 2, 4, 8, 16, 32, 64, -1};
  return map_enum_number(numbers, 8, value, "event_trigger_cfg_s::report_amount_e_");
}

// EventTriggerConfigInterRAT ::= SEQUENCE
SRSASN_CODE event_trigger_cfg_inter_rat_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(event_id.pack(bref));
  HANDLE_CODE(rs_type.pack(bref));
  HANDLE_CODE(report_interv.pack(bref));
  HANDLE_CODE(report_amount.pack(bref));
  HANDLE_CODE(report_quant.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_report_cells, (uint8_t)1u, (uint8_t)8u));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= report_quant_utra_fdd_r16.is_present();
    group_flags[1] |= include_common_location_info_r16_present;
    group_flags[1] |= include_bt_meas_r16.is_present();
    group_flags[1] |= include_wlan_meas_r16.is_present();
    group_flags[1] |= include_sensor_meas_r16.is_present();
    group_flags[2] |= report_quant_relay_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(report_quant_utra_fdd_r16.is_present(), 1));
      if (report_quant_utra_fdd_r16.is_present()) {
        HANDLE_CODE(report_quant_utra_fdd_r16->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(include_common_location_info_r16_present, 1));
      HANDLE_CODE(bref.pack(include_bt_meas_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(include_wlan_meas_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(include_sensor_meas_r16.is_present(), 1));
      if (include_bt_meas_r16.is_present()) {
        HANDLE_CODE(include_bt_meas_r16->pack(bref));
      }
      if (include_wlan_meas_r16.is_present()) {
        HANDLE_CODE(include_wlan_meas_r16->pack(bref));
      }
      if (include_sensor_meas_r16.is_present()) {
        HANDLE_CODE(include_sensor_meas_r16->pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(report_quant_relay_r17.is_present(), 1));
      if (report_quant_relay_r17.is_present()) {
        HANDLE_CODE(report_quant_relay_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE event_trigger_cfg_inter_rat_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(event_id.unpack(bref));
  HANDLE_CODE(rs_type.unpack(bref));
  HANDLE_CODE(report_interv.unpack(bref));
  HANDLE_CODE(report_amount.unpack(bref));
  HANDLE_CODE(report_quant.unpack(bref));
  HANDLE_CODE(unpack_integer(max_report_cells, bref, (uint8_t)1u, (uint8_t)8u));

  if (ext) {
    ext_groups_unpacker_guard group_flags(3);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(report_quant_utra_fdd_r16, bref);
      if (report_quant_utra_fdd_r16.is_present()) {
        HANDLE_CODE(report_quant_utra_fdd_r16->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(include_common_location_info_r16_present, 1));
      unpack_presence_flag(include_bt_meas_r16, bref);
      unpack_presence_flag(include_wlan_meas_r16, bref);
      unpack_presence_flag(include_sensor_meas_r16, bref);
      if (include_bt_meas_r16.is_present()) {
        HANDLE_CODE(include_bt_meas_r16->unpack(bref));
      }
      if (include_wlan_meas_r16.is_present()) {
        HANDLE_CODE(include_wlan_meas_r16->unpack(bref));
      }
      if (include_sensor_meas_r16.is_present()) {
        HANDLE_CODE(include_sensor_meas_r16->unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(report_quant_relay_r17, bref);
      if (report_quant_relay_r17.is_present()) {
        HANDLE_CODE(report_quant_relay_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void event_trigger_cfg_inter_rat_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("eventId");
  event_id.to_json(j);
  j.write_str("rsType", rs_type.to_string());
  j.write_str("reportInterval", report_interv.to_string());
  j.write_str("reportAmount", report_amount.to_string());
  j.write_fieldname("reportQuantity");
  report_quant.to_json(j);
  j.write_int("maxReportCells", max_report_cells);
  if (ext) {
    if (report_quant_utra_fdd_r16.is_present()) {
      j.write_fieldname("reportQuantityUTRA-FDD-r16");
      report_quant_utra_fdd_r16->to_json(j);
    }
    if (include_common_location_info_r16_present) {
      j.write_str("includeCommonLocationInfo-r16", "true");
    }
    if (include_bt_meas_r16.is_present()) {
      j.write_fieldname("includeBT-Meas-r16");
      include_bt_meas_r16->to_json(j);
    }
    if (include_wlan_meas_r16.is_present()) {
      j.write_fieldname("includeWLAN-Meas-r16");
      include_wlan_meas_r16->to_json(j);
    }
    if (include_sensor_meas_r16.is_present()) {
      j.write_fieldname("includeSensor-Meas-r16");
      include_sensor_meas_r16->to_json(j);
    }
    if (report_quant_relay_r17.is_present()) {
      j.write_fieldname("reportQuantityRelay-r17");
      report_quant_relay_r17->to_json(j);
    }
  }
  j.end_obj();
}

void event_trigger_cfg_inter_rat_s::event_id_c_::destroy_()
{
  switch (type_) {
    case types::event_b1:
      c.destroy<event_b1_s_>();
      break;
    case types::event_b2:
      c.destroy<event_b2_s_>();
      break;
    case types::event_b1_utra_fdd_r16:
      c.destroy<event_b1_utra_fdd_r16_s_>();
      break;
    case types::event_b2_utra_fdd_r16:
      c.destroy<event_b2_utra_fdd_r16_s_>();
      break;
    case types::event_y1_relay_r17:
      c.destroy<event_y1_relay_r17_s_>();
      break;
    case types::event_y2_relay_r17:
      c.destroy<event_y2_relay_r17_s_>();
      break;
    default:
      break;
  }
}
void event_trigger_cfg_inter_rat_s::event_id_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::event_b1:
      c.init<event_b1_s_>();
      break;
    case types::event_b2:
      c.init<event_b2_s_>();
      break;
    case types::event_b1_utra_fdd_r16:
      c.init<event_b1_utra_fdd_r16_s_>();
      break;
    case types::event_b2_utra_fdd_r16:
      c.init<event_b2_utra_fdd_r16_s_>();
      break;
    case types::event_y1_relay_r17:
      c.init<event_y1_relay_r17_s_>();
      break;
    case types::event_y2_relay_r17:
      c.init<event_y2_relay_r17_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_inter_rat_s::event_id_c_");
  }
}
event_trigger_cfg_inter_rat_s::event_id_c_::event_id_c_(const event_trigger_cfg_inter_rat_s::event_id_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::event_b1:
      c.init(other.c.get<event_b1_s_>());
      break;
    case types::event_b2:
      c.init(other.c.get<event_b2_s_>());
      break;
    case types::event_b1_utra_fdd_r16:
      c.init(other.c.get<event_b1_utra_fdd_r16_s_>());
      break;
    case types::event_b2_utra_fdd_r16:
      c.init(other.c.get<event_b2_utra_fdd_r16_s_>());
      break;
    case types::event_y1_relay_r17:
      c.init(other.c.get<event_y1_relay_r17_s_>());
      break;
    case types::event_y2_relay_r17:
      c.init(other.c.get<event_y2_relay_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_inter_rat_s::event_id_c_");
  }
}
event_trigger_cfg_inter_rat_s::event_id_c_&
event_trigger_cfg_inter_rat_s::event_id_c_::operator=(const event_trigger_cfg_inter_rat_s::event_id_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::event_b1:
      c.set(other.c.get<event_b1_s_>());
      break;
    case types::event_b2:
      c.set(other.c.get<event_b2_s_>());
      break;
    case types::event_b1_utra_fdd_r16:
      c.set(other.c.get<event_b1_utra_fdd_r16_s_>());
      break;
    case types::event_b2_utra_fdd_r16:
      c.set(other.c.get<event_b2_utra_fdd_r16_s_>());
      break;
    case types::event_y1_relay_r17:
      c.set(other.c.get<event_y1_relay_r17_s_>());
      break;
    case types::event_y2_relay_r17:
      c.set(other.c.get<event_y2_relay_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_inter_rat_s::event_id_c_");
  }

  return *this;
}
event_trigger_cfg_inter_rat_s::event_id_c_::event_b1_s_& event_trigger_cfg_inter_rat_s::event_id_c_::set_event_b1()
{
  set(types::event_b1);
  return c.get<event_b1_s_>();
}
event_trigger_cfg_inter_rat_s::event_id_c_::event_b2_s_& event_trigger_cfg_inter_rat_s::event_id_c_::set_event_b2()
{
  set(types::event_b2);
  return c.get<event_b2_s_>();
}
event_trigger_cfg_inter_rat_s::event_id_c_::event_b1_utra_fdd_r16_s_&
event_trigger_cfg_inter_rat_s::event_id_c_::set_event_b1_utra_fdd_r16()
{
  set(types::event_b1_utra_fdd_r16);
  return c.get<event_b1_utra_fdd_r16_s_>();
}
event_trigger_cfg_inter_rat_s::event_id_c_::event_b2_utra_fdd_r16_s_&
event_trigger_cfg_inter_rat_s::event_id_c_::set_event_b2_utra_fdd_r16()
{
  set(types::event_b2_utra_fdd_r16);
  return c.get<event_b2_utra_fdd_r16_s_>();
}
event_trigger_cfg_inter_rat_s::event_id_c_::event_y1_relay_r17_s_&
event_trigger_cfg_inter_rat_s::event_id_c_::set_event_y1_relay_r17()
{
  set(types::event_y1_relay_r17);
  return c.get<event_y1_relay_r17_s_>();
}
event_trigger_cfg_inter_rat_s::event_id_c_::event_y2_relay_r17_s_&
event_trigger_cfg_inter_rat_s::event_id_c_::set_event_y2_relay_r17()
{
  set(types::event_y2_relay_r17);
  return c.get<event_y2_relay_r17_s_>();
}
void event_trigger_cfg_inter_rat_s::event_id_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::event_b1:
      j.write_fieldname("eventB1");
      j.start_obj();
      j.write_fieldname("b1-ThresholdEUTRA");
      c.get<event_b1_s_>().b1_thres_eutra.to_json(j);
      j.write_bool("reportOnLeave", c.get<event_b1_s_>().report_on_leave);
      j.write_int("hysteresis", c.get<event_b1_s_>().hysteresis);
      j.write_str("timeToTrigger", c.get<event_b1_s_>().time_to_trigger.to_string());
      j.end_obj();
      break;
    case types::event_b2:
      j.write_fieldname("eventB2");
      j.start_obj();
      j.write_fieldname("b2-Threshold1");
      c.get<event_b2_s_>().b2_thres1.to_json(j);
      j.write_fieldname("b2-Threshold2EUTRA");
      c.get<event_b2_s_>().b2_thres2_eutra.to_json(j);
      j.write_bool("reportOnLeave", c.get<event_b2_s_>().report_on_leave);
      j.write_int("hysteresis", c.get<event_b2_s_>().hysteresis);
      j.write_str("timeToTrigger", c.get<event_b2_s_>().time_to_trigger.to_string());
      j.end_obj();
      break;
    case types::event_b1_utra_fdd_r16:
      j.write_fieldname("eventB1-UTRA-FDD-r16");
      j.start_obj();
      j.write_fieldname("b1-ThresholdUTRA-FDD-r16");
      c.get<event_b1_utra_fdd_r16_s_>().b1_thres_utra_fdd_r16.to_json(j);
      j.write_bool("reportOnLeave-r16", c.get<event_b1_utra_fdd_r16_s_>().report_on_leave_r16);
      j.write_int("hysteresis-r16", c.get<event_b1_utra_fdd_r16_s_>().hysteresis_r16);
      j.write_str("timeToTrigger-r16", c.get<event_b1_utra_fdd_r16_s_>().time_to_trigger_r16.to_string());
      j.end_obj();
      break;
    case types::event_b2_utra_fdd_r16:
      j.write_fieldname("eventB2-UTRA-FDD-r16");
      j.start_obj();
      j.write_fieldname("b2-Threshold1-r16");
      c.get<event_b2_utra_fdd_r16_s_>().b2_thres1_r16.to_json(j);
      j.write_fieldname("b2-Threshold2UTRA-FDD-r16");
      c.get<event_b2_utra_fdd_r16_s_>().b2_thres2_utra_fdd_r16.to_json(j);
      j.write_bool("reportOnLeave-r16", c.get<event_b2_utra_fdd_r16_s_>().report_on_leave_r16);
      j.write_int("hysteresis-r16", c.get<event_b2_utra_fdd_r16_s_>().hysteresis_r16);
      j.write_str("timeToTrigger-r16", c.get<event_b2_utra_fdd_r16_s_>().time_to_trigger_r16.to_string());
      j.end_obj();
      break;
    case types::event_y1_relay_r17:
      j.write_fieldname("eventY1-Relay-r17");
      j.start_obj();
      j.write_fieldname("y1-Threshold1-r17");
      c.get<event_y1_relay_r17_s_>().y1_thres1_r17.to_json(j);
      j.write_fieldname("y1-Threshold2-Relay-r17");
      c.get<event_y1_relay_r17_s_>().y1_thres2_relay_r17.to_json(j);
      j.write_bool("reportOnLeave-r17", c.get<event_y1_relay_r17_s_>().report_on_leave_r17);
      j.write_int("hysteresis-r17", c.get<event_y1_relay_r17_s_>().hysteresis_r17);
      j.write_str("timeToTrigger-r17", c.get<event_y1_relay_r17_s_>().time_to_trigger_r17.to_string());
      j.end_obj();
      break;
    case types::event_y2_relay_r17:
      j.write_fieldname("eventY2-Relay-r17");
      j.start_obj();
      j.write_fieldname("y2-Threshold-Relay-r17");
      c.get<event_y2_relay_r17_s_>().y2_thres_relay_r17.to_json(j);
      j.write_bool("reportOnLeave-r17", c.get<event_y2_relay_r17_s_>().report_on_leave_r17);
      j.write_int("hysteresis-r17", c.get<event_y2_relay_r17_s_>().hysteresis_r17);
      j.write_str("timeToTrigger-r17", c.get<event_y2_relay_r17_s_>().time_to_trigger_r17.to_string());
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_inter_rat_s::event_id_c_");
  }
  j.end_obj();
}
SRSASN_CODE event_trigger_cfg_inter_rat_s::event_id_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::event_b1:
      bref.pack(c.get<event_b1_s_>().ext, 1);
      HANDLE_CODE(c.get<event_b1_s_>().b1_thres_eutra.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_b1_s_>().report_on_leave, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_b1_s_>().hysteresis, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_b1_s_>().time_to_trigger.pack(bref));
      break;
    case types::event_b2:
      bref.pack(c.get<event_b2_s_>().ext, 1);
      HANDLE_CODE(c.get<event_b2_s_>().b2_thres1.pack(bref));
      HANDLE_CODE(c.get<event_b2_s_>().b2_thres2_eutra.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_b2_s_>().report_on_leave, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_b2_s_>().hysteresis, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_b2_s_>().time_to_trigger.pack(bref));
      break;
    case types::event_b1_utra_fdd_r16: {
      varlength_field_pack_guard varlen_scope(bref, false);
      bref.pack(c.get<event_b1_utra_fdd_r16_s_>().ext, 1);
      HANDLE_CODE(c.get<event_b1_utra_fdd_r16_s_>().b1_thres_utra_fdd_r16.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_b1_utra_fdd_r16_s_>().report_on_leave_r16, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_b1_utra_fdd_r16_s_>().hysteresis_r16, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_b1_utra_fdd_r16_s_>().time_to_trigger_r16.pack(bref));
    } break;
    case types::event_b2_utra_fdd_r16: {
      varlength_field_pack_guard varlen_scope(bref, false);
      bref.pack(c.get<event_b2_utra_fdd_r16_s_>().ext, 1);
      HANDLE_CODE(c.get<event_b2_utra_fdd_r16_s_>().b2_thres1_r16.pack(bref));
      HANDLE_CODE(c.get<event_b2_utra_fdd_r16_s_>().b2_thres2_utra_fdd_r16.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_b2_utra_fdd_r16_s_>().report_on_leave_r16, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_b2_utra_fdd_r16_s_>().hysteresis_r16, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_b2_utra_fdd_r16_s_>().time_to_trigger_r16.pack(bref));
    } break;
    case types::event_y1_relay_r17: {
      varlength_field_pack_guard varlen_scope(bref, false);
      bref.pack(c.get<event_y1_relay_r17_s_>().ext, 1);
      HANDLE_CODE(c.get<event_y1_relay_r17_s_>().y1_thres1_r17.pack(bref));
      HANDLE_CODE(c.get<event_y1_relay_r17_s_>().y1_thres2_relay_r17.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_y1_relay_r17_s_>().report_on_leave_r17, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_y1_relay_r17_s_>().hysteresis_r17, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_y1_relay_r17_s_>().time_to_trigger_r17.pack(bref));
    } break;
    case types::event_y2_relay_r17: {
      varlength_field_pack_guard varlen_scope(bref, false);
      bref.pack(c.get<event_y2_relay_r17_s_>().ext, 1);
      HANDLE_CODE(c.get<event_y2_relay_r17_s_>().y2_thres_relay_r17.pack(bref));
      HANDLE_CODE(bref.pack(c.get<event_y2_relay_r17_s_>().report_on_leave_r17, 1));
      HANDLE_CODE(pack_integer(bref, c.get<event_y2_relay_r17_s_>().hysteresis_r17, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_y2_relay_r17_s_>().time_to_trigger_r17.pack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_inter_rat_s::event_id_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE event_trigger_cfg_inter_rat_s::event_id_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::event_b1:
      bref.unpack(c.get<event_b1_s_>().ext, 1);
      HANDLE_CODE(c.get<event_b1_s_>().b1_thres_eutra.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_b1_s_>().report_on_leave, 1));
      HANDLE_CODE(unpack_integer(c.get<event_b1_s_>().hysteresis, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_b1_s_>().time_to_trigger.unpack(bref));
      break;
    case types::event_b2:
      bref.unpack(c.get<event_b2_s_>().ext, 1);
      HANDLE_CODE(c.get<event_b2_s_>().b2_thres1.unpack(bref));
      HANDLE_CODE(c.get<event_b2_s_>().b2_thres2_eutra.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_b2_s_>().report_on_leave, 1));
      HANDLE_CODE(unpack_integer(c.get<event_b2_s_>().hysteresis, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_b2_s_>().time_to_trigger.unpack(bref));
      break;
    case types::event_b1_utra_fdd_r16: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      bref.unpack(c.get<event_b1_utra_fdd_r16_s_>().ext, 1);
      HANDLE_CODE(c.get<event_b1_utra_fdd_r16_s_>().b1_thres_utra_fdd_r16.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_b1_utra_fdd_r16_s_>().report_on_leave_r16, 1));
      HANDLE_CODE(unpack_integer(c.get<event_b1_utra_fdd_r16_s_>().hysteresis_r16, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_b1_utra_fdd_r16_s_>().time_to_trigger_r16.unpack(bref));
    } break;
    case types::event_b2_utra_fdd_r16: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      bref.unpack(c.get<event_b2_utra_fdd_r16_s_>().ext, 1);
      HANDLE_CODE(c.get<event_b2_utra_fdd_r16_s_>().b2_thres1_r16.unpack(bref));
      HANDLE_CODE(c.get<event_b2_utra_fdd_r16_s_>().b2_thres2_utra_fdd_r16.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_b2_utra_fdd_r16_s_>().report_on_leave_r16, 1));
      HANDLE_CODE(unpack_integer(c.get<event_b2_utra_fdd_r16_s_>().hysteresis_r16, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_b2_utra_fdd_r16_s_>().time_to_trigger_r16.unpack(bref));
    } break;
    case types::event_y1_relay_r17: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      bref.unpack(c.get<event_y1_relay_r17_s_>().ext, 1);
      HANDLE_CODE(c.get<event_y1_relay_r17_s_>().y1_thres1_r17.unpack(bref));
      HANDLE_CODE(c.get<event_y1_relay_r17_s_>().y1_thres2_relay_r17.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_y1_relay_r17_s_>().report_on_leave_r17, 1));
      HANDLE_CODE(unpack_integer(c.get<event_y1_relay_r17_s_>().hysteresis_r17, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_y1_relay_r17_s_>().time_to_trigger_r17.unpack(bref));
    } break;
    case types::event_y2_relay_r17: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      bref.unpack(c.get<event_y2_relay_r17_s_>().ext, 1);
      HANDLE_CODE(c.get<event_y2_relay_r17_s_>().y2_thres_relay_r17.unpack(bref));
      HANDLE_CODE(bref.unpack(c.get<event_y2_relay_r17_s_>().report_on_leave_r17, 1));
      HANDLE_CODE(unpack_integer(c.get<event_y2_relay_r17_s_>().hysteresis_r17, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_y2_relay_r17_s_>().time_to_trigger_r17.unpack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_inter_rat_s::event_id_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* event_trigger_cfg_inter_rat_s::event_id_c_::types_opts::to_string() const
{
  static const char* names[] = {
      "eventB1", "eventB2", "eventB1-UTRA-FDD-r16", "eventB2-UTRA-FDD-r16", "eventY1-Relay-r17", "eventY2-Relay-r17"};
  return convert_enum_idx(names, 6, value, "event_trigger_cfg_inter_rat_s::event_id_c_::types");
}

const char* event_trigger_cfg_inter_rat_s::report_amount_opts::to_string() const
{
  static const char* names[] = {"r1", "r2", "r4", "r8", "r16", "r32", "r64", "infinity"};
  return convert_enum_idx(names, 8, value, "event_trigger_cfg_inter_rat_s::report_amount_e_");
}
int8_t event_trigger_cfg_inter_rat_s::report_amount_opts::to_number() const
{
  static const int8_t numbers[] = {1, 2, 4, 8, 16, 32, 64, -1};
  return map_enum_number(numbers, 8, value, "event_trigger_cfg_inter_rat_s::report_amount_e_");
}

// EventTriggerConfigNR-SL-r16 ::= SEQUENCE
SRSASN_CODE event_trigger_cfg_nr_sl_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(event_id_r16.pack(bref));
  HANDLE_CODE(report_interv_r16.pack(bref));
  HANDLE_CODE(report_amount_r16.pack(bref));
  HANDLE_CODE(report_quant_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE event_trigger_cfg_nr_sl_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(event_id_r16.unpack(bref));
  HANDLE_CODE(report_interv_r16.unpack(bref));
  HANDLE_CODE(report_amount_r16.unpack(bref));
  HANDLE_CODE(report_quant_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void event_trigger_cfg_nr_sl_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("eventId-r16");
  event_id_r16.to_json(j);
  j.write_str("reportInterval-r16", report_interv_r16.to_string());
  j.write_str("reportAmount-r16", report_amount_r16.to_string());
  j.write_fieldname("reportQuantity-r16");
  report_quant_r16.to_json(j);
  j.end_obj();
}

void event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::destroy_()
{
  switch (type_) {
    case types::event_c1:
      c.destroy<event_c1_s_>();
      break;
    case types::event_c2_r16:
      c.destroy<event_c2_r16_s_>();
      break;
    default:
      break;
  }
}
void event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::event_c1:
      c.init<event_c1_s_>();
      break;
    case types::event_c2_r16:
      c.init<event_c2_r16_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_");
  }
}
event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::event_id_r16_c_(
    const event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::event_c1:
      c.init(other.c.get<event_c1_s_>());
      break;
    case types::event_c2_r16:
      c.init(other.c.get<event_c2_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_");
  }
}
event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_&
event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::operator=(const event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::event_c1:
      c.set(other.c.get<event_c1_s_>());
      break;
    case types::event_c2_r16:
      c.set(other.c.get<event_c2_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_");
  }

  return *this;
}
event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::event_c1_s_&
event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::set_event_c1()
{
  set(types::event_c1);
  return c.get<event_c1_s_>();
}
event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::event_c2_r16_s_&
event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::set_event_c2_r16()
{
  set(types::event_c2_r16);
  return c.get<event_c2_r16_s_>();
}
void event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::event_c1:
      j.write_fieldname("eventC1");
      j.start_obj();
      j.write_int("c1-Threshold-r16", c.get<event_c1_s_>().c1_thres_r16);
      j.write_int("hysteresis-r16", c.get<event_c1_s_>().hysteresis_r16);
      j.write_str("timeToTrigger-r16", c.get<event_c1_s_>().time_to_trigger_r16.to_string());
      j.end_obj();
      break;
    case types::event_c2_r16:
      j.write_fieldname("eventC2-r16");
      j.start_obj();
      j.write_int("c2-Threshold-r16", c.get<event_c2_r16_s_>().c2_thres_r16);
      j.write_int("hysteresis-r16", c.get<event_c2_r16_s_>().hysteresis_r16);
      j.write_str("timeToTrigger-r16", c.get<event_c2_r16_s_>().time_to_trigger_r16.to_string());
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::event_c1:
      HANDLE_CODE(pack_integer(bref, c.get<event_c1_s_>().c1_thres_r16, (uint8_t)0u, (uint8_t)100u));
      HANDLE_CODE(pack_integer(bref, c.get<event_c1_s_>().hysteresis_r16, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_c1_s_>().time_to_trigger_r16.pack(bref));
      break;
    case types::event_c2_r16:
      HANDLE_CODE(pack_integer(bref, c.get<event_c2_r16_s_>().c2_thres_r16, (uint8_t)0u, (uint8_t)100u));
      HANDLE_CODE(pack_integer(bref, c.get<event_c2_r16_s_>().hysteresis_r16, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_c2_r16_s_>().time_to_trigger_r16.pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::event_c1:
      HANDLE_CODE(unpack_integer(c.get<event_c1_s_>().c1_thres_r16, bref, (uint8_t)0u, (uint8_t)100u));
      HANDLE_CODE(unpack_integer(c.get<event_c1_s_>().hysteresis_r16, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_c1_s_>().time_to_trigger_r16.unpack(bref));
      break;
    case types::event_c2_r16:
      HANDLE_CODE(unpack_integer(c.get<event_c2_r16_s_>().c2_thres_r16, bref, (uint8_t)0u, (uint8_t)100u));
      HANDLE_CODE(unpack_integer(c.get<event_c2_r16_s_>().hysteresis_r16, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.get<event_c2_r16_s_>().time_to_trigger_r16.unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"eventC1", "eventC2-r16"};
  return convert_enum_idx(names, 2, value, "event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::types");
}
uint8_t event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "event_trigger_cfg_nr_sl_r16_s::event_id_r16_c_::types");
}

const char* event_trigger_cfg_nr_sl_r16_s::report_amount_r16_opts::to_string() const
{
  static const char* names[] = {"r1", "r2", "r4", "r8", "r16", "r32", "r64", "infinity"};
  return convert_enum_idx(names, 8, value, "event_trigger_cfg_nr_sl_r16_s::report_amount_r16_e_");
}
int8_t event_trigger_cfg_nr_sl_r16_s::report_amount_r16_opts::to_number() const
{
  static const int8_t numbers[] = {1, 2, 4, 8, 16, 32, 64, -1};
  return map_enum_number(numbers, 8, value, "event_trigger_cfg_nr_sl_r16_s::report_amount_r16_e_");
}

// FilterConfig ::= SEQUENCE
SRSASN_CODE filt_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(filt_coef_rsrp_present, 1));
  HANDLE_CODE(bref.pack(filt_coef_rsrq_present, 1));
  HANDLE_CODE(bref.pack(filt_coef_rs_sinr_present, 1));

  if (filt_coef_rsrp_present) {
    HANDLE_CODE(filt_coef_rsrp.pack(bref));
  }
  if (filt_coef_rsrq_present) {
    HANDLE_CODE(filt_coef_rsrq.pack(bref));
  }
  if (filt_coef_rs_sinr_present) {
    HANDLE_CODE(filt_coef_rs_sinr.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE filt_cfg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(filt_coef_rsrp_present, 1));
  HANDLE_CODE(bref.unpack(filt_coef_rsrq_present, 1));
  HANDLE_CODE(bref.unpack(filt_coef_rs_sinr_present, 1));

  if (filt_coef_rsrp_present) {
    HANDLE_CODE(filt_coef_rsrp.unpack(bref));
  }
  if (filt_coef_rsrq_present) {
    HANDLE_CODE(filt_coef_rsrq.unpack(bref));
  }
  if (filt_coef_rs_sinr_present) {
    HANDLE_CODE(filt_coef_rs_sinr.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void filt_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (filt_coef_rsrp_present) {
    j.write_str("filterCoefficientRSRP", filt_coef_rsrp.to_string());
  }
  if (filt_coef_rsrq_present) {
    j.write_str("filterCoefficientRSRQ", filt_coef_rsrq.to_string());
  }
  if (filt_coef_rs_sinr_present) {
    j.write_str("filterCoefficientRS-SINR", filt_coef_rs_sinr.to_string());
  }
  j.end_obj();
}

// IAB-IP-AddressConfigurationList-r16 ::= SEQUENCE
SRSASN_CODE iab_ip_address_cfg_list_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(iab_ip_address_to_add_mod_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(iab_ip_address_to_release_list_r16.size() > 0, 1));

  if (iab_ip_address_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, iab_ip_address_to_add_mod_list_r16, 1, 32));
  }
  if (iab_ip_address_to_release_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, iab_ip_address_to_release_list_r16, 1, 32, integer_packer<uint8_t>(1, 32)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_ip_address_cfg_list_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool iab_ip_address_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(iab_ip_address_to_add_mod_list_r16_present, 1));
  bool iab_ip_address_to_release_list_r16_present;
  HANDLE_CODE(bref.unpack(iab_ip_address_to_release_list_r16_present, 1));

  if (iab_ip_address_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(iab_ip_address_to_add_mod_list_r16, bref, 1, 32));
  }
  if (iab_ip_address_to_release_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(iab_ip_address_to_release_list_r16, bref, 1, 32, integer_packer<uint8_t>(1, 32)));
  }

  return SRSASN_SUCCESS;
}
void iab_ip_address_cfg_list_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (iab_ip_address_to_add_mod_list_r16.size() > 0) {
    j.start_array("iab-IP-AddressToAddModList-r16");
    for (const auto& e1 : iab_ip_address_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (iab_ip_address_to_release_list_r16.size() > 0) {
    j.start_array("iab-IP-AddressToReleaseList-r16");
    for (const auto& e1 : iab_ip_address_to_release_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// NeedForGapsConfigNR-r16 ::= SEQUENCE
SRSASN_CODE need_for_gaps_cfg_nr_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(requested_target_band_filt_nr_r16.size() > 0, 1));

  if (requested_target_band_filt_nr_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, requested_target_band_filt_nr_r16, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE need_for_gaps_cfg_nr_r16_s::unpack(cbit_ref& bref)
{
  bool requested_target_band_filt_nr_r16_present;
  HANDLE_CODE(bref.unpack(requested_target_band_filt_nr_r16_present, 1));

  if (requested_target_band_filt_nr_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(requested_target_band_filt_nr_r16, bref, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  }

  return SRSASN_SUCCESS;
}
void need_for_gaps_cfg_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (requested_target_band_filt_nr_r16.size() > 0) {
    j.start_array("requestedTargetBandFilterNR-r16");
    for (const auto& e1 : requested_target_band_filt_nr_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// OnDemandSIB-Request-r16 ::= SEQUENCE
SRSASN_CODE on_demand_sib_request_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(on_demand_sib_request_prohibit_timer_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE on_demand_sib_request_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(on_demand_sib_request_prohibit_timer_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void on_demand_sib_request_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("onDemandSIB-RequestProhibitTimer-r16", on_demand_sib_request_prohibit_timer_r16.to_string());
  j.end_obj();
}

const char* on_demand_sib_request_r16_s::on_demand_sib_request_prohibit_timer_r16_opts::to_string() const
{
  static const char* names[] = {"s0", "s0dot5", "s1", "s2", "s5", "s10", "s20", "s30"};
  return convert_enum_idx(names, 8, value, "on_demand_sib_request_r16_s::on_demand_sib_request_prohibit_timer_r16_e_");
}
float on_demand_sib_request_r16_s::on_demand_sib_request_prohibit_timer_r16_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 30.0};
  return map_enum_number(numbers, 8, value, "on_demand_sib_request_r16_s::on_demand_sib_request_prohibit_timer_r16_e_");
}
const char* on_demand_sib_request_r16_s::on_demand_sib_request_prohibit_timer_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.5", "1", "2", "5", "10", "20", "30"};
  return convert_enum_idx(
      number_strs, 8, value, "on_demand_sib_request_r16_s::on_demand_sib_request_prohibit_timer_r16_e_");
}

// OtherConfig-v1610 ::= SEQUENCE
SRSASN_CODE other_cfg_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(idc_assist_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(drx_pref_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(max_bw_pref_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(max_cc_pref_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(max_mimo_layer_pref_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(min_sched_offset_pref_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(release_pref_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(ref_time_pref_report_r16_present, 1));
  HANDLE_CODE(bref.pack(bt_name_list_r16_present, 1));
  HANDLE_CODE(bref.pack(wlan_name_list_r16_present, 1));
  HANDLE_CODE(bref.pack(sensor_name_list_r16_present, 1));
  HANDLE_CODE(bref.pack(obtain_common_location_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_assist_cfg_nr_r16_present, 1));

  if (idc_assist_cfg_r16_present) {
    HANDLE_CODE(idc_assist_cfg_r16.pack(bref));
  }
  if (drx_pref_cfg_r16_present) {
    HANDLE_CODE(drx_pref_cfg_r16.pack(bref));
  }
  if (max_bw_pref_cfg_r16_present) {
    HANDLE_CODE(max_bw_pref_cfg_r16.pack(bref));
  }
  if (max_cc_pref_cfg_r16_present) {
    HANDLE_CODE(max_cc_pref_cfg_r16.pack(bref));
  }
  if (max_mimo_layer_pref_cfg_r16_present) {
    HANDLE_CODE(max_mimo_layer_pref_cfg_r16.pack(bref));
  }
  if (min_sched_offset_pref_cfg_r16_present) {
    HANDLE_CODE(min_sched_offset_pref_cfg_r16.pack(bref));
  }
  if (release_pref_cfg_r16_present) {
    HANDLE_CODE(release_pref_cfg_r16.pack(bref));
  }
  if (bt_name_list_r16_present) {
    HANDLE_CODE(bt_name_list_r16.pack(bref));
  }
  if (wlan_name_list_r16_present) {
    HANDLE_CODE(wlan_name_list_r16.pack(bref));
  }
  if (sensor_name_list_r16_present) {
    HANDLE_CODE(sensor_name_list_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE other_cfg_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(idc_assist_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(drx_pref_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(max_bw_pref_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(max_cc_pref_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(max_mimo_layer_pref_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(min_sched_offset_pref_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(release_pref_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(ref_time_pref_report_r16_present, 1));
  HANDLE_CODE(bref.unpack(bt_name_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(wlan_name_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sensor_name_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(obtain_common_location_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_assist_cfg_nr_r16_present, 1));

  if (idc_assist_cfg_r16_present) {
    HANDLE_CODE(idc_assist_cfg_r16.unpack(bref));
  }
  if (drx_pref_cfg_r16_present) {
    HANDLE_CODE(drx_pref_cfg_r16.unpack(bref));
  }
  if (max_bw_pref_cfg_r16_present) {
    HANDLE_CODE(max_bw_pref_cfg_r16.unpack(bref));
  }
  if (max_cc_pref_cfg_r16_present) {
    HANDLE_CODE(max_cc_pref_cfg_r16.unpack(bref));
  }
  if (max_mimo_layer_pref_cfg_r16_present) {
    HANDLE_CODE(max_mimo_layer_pref_cfg_r16.unpack(bref));
  }
  if (min_sched_offset_pref_cfg_r16_present) {
    HANDLE_CODE(min_sched_offset_pref_cfg_r16.unpack(bref));
  }
  if (release_pref_cfg_r16_present) {
    HANDLE_CODE(release_pref_cfg_r16.unpack(bref));
  }
  if (bt_name_list_r16_present) {
    HANDLE_CODE(bt_name_list_r16.unpack(bref));
  }
  if (wlan_name_list_r16_present) {
    HANDLE_CODE(wlan_name_list_r16.unpack(bref));
  }
  if (sensor_name_list_r16_present) {
    HANDLE_CODE(sensor_name_list_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void other_cfg_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (idc_assist_cfg_r16_present) {
    j.write_fieldname("idc-AssistanceConfig-r16");
    idc_assist_cfg_r16.to_json(j);
  }
  if (drx_pref_cfg_r16_present) {
    j.write_fieldname("drx-PreferenceConfig-r16");
    drx_pref_cfg_r16.to_json(j);
  }
  if (max_bw_pref_cfg_r16_present) {
    j.write_fieldname("maxBW-PreferenceConfig-r16");
    max_bw_pref_cfg_r16.to_json(j);
  }
  if (max_cc_pref_cfg_r16_present) {
    j.write_fieldname("maxCC-PreferenceConfig-r16");
    max_cc_pref_cfg_r16.to_json(j);
  }
  if (max_mimo_layer_pref_cfg_r16_present) {
    j.write_fieldname("maxMIMO-LayerPreferenceConfig-r16");
    max_mimo_layer_pref_cfg_r16.to_json(j);
  }
  if (min_sched_offset_pref_cfg_r16_present) {
    j.write_fieldname("minSchedulingOffsetPreferenceConfig-r16");
    min_sched_offset_pref_cfg_r16.to_json(j);
  }
  if (release_pref_cfg_r16_present) {
    j.write_fieldname("releasePreferenceConfig-r16");
    release_pref_cfg_r16.to_json(j);
  }
  if (ref_time_pref_report_r16_present) {
    j.write_str("referenceTimePreferenceReporting-r16", "true");
  }
  if (bt_name_list_r16_present) {
    j.write_fieldname("btNameList-r16");
    bt_name_list_r16.to_json(j);
  }
  if (wlan_name_list_r16_present) {
    j.write_fieldname("wlanNameList-r16");
    wlan_name_list_r16.to_json(j);
  }
  if (sensor_name_list_r16_present) {
    j.write_fieldname("sensorNameList-r16");
    sensor_name_list_r16.to_json(j);
  }
  if (obtain_common_location_r16_present) {
    j.write_str("obtainCommonLocation-r16", "true");
  }
  if (sl_assist_cfg_nr_r16_present) {
    j.write_str("sl-AssistanceConfigNR-r16", "true");
  }
  j.end_obj();
}

// PCI-RangeElement ::= SEQUENCE
SRSASN_CODE pci_range_elem_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, pci_range_idx, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(pci_range.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pci_range_elem_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(pci_range_idx, bref, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(pci_range.unpack(bref));

  return SRSASN_SUCCESS;
}
void pci_range_elem_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("pci-RangeIndex", pci_range_idx);
  j.write_fieldname("pci-Range");
  pci_range.to_json(j);
  j.end_obj();
}

// PeriodicalReportConfig ::= SEQUENCE
SRSASN_CODE periodical_report_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(report_quant_rs_idxes_present, 1));
  HANDLE_CODE(bref.pack(max_nrof_rs_idxes_to_report_present, 1));

  HANDLE_CODE(rs_type.pack(bref));
  HANDLE_CODE(report_interv.pack(bref));
  HANDLE_CODE(report_amount.pack(bref));
  HANDLE_CODE(report_quant_cell.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_report_cells, (uint8_t)1u, (uint8_t)8u));
  if (report_quant_rs_idxes_present) {
    HANDLE_CODE(report_quant_rs_idxes.pack(bref));
  }
  if (max_nrof_rs_idxes_to_report_present) {
    HANDLE_CODE(pack_integer(bref, max_nrof_rs_idxes_to_report, (uint8_t)1u, (uint8_t)32u));
  }
  HANDLE_CODE(bref.pack(include_beam_meass, 1));
  HANDLE_CODE(bref.pack(use_allowed_cell_list, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= meas_rssi_report_cfg_r16.is_present();
    group_flags[0] |= include_common_location_info_r16_present;
    group_flags[0] |= include_bt_meas_r16.is_present();
    group_flags[0] |= include_wlan_meas_r16.is_present();
    group_flags[0] |= include_sensor_meas_r16.is_present();
    group_flags[0] |= ul_delay_value_cfg_r16.is_present();
    group_flags[0] |= report_add_neigh_meas_r16_present;
    group_flags[1] |= ul_excess_delay_cfg_r17.is_present();
    group_flags[1] |= coarse_location_request_r17_present;
    group_flags[1] |= report_quant_relay_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(meas_rssi_report_cfg_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(include_common_location_info_r16_present, 1));
      HANDLE_CODE(bref.pack(include_bt_meas_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(include_wlan_meas_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(include_sensor_meas_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(ul_delay_value_cfg_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(report_add_neigh_meas_r16_present, 1));
      if (meas_rssi_report_cfg_r16.is_present()) {
        HANDLE_CODE(meas_rssi_report_cfg_r16->pack(bref));
      }
      if (include_bt_meas_r16.is_present()) {
        HANDLE_CODE(include_bt_meas_r16->pack(bref));
      }
      if (include_wlan_meas_r16.is_present()) {
        HANDLE_CODE(include_wlan_meas_r16->pack(bref));
      }
      if (include_sensor_meas_r16.is_present()) {
        HANDLE_CODE(include_sensor_meas_r16->pack(bref));
      }
      if (ul_delay_value_cfg_r16.is_present()) {
        HANDLE_CODE(ul_delay_value_cfg_r16->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ul_excess_delay_cfg_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(coarse_location_request_r17_present, 1));
      HANDLE_CODE(bref.pack(report_quant_relay_r17.is_present(), 1));
      if (ul_excess_delay_cfg_r17.is_present()) {
        HANDLE_CODE(ul_excess_delay_cfg_r17->pack(bref));
      }
      if (report_quant_relay_r17.is_present()) {
        HANDLE_CODE(report_quant_relay_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE periodical_report_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(report_quant_rs_idxes_present, 1));
  HANDLE_CODE(bref.unpack(max_nrof_rs_idxes_to_report_present, 1));

  HANDLE_CODE(rs_type.unpack(bref));
  HANDLE_CODE(report_interv.unpack(bref));
  HANDLE_CODE(report_amount.unpack(bref));
  HANDLE_CODE(report_quant_cell.unpack(bref));
  HANDLE_CODE(unpack_integer(max_report_cells, bref, (uint8_t)1u, (uint8_t)8u));
  if (report_quant_rs_idxes_present) {
    HANDLE_CODE(report_quant_rs_idxes.unpack(bref));
  }
  if (max_nrof_rs_idxes_to_report_present) {
    HANDLE_CODE(unpack_integer(max_nrof_rs_idxes_to_report, bref, (uint8_t)1u, (uint8_t)32u));
  }
  HANDLE_CODE(bref.unpack(include_beam_meass, 1));
  HANDLE_CODE(bref.unpack(use_allowed_cell_list, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(meas_rssi_report_cfg_r16, bref);
      HANDLE_CODE(bref.unpack(include_common_location_info_r16_present, 1));
      unpack_presence_flag(include_bt_meas_r16, bref);
      unpack_presence_flag(include_wlan_meas_r16, bref);
      unpack_presence_flag(include_sensor_meas_r16, bref);
      unpack_presence_flag(ul_delay_value_cfg_r16, bref);
      HANDLE_CODE(bref.unpack(report_add_neigh_meas_r16_present, 1));
      if (meas_rssi_report_cfg_r16.is_present()) {
        HANDLE_CODE(meas_rssi_report_cfg_r16->unpack(bref));
      }
      if (include_bt_meas_r16.is_present()) {
        HANDLE_CODE(include_bt_meas_r16->unpack(bref));
      }
      if (include_wlan_meas_r16.is_present()) {
        HANDLE_CODE(include_wlan_meas_r16->unpack(bref));
      }
      if (include_sensor_meas_r16.is_present()) {
        HANDLE_CODE(include_sensor_meas_r16->unpack(bref));
      }
      if (ul_delay_value_cfg_r16.is_present()) {
        HANDLE_CODE(ul_delay_value_cfg_r16->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(ul_excess_delay_cfg_r17, bref);
      HANDLE_CODE(bref.unpack(coarse_location_request_r17_present, 1));
      unpack_presence_flag(report_quant_relay_r17, bref);
      if (ul_excess_delay_cfg_r17.is_present()) {
        HANDLE_CODE(ul_excess_delay_cfg_r17->unpack(bref));
      }
      if (report_quant_relay_r17.is_present()) {
        HANDLE_CODE(report_quant_relay_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void periodical_report_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("rsType", rs_type.to_string());
  j.write_str("reportInterval", report_interv.to_string());
  j.write_str("reportAmount", report_amount.to_string());
  j.write_fieldname("reportQuantityCell");
  report_quant_cell.to_json(j);
  j.write_int("maxReportCells", max_report_cells);
  if (report_quant_rs_idxes_present) {
    j.write_fieldname("reportQuantityRS-Indexes");
    report_quant_rs_idxes.to_json(j);
  }
  if (max_nrof_rs_idxes_to_report_present) {
    j.write_int("maxNrofRS-IndexesToReport", max_nrof_rs_idxes_to_report);
  }
  j.write_bool("includeBeamMeasurements", include_beam_meass);
  j.write_bool("useAllowedCellList", use_allowed_cell_list);
  if (ext) {
    if (meas_rssi_report_cfg_r16.is_present()) {
      j.write_fieldname("measRSSI-ReportConfig-r16");
      meas_rssi_report_cfg_r16->to_json(j);
    }
    if (include_common_location_info_r16_present) {
      j.write_str("includeCommonLocationInfo-r16", "true");
    }
    if (include_bt_meas_r16.is_present()) {
      j.write_fieldname("includeBT-Meas-r16");
      include_bt_meas_r16->to_json(j);
    }
    if (include_wlan_meas_r16.is_present()) {
      j.write_fieldname("includeWLAN-Meas-r16");
      include_wlan_meas_r16->to_json(j);
    }
    if (include_sensor_meas_r16.is_present()) {
      j.write_fieldname("includeSensor-Meas-r16");
      include_sensor_meas_r16->to_json(j);
    }
    if (ul_delay_value_cfg_r16.is_present()) {
      j.write_fieldname("ul-DelayValueConfig-r16");
      ul_delay_value_cfg_r16->to_json(j);
    }
    if (report_add_neigh_meas_r16_present) {
      j.write_str("reportAddNeighMeas-r16", "setup");
    }
    if (ul_excess_delay_cfg_r17.is_present()) {
      j.write_fieldname("ul-ExcessDelayConfig-r17");
      ul_excess_delay_cfg_r17->to_json(j);
    }
    if (coarse_location_request_r17_present) {
      j.write_str("coarseLocationRequest-r17", "true");
    }
    if (report_quant_relay_r17.is_present()) {
      j.write_fieldname("reportQuantityRelay-r17");
      report_quant_relay_r17->to_json(j);
    }
  }
  j.end_obj();
}

const char* periodical_report_cfg_s::report_amount_opts::to_string() const
{
  static const char* names[] = {"r1", "r2", "r4", "r8", "r16", "r32", "r64", "infinity"};
  return convert_enum_idx(names, 8, value, "periodical_report_cfg_s::report_amount_e_");
}
int8_t periodical_report_cfg_s::report_amount_opts::to_number() const
{
  static const int8_t numbers[] = {1, 2, 4, 8, 16, 32, 64, -1};
  return map_enum_number(numbers, 8, value, "periodical_report_cfg_s::report_amount_e_");
}

// PeriodicalReportConfigInterRAT ::= SEQUENCE
SRSASN_CODE periodical_report_cfg_inter_rat_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(report_interv.pack(bref));
  HANDLE_CODE(report_amount.pack(bref));
  HANDLE_CODE(report_quant.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_report_cells, (uint8_t)1u, (uint8_t)8u));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= report_quant_utra_fdd_r16.is_present();
    group_flags[1] |= include_common_location_info_r16_present;
    group_flags[1] |= include_bt_meas_r16.is_present();
    group_flags[1] |= include_wlan_meas_r16.is_present();
    group_flags[1] |= include_sensor_meas_r16.is_present();
    group_flags[2] |= report_quant_relay_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(report_quant_utra_fdd_r16.is_present(), 1));
      if (report_quant_utra_fdd_r16.is_present()) {
        HANDLE_CODE(report_quant_utra_fdd_r16->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(include_common_location_info_r16_present, 1));
      HANDLE_CODE(bref.pack(include_bt_meas_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(include_wlan_meas_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(include_sensor_meas_r16.is_present(), 1));
      if (include_bt_meas_r16.is_present()) {
        HANDLE_CODE(include_bt_meas_r16->pack(bref));
      }
      if (include_wlan_meas_r16.is_present()) {
        HANDLE_CODE(include_wlan_meas_r16->pack(bref));
      }
      if (include_sensor_meas_r16.is_present()) {
        HANDLE_CODE(include_sensor_meas_r16->pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(report_quant_relay_r17.is_present(), 1));
      if (report_quant_relay_r17.is_present()) {
        HANDLE_CODE(report_quant_relay_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE periodical_report_cfg_inter_rat_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(report_interv.unpack(bref));
  HANDLE_CODE(report_amount.unpack(bref));
  HANDLE_CODE(report_quant.unpack(bref));
  HANDLE_CODE(unpack_integer(max_report_cells, bref, (uint8_t)1u, (uint8_t)8u));

  if (ext) {
    ext_groups_unpacker_guard group_flags(3);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(report_quant_utra_fdd_r16, bref);
      if (report_quant_utra_fdd_r16.is_present()) {
        HANDLE_CODE(report_quant_utra_fdd_r16->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(include_common_location_info_r16_present, 1));
      unpack_presence_flag(include_bt_meas_r16, bref);
      unpack_presence_flag(include_wlan_meas_r16, bref);
      unpack_presence_flag(include_sensor_meas_r16, bref);
      if (include_bt_meas_r16.is_present()) {
        HANDLE_CODE(include_bt_meas_r16->unpack(bref));
      }
      if (include_wlan_meas_r16.is_present()) {
        HANDLE_CODE(include_wlan_meas_r16->unpack(bref));
      }
      if (include_sensor_meas_r16.is_present()) {
        HANDLE_CODE(include_sensor_meas_r16->unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(report_quant_relay_r17, bref);
      if (report_quant_relay_r17.is_present()) {
        HANDLE_CODE(report_quant_relay_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void periodical_report_cfg_inter_rat_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("reportInterval", report_interv.to_string());
  j.write_str("reportAmount", report_amount.to_string());
  j.write_fieldname("reportQuantity");
  report_quant.to_json(j);
  j.write_int("maxReportCells", max_report_cells);
  if (ext) {
    if (report_quant_utra_fdd_r16.is_present()) {
      j.write_fieldname("reportQuantityUTRA-FDD-r16");
      report_quant_utra_fdd_r16->to_json(j);
    }
    if (include_common_location_info_r16_present) {
      j.write_str("includeCommonLocationInfo-r16", "true");
    }
    if (include_bt_meas_r16.is_present()) {
      j.write_fieldname("includeBT-Meas-r16");
      include_bt_meas_r16->to_json(j);
    }
    if (include_wlan_meas_r16.is_present()) {
      j.write_fieldname("includeWLAN-Meas-r16");
      include_wlan_meas_r16->to_json(j);
    }
    if (include_sensor_meas_r16.is_present()) {
      j.write_fieldname("includeSensor-Meas-r16");
      include_sensor_meas_r16->to_json(j);
    }
    if (report_quant_relay_r17.is_present()) {
      j.write_fieldname("reportQuantityRelay-r17");
      report_quant_relay_r17->to_json(j);
    }
  }
  j.end_obj();
}

const char* periodical_report_cfg_inter_rat_s::report_amount_opts::to_string() const
{
  static const char* names[] = {"r1", "r2", "r4", "r8", "r16", "r32", "r64", "infinity"};
  return convert_enum_idx(names, 8, value, "periodical_report_cfg_inter_rat_s::report_amount_e_");
}
int8_t periodical_report_cfg_inter_rat_s::report_amount_opts::to_number() const
{
  static const int8_t numbers[] = {1, 2, 4, 8, 16, 32, 64, -1};
  return map_enum_number(numbers, 8, value, "periodical_report_cfg_inter_rat_s::report_amount_e_");
}

// PeriodicalReportConfigNR-SL-r16 ::= SEQUENCE
SRSASN_CODE periodical_report_cfg_nr_sl_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(report_interv_r16.pack(bref));
  HANDLE_CODE(report_amount_r16.pack(bref));
  HANDLE_CODE(report_quant_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE periodical_report_cfg_nr_sl_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(report_interv_r16.unpack(bref));
  HANDLE_CODE(report_amount_r16.unpack(bref));
  HANDLE_CODE(report_quant_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void periodical_report_cfg_nr_sl_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("reportInterval-r16", report_interv_r16.to_string());
  j.write_str("reportAmount-r16", report_amount_r16.to_string());
  j.write_fieldname("reportQuantity-r16");
  report_quant_r16.to_json(j);
  j.end_obj();
}

const char* periodical_report_cfg_nr_sl_r16_s::report_amount_r16_opts::to_string() const
{
  static const char* names[] = {"r1", "r2", "r4", "r8", "r16", "r32", "r64", "infinity"};
  return convert_enum_idx(names, 8, value, "periodical_report_cfg_nr_sl_r16_s::report_amount_r16_e_");
}
int8_t periodical_report_cfg_nr_sl_r16_s::report_amount_r16_opts::to_number() const
{
  static const int8_t numbers[] = {1, 2, 4, 8, 16, 32, 64, -1};
  return map_enum_number(numbers, 8, value, "periodical_report_cfg_nr_sl_r16_s::report_amount_r16_e_");
}

// RAN-AreaConfig ::= SEQUENCE
SRSASN_CODE ran_area_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ran_area_code_list.size() > 0, 1));

  HANDLE_CODE(tac.pack(bref));
  if (ran_area_code_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ran_area_code_list, 1, 32, integer_packer<uint16_t>(0, 255)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ran_area_cfg_s::unpack(cbit_ref& bref)
{
  bool ran_area_code_list_present;
  HANDLE_CODE(bref.unpack(ran_area_code_list_present, 1));

  HANDLE_CODE(tac.unpack(bref));
  if (ran_area_code_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ran_area_code_list, bref, 1, 32, integer_packer<uint16_t>(0, 255)));
  }

  return SRSASN_SUCCESS;
}
void ran_area_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("trackingAreaCode", tac.to_string());
  if (ran_area_code_list.size() > 0) {
    j.start_array("ran-AreaCodeList");
    for (const auto& e1 : ran_area_code_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// RMTC-Config-r16 ::= SEQUENCE
SRSASN_CODE rmtc_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(rmtc_sf_offset_r16_present, 1));

  HANDLE_CODE(rmtc_periodicity_r16.pack(bref));
  if (rmtc_sf_offset_r16_present) {
    HANDLE_CODE(pack_integer(bref, rmtc_sf_offset_r16, (uint16_t)0u, (uint16_t)639u));
  }
  HANDLE_CODE(meas_dur_symbols_r16.pack(bref));
  HANDLE_CODE(pack_integer(bref, rmtc_freq_r16, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(ref_scs_cp_r16.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= rmtc_bw_r17_present;
    group_flags[0] |= meas_dur_symbols_v1700_present;
    group_flags[0] |= ref_scs_cp_v1700_present;
    group_flags[0] |= tci_state_info_r17.is_present();
    group_flags[1] |= ref_bwp_id_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(rmtc_bw_r17_present, 1));
      HANDLE_CODE(bref.pack(meas_dur_symbols_v1700_present, 1));
      HANDLE_CODE(bref.pack(ref_scs_cp_v1700_present, 1));
      HANDLE_CODE(bref.pack(tci_state_info_r17.is_present(), 1));
      if (rmtc_bw_r17_present) {
        HANDLE_CODE(rmtc_bw_r17.pack(bref));
      }
      if (meas_dur_symbols_v1700_present) {
        HANDLE_CODE(meas_dur_symbols_v1700.pack(bref));
      }
      if (ref_scs_cp_v1700_present) {
        HANDLE_CODE(ref_scs_cp_v1700.pack(bref));
      }
      if (tci_state_info_r17.is_present()) {
        HANDLE_CODE(bref.pack(tci_state_info_r17->ref_serv_cell_id_r17_present, 1));
        HANDLE_CODE(pack_integer(bref, tci_state_info_r17->tci_state_id_r17, (uint8_t)0u, (uint8_t)127u));
        if (tci_state_info_r17->ref_serv_cell_id_r17_present) {
          HANDLE_CODE(pack_integer(bref, tci_state_info_r17->ref_serv_cell_id_r17, (uint8_t)0u, (uint8_t)31u));
        }
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ref_bwp_id_r17_present, 1));
      if (ref_bwp_id_r17_present) {
        HANDLE_CODE(pack_integer(bref, ref_bwp_id_r17, (uint8_t)0u, (uint8_t)4u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rmtc_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(rmtc_sf_offset_r16_present, 1));

  HANDLE_CODE(rmtc_periodicity_r16.unpack(bref));
  if (rmtc_sf_offset_r16_present) {
    HANDLE_CODE(unpack_integer(rmtc_sf_offset_r16, bref, (uint16_t)0u, (uint16_t)639u));
  }
  HANDLE_CODE(meas_dur_symbols_r16.unpack(bref));
  HANDLE_CODE(unpack_integer(rmtc_freq_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(ref_scs_cp_r16.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(rmtc_bw_r17_present, 1));
      HANDLE_CODE(bref.unpack(meas_dur_symbols_v1700_present, 1));
      HANDLE_CODE(bref.unpack(ref_scs_cp_v1700_present, 1));
      unpack_presence_flag(tci_state_info_r17, bref);
      if (rmtc_bw_r17_present) {
        HANDLE_CODE(rmtc_bw_r17.unpack(bref));
      }
      if (meas_dur_symbols_v1700_present) {
        HANDLE_CODE(meas_dur_symbols_v1700.unpack(bref));
      }
      if (ref_scs_cp_v1700_present) {
        HANDLE_CODE(ref_scs_cp_v1700.unpack(bref));
      }
      if (tci_state_info_r17.is_present()) {
        HANDLE_CODE(bref.unpack(tci_state_info_r17->ref_serv_cell_id_r17_present, 1));
        HANDLE_CODE(unpack_integer(tci_state_info_r17->tci_state_id_r17, bref, (uint8_t)0u, (uint8_t)127u));
        if (tci_state_info_r17->ref_serv_cell_id_r17_present) {
          HANDLE_CODE(unpack_integer(tci_state_info_r17->ref_serv_cell_id_r17, bref, (uint8_t)0u, (uint8_t)31u));
        }
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ref_bwp_id_r17_present, 1));
      if (ref_bwp_id_r17_present) {
        HANDLE_CODE(unpack_integer(ref_bwp_id_r17, bref, (uint8_t)0u, (uint8_t)4u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void rmtc_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("rmtc-Periodicity-r16", rmtc_periodicity_r16.to_string());
  if (rmtc_sf_offset_r16_present) {
    j.write_int("rmtc-SubframeOffset-r16", rmtc_sf_offset_r16);
  }
  j.write_str("measDurationSymbols-r16", meas_dur_symbols_r16.to_string());
  j.write_int("rmtc-Frequency-r16", rmtc_freq_r16);
  j.write_str("ref-SCS-CP-r16", ref_scs_cp_r16.to_string());
  if (ext) {
    if (rmtc_bw_r17_present) {
      j.write_str("rmtc-Bandwidth-r17", rmtc_bw_r17.to_string());
    }
    if (meas_dur_symbols_v1700_present) {
      j.write_str("measDurationSymbols-v1700", meas_dur_symbols_v1700.to_string());
    }
    if (ref_scs_cp_v1700_present) {
      j.write_str("ref-SCS-CP-v1700", ref_scs_cp_v1700.to_string());
    }
    if (tci_state_info_r17.is_present()) {
      j.write_fieldname("tci-StateInfo-r17");
      j.start_obj();
      j.write_int("tci-StateId-r17", tci_state_info_r17->tci_state_id_r17);
      if (tci_state_info_r17->ref_serv_cell_id_r17_present) {
        j.write_int("ref-ServCellId-r17", tci_state_info_r17->ref_serv_cell_id_r17);
      }
      j.end_obj();
    }
    if (ref_bwp_id_r17_present) {
      j.write_int("ref-BWPId-r17", ref_bwp_id_r17);
    }
  }
  j.end_obj();
}

const char* rmtc_cfg_r16_s::rmtc_periodicity_r16_opts::to_string() const
{
  static const char* names[] = {"ms40", "ms80", "ms160", "ms320", "ms640"};
  return convert_enum_idx(names, 5, value, "rmtc_cfg_r16_s::rmtc_periodicity_r16_e_");
}
uint16_t rmtc_cfg_r16_s::rmtc_periodicity_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {40, 80, 160, 320, 640};
  return map_enum_number(numbers, 5, value, "rmtc_cfg_r16_s::rmtc_periodicity_r16_e_");
}

const char* rmtc_cfg_r16_s::meas_dur_symbols_r16_opts::to_string() const
{
  static const char* names[] = {"sym1", "sym14or12", "sym28or24", "sym42or36", "sym70or60"};
  return convert_enum_idx(names, 5, value, "rmtc_cfg_r16_s::meas_dur_symbols_r16_e_");
}
uint8_t rmtc_cfg_r16_s::meas_dur_symbols_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 14, 28, 42, 70};
  return map_enum_number(numbers, 5, value, "rmtc_cfg_r16_s::meas_dur_symbols_r16_e_");
}

const char* rmtc_cfg_r16_s::ref_scs_cp_r16_opts::to_string() const
{
  static const char* names[] = {"kHz15", "kHz30", "kHz60-NCP", "kHz60-ECP"};
  return convert_enum_idx(names, 4, value, "rmtc_cfg_r16_s::ref_scs_cp_r16_e_");
}

const char* rmtc_cfg_r16_s::rmtc_bw_r17_opts::to_string() const
{
  static const char* names[] = {"mhz100", "mhz400", "mhz800", "mhz1600", "mhz2000"};
  return convert_enum_idx(names, 5, value, "rmtc_cfg_r16_s::rmtc_bw_r17_e_");
}
uint16_t rmtc_cfg_r16_s::rmtc_bw_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 400, 800, 1600, 2000};
  return map_enum_number(numbers, 5, value, "rmtc_cfg_r16_s::rmtc_bw_r17_e_");
}

const char* rmtc_cfg_r16_s::meas_dur_symbols_v1700_opts::to_string() const
{
  static const char* names[] = {"sym140", "sym560", "sym1120"};
  return convert_enum_idx(names, 3, value, "rmtc_cfg_r16_s::meas_dur_symbols_v1700_e_");
}
uint16_t rmtc_cfg_r16_s::meas_dur_symbols_v1700_opts::to_number() const
{
  static const uint16_t numbers[] = {140, 560, 1120};
  return map_enum_number(numbers, 3, value, "rmtc_cfg_r16_s::meas_dur_symbols_v1700_e_");
}

const char* rmtc_cfg_r16_s::ref_scs_cp_v1700_opts::to_string() const
{
  static const char* names[] = {"kHz120", "kHz480", "kHz960"};
  return convert_enum_idx(names, 3, value, "rmtc_cfg_r16_s::ref_scs_cp_v1700_e_");
}
uint16_t rmtc_cfg_r16_s::ref_scs_cp_v1700_opts::to_number() const
{
  static const uint16_t numbers[] = {120, 480, 960};
  return map_enum_number(numbers, 3, value, "rmtc_cfg_r16_s::ref_scs_cp_v1700_e_");
}

// RRCReconfiguration-v1700-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(other_cfg_v1700_present, 1));
  HANDLE_CODE(bref.pack(sl_l2_relay_ue_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_l2_remote_ue_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(ded_paging_delivery_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(need_for_gap_ncsg_cfg_nr_r17_present, 1));
  HANDLE_CODE(bref.pack(need_for_gap_ncsg_cfg_eutra_r17_present, 1));
  HANDLE_CODE(bref.pack(musim_gap_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(ul_gap_fr2_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(scg_state_r17_present, 1));
  HANDLE_CODE(bref.pack(app_layer_meas_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(ue_tx_teg_request_ul_tdoa_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (other_cfg_v1700_present) {
    HANDLE_CODE(other_cfg_v1700.pack(bref));
  }
  if (sl_l2_relay_ue_cfg_r17_present) {
    HANDLE_CODE(sl_l2_relay_ue_cfg_r17.pack(bref));
  }
  if (sl_l2_remote_ue_cfg_r17_present) {
    HANDLE_CODE(sl_l2_remote_ue_cfg_r17.pack(bref));
  }
  if (ded_paging_delivery_r17.size() > 0) {
    HANDLE_CODE(ded_paging_delivery_r17.pack(bref));
  }
  if (need_for_gap_ncsg_cfg_nr_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_cfg_nr_r17.pack(bref));
  }
  if (need_for_gap_ncsg_cfg_eutra_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_cfg_eutra_r17.pack(bref));
  }
  if (musim_gap_cfg_r17_present) {
    HANDLE_CODE(musim_gap_cfg_r17.pack(bref));
  }
  if (ul_gap_fr2_cfg_r17_present) {
    HANDLE_CODE(ul_gap_fr2_cfg_r17.pack(bref));
  }
  if (app_layer_meas_cfg_r17_present) {
    HANDLE_CODE(app_layer_meas_cfg_r17.pack(bref));
  }
  if (ue_tx_teg_request_ul_tdoa_cfg_r17_present) {
    HANDLE_CODE(ue_tx_teg_request_ul_tdoa_cfg_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(other_cfg_v1700_present, 1));
  HANDLE_CODE(bref.unpack(sl_l2_relay_ue_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_l2_remote_ue_cfg_r17_present, 1));
  bool ded_paging_delivery_r17_present;
  HANDLE_CODE(bref.unpack(ded_paging_delivery_r17_present, 1));
  HANDLE_CODE(bref.unpack(need_for_gap_ncsg_cfg_nr_r17_present, 1));
  HANDLE_CODE(bref.unpack(need_for_gap_ncsg_cfg_eutra_r17_present, 1));
  HANDLE_CODE(bref.unpack(musim_gap_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(ul_gap_fr2_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(scg_state_r17_present, 1));
  HANDLE_CODE(bref.unpack(app_layer_meas_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(ue_tx_teg_request_ul_tdoa_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (other_cfg_v1700_present) {
    HANDLE_CODE(other_cfg_v1700.unpack(bref));
  }
  if (sl_l2_relay_ue_cfg_r17_present) {
    HANDLE_CODE(sl_l2_relay_ue_cfg_r17.unpack(bref));
  }
  if (sl_l2_remote_ue_cfg_r17_present) {
    HANDLE_CODE(sl_l2_remote_ue_cfg_r17.unpack(bref));
  }
  if (ded_paging_delivery_r17_present) {
    HANDLE_CODE(ded_paging_delivery_r17.unpack(bref));
  }
  if (need_for_gap_ncsg_cfg_nr_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_cfg_nr_r17.unpack(bref));
  }
  if (need_for_gap_ncsg_cfg_eutra_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_cfg_eutra_r17.unpack(bref));
  }
  if (musim_gap_cfg_r17_present) {
    HANDLE_CODE(musim_gap_cfg_r17.unpack(bref));
  }
  if (ul_gap_fr2_cfg_r17_present) {
    HANDLE_CODE(ul_gap_fr2_cfg_r17.unpack(bref));
  }
  if (app_layer_meas_cfg_r17_present) {
    HANDLE_CODE(app_layer_meas_cfg_r17.unpack(bref));
  }
  if (ue_tx_teg_request_ul_tdoa_cfg_r17_present) {
    HANDLE_CODE(ue_tx_teg_request_ul_tdoa_cfg_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (other_cfg_v1700_present) {
    j.write_fieldname("otherConfig-v1700");
    other_cfg_v1700.to_json(j);
  }
  if (sl_l2_relay_ue_cfg_r17_present) {
    j.write_fieldname("sl-L2RelayUE-Config-r17");
    sl_l2_relay_ue_cfg_r17.to_json(j);
  }
  if (sl_l2_remote_ue_cfg_r17_present) {
    j.write_fieldname("sl-L2RemoteUE-Config-r17");
    sl_l2_remote_ue_cfg_r17.to_json(j);
  }
  if (ded_paging_delivery_r17.size() > 0) {
    j.write_str("dedicatedPagingDelivery-r17", ded_paging_delivery_r17.to_string());
  }
  if (need_for_gap_ncsg_cfg_nr_r17_present) {
    j.write_fieldname("needForGapNCSG-ConfigNR-r17");
    need_for_gap_ncsg_cfg_nr_r17.to_json(j);
  }
  if (need_for_gap_ncsg_cfg_eutra_r17_present) {
    j.write_fieldname("needForGapNCSG-ConfigEUTRA-r17");
    need_for_gap_ncsg_cfg_eutra_r17.to_json(j);
  }
  if (musim_gap_cfg_r17_present) {
    j.write_fieldname("musim-GapConfig-r17");
    musim_gap_cfg_r17.to_json(j);
  }
  if (ul_gap_fr2_cfg_r17_present) {
    j.write_fieldname("ul-GapFR2-Config-r17");
    ul_gap_fr2_cfg_r17.to_json(j);
  }
  if (scg_state_r17_present) {
    j.write_str("scg-State-r17", "deactivated");
  }
  if (app_layer_meas_cfg_r17_present) {
    j.write_fieldname("appLayerMeasConfig-r17");
    app_layer_meas_cfg_r17.to_json(j);
  }
  if (ue_tx_teg_request_ul_tdoa_cfg_r17_present) {
    j.write_fieldname("ue-TxTEG-RequestUL-TDOA-Config-r17");
    ue_tx_teg_request_ul_tdoa_cfg_r17.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// ReferenceSignalConfig ::= SEQUENCE
SRSASN_CODE ref_sig_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ssb_cfg_mob_present, 1));
  HANDLE_CODE(bref.pack(csi_rs_res_cfg_mob_present, 1));

  if (ssb_cfg_mob_present) {
    HANDLE_CODE(ssb_cfg_mob.pack(bref));
  }
  if (csi_rs_res_cfg_mob_present) {
    HANDLE_CODE(csi_rs_res_cfg_mob.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ref_sig_cfg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ssb_cfg_mob_present, 1));
  HANDLE_CODE(bref.unpack(csi_rs_res_cfg_mob_present, 1));

  if (ssb_cfg_mob_present) {
    HANDLE_CODE(ssb_cfg_mob.unpack(bref));
  }
  if (csi_rs_res_cfg_mob_present) {
    HANDLE_CODE(csi_rs_res_cfg_mob.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ref_sig_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ssb_cfg_mob_present) {
    j.write_fieldname("ssb-ConfigMobility");
    ssb_cfg_mob.to_json(j);
  }
  if (csi_rs_res_cfg_mob_present) {
    j.write_fieldname("csi-rs-ResourceConfigMobility");
    csi_rs_res_cfg_mob.to_json(j);
  }
  j.end_obj();
}

// ReportCGI ::= SEQUENCE
SRSASN_CODE report_cgi_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, cell_for_which_to_report_cgi, (uint16_t)0u, (uint16_t)1007u));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= use_autonomous_gaps_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(use_autonomous_gaps_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE report_cgi_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(cell_for_which_to_report_cgi, bref, (uint16_t)0u, (uint16_t)1007u));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(use_autonomous_gaps_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void report_cgi_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("cellForWhichToReportCGI", cell_for_which_to_report_cgi);
  if (ext) {
    if (use_autonomous_gaps_r16_present) {
      j.write_str("useAutonomousGaps-r16", "setup");
    }
  }
  j.end_obj();
}

// ReportCGI-EUTRA ::= SEQUENCE
SRSASN_CODE report_cgi_eutra_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, cell_for_which_to_report_cgi, (uint16_t)0u, (uint16_t)503u));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= use_autonomous_gaps_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(use_autonomous_gaps_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE report_cgi_eutra_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(cell_for_which_to_report_cgi, bref, (uint16_t)0u, (uint16_t)503u));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(use_autonomous_gaps_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void report_cgi_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("cellForWhichToReportCGI", cell_for_which_to_report_cgi);
  if (ext) {
    if (use_autonomous_gaps_r16_present) {
      j.write_str("useAutonomousGaps-r16", "setup");
    }
  }
  j.end_obj();
}

// ReportSFTD-EUTRA ::= SEQUENCE
SRSASN_CODE report_sftd_eutra_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(report_sftd_meas, 1));
  HANDLE_CODE(bref.pack(report_rsrp, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE report_sftd_eutra_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(report_sftd_meas, 1));
  HANDLE_CODE(bref.unpack(report_rsrp, 1));

  return SRSASN_SUCCESS;
}
void report_sftd_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_bool("reportSFTD-Meas", report_sftd_meas);
  j.write_bool("reportRSRP", report_rsrp);
  j.end_obj();
}

// ReportSFTD-NR ::= SEQUENCE
SRSASN_CODE report_sftd_nr_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(report_sftd_meas, 1));
  HANDLE_CODE(bref.pack(report_rsrp, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= report_sftd_neigh_meas_present;
    group_flags[0] |= drx_sftd_neigh_meas_present;
    group_flags[0] |= cells_for_which_to_report_sftd.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(report_sftd_neigh_meas_present, 1));
      HANDLE_CODE(bref.pack(drx_sftd_neigh_meas_present, 1));
      HANDLE_CODE(bref.pack(cells_for_which_to_report_sftd.is_present(), 1));
      if (cells_for_which_to_report_sftd.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *cells_for_which_to_report_sftd, 1, 3, integer_packer<uint16_t>(0, 1007)));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE report_sftd_nr_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(report_sftd_meas, 1));
  HANDLE_CODE(bref.unpack(report_rsrp, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(report_sftd_neigh_meas_present, 1));
      HANDLE_CODE(bref.unpack(drx_sftd_neigh_meas_present, 1));
      unpack_presence_flag(cells_for_which_to_report_sftd, bref);
      if (cells_for_which_to_report_sftd.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*cells_for_which_to_report_sftd, bref, 1, 3, integer_packer<uint16_t>(0, 1007)));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void report_sftd_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_bool("reportSFTD-Meas", report_sftd_meas);
  j.write_bool("reportRSRP", report_rsrp);
  if (ext) {
    if (report_sftd_neigh_meas_present) {
      j.write_str("reportSFTD-NeighMeas", "true");
    }
    if (drx_sftd_neigh_meas_present) {
      j.write_str("drx-SFTD-NeighMeas", "true");
    }
    if (cells_for_which_to_report_sftd.is_present()) {
      j.start_array("cellsForWhichToReportSFTD");
      for (const auto& e1 : *cells_for_which_to_report_sftd) {
        j.write_int(e1);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

// RxTxPeriodical-r17 ::= SEQUENCE
SRSASN_CODE rx_tx_periodical_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(rx_tx_report_interv_r17_present, 1));

  if (rx_tx_report_interv_r17_present) {
    HANDLE_CODE(rx_tx_report_interv_r17.pack(bref));
  }
  HANDLE_CODE(report_amount_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rx_tx_periodical_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(rx_tx_report_interv_r17_present, 1));

  if (rx_tx_report_interv_r17_present) {
    HANDLE_CODE(rx_tx_report_interv_r17.unpack(bref));
  }
  HANDLE_CODE(report_amount_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void rx_tx_periodical_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rx_tx_report_interv_r17_present) {
    j.write_str("rxTxReportInterval-r17", rx_tx_report_interv_r17.to_string());
  }
  j.write_str("reportAmount-r17", report_amount_r17.to_string());
  j.end_obj();
}

const char* rx_tx_periodical_r17_s::report_amount_r17_opts::to_string() const
{
  static const char* names[] = {"r1", "infinity", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "rx_tx_periodical_r17_s::report_amount_r17_e_");
}
int8_t rx_tx_periodical_r17_s::report_amount_r17_opts::to_number() const
{
  static const int8_t numbers[] = {1, -1};
  return map_enum_number(numbers, 2, value, "rx_tx_periodical_r17_s::report_amount_r17_e_");
}

// SL-ConfigDedicatedEUTRA-Info-r16 ::= SEQUENCE
SRSASN_CODE sl_cfg_ded_eutra_info_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_cfg_ded_eutra_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_time_offset_eutra_list_r16_present, 1));

  if (sl_cfg_ded_eutra_r16.size() > 0) {
    HANDLE_CODE(sl_cfg_ded_eutra_r16.pack(bref));
  }
  if (sl_time_offset_eutra_list_r16_present) {
    HANDLE_CODE(pack_fixed_seq_of(bref, sl_time_offset_eutra_list_r16, sl_time_offset_eutra_list_r16.size()));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_cfg_ded_eutra_info_r16_s::unpack(cbit_ref& bref)
{
  bool sl_cfg_ded_eutra_r16_present;
  HANDLE_CODE(bref.unpack(sl_cfg_ded_eutra_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_time_offset_eutra_list_r16_present, 1));

  if (sl_cfg_ded_eutra_r16_present) {
    HANDLE_CODE(sl_cfg_ded_eutra_r16.unpack(bref));
  }
  if (sl_time_offset_eutra_list_r16_present) {
    HANDLE_CODE(unpack_fixed_seq_of(sl_time_offset_eutra_list_r16, bref, sl_time_offset_eutra_list_r16.size()));
  }

  return SRSASN_SUCCESS;
}
void sl_cfg_ded_eutra_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_cfg_ded_eutra_r16.size() > 0) {
    j.write_str("sl-ConfigDedicatedEUTRA-r16", sl_cfg_ded_eutra_r16.to_string());
  }
  if (sl_time_offset_eutra_list_r16_present) {
    j.start_array("sl-TimeOffsetEUTRA-List-r16");
    for (const auto& e1 : sl_time_offset_eutra_list_r16) {
      j.write_str(e1.to_string());
    }
    j.end_array();
  }
  j.end_obj();
}

// SSB-MTC2 ::= SEQUENCE
SRSASN_CODE ssb_mtc2_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pci_list.size() > 0, 1));

  if (pci_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, pci_list, 1, 64, integer_packer<uint16_t>(0, 1007)));
  }
  HANDLE_CODE(periodicity.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ssb_mtc2_s::unpack(cbit_ref& bref)
{
  bool pci_list_present;
  HANDLE_CODE(bref.unpack(pci_list_present, 1));

  if (pci_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(pci_list, bref, 1, 64, integer_packer<uint16_t>(0, 1007)));
  }
  HANDLE_CODE(periodicity.unpack(bref));

  return SRSASN_SUCCESS;
}
void ssb_mtc2_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pci_list.size() > 0) {
    j.start_array("pci-List");
    for (const auto& e1 : pci_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.write_str("periodicity", periodicity.to_string());
  j.end_obj();
}

const char* ssb_mtc2_s::periodicity_opts::to_string() const
{
  static const char* names[] = {"sf5", "sf10", "sf20", "sf40", "sf80", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "ssb_mtc2_s::periodicity_e_");
}
uint8_t ssb_mtc2_s::periodicity_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 10, 20, 40, 80};
  return map_enum_number(numbers, 5, value, "ssb_mtc2_s::periodicity_e_");
}

// SliceInfoDedicated-r17 ::= SEQUENCE
SRSASN_CODE slice_info_ded_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(nsag_cell_resel_prio_r17_present, 1));
  HANDLE_CODE(bref.pack(nsag_cell_resel_sub_prio_r17_present, 1));

  HANDLE_CODE(nsag_id_info_r17.pack(bref));
  if (nsag_cell_resel_prio_r17_present) {
    HANDLE_CODE(pack_integer(bref, nsag_cell_resel_prio_r17, (uint8_t)0u, (uint8_t)7u));
  }
  if (nsag_cell_resel_sub_prio_r17_present) {
    HANDLE_CODE(nsag_cell_resel_sub_prio_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE slice_info_ded_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(nsag_cell_resel_prio_r17_present, 1));
  HANDLE_CODE(bref.unpack(nsag_cell_resel_sub_prio_r17_present, 1));

  HANDLE_CODE(nsag_id_info_r17.unpack(bref));
  if (nsag_cell_resel_prio_r17_present) {
    HANDLE_CODE(unpack_integer(nsag_cell_resel_prio_r17, bref, (uint8_t)0u, (uint8_t)7u));
  }
  if (nsag_cell_resel_sub_prio_r17_present) {
    HANDLE_CODE(nsag_cell_resel_sub_prio_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void slice_info_ded_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nsag-IdentityInfo-r17");
  nsag_id_info_r17.to_json(j);
  if (nsag_cell_resel_prio_r17_present) {
    j.write_int("nsag-CellReselectionPriority-r17", nsag_cell_resel_prio_r17);
  }
  if (nsag_cell_resel_sub_prio_r17_present) {
    j.write_str("nsag-CellReselectionSubPriority-r17", nsag_cell_resel_sub_prio_r17.to_string());
  }
  j.end_obj();
}

// T312-r16 ::= ENUMERATED
const char* t312_r16_opts::to_string() const
{
  static const char* names[] = {"ms0", "ms50", "ms100", "ms200", "ms300", "ms400", "ms500", "ms1000"};
  return convert_enum_idx(names, 8, value, "t312_r16_e");
}
uint16_t t312_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 50, 100, 200, 300, 400, 500, 1000};
  return map_enum_number(numbers, 8, value, "t312_r16_e");
}

// T316-r16 ::= ENUMERATED
const char* t316_r16_opts::to_string() const
{
  static const char* names[] = {
      "ms50", "ms100", "ms200", "ms300", "ms400", "ms500", "ms600", "ms1000", "ms1500", "ms2000"};
  return convert_enum_idx(names, 10, value, "t316_r16_e");
}
uint16_t t316_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {50, 100, 200, 300, 400, 500, 600, 1000, 1500, 2000};
  return map_enum_number(numbers, 10, value, "t316_r16_e");
}

// TrackingAreaIdentity-r16 ::= SEQUENCE
SRSASN_CODE tracking_area_id_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(plmn_id_r16.pack(bref));
  HANDLE_CODE(tac_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE tracking_area_id_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(plmn_id_r16.unpack(bref));
  HANDLE_CODE(tac_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void tracking_area_id_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("plmn-Identity-r16");
  plmn_id_r16.to_json(j);
  j.write_str("trackingAreaCode-r16", tac_r16.to_string());
  j.end_obj();
}

// UTRA-FDD-Q-OffsetRange-r16 ::= ENUMERATED
const char* utra_fdd_q_offset_range_r16_opts::to_string() const
{
  static const char* names[] = {"dB-24", "dB-22", "dB-20", "dB-18", "dB-16", "dB-14", "dB-12", "dB-10",
                                "dB-8",  "dB-6",  "dB-5",  "dB-4",  "dB-3",  "dB-2",  "dB-1",  "dB0",
                                "dB1",   "dB2",   "dB3",   "dB4",   "dB5",   "dB6",   "dB8",   "dB10",
                                "dB12",  "dB14",  "dB16",  "dB18",  "dB20",  "dB22",  "dB24"};
  return convert_enum_idx(names, 31, value, "utra_fdd_q_offset_range_r16_e");
}
int8_t utra_fdd_q_offset_range_r16_opts::to_number() const
{
  static const int8_t numbers[] = {-24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -5, -4, -3, -2, -1, 0,
                                   1,   2,   3,   4,   5,   6,   8,   10,  12, 14, 16, 18, 20, 22, 24};
  return map_enum_number(numbers, 31, value, "utra_fdd_q_offset_range_r16_e");
}

// ValidityArea-r16 ::= SEQUENCE
SRSASN_CODE validity_area_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(validity_cell_list_r16.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, carrier_freq_r16, (uint32_t)0u, (uint32_t)3279165u));
  if (validity_cell_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, validity_cell_list_r16, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE validity_area_r16_s::unpack(cbit_ref& bref)
{
  bool validity_cell_list_r16_present;
  HANDLE_CODE(bref.unpack(validity_cell_list_r16_present, 1));

  HANDLE_CODE(unpack_integer(carrier_freq_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  if (validity_cell_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(validity_cell_list_r16, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void validity_area_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq-r16", carrier_freq_r16);
  if (validity_cell_list_r16.size() > 0) {
    j.start_array("validityCellList-r16");
    for (const auto& e1 : validity_cell_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// MRDC-SecondaryCellGroupConfig ::= SEQUENCE
SRSASN_CODE mrdc_secondary_cell_group_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mrdc_release_and_add_present, 1));

  HANDLE_CODE(mrdc_secondary_cell_group.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mrdc_secondary_cell_group_cfg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(mrdc_release_and_add_present, 1));

  HANDLE_CODE(mrdc_secondary_cell_group.unpack(bref));

  return SRSASN_SUCCESS;
}
void mrdc_secondary_cell_group_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mrdc_release_and_add_present) {
    j.write_str("mrdc-ReleaseAndAdd", "true");
  }
  j.write_fieldname("mrdc-SecondaryCellGroup");
  mrdc_secondary_cell_group.to_json(j);
  j.end_obj();
}

void mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_::destroy_()
{
  switch (type_) {
    case types::nr_scg:
      c.destroy<dyn_octstring>();
      break;
    case types::eutra_scg:
      c.destroy<dyn_octstring>();
      break;
    default:
      break;
  }
}
void mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::nr_scg:
      c.init<dyn_octstring>();
      break;
    case types::eutra_scg:
      c.init<dyn_octstring>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_");
  }
}
mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_::mrdc_secondary_cell_group_c_(
    const mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::nr_scg:
      c.init(other.c.get<dyn_octstring>());
      break;
    case types::eutra_scg:
      c.init(other.c.get<dyn_octstring>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_");
  }
}
mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_&
mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_::operator=(
    const mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::nr_scg:
      c.set(other.c.get<dyn_octstring>());
      break;
    case types::eutra_scg:
      c.set(other.c.get<dyn_octstring>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_");
  }

  return *this;
}
dyn_octstring& mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_::set_nr_scg()
{
  set(types::nr_scg);
  return c.get<dyn_octstring>();
}
dyn_octstring& mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_::set_eutra_scg()
{
  set(types::eutra_scg);
  return c.get<dyn_octstring>();
}
void mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::nr_scg:
      j.write_str("nr-SCG", c.get<dyn_octstring>().to_string());
      break;
    case types::eutra_scg:
      j.write_str("eutra-SCG", c.get<dyn_octstring>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_");
  }
  j.end_obj();
}
SRSASN_CODE mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::nr_scg:
      HANDLE_CODE(c.get<dyn_octstring>().pack(bref));
      break;
    case types::eutra_scg:
      HANDLE_CODE(c.get<dyn_octstring>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::nr_scg:
      HANDLE_CODE(c.get<dyn_octstring>().unpack(bref));
      break;
    case types::eutra_scg:
      HANDLE_CODE(c.get<dyn_octstring>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_::types_opts::to_string() const
{
  static const char* names[] = {"nr-SCG", "eutra-SCG"};
  return convert_enum_idx(names, 2, value, "mrdc_secondary_cell_group_cfg_s::mrdc_secondary_cell_group_c_::types");
}

// MeasGapSharingScheme ::= ENUMERATED
const char* meas_gap_sharing_scheme_opts::to_string() const
{
  static const char* names[] = {"scheme00", "scheme01", "scheme10", "scheme11"};
  return convert_enum_idx(names, 4, value, "meas_gap_sharing_scheme_e");
}
float meas_gap_sharing_scheme_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.1, 1.0, 1.1};
  return map_enum_number(numbers, 4, value, "meas_gap_sharing_scheme_e");
}
const char* meas_gap_sharing_scheme_opts::to_number_string() const
{
  static const char* number_strs[] = {"0.0", "0.1", "1.0", "1.1"};
  return convert_enum_idx(number_strs, 4, value, "meas_gap_sharing_scheme_e");
}

// MeasObjectCLI-r16 ::= SEQUENCE
SRSASN_CODE meas_obj_cli_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(cli_res_cfg_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_obj_cli_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(cli_res_cfg_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void meas_obj_cli_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("cli-ResourceConfig-r16");
  cli_res_cfg_r16.to_json(j);
  j.end_obj();
}

// MeasObjectEUTRA ::= SEQUENCE
SRSASN_CODE meas_obj_eutra_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cells_to_rem_list_eutran.size() > 0, 1));
  HANDLE_CODE(bref.pack(cells_to_add_mod_list_eutran.size() > 0, 1));
  HANDLE_CODE(bref.pack(excluded_cells_to_rem_list_eutran.size() > 0, 1));
  HANDLE_CODE(bref.pack(excluded_cells_to_add_mod_list_eutran.size() > 0, 1));
  HANDLE_CODE(bref.pack(eutra_q_offset_range_present, 1));

  HANDLE_CODE(pack_integer(bref, carrier_freq, (uint32_t)0u, (uint32_t)262143u));
  HANDLE_CODE(allowed_meas_bw.pack(bref));
  if (cells_to_rem_list_eutran.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_to_rem_list_eutran, 1, 32, integer_packer<uint8_t>(1, 32)));
  }
  if (cells_to_add_mod_list_eutran.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_to_add_mod_list_eutran, 1, 32));
  }
  if (excluded_cells_to_rem_list_eutran.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, excluded_cells_to_rem_list_eutran, 1, 32, integer_packer<uint8_t>(1, 32)));
  }
  if (excluded_cells_to_add_mod_list_eutran.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, excluded_cells_to_add_mod_list_eutran, 1, 32));
  }
  HANDLE_CODE(bref.pack(eutra_presence_ant_port1, 1));
  if (eutra_q_offset_range_present) {
    HANDLE_CODE(eutra_q_offset_range.pack(bref));
  }
  HANDLE_CODE(bref.pack(wideband_rsrq_meas, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= associated_meas_gap_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(associated_meas_gap_r17_present, 1));
      if (associated_meas_gap_r17_present) {
        HANDLE_CODE(pack_integer(bref, associated_meas_gap_r17, (uint8_t)1u, (uint8_t)8u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_obj_eutra_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool cells_to_rem_list_eutran_present;
  HANDLE_CODE(bref.unpack(cells_to_rem_list_eutran_present, 1));
  bool cells_to_add_mod_list_eutran_present;
  HANDLE_CODE(bref.unpack(cells_to_add_mod_list_eutran_present, 1));
  bool excluded_cells_to_rem_list_eutran_present;
  HANDLE_CODE(bref.unpack(excluded_cells_to_rem_list_eutran_present, 1));
  bool excluded_cells_to_add_mod_list_eutran_present;
  HANDLE_CODE(bref.unpack(excluded_cells_to_add_mod_list_eutran_present, 1));
  HANDLE_CODE(bref.unpack(eutra_q_offset_range_present, 1));

  HANDLE_CODE(unpack_integer(carrier_freq, bref, (uint32_t)0u, (uint32_t)262143u));
  HANDLE_CODE(allowed_meas_bw.unpack(bref));
  if (cells_to_rem_list_eutran_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cells_to_rem_list_eutran, bref, 1, 32, integer_packer<uint8_t>(1, 32)));
  }
  if (cells_to_add_mod_list_eutran_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cells_to_add_mod_list_eutran, bref, 1, 32));
  }
  if (excluded_cells_to_rem_list_eutran_present) {
    HANDLE_CODE(unpack_dyn_seq_of(excluded_cells_to_rem_list_eutran, bref, 1, 32, integer_packer<uint8_t>(1, 32)));
  }
  if (excluded_cells_to_add_mod_list_eutran_present) {
    HANDLE_CODE(unpack_dyn_seq_of(excluded_cells_to_add_mod_list_eutran, bref, 1, 32));
  }
  HANDLE_CODE(bref.unpack(eutra_presence_ant_port1, 1));
  if (eutra_q_offset_range_present) {
    HANDLE_CODE(eutra_q_offset_range.unpack(bref));
  }
  HANDLE_CODE(bref.unpack(wideband_rsrq_meas, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(associated_meas_gap_r17_present, 1));
      if (associated_meas_gap_r17_present) {
        HANDLE_CODE(unpack_integer(associated_meas_gap_r17, bref, (uint8_t)1u, (uint8_t)8u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void meas_obj_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq", carrier_freq);
  j.write_str("allowedMeasBandwidth", allowed_meas_bw.to_string());
  if (cells_to_rem_list_eutran.size() > 0) {
    j.start_array("cellsToRemoveListEUTRAN");
    for (const auto& e1 : cells_to_rem_list_eutran) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (cells_to_add_mod_list_eutran.size() > 0) {
    j.start_array("cellsToAddModListEUTRAN");
    for (const auto& e1 : cells_to_add_mod_list_eutran) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (excluded_cells_to_rem_list_eutran.size() > 0) {
    j.start_array("excludedCellsToRemoveListEUTRAN");
    for (const auto& e1 : excluded_cells_to_rem_list_eutran) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (excluded_cells_to_add_mod_list_eutran.size() > 0) {
    j.start_array("excludedCellsToAddModListEUTRAN");
    for (const auto& e1 : excluded_cells_to_add_mod_list_eutran) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_bool("eutra-PresenceAntennaPort1", eutra_presence_ant_port1);
  if (eutra_q_offset_range_present) {
    j.write_str("eutra-Q-OffsetRange", eutra_q_offset_range.to_string());
  }
  j.write_bool("widebandRSRQ-Meas", wideband_rsrq_meas);
  if (ext) {
    if (associated_meas_gap_r17_present) {
      j.write_int("associatedMeasGap-r17", associated_meas_gap_r17);
    }
  }
  j.end_obj();
}

// MeasObjectNR ::= SEQUENCE
SRSASN_CODE meas_obj_nr_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ssb_freq_present, 1));
  HANDLE_CODE(bref.pack(ssb_subcarrier_spacing_present, 1));
  HANDLE_CODE(bref.pack(smtc1_present, 1));
  HANDLE_CODE(bref.pack(smtc2_present, 1));
  HANDLE_CODE(bref.pack(ref_freq_csi_rs_present, 1));
  HANDLE_CODE(bref.pack(abs_thresh_ss_blocks_consolidation_present, 1));
  HANDLE_CODE(bref.pack(abs_thresh_csi_rs_consolidation_present, 1));
  HANDLE_CODE(bref.pack(nrof_ss_blocks_to_average_present, 1));
  HANDLE_CODE(bref.pack(nrof_csi_rs_res_to_average_present, 1));
  HANDLE_CODE(bref.pack(cells_to_rem_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(cells_to_add_mod_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(excluded_cells_to_rem_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(excluded_cells_to_add_mod_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(allowed_cells_to_rem_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(allowed_cells_to_add_mod_list.size() > 0, 1));

  if (ssb_freq_present) {
    HANDLE_CODE(pack_integer(bref, ssb_freq, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (ssb_subcarrier_spacing_present) {
    HANDLE_CODE(ssb_subcarrier_spacing.pack(bref));
  }
  if (smtc1_present) {
    HANDLE_CODE(smtc1.pack(bref));
  }
  if (smtc2_present) {
    HANDLE_CODE(smtc2.pack(bref));
  }
  if (ref_freq_csi_rs_present) {
    HANDLE_CODE(pack_integer(bref, ref_freq_csi_rs, (uint32_t)0u, (uint32_t)3279165u));
  }
  HANDLE_CODE(ref_sig_cfg.pack(bref));
  if (abs_thresh_ss_blocks_consolidation_present) {
    HANDLE_CODE(abs_thresh_ss_blocks_consolidation.pack(bref));
  }
  if (abs_thresh_csi_rs_consolidation_present) {
    HANDLE_CODE(abs_thresh_csi_rs_consolidation.pack(bref));
  }
  if (nrof_ss_blocks_to_average_present) {
    HANDLE_CODE(pack_integer(bref, nrof_ss_blocks_to_average, (uint8_t)2u, (uint8_t)16u));
  }
  if (nrof_csi_rs_res_to_average_present) {
    HANDLE_CODE(pack_integer(bref, nrof_csi_rs_res_to_average, (uint8_t)2u, (uint8_t)16u));
  }
  HANDLE_CODE(pack_integer(bref, quant_cfg_idx, (uint8_t)1u, (uint8_t)2u));
  HANDLE_CODE(offset_mo.pack(bref));
  if (cells_to_rem_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_to_rem_list, 1, 32, integer_packer<uint16_t>(0, 1007)));
  }
  if (cells_to_add_mod_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_to_add_mod_list, 1, 32));
  }
  if (excluded_cells_to_rem_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, excluded_cells_to_rem_list, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (excluded_cells_to_add_mod_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, excluded_cells_to_add_mod_list, 1, 8));
  }
  if (allowed_cells_to_rem_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, allowed_cells_to_rem_list, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (allowed_cells_to_add_mod_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, allowed_cells_to_add_mod_list, 1, 8));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= freq_band_ind_nr_present;
    group_flags[0] |= meas_cycle_scell_present;
    group_flags[1] |= smtc3list_r16.is_present();
    group_flags[1] |= rmtc_cfg_r16.is_present();
    group_flags[1] |= t312_r16.is_present();
    group_flags[2] |= associated_meas_gap_ssb_r17_present;
    group_flags[2] |= associated_meas_gap_csi_rs_r17_present;
    group_flags[2] |= smtc4list_r17.is_present();
    group_flags[2] |= meas_cycle_pscell_r17_present;
    group_flags[2] |= cells_to_add_mod_list_ext_v1710.is_present();
    group_flags[3] |= associated_meas_gap_ssb2_v1720_present;
    group_flags[3] |= associated_meas_gap_csi_rs2_v1720_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(freq_band_ind_nr_present, 1));
      HANDLE_CODE(bref.pack(meas_cycle_scell_present, 1));
      if (freq_band_ind_nr_present) {
        HANDLE_CODE(pack_integer(bref, freq_band_ind_nr, (uint16_t)1u, (uint16_t)1024u));
      }
      if (meas_cycle_scell_present) {
        HANDLE_CODE(meas_cycle_scell.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(smtc3list_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(rmtc_cfg_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(t312_r16.is_present(), 1));
      if (smtc3list_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *smtc3list_r16, 1, 4));
      }
      if (rmtc_cfg_r16.is_present()) {
        HANDLE_CODE(rmtc_cfg_r16->pack(bref));
      }
      if (t312_r16.is_present()) {
        HANDLE_CODE(t312_r16->pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(associated_meas_gap_ssb_r17_present, 1));
      HANDLE_CODE(bref.pack(associated_meas_gap_csi_rs_r17_present, 1));
      HANDLE_CODE(bref.pack(smtc4list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(meas_cycle_pscell_r17_present, 1));
      HANDLE_CODE(bref.pack(cells_to_add_mod_list_ext_v1710.is_present(), 1));
      if (associated_meas_gap_ssb_r17_present) {
        HANDLE_CODE(pack_integer(bref, associated_meas_gap_ssb_r17, (uint8_t)1u, (uint8_t)8u));
      }
      if (associated_meas_gap_csi_rs_r17_present) {
        HANDLE_CODE(pack_integer(bref, associated_meas_gap_csi_rs_r17, (uint8_t)1u, (uint8_t)8u));
      }
      if (smtc4list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *smtc4list_r17, 1, 3));
      }
      if (meas_cycle_pscell_r17_present) {
        HANDLE_CODE(meas_cycle_pscell_r17.pack(bref));
      }
      if (cells_to_add_mod_list_ext_v1710.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *cells_to_add_mod_list_ext_v1710, 1, 32));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(associated_meas_gap_ssb2_v1720_present, 1));
      HANDLE_CODE(bref.pack(associated_meas_gap_csi_rs2_v1720_present, 1));
      if (associated_meas_gap_ssb2_v1720_present) {
        HANDLE_CODE(pack_integer(bref, associated_meas_gap_ssb2_v1720, (uint8_t)1u, (uint8_t)8u));
      }
      if (associated_meas_gap_csi_rs2_v1720_present) {
        HANDLE_CODE(pack_integer(bref, associated_meas_gap_csi_rs2_v1720, (uint8_t)1u, (uint8_t)8u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_obj_nr_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ssb_freq_present, 1));
  HANDLE_CODE(bref.unpack(ssb_subcarrier_spacing_present, 1));
  HANDLE_CODE(bref.unpack(smtc1_present, 1));
  HANDLE_CODE(bref.unpack(smtc2_present, 1));
  HANDLE_CODE(bref.unpack(ref_freq_csi_rs_present, 1));
  HANDLE_CODE(bref.unpack(abs_thresh_ss_blocks_consolidation_present, 1));
  HANDLE_CODE(bref.unpack(abs_thresh_csi_rs_consolidation_present, 1));
  HANDLE_CODE(bref.unpack(nrof_ss_blocks_to_average_present, 1));
  HANDLE_CODE(bref.unpack(nrof_csi_rs_res_to_average_present, 1));
  bool cells_to_rem_list_present;
  HANDLE_CODE(bref.unpack(cells_to_rem_list_present, 1));
  bool cells_to_add_mod_list_present;
  HANDLE_CODE(bref.unpack(cells_to_add_mod_list_present, 1));
  bool excluded_cells_to_rem_list_present;
  HANDLE_CODE(bref.unpack(excluded_cells_to_rem_list_present, 1));
  bool excluded_cells_to_add_mod_list_present;
  HANDLE_CODE(bref.unpack(excluded_cells_to_add_mod_list_present, 1));
  bool allowed_cells_to_rem_list_present;
  HANDLE_CODE(bref.unpack(allowed_cells_to_rem_list_present, 1));
  bool allowed_cells_to_add_mod_list_present;
  HANDLE_CODE(bref.unpack(allowed_cells_to_add_mod_list_present, 1));

  if (ssb_freq_present) {
    HANDLE_CODE(unpack_integer(ssb_freq, bref, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (ssb_subcarrier_spacing_present) {
    HANDLE_CODE(ssb_subcarrier_spacing.unpack(bref));
  }
  if (smtc1_present) {
    HANDLE_CODE(smtc1.unpack(bref));
  }
  if (smtc2_present) {
    HANDLE_CODE(smtc2.unpack(bref));
  }
  if (ref_freq_csi_rs_present) {
    HANDLE_CODE(unpack_integer(ref_freq_csi_rs, bref, (uint32_t)0u, (uint32_t)3279165u));
  }
  HANDLE_CODE(ref_sig_cfg.unpack(bref));
  if (abs_thresh_ss_blocks_consolidation_present) {
    HANDLE_CODE(abs_thresh_ss_blocks_consolidation.unpack(bref));
  }
  if (abs_thresh_csi_rs_consolidation_present) {
    HANDLE_CODE(abs_thresh_csi_rs_consolidation.unpack(bref));
  }
  if (nrof_ss_blocks_to_average_present) {
    HANDLE_CODE(unpack_integer(nrof_ss_blocks_to_average, bref, (uint8_t)2u, (uint8_t)16u));
  }
  if (nrof_csi_rs_res_to_average_present) {
    HANDLE_CODE(unpack_integer(nrof_csi_rs_res_to_average, bref, (uint8_t)2u, (uint8_t)16u));
  }
  HANDLE_CODE(unpack_integer(quant_cfg_idx, bref, (uint8_t)1u, (uint8_t)2u));
  HANDLE_CODE(offset_mo.unpack(bref));
  if (cells_to_rem_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cells_to_rem_list, bref, 1, 32, integer_packer<uint16_t>(0, 1007)));
  }
  if (cells_to_add_mod_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cells_to_add_mod_list, bref, 1, 32));
  }
  if (excluded_cells_to_rem_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(excluded_cells_to_rem_list, bref, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (excluded_cells_to_add_mod_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(excluded_cells_to_add_mod_list, bref, 1, 8));
  }
  if (allowed_cells_to_rem_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(allowed_cells_to_rem_list, bref, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (allowed_cells_to_add_mod_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(allowed_cells_to_add_mod_list, bref, 1, 8));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(4);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(freq_band_ind_nr_present, 1));
      HANDLE_CODE(bref.unpack(meas_cycle_scell_present, 1));
      if (freq_band_ind_nr_present) {
        HANDLE_CODE(unpack_integer(freq_band_ind_nr, bref, (uint16_t)1u, (uint16_t)1024u));
      }
      if (meas_cycle_scell_present) {
        HANDLE_CODE(meas_cycle_scell.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(smtc3list_r16, bref);
      unpack_presence_flag(rmtc_cfg_r16, bref);
      unpack_presence_flag(t312_r16, bref);
      if (smtc3list_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*smtc3list_r16, bref, 1, 4));
      }
      if (rmtc_cfg_r16.is_present()) {
        HANDLE_CODE(rmtc_cfg_r16->unpack(bref));
      }
      if (t312_r16.is_present()) {
        HANDLE_CODE(t312_r16->unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(associated_meas_gap_ssb_r17_present, 1));
      HANDLE_CODE(bref.unpack(associated_meas_gap_csi_rs_r17_present, 1));
      unpack_presence_flag(smtc4list_r17, bref);
      HANDLE_CODE(bref.unpack(meas_cycle_pscell_r17_present, 1));
      unpack_presence_flag(cells_to_add_mod_list_ext_v1710, bref);
      if (associated_meas_gap_ssb_r17_present) {
        HANDLE_CODE(unpack_integer(associated_meas_gap_ssb_r17, bref, (uint8_t)1u, (uint8_t)8u));
      }
      if (associated_meas_gap_csi_rs_r17_present) {
        HANDLE_CODE(unpack_integer(associated_meas_gap_csi_rs_r17, bref, (uint8_t)1u, (uint8_t)8u));
      }
      if (smtc4list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*smtc4list_r17, bref, 1, 3));
      }
      if (meas_cycle_pscell_r17_present) {
        HANDLE_CODE(meas_cycle_pscell_r17.unpack(bref));
      }
      if (cells_to_add_mod_list_ext_v1710.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*cells_to_add_mod_list_ext_v1710, bref, 1, 32));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(associated_meas_gap_ssb2_v1720_present, 1));
      HANDLE_CODE(bref.unpack(associated_meas_gap_csi_rs2_v1720_present, 1));
      if (associated_meas_gap_ssb2_v1720_present) {
        HANDLE_CODE(unpack_integer(associated_meas_gap_ssb2_v1720, bref, (uint8_t)1u, (uint8_t)8u));
      }
      if (associated_meas_gap_csi_rs2_v1720_present) {
        HANDLE_CODE(unpack_integer(associated_meas_gap_csi_rs2_v1720, bref, (uint8_t)1u, (uint8_t)8u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void meas_obj_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ssb_freq_present) {
    j.write_int("ssbFrequency", ssb_freq);
  }
  if (ssb_subcarrier_spacing_present) {
    j.write_str("ssbSubcarrierSpacing", ssb_subcarrier_spacing.to_string());
  }
  if (smtc1_present) {
    j.write_fieldname("smtc1");
    smtc1.to_json(j);
  }
  if (smtc2_present) {
    j.write_fieldname("smtc2");
    smtc2.to_json(j);
  }
  if (ref_freq_csi_rs_present) {
    j.write_int("refFreqCSI-RS", ref_freq_csi_rs);
  }
  j.write_fieldname("referenceSignalConfig");
  ref_sig_cfg.to_json(j);
  if (abs_thresh_ss_blocks_consolidation_present) {
    j.write_fieldname("absThreshSS-BlocksConsolidation");
    abs_thresh_ss_blocks_consolidation.to_json(j);
  }
  if (abs_thresh_csi_rs_consolidation_present) {
    j.write_fieldname("absThreshCSI-RS-Consolidation");
    abs_thresh_csi_rs_consolidation.to_json(j);
  }
  if (nrof_ss_blocks_to_average_present) {
    j.write_int("nrofSS-BlocksToAverage", nrof_ss_blocks_to_average);
  }
  if (nrof_csi_rs_res_to_average_present) {
    j.write_int("nrofCSI-RS-ResourcesToAverage", nrof_csi_rs_res_to_average);
  }
  j.write_int("quantityConfigIndex", quant_cfg_idx);
  j.write_fieldname("offsetMO");
  offset_mo.to_json(j);
  if (cells_to_rem_list.size() > 0) {
    j.start_array("cellsToRemoveList");
    for (const auto& e1 : cells_to_rem_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (cells_to_add_mod_list.size() > 0) {
    j.start_array("cellsToAddModList");
    for (const auto& e1 : cells_to_add_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (excluded_cells_to_rem_list.size() > 0) {
    j.start_array("excludedCellsToRemoveList");
    for (const auto& e1 : excluded_cells_to_rem_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (excluded_cells_to_add_mod_list.size() > 0) {
    j.start_array("excludedCellsToAddModList");
    for (const auto& e1 : excluded_cells_to_add_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (allowed_cells_to_rem_list.size() > 0) {
    j.start_array("allowedCellsToRemoveList");
    for (const auto& e1 : allowed_cells_to_rem_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (allowed_cells_to_add_mod_list.size() > 0) {
    j.start_array("allowedCellsToAddModList");
    for (const auto& e1 : allowed_cells_to_add_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ext) {
    if (freq_band_ind_nr_present) {
      j.write_int("freqBandIndicatorNR", freq_band_ind_nr);
    }
    if (meas_cycle_scell_present) {
      j.write_str("measCycleSCell", meas_cycle_scell.to_string());
    }
    if (smtc3list_r16.is_present()) {
      j.start_array("smtc3list-r16");
      for (const auto& e1 : *smtc3list_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (rmtc_cfg_r16.is_present()) {
      j.write_fieldname("rmtc-Config-r16");
      rmtc_cfg_r16->to_json(j);
    }
    if (t312_r16.is_present()) {
      j.write_fieldname("t312-r16");
      t312_r16->to_json(j);
    }
    if (associated_meas_gap_ssb_r17_present) {
      j.write_int("associatedMeasGapSSB-r17", associated_meas_gap_ssb_r17);
    }
    if (associated_meas_gap_csi_rs_r17_present) {
      j.write_int("associatedMeasGapCSIRS-r17", associated_meas_gap_csi_rs_r17);
    }
    if (smtc4list_r17.is_present()) {
      j.start_array("smtc4list-r17");
      for (const auto& e1 : *smtc4list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (meas_cycle_pscell_r17_present) {
      j.write_str("measCyclePSCell-r17", meas_cycle_pscell_r17.to_string());
    }
    if (cells_to_add_mod_list_ext_v1710.is_present()) {
      j.start_array("cellsToAddModListExt-v1710");
      for (const auto& e1 : *cells_to_add_mod_list_ext_v1710) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (associated_meas_gap_ssb2_v1720_present) {
      j.write_int("associatedMeasGapSSB2-v1720", associated_meas_gap_ssb2_v1720);
    }
    if (associated_meas_gap_csi_rs2_v1720_present) {
      j.write_int("associatedMeasGapCSIRS2-v1720", associated_meas_gap_csi_rs2_v1720);
    }
  }
  j.end_obj();
}

const char* meas_obj_nr_s::meas_cycle_scell_opts::to_string() const
{
  static const char* names[] = {"sf160", "sf256", "sf320", "sf512", "sf640", "sf1024", "sf1280"};
  return convert_enum_idx(names, 7, value, "meas_obj_nr_s::meas_cycle_scell_e_");
}
uint16_t meas_obj_nr_s::meas_cycle_scell_opts::to_number() const
{
  static const uint16_t numbers[] = {160, 256, 320, 512, 640, 1024, 1280};
  return map_enum_number(numbers, 7, value, "meas_obj_nr_s::meas_cycle_scell_e_");
}

const char* meas_obj_nr_s::meas_cycle_pscell_r17_opts::to_string() const
{
  static const char* names[] = {"ms160", "ms256", "ms320", "ms512", "ms640", "ms1024", "ms1280", "spare1"};
  return convert_enum_idx(names, 8, value, "meas_obj_nr_s::meas_cycle_pscell_r17_e_");
}
uint16_t meas_obj_nr_s::meas_cycle_pscell_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {160, 256, 320, 512, 640, 1024, 1280};
  return map_enum_number(numbers, 7, value, "meas_obj_nr_s::meas_cycle_pscell_r17_e_");
}

// MeasObjectNR-SL-r16 ::= SEQUENCE
SRSASN_CODE meas_obj_nr_sl_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(tx_pool_meas_to_rem_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(tx_pool_meas_to_add_mod_list_r16.size() > 0, 1));

  if (tx_pool_meas_to_rem_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, tx_pool_meas_to_rem_list_r16, 1, 8, integer_packer<uint8_t>(1, 16)));
  }
  if (tx_pool_meas_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, tx_pool_meas_to_add_mod_list_r16, 1, 8, integer_packer<uint8_t>(1, 16)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_obj_nr_sl_r16_s::unpack(cbit_ref& bref)
{
  bool tx_pool_meas_to_rem_list_r16_present;
  HANDLE_CODE(bref.unpack(tx_pool_meas_to_rem_list_r16_present, 1));
  bool tx_pool_meas_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(tx_pool_meas_to_add_mod_list_r16_present, 1));

  if (tx_pool_meas_to_rem_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(tx_pool_meas_to_rem_list_r16, bref, 1, 8, integer_packer<uint8_t>(1, 16)));
  }
  if (tx_pool_meas_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(tx_pool_meas_to_add_mod_list_r16, bref, 1, 8, integer_packer<uint8_t>(1, 16)));
  }

  return SRSASN_SUCCESS;
}
void meas_obj_nr_sl_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (tx_pool_meas_to_rem_list_r16.size() > 0) {
    j.start_array("tx-PoolMeasToRemoveList-r16");
    for (const auto& e1 : tx_pool_meas_to_rem_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (tx_pool_meas_to_add_mod_list_r16.size() > 0) {
    j.start_array("tx-PoolMeasToAddModList-r16");
    for (const auto& e1 : tx_pool_meas_to_add_mod_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// MeasObjectRxTxDiff-r17 ::= SEQUENCE
SRSASN_CODE meas_obj_rx_tx_diff_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(dl_ref_r17_present, 1));

  if (dl_ref_r17_present) {
    HANDLE_CODE(dl_ref_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_obj_rx_tx_diff_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(dl_ref_r17_present, 1));

  if (dl_ref_r17_present) {
    HANDLE_CODE(dl_ref_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_obj_rx_tx_diff_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dl_ref_r17_present) {
    j.write_fieldname("dl-Ref-r17");
    dl_ref_r17.to_json(j);
  }
  j.end_obj();
}

void meas_obj_rx_tx_diff_r17_s::dl_ref_r17_c_::set(types::options e)
{
  type_ = e;
}
void meas_obj_rx_tx_diff_r17_s::dl_ref_r17_c_::set_prs_ref_r17()
{
  set(types::prs_ref_r17);
}
void meas_obj_rx_tx_diff_r17_s::dl_ref_r17_c_::set_csi_rs_ref_r17()
{
  set(types::csi_rs_ref_r17);
}
void meas_obj_rx_tx_diff_r17_s::dl_ref_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  j.end_obj();
}
SRSASN_CODE meas_obj_rx_tx_diff_r17_s::dl_ref_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_obj_rx_tx_diff_r17_s::dl_ref_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  return SRSASN_SUCCESS;
}

const char* meas_obj_rx_tx_diff_r17_s::dl_ref_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"prs-Ref-r17", "csi-RS-Ref-r17"};
  return convert_enum_idx(names, 2, value, "meas_obj_rx_tx_diff_r17_s::dl_ref_r17_c_::types");
}

// MeasObjectUTRA-FDD-r16 ::= SEQUENCE
SRSASN_CODE meas_obj_utra_fdd_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(utra_fdd_q_offset_range_r16_present, 1));
  HANDLE_CODE(bref.pack(cells_to_rem_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(cells_to_add_mod_list_r16.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, carrier_freq_r16, (uint16_t)0u, (uint16_t)16383u));
  if (utra_fdd_q_offset_range_r16_present) {
    HANDLE_CODE(utra_fdd_q_offset_range_r16.pack(bref));
  }
  if (cells_to_rem_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_to_rem_list_r16, 1, 32, integer_packer<uint8_t>(1, 32)));
  }
  if (cells_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_to_add_mod_list_r16, 1, 32));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_obj_utra_fdd_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(utra_fdd_q_offset_range_r16_present, 1));
  bool cells_to_rem_list_r16_present;
  HANDLE_CODE(bref.unpack(cells_to_rem_list_r16_present, 1));
  bool cells_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(cells_to_add_mod_list_r16_present, 1));

  HANDLE_CODE(unpack_integer(carrier_freq_r16, bref, (uint16_t)0u, (uint16_t)16383u));
  if (utra_fdd_q_offset_range_r16_present) {
    HANDLE_CODE(utra_fdd_q_offset_range_r16.unpack(bref));
  }
  if (cells_to_rem_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cells_to_rem_list_r16, bref, 1, 32, integer_packer<uint8_t>(1, 32)));
  }
  if (cells_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cells_to_add_mod_list_r16, bref, 1, 32));
  }

  return SRSASN_SUCCESS;
}
void meas_obj_utra_fdd_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq-r16", carrier_freq_r16);
  if (utra_fdd_q_offset_range_r16_present) {
    j.write_str("utra-FDD-Q-OffsetRange-r16", utra_fdd_q_offset_range_r16.to_string());
  }
  if (cells_to_rem_list_r16.size() > 0) {
    j.start_array("cellsToRemoveList-r16");
    for (const auto& e1 : cells_to_rem_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (cells_to_add_mod_list_r16.size() > 0) {
    j.start_array("cellsToAddModList-r16");
    for (const auto& e1 : cells_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// OverheatingAssistanceConfig ::= SEQUENCE
SRSASN_CODE overheat_assist_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(overheat_ind_prohibit_timer.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE overheat_assist_cfg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(overheat_ind_prohibit_timer.unpack(bref));

  return SRSASN_SUCCESS;
}
void overheat_assist_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("overheatingIndicationProhibitTimer", overheat_ind_prohibit_timer.to_string());
  j.end_obj();
}

const char* overheat_assist_cfg_s::overheat_ind_prohibit_timer_opts::to_string() const
{
  static const char* names[] = {"s0",
                                "s0dot5",
                                "s1",
                                "s2",
                                "s5",
                                "s10",
                                "s20",
                                "s30",
                                "s60",
                                "s90",
                                "s120",
                                "s300",
                                "s600",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "overheat_assist_cfg_s::overheat_ind_prohibit_timer_e_");
}
float overheat_assist_cfg_s::overheat_ind_prohibit_timer_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 30.0, 60.0, 90.0, 120.0, 300.0, 600.0};
  return map_enum_number(numbers, 13, value, "overheat_assist_cfg_s::overheat_ind_prohibit_timer_e_");
}
const char* overheat_assist_cfg_s::overheat_ind_prohibit_timer_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.5", "1", "2", "5", "10", "20", "30", "60", "90", "120", "300", "600"};
  return convert_enum_idx(number_strs, 16, value, "overheat_assist_cfg_s::overheat_ind_prohibit_timer_e_");
}

// PLMN-RAN-AreaCell ::= SEQUENCE
SRSASN_CODE plmn_ran_area_cell_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(plmn_id_present, 1));

  if (plmn_id_present) {
    HANDLE_CODE(plmn_id.pack(bref));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, ran_area_cells, 1, 32));

  return SRSASN_SUCCESS;
}
SRSASN_CODE plmn_ran_area_cell_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(plmn_id_present, 1));

  if (plmn_id_present) {
    HANDLE_CODE(plmn_id.unpack(bref));
  }
  HANDLE_CODE(unpack_dyn_seq_of(ran_area_cells, bref, 1, 32));

  return SRSASN_SUCCESS;
}
void plmn_ran_area_cell_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (plmn_id_present) {
    j.write_fieldname("plmn-Identity");
    plmn_id.to_json(j);
  }
  j.start_array("ran-AreaCells");
  for (const auto& e1 : ran_area_cells) {
    j.write_str(e1.to_string());
  }
  j.end_array();
  j.end_obj();
}

// PLMN-RAN-AreaConfig ::= SEQUENCE
SRSASN_CODE plmn_ran_area_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(plmn_id_present, 1));

  if (plmn_id_present) {
    HANDLE_CODE(plmn_id.pack(bref));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, ran_area, 1, 16));

  return SRSASN_SUCCESS;
}
SRSASN_CODE plmn_ran_area_cfg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(plmn_id_present, 1));

  if (plmn_id_present) {
    HANDLE_CODE(plmn_id.unpack(bref));
  }
  HANDLE_CODE(unpack_dyn_seq_of(ran_area, bref, 1, 16));

  return SRSASN_SUCCESS;
}
void plmn_ran_area_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (plmn_id_present) {
    j.write_fieldname("plmn-Identity");
    plmn_id.to_json(j);
  }
  j.start_array("ran-Area");
  for (const auto& e1 : ran_area) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// PosGapConfig-r17 ::= SEQUENCE
SRSASN_CODE pos_gap_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, meas_pos_pre_cfg_gap_id_r17, (uint8_t)1u, (uint8_t)16u));
  HANDLE_CODE(pack_integer(bref, gap_offset_r17, (uint8_t)0u, (uint8_t)159u));
  HANDLE_CODE(mgl_r17.pack(bref));
  HANDLE_CODE(mgrp_r17.pack(bref));
  HANDLE_CODE(mgta_r17.pack(bref));
  HANDLE_CODE(gap_type_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pos_gap_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(meas_pos_pre_cfg_gap_id_r17, bref, (uint8_t)1u, (uint8_t)16u));
  HANDLE_CODE(unpack_integer(gap_offset_r17, bref, (uint8_t)0u, (uint8_t)159u));
  HANDLE_CODE(mgl_r17.unpack(bref));
  HANDLE_CODE(mgrp_r17.unpack(bref));
  HANDLE_CODE(mgta_r17.unpack(bref));
  HANDLE_CODE(gap_type_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void pos_gap_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("measPosPreConfigGapId-r17", meas_pos_pre_cfg_gap_id_r17);
  j.write_int("gapOffset-r17", gap_offset_r17);
  j.write_str("mgl-r17", mgl_r17.to_string());
  j.write_str("mgrp-r17", mgrp_r17.to_string());
  j.write_str("mgta-r17", mgta_r17.to_string());
  j.write_str("gapType-r17", gap_type_r17.to_string());
  j.end_obj();
}

const char* pos_gap_cfg_r17_s::mgl_r17_opts::to_string() const
{
  static const char* names[] = {"ms1dot5", "ms3", "ms3dot5", "ms4", "ms5dot5", "ms6", "ms10", "ms20"};
  return convert_enum_idx(names, 8, value, "pos_gap_cfg_r17_s::mgl_r17_e_");
}
float pos_gap_cfg_r17_s::mgl_r17_opts::to_number() const
{
  static const float numbers[] = {1.5, 3.0, 3.5, 4.0, 5.5, 6.0, 10.0, 20.0};
  return map_enum_number(numbers, 8, value, "pos_gap_cfg_r17_s::mgl_r17_e_");
}
const char* pos_gap_cfg_r17_s::mgl_r17_opts::to_number_string() const
{
  static const char* number_strs[] = {"1.5", "3", "3.5", "4", "5.5", "6", "10", "20"};
  return convert_enum_idx(number_strs, 8, value, "pos_gap_cfg_r17_s::mgl_r17_e_");
}

const char* pos_gap_cfg_r17_s::mgrp_r17_opts::to_string() const
{
  static const char* names[] = {"ms20", "ms40", "ms80", "ms160"};
  return convert_enum_idx(names, 4, value, "pos_gap_cfg_r17_s::mgrp_r17_e_");
}
uint8_t pos_gap_cfg_r17_s::mgrp_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {20, 40, 80, 160};
  return map_enum_number(numbers, 4, value, "pos_gap_cfg_r17_s::mgrp_r17_e_");
}

const char* pos_gap_cfg_r17_s::mgta_r17_opts::to_string() const
{
  static const char* names[] = {"ms0", "ms0dot25", "ms0dot5"};
  return convert_enum_idx(names, 3, value, "pos_gap_cfg_r17_s::mgta_r17_e_");
}
float pos_gap_cfg_r17_s::mgta_r17_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.25, 0.5};
  return map_enum_number(numbers, 3, value, "pos_gap_cfg_r17_s::mgta_r17_e_");
}
const char* pos_gap_cfg_r17_s::mgta_r17_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.25", "0.5"};
  return convert_enum_idx(number_strs, 3, value, "pos_gap_cfg_r17_s::mgta_r17_e_");
}

const char* pos_gap_cfg_r17_s::gap_type_r17_opts::to_string() const
{
  static const char* names[] = {"perUE", "perFR1", "perFR2"};
  return convert_enum_idx(names, 3, value, "pos_gap_cfg_r17_s::gap_type_r17_e_");
}
uint8_t pos_gap_cfg_r17_s::gap_type_r17_opts::to_number() const
{
  switch (value) {
    case per_fr1:
      return 1;
    case per_fr2:
      return 2;
    default:
      invalid_enum_number(value, "pos_gap_cfg_r17_s::gap_type_r17_e_");
  }
  return 0;
}

// QuantityConfigRS ::= SEQUENCE
SRSASN_CODE quant_cfg_rs_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(ssb_filt_cfg.pack(bref));
  HANDLE_CODE(csi_rs_filt_cfg.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE quant_cfg_rs_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(ssb_filt_cfg.unpack(bref));
  HANDLE_CODE(csi_rs_filt_cfg.unpack(bref));

  return SRSASN_SUCCESS;
}
void quant_cfg_rs_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("ssb-FilterConfig");
  ssb_filt_cfg.to_json(j);
  j.write_fieldname("csi-RS-FilterConfig");
  csi_rs_filt_cfg.to_json(j);
  j.end_obj();
}

// RRCReconfiguration-v1610-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(other_cfg_v1610_present, 1));
  HANDLE_CODE(bref.pack(bap_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(iab_ip_address_cfg_list_r16_present, 1));
  HANDLE_CODE(bref.pack(conditional_recfg_r16_present, 1));
  HANDLE_CODE(bref.pack(daps_source_release_r16_present, 1));
  HANDLE_CODE(bref.pack(t316_r16_present, 1));
  HANDLE_CODE(bref.pack(need_for_gaps_cfg_nr_r16_present, 1));
  HANDLE_CODE(bref.pack(on_demand_sib_request_r16_present, 1));
  HANDLE_CODE(bref.pack(ded_pos_sys_info_delivery_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_cfg_ded_nr_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_cfg_ded_eutra_info_r16_present, 1));
  HANDLE_CODE(bref.pack(target_cell_smtc_scg_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (other_cfg_v1610_present) {
    HANDLE_CODE(other_cfg_v1610.pack(bref));
  }
  if (bap_cfg_r16_present) {
    HANDLE_CODE(bap_cfg_r16.pack(bref));
  }
  if (iab_ip_address_cfg_list_r16_present) {
    HANDLE_CODE(iab_ip_address_cfg_list_r16.pack(bref));
  }
  if (conditional_recfg_r16_present) {
    HANDLE_CODE(conditional_recfg_r16.pack(bref));
  }
  if (t316_r16_present) {
    HANDLE_CODE(t316_r16.pack(bref));
  }
  if (need_for_gaps_cfg_nr_r16_present) {
    HANDLE_CODE(need_for_gaps_cfg_nr_r16.pack(bref));
  }
  if (on_demand_sib_request_r16_present) {
    HANDLE_CODE(on_demand_sib_request_r16.pack(bref));
  }
  if (ded_pos_sys_info_delivery_r16.size() > 0) {
    HANDLE_CODE(ded_pos_sys_info_delivery_r16.pack(bref));
  }
  if (sl_cfg_ded_nr_r16_present) {
    HANDLE_CODE(sl_cfg_ded_nr_r16.pack(bref));
  }
  if (sl_cfg_ded_eutra_info_r16_present) {
    HANDLE_CODE(sl_cfg_ded_eutra_info_r16.pack(bref));
  }
  if (target_cell_smtc_scg_r16_present) {
    HANDLE_CODE(target_cell_smtc_scg_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(other_cfg_v1610_present, 1));
  HANDLE_CODE(bref.unpack(bap_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(iab_ip_address_cfg_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(conditional_recfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(daps_source_release_r16_present, 1));
  HANDLE_CODE(bref.unpack(t316_r16_present, 1));
  HANDLE_CODE(bref.unpack(need_for_gaps_cfg_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(on_demand_sib_request_r16_present, 1));
  bool ded_pos_sys_info_delivery_r16_present;
  HANDLE_CODE(bref.unpack(ded_pos_sys_info_delivery_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_cfg_ded_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_cfg_ded_eutra_info_r16_present, 1));
  HANDLE_CODE(bref.unpack(target_cell_smtc_scg_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (other_cfg_v1610_present) {
    HANDLE_CODE(other_cfg_v1610.unpack(bref));
  }
  if (bap_cfg_r16_present) {
    HANDLE_CODE(bap_cfg_r16.unpack(bref));
  }
  if (iab_ip_address_cfg_list_r16_present) {
    HANDLE_CODE(iab_ip_address_cfg_list_r16.unpack(bref));
  }
  if (conditional_recfg_r16_present) {
    HANDLE_CODE(conditional_recfg_r16.unpack(bref));
  }
  if (t316_r16_present) {
    HANDLE_CODE(t316_r16.unpack(bref));
  }
  if (need_for_gaps_cfg_nr_r16_present) {
    HANDLE_CODE(need_for_gaps_cfg_nr_r16.unpack(bref));
  }
  if (on_demand_sib_request_r16_present) {
    HANDLE_CODE(on_demand_sib_request_r16.unpack(bref));
  }
  if (ded_pos_sys_info_delivery_r16_present) {
    HANDLE_CODE(ded_pos_sys_info_delivery_r16.unpack(bref));
  }
  if (sl_cfg_ded_nr_r16_present) {
    HANDLE_CODE(sl_cfg_ded_nr_r16.unpack(bref));
  }
  if (sl_cfg_ded_eutra_info_r16_present) {
    HANDLE_CODE(sl_cfg_ded_eutra_info_r16.unpack(bref));
  }
  if (target_cell_smtc_scg_r16_present) {
    HANDLE_CODE(target_cell_smtc_scg_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (other_cfg_v1610_present) {
    j.write_fieldname("otherConfig-v1610");
    other_cfg_v1610.to_json(j);
  }
  if (bap_cfg_r16_present) {
    j.write_fieldname("bap-Config-r16");
    bap_cfg_r16.to_json(j);
  }
  if (iab_ip_address_cfg_list_r16_present) {
    j.write_fieldname("iab-IP-AddressConfigurationList-r16");
    iab_ip_address_cfg_list_r16.to_json(j);
  }
  if (conditional_recfg_r16_present) {
    j.write_fieldname("conditionalReconfiguration-r16");
    conditional_recfg_r16.to_json(j);
  }
  if (daps_source_release_r16_present) {
    j.write_str("daps-SourceRelease-r16", "true");
  }
  if (t316_r16_present) {
    j.write_fieldname("t316-r16");
    t316_r16.to_json(j);
  }
  if (need_for_gaps_cfg_nr_r16_present) {
    j.write_fieldname("needForGapsConfigNR-r16");
    need_for_gaps_cfg_nr_r16.to_json(j);
  }
  if (on_demand_sib_request_r16_present) {
    j.write_fieldname("onDemandSIB-Request-r16");
    on_demand_sib_request_r16.to_json(j);
  }
  if (ded_pos_sys_info_delivery_r16.size() > 0) {
    j.write_str("dedicatedPosSysInfoDelivery-r16", ded_pos_sys_info_delivery_r16.to_string());
  }
  if (sl_cfg_ded_nr_r16_present) {
    j.write_fieldname("sl-ConfigDedicatedNR-r16");
    sl_cfg_ded_nr_r16.to_json(j);
  }
  if (sl_cfg_ded_eutra_info_r16_present) {
    j.write_fieldname("sl-ConfigDedicatedEUTRA-Info-r16");
    sl_cfg_ded_eutra_info_r16.to_json(j);
  }
  if (target_cell_smtc_scg_r16_present) {
    j.write_fieldname("targetCellSMTC-SCG-r16");
    target_cell_smtc_scg_r16.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCRelease-v1710-IEs ::= SEQUENCE
SRSASN_CODE rrc_release_v1710_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(no_last_cell_upd_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_release_v1710_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(no_last_cell_upd_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
void rrc_release_v1710_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (no_last_cell_upd_r17_present) {
    j.write_str("noLastCellUpdate-r17", "true");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// ReportConfigInterRAT ::= SEQUENCE
SRSASN_CODE report_cfg_inter_rat_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(report_type.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE report_cfg_inter_rat_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(report_type.unpack(bref));

  return SRSASN_SUCCESS;
}
void report_cfg_inter_rat_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("reportType");
  report_type.to_json(j);
  j.end_obj();
}

void report_cfg_inter_rat_s::report_type_c_::destroy_()
{
  switch (type_) {
    case types::periodical:
      c.destroy<periodical_report_cfg_inter_rat_s>();
      break;
    case types::event_triggered:
      c.destroy<event_trigger_cfg_inter_rat_s>();
      break;
    case types::report_cgi:
      c.destroy<report_cgi_eutra_s>();
      break;
    case types::report_sftd:
      c.destroy<report_sftd_eutra_s>();
      break;
    default:
      break;
  }
}
void report_cfg_inter_rat_s::report_type_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::periodical:
      c.init<periodical_report_cfg_inter_rat_s>();
      break;
    case types::event_triggered:
      c.init<event_trigger_cfg_inter_rat_s>();
      break;
    case types::report_cgi:
      c.init<report_cgi_eutra_s>();
      break;
    case types::report_sftd:
      c.init<report_sftd_eutra_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_inter_rat_s::report_type_c_");
  }
}
report_cfg_inter_rat_s::report_type_c_::report_type_c_(const report_cfg_inter_rat_s::report_type_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::periodical:
      c.init(other.c.get<periodical_report_cfg_inter_rat_s>());
      break;
    case types::event_triggered:
      c.init(other.c.get<event_trigger_cfg_inter_rat_s>());
      break;
    case types::report_cgi:
      c.init(other.c.get<report_cgi_eutra_s>());
      break;
    case types::report_sftd:
      c.init(other.c.get<report_sftd_eutra_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_inter_rat_s::report_type_c_");
  }
}
report_cfg_inter_rat_s::report_type_c_&
report_cfg_inter_rat_s::report_type_c_::operator=(const report_cfg_inter_rat_s::report_type_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::periodical:
      c.set(other.c.get<periodical_report_cfg_inter_rat_s>());
      break;
    case types::event_triggered:
      c.set(other.c.get<event_trigger_cfg_inter_rat_s>());
      break;
    case types::report_cgi:
      c.set(other.c.get<report_cgi_eutra_s>());
      break;
    case types::report_sftd:
      c.set(other.c.get<report_sftd_eutra_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_inter_rat_s::report_type_c_");
  }

  return *this;
}
periodical_report_cfg_inter_rat_s& report_cfg_inter_rat_s::report_type_c_::set_periodical()
{
  set(types::periodical);
  return c.get<periodical_report_cfg_inter_rat_s>();
}
event_trigger_cfg_inter_rat_s& report_cfg_inter_rat_s::report_type_c_::set_event_triggered()
{
  set(types::event_triggered);
  return c.get<event_trigger_cfg_inter_rat_s>();
}
report_cgi_eutra_s& report_cfg_inter_rat_s::report_type_c_::set_report_cgi()
{
  set(types::report_cgi);
  return c.get<report_cgi_eutra_s>();
}
report_sftd_eutra_s& report_cfg_inter_rat_s::report_type_c_::set_report_sftd()
{
  set(types::report_sftd);
  return c.get<report_sftd_eutra_s>();
}
void report_cfg_inter_rat_s::report_type_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::periodical:
      j.write_fieldname("periodical");
      c.get<periodical_report_cfg_inter_rat_s>().to_json(j);
      break;
    case types::event_triggered:
      j.write_fieldname("eventTriggered");
      c.get<event_trigger_cfg_inter_rat_s>().to_json(j);
      break;
    case types::report_cgi:
      j.write_fieldname("reportCGI");
      c.get<report_cgi_eutra_s>().to_json(j);
      break;
    case types::report_sftd:
      j.write_fieldname("reportSFTD");
      c.get<report_sftd_eutra_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_inter_rat_s::report_type_c_");
  }
  j.end_obj();
}
SRSASN_CODE report_cfg_inter_rat_s::report_type_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::periodical:
      HANDLE_CODE(c.get<periodical_report_cfg_inter_rat_s>().pack(bref));
      break;
    case types::event_triggered:
      HANDLE_CODE(c.get<event_trigger_cfg_inter_rat_s>().pack(bref));
      break;
    case types::report_cgi:
      HANDLE_CODE(c.get<report_cgi_eutra_s>().pack(bref));
      break;
    case types::report_sftd: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<report_sftd_eutra_s>().pack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "report_cfg_inter_rat_s::report_type_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE report_cfg_inter_rat_s::report_type_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::periodical:
      HANDLE_CODE(c.get<periodical_report_cfg_inter_rat_s>().unpack(bref));
      break;
    case types::event_triggered:
      HANDLE_CODE(c.get<event_trigger_cfg_inter_rat_s>().unpack(bref));
      break;
    case types::report_cgi:
      HANDLE_CODE(c.get<report_cgi_eutra_s>().unpack(bref));
      break;
    case types::report_sftd: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<report_sftd_eutra_s>().unpack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "report_cfg_inter_rat_s::report_type_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* report_cfg_inter_rat_s::report_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"periodical", "eventTriggered", "reportCGI", "reportSFTD"};
  return convert_enum_idx(names, 4, value, "report_cfg_inter_rat_s::report_type_c_::types");
}

// ReportConfigNR ::= SEQUENCE
SRSASN_CODE report_cfg_nr_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(report_type.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE report_cfg_nr_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(report_type.unpack(bref));

  return SRSASN_SUCCESS;
}
void report_cfg_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("reportType");
  report_type.to_json(j);
  j.end_obj();
}

void report_cfg_nr_s::report_type_c_::destroy_()
{
  switch (type_) {
    case types::periodical:
      c.destroy<periodical_report_cfg_s>();
      break;
    case types::event_triggered:
      c.destroy<event_trigger_cfg_s>();
      break;
    case types::report_cgi:
      c.destroy<report_cgi_s>();
      break;
    case types::report_sftd:
      c.destroy<report_sftd_nr_s>();
      break;
    case types::cond_trigger_cfg_r16:
      c.destroy<cond_trigger_cfg_r16_s>();
      break;
    case types::cli_periodical_r16:
      c.destroy<cli_periodical_report_cfg_r16_s>();
      break;
    case types::cli_event_triggered_r16:
      c.destroy<cli_event_trigger_cfg_r16_s>();
      break;
    case types::rx_tx_periodical_r17:
      c.destroy<rx_tx_periodical_r17_s>();
      break;
    default:
      break;
  }
}
void report_cfg_nr_s::report_type_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::periodical:
      c.init<periodical_report_cfg_s>();
      break;
    case types::event_triggered:
      c.init<event_trigger_cfg_s>();
      break;
    case types::report_cgi:
      c.init<report_cgi_s>();
      break;
    case types::report_sftd:
      c.init<report_sftd_nr_s>();
      break;
    case types::cond_trigger_cfg_r16:
      c.init<cond_trigger_cfg_r16_s>();
      break;
    case types::cli_periodical_r16:
      c.init<cli_periodical_report_cfg_r16_s>();
      break;
    case types::cli_event_triggered_r16:
      c.init<cli_event_trigger_cfg_r16_s>();
      break;
    case types::rx_tx_periodical_r17:
      c.init<rx_tx_periodical_r17_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_nr_s::report_type_c_");
  }
}
report_cfg_nr_s::report_type_c_::report_type_c_(const report_cfg_nr_s::report_type_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::periodical:
      c.init(other.c.get<periodical_report_cfg_s>());
      break;
    case types::event_triggered:
      c.init(other.c.get<event_trigger_cfg_s>());
      break;
    case types::report_cgi:
      c.init(other.c.get<report_cgi_s>());
      break;
    case types::report_sftd:
      c.init(other.c.get<report_sftd_nr_s>());
      break;
    case types::cond_trigger_cfg_r16:
      c.init(other.c.get<cond_trigger_cfg_r16_s>());
      break;
    case types::cli_periodical_r16:
      c.init(other.c.get<cli_periodical_report_cfg_r16_s>());
      break;
    case types::cli_event_triggered_r16:
      c.init(other.c.get<cli_event_trigger_cfg_r16_s>());
      break;
    case types::rx_tx_periodical_r17:
      c.init(other.c.get<rx_tx_periodical_r17_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_nr_s::report_type_c_");
  }
}
report_cfg_nr_s::report_type_c_&
report_cfg_nr_s::report_type_c_::operator=(const report_cfg_nr_s::report_type_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::periodical:
      c.set(other.c.get<periodical_report_cfg_s>());
      break;
    case types::event_triggered:
      c.set(other.c.get<event_trigger_cfg_s>());
      break;
    case types::report_cgi:
      c.set(other.c.get<report_cgi_s>());
      break;
    case types::report_sftd:
      c.set(other.c.get<report_sftd_nr_s>());
      break;
    case types::cond_trigger_cfg_r16:
      c.set(other.c.get<cond_trigger_cfg_r16_s>());
      break;
    case types::cli_periodical_r16:
      c.set(other.c.get<cli_periodical_report_cfg_r16_s>());
      break;
    case types::cli_event_triggered_r16:
      c.set(other.c.get<cli_event_trigger_cfg_r16_s>());
      break;
    case types::rx_tx_periodical_r17:
      c.set(other.c.get<rx_tx_periodical_r17_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_nr_s::report_type_c_");
  }

  return *this;
}
periodical_report_cfg_s& report_cfg_nr_s::report_type_c_::set_periodical()
{
  set(types::periodical);
  return c.get<periodical_report_cfg_s>();
}
event_trigger_cfg_s& report_cfg_nr_s::report_type_c_::set_event_triggered()
{
  set(types::event_triggered);
  return c.get<event_trigger_cfg_s>();
}
report_cgi_s& report_cfg_nr_s::report_type_c_::set_report_cgi()
{
  set(types::report_cgi);
  return c.get<report_cgi_s>();
}
report_sftd_nr_s& report_cfg_nr_s::report_type_c_::set_report_sftd()
{
  set(types::report_sftd);
  return c.get<report_sftd_nr_s>();
}
cond_trigger_cfg_r16_s& report_cfg_nr_s::report_type_c_::set_cond_trigger_cfg_r16()
{
  set(types::cond_trigger_cfg_r16);
  return c.get<cond_trigger_cfg_r16_s>();
}
cli_periodical_report_cfg_r16_s& report_cfg_nr_s::report_type_c_::set_cli_periodical_r16()
{
  set(types::cli_periodical_r16);
  return c.get<cli_periodical_report_cfg_r16_s>();
}
cli_event_trigger_cfg_r16_s& report_cfg_nr_s::report_type_c_::set_cli_event_triggered_r16()
{
  set(types::cli_event_triggered_r16);
  return c.get<cli_event_trigger_cfg_r16_s>();
}
rx_tx_periodical_r17_s& report_cfg_nr_s::report_type_c_::set_rx_tx_periodical_r17()
{
  set(types::rx_tx_periodical_r17);
  return c.get<rx_tx_periodical_r17_s>();
}
void report_cfg_nr_s::report_type_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::periodical:
      j.write_fieldname("periodical");
      c.get<periodical_report_cfg_s>().to_json(j);
      break;
    case types::event_triggered:
      j.write_fieldname("eventTriggered");
      c.get<event_trigger_cfg_s>().to_json(j);
      break;
    case types::report_cgi:
      j.write_fieldname("reportCGI");
      c.get<report_cgi_s>().to_json(j);
      break;
    case types::report_sftd:
      j.write_fieldname("reportSFTD");
      c.get<report_sftd_nr_s>().to_json(j);
      break;
    case types::cond_trigger_cfg_r16:
      j.write_fieldname("condTriggerConfig-r16");
      c.get<cond_trigger_cfg_r16_s>().to_json(j);
      break;
    case types::cli_periodical_r16:
      j.write_fieldname("cli-Periodical-r16");
      c.get<cli_periodical_report_cfg_r16_s>().to_json(j);
      break;
    case types::cli_event_triggered_r16:
      j.write_fieldname("cli-EventTriggered-r16");
      c.get<cli_event_trigger_cfg_r16_s>().to_json(j);
      break;
    case types::rx_tx_periodical_r17:
      j.write_fieldname("rxTxPeriodical-r17");
      c.get<rx_tx_periodical_r17_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_nr_s::report_type_c_");
  }
  j.end_obj();
}
SRSASN_CODE report_cfg_nr_s::report_type_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::periodical:
      HANDLE_CODE(c.get<periodical_report_cfg_s>().pack(bref));
      break;
    case types::event_triggered:
      HANDLE_CODE(c.get<event_trigger_cfg_s>().pack(bref));
      break;
    case types::report_cgi: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<report_cgi_s>().pack(bref));
    } break;
    case types::report_sftd: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<report_sftd_nr_s>().pack(bref));
    } break;
    case types::cond_trigger_cfg_r16: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<cond_trigger_cfg_r16_s>().pack(bref));
    } break;
    case types::cli_periodical_r16: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<cli_periodical_report_cfg_r16_s>().pack(bref));
    } break;
    case types::cli_event_triggered_r16: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<cli_event_trigger_cfg_r16_s>().pack(bref));
    } break;
    case types::rx_tx_periodical_r17: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<rx_tx_periodical_r17_s>().pack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "report_cfg_nr_s::report_type_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE report_cfg_nr_s::report_type_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::periodical:
      HANDLE_CODE(c.get<periodical_report_cfg_s>().unpack(bref));
      break;
    case types::event_triggered:
      HANDLE_CODE(c.get<event_trigger_cfg_s>().unpack(bref));
      break;
    case types::report_cgi: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<report_cgi_s>().unpack(bref));
    } break;
    case types::report_sftd: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<report_sftd_nr_s>().unpack(bref));
    } break;
    case types::cond_trigger_cfg_r16: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<cond_trigger_cfg_r16_s>().unpack(bref));
    } break;
    case types::cli_periodical_r16: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<cli_periodical_report_cfg_r16_s>().unpack(bref));
    } break;
    case types::cli_event_triggered_r16: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<cli_event_trigger_cfg_r16_s>().unpack(bref));
    } break;
    case types::rx_tx_periodical_r17: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<rx_tx_periodical_r17_s>().unpack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "report_cfg_nr_s::report_type_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* report_cfg_nr_s::report_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"periodical",
                                "eventTriggered",
                                "reportCGI",
                                "reportSFTD",
                                "condTriggerConfig-r16",
                                "cli-Periodical-r16",
                                "cli-EventTriggered-r16",
                                "rxTxPeriodical-r17"};
  return convert_enum_idx(names, 8, value, "report_cfg_nr_s::report_type_c_::types");
}

// ReportConfigNR-SL-r16 ::= SEQUENCE
SRSASN_CODE report_cfg_nr_sl_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(report_type_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE report_cfg_nr_sl_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(report_type_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void report_cfg_nr_sl_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("reportType-r16");
  report_type_r16.to_json(j);
  j.end_obj();
}

void report_cfg_nr_sl_r16_s::report_type_r16_c_::destroy_()
{
  switch (type_) {
    case types::periodical_r16:
      c.destroy<periodical_report_cfg_nr_sl_r16_s>();
      break;
    case types::event_triggered_r16:
      c.destroy<event_trigger_cfg_nr_sl_r16_s>();
      break;
    default:
      break;
  }
}
void report_cfg_nr_sl_r16_s::report_type_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::periodical_r16:
      c.init<periodical_report_cfg_nr_sl_r16_s>();
      break;
    case types::event_triggered_r16:
      c.init<event_trigger_cfg_nr_sl_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_nr_sl_r16_s::report_type_r16_c_");
  }
}
report_cfg_nr_sl_r16_s::report_type_r16_c_::report_type_r16_c_(const report_cfg_nr_sl_r16_s::report_type_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::periodical_r16:
      c.init(other.c.get<periodical_report_cfg_nr_sl_r16_s>());
      break;
    case types::event_triggered_r16:
      c.init(other.c.get<event_trigger_cfg_nr_sl_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_nr_sl_r16_s::report_type_r16_c_");
  }
}
report_cfg_nr_sl_r16_s::report_type_r16_c_&
report_cfg_nr_sl_r16_s::report_type_r16_c_::operator=(const report_cfg_nr_sl_r16_s::report_type_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::periodical_r16:
      c.set(other.c.get<periodical_report_cfg_nr_sl_r16_s>());
      break;
    case types::event_triggered_r16:
      c.set(other.c.get<event_trigger_cfg_nr_sl_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_nr_sl_r16_s::report_type_r16_c_");
  }

  return *this;
}
periodical_report_cfg_nr_sl_r16_s& report_cfg_nr_sl_r16_s::report_type_r16_c_::set_periodical_r16()
{
  set(types::periodical_r16);
  return c.get<periodical_report_cfg_nr_sl_r16_s>();
}
event_trigger_cfg_nr_sl_r16_s& report_cfg_nr_sl_r16_s::report_type_r16_c_::set_event_triggered_r16()
{
  set(types::event_triggered_r16);
  return c.get<event_trigger_cfg_nr_sl_r16_s>();
}
void report_cfg_nr_sl_r16_s::report_type_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::periodical_r16:
      j.write_fieldname("periodical-r16");
      c.get<periodical_report_cfg_nr_sl_r16_s>().to_json(j);
      break;
    case types::event_triggered_r16:
      j.write_fieldname("eventTriggered-r16");
      c.get<event_trigger_cfg_nr_sl_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_nr_sl_r16_s::report_type_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE report_cfg_nr_sl_r16_s::report_type_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::periodical_r16:
      HANDLE_CODE(c.get<periodical_report_cfg_nr_sl_r16_s>().pack(bref));
      break;
    case types::event_triggered_r16:
      HANDLE_CODE(c.get<event_trigger_cfg_nr_sl_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_nr_sl_r16_s::report_type_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE report_cfg_nr_sl_r16_s::report_type_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::periodical_r16:
      HANDLE_CODE(c.get<periodical_report_cfg_nr_sl_r16_s>().unpack(bref));
      break;
    case types::event_triggered_r16:
      HANDLE_CODE(c.get<event_trigger_cfg_nr_sl_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_nr_sl_r16_s::report_type_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* report_cfg_nr_sl_r16_s::report_type_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"periodical-r16", "eventTriggered-r16"};
  return convert_enum_idx(names, 2, value, "report_cfg_nr_sl_r16_s::report_type_r16_c_::types");
}

// AreaConfig-r16 ::= CHOICE
void area_cfg_r16_c::destroy_()
{
  switch (type_) {
    case types::cell_global_id_list_r16:
      c.destroy<cell_global_id_list_r16_l>();
      break;
    case types::tac_list_r16:
      c.destroy<tac_list_r16_l>();
      break;
    case types::tracking_area_id_list_r16:
      c.destroy<tracking_area_id_list_r16_l>();
      break;
    default:
      break;
  }
}
void area_cfg_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::cell_global_id_list_r16:
      c.init<cell_global_id_list_r16_l>();
      break;
    case types::tac_list_r16:
      c.init<tac_list_r16_l>();
      break;
    case types::tracking_area_id_list_r16:
      c.init<tracking_area_id_list_r16_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "area_cfg_r16_c");
  }
}
area_cfg_r16_c::area_cfg_r16_c(const area_cfg_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::cell_global_id_list_r16:
      c.init(other.c.get<cell_global_id_list_r16_l>());
      break;
    case types::tac_list_r16:
      c.init(other.c.get<tac_list_r16_l>());
      break;
    case types::tracking_area_id_list_r16:
      c.init(other.c.get<tracking_area_id_list_r16_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "area_cfg_r16_c");
  }
}
area_cfg_r16_c& area_cfg_r16_c::operator=(const area_cfg_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::cell_global_id_list_r16:
      c.set(other.c.get<cell_global_id_list_r16_l>());
      break;
    case types::tac_list_r16:
      c.set(other.c.get<tac_list_r16_l>());
      break;
    case types::tracking_area_id_list_r16:
      c.set(other.c.get<tracking_area_id_list_r16_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "area_cfg_r16_c");
  }

  return *this;
}
cell_global_id_list_r16_l& area_cfg_r16_c::set_cell_global_id_list_r16()
{
  set(types::cell_global_id_list_r16);
  return c.get<cell_global_id_list_r16_l>();
}
tac_list_r16_l& area_cfg_r16_c::set_tac_list_r16()
{
  set(types::tac_list_r16);
  return c.get<tac_list_r16_l>();
}
tracking_area_id_list_r16_l& area_cfg_r16_c::set_tracking_area_id_list_r16()
{
  set(types::tracking_area_id_list_r16);
  return c.get<tracking_area_id_list_r16_l>();
}
void area_cfg_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cell_global_id_list_r16:
      j.start_array("cellGlobalIdList-r16");
      for (const auto& e1 : c.get<cell_global_id_list_r16_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::tac_list_r16:
      j.start_array("trackingAreaCodeList-r16");
      for (const auto& e1 : c.get<tac_list_r16_l>()) {
        j.write_str(e1.to_string());
      }
      j.end_array();
      break;
    case types::tracking_area_id_list_r16:
      j.start_array("trackingAreaIdentityList-r16");
      for (const auto& e1 : c.get<tracking_area_id_list_r16_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "area_cfg_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE area_cfg_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cell_global_id_list_r16:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cell_global_id_list_r16_l>(), 1, 32));
      break;
    case types::tac_list_r16:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<tac_list_r16_l>(), 1, 8));
      break;
    case types::tracking_area_id_list_r16:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<tracking_area_id_list_r16_l>(), 1, 8));
      break;
    default:
      log_invalid_choice_id(type_, "area_cfg_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE area_cfg_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cell_global_id_list_r16:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cell_global_id_list_r16_l>(), bref, 1, 32));
      break;
    case types::tac_list_r16:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<tac_list_r16_l>(), bref, 1, 8));
      break;
    case types::tracking_area_id_list_r16:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<tracking_area_id_list_r16_l>(), bref, 1, 8));
      break;
    default:
      log_invalid_choice_id(type_, "area_cfg_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* area_cfg_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"cellGlobalIdList-r16", "trackingAreaCodeList-r16", "trackingAreaIdentityList-r16"};
  return convert_enum_idx(names, 3, value, "area_cfg_r16_c::types");
}

// FilterConfigCLI-r16 ::= SEQUENCE
SRSASN_CODE filt_cfg_cli_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(filt_coef_srs_rsrp_r16_present, 1));
  HANDLE_CODE(bref.pack(filt_coef_cli_rssi_r16_present, 1));

  if (filt_coef_srs_rsrp_r16_present) {
    HANDLE_CODE(filt_coef_srs_rsrp_r16.pack(bref));
  }
  if (filt_coef_cli_rssi_r16_present) {
    HANDLE_CODE(filt_coef_cli_rssi_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE filt_cfg_cli_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(filt_coef_srs_rsrp_r16_present, 1));
  HANDLE_CODE(bref.unpack(filt_coef_cli_rssi_r16_present, 1));

  if (filt_coef_srs_rsrp_r16_present) {
    HANDLE_CODE(filt_coef_srs_rsrp_r16.unpack(bref));
  }
  if (filt_coef_cli_rssi_r16_present) {
    HANDLE_CODE(filt_coef_cli_rssi_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void filt_cfg_cli_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (filt_coef_srs_rsrp_r16_present) {
    j.write_str("filterCoefficientSRS-RSRP-r16", filt_coef_srs_rsrp_r16.to_string());
  }
  if (filt_coef_cli_rssi_r16_present) {
    j.write_str("filterCoefficientCLI-RSSI-r16", filt_coef_cli_rssi_r16.to_string());
  }
  j.end_obj();
}

// FreqPriorityDedicatedSlicing-r17 ::= SEQUENCE
SRSASN_CODE freq_prio_ded_slicing_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(slice_info_list_ded_r17.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, dl_explicit_carrier_freq_r17, (uint32_t)0u, (uint32_t)3279165u));
  if (slice_info_list_ded_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, slice_info_list_ded_r17, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE freq_prio_ded_slicing_r17_s::unpack(cbit_ref& bref)
{
  bool slice_info_list_ded_r17_present;
  HANDLE_CODE(bref.unpack(slice_info_list_ded_r17_present, 1));

  HANDLE_CODE(unpack_integer(dl_explicit_carrier_freq_r17, bref, (uint32_t)0u, (uint32_t)3279165u));
  if (slice_info_list_ded_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(slice_info_list_ded_r17, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void freq_prio_ded_slicing_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dl-ExplicitCarrierFreq-r17", dl_explicit_carrier_freq_r17);
  if (slice_info_list_ded_r17.size() > 0) {
    j.start_array("sliceInfoListDedicated-r17");
    for (const auto& e1 : slice_info_list_ded_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// FreqPriorityEUTRA ::= SEQUENCE
SRSASN_CODE freq_prio_eutra_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cell_resel_sub_prio_present, 1));

  HANDLE_CODE(pack_integer(bref, carrier_freq, (uint32_t)0u, (uint32_t)262143u));
  HANDLE_CODE(pack_integer(bref, cell_resel_prio, (uint8_t)0u, (uint8_t)7u));
  if (cell_resel_sub_prio_present) {
    HANDLE_CODE(cell_resel_sub_prio.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE freq_prio_eutra_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(cell_resel_sub_prio_present, 1));

  HANDLE_CODE(unpack_integer(carrier_freq, bref, (uint32_t)0u, (uint32_t)262143u));
  HANDLE_CODE(unpack_integer(cell_resel_prio, bref, (uint8_t)0u, (uint8_t)7u));
  if (cell_resel_sub_prio_present) {
    HANDLE_CODE(cell_resel_sub_prio.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void freq_prio_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq", carrier_freq);
  j.write_int("cellReselectionPriority", cell_resel_prio);
  if (cell_resel_sub_prio_present) {
    j.write_str("cellReselectionSubPriority", cell_resel_sub_prio.to_string());
  }
  j.end_obj();
}

// FreqPriorityNR ::= SEQUENCE
SRSASN_CODE freq_prio_nr_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cell_resel_sub_prio_present, 1));

  HANDLE_CODE(pack_integer(bref, carrier_freq, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(pack_integer(bref, cell_resel_prio, (uint8_t)0u, (uint8_t)7u));
  if (cell_resel_sub_prio_present) {
    HANDLE_CODE(cell_resel_sub_prio.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE freq_prio_nr_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(cell_resel_sub_prio_present, 1));

  HANDLE_CODE(unpack_integer(carrier_freq, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(unpack_integer(cell_resel_prio, bref, (uint8_t)0u, (uint8_t)7u));
  if (cell_resel_sub_prio_present) {
    HANDLE_CODE(cell_resel_sub_prio.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void freq_prio_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq", carrier_freq);
  j.write_int("cellReselectionPriority", cell_resel_prio);
  if (cell_resel_sub_prio_present) {
    j.write_str("cellReselectionSubPriority", cell_resel_sub_prio.to_string());
  }
  j.end_obj();
}

// GapConfig ::= SEQUENCE
SRSASN_CODE gap_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, gap_offset, (uint8_t)0u, (uint8_t)159u));
  HANDLE_CODE(mgl.pack(bref));
  HANDLE_CODE(mgrp.pack(bref));
  HANDLE_CODE(mgta.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ref_serv_cell_ind_present;
    group_flags[1] |= ref_fr2_serv_cell_async_ca_r16_present;
    group_flags[1] |= mgl_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ref_serv_cell_ind_present, 1));
      if (ref_serv_cell_ind_present) {
        HANDLE_CODE(ref_serv_cell_ind.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ref_fr2_serv_cell_async_ca_r16_present, 1));
      HANDLE_CODE(bref.pack(mgl_r16_present, 1));
      if (ref_fr2_serv_cell_async_ca_r16_present) {
        HANDLE_CODE(pack_integer(bref, ref_fr2_serv_cell_async_ca_r16, (uint8_t)0u, (uint8_t)31u));
      }
      if (mgl_r16_present) {
        HANDLE_CODE(mgl_r16.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gap_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(gap_offset, bref, (uint8_t)0u, (uint8_t)159u));
  HANDLE_CODE(mgl.unpack(bref));
  HANDLE_CODE(mgrp.unpack(bref));
  HANDLE_CODE(mgta.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ref_serv_cell_ind_present, 1));
      if (ref_serv_cell_ind_present) {
        HANDLE_CODE(ref_serv_cell_ind.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ref_fr2_serv_cell_async_ca_r16_present, 1));
      HANDLE_CODE(bref.unpack(mgl_r16_present, 1));
      if (ref_fr2_serv_cell_async_ca_r16_present) {
        HANDLE_CODE(unpack_integer(ref_fr2_serv_cell_async_ca_r16, bref, (uint8_t)0u, (uint8_t)31u));
      }
      if (mgl_r16_present) {
        HANDLE_CODE(mgl_r16.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void gap_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("gapOffset", gap_offset);
  j.write_str("mgl", mgl.to_string());
  j.write_str("mgrp", mgrp.to_string());
  j.write_str("mgta", mgta.to_string());
  if (ext) {
    if (ref_serv_cell_ind_present) {
      j.write_str("refServCellIndicator", ref_serv_cell_ind.to_string());
    }
    if (ref_fr2_serv_cell_async_ca_r16_present) {
      j.write_int("refFR2ServCellAsyncCA-r16", ref_fr2_serv_cell_async_ca_r16);
    }
    if (mgl_r16_present) {
      j.write_str("mgl-r16", mgl_r16.to_string());
    }
  }
  j.end_obj();
}

const char* gap_cfg_s::mgl_opts::to_string() const
{
  static const char* names[] = {"ms1dot5", "ms3", "ms3dot5", "ms4", "ms5dot5", "ms6"};
  return convert_enum_idx(names, 6, value, "gap_cfg_s::mgl_e_");
}
float gap_cfg_s::mgl_opts::to_number() const
{
  static const float numbers[] = {1.5, 3.0, 3.5, 4.0, 5.5, 6.0};
  return map_enum_number(numbers, 6, value, "gap_cfg_s::mgl_e_");
}
const char* gap_cfg_s::mgl_opts::to_number_string() const
{
  static const char* number_strs[] = {"1.5", "3", "3.5", "4", "5.5", "6"};
  return convert_enum_idx(number_strs, 6, value, "gap_cfg_s::mgl_e_");
}

const char* gap_cfg_s::mgrp_opts::to_string() const
{
  static const char* names[] = {"ms20", "ms40", "ms80", "ms160"};
  return convert_enum_idx(names, 4, value, "gap_cfg_s::mgrp_e_");
}
uint8_t gap_cfg_s::mgrp_opts::to_number() const
{
  static const uint8_t numbers[] = {20, 40, 80, 160};
  return map_enum_number(numbers, 4, value, "gap_cfg_s::mgrp_e_");
}

const char* gap_cfg_s::mgta_opts::to_string() const
{
  static const char* names[] = {"ms0", "ms0dot25", "ms0dot5"};
  return convert_enum_idx(names, 3, value, "gap_cfg_s::mgta_e_");
}
float gap_cfg_s::mgta_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.25, 0.5};
  return map_enum_number(numbers, 3, value, "gap_cfg_s::mgta_e_");
}
const char* gap_cfg_s::mgta_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.25", "0.5"};
  return convert_enum_idx(number_strs, 3, value, "gap_cfg_s::mgta_e_");
}

const char* gap_cfg_s::ref_serv_cell_ind_opts::to_string() const
{
  static const char* names[] = {"pCell", "pSCell", "mcg-FR2"};
  return convert_enum_idx(names, 3, value, "gap_cfg_s::ref_serv_cell_ind_e_");
}
uint8_t gap_cfg_s::ref_serv_cell_ind_opts::to_number() const
{
  if (value == mcg_fr2) {
    return 2;
  }
  invalid_enum_number(value, "gap_cfg_s::ref_serv_cell_ind_e_");
  return 0;
}

const char* gap_cfg_s::mgl_r16_opts::to_string() const
{
  static const char* names[] = {"ms10", "ms20"};
  return convert_enum_idx(names, 2, value, "gap_cfg_s::mgl_r16_e_");
}
uint8_t gap_cfg_s::mgl_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {10, 20};
  return map_enum_number(numbers, 2, value, "gap_cfg_s::mgl_r16_e_");
}

// GapConfig-r17 ::= SEQUENCE
SRSASN_CODE gap_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ref_serv_cell_ind_r17_present, 1));
  HANDLE_CODE(bref.pack(ref_fr2_serv_cell_async_ca_r17_present, 1));
  HANDLE_CODE(bref.pack(pre_cfg_ind_r17_present, 1));
  HANDLE_CODE(bref.pack(ncsg_ind_r17_present, 1));
  HANDLE_CODE(bref.pack(gap_assoc_prs_r17_present, 1));
  HANDLE_CODE(bref.pack(gap_sharing_r17_present, 1));
  HANDLE_CODE(bref.pack(gap_prio_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, meas_gap_id_r17, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(gap_type_r17.pack(bref));
  HANDLE_CODE(pack_integer(bref, gap_offset_r17, (uint8_t)0u, (uint8_t)159u));
  HANDLE_CODE(mgl_r17.pack(bref));
  HANDLE_CODE(mgrp_r17.pack(bref));
  HANDLE_CODE(mgta_r17.pack(bref));
  if (ref_serv_cell_ind_r17_present) {
    HANDLE_CODE(ref_serv_cell_ind_r17.pack(bref));
  }
  if (ref_fr2_serv_cell_async_ca_r17_present) {
    HANDLE_CODE(pack_integer(bref, ref_fr2_serv_cell_async_ca_r17, (uint8_t)0u, (uint8_t)31u));
  }
  if (gap_sharing_r17_present) {
    HANDLE_CODE(gap_sharing_r17.pack(bref));
  }
  if (gap_prio_r17_present) {
    HANDLE_CODE(pack_integer(bref, gap_prio_r17, (uint8_t)1u, (uint8_t)16u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gap_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ref_serv_cell_ind_r17_present, 1));
  HANDLE_CODE(bref.unpack(ref_fr2_serv_cell_async_ca_r17_present, 1));
  HANDLE_CODE(bref.unpack(pre_cfg_ind_r17_present, 1));
  HANDLE_CODE(bref.unpack(ncsg_ind_r17_present, 1));
  HANDLE_CODE(bref.unpack(gap_assoc_prs_r17_present, 1));
  HANDLE_CODE(bref.unpack(gap_sharing_r17_present, 1));
  HANDLE_CODE(bref.unpack(gap_prio_r17_present, 1));

  HANDLE_CODE(unpack_integer(meas_gap_id_r17, bref, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(gap_type_r17.unpack(bref));
  HANDLE_CODE(unpack_integer(gap_offset_r17, bref, (uint8_t)0u, (uint8_t)159u));
  HANDLE_CODE(mgl_r17.unpack(bref));
  HANDLE_CODE(mgrp_r17.unpack(bref));
  HANDLE_CODE(mgta_r17.unpack(bref));
  if (ref_serv_cell_ind_r17_present) {
    HANDLE_CODE(ref_serv_cell_ind_r17.unpack(bref));
  }
  if (ref_fr2_serv_cell_async_ca_r17_present) {
    HANDLE_CODE(unpack_integer(ref_fr2_serv_cell_async_ca_r17, bref, (uint8_t)0u, (uint8_t)31u));
  }
  if (gap_sharing_r17_present) {
    HANDLE_CODE(gap_sharing_r17.unpack(bref));
  }
  if (gap_prio_r17_present) {
    HANDLE_CODE(unpack_integer(gap_prio_r17, bref, (uint8_t)1u, (uint8_t)16u));
  }

  return SRSASN_SUCCESS;
}
void gap_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("measGapId-r17", meas_gap_id_r17);
  j.write_str("gapType-r17", gap_type_r17.to_string());
  j.write_int("gapOffset-r17", gap_offset_r17);
  j.write_str("mgl-r17", mgl_r17.to_string());
  j.write_str("mgrp-r17", mgrp_r17.to_string());
  j.write_str("mgta-r17", mgta_r17.to_string());
  if (ref_serv_cell_ind_r17_present) {
    j.write_str("refServCellIndicator-r17", ref_serv_cell_ind_r17.to_string());
  }
  if (ref_fr2_serv_cell_async_ca_r17_present) {
    j.write_int("refFR2-ServCellAsyncCA-r17", ref_fr2_serv_cell_async_ca_r17);
  }
  if (pre_cfg_ind_r17_present) {
    j.write_str("preConfigInd-r17", "true");
  }
  if (ncsg_ind_r17_present) {
    j.write_str("ncsgInd-r17", "true");
  }
  if (gap_assoc_prs_r17_present) {
    j.write_str("gapAssociationPRS-r17", "true");
  }
  if (gap_sharing_r17_present) {
    j.write_str("gapSharing-r17", gap_sharing_r17.to_string());
  }
  if (gap_prio_r17_present) {
    j.write_int("gapPriority-r17", gap_prio_r17);
  }
  j.end_obj();
}

const char* gap_cfg_r17_s::gap_type_r17_opts::to_string() const
{
  static const char* names[] = {"perUE", "perFR1", "perFR2"};
  return convert_enum_idx(names, 3, value, "gap_cfg_r17_s::gap_type_r17_e_");
}
uint8_t gap_cfg_r17_s::gap_type_r17_opts::to_number() const
{
  switch (value) {
    case per_fr1:
      return 1;
    case per_fr2:
      return 2;
    default:
      invalid_enum_number(value, "gap_cfg_r17_s::gap_type_r17_e_");
  }
  return 0;
}

const char* gap_cfg_r17_s::mgl_r17_opts::to_string() const
{
  static const char* names[] = {
      "ms1", "ms1dot5", "ms2", "ms3", "ms3dot5", "ms4", "ms5", "ms5dot5", "ms6", "ms10", "ms20"};
  return convert_enum_idx(names, 11, value, "gap_cfg_r17_s::mgl_r17_e_");
}
float gap_cfg_r17_s::mgl_r17_opts::to_number() const
{
  static const float numbers[] = {1.0, 1.5, 2.0, 3.0, 3.5, 4.0, 5.0, 5.5, 6.0, 10.0, 20.0};
  return map_enum_number(numbers, 11, value, "gap_cfg_r17_s::mgl_r17_e_");
}
const char* gap_cfg_r17_s::mgl_r17_opts::to_number_string() const
{
  static const char* number_strs[] = {"1", "1.5", "2", "3", "3.5", "4", "5", "5.5", "6", "10", "20"};
  return convert_enum_idx(number_strs, 11, value, "gap_cfg_r17_s::mgl_r17_e_");
}

const char* gap_cfg_r17_s::mgrp_r17_opts::to_string() const
{
  static const char* names[] = {"ms20", "ms40", "ms80", "ms160"};
  return convert_enum_idx(names, 4, value, "gap_cfg_r17_s::mgrp_r17_e_");
}
uint8_t gap_cfg_r17_s::mgrp_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {20, 40, 80, 160};
  return map_enum_number(numbers, 4, value, "gap_cfg_r17_s::mgrp_r17_e_");
}

const char* gap_cfg_r17_s::mgta_r17_opts::to_string() const
{
  static const char* names[] = {"ms0", "ms0dot25", "ms0dot5", "ms0dot75"};
  return convert_enum_idx(names, 4, value, "gap_cfg_r17_s::mgta_r17_e_");
}
float gap_cfg_r17_s::mgta_r17_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.25, 0.5, 0.75};
  return map_enum_number(numbers, 4, value, "gap_cfg_r17_s::mgta_r17_e_");
}
const char* gap_cfg_r17_s::mgta_r17_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.25", "0.5", "0.75"};
  return convert_enum_idx(number_strs, 4, value, "gap_cfg_r17_s::mgta_r17_e_");
}

const char* gap_cfg_r17_s::ref_serv_cell_ind_r17_opts::to_string() const
{
  static const char* names[] = {"pCell", "pSCell", "mcg-FR2"};
  return convert_enum_idx(names, 3, value, "gap_cfg_r17_s::ref_serv_cell_ind_r17_e_");
}
uint8_t gap_cfg_r17_s::ref_serv_cell_ind_r17_opts::to_number() const
{
  if (value == mcg_fr2) {
    return 2;
  }
  invalid_enum_number(value, "gap_cfg_r17_s::ref_serv_cell_ind_r17_e_");
  return 0;
}

// InterFreqTargetInfo-r16 ::= SEQUENCE
SRSASN_CODE inter_freq_target_info_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cell_list_r16.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, dl_carrier_freq_r16, (uint32_t)0u, (uint32_t)3279165u));
  if (cell_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cell_list_r16, 1, 32, integer_packer<uint16_t>(0, 1007)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE inter_freq_target_info_r16_s::unpack(cbit_ref& bref)
{
  bool cell_list_r16_present;
  HANDLE_CODE(bref.unpack(cell_list_r16_present, 1));

  HANDLE_CODE(unpack_integer(dl_carrier_freq_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  if (cell_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cell_list_r16, bref, 1, 32, integer_packer<uint16_t>(0, 1007)));
  }

  return SRSASN_SUCCESS;
}
void inter_freq_target_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dl-CarrierFreq-r16", dl_carrier_freq_r16);
  if (cell_list_r16.size() > 0) {
    j.start_array("cellList-r16");
    for (const auto& e1 : cell_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// MeasIdToAddMod ::= SEQUENCE
SRSASN_CODE meas_id_to_add_mod_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, meas_id, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, meas_obj_id, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, report_cfg_id, (uint8_t)1u, (uint8_t)64u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_id_to_add_mod_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(meas_id, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(meas_obj_id, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(report_cfg_id, bref, (uint8_t)1u, (uint8_t)64u));

  return SRSASN_SUCCESS;
}
void meas_id_to_add_mod_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("measId", meas_id);
  j.write_int("measObjectId", meas_obj_id);
  j.write_int("reportConfigId", report_cfg_id);
  j.end_obj();
}

// MeasIdleConfigDedicated-r16 ::= SEQUENCE
SRSASN_CODE meas_idle_cfg_ded_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_idle_carrier_list_nr_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_idle_carrier_list_eutra_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(validity_area_list_r16.size() > 0, 1));

  if (meas_idle_carrier_list_nr_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_idle_carrier_list_nr_r16, 1, 8));
  }
  if (meas_idle_carrier_list_eutra_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_idle_carrier_list_eutra_r16, 1, 8));
  }
  HANDLE_CODE(meas_idle_dur_r16.pack(bref));
  if (validity_area_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, validity_area_list_r16, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_idle_cfg_ded_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool meas_idle_carrier_list_nr_r16_present;
  HANDLE_CODE(bref.unpack(meas_idle_carrier_list_nr_r16_present, 1));
  bool meas_idle_carrier_list_eutra_r16_present;
  HANDLE_CODE(bref.unpack(meas_idle_carrier_list_eutra_r16_present, 1));
  bool validity_area_list_r16_present;
  HANDLE_CODE(bref.unpack(validity_area_list_r16_present, 1));

  if (meas_idle_carrier_list_nr_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_idle_carrier_list_nr_r16, bref, 1, 8));
  }
  if (meas_idle_carrier_list_eutra_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_idle_carrier_list_eutra_r16, bref, 1, 8));
  }
  HANDLE_CODE(meas_idle_dur_r16.unpack(bref));
  if (validity_area_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(validity_area_list_r16, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void meas_idle_cfg_ded_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_idle_carrier_list_nr_r16.size() > 0) {
    j.start_array("measIdleCarrierListNR-r16");
    for (const auto& e1 : meas_idle_carrier_list_nr_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_idle_carrier_list_eutra_r16.size() > 0) {
    j.start_array("measIdleCarrierListEUTRA-r16");
    for (const auto& e1 : meas_idle_carrier_list_eutra_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_str("measIdleDuration-r16", meas_idle_dur_r16.to_string());
  if (validity_area_list_r16.size() > 0) {
    j.start_array("validityAreaList-r16");
    for (const auto& e1 : validity_area_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

const char* meas_idle_cfg_ded_r16_s::meas_idle_dur_r16_opts::to_string() const
{
  static const char* names[] = {"sec10", "sec30", "sec60", "sec120", "sec180", "sec240", "sec300", "spare"};
  return convert_enum_idx(names, 8, value, "meas_idle_cfg_ded_r16_s::meas_idle_dur_r16_e_");
}
uint16_t meas_idle_cfg_ded_r16_s::meas_idle_dur_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {10, 30, 60, 120, 180, 240, 300};
  return map_enum_number(numbers, 7, value, "meas_idle_cfg_ded_r16_s::meas_idle_dur_r16_e_");
}

// MeasObjectToAddMod ::= SEQUENCE
SRSASN_CODE meas_obj_to_add_mod_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, meas_obj_id, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(meas_obj.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_obj_to_add_mod_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(meas_obj_id, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(meas_obj.unpack(bref));

  return SRSASN_SUCCESS;
}
void meas_obj_to_add_mod_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("measObjectId", meas_obj_id);
  j.write_fieldname("measObject");
  meas_obj.to_json(j);
  j.end_obj();
}

void meas_obj_to_add_mod_s::meas_obj_c_::destroy_()
{
  switch (type_) {
    case types::meas_obj_nr:
      c.destroy<meas_obj_nr_s>();
      break;
    case types::meas_obj_eutra:
      c.destroy<meas_obj_eutra_s>();
      break;
    case types::meas_obj_utra_fdd_r16:
      c.destroy<meas_obj_utra_fdd_r16_s>();
      break;
    case types::meas_obj_nr_sl_r16:
      c.destroy<meas_obj_nr_sl_r16_s>();
      break;
    case types::meas_obj_cli_r16:
      c.destroy<meas_obj_cli_r16_s>();
      break;
    case types::meas_obj_rx_tx_diff_r17:
      c.destroy<meas_obj_rx_tx_diff_r17_s>();
      break;
    case types::meas_obj_relay_r17:
      c.destroy<sl_meas_obj_r16_s>();
      break;
    default:
      break;
  }
}
void meas_obj_to_add_mod_s::meas_obj_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::meas_obj_nr:
      c.init<meas_obj_nr_s>();
      break;
    case types::meas_obj_eutra:
      c.init<meas_obj_eutra_s>();
      break;
    case types::meas_obj_utra_fdd_r16:
      c.init<meas_obj_utra_fdd_r16_s>();
      break;
    case types::meas_obj_nr_sl_r16:
      c.init<meas_obj_nr_sl_r16_s>();
      break;
    case types::meas_obj_cli_r16:
      c.init<meas_obj_cli_r16_s>();
      break;
    case types::meas_obj_rx_tx_diff_r17:
      c.init<meas_obj_rx_tx_diff_r17_s>();
      break;
    case types::meas_obj_relay_r17:
      c.init<sl_meas_obj_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_obj_to_add_mod_s::meas_obj_c_");
  }
}
meas_obj_to_add_mod_s::meas_obj_c_::meas_obj_c_(const meas_obj_to_add_mod_s::meas_obj_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::meas_obj_nr:
      c.init(other.c.get<meas_obj_nr_s>());
      break;
    case types::meas_obj_eutra:
      c.init(other.c.get<meas_obj_eutra_s>());
      break;
    case types::meas_obj_utra_fdd_r16:
      c.init(other.c.get<meas_obj_utra_fdd_r16_s>());
      break;
    case types::meas_obj_nr_sl_r16:
      c.init(other.c.get<meas_obj_nr_sl_r16_s>());
      break;
    case types::meas_obj_cli_r16:
      c.init(other.c.get<meas_obj_cli_r16_s>());
      break;
    case types::meas_obj_rx_tx_diff_r17:
      c.init(other.c.get<meas_obj_rx_tx_diff_r17_s>());
      break;
    case types::meas_obj_relay_r17:
      c.init(other.c.get<sl_meas_obj_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_obj_to_add_mod_s::meas_obj_c_");
  }
}
meas_obj_to_add_mod_s::meas_obj_c_&
meas_obj_to_add_mod_s::meas_obj_c_::operator=(const meas_obj_to_add_mod_s::meas_obj_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::meas_obj_nr:
      c.set(other.c.get<meas_obj_nr_s>());
      break;
    case types::meas_obj_eutra:
      c.set(other.c.get<meas_obj_eutra_s>());
      break;
    case types::meas_obj_utra_fdd_r16:
      c.set(other.c.get<meas_obj_utra_fdd_r16_s>());
      break;
    case types::meas_obj_nr_sl_r16:
      c.set(other.c.get<meas_obj_nr_sl_r16_s>());
      break;
    case types::meas_obj_cli_r16:
      c.set(other.c.get<meas_obj_cli_r16_s>());
      break;
    case types::meas_obj_rx_tx_diff_r17:
      c.set(other.c.get<meas_obj_rx_tx_diff_r17_s>());
      break;
    case types::meas_obj_relay_r17:
      c.set(other.c.get<sl_meas_obj_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_obj_to_add_mod_s::meas_obj_c_");
  }

  return *this;
}
meas_obj_nr_s& meas_obj_to_add_mod_s::meas_obj_c_::set_meas_obj_nr()
{
  set(types::meas_obj_nr);
  return c.get<meas_obj_nr_s>();
}
meas_obj_eutra_s& meas_obj_to_add_mod_s::meas_obj_c_::set_meas_obj_eutra()
{
  set(types::meas_obj_eutra);
  return c.get<meas_obj_eutra_s>();
}
meas_obj_utra_fdd_r16_s& meas_obj_to_add_mod_s::meas_obj_c_::set_meas_obj_utra_fdd_r16()
{
  set(types::meas_obj_utra_fdd_r16);
  return c.get<meas_obj_utra_fdd_r16_s>();
}
meas_obj_nr_sl_r16_s& meas_obj_to_add_mod_s::meas_obj_c_::set_meas_obj_nr_sl_r16()
{
  set(types::meas_obj_nr_sl_r16);
  return c.get<meas_obj_nr_sl_r16_s>();
}
meas_obj_cli_r16_s& meas_obj_to_add_mod_s::meas_obj_c_::set_meas_obj_cli_r16()
{
  set(types::meas_obj_cli_r16);
  return c.get<meas_obj_cli_r16_s>();
}
meas_obj_rx_tx_diff_r17_s& meas_obj_to_add_mod_s::meas_obj_c_::set_meas_obj_rx_tx_diff_r17()
{
  set(types::meas_obj_rx_tx_diff_r17);
  return c.get<meas_obj_rx_tx_diff_r17_s>();
}
sl_meas_obj_r16_s& meas_obj_to_add_mod_s::meas_obj_c_::set_meas_obj_relay_r17()
{
  set(types::meas_obj_relay_r17);
  return c.get<sl_meas_obj_r16_s>();
}
void meas_obj_to_add_mod_s::meas_obj_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::meas_obj_nr:
      j.write_fieldname("measObjectNR");
      c.get<meas_obj_nr_s>().to_json(j);
      break;
    case types::meas_obj_eutra:
      j.write_fieldname("measObjectEUTRA");
      c.get<meas_obj_eutra_s>().to_json(j);
      break;
    case types::meas_obj_utra_fdd_r16:
      j.write_fieldname("measObjectUTRA-FDD-r16");
      c.get<meas_obj_utra_fdd_r16_s>().to_json(j);
      break;
    case types::meas_obj_nr_sl_r16:
      j.write_fieldname("measObjectNR-SL-r16");
      c.get<meas_obj_nr_sl_r16_s>().to_json(j);
      break;
    case types::meas_obj_cli_r16:
      j.write_fieldname("measObjectCLI-r16");
      c.get<meas_obj_cli_r16_s>().to_json(j);
      break;
    case types::meas_obj_rx_tx_diff_r17:
      j.write_fieldname("measObjectRxTxDiff-r17");
      c.get<meas_obj_rx_tx_diff_r17_s>().to_json(j);
      break;
    case types::meas_obj_relay_r17:
      j.write_fieldname("measObjectRelay-r17");
      c.get<sl_meas_obj_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "meas_obj_to_add_mod_s::meas_obj_c_");
  }
  j.end_obj();
}
SRSASN_CODE meas_obj_to_add_mod_s::meas_obj_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::meas_obj_nr:
      HANDLE_CODE(c.get<meas_obj_nr_s>().pack(bref));
      break;
    case types::meas_obj_eutra: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<meas_obj_eutra_s>().pack(bref));
    } break;
    case types::meas_obj_utra_fdd_r16: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<meas_obj_utra_fdd_r16_s>().pack(bref));
    } break;
    case types::meas_obj_nr_sl_r16: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<meas_obj_nr_sl_r16_s>().pack(bref));
    } break;
    case types::meas_obj_cli_r16: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<meas_obj_cli_r16_s>().pack(bref));
    } break;
    case types::meas_obj_rx_tx_diff_r17: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<meas_obj_rx_tx_diff_r17_s>().pack(bref));
    } break;
    case types::meas_obj_relay_r17: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sl_meas_obj_r16_s>().pack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "meas_obj_to_add_mod_s::meas_obj_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_obj_to_add_mod_s::meas_obj_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::meas_obj_nr:
      HANDLE_CODE(c.get<meas_obj_nr_s>().unpack(bref));
      break;
    case types::meas_obj_eutra: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<meas_obj_eutra_s>().unpack(bref));
    } break;
    case types::meas_obj_utra_fdd_r16: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<meas_obj_utra_fdd_r16_s>().unpack(bref));
    } break;
    case types::meas_obj_nr_sl_r16: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<meas_obj_nr_sl_r16_s>().unpack(bref));
    } break;
    case types::meas_obj_cli_r16: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<meas_obj_cli_r16_s>().unpack(bref));
    } break;
    case types::meas_obj_rx_tx_diff_r17: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<meas_obj_rx_tx_diff_r17_s>().unpack(bref));
    } break;
    case types::meas_obj_relay_r17: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<sl_meas_obj_r16_s>().unpack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "meas_obj_to_add_mod_s::meas_obj_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* meas_obj_to_add_mod_s::meas_obj_c_::types_opts::to_string() const
{
  static const char* names[] = {"measObjectNR",
                                "measObjectEUTRA",
                                "measObjectUTRA-FDD-r16",
                                "measObjectNR-SL-r16",
                                "measObjectCLI-r16",
                                "measObjectRxTxDiff-r17",
                                "measObjectRelay-r17"};
  return convert_enum_idx(names, 7, value, "meas_obj_to_add_mod_s::meas_obj_c_::types");
}

// OtherConfig-v1540 ::= SEQUENCE
SRSASN_CODE other_cfg_v1540_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(overheat_assist_cfg_present, 1));

  if (overheat_assist_cfg_present) {
    HANDLE_CODE(overheat_assist_cfg.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE other_cfg_v1540_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(overheat_assist_cfg_present, 1));

  if (overheat_assist_cfg_present) {
    HANDLE_CODE(overheat_assist_cfg.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void other_cfg_v1540_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (overheat_assist_cfg_present) {
    j.write_fieldname("overheatingAssistanceConfig");
    overheat_assist_cfg.to_json(j);
  }
  j.end_obj();
}

// QuantityConfigNR ::= SEQUENCE
SRSASN_CODE quant_cfg_nr_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(quant_cfg_rs_idx_present, 1));

  HANDLE_CODE(quant_cfg_cell.pack(bref));
  if (quant_cfg_rs_idx_present) {
    HANDLE_CODE(quant_cfg_rs_idx.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE quant_cfg_nr_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(quant_cfg_rs_idx_present, 1));

  HANDLE_CODE(quant_cfg_cell.unpack(bref));
  if (quant_cfg_rs_idx_present) {
    HANDLE_CODE(quant_cfg_rs_idx.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void quant_cfg_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("quantityConfigCell");
  quant_cfg_cell.to_json(j);
  if (quant_cfg_rs_idx_present) {
    j.write_fieldname("quantityConfigRS-Index");
    quant_cfg_rs_idx.to_json(j);
  }
  j.end_obj();
}

// QuantityConfigUTRA-FDD-r16 ::= SEQUENCE
SRSASN_CODE quant_cfg_utra_fdd_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(filt_coef_rs_cp_r16_present, 1));
  HANDLE_CODE(bref.pack(filt_coef_ec_no_r16_present, 1));

  if (filt_coef_rs_cp_r16_present) {
    HANDLE_CODE(filt_coef_rs_cp_r16.pack(bref));
  }
  if (filt_coef_ec_no_r16_present) {
    HANDLE_CODE(filt_coef_ec_no_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE quant_cfg_utra_fdd_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(filt_coef_rs_cp_r16_present, 1));
  HANDLE_CODE(bref.unpack(filt_coef_ec_no_r16_present, 1));

  if (filt_coef_rs_cp_r16_present) {
    HANDLE_CODE(filt_coef_rs_cp_r16.unpack(bref));
  }
  if (filt_coef_ec_no_r16_present) {
    HANDLE_CODE(filt_coef_ec_no_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void quant_cfg_utra_fdd_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (filt_coef_rs_cp_r16_present) {
    j.write_str("filterCoefficientRSCP-r16", filt_coef_rs_cp_r16.to_string());
  }
  if (filt_coef_ec_no_r16_present) {
    j.write_str("filterCoefficientEcNO-r16", filt_coef_ec_no_r16.to_string());
  }
  j.end_obj();
}

// RAT-Type ::= ENUMERATED
const char* rat_type_opts::to_string() const
{
  static const char* names[] = {"nr", "eutra-nr", "eutra", "utra-fdd-v1610"};
  return convert_enum_idx(names, 4, value, "rat_type_e");
}

// RRCReconfiguration-v1560-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_v1560_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mrdc_secondary_cell_group_cfg_present, 1));
  HANDLE_CODE(bref.pack(radio_bearer_cfg2.size() > 0, 1));
  HANDLE_CODE(bref.pack(sk_counter_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (mrdc_secondary_cell_group_cfg_present) {
    HANDLE_CODE(mrdc_secondary_cell_group_cfg.pack(bref));
  }
  if (radio_bearer_cfg2.size() > 0) {
    HANDLE_CODE(radio_bearer_cfg2.pack(bref));
  }
  if (sk_counter_present) {
    HANDLE_CODE(pack_integer(bref, sk_counter, (uint32_t)0u, (uint32_t)65535u));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_v1560_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(mrdc_secondary_cell_group_cfg_present, 1));
  bool radio_bearer_cfg2_present;
  HANDLE_CODE(bref.unpack(radio_bearer_cfg2_present, 1));
  HANDLE_CODE(bref.unpack(sk_counter_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (mrdc_secondary_cell_group_cfg_present) {
    HANDLE_CODE(mrdc_secondary_cell_group_cfg.unpack(bref));
  }
  if (radio_bearer_cfg2_present) {
    HANDLE_CODE(radio_bearer_cfg2.unpack(bref));
  }
  if (sk_counter_present) {
    HANDLE_CODE(unpack_integer(sk_counter, bref, (uint32_t)0u, (uint32_t)65535u));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_v1560_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mrdc_secondary_cell_group_cfg_present) {
    j.write_fieldname("mrdc-SecondaryCellGroupConfig");
    mrdc_secondary_cell_group_cfg.to_json(j);
  }
  if (radio_bearer_cfg2.size() > 0) {
    j.write_str("radioBearerConfig2", radio_bearer_cfg2.to_string());
  }
  if (sk_counter_present) {
    j.write_int("sk-Counter", sk_counter);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCRelease-v1650-IEs ::= SEQUENCE
SRSASN_CODE rrc_release_v1650_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mps_prio_ind_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_release_v1650_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(mps_prio_ind_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_release_v1650_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mps_prio_ind_r16_present) {
    j.write_str("mpsPriorityIndication-r16", "true");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCResume-v1700-IEs ::= SEQUENCE
SRSASN_CODE rrc_resume_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_cfg_ded_nr_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_l2_remote_ue_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(need_for_gap_ncsg_cfg_nr_r17_present, 1));
  HANDLE_CODE(bref.pack(need_for_gap_ncsg_cfg_eutra_r17_present, 1));
  HANDLE_CODE(bref.pack(scg_state_r17_present, 1));
  HANDLE_CODE(bref.pack(app_layer_meas_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (sl_cfg_ded_nr_r17_present) {
    HANDLE_CODE(sl_cfg_ded_nr_r17.pack(bref));
  }
  if (sl_l2_remote_ue_cfg_r17_present) {
    HANDLE_CODE(sl_l2_remote_ue_cfg_r17.pack(bref));
  }
  if (need_for_gap_ncsg_cfg_nr_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_cfg_nr_r17.pack(bref));
  }
  if (need_for_gap_ncsg_cfg_eutra_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_cfg_eutra_r17.pack(bref));
  }
  if (app_layer_meas_cfg_r17_present) {
    HANDLE_CODE(app_layer_meas_cfg_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_cfg_ded_nr_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_l2_remote_ue_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(need_for_gap_ncsg_cfg_nr_r17_present, 1));
  HANDLE_CODE(bref.unpack(need_for_gap_ncsg_cfg_eutra_r17_present, 1));
  HANDLE_CODE(bref.unpack(scg_state_r17_present, 1));
  HANDLE_CODE(bref.unpack(app_layer_meas_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (sl_cfg_ded_nr_r17_present) {
    HANDLE_CODE(sl_cfg_ded_nr_r17.unpack(bref));
  }
  if (sl_l2_remote_ue_cfg_r17_present) {
    HANDLE_CODE(sl_l2_remote_ue_cfg_r17.unpack(bref));
  }
  if (need_for_gap_ncsg_cfg_nr_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_cfg_nr_r17.unpack(bref));
  }
  if (need_for_gap_ncsg_cfg_eutra_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_cfg_eutra_r17.unpack(bref));
  }
  if (app_layer_meas_cfg_r17_present) {
    HANDLE_CODE(app_layer_meas_cfg_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_resume_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_cfg_ded_nr_r17_present) {
    j.write_fieldname("sl-ConfigDedicatedNR-r17");
    sl_cfg_ded_nr_r17.to_json(j);
  }
  if (sl_l2_remote_ue_cfg_r17_present) {
    j.write_fieldname("sl-L2RemoteUE-Config-r17");
    sl_l2_remote_ue_cfg_r17.to_json(j);
  }
  if (need_for_gap_ncsg_cfg_nr_r17_present) {
    j.write_fieldname("needForGapNCSG-ConfigNR-r17");
    need_for_gap_ncsg_cfg_nr_r17.to_json(j);
  }
  if (need_for_gap_ncsg_cfg_eutra_r17_present) {
    j.write_fieldname("needForGapNCSG-ConfigEUTRA-r17");
    need_for_gap_ncsg_cfg_eutra_r17.to_json(j);
  }
  if (scg_state_r17_present) {
    j.write_str("scg-State-r17", "deactivated");
  }
  if (app_layer_meas_cfg_r17_present) {
    j.write_fieldname("appLayerMeasConfig-r17");
    app_layer_meas_cfg_r17.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// ReportConfigToAddMod ::= SEQUENCE
SRSASN_CODE report_cfg_to_add_mod_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, report_cfg_id, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(report_cfg.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE report_cfg_to_add_mod_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(report_cfg_id, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(report_cfg.unpack(bref));

  return SRSASN_SUCCESS;
}
void report_cfg_to_add_mod_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("reportConfigId", report_cfg_id);
  j.write_fieldname("reportConfig");
  report_cfg.to_json(j);
  j.end_obj();
}

void report_cfg_to_add_mod_s::report_cfg_c_::destroy_()
{
  switch (type_) {
    case types::report_cfg_nr:
      c.destroy<report_cfg_nr_s>();
      break;
    case types::report_cfg_inter_rat:
      c.destroy<report_cfg_inter_rat_s>();
      break;
    case types::report_cfg_nr_sl_r16:
      c.destroy<report_cfg_nr_sl_r16_s>();
      break;
    default:
      break;
  }
}
void report_cfg_to_add_mod_s::report_cfg_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::report_cfg_nr:
      c.init<report_cfg_nr_s>();
      break;
    case types::report_cfg_inter_rat:
      c.init<report_cfg_inter_rat_s>();
      break;
    case types::report_cfg_nr_sl_r16:
      c.init<report_cfg_nr_sl_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_to_add_mod_s::report_cfg_c_");
  }
}
report_cfg_to_add_mod_s::report_cfg_c_::report_cfg_c_(const report_cfg_to_add_mod_s::report_cfg_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::report_cfg_nr:
      c.init(other.c.get<report_cfg_nr_s>());
      break;
    case types::report_cfg_inter_rat:
      c.init(other.c.get<report_cfg_inter_rat_s>());
      break;
    case types::report_cfg_nr_sl_r16:
      c.init(other.c.get<report_cfg_nr_sl_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_to_add_mod_s::report_cfg_c_");
  }
}
report_cfg_to_add_mod_s::report_cfg_c_&
report_cfg_to_add_mod_s::report_cfg_c_::operator=(const report_cfg_to_add_mod_s::report_cfg_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::report_cfg_nr:
      c.set(other.c.get<report_cfg_nr_s>());
      break;
    case types::report_cfg_inter_rat:
      c.set(other.c.get<report_cfg_inter_rat_s>());
      break;
    case types::report_cfg_nr_sl_r16:
      c.set(other.c.get<report_cfg_nr_sl_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_to_add_mod_s::report_cfg_c_");
  }

  return *this;
}
report_cfg_nr_s& report_cfg_to_add_mod_s::report_cfg_c_::set_report_cfg_nr()
{
  set(types::report_cfg_nr);
  return c.get<report_cfg_nr_s>();
}
report_cfg_inter_rat_s& report_cfg_to_add_mod_s::report_cfg_c_::set_report_cfg_inter_rat()
{
  set(types::report_cfg_inter_rat);
  return c.get<report_cfg_inter_rat_s>();
}
report_cfg_nr_sl_r16_s& report_cfg_to_add_mod_s::report_cfg_c_::set_report_cfg_nr_sl_r16()
{
  set(types::report_cfg_nr_sl_r16);
  return c.get<report_cfg_nr_sl_r16_s>();
}
void report_cfg_to_add_mod_s::report_cfg_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::report_cfg_nr:
      j.write_fieldname("reportConfigNR");
      c.get<report_cfg_nr_s>().to_json(j);
      break;
    case types::report_cfg_inter_rat:
      j.write_fieldname("reportConfigInterRAT");
      c.get<report_cfg_inter_rat_s>().to_json(j);
      break;
    case types::report_cfg_nr_sl_r16:
      j.write_fieldname("reportConfigNR-SL-r16");
      c.get<report_cfg_nr_sl_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "report_cfg_to_add_mod_s::report_cfg_c_");
  }
  j.end_obj();
}
SRSASN_CODE report_cfg_to_add_mod_s::report_cfg_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::report_cfg_nr:
      HANDLE_CODE(c.get<report_cfg_nr_s>().pack(bref));
      break;
    case types::report_cfg_inter_rat: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<report_cfg_inter_rat_s>().pack(bref));
    } break;
    case types::report_cfg_nr_sl_r16: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<report_cfg_nr_sl_r16_s>().pack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "report_cfg_to_add_mod_s::report_cfg_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE report_cfg_to_add_mod_s::report_cfg_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::report_cfg_nr:
      HANDLE_CODE(c.get<report_cfg_nr_s>().unpack(bref));
      break;
    case types::report_cfg_inter_rat: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<report_cfg_inter_rat_s>().unpack(bref));
    } break;
    case types::report_cfg_nr_sl_r16: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<report_cfg_nr_sl_r16_s>().unpack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "report_cfg_to_add_mod_s::report_cfg_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* report_cfg_to_add_mod_s::report_cfg_c_::types_opts::to_string() const
{
  static const char* names[] = {"reportConfigNR", "reportConfigInterRAT", "reportConfigNR-SL-r16"};
  return convert_enum_idx(names, 3, value, "report_cfg_to_add_mod_s::report_cfg_c_::types");
}

// RxTxTimeDiff-r17 ::= SEQUENCE
SRSASN_CODE rx_tx_time_diff_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(result_k5_r17_present, 1));

  if (result_k5_r17_present) {
    HANDLE_CODE(pack_integer(bref, result_k5_r17, (uint16_t)0u, (uint16_t)61565u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rx_tx_time_diff_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(result_k5_r17_present, 1));

  if (result_k5_r17_present) {
    HANDLE_CODE(unpack_integer(result_k5_r17, bref, (uint16_t)0u, (uint16_t)61565u));
  }

  return SRSASN_SUCCESS;
}
void rx_tx_time_diff_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (result_k5_r17_present) {
    j.write_int("result-k5-r17", result_k5_r17);
  }
  j.end_obj();
}

// AreaConfiguration-v1700 ::= SEQUENCE
SRSASN_CODE area_cfg_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(area_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(inter_freq_target_list_r17.size() > 0, 1));

  if (area_cfg_r17_present) {
    HANDLE_CODE(area_cfg_r17.pack(bref));
  }
  if (inter_freq_target_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, inter_freq_target_list_r17, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE area_cfg_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(area_cfg_r17_present, 1));
  bool inter_freq_target_list_r17_present;
  HANDLE_CODE(bref.unpack(inter_freq_target_list_r17_present, 1));

  if (area_cfg_r17_present) {
    HANDLE_CODE(area_cfg_r17.unpack(bref));
  }
  if (inter_freq_target_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(inter_freq_target_list_r17, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void area_cfg_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (area_cfg_r17_present) {
    j.write_fieldname("areaConfig-r17");
    area_cfg_r17.to_json(j);
  }
  if (inter_freq_target_list_r17.size() > 0) {
    j.start_array("interFreqTargetList-r17");
    for (const auto& e1 : inter_freq_target_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// CarrierInfoNR ::= SEQUENCE
SRSASN_CODE carrier_info_nr_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(smtc_present, 1));

  HANDLE_CODE(pack_integer(bref, carrier_freq, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(ssb_subcarrier_spacing.pack(bref));
  if (smtc_present) {
    HANDLE_CODE(smtc.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE carrier_info_nr_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(smtc_present, 1));

  HANDLE_CODE(unpack_integer(carrier_freq, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(ssb_subcarrier_spacing.unpack(bref));
  if (smtc_present) {
    HANDLE_CODE(smtc.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void carrier_info_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq", carrier_freq);
  j.write_str("ssbSubcarrierSpacing", ssb_subcarrier_spacing.to_string());
  if (smtc_present) {
    j.write_fieldname("smtc");
    smtc.to_json(j);
  }
  j.end_obj();
}

// DLInformationTransfer-v1700-IEs ::= SEQUENCE
SRSASN_CODE dl_info_transfer_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ded_info_f1c_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(rx_tx_time_diff_gnb_r17_present, 1));
  HANDLE_CODE(bref.pack(ta_pdc_r17_present, 1));
  HANDLE_CODE(bref.pack(sib9_fallback_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ded_info_f1c_r17.size() > 0) {
    HANDLE_CODE(ded_info_f1c_r17.pack(bref));
  }
  if (rx_tx_time_diff_gnb_r17_present) {
    HANDLE_CODE(rx_tx_time_diff_gnb_r17.pack(bref));
  }
  if (ta_pdc_r17_present) {
    HANDLE_CODE(ta_pdc_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_info_transfer_v1700_ies_s::unpack(cbit_ref& bref)
{
  bool ded_info_f1c_r17_present;
  HANDLE_CODE(bref.unpack(ded_info_f1c_r17_present, 1));
  HANDLE_CODE(bref.unpack(rx_tx_time_diff_gnb_r17_present, 1));
  HANDLE_CODE(bref.unpack(ta_pdc_r17_present, 1));
  HANDLE_CODE(bref.unpack(sib9_fallback_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ded_info_f1c_r17_present) {
    HANDLE_CODE(ded_info_f1c_r17.unpack(bref));
  }
  if (rx_tx_time_diff_gnb_r17_present) {
    HANDLE_CODE(rx_tx_time_diff_gnb_r17.unpack(bref));
  }
  if (ta_pdc_r17_present) {
    HANDLE_CODE(ta_pdc_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void dl_info_transfer_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ded_info_f1c_r17.size() > 0) {
    j.write_str("dedicatedInfoF1c-r17", ded_info_f1c_r17.to_string());
  }
  if (rx_tx_time_diff_gnb_r17_present) {
    j.write_fieldname("rxTxTimeDiff-gNB-r17");
    rx_tx_time_diff_gnb_r17.to_json(j);
  }
  if (ta_pdc_r17_present) {
    j.write_str("ta-PDC-r17", ta_pdc_r17.to_string());
  }
  if (sib9_fallback_r17_present) {
    j.write_str("sib9Fallback-r17", "true");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

const char* dl_info_transfer_v1700_ies_s::ta_pdc_r17_opts::to_string() const
{
  static const char* names[] = {"activate", "deactivate"};
  return convert_enum_idx(names, 2, value, "dl_info_transfer_v1700_ies_s::ta_pdc_r17_e_");
}

// DRB-CountMSB-Info ::= SEQUENCE
SRSASN_CODE drb_count_msb_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(pack_integer(bref, count_msb_ul, (uint32_t)0u, (uint32_t)33554431u));
  HANDLE_CODE(pack_integer(bref, count_msb_dl, (uint32_t)0u, (uint32_t)33554431u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE drb_count_msb_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(unpack_integer(count_msb_ul, bref, (uint32_t)0u, (uint32_t)33554431u));
  HANDLE_CODE(unpack_integer(count_msb_dl, bref, (uint32_t)0u, (uint32_t)33554431u));

  return SRSASN_SUCCESS;
}
void drb_count_msb_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("drb-Identity", drb_id);
  j.write_int("countMSB-Uplink", count_msb_ul);
  j.write_int("countMSB-Downlink", count_msb_dl);
  j.end_obj();
}

// EventType-r16 ::= CHOICE
void event_type_r16_c::set(types::options e)
{
  type_ = e;
}
void event_type_r16_c::set_out_of_coverage()
{
  set(types::out_of_coverage);
}
event_type_r16_c::event_l1_s_& event_type_r16_c::set_event_l1()
{
  set(types::event_l1);
  return c;
}
void event_type_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::out_of_coverage:
      break;
    case types::event_l1:
      j.write_fieldname("eventL1");
      j.start_obj();
      j.write_fieldname("l1-Threshold");
      c.l1_thres.to_json(j);
      j.write_int("hysteresis", c.hysteresis);
      j.write_str("timeToTrigger", c.time_to_trigger.to_string());
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "event_type_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE event_type_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::out_of_coverage:
      break;
    case types::event_l1:
      HANDLE_CODE(c.l1_thres.pack(bref));
      HANDLE_CODE(pack_integer(bref, c.hysteresis, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.time_to_trigger.pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "event_type_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE event_type_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::out_of_coverage:
      break;
    case types::event_l1:
      HANDLE_CODE(c.l1_thres.unpack(bref));
      HANDLE_CODE(unpack_integer(c.hysteresis, bref, (uint8_t)0u, (uint8_t)30u));
      HANDLE_CODE(c.time_to_trigger.unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "event_type_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* event_type_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"outOfCoverage", "eventL1"};
  return convert_enum_idx(names, 2, value, "event_type_r16_c::types");
}
uint8_t event_type_r16_c::types_opts::to_number() const
{
  if (value == event_l1) {
    return 1;
  }
  invalid_enum_number(value, "event_type_r16_c::types");
  return 0;
}

// ExtendedPagingCycle-r17 ::= ENUMERATED
const char* extended_paging_cycle_r17_opts::to_string() const
{
  static const char* names[] = {"rf256", "rf512", "rf1024", "spare1"};
  return convert_enum_idx(names, 4, value, "extended_paging_cycle_r17_e");
}
uint16_t extended_paging_cycle_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {256, 512, 1024};
  return map_enum_number(numbers, 3, value, "extended_paging_cycle_r17_e");
}

// LoggingInterval-r16 ::= ENUMERATED
const char* logging_interv_r16_opts::to_string() const
{
  static const char* names[] = {"ms320",
                                "ms640",
                                "ms1280",
                                "ms2560",
                                "ms5120",
                                "ms10240",
                                "ms20480",
                                "ms30720",
                                "ms40960",
                                "ms61440",
                                "infinity"};
  return convert_enum_idx(names, 11, value, "logging_interv_r16_e");
}
int32_t logging_interv_r16_opts::to_number() const
{
  static const int32_t numbers[] = {320, 640, 1280, 2560, 5120, 10240, 20480, 30720, 40960, 61440, -1};
  return map_enum_number(numbers, 11, value, "logging_interv_r16_e");
}

// MasterKeyUpdate ::= SEQUENCE
SRSASN_CODE master_key_upd_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(nas_container.size() > 0, 1));

  HANDLE_CODE(bref.pack(key_set_change_ind, 1));
  HANDLE_CODE(pack_integer(bref, next_hop_chaining_count, (uint8_t)0u, (uint8_t)7u));
  if (nas_container.size() > 0) {
    HANDLE_CODE(nas_container.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE master_key_upd_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool nas_container_present;
  HANDLE_CODE(bref.unpack(nas_container_present, 1));

  HANDLE_CODE(bref.unpack(key_set_change_ind, 1));
  HANDLE_CODE(unpack_integer(next_hop_chaining_count, bref, (uint8_t)0u, (uint8_t)7u));
  if (nas_container_present) {
    HANDLE_CODE(nas_container.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void master_key_upd_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_bool("keySetChangeIndicator", key_set_change_ind);
  j.write_int("nextHopChainingCount", next_hop_chaining_count);
  if (nas_container.size() > 0) {
    j.write_str("nas-Container", nas_container.to_string());
  }
  j.end_obj();
}

// MeasGapConfig ::= SEQUENCE
SRSASN_CODE meas_gap_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(gap_fr2_present, 1));

  if (gap_fr2_present) {
    HANDLE_CODE(gap_fr2.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= gap_fr1.is_present();
    group_flags[0] |= gap_ue.is_present();
    group_flags[1] |= gap_to_add_mod_list_r17.is_present();
    group_flags[1] |= gap_to_release_list_r17.is_present();
    group_flags[1] |= pos_meas_gap_pre_cfg_to_add_mod_list_r17.is_present();
    group_flags[1] |= pos_meas_gap_pre_cfg_to_release_list_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(gap_fr1.is_present(), 1));
      HANDLE_CODE(bref.pack(gap_ue.is_present(), 1));
      if (gap_fr1.is_present()) {
        HANDLE_CODE(gap_fr1->pack(bref));
      }
      if (gap_ue.is_present()) {
        HANDLE_CODE(gap_ue->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(gap_to_add_mod_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(gap_to_release_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(pos_meas_gap_pre_cfg_to_add_mod_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(pos_meas_gap_pre_cfg_to_release_list_r17.is_present(), 1));
      if (gap_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *gap_to_add_mod_list_r17, 1, 8));
      }
      if (gap_to_release_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *gap_to_release_list_r17, 1, 8, integer_packer<uint8_t>(1, 8)));
      }
      if (pos_meas_gap_pre_cfg_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *pos_meas_gap_pre_cfg_to_add_mod_list_r17, 1, 16));
      }
      if (pos_meas_gap_pre_cfg_to_release_list_r17.is_present()) {
        HANDLE_CODE(
            pack_dyn_seq_of(bref, *pos_meas_gap_pre_cfg_to_release_list_r17, 1, 16, integer_packer<uint8_t>(1, 16)));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_gap_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(gap_fr2_present, 1));

  if (gap_fr2_present) {
    HANDLE_CODE(gap_fr2.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(gap_fr1, bref);
      unpack_presence_flag(gap_ue, bref);
      if (gap_fr1.is_present()) {
        HANDLE_CODE(gap_fr1->unpack(bref));
      }
      if (gap_ue.is_present()) {
        HANDLE_CODE(gap_ue->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(gap_to_add_mod_list_r17, bref);
      unpack_presence_flag(gap_to_release_list_r17, bref);
      unpack_presence_flag(pos_meas_gap_pre_cfg_to_add_mod_list_r17, bref);
      unpack_presence_flag(pos_meas_gap_pre_cfg_to_release_list_r17, bref);
      if (gap_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*gap_to_add_mod_list_r17, bref, 1, 8));
      }
      if (gap_to_release_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*gap_to_release_list_r17, bref, 1, 8, integer_packer<uint8_t>(1, 8)));
      }
      if (pos_meas_gap_pre_cfg_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*pos_meas_gap_pre_cfg_to_add_mod_list_r17, bref, 1, 16));
      }
      if (pos_meas_gap_pre_cfg_to_release_list_r17.is_present()) {
        HANDLE_CODE(
            unpack_dyn_seq_of(*pos_meas_gap_pre_cfg_to_release_list_r17, bref, 1, 16, integer_packer<uint8_t>(1, 16)));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void meas_gap_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (gap_fr2_present) {
    j.write_fieldname("gapFR2");
    gap_fr2.to_json(j);
  }
  if (ext) {
    if (gap_fr1.is_present()) {
      j.write_fieldname("gapFR1");
      gap_fr1->to_json(j);
    }
    if (gap_ue.is_present()) {
      j.write_fieldname("gapUE");
      gap_ue->to_json(j);
    }
    if (gap_to_add_mod_list_r17.is_present()) {
      j.start_array("gapToAddModList-r17");
      for (const auto& e1 : *gap_to_add_mod_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (gap_to_release_list_r17.is_present()) {
      j.start_array("gapToReleaseList-r17");
      for (const auto& e1 : *gap_to_release_list_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (pos_meas_gap_pre_cfg_to_add_mod_list_r17.is_present()) {
      j.start_array("posMeasGapPreConfigToAddModList-r17");
      for (const auto& e1 : *pos_meas_gap_pre_cfg_to_add_mod_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (pos_meas_gap_pre_cfg_to_release_list_r17.is_present()) {
      j.start_array("posMeasGapPreConfigToReleaseList-r17");
      for (const auto& e1 : *pos_meas_gap_pre_cfg_to_release_list_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

// MeasGapSharingConfig ::= SEQUENCE
SRSASN_CODE meas_gap_sharing_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(gap_sharing_fr2_present, 1));

  if (gap_sharing_fr2_present) {
    HANDLE_CODE(gap_sharing_fr2.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= gap_sharing_fr1.is_present();
    group_flags[0] |= gap_sharing_ue.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(gap_sharing_fr1.is_present(), 1));
      HANDLE_CODE(bref.pack(gap_sharing_ue.is_present(), 1));
      if (gap_sharing_fr1.is_present()) {
        HANDLE_CODE(gap_sharing_fr1->pack(bref));
      }
      if (gap_sharing_ue.is_present()) {
        HANDLE_CODE(gap_sharing_ue->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_gap_sharing_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(gap_sharing_fr2_present, 1));

  if (gap_sharing_fr2_present) {
    HANDLE_CODE(gap_sharing_fr2.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(gap_sharing_fr1, bref);
      unpack_presence_flag(gap_sharing_ue, bref);
      if (gap_sharing_fr1.is_present()) {
        HANDLE_CODE(gap_sharing_fr1->unpack(bref));
      }
      if (gap_sharing_ue.is_present()) {
        HANDLE_CODE(gap_sharing_ue->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void meas_gap_sharing_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (gap_sharing_fr2_present) {
    j.write_fieldname("gapSharingFR2");
    gap_sharing_fr2.to_json(j);
  }
  if (ext) {
    if (gap_sharing_fr1.is_present()) {
      j.write_fieldname("gapSharingFR1");
      gap_sharing_fr1->to_json(j);
    }
    if (gap_sharing_ue.is_present()) {
      j.write_fieldname("gapSharingUE");
      gap_sharing_ue->to_json(j);
    }
  }
  j.end_obj();
}

// OtherConfig ::= SEQUENCE
SRSASN_CODE other_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(delay_budget_report_cfg_present, 1));

  if (delay_budget_report_cfg_present) {
    HANDLE_CODE(delay_budget_report_cfg.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE other_cfg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(delay_budget_report_cfg_present, 1));

  if (delay_budget_report_cfg_present) {
    HANDLE_CODE(delay_budget_report_cfg.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void other_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (delay_budget_report_cfg_present) {
    j.write_fieldname("delayBudgetReportingConfig");
    delay_budget_report_cfg.to_json(j);
  }
  j.end_obj();
}

void other_cfg_s::delay_budget_report_cfg_c_::set(types::options e)
{
  type_ = e;
}
void other_cfg_s::delay_budget_report_cfg_c_::set_release()
{
  set(types::release);
}
other_cfg_s::delay_budget_report_cfg_c_::setup_s_& other_cfg_s::delay_budget_report_cfg_c_::set_setup()
{
  set(types::setup);
  return c;
}
void other_cfg_s::delay_budget_report_cfg_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::release:
      break;
    case types::setup:
      j.write_fieldname("setup");
      j.start_obj();
      j.write_str("delayBudgetReportingProhibitTimer", c.delay_budget_report_prohibit_timer.to_string());
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "other_cfg_s::delay_budget_report_cfg_c_");
  }
  j.end_obj();
}
SRSASN_CODE other_cfg_s::delay_budget_report_cfg_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::release:
      break;
    case types::setup:
      HANDLE_CODE(c.delay_budget_report_prohibit_timer.pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "other_cfg_s::delay_budget_report_cfg_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE other_cfg_s::delay_budget_report_cfg_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::release:
      break;
    case types::setup:
      HANDLE_CODE(c.delay_budget_report_prohibit_timer.unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "other_cfg_s::delay_budget_report_cfg_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char*
other_cfg_s::delay_budget_report_cfg_c_::setup_s_::delay_budget_report_prohibit_timer_opts::to_string() const
{
  static const char* names[] = {"s0", "s0dot4", "s0dot8", "s1dot6", "s3", "s6", "s12", "s30"};
  return convert_enum_idx(
      names, 8, value, "other_cfg_s::delay_budget_report_cfg_c_::setup_s_::delay_budget_report_prohibit_timer_e_");
}
float other_cfg_s::delay_budget_report_cfg_c_::setup_s_::delay_budget_report_prohibit_timer_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.4, 0.8, 1.6, 3.0, 6.0, 12.0, 30.0};
  return map_enum_number(
      numbers, 8, value, "other_cfg_s::delay_budget_report_cfg_c_::setup_s_::delay_budget_report_prohibit_timer_e_");
}
const char*
other_cfg_s::delay_budget_report_cfg_c_::setup_s_::delay_budget_report_prohibit_timer_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.4", "0.8", "1.6", "3", "6", "12", "30"};
  return convert_enum_idx(number_strs,
                          8,
                          value,
                          "other_cfg_s::delay_budget_report_cfg_c_::setup_s_::delay_budget_report_prohibit_timer_e_");
}

const char* other_cfg_s::delay_budget_report_cfg_c_::types_opts::to_string() const
{
  static const char* names[] = {"release", "setup"};
  return convert_enum_idx(names, 2, value, "other_cfg_s::delay_budget_report_cfg_c_::types");
}

// PeriodicRNAU-TimerValue ::= ENUMERATED
const char* periodic_rnau_timer_value_opts::to_string() const
{
  static const char* names[] = {"min5", "min10", "min20", "min30", "min60", "min120", "min360", "min720"};
  return convert_enum_idx(names, 8, value, "periodic_rnau_timer_value_e");
}
uint16_t periodic_rnau_timer_value_opts::to_number() const
{
  static const uint16_t numbers[] = {5, 10, 20, 30, 60, 120, 360, 720};
  return map_enum_number(numbers, 8, value, "periodic_rnau_timer_value_e");
}

// QuantityConfig ::= SEQUENCE
SRSASN_CODE quant_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(quant_cfg_nr_list.size() > 0, 1));

  if (quant_cfg_nr_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, quant_cfg_nr_list, 1, 2));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= quant_cfg_eutra.is_present();
    group_flags[1] |= quant_cfg_utra_fdd_r16.is_present();
    group_flags[1] |= quant_cfg_cli_r16.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(quant_cfg_eutra.is_present(), 1));
      if (quant_cfg_eutra.is_present()) {
        HANDLE_CODE(quant_cfg_eutra->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(quant_cfg_utra_fdd_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(quant_cfg_cli_r16.is_present(), 1));
      if (quant_cfg_utra_fdd_r16.is_present()) {
        HANDLE_CODE(quant_cfg_utra_fdd_r16->pack(bref));
      }
      if (quant_cfg_cli_r16.is_present()) {
        HANDLE_CODE(quant_cfg_cli_r16->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE quant_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool quant_cfg_nr_list_present;
  HANDLE_CODE(bref.unpack(quant_cfg_nr_list_present, 1));

  if (quant_cfg_nr_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(quant_cfg_nr_list, bref, 1, 2));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(quant_cfg_eutra, bref);
      if (quant_cfg_eutra.is_present()) {
        HANDLE_CODE(quant_cfg_eutra->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(quant_cfg_utra_fdd_r16, bref);
      unpack_presence_flag(quant_cfg_cli_r16, bref);
      if (quant_cfg_utra_fdd_r16.is_present()) {
        HANDLE_CODE(quant_cfg_utra_fdd_r16->unpack(bref));
      }
      if (quant_cfg_cli_r16.is_present()) {
        HANDLE_CODE(quant_cfg_cli_r16->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void quant_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (quant_cfg_nr_list.size() > 0) {
    j.start_array("quantityConfigNR-List");
    for (const auto& e1 : quant_cfg_nr_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ext) {
    if (quant_cfg_eutra.is_present()) {
      j.write_fieldname("quantityConfigEUTRA");
      quant_cfg_eutra->to_json(j);
    }
    if (quant_cfg_utra_fdd_r16.is_present()) {
      j.write_fieldname("quantityConfigUTRA-FDD-r16");
      quant_cfg_utra_fdd_r16->to_json(j);
    }
    if (quant_cfg_cli_r16.is_present()) {
      j.write_fieldname("quantityConfigCLI-r16");
      quant_cfg_cli_r16->to_json(j);
    }
  }
  j.end_obj();
}

// RAN-NotificationAreaInfo ::= CHOICE
void ran_notif_area_info_c::destroy_()
{
  switch (type_) {
    case types::cell_list:
      c.destroy<plmn_ran_area_cell_list_l>();
      break;
    case types::ran_area_cfg_list:
      c.destroy<plmn_ran_area_cfg_list_l>();
      break;
    default:
      break;
  }
}
void ran_notif_area_info_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::cell_list:
      c.init<plmn_ran_area_cell_list_l>();
      break;
    case types::ran_area_cfg_list:
      c.init<plmn_ran_area_cfg_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ran_notif_area_info_c");
  }
}
ran_notif_area_info_c::ran_notif_area_info_c(const ran_notif_area_info_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::cell_list:
      c.init(other.c.get<plmn_ran_area_cell_list_l>());
      break;
    case types::ran_area_cfg_list:
      c.init(other.c.get<plmn_ran_area_cfg_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ran_notif_area_info_c");
  }
}
ran_notif_area_info_c& ran_notif_area_info_c::operator=(const ran_notif_area_info_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::cell_list:
      c.set(other.c.get<plmn_ran_area_cell_list_l>());
      break;
    case types::ran_area_cfg_list:
      c.set(other.c.get<plmn_ran_area_cfg_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ran_notif_area_info_c");
  }

  return *this;
}
plmn_ran_area_cell_list_l& ran_notif_area_info_c::set_cell_list()
{
  set(types::cell_list);
  return c.get<plmn_ran_area_cell_list_l>();
}
plmn_ran_area_cfg_list_l& ran_notif_area_info_c::set_ran_area_cfg_list()
{
  set(types::ran_area_cfg_list);
  return c.get<plmn_ran_area_cfg_list_l>();
}
void ran_notif_area_info_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cell_list:
      j.start_array("cellList");
      for (const auto& e1 : c.get<plmn_ran_area_cell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ran_area_cfg_list:
      j.start_array("ran-AreaConfigList");
      for (const auto& e1 : c.get<plmn_ran_area_cfg_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "ran_notif_area_info_c");
  }
  j.end_obj();
}
SRSASN_CODE ran_notif_area_info_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cell_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<plmn_ran_area_cell_list_l>(), 1, 8));
      break;
    case types::ran_area_cfg_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<plmn_ran_area_cfg_list_l>(), 1, 8));
      break;
    default:
      log_invalid_choice_id(type_, "ran_notif_area_info_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ran_notif_area_info_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cell_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<plmn_ran_area_cell_list_l>(), bref, 1, 8));
      break;
    case types::ran_area_cfg_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<plmn_ran_area_cfg_list_l>(), bref, 1, 8));
      break;
    default:
      log_invalid_choice_id(type_, "ran_notif_area_info_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ran_notif_area_info_c::types_opts::to_string() const
{
  static const char* names[] = {"cellList", "ran-AreaConfigList"};
  return convert_enum_idx(names, 2, value, "ran_notif_area_info_c::types");
}

// RRCReconfiguration-v1540-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_v1540_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(other_cfg_v1540_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (other_cfg_v1540_present) {
    HANDLE_CODE(other_cfg_v1540.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_v1540_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(other_cfg_v1540_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (other_cfg_v1540_present) {
    HANDLE_CODE(other_cfg_v1540.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_v1540_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (other_cfg_v1540_present) {
    j.write_fieldname("otherConfig-v1540");
    other_cfg_v1540.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCRelease-v1610-IEs ::= SEQUENCE
SRSASN_CODE rrc_release_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(voice_fallback_ind_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_idle_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (meas_idle_cfg_r16_present) {
    HANDLE_CODE(meas_idle_cfg_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_release_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(voice_fallback_ind_r16_present, 1));
  HANDLE_CODE(bref.unpack(meas_idle_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (meas_idle_cfg_r16_present) {
    HANDLE_CODE(meas_idle_cfg_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_release_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (voice_fallback_ind_r16_present) {
    j.write_str("voiceFallbackIndication-r16", "true");
  }
  if (meas_idle_cfg_r16_present) {
    j.write_fieldname("measIdleConfig-r16");
    meas_idle_cfg_r16.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCResume-v1610-IEs ::= SEQUENCE
SRSASN_CODE rrc_resume_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(idle_mode_meas_req_r16_present, 1));
  HANDLE_CODE(bref.pack(restore_mcg_scells_r16_present, 1));
  HANDLE_CODE(bref.pack(restore_scg_r16_present, 1));
  HANDLE_CODE(bref.pack(mrdc_secondary_cell_group_r16_present, 1));
  HANDLE_CODE(bref.pack(need_for_gaps_cfg_nr_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (mrdc_secondary_cell_group_r16_present) {
    HANDLE_CODE(mrdc_secondary_cell_group_r16.pack(bref));
  }
  if (need_for_gaps_cfg_nr_r16_present) {
    HANDLE_CODE(need_for_gaps_cfg_nr_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(idle_mode_meas_req_r16_present, 1));
  HANDLE_CODE(bref.unpack(restore_mcg_scells_r16_present, 1));
  HANDLE_CODE(bref.unpack(restore_scg_r16_present, 1));
  HANDLE_CODE(bref.unpack(mrdc_secondary_cell_group_r16_present, 1));
  HANDLE_CODE(bref.unpack(need_for_gaps_cfg_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (mrdc_secondary_cell_group_r16_present) {
    HANDLE_CODE(mrdc_secondary_cell_group_r16.unpack(bref));
  }
  if (need_for_gaps_cfg_nr_r16_present) {
    HANDLE_CODE(need_for_gaps_cfg_nr_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_resume_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (idle_mode_meas_req_r16_present) {
    j.write_str("idleModeMeasurementReq-r16", "true");
  }
  if (restore_mcg_scells_r16_present) {
    j.write_str("restoreMCG-SCells-r16", "true");
  }
  if (restore_scg_r16_present) {
    j.write_str("restoreSCG-r16", "true");
  }
  if (mrdc_secondary_cell_group_r16_present) {
    j.write_fieldname("mrdc-SecondaryCellGroup-r16");
    mrdc_secondary_cell_group_r16.to_json(j);
  }
  if (need_for_gaps_cfg_nr_r16_present) {
    j.write_fieldname("needForGapsConfigNR-r16");
    need_for_gaps_cfg_nr_r16.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

void rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_::destroy_()
{
  switch (type_) {
    case types::nr_scg_r16:
      c.destroy<dyn_octstring>();
      break;
    case types::eutra_scg_r16:
      c.destroy<dyn_octstring>();
      break;
    default:
      break;
  }
}
void rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::nr_scg_r16:
      c.init<dyn_octstring>();
      break;
    case types::eutra_scg_r16:
      c.init<dyn_octstring>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_");
  }
}
rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_::mrdc_secondary_cell_group_r16_c_(
    const rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::nr_scg_r16:
      c.init(other.c.get<dyn_octstring>());
      break;
    case types::eutra_scg_r16:
      c.init(other.c.get<dyn_octstring>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_");
  }
}
rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_&
rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_::operator=(
    const rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::nr_scg_r16:
      c.set(other.c.get<dyn_octstring>());
      break;
    case types::eutra_scg_r16:
      c.set(other.c.get<dyn_octstring>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_");
  }

  return *this;
}
dyn_octstring& rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_::set_nr_scg_r16()
{
  set(types::nr_scg_r16);
  return c.get<dyn_octstring>();
}
dyn_octstring& rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_::set_eutra_scg_r16()
{
  set(types::eutra_scg_r16);
  return c.get<dyn_octstring>();
}
void rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::nr_scg_r16:
      j.write_str("nr-SCG-r16", c.get<dyn_octstring>().to_string());
      break;
    case types::eutra_scg_r16:
      j.write_str("eutra-SCG-r16", c.get<dyn_octstring>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::nr_scg_r16:
      HANDLE_CODE(c.get<dyn_octstring>().pack(bref));
      break;
    case types::eutra_scg_r16:
      HANDLE_CODE(c.get<dyn_octstring>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::nr_scg_r16:
      HANDLE_CODE(c.get<dyn_octstring>().unpack(bref));
      break;
    case types::eutra_scg_r16:
      HANDLE_CODE(c.get<dyn_octstring>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"nr-SCG-r16", "eutra-SCG-r16"};
  return convert_enum_idx(names, 2, value, "rrc_resume_v1610_ies_s::mrdc_secondary_cell_group_r16_c_::types");
}

// RedirectedCarrierInfo-EUTRA ::= SEQUENCE
SRSASN_CODE redirected_carrier_info_eutra_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cn_type_present, 1));

  HANDLE_CODE(pack_integer(bref, eutra_freq, (uint32_t)0u, (uint32_t)262143u));
  if (cn_type_present) {
    HANDLE_CODE(cn_type.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE redirected_carrier_info_eutra_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(cn_type_present, 1));

  HANDLE_CODE(unpack_integer(eutra_freq, bref, (uint32_t)0u, (uint32_t)262143u));
  if (cn_type_present) {
    HANDLE_CODE(cn_type.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void redirected_carrier_info_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("eutraFrequency", eutra_freq);
  if (cn_type_present) {
    j.write_str("cnType", cn_type.to_string());
  }
  j.end_obj();
}

const char* redirected_carrier_info_eutra_s::cn_type_opts::to_string() const
{
  static const char* names[] = {"epc", "fiveGC"};
  return convert_enum_idx(names, 2, value, "redirected_carrier_info_eutra_s::cn_type_e_");
}
uint8_t redirected_carrier_info_eutra_s::cn_type_opts::to_number() const
{
  if (value == five_gc) {
    return 5;
  }
  invalid_enum_number(value, "redirected_carrier_info_eutra_s::cn_type_e_");
  return 0;
}

// SDT-Config-r17 ::= SEQUENCE
SRSASN_CODE sdt_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sdt_drb_list_r17_present, 1));
  HANDLE_CODE(bref.pack(sdt_srb2_ind_r17_present, 1));
  HANDLE_CODE(bref.pack(sdt_mac_phy_cg_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(sdt_drb_continue_rohc_r17_present, 1));

  if (sdt_drb_list_r17_present) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sdt_drb_list_r17, 0, 29, integer_packer<uint8_t>(1, 32)));
  }
  if (sdt_mac_phy_cg_cfg_r17_present) {
    HANDLE_CODE(sdt_mac_phy_cg_cfg_r17.pack(bref));
  }
  if (sdt_drb_continue_rohc_r17_present) {
    HANDLE_CODE(sdt_drb_continue_rohc_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sdt_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sdt_drb_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(sdt_srb2_ind_r17_present, 1));
  HANDLE_CODE(bref.unpack(sdt_mac_phy_cg_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(sdt_drb_continue_rohc_r17_present, 1));

  if (sdt_drb_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sdt_drb_list_r17, bref, 0, 29, integer_packer<uint8_t>(1, 32)));
  }
  if (sdt_mac_phy_cg_cfg_r17_present) {
    HANDLE_CODE(sdt_mac_phy_cg_cfg_r17.unpack(bref));
  }
  if (sdt_drb_continue_rohc_r17_present) {
    HANDLE_CODE(sdt_drb_continue_rohc_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sdt_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sdt_drb_list_r17_present) {
    j.start_array("sdt-DRB-List-r17");
    for (const auto& e1 : sdt_drb_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sdt_srb2_ind_r17_present) {
    j.write_str("sdt-SRB2-Indication-r17", "allowed");
  }
  if (sdt_mac_phy_cg_cfg_r17_present) {
    j.write_fieldname("sdt-MAC-PHY-CG-Config-r17");
    sdt_mac_phy_cg_cfg_r17.to_json(j);
  }
  if (sdt_drb_continue_rohc_r17_present) {
    j.write_str("sdt-DRB-ContinueROHC-r17", sdt_drb_continue_rohc_r17.to_string());
  }
  j.end_obj();
}

const char* sdt_cfg_r17_s::sdt_drb_continue_rohc_r17_opts::to_string() const
{
  static const char* names[] = {"cell", "rna"};
  return convert_enum_idx(names, 2, value, "sdt_cfg_r17_s::sdt_drb_continue_rohc_r17_e_");
}

// UE-CapabilityRAT-Request ::= SEQUENCE
SRSASN_CODE ue_cap_rat_request_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cap_request_filt.size() > 0, 1));

  HANDLE_CODE(rat_type.pack(bref));
  if (cap_request_filt.size() > 0) {
    HANDLE_CODE(cap_request_filt.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_rat_request_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool cap_request_filt_present;
  HANDLE_CODE(bref.unpack(cap_request_filt_present, 1));

  HANDLE_CODE(rat_type.unpack(bref));
  if (cap_request_filt_present) {
    HANDLE_CODE(cap_request_filt.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_cap_rat_request_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("rat-Type", rat_type.to_string());
  if (cap_request_filt.size() > 0) {
    j.write_str("capabilityRequestFilter", cap_request_filt.to_string());
  }
  j.end_obj();
}

// AreaConfiguration-r16 ::= SEQUENCE
SRSASN_CODE area_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(inter_freq_target_list_r16.size() > 0, 1));

  HANDLE_CODE(area_cfg_r16.pack(bref));
  if (inter_freq_target_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, inter_freq_target_list_r16, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE area_cfg_r16_s::unpack(cbit_ref& bref)
{
  bool inter_freq_target_list_r16_present;
  HANDLE_CODE(bref.unpack(inter_freq_target_list_r16_present, 1));

  HANDLE_CODE(area_cfg_r16.unpack(bref));
  if (inter_freq_target_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(inter_freq_target_list_r16, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void area_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("areaConfig-r16");
  area_cfg_r16.to_json(j);
  if (inter_freq_target_list_r16.size() > 0) {
    j.start_array("interFreqTargetList-r16");
    for (const auto& e1 : inter_freq_target_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// CellReselectionPriorities ::= SEQUENCE
SRSASN_CODE cell_resel_priorities_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(freq_prio_list_eutra.size() > 0, 1));
  HANDLE_CODE(bref.pack(freq_prio_list_nr.size() > 0, 1));
  HANDLE_CODE(bref.pack(t320_present, 1));

  if (freq_prio_list_eutra.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, freq_prio_list_eutra, 1, 8));
  }
  if (freq_prio_list_nr.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, freq_prio_list_nr, 1, 8));
  }
  if (t320_present) {
    HANDLE_CODE(t320.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= freq_prio_list_ded_slicing_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(freq_prio_list_ded_slicing_r17.is_present(), 1));
      if (freq_prio_list_ded_slicing_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *freq_prio_list_ded_slicing_r17, 1, 8));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cell_resel_priorities_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool freq_prio_list_eutra_present;
  HANDLE_CODE(bref.unpack(freq_prio_list_eutra_present, 1));
  bool freq_prio_list_nr_present;
  HANDLE_CODE(bref.unpack(freq_prio_list_nr_present, 1));
  HANDLE_CODE(bref.unpack(t320_present, 1));

  if (freq_prio_list_eutra_present) {
    HANDLE_CODE(unpack_dyn_seq_of(freq_prio_list_eutra, bref, 1, 8));
  }
  if (freq_prio_list_nr_present) {
    HANDLE_CODE(unpack_dyn_seq_of(freq_prio_list_nr, bref, 1, 8));
  }
  if (t320_present) {
    HANDLE_CODE(t320.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(freq_prio_list_ded_slicing_r17, bref);
      if (freq_prio_list_ded_slicing_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*freq_prio_list_ded_slicing_r17, bref, 1, 8));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void cell_resel_priorities_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (freq_prio_list_eutra.size() > 0) {
    j.start_array("freqPriorityListEUTRA");
    for (const auto& e1 : freq_prio_list_eutra) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (freq_prio_list_nr.size() > 0) {
    j.start_array("freqPriorityListNR");
    for (const auto& e1 : freq_prio_list_nr) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (t320_present) {
    j.write_str("t320", t320.to_string());
  }
  if (ext) {
    if (freq_prio_list_ded_slicing_r17.is_present()) {
      j.start_array("freqPriorityListDedicatedSlicing-r17");
      for (const auto& e1 : *freq_prio_list_ded_slicing_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

const char* cell_resel_priorities_s::t320_opts::to_string() const
{
  static const char* names[] = {"min5", "min10", "min20", "min30", "min60", "min120", "min180", "spare1"};
  return convert_enum_idx(names, 8, value, "cell_resel_priorities_s::t320_e_");
}
uint8_t cell_resel_priorities_s::t320_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 10, 20, 30, 60, 120, 180};
  return map_enum_number(numbers, 7, value, "cell_resel_priorities_s::t320_e_");
}

// DLInformationTransfer-v1610-IEs ::= SEQUENCE
SRSASN_CODE dl_info_transfer_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ref_time_info_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ref_time_info_r16_present) {
    HANDLE_CODE(ref_time_info_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_info_transfer_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ref_time_info_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ref_time_info_r16_present) {
    HANDLE_CODE(ref_time_info_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void dl_info_transfer_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ref_time_info_r16_present) {
    j.write_fieldname("referenceTimeInfo-r16");
    ref_time_info_r16.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// LoggedEventTriggerConfig-r16 ::= SEQUENCE
SRSASN_CODE logged_event_trigger_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(event_type_r16.pack(bref));
  HANDLE_CODE(logging_interv_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE logged_event_trigger_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(event_type_r16.unpack(bref));
  HANDLE_CODE(logging_interv_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void logged_event_trigger_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("eventType-r16");
  event_type_r16.to_json(j);
  j.write_str("loggingInterval-r16", logging_interv_r16.to_string());
  j.end_obj();
}

// LoggedMeasurementConfiguration-v1700-IEs ::= SEQUENCE
SRSASN_CODE logged_meas_cfg_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sig_logged_meas_type_r17_present, 1));
  HANDLE_CODE(bref.pack(early_meas_ind_r17_present, 1));
  HANDLE_CODE(bref.pack(area_cfg_v1700_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (area_cfg_v1700_present) {
    HANDLE_CODE(area_cfg_v1700.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE logged_meas_cfg_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sig_logged_meas_type_r17_present, 1));
  HANDLE_CODE(bref.unpack(early_meas_ind_r17_present, 1));
  HANDLE_CODE(bref.unpack(area_cfg_v1700_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (area_cfg_v1700_present) {
    HANDLE_CODE(area_cfg_v1700.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void logged_meas_cfg_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sig_logged_meas_type_r17_present) {
    j.write_str("sigLoggedMeasType-r17", "true");
  }
  if (early_meas_ind_r17_present) {
    j.write_str("earlyMeasIndication-r17", "true");
  }
  if (area_cfg_v1700_present) {
    j.write_fieldname("areaConfiguration-v1700");
    area_cfg_v1700.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// LoggedPeriodicalReportConfig-r16 ::= SEQUENCE
SRSASN_CODE logged_periodical_report_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(logging_interv_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE logged_periodical_report_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(logging_interv_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void logged_periodical_report_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("loggingInterval-r16", logging_interv_r16.to_string());
  j.end_obj();
}

// LoggingDuration-r16 ::= ENUMERATED
const char* logging_dur_r16_opts::to_string() const
{
  static const char* names[] = {"min10", "min20", "min40", "min60", "min90", "min120", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "logging_dur_r16_e");
}
uint8_t logging_dur_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {10, 20, 40, 60, 90, 120};
  return map_enum_number(numbers, 6, value, "logging_dur_r16_e");
}

// MeasConfig ::= SEQUENCE
SRSASN_CODE meas_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_obj_to_rem_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_obj_to_add_mod_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(report_cfg_to_rem_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(report_cfg_to_add_mod_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_id_to_rem_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_id_to_add_mod_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(s_measure_cfg_present, 1));
  HANDLE_CODE(bref.pack(quant_cfg_present, 1));
  HANDLE_CODE(bref.pack(meas_gap_cfg_present, 1));
  HANDLE_CODE(bref.pack(meas_gap_sharing_cfg_present, 1));

  if (meas_obj_to_rem_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_obj_to_rem_list, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (meas_obj_to_add_mod_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_obj_to_add_mod_list, 1, 64));
  }
  if (report_cfg_to_rem_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, report_cfg_to_rem_list, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (report_cfg_to_add_mod_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, report_cfg_to_add_mod_list, 1, 64));
  }
  if (meas_id_to_rem_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_id_to_rem_list, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (meas_id_to_add_mod_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_id_to_add_mod_list, 1, 64));
  }
  if (s_measure_cfg_present) {
    HANDLE_CODE(s_measure_cfg.pack(bref));
  }
  if (quant_cfg_present) {
    HANDLE_CODE(quant_cfg.pack(bref));
  }
  if (meas_gap_cfg_present) {
    HANDLE_CODE(meas_gap_cfg.pack(bref));
  }
  if (meas_gap_sharing_cfg_present) {
    HANDLE_CODE(meas_gap_sharing_cfg.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= interfreq_cfg_no_gap_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(interfreq_cfg_no_gap_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool meas_obj_to_rem_list_present;
  HANDLE_CODE(bref.unpack(meas_obj_to_rem_list_present, 1));
  bool meas_obj_to_add_mod_list_present;
  HANDLE_CODE(bref.unpack(meas_obj_to_add_mod_list_present, 1));
  bool report_cfg_to_rem_list_present;
  HANDLE_CODE(bref.unpack(report_cfg_to_rem_list_present, 1));
  bool report_cfg_to_add_mod_list_present;
  HANDLE_CODE(bref.unpack(report_cfg_to_add_mod_list_present, 1));
  bool meas_id_to_rem_list_present;
  HANDLE_CODE(bref.unpack(meas_id_to_rem_list_present, 1));
  bool meas_id_to_add_mod_list_present;
  HANDLE_CODE(bref.unpack(meas_id_to_add_mod_list_present, 1));
  HANDLE_CODE(bref.unpack(s_measure_cfg_present, 1));
  HANDLE_CODE(bref.unpack(quant_cfg_present, 1));
  HANDLE_CODE(bref.unpack(meas_gap_cfg_present, 1));
  HANDLE_CODE(bref.unpack(meas_gap_sharing_cfg_present, 1));

  if (meas_obj_to_rem_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_obj_to_rem_list, bref, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (meas_obj_to_add_mod_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_obj_to_add_mod_list, bref, 1, 64));
  }
  if (report_cfg_to_rem_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(report_cfg_to_rem_list, bref, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (report_cfg_to_add_mod_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(report_cfg_to_add_mod_list, bref, 1, 64));
  }
  if (meas_id_to_rem_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_id_to_rem_list, bref, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (meas_id_to_add_mod_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_id_to_add_mod_list, bref, 1, 64));
  }
  if (s_measure_cfg_present) {
    HANDLE_CODE(s_measure_cfg.unpack(bref));
  }
  if (quant_cfg_present) {
    HANDLE_CODE(quant_cfg.unpack(bref));
  }
  if (meas_gap_cfg_present) {
    HANDLE_CODE(meas_gap_cfg.unpack(bref));
  }
  if (meas_gap_sharing_cfg_present) {
    HANDLE_CODE(meas_gap_sharing_cfg.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(interfreq_cfg_no_gap_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void meas_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_obj_to_rem_list.size() > 0) {
    j.start_array("measObjectToRemoveList");
    for (const auto& e1 : meas_obj_to_rem_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (meas_obj_to_add_mod_list.size() > 0) {
    j.start_array("measObjectToAddModList");
    for (const auto& e1 : meas_obj_to_add_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (report_cfg_to_rem_list.size() > 0) {
    j.start_array("reportConfigToRemoveList");
    for (const auto& e1 : report_cfg_to_rem_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (report_cfg_to_add_mod_list.size() > 0) {
    j.start_array("reportConfigToAddModList");
    for (const auto& e1 : report_cfg_to_add_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_id_to_rem_list.size() > 0) {
    j.start_array("measIdToRemoveList");
    for (const auto& e1 : meas_id_to_rem_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (meas_id_to_add_mod_list.size() > 0) {
    j.start_array("measIdToAddModList");
    for (const auto& e1 : meas_id_to_add_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (s_measure_cfg_present) {
    j.write_fieldname("s-MeasureConfig");
    s_measure_cfg.to_json(j);
  }
  if (quant_cfg_present) {
    j.write_fieldname("quantityConfig");
    quant_cfg.to_json(j);
  }
  if (meas_gap_cfg_present) {
    j.write_fieldname("measGapConfig");
    meas_gap_cfg.to_json(j);
  }
  if (meas_gap_sharing_cfg_present) {
    j.write_fieldname("measGapSharingConfig");
    meas_gap_sharing_cfg.to_json(j);
  }
  if (ext) {
    if (interfreq_cfg_no_gap_r16_present) {
      j.write_str("interFrequencyConfig-NoGap-r16", "true");
    }
  }
  j.end_obj();
}

void meas_cfg_s::s_measure_cfg_c_::destroy_() {}
void meas_cfg_s::s_measure_cfg_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
meas_cfg_s::s_measure_cfg_c_::s_measure_cfg_c_(const meas_cfg_s::s_measure_cfg_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ssb_rsrp:
      c.init(other.c.get<uint8_t>());
      break;
    case types::csi_rsrp:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_cfg_s::s_measure_cfg_c_");
  }
}
meas_cfg_s::s_measure_cfg_c_& meas_cfg_s::s_measure_cfg_c_::operator=(const meas_cfg_s::s_measure_cfg_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ssb_rsrp:
      c.set(other.c.get<uint8_t>());
      break;
    case types::csi_rsrp:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_cfg_s::s_measure_cfg_c_");
  }

  return *this;
}
uint8_t& meas_cfg_s::s_measure_cfg_c_::set_ssb_rsrp()
{
  set(types::ssb_rsrp);
  return c.get<uint8_t>();
}
uint8_t& meas_cfg_s::s_measure_cfg_c_::set_csi_rsrp()
{
  set(types::csi_rsrp);
  return c.get<uint8_t>();
}
void meas_cfg_s::s_measure_cfg_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ssb_rsrp:
      j.write_int("ssb-RSRP", c.get<uint8_t>());
      break;
    case types::csi_rsrp:
      j.write_int("csi-RSRP", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "meas_cfg_s::s_measure_cfg_c_");
  }
  j.end_obj();
}
SRSASN_CODE meas_cfg_s::s_measure_cfg_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ssb_rsrp:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    case types::csi_rsrp:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    default:
      log_invalid_choice_id(type_, "meas_cfg_s::s_measure_cfg_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_cfg_s::s_measure_cfg_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ssb_rsrp:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    case types::csi_rsrp:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    default:
      log_invalid_choice_id(type_, "meas_cfg_s::s_measure_cfg_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* meas_cfg_s::s_measure_cfg_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-RSRP", "csi-RSRP"};
  return convert_enum_idx(names, 2, value, "meas_cfg_s::s_measure_cfg_c_::types");
}

// MobilityFromNRCommand-v1610-IEs ::= SEQUENCE
SRSASN_CODE mob_from_nr_cmd_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(voice_fallback_ind_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mob_from_nr_cmd_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(voice_fallback_ind_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
void mob_from_nr_cmd_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (voice_fallback_ind_r16_present) {
    j.write_str("voiceFallbackIndication-r16", "true");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// RRCReconfiguration-v1530-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_v1530_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(master_cell_group.size() > 0, 1));
  HANDLE_CODE(bref.pack(full_cfg_present, 1));
  HANDLE_CODE(bref.pack(ded_nas_msg_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(master_key_upd_present, 1));
  HANDLE_CODE(bref.pack(ded_sib1_delivery.size() > 0, 1));
  HANDLE_CODE(bref.pack(ded_sys_info_delivery.size() > 0, 1));
  HANDLE_CODE(bref.pack(other_cfg_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (master_cell_group.size() > 0) {
    HANDLE_CODE(master_cell_group.pack(bref));
  }
  if (ded_nas_msg_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ded_nas_msg_list, 1, 29));
  }
  if (master_key_upd_present) {
    HANDLE_CODE(master_key_upd.pack(bref));
  }
  if (ded_sib1_delivery.size() > 0) {
    HANDLE_CODE(ded_sib1_delivery.pack(bref));
  }
  if (ded_sys_info_delivery.size() > 0) {
    HANDLE_CODE(ded_sys_info_delivery.pack(bref));
  }
  if (other_cfg_present) {
    HANDLE_CODE(other_cfg.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_v1530_ies_s::unpack(cbit_ref& bref)
{
  bool master_cell_group_present;
  HANDLE_CODE(bref.unpack(master_cell_group_present, 1));
  HANDLE_CODE(bref.unpack(full_cfg_present, 1));
  bool ded_nas_msg_list_present;
  HANDLE_CODE(bref.unpack(ded_nas_msg_list_present, 1));
  HANDLE_CODE(bref.unpack(master_key_upd_present, 1));
  bool ded_sib1_delivery_present;
  HANDLE_CODE(bref.unpack(ded_sib1_delivery_present, 1));
  bool ded_sys_info_delivery_present;
  HANDLE_CODE(bref.unpack(ded_sys_info_delivery_present, 1));
  HANDLE_CODE(bref.unpack(other_cfg_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (master_cell_group_present) {
    HANDLE_CODE(master_cell_group.unpack(bref));
  }
  if (ded_nas_msg_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ded_nas_msg_list, bref, 1, 29));
  }
  if (master_key_upd_present) {
    HANDLE_CODE(master_key_upd.unpack(bref));
  }
  if (ded_sib1_delivery_present) {
    HANDLE_CODE(ded_sib1_delivery.unpack(bref));
  }
  if (ded_sys_info_delivery_present) {
    HANDLE_CODE(ded_sys_info_delivery.unpack(bref));
  }
  if (other_cfg_present) {
    HANDLE_CODE(other_cfg.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_v1530_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (master_cell_group.size() > 0) {
    j.write_str("masterCellGroup", master_cell_group.to_string());
  }
  if (full_cfg_present) {
    j.write_str("fullConfig", "true");
  }
  if (ded_nas_msg_list.size() > 0) {
    j.start_array("dedicatedNAS-MessageList");
    for (const auto& e1 : ded_nas_msg_list) {
      j.write_str(e1.to_string());
    }
    j.end_array();
  }
  if (master_key_upd_present) {
    j.write_fieldname("masterKeyUpdate");
    master_key_upd.to_json(j);
  }
  if (ded_sib1_delivery.size() > 0) {
    j.write_str("dedicatedSIB1-Delivery", ded_sib1_delivery.to_string());
  }
  if (ded_sys_info_delivery.size() > 0) {
    j.write_str("dedicatedSystemInformationDelivery", ded_sys_info_delivery.to_string());
  }
  if (other_cfg_present) {
    j.write_fieldname("otherConfig");
    other_cfg.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCReestablishment-v1700-IEs ::= SEQUENCE
SRSASN_CODE rrc_reest_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_l2_remote_ue_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (sl_l2_remote_ue_cfg_r17_present) {
    HANDLE_CODE(sl_l2_remote_ue_cfg_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_reest_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_l2_remote_ue_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (sl_l2_remote_ue_cfg_r17_present) {
    HANDLE_CODE(sl_l2_remote_ue_cfg_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_reest_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_l2_remote_ue_cfg_r17_present) {
    j.write_fieldname("sl-L2RemoteUE-Config-r17");
    sl_l2_remote_ue_cfg_r17.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// RRCRelease-v1540-IEs ::= SEQUENCE
SRSASN_CODE rrc_release_v1540_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(wait_time_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (wait_time_present) {
    HANDLE_CODE(pack_integer(bref, wait_time, (uint8_t)1u, (uint8_t)16u));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_release_v1540_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(wait_time_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (wait_time_present) {
    HANDLE_CODE(unpack_integer(wait_time, bref, (uint8_t)1u, (uint8_t)16u));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_release_v1540_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (wait_time_present) {
    j.write_int("waitTime", wait_time);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCResume-v1560-IEs ::= SEQUENCE
SRSASN_CODE rrc_resume_v1560_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(radio_bearer_cfg2.size() > 0, 1));
  HANDLE_CODE(bref.pack(sk_counter_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (radio_bearer_cfg2.size() > 0) {
    HANDLE_CODE(radio_bearer_cfg2.pack(bref));
  }
  if (sk_counter_present) {
    HANDLE_CODE(pack_integer(bref, sk_counter, (uint32_t)0u, (uint32_t)65535u));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_v1560_ies_s::unpack(cbit_ref& bref)
{
  bool radio_bearer_cfg2_present;
  HANDLE_CODE(bref.unpack(radio_bearer_cfg2_present, 1));
  HANDLE_CODE(bref.unpack(sk_counter_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (radio_bearer_cfg2_present) {
    HANDLE_CODE(radio_bearer_cfg2.unpack(bref));
  }
  if (sk_counter_present) {
    HANDLE_CODE(unpack_integer(sk_counter, bref, (uint32_t)0u, (uint32_t)65535u));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_resume_v1560_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (radio_bearer_cfg2.size() > 0) {
    j.write_str("radioBearerConfig2", radio_bearer_cfg2.to_string());
  }
  if (sk_counter_present) {
    j.write_int("sk-Counter", sk_counter);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RedirectedCarrierInfo ::= CHOICE
void redirected_carrier_info_c::destroy_()
{
  switch (type_) {
    case types::nr:
      c.destroy<carrier_info_nr_s>();
      break;
    case types::eutra:
      c.destroy<redirected_carrier_info_eutra_s>();
      break;
    default:
      break;
  }
}
void redirected_carrier_info_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::nr:
      c.init<carrier_info_nr_s>();
      break;
    case types::eutra:
      c.init<redirected_carrier_info_eutra_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "redirected_carrier_info_c");
  }
}
redirected_carrier_info_c::redirected_carrier_info_c(const redirected_carrier_info_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::nr:
      c.init(other.c.get<carrier_info_nr_s>());
      break;
    case types::eutra:
      c.init(other.c.get<redirected_carrier_info_eutra_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "redirected_carrier_info_c");
  }
}
redirected_carrier_info_c& redirected_carrier_info_c::operator=(const redirected_carrier_info_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::nr:
      c.set(other.c.get<carrier_info_nr_s>());
      break;
    case types::eutra:
      c.set(other.c.get<redirected_carrier_info_eutra_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "redirected_carrier_info_c");
  }

  return *this;
}
carrier_info_nr_s& redirected_carrier_info_c::set_nr()
{
  set(types::nr);
  return c.get<carrier_info_nr_s>();
}
redirected_carrier_info_eutra_s& redirected_carrier_info_c::set_eutra()
{
  set(types::eutra);
  return c.get<redirected_carrier_info_eutra_s>();
}
void redirected_carrier_info_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::nr:
      j.write_fieldname("nr");
      c.get<carrier_info_nr_s>().to_json(j);
      break;
    case types::eutra:
      j.write_fieldname("eutra");
      c.get<redirected_carrier_info_eutra_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "redirected_carrier_info_c");
  }
  j.end_obj();
}
SRSASN_CODE redirected_carrier_info_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::nr:
      HANDLE_CODE(c.get<carrier_info_nr_s>().pack(bref));
      break;
    case types::eutra:
      HANDLE_CODE(c.get<redirected_carrier_info_eutra_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "redirected_carrier_info_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE redirected_carrier_info_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::nr:
      HANDLE_CODE(c.get<carrier_info_nr_s>().unpack(bref));
      break;
    case types::eutra:
      HANDLE_CODE(c.get<redirected_carrier_info_eutra_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "redirected_carrier_info_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* redirected_carrier_info_c::types_opts::to_string() const
{
  static const char* names[] = {"nr", "eutra"};
  return convert_enum_idx(names, 2, value, "redirected_carrier_info_c::types");
}

// SecurityConfigSMC ::= SEQUENCE
SRSASN_CODE security_cfg_smc_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(security_algorithm_cfg.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE security_cfg_smc_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(security_algorithm_cfg.unpack(bref));

  return SRSASN_SUCCESS;
}
void security_cfg_smc_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("securityAlgorithmConfig");
  security_algorithm_cfg.to_json(j);
  j.end_obj();
}

// SuspendConfig ::= SEQUENCE
SRSASN_CODE suspend_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ran_notif_area_info_present, 1));
  HANDLE_CODE(bref.pack(t380_present, 1));

  HANDLE_CODE(full_i_rnti.pack(bref));
  HANDLE_CODE(short_i_rnti.pack(bref));
  HANDLE_CODE(ran_paging_cycle.pack(bref));
  if (ran_notif_area_info_present) {
    HANDLE_CODE(ran_notif_area_info.pack(bref));
  }
  if (t380_present) {
    HANDLE_CODE(t380.pack(bref));
  }
  HANDLE_CODE(pack_integer(bref, next_hop_chaining_count, (uint8_t)0u, (uint8_t)7u));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sl_ue_id_remote_r17_present;
    group_flags[0] |= sdt_cfg_r17.is_present();
    group_flags[0] |= srs_pos_rrc_inactive_r17.is_present();
    group_flags[0] |= ran_extended_paging_cycle_r17_present;
    group_flags[1] |= ncd_ssb_red_cap_init_bwp_sdt_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_ue_id_remote_r17_present, 1));
      HANDLE_CODE(bref.pack(sdt_cfg_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(srs_pos_rrc_inactive_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(ran_extended_paging_cycle_r17_present, 1));
      if (sl_ue_id_remote_r17_present) {
        HANDLE_CODE(pack_integer(bref, sl_ue_id_remote_r17, (uint32_t)0u, (uint32_t)65535u));
      }
      if (sdt_cfg_r17.is_present()) {
        HANDLE_CODE(sdt_cfg_r17->pack(bref));
      }
      if (srs_pos_rrc_inactive_r17.is_present()) {
        HANDLE_CODE(srs_pos_rrc_inactive_r17->pack(bref));
      }
      if (ran_extended_paging_cycle_r17_present) {
        HANDLE_CODE(ran_extended_paging_cycle_r17.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ncd_ssb_red_cap_init_bwp_sdt_r17.is_present(), 1));
      if (ncd_ssb_red_cap_init_bwp_sdt_r17.is_present()) {
        HANDLE_CODE(ncd_ssb_red_cap_init_bwp_sdt_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE suspend_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ran_notif_area_info_present, 1));
  HANDLE_CODE(bref.unpack(t380_present, 1));

  HANDLE_CODE(full_i_rnti.unpack(bref));
  HANDLE_CODE(short_i_rnti.unpack(bref));
  HANDLE_CODE(ran_paging_cycle.unpack(bref));
  if (ran_notif_area_info_present) {
    HANDLE_CODE(ran_notif_area_info.unpack(bref));
  }
  if (t380_present) {
    HANDLE_CODE(t380.unpack(bref));
  }
  HANDLE_CODE(unpack_integer(next_hop_chaining_count, bref, (uint8_t)0u, (uint8_t)7u));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(sl_ue_id_remote_r17_present, 1));
      unpack_presence_flag(sdt_cfg_r17, bref);
      unpack_presence_flag(srs_pos_rrc_inactive_r17, bref);
      HANDLE_CODE(bref.unpack(ran_extended_paging_cycle_r17_present, 1));
      if (sl_ue_id_remote_r17_present) {
        HANDLE_CODE(unpack_integer(sl_ue_id_remote_r17, bref, (uint32_t)0u, (uint32_t)65535u));
      }
      if (sdt_cfg_r17.is_present()) {
        HANDLE_CODE(sdt_cfg_r17->unpack(bref));
      }
      if (srs_pos_rrc_inactive_r17.is_present()) {
        HANDLE_CODE(srs_pos_rrc_inactive_r17->unpack(bref));
      }
      if (ran_extended_paging_cycle_r17_present) {
        HANDLE_CODE(ran_extended_paging_cycle_r17.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(ncd_ssb_red_cap_init_bwp_sdt_r17, bref);
      if (ncd_ssb_red_cap_init_bwp_sdt_r17.is_present()) {
        HANDLE_CODE(ncd_ssb_red_cap_init_bwp_sdt_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void suspend_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("fullI-RNTI", full_i_rnti.to_string());
  j.write_str("shortI-RNTI", short_i_rnti.to_string());
  j.write_str("ran-PagingCycle", ran_paging_cycle.to_string());
  if (ran_notif_area_info_present) {
    j.write_fieldname("ran-NotificationAreaInfo");
    ran_notif_area_info.to_json(j);
  }
  if (t380_present) {
    j.write_str("t380", t380.to_string());
  }
  j.write_int("nextHopChainingCount", next_hop_chaining_count);
  if (ext) {
    if (sl_ue_id_remote_r17_present) {
      j.write_int("sl-UEIdentityRemote-r17", sl_ue_id_remote_r17);
    }
    if (sdt_cfg_r17.is_present()) {
      j.write_fieldname("sdt-Config-r17");
      sdt_cfg_r17->to_json(j);
    }
    if (srs_pos_rrc_inactive_r17.is_present()) {
      j.write_fieldname("srs-PosRRC-Inactive-r17");
      srs_pos_rrc_inactive_r17->to_json(j);
    }
    if (ran_extended_paging_cycle_r17_present) {
      j.write_str("ran-ExtendedPagingCycle-r17", ran_extended_paging_cycle_r17.to_string());
    }
    if (ncd_ssb_red_cap_init_bwp_sdt_r17.is_present()) {
      j.write_fieldname("ncd-SSB-RedCapInitialBWP-SDT-r17");
      ncd_ssb_red_cap_init_bwp_sdt_r17->to_json(j);
    }
  }
  j.end_obj();
}

// TraceReference-r16 ::= SEQUENCE
SRSASN_CODE trace_ref_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(plmn_id_r16.pack(bref));
  HANDLE_CODE(trace_id_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE trace_ref_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(plmn_id_r16.unpack(bref));
  HANDLE_CODE(trace_id_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void trace_ref_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("plmn-Identity-r16");
  plmn_id_r16.to_json(j);
  j.write_str("traceId-r16", trace_id_r16.to_string());
  j.end_obj();
}

// UEInformationRequest-v1700-IEs ::= SEQUENCE
SRSASN_CODE ue_info_request_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(success_ho_report_req_r17_present, 1));
  HANDLE_CODE(bref.pack(coarse_location_request_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_info_request_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(success_ho_report_req_r17_present, 1));
  HANDLE_CODE(bref.unpack(coarse_location_request_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
void ue_info_request_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (success_ho_report_req_r17_present) {
    j.write_str("successHO-ReportReq-r17", "true");
  }
  if (coarse_location_request_r17_present) {
    j.write_str("coarseLocationRequest-r17", "true");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// CounterCheck-IEs ::= SEQUENCE
SRSASN_CODE counter_check_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, drb_count_msb_info_list, 1, 29));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE counter_check_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(drb_count_msb_info_list, bref, 1, 29));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void counter_check_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("drb-CountMSB-InfoList");
  for (const auto& e1 : drb_count_msb_info_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// DLDedicatedMessageSegment-r16-IEs ::= SEQUENCE
SRSASN_CODE dl_ded_msg_segment_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(pack_integer(bref, segment_num_r16, (uint8_t)0u, (uint8_t)4u));
  HANDLE_CODE(rrc_msg_segment_container_r16.pack(bref));
  HANDLE_CODE(rrc_msg_segment_type_r16.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_ded_msg_segment_r16_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(unpack_integer(segment_num_r16, bref, (uint8_t)0u, (uint8_t)4u));
  HANDLE_CODE(rrc_msg_segment_container_r16.unpack(bref));
  HANDLE_CODE(rrc_msg_segment_type_r16.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void dl_ded_msg_segment_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("segmentNumber-r16", segment_num_r16);
  j.write_str("rrc-MessageSegmentContainer-r16", rrc_msg_segment_container_r16.to_string());
  j.write_str("rrc-MessageSegmentType-r16", rrc_msg_segment_type_r16.to_string());
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

const char* dl_ded_msg_segment_r16_ies_s::rrc_msg_segment_type_r16_opts::to_string() const
{
  static const char* names[] = {"notLastSegment", "lastSegment"};
  return convert_enum_idx(names, 2, value, "dl_ded_msg_segment_r16_ies_s::rrc_msg_segment_type_r16_e_");
}

// DLInformationTransfer-IEs ::= SEQUENCE
SRSASN_CODE dl_info_transfer_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ded_nas_msg.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ded_nas_msg.size() > 0) {
    HANDLE_CODE(ded_nas_msg.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_info_transfer_ies_s::unpack(cbit_ref& bref)
{
  bool ded_nas_msg_present;
  HANDLE_CODE(bref.unpack(ded_nas_msg_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ded_nas_msg_present) {
    HANDLE_CODE(ded_nas_msg.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void dl_info_transfer_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ded_nas_msg.size() > 0) {
    j.write_str("dedicatedNAS-Message", ded_nas_msg.to_string());
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// DLInformationTransferMRDC-r16-IEs ::= SEQUENCE
SRSASN_CODE dl_info_transfer_mrdc_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(dl_dcch_msg_nr_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(dl_dcch_msg_eutra_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (dl_dcch_msg_nr_r16.size() > 0) {
    HANDLE_CODE(dl_dcch_msg_nr_r16.pack(bref));
  }
  if (dl_dcch_msg_eutra_r16.size() > 0) {
    HANDLE_CODE(dl_dcch_msg_eutra_r16.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_info_transfer_mrdc_r16_ies_s::unpack(cbit_ref& bref)
{
  bool dl_dcch_msg_nr_r16_present;
  HANDLE_CODE(bref.unpack(dl_dcch_msg_nr_r16_present, 1));
  bool dl_dcch_msg_eutra_r16_present;
  HANDLE_CODE(bref.unpack(dl_dcch_msg_eutra_r16_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (dl_dcch_msg_nr_r16_present) {
    HANDLE_CODE(dl_dcch_msg_nr_r16.unpack(bref));
  }
  if (dl_dcch_msg_eutra_r16_present) {
    HANDLE_CODE(dl_dcch_msg_eutra_r16.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void dl_info_transfer_mrdc_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dl_dcch_msg_nr_r16.size() > 0) {
    j.write_str("dl-DCCH-MessageNR-r16", dl_dcch_msg_nr_r16.to_string());
  }
  if (dl_dcch_msg_eutra_r16.size() > 0) {
    j.write_str("dl-DCCH-MessageEUTRA-r16", dl_dcch_msg_eutra_r16.to_string());
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// LoggedMeasurementConfiguration-r16-IEs ::= SEQUENCE
SRSASN_CODE logged_meas_cfg_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(area_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(plmn_id_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(bt_name_list_r16_present, 1));
  HANDLE_CODE(bref.pack(wlan_name_list_r16_present, 1));
  HANDLE_CODE(bref.pack(sensor_name_list_r16_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(trace_ref_r16.pack(bref));
  HANDLE_CODE(trace_recording_session_ref_r16.pack(bref));
  HANDLE_CODE(tce_id_r16.pack(bref));
  HANDLE_CODE(absolute_time_info_r16.pack(bref));
  if (area_cfg_r16_present) {
    HANDLE_CODE(area_cfg_r16.pack(bref));
  }
  if (plmn_id_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, plmn_id_list_r16, 1, 16));
  }
  if (bt_name_list_r16_present) {
    HANDLE_CODE(bt_name_list_r16.pack(bref));
  }
  if (wlan_name_list_r16_present) {
    HANDLE_CODE(wlan_name_list_r16.pack(bref));
  }
  if (sensor_name_list_r16_present) {
    HANDLE_CODE(sensor_name_list_r16.pack(bref));
  }
  HANDLE_CODE(logging_dur_r16.pack(bref));
  HANDLE_CODE(report_type.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE logged_meas_cfg_r16_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(area_cfg_r16_present, 1));
  bool plmn_id_list_r16_present;
  HANDLE_CODE(bref.unpack(plmn_id_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(bt_name_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(wlan_name_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sensor_name_list_r16_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(trace_ref_r16.unpack(bref));
  HANDLE_CODE(trace_recording_session_ref_r16.unpack(bref));
  HANDLE_CODE(tce_id_r16.unpack(bref));
  HANDLE_CODE(absolute_time_info_r16.unpack(bref));
  if (area_cfg_r16_present) {
    HANDLE_CODE(area_cfg_r16.unpack(bref));
  }
  if (plmn_id_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(plmn_id_list_r16, bref, 1, 16));
  }
  if (bt_name_list_r16_present) {
    HANDLE_CODE(bt_name_list_r16.unpack(bref));
  }
  if (wlan_name_list_r16_present) {
    HANDLE_CODE(wlan_name_list_r16.unpack(bref));
  }
  if (sensor_name_list_r16_present) {
    HANDLE_CODE(sensor_name_list_r16.unpack(bref));
  }
  HANDLE_CODE(logging_dur_r16.unpack(bref));
  HANDLE_CODE(report_type.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void logged_meas_cfg_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("traceReference-r16");
  trace_ref_r16.to_json(j);
  j.write_str("traceRecordingSessionRef-r16", trace_recording_session_ref_r16.to_string());
  j.write_str("tce-Id-r16", tce_id_r16.to_string());
  j.write_str("absoluteTimeInfo-r16", absolute_time_info_r16.to_string());
  if (area_cfg_r16_present) {
    j.write_fieldname("areaConfiguration-r16");
    area_cfg_r16.to_json(j);
  }
  if (plmn_id_list_r16.size() > 0) {
    j.start_array("plmn-IdentityList-r16");
    for (const auto& e1 : plmn_id_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (bt_name_list_r16_present) {
    j.write_fieldname("bt-NameList-r16");
    bt_name_list_r16.to_json(j);
  }
  if (wlan_name_list_r16_present) {
    j.write_fieldname("wlan-NameList-r16");
    wlan_name_list_r16.to_json(j);
  }
  if (sensor_name_list_r16_present) {
    j.write_fieldname("sensor-NameList-r16");
    sensor_name_list_r16.to_json(j);
  }
  j.write_str("loggingDuration-r16", logging_dur_r16.to_string());
  j.write_fieldname("reportType");
  report_type.to_json(j);
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

void logged_meas_cfg_r16_ies_s::report_type_c_::destroy_()
{
  switch (type_) {
    case types::periodical:
      c.destroy<logged_periodical_report_cfg_r16_s>();
      break;
    case types::event_triggered:
      c.destroy<logged_event_trigger_cfg_r16_s>();
      break;
    default:
      break;
  }
}
void logged_meas_cfg_r16_ies_s::report_type_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::periodical:
      c.init<logged_periodical_report_cfg_r16_s>();
      break;
    case types::event_triggered:
      c.init<logged_event_trigger_cfg_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "logged_meas_cfg_r16_ies_s::report_type_c_");
  }
}
logged_meas_cfg_r16_ies_s::report_type_c_::report_type_c_(const logged_meas_cfg_r16_ies_s::report_type_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::periodical:
      c.init(other.c.get<logged_periodical_report_cfg_r16_s>());
      break;
    case types::event_triggered:
      c.init(other.c.get<logged_event_trigger_cfg_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "logged_meas_cfg_r16_ies_s::report_type_c_");
  }
}
logged_meas_cfg_r16_ies_s::report_type_c_&
logged_meas_cfg_r16_ies_s::report_type_c_::operator=(const logged_meas_cfg_r16_ies_s::report_type_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::periodical:
      c.set(other.c.get<logged_periodical_report_cfg_r16_s>());
      break;
    case types::event_triggered:
      c.set(other.c.get<logged_event_trigger_cfg_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "logged_meas_cfg_r16_ies_s::report_type_c_");
  }

  return *this;
}
logged_periodical_report_cfg_r16_s& logged_meas_cfg_r16_ies_s::report_type_c_::set_periodical()
{
  set(types::periodical);
  return c.get<logged_periodical_report_cfg_r16_s>();
}
logged_event_trigger_cfg_r16_s& logged_meas_cfg_r16_ies_s::report_type_c_::set_event_triggered()
{
  set(types::event_triggered);
  return c.get<logged_event_trigger_cfg_r16_s>();
}
void logged_meas_cfg_r16_ies_s::report_type_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::periodical:
      j.write_fieldname("periodical");
      c.get<logged_periodical_report_cfg_r16_s>().to_json(j);
      break;
    case types::event_triggered:
      j.write_fieldname("eventTriggered");
      c.get<logged_event_trigger_cfg_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "logged_meas_cfg_r16_ies_s::report_type_c_");
  }
  j.end_obj();
}
SRSASN_CODE logged_meas_cfg_r16_ies_s::report_type_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::periodical:
      HANDLE_CODE(c.get<logged_periodical_report_cfg_r16_s>().pack(bref));
      break;
    case types::event_triggered:
      HANDLE_CODE(c.get<logged_event_trigger_cfg_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "logged_meas_cfg_r16_ies_s::report_type_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE logged_meas_cfg_r16_ies_s::report_type_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::periodical:
      HANDLE_CODE(c.get<logged_periodical_report_cfg_r16_s>().unpack(bref));
      break;
    case types::event_triggered:
      HANDLE_CODE(c.get<logged_event_trigger_cfg_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "logged_meas_cfg_r16_ies_s::report_type_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* logged_meas_cfg_r16_ies_s::report_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"periodical", "eventTriggered"};
  return convert_enum_idx(names, 2, value, "logged_meas_cfg_r16_ies_s::report_type_c_::types");
}

// MobilityFromNRCommand-IEs ::= SEQUENCE
SRSASN_CODE mob_from_nr_cmd_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(nas_security_param_from_nr.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(target_rat_type.pack(bref));
  HANDLE_CODE(target_rat_msg_container.pack(bref));
  if (nas_security_param_from_nr.size() > 0) {
    HANDLE_CODE(nas_security_param_from_nr.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mob_from_nr_cmd_ies_s::unpack(cbit_ref& bref)
{
  bool nas_security_param_from_nr_present;
  HANDLE_CODE(bref.unpack(nas_security_param_from_nr_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(target_rat_type.unpack(bref));
  HANDLE_CODE(target_rat_msg_container.unpack(bref));
  if (nas_security_param_from_nr_present) {
    HANDLE_CODE(nas_security_param_from_nr.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mob_from_nr_cmd_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("targetRAT-Type", target_rat_type.to_string());
  j.write_str("targetRAT-MessageContainer", target_rat_msg_container.to_string());
  if (nas_security_param_from_nr.size() > 0) {
    j.write_str("nas-SecurityParamFromNR", nas_security_param_from_nr.to_string());
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

const char* mob_from_nr_cmd_ies_s::target_rat_type_opts::to_string() const
{
  static const char* names[] = {"eutra", "utra-fdd-v1610", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "mob_from_nr_cmd_ies_s::target_rat_type_e_");
}

// RRCReconfiguration-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(radio_bearer_cfg_present, 1));
  HANDLE_CODE(bref.pack(secondary_cell_group.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_cfg_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (radio_bearer_cfg_present) {
    HANDLE_CODE(radio_bearer_cfg.pack(bref));
  }
  if (secondary_cell_group.size() > 0) {
    HANDLE_CODE(secondary_cell_group.pack(bref));
  }
  if (meas_cfg_present) {
    HANDLE_CODE(meas_cfg.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(radio_bearer_cfg_present, 1));
  bool secondary_cell_group_present;
  HANDLE_CODE(bref.unpack(secondary_cell_group_present, 1));
  HANDLE_CODE(bref.unpack(meas_cfg_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (radio_bearer_cfg_present) {
    HANDLE_CODE(radio_bearer_cfg.unpack(bref));
  }
  if (secondary_cell_group_present) {
    HANDLE_CODE(secondary_cell_group.unpack(bref));
  }
  if (meas_cfg_present) {
    HANDLE_CODE(meas_cfg.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (radio_bearer_cfg_present) {
    j.write_fieldname("radioBearerConfig");
    radio_bearer_cfg.to_json(j);
  }
  if (secondary_cell_group.size() > 0) {
    j.write_str("secondaryCellGroup", secondary_cell_group.to_string());
  }
  if (meas_cfg_present) {
    j.write_fieldname("measConfig");
    meas_cfg.to_json(j);
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCReestablishment-IEs ::= SEQUENCE
SRSASN_CODE rrc_reest_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(pack_integer(bref, next_hop_chaining_count, (uint8_t)0u, (uint8_t)7u));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_reest_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(unpack_integer(next_hop_chaining_count, bref, (uint8_t)0u, (uint8_t)7u));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_reest_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("nextHopChainingCount", next_hop_chaining_count);
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCRelease-IEs ::= SEQUENCE
SRSASN_CODE rrc_release_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(redirected_carrier_info_present, 1));
  HANDLE_CODE(bref.pack(cell_resel_priorities_present, 1));
  HANDLE_CODE(bref.pack(suspend_cfg_present, 1));
  HANDLE_CODE(bref.pack(depriorit_req_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (redirected_carrier_info_present) {
    HANDLE_CODE(redirected_carrier_info.pack(bref));
  }
  if (cell_resel_priorities_present) {
    HANDLE_CODE(cell_resel_priorities.pack(bref));
  }
  if (suspend_cfg_present) {
    HANDLE_CODE(suspend_cfg.pack(bref));
  }
  if (depriorit_req_present) {
    HANDLE_CODE(depriorit_req.depriorit_type.pack(bref));
    HANDLE_CODE(depriorit_req.depriorit_timer.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_release_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(redirected_carrier_info_present, 1));
  HANDLE_CODE(bref.unpack(cell_resel_priorities_present, 1));
  HANDLE_CODE(bref.unpack(suspend_cfg_present, 1));
  HANDLE_CODE(bref.unpack(depriorit_req_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (redirected_carrier_info_present) {
    HANDLE_CODE(redirected_carrier_info.unpack(bref));
  }
  if (cell_resel_priorities_present) {
    HANDLE_CODE(cell_resel_priorities.unpack(bref));
  }
  if (suspend_cfg_present) {
    HANDLE_CODE(suspend_cfg.unpack(bref));
  }
  if (depriorit_req_present) {
    HANDLE_CODE(depriorit_req.depriorit_type.unpack(bref));
    HANDLE_CODE(depriorit_req.depriorit_timer.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_release_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (redirected_carrier_info_present) {
    j.write_fieldname("redirectedCarrierInfo");
    redirected_carrier_info.to_json(j);
  }
  if (cell_resel_priorities_present) {
    j.write_fieldname("cellReselectionPriorities");
    cell_resel_priorities.to_json(j);
  }
  if (suspend_cfg_present) {
    j.write_fieldname("suspendConfig");
    suspend_cfg.to_json(j);
  }
  if (depriorit_req_present) {
    j.write_fieldname("deprioritisationReq");
    j.start_obj();
    j.write_str("deprioritisationType", depriorit_req.depriorit_type.to_string());
    j.write_str("deprioritisationTimer", depriorit_req.depriorit_timer.to_string());
    j.end_obj();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

const char* rrc_release_ies_s::depriorit_req_s_::depriorit_type_opts::to_string() const
{
  static const char* names[] = {"frequency", "nr"};
  return convert_enum_idx(names, 2, value, "rrc_release_ies_s::depriorit_req_s_::depriorit_type_e_");
}

const char* rrc_release_ies_s::depriorit_req_s_::depriorit_timer_opts::to_string() const
{
  static const char* names[] = {"min5", "min10", "min15", "min30"};
  return convert_enum_idx(names, 4, value, "rrc_release_ies_s::depriorit_req_s_::depriorit_timer_e_");
}
uint8_t rrc_release_ies_s::depriorit_req_s_::depriorit_timer_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 10, 15, 30};
  return map_enum_number(numbers, 4, value, "rrc_release_ies_s::depriorit_req_s_::depriorit_timer_e_");
}

// RRCResume-IEs ::= SEQUENCE
SRSASN_CODE rrc_resume_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(radio_bearer_cfg_present, 1));
  HANDLE_CODE(bref.pack(master_cell_group.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_cfg_present, 1));
  HANDLE_CODE(bref.pack(full_cfg_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (radio_bearer_cfg_present) {
    HANDLE_CODE(radio_bearer_cfg.pack(bref));
  }
  if (master_cell_group.size() > 0) {
    HANDLE_CODE(master_cell_group.pack(bref));
  }
  if (meas_cfg_present) {
    HANDLE_CODE(meas_cfg.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(radio_bearer_cfg_present, 1));
  bool master_cell_group_present;
  HANDLE_CODE(bref.unpack(master_cell_group_present, 1));
  HANDLE_CODE(bref.unpack(meas_cfg_present, 1));
  HANDLE_CODE(bref.unpack(full_cfg_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (radio_bearer_cfg_present) {
    HANDLE_CODE(radio_bearer_cfg.unpack(bref));
  }
  if (master_cell_group_present) {
    HANDLE_CODE(master_cell_group.unpack(bref));
  }
  if (meas_cfg_present) {
    HANDLE_CODE(meas_cfg.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_resume_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (radio_bearer_cfg_present) {
    j.write_fieldname("radioBearerConfig");
    radio_bearer_cfg.to_json(j);
  }
  if (master_cell_group.size() > 0) {
    j.write_str("masterCellGroup", master_cell_group.to_string());
  }
  if (meas_cfg_present) {
    j.write_fieldname("measConfig");
    meas_cfg.to_json(j);
  }
  if (full_cfg_present) {
    j.write_str("fullConfig", "true");
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// SecurityModeCommand-IEs ::= SEQUENCE
SRSASN_CODE security_mode_cmd_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(security_cfg_smc.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE security_mode_cmd_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(security_cfg_smc.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void security_mode_cmd_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("securityConfigSMC");
  security_cfg_smc.to_json(j);
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// UECapabilityEnquiry-IEs ::= SEQUENCE
SRSASN_CODE ue_cap_enquiry_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(ue_cap_enquiry_ext.size() > 0, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, ue_cap_rat_request_list, 1, 8));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (ue_cap_enquiry_ext.size() > 0) {
    HANDLE_CODE(ue_cap_enquiry_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_enquiry_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  bool ue_cap_enquiry_ext_present;
  HANDLE_CODE(bref.unpack(ue_cap_enquiry_ext_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(ue_cap_rat_request_list, bref, 1, 8));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (ue_cap_enquiry_ext_present) {
    HANDLE_CODE(ue_cap_enquiry_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_cap_enquiry_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("ue-CapabilityRAT-RequestList");
  for (const auto& e1 : ue_cap_rat_request_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (ue_cap_enquiry_ext.size() > 0) {
    j.write_str("ue-CapabilityEnquiryExt", ue_cap_enquiry_ext.to_string());
  }
  j.end_obj();
}

// UEInformationRequest-r16-IEs ::= SEQUENCE
SRSASN_CODE ue_info_request_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(idle_mode_meas_req_r16_present, 1));
  HANDLE_CODE(bref.pack(log_meas_report_req_r16_present, 1));
  HANDLE_CODE(bref.pack(conn_est_fail_report_req_r16_present, 1));
  HANDLE_CODE(bref.pack(ra_report_req_r16_present, 1));
  HANDLE_CODE(bref.pack(rlf_report_req_r16_present, 1));
  HANDLE_CODE(bref.pack(mob_history_report_req_r16_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_info_request_r16_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(idle_mode_meas_req_r16_present, 1));
  HANDLE_CODE(bref.unpack(log_meas_report_req_r16_present, 1));
  HANDLE_CODE(bref.unpack(conn_est_fail_report_req_r16_present, 1));
  HANDLE_CODE(bref.unpack(ra_report_req_r16_present, 1));
  HANDLE_CODE(bref.unpack(rlf_report_req_r16_present, 1));
  HANDLE_CODE(bref.unpack(mob_history_report_req_r16_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_info_request_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (idle_mode_meas_req_r16_present) {
    j.write_str("idleModeMeasurementReq-r16", "true");
  }
  if (log_meas_report_req_r16_present) {
    j.write_str("logMeasReportReq-r16", "true");
  }
  if (conn_est_fail_report_req_r16_present) {
    j.write_str("connEstFailReportReq-r16", "true");
  }
  if (ra_report_req_r16_present) {
    j.write_str("ra-ReportReq-r16", "true");
  }
  if (rlf_report_req_r16_present) {
    j.write_str("rlf-ReportReq-r16", "true");
  }
  if (mob_history_report_req_r16_present) {
    j.write_str("mobilityHistoryReportReq-r16", "true");
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// CounterCheck ::= SEQUENCE
SRSASN_CODE counter_check_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE counter_check_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void counter_check_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void counter_check_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
counter_check_ies_s& counter_check_s::crit_exts_c_::set_counter_check()
{
  set(types::counter_check);
  return c;
}
void counter_check_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void counter_check_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::counter_check:
      j.write_fieldname("counterCheck");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "counter_check_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE counter_check_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::counter_check:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "counter_check_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE counter_check_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::counter_check:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "counter_check_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* counter_check_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"counterCheck", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "counter_check_s::crit_exts_c_::types");
}

// DLDedicatedMessageSegment-r16 ::= SEQUENCE
SRSASN_CODE dl_ded_msg_segment_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_ded_msg_segment_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void dl_ded_msg_segment_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void dl_ded_msg_segment_r16_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
dl_ded_msg_segment_r16_ies_s& dl_ded_msg_segment_r16_s::crit_exts_c_::set_dl_ded_msg_segment_r16()
{
  set(types::dl_ded_msg_segment_r16);
  return c;
}
void dl_ded_msg_segment_r16_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void dl_ded_msg_segment_r16_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::dl_ded_msg_segment_r16:
      j.write_fieldname("dlDedicatedMessageSegment-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "dl_ded_msg_segment_r16_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE dl_ded_msg_segment_r16_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::dl_ded_msg_segment_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "dl_ded_msg_segment_r16_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_ded_msg_segment_r16_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::dl_ded_msg_segment_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "dl_ded_msg_segment_r16_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* dl_ded_msg_segment_r16_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"dlDedicatedMessageSegment-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "dl_ded_msg_segment_r16_s::crit_exts_c_::types");
}

// DLInformationTransfer ::= SEQUENCE
SRSASN_CODE dl_info_transfer_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_info_transfer_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void dl_info_transfer_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void dl_info_transfer_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
dl_info_transfer_ies_s& dl_info_transfer_s::crit_exts_c_::set_dl_info_transfer()
{
  set(types::dl_info_transfer);
  return c;
}
void dl_info_transfer_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void dl_info_transfer_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::dl_info_transfer:
      j.write_fieldname("dlInformationTransfer");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "dl_info_transfer_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE dl_info_transfer_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::dl_info_transfer:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "dl_info_transfer_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_info_transfer_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::dl_info_transfer:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "dl_info_transfer_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* dl_info_transfer_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"dlInformationTransfer", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "dl_info_transfer_s::crit_exts_c_::types");
}

// DLInformationTransferMRDC-r16 ::= SEQUENCE
SRSASN_CODE dl_info_transfer_mrdc_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_info_transfer_mrdc_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void dl_info_transfer_mrdc_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void dl_info_transfer_mrdc_r16_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_& dl_info_transfer_mrdc_r16_s::crit_exts_c_::set_c1()
{
  set(types::c1);
  return c;
}
void dl_info_transfer_mrdc_r16_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void dl_info_transfer_mrdc_r16_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "dl_info_transfer_mrdc_r16_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE dl_info_transfer_mrdc_r16_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "dl_info_transfer_mrdc_r16_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_info_transfer_mrdc_r16_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "dl_info_transfer_mrdc_r16_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_::set(types::options e)
{
  type_ = e;
}
dl_info_transfer_mrdc_r16_ies_s& dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_::set_dl_info_transfer_mrdc_r16()
{
  set(types::dl_info_transfer_mrdc_r16);
  return c;
}
void dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_::set_spare3()
{
  set(types::spare3);
}
void dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_::set_spare2()
{
  set(types::spare2);
}
void dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_::set_spare1()
{
  set(types::spare1);
}
void dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::dl_info_transfer_mrdc_r16:
      j.write_fieldname("dlInformationTransferMRDC-r16");
      c.to_json(j);
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::dl_info_transfer_mrdc_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::dl_info_transfer_mrdc_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"dlInformationTransferMRDC-r16", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "dl_info_transfer_mrdc_r16_s::crit_exts_c_::c1_c_::types");
}

const char* dl_info_transfer_mrdc_r16_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"c1", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "dl_info_transfer_mrdc_r16_s::crit_exts_c_::types");
}
uint8_t dl_info_transfer_mrdc_r16_s::crit_exts_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "dl_info_transfer_mrdc_r16_s::crit_exts_c_::types");
}

// LoggedMeasurementConfiguration-r16 ::= SEQUENCE
SRSASN_CODE logged_meas_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE logged_meas_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void logged_meas_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void logged_meas_cfg_r16_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
logged_meas_cfg_r16_ies_s& logged_meas_cfg_r16_s::crit_exts_c_::set_logged_meas_cfg_r16()
{
  set(types::logged_meas_cfg_r16);
  return c;
}
void logged_meas_cfg_r16_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void logged_meas_cfg_r16_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::logged_meas_cfg_r16:
      j.write_fieldname("loggedMeasurementConfiguration-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "logged_meas_cfg_r16_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE logged_meas_cfg_r16_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::logged_meas_cfg_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "logged_meas_cfg_r16_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE logged_meas_cfg_r16_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::logged_meas_cfg_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "logged_meas_cfg_r16_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* logged_meas_cfg_r16_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"loggedMeasurementConfiguration-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "logged_meas_cfg_r16_s::crit_exts_c_::types");
}

// MobilityFromNRCommand ::= SEQUENCE
SRSASN_CODE mob_from_nr_cmd_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mob_from_nr_cmd_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void mob_from_nr_cmd_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void mob_from_nr_cmd_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
mob_from_nr_cmd_ies_s& mob_from_nr_cmd_s::crit_exts_c_::set_mob_from_nr_cmd()
{
  set(types::mob_from_nr_cmd);
  return c;
}
void mob_from_nr_cmd_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void mob_from_nr_cmd_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::mob_from_nr_cmd:
      j.write_fieldname("mobilityFromNRCommand");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "mob_from_nr_cmd_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE mob_from_nr_cmd_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::mob_from_nr_cmd:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "mob_from_nr_cmd_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mob_from_nr_cmd_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::mob_from_nr_cmd:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "mob_from_nr_cmd_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* mob_from_nr_cmd_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"mobilityFromNRCommand", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "mob_from_nr_cmd_s::crit_exts_c_::types");
}

// RRCReconfiguration ::= SEQUENCE
SRSASN_CODE rrc_recfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_recfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_recfg_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
rrc_recfg_ies_s& rrc_recfg_s::crit_exts_c_::set_rrc_recfg()
{
  set(types::rrc_recfg);
  return c;
}
void rrc_recfg_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_recfg_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_recfg:
      j.write_fieldname("rrcReconfiguration");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_recfg_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_recfg:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_recfg:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_recfg_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcReconfiguration", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_recfg_s::crit_exts_c_::types");
}

// RRCReestablishment ::= SEQUENCE
SRSASN_CODE rrc_reest_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_reest_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_reest_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_reest_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
rrc_reest_ies_s& rrc_reest_s::crit_exts_c_::set_rrc_reest()
{
  set(types::rrc_reest);
  return c;
}
void rrc_reest_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_reest_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_reest:
      j.write_fieldname("rrcReestablishment");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_reest_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_reest_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_reest:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_reest_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_reest_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_reest:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_reest_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_reest_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcReestablishment", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_reest_s::crit_exts_c_::types");
}

// RRCRelease ::= SEQUENCE
SRSASN_CODE rrc_release_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_release_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_release_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_release_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
rrc_release_ies_s& rrc_release_s::crit_exts_c_::set_rrc_release()
{
  set(types::rrc_release);
  return c;
}
void rrc_release_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_release_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_release:
      j.write_fieldname("rrcRelease");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_release_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_release_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_release:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_release_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_release_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_release:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_release_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_release_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcRelease", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_release_s::crit_exts_c_::types");
}

// RRCResume ::= SEQUENCE
SRSASN_CODE rrc_resume_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_resume_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_resume_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
rrc_resume_ies_s& rrc_resume_s::crit_exts_c_::set_rrc_resume()
{
  set(types::rrc_resume);
  return c;
}
void rrc_resume_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_resume_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_resume:
      j.write_fieldname("rrcResume");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_resume_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_resume:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_resume:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_resume_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcResume", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_resume_s::crit_exts_c_::types");
}

// SecurityModeCommand ::= SEQUENCE
SRSASN_CODE security_mode_cmd_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE security_mode_cmd_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void security_mode_cmd_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void security_mode_cmd_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
security_mode_cmd_ies_s& security_mode_cmd_s::crit_exts_c_::set_security_mode_cmd()
{
  set(types::security_mode_cmd);
  return c;
}
void security_mode_cmd_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void security_mode_cmd_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::security_mode_cmd:
      j.write_fieldname("securityModeCommand");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "security_mode_cmd_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE security_mode_cmd_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::security_mode_cmd:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "security_mode_cmd_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE security_mode_cmd_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::security_mode_cmd:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "security_mode_cmd_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* security_mode_cmd_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"securityModeCommand", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "security_mode_cmd_s::crit_exts_c_::types");
}

// UECapabilityEnquiry ::= SEQUENCE
SRSASN_CODE ue_cap_enquiry_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_enquiry_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_cap_enquiry_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ue_cap_enquiry_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ue_cap_enquiry_ies_s& ue_cap_enquiry_s::crit_exts_c_::set_ue_cap_enquiry()
{
  set(types::ue_cap_enquiry);
  return c;
}
void ue_cap_enquiry_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ue_cap_enquiry_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_cap_enquiry:
      j.write_fieldname("ueCapabilityEnquiry");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_cap_enquiry_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ue_cap_enquiry_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ue_cap_enquiry:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_cap_enquiry_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_enquiry_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ue_cap_enquiry:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_cap_enquiry_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_cap_enquiry_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"ueCapabilityEnquiry", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ue_cap_enquiry_s::crit_exts_c_::types");
}

// UEInformationRequest-r16 ::= SEQUENCE
SRSASN_CODE ue_info_request_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_info_request_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_info_request_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ue_info_request_r16_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ue_info_request_r16_ies_s& ue_info_request_r16_s::crit_exts_c_::set_ue_info_request_r16()
{
  set(types::ue_info_request_r16);
  return c;
}
void ue_info_request_r16_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ue_info_request_r16_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_info_request_r16:
      j.write_fieldname("ueInformationRequest-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_info_request_r16_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ue_info_request_r16_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ue_info_request_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_info_request_r16_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_info_request_r16_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ue_info_request_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_info_request_r16_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_info_request_r16_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"ueInformationRequest-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ue_info_request_r16_s::crit_exts_c_::types");
}

// DL-DCCH-MessageType ::= CHOICE
void dl_dcch_msg_type_c::set(types::options e)
{
  type_ = e;
}
dl_dcch_msg_type_c::c1_c_& dl_dcch_msg_type_c::set_c1()
{
  set(types::c1);
  return c;
}
void dl_dcch_msg_type_c::set_msg_class_ext()
{
  set(types::msg_class_ext);
}
void dl_dcch_msg_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "dl_dcch_msg_type_c");
  }
  j.end_obj();
}
SRSASN_CODE dl_dcch_msg_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "dl_dcch_msg_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_dcch_msg_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "dl_dcch_msg_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void dl_dcch_msg_type_c::c1_c_::destroy_()
{
  switch (type_) {
    case types::rrc_recfg:
      c.destroy<rrc_recfg_s>();
      break;
    case types::rrc_resume:
      c.destroy<rrc_resume_s>();
      break;
    case types::rrc_release:
      c.destroy<rrc_release_s>();
      break;
    case types::rrc_reest:
      c.destroy<rrc_reest_s>();
      break;
    case types::security_mode_cmd:
      c.destroy<security_mode_cmd_s>();
      break;
    case types::dl_info_transfer:
      c.destroy<dl_info_transfer_s>();
      break;
    case types::ue_cap_enquiry:
      c.destroy<ue_cap_enquiry_s>();
      break;
    case types::counter_check:
      c.destroy<counter_check_s>();
      break;
    case types::mob_from_nr_cmd:
      c.destroy<mob_from_nr_cmd_s>();
      break;
    case types::dl_ded_msg_segment_r16:
      c.destroy<dl_ded_msg_segment_r16_s>();
      break;
    case types::ue_info_request_r16:
      c.destroy<ue_info_request_r16_s>();
      break;
    case types::dl_info_transfer_mrdc_r16:
      c.destroy<dl_info_transfer_mrdc_r16_s>();
      break;
    case types::logged_meas_cfg_r16:
      c.destroy<logged_meas_cfg_r16_s>();
      break;
    default:
      break;
  }
}
void dl_dcch_msg_type_c::c1_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::rrc_recfg:
      c.init<rrc_recfg_s>();
      break;
    case types::rrc_resume:
      c.init<rrc_resume_s>();
      break;
    case types::rrc_release:
      c.init<rrc_release_s>();
      break;
    case types::rrc_reest:
      c.init<rrc_reest_s>();
      break;
    case types::security_mode_cmd:
      c.init<security_mode_cmd_s>();
      break;
    case types::dl_info_transfer:
      c.init<dl_info_transfer_s>();
      break;
    case types::ue_cap_enquiry:
      c.init<ue_cap_enquiry_s>();
      break;
    case types::counter_check:
      c.init<counter_check_s>();
      break;
    case types::mob_from_nr_cmd:
      c.init<mob_from_nr_cmd_s>();
      break;
    case types::dl_ded_msg_segment_r16:
      c.init<dl_ded_msg_segment_r16_s>();
      break;
    case types::ue_info_request_r16:
      c.init<ue_info_request_r16_s>();
      break;
    case types::dl_info_transfer_mrdc_r16:
      c.init<dl_info_transfer_mrdc_r16_s>();
      break;
    case types::logged_meas_cfg_r16:
      c.init<logged_meas_cfg_r16_s>();
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "dl_dcch_msg_type_c::c1_c_");
  }
}
dl_dcch_msg_type_c::c1_c_::c1_c_(const dl_dcch_msg_type_c::c1_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::rrc_recfg:
      c.init(other.c.get<rrc_recfg_s>());
      break;
    case types::rrc_resume:
      c.init(other.c.get<rrc_resume_s>());
      break;
    case types::rrc_release:
      c.init(other.c.get<rrc_release_s>());
      break;
    case types::rrc_reest:
      c.init(other.c.get<rrc_reest_s>());
      break;
    case types::security_mode_cmd:
      c.init(other.c.get<security_mode_cmd_s>());
      break;
    case types::dl_info_transfer:
      c.init(other.c.get<dl_info_transfer_s>());
      break;
    case types::ue_cap_enquiry:
      c.init(other.c.get<ue_cap_enquiry_s>());
      break;
    case types::counter_check:
      c.init(other.c.get<counter_check_s>());
      break;
    case types::mob_from_nr_cmd:
      c.init(other.c.get<mob_from_nr_cmd_s>());
      break;
    case types::dl_ded_msg_segment_r16:
      c.init(other.c.get<dl_ded_msg_segment_r16_s>());
      break;
    case types::ue_info_request_r16:
      c.init(other.c.get<ue_info_request_r16_s>());
      break;
    case types::dl_info_transfer_mrdc_r16:
      c.init(other.c.get<dl_info_transfer_mrdc_r16_s>());
      break;
    case types::logged_meas_cfg_r16:
      c.init(other.c.get<logged_meas_cfg_r16_s>());
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "dl_dcch_msg_type_c::c1_c_");
  }
}
dl_dcch_msg_type_c::c1_c_& dl_dcch_msg_type_c::c1_c_::operator=(const dl_dcch_msg_type_c::c1_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::rrc_recfg:
      c.set(other.c.get<rrc_recfg_s>());
      break;
    case types::rrc_resume:
      c.set(other.c.get<rrc_resume_s>());
      break;
    case types::rrc_release:
      c.set(other.c.get<rrc_release_s>());
      break;
    case types::rrc_reest:
      c.set(other.c.get<rrc_reest_s>());
      break;
    case types::security_mode_cmd:
      c.set(other.c.get<security_mode_cmd_s>());
      break;
    case types::dl_info_transfer:
      c.set(other.c.get<dl_info_transfer_s>());
      break;
    case types::ue_cap_enquiry:
      c.set(other.c.get<ue_cap_enquiry_s>());
      break;
    case types::counter_check:
      c.set(other.c.get<counter_check_s>());
      break;
    case types::mob_from_nr_cmd:
      c.set(other.c.get<mob_from_nr_cmd_s>());
      break;
    case types::dl_ded_msg_segment_r16:
      c.set(other.c.get<dl_ded_msg_segment_r16_s>());
      break;
    case types::ue_info_request_r16:
      c.set(other.c.get<ue_info_request_r16_s>());
      break;
    case types::dl_info_transfer_mrdc_r16:
      c.set(other.c.get<dl_info_transfer_mrdc_r16_s>());
      break;
    case types::logged_meas_cfg_r16:
      c.set(other.c.get<logged_meas_cfg_r16_s>());
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "dl_dcch_msg_type_c::c1_c_");
  }

  return *this;
}
rrc_recfg_s& dl_dcch_msg_type_c::c1_c_::set_rrc_recfg()
{
  set(types::rrc_recfg);
  return c.get<rrc_recfg_s>();
}
rrc_resume_s& dl_dcch_msg_type_c::c1_c_::set_rrc_resume()
{
  set(types::rrc_resume);
  return c.get<rrc_resume_s>();
}
rrc_release_s& dl_dcch_msg_type_c::c1_c_::set_rrc_release()
{
  set(types::rrc_release);
  return c.get<rrc_release_s>();
}
rrc_reest_s& dl_dcch_msg_type_c::c1_c_::set_rrc_reest()
{
  set(types::rrc_reest);
  return c.get<rrc_reest_s>();
}
security_mode_cmd_s& dl_dcch_msg_type_c::c1_c_::set_security_mode_cmd()
{
  set(types::security_mode_cmd);
  return c.get<security_mode_cmd_s>();
}
dl_info_transfer_s& dl_dcch_msg_type_c::c1_c_::set_dl_info_transfer()
{
  set(types::dl_info_transfer);
  return c.get<dl_info_transfer_s>();
}
ue_cap_enquiry_s& dl_dcch_msg_type_c::c1_c_::set_ue_cap_enquiry()
{
  set(types::ue_cap_enquiry);
  return c.get<ue_cap_enquiry_s>();
}
counter_check_s& dl_dcch_msg_type_c::c1_c_::set_counter_check()
{
  set(types::counter_check);
  return c.get<counter_check_s>();
}
mob_from_nr_cmd_s& dl_dcch_msg_type_c::c1_c_::set_mob_from_nr_cmd()
{
  set(types::mob_from_nr_cmd);
  return c.get<mob_from_nr_cmd_s>();
}
dl_ded_msg_segment_r16_s& dl_dcch_msg_type_c::c1_c_::set_dl_ded_msg_segment_r16()
{
  set(types::dl_ded_msg_segment_r16);
  return c.get<dl_ded_msg_segment_r16_s>();
}
ue_info_request_r16_s& dl_dcch_msg_type_c::c1_c_::set_ue_info_request_r16()
{
  set(types::ue_info_request_r16);
  return c.get<ue_info_request_r16_s>();
}
dl_info_transfer_mrdc_r16_s& dl_dcch_msg_type_c::c1_c_::set_dl_info_transfer_mrdc_r16()
{
  set(types::dl_info_transfer_mrdc_r16);
  return c.get<dl_info_transfer_mrdc_r16_s>();
}
logged_meas_cfg_r16_s& dl_dcch_msg_type_c::c1_c_::set_logged_meas_cfg_r16()
{
  set(types::logged_meas_cfg_r16);
  return c.get<logged_meas_cfg_r16_s>();
}
void dl_dcch_msg_type_c::c1_c_::set_spare3()
{
  set(types::spare3);
}
void dl_dcch_msg_type_c::c1_c_::set_spare2()
{
  set(types::spare2);
}
void dl_dcch_msg_type_c::c1_c_::set_spare1()
{
  set(types::spare1);
}
void dl_dcch_msg_type_c::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_recfg:
      j.write_fieldname("rrcReconfiguration");
      c.get<rrc_recfg_s>().to_json(j);
      break;
    case types::rrc_resume:
      j.write_fieldname("rrcResume");
      c.get<rrc_resume_s>().to_json(j);
      break;
    case types::rrc_release:
      j.write_fieldname("rrcRelease");
      c.get<rrc_release_s>().to_json(j);
      break;
    case types::rrc_reest:
      j.write_fieldname("rrcReestablishment");
      c.get<rrc_reest_s>().to_json(j);
      break;
    case types::security_mode_cmd:
      j.write_fieldname("securityModeCommand");
      c.get<security_mode_cmd_s>().to_json(j);
      break;
    case types::dl_info_transfer:
      j.write_fieldname("dlInformationTransfer");
      c.get<dl_info_transfer_s>().to_json(j);
      break;
    case types::ue_cap_enquiry:
      j.write_fieldname("ueCapabilityEnquiry");
      c.get<ue_cap_enquiry_s>().to_json(j);
      break;
    case types::counter_check:
      j.write_fieldname("counterCheck");
      c.get<counter_check_s>().to_json(j);
      break;
    case types::mob_from_nr_cmd:
      j.write_fieldname("mobilityFromNRCommand");
      c.get<mob_from_nr_cmd_s>().to_json(j);
      break;
    case types::dl_ded_msg_segment_r16:
      j.write_fieldname("dlDedicatedMessageSegment-r16");
      c.get<dl_ded_msg_segment_r16_s>().to_json(j);
      break;
    case types::ue_info_request_r16:
      j.write_fieldname("ueInformationRequest-r16");
      c.get<ue_info_request_r16_s>().to_json(j);
      break;
    case types::dl_info_transfer_mrdc_r16:
      j.write_fieldname("dlInformationTransferMRDC-r16");
      c.get<dl_info_transfer_mrdc_r16_s>().to_json(j);
      break;
    case types::logged_meas_cfg_r16:
      j.write_fieldname("loggedMeasurementConfiguration-r16");
      c.get<logged_meas_cfg_r16_s>().to_json(j);
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "dl_dcch_msg_type_c::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE dl_dcch_msg_type_c::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_recfg:
      HANDLE_CODE(c.get<rrc_recfg_s>().pack(bref));
      break;
    case types::rrc_resume:
      HANDLE_CODE(c.get<rrc_resume_s>().pack(bref));
      break;
    case types::rrc_release:
      HANDLE_CODE(c.get<rrc_release_s>().pack(bref));
      break;
    case types::rrc_reest:
      HANDLE_CODE(c.get<rrc_reest_s>().pack(bref));
      break;
    case types::security_mode_cmd:
      HANDLE_CODE(c.get<security_mode_cmd_s>().pack(bref));
      break;
    case types::dl_info_transfer:
      HANDLE_CODE(c.get<dl_info_transfer_s>().pack(bref));
      break;
    case types::ue_cap_enquiry:
      HANDLE_CODE(c.get<ue_cap_enquiry_s>().pack(bref));
      break;
    case types::counter_check:
      HANDLE_CODE(c.get<counter_check_s>().pack(bref));
      break;
    case types::mob_from_nr_cmd:
      HANDLE_CODE(c.get<mob_from_nr_cmd_s>().pack(bref));
      break;
    case types::dl_ded_msg_segment_r16:
      HANDLE_CODE(c.get<dl_ded_msg_segment_r16_s>().pack(bref));
      break;
    case types::ue_info_request_r16:
      HANDLE_CODE(c.get<ue_info_request_r16_s>().pack(bref));
      break;
    case types::dl_info_transfer_mrdc_r16:
      HANDLE_CODE(c.get<dl_info_transfer_mrdc_r16_s>().pack(bref));
      break;
    case types::logged_meas_cfg_r16:
      HANDLE_CODE(c.get<logged_meas_cfg_r16_s>().pack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "dl_dcch_msg_type_c::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_dcch_msg_type_c::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_recfg:
      HANDLE_CODE(c.get<rrc_recfg_s>().unpack(bref));
      break;
    case types::rrc_resume:
      HANDLE_CODE(c.get<rrc_resume_s>().unpack(bref));
      break;
    case types::rrc_release:
      HANDLE_CODE(c.get<rrc_release_s>().unpack(bref));
      break;
    case types::rrc_reest:
      HANDLE_CODE(c.get<rrc_reest_s>().unpack(bref));
      break;
    case types::security_mode_cmd:
      HANDLE_CODE(c.get<security_mode_cmd_s>().unpack(bref));
      break;
    case types::dl_info_transfer:
      HANDLE_CODE(c.get<dl_info_transfer_s>().unpack(bref));
      break;
    case types::ue_cap_enquiry:
      HANDLE_CODE(c.get<ue_cap_enquiry_s>().unpack(bref));
      break;
    case types::counter_check:
      HANDLE_CODE(c.get<counter_check_s>().unpack(bref));
      break;
    case types::mob_from_nr_cmd:
      HANDLE_CODE(c.get<mob_from_nr_cmd_s>().unpack(bref));
      break;
    case types::dl_ded_msg_segment_r16:
      HANDLE_CODE(c.get<dl_ded_msg_segment_r16_s>().unpack(bref));
      break;
    case types::ue_info_request_r16:
      HANDLE_CODE(c.get<ue_info_request_r16_s>().unpack(bref));
      break;
    case types::dl_info_transfer_mrdc_r16:
      HANDLE_CODE(c.get<dl_info_transfer_mrdc_r16_s>().unpack(bref));
      break;
    case types::logged_meas_cfg_r16:
      HANDLE_CODE(c.get<logged_meas_cfg_r16_s>().unpack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "dl_dcch_msg_type_c::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* dl_dcch_msg_type_c::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcReconfiguration",
                                "rrcResume",
                                "rrcRelease",
                                "rrcReestablishment",
                                "securityModeCommand",
                                "dlInformationTransfer",
                                "ueCapabilityEnquiry",
                                "counterCheck",
                                "mobilityFromNRCommand",
                                "dlDedicatedMessageSegment-r16",
                                "ueInformationRequest-r16",
                                "dlInformationTransferMRDC-r16",
                                "loggedMeasurementConfiguration-r16",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "dl_dcch_msg_type_c::c1_c_::types");
}

const char* dl_dcch_msg_type_c::types_opts::to_string() const
{
  static const char* names[] = {"c1", "messageClassExtension"};
  return convert_enum_idx(names, 2, value, "dl_dcch_msg_type_c::types");
}
uint8_t dl_dcch_msg_type_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "dl_dcch_msg_type_c::types");
}

// DL-DCCH-Message ::= SEQUENCE
SRSASN_CODE dl_dcch_msg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(msg.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_dcch_msg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(msg.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void dl_dcch_msg_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("DL-DCCH-Message");
  j.write_fieldname("message");
  msg.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

// T-Reassembly ::= ENUMERATED
const char* t_reassembly_opts::to_string() const
{
  static const char* names[] = {"ms0",   "ms5",   "ms10",  "ms15",  "ms20",  "ms25",  "ms30",  "ms35",
                                "ms40",  "ms45",  "ms50",  "ms55",  "ms60",  "ms65",  "ms70",  "ms75",
                                "ms80",  "ms85",  "ms90",  "ms95",  "ms100", "ms110", "ms120", "ms130",
                                "ms140", "ms150", "ms160", "ms170", "ms180", "ms190", "ms200", "spare1"};
  return convert_enum_idx(names, 32, value, "t_reassembly_e");
}
uint8_t t_reassembly_opts::to_number() const
{
  static const uint8_t numbers[] = {0,  5,  10, 15, 20,  25,  30,  35,  40,  45,  50,  55,  60,  65,  70, 75,
                                    80, 85, 90, 95, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200};
  return map_enum_number(numbers, 31, value, "t_reassembly_e");
}

// MRB-PDCP-ConfigBroadcast-r17 ::= SEQUENCE
SRSASN_CODE mrb_pdcp_cfg_broadcast_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pdcp_sn_size_dl_r17_present, 1));
  HANDLE_CODE(bref.pack(t_reordering_r17_present, 1));

  HANDLE_CODE(hdr_compress_r17.pack(bref));
  if (t_reordering_r17_present) {
    HANDLE_CODE(t_reordering_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mrb_pdcp_cfg_broadcast_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pdcp_sn_size_dl_r17_present, 1));
  HANDLE_CODE(bref.unpack(t_reordering_r17_present, 1));

  HANDLE_CODE(hdr_compress_r17.unpack(bref));
  if (t_reordering_r17_present) {
    HANDLE_CODE(t_reordering_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mrb_pdcp_cfg_broadcast_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pdcp_sn_size_dl_r17_present) {
    j.write_str("pdcp-SN-SizeDL-r17", "len12bits");
  }
  j.write_fieldname("headerCompression-r17");
  hdr_compress_r17.to_json(j);
  if (t_reordering_r17_present) {
    j.write_str("t-Reordering-r17", t_reordering_r17.to_string());
  }
  j.end_obj();
}

void mrb_pdcp_cfg_broadcast_r17_s::hdr_compress_r17_c_::set(types::options e)
{
  type_ = e;
}
void mrb_pdcp_cfg_broadcast_r17_s::hdr_compress_r17_c_::set_not_used()
{
  set(types::not_used);
}
mrb_pdcp_cfg_broadcast_r17_s::hdr_compress_r17_c_::rohc_s_&
mrb_pdcp_cfg_broadcast_r17_s::hdr_compress_r17_c_::set_rohc()
{
  set(types::rohc);
  return c;
}
void mrb_pdcp_cfg_broadcast_r17_s::hdr_compress_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::not_used:
      break;
    case types::rohc:
      j.write_fieldname("rohc");
      j.start_obj();
      if (c.max_c_id_r17_present) {
        j.write_int("maxCID-r17", c.max_c_id_r17);
      }
      j.write_fieldname("profiles-r17");
      j.start_obj();
      j.write_bool("profile0x0000-r17", c.profiles_r17.profile0x0000_r17);
      j.write_bool("profile0x0001-r17", c.profiles_r17.profile0x0001_r17);
      j.write_bool("profile0x0002-r17", c.profiles_r17.profile0x0002_r17);
      j.end_obj();
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "mrb_pdcp_cfg_broadcast_r17_s::hdr_compress_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE mrb_pdcp_cfg_broadcast_r17_s::hdr_compress_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::not_used:
      break;
    case types::rohc:
      HANDLE_CODE(bref.pack(c.max_c_id_r17_present, 1));
      if (c.max_c_id_r17_present) {
        HANDLE_CODE(pack_integer(bref, c.max_c_id_r17, (uint8_t)1u, (uint8_t)16u));
      }
      HANDLE_CODE(bref.pack(c.profiles_r17.profile0x0000_r17, 1));
      HANDLE_CODE(bref.pack(c.profiles_r17.profile0x0001_r17, 1));
      HANDLE_CODE(bref.pack(c.profiles_r17.profile0x0002_r17, 1));
      break;
    default:
      log_invalid_choice_id(type_, "mrb_pdcp_cfg_broadcast_r17_s::hdr_compress_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mrb_pdcp_cfg_broadcast_r17_s::hdr_compress_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::not_used:
      break;
    case types::rohc:
      HANDLE_CODE(bref.unpack(c.max_c_id_r17_present, 1));
      if (c.max_c_id_r17_present) {
        HANDLE_CODE(unpack_integer(c.max_c_id_r17, bref, (uint8_t)1u, (uint8_t)16u));
      }
      HANDLE_CODE(bref.unpack(c.profiles_r17.profile0x0000_r17, 1));
      HANDLE_CODE(bref.unpack(c.profiles_r17.profile0x0001_r17, 1));
      HANDLE_CODE(bref.unpack(c.profiles_r17.profile0x0002_r17, 1));
      break;
    default:
      log_invalid_choice_id(type_, "mrb_pdcp_cfg_broadcast_r17_s::hdr_compress_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* mrb_pdcp_cfg_broadcast_r17_s::hdr_compress_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"notUsed", "rohc"};
  return convert_enum_idx(names, 2, value, "mrb_pdcp_cfg_broadcast_r17_s::hdr_compress_r17_c_::types");
}

const char* mrb_pdcp_cfg_broadcast_r17_s::t_reordering_r17_opts::to_string() const
{
  static const char* names[] = {"ms1", "ms10", "ms40", "ms160", "ms500", "ms1000", "ms1250", "ms2750"};
  return convert_enum_idx(names, 8, value, "mrb_pdcp_cfg_broadcast_r17_s::t_reordering_r17_e_");
}
uint16_t mrb_pdcp_cfg_broadcast_r17_s::t_reordering_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {1, 10, 40, 160, 500, 1000, 1250, 2750};
  return map_enum_number(numbers, 8, value, "mrb_pdcp_cfg_broadcast_r17_s::t_reordering_r17_e_");
}

// MRB-RLC-ConfigBroadcast-r17 ::= SEQUENCE
SRSASN_CODE mrb_rlc_cfg_broadcast_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sn_field_len_r17_present, 1));
  HANDLE_CODE(bref.pack(t_reassembly_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, lc_ch_id_r17, (uint8_t)1u, (uint8_t)32u));
  if (t_reassembly_r17_present) {
    HANDLE_CODE(t_reassembly_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mrb_rlc_cfg_broadcast_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sn_field_len_r17_present, 1));
  HANDLE_CODE(bref.unpack(t_reassembly_r17_present, 1));

  HANDLE_CODE(unpack_integer(lc_ch_id_r17, bref, (uint8_t)1u, (uint8_t)32u));
  if (t_reassembly_r17_present) {
    HANDLE_CODE(t_reassembly_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mrb_rlc_cfg_broadcast_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("logicalChannelIdentity-r17", lc_ch_id_r17);
  if (sn_field_len_r17_present) {
    j.write_str("sn-FieldLength-r17", "size6");
  }
  if (t_reassembly_r17_present) {
    j.write_str("t-Reassembly-r17", t_reassembly_r17.to_string());
  }
  j.end_obj();
}

// MRB-InfoBroadcast-r17 ::= SEQUENCE
SRSASN_CODE mrb_info_broadcast_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pdcp_cfg_r17.pack(bref));
  HANDLE_CODE(rlc_cfg_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mrb_info_broadcast_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(pdcp_cfg_r17.unpack(bref));
  HANDLE_CODE(rlc_cfg_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void mrb_info_broadcast_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("pdcp-Config-r17");
  pdcp_cfg_r17.to_json(j);
  j.write_fieldname("rlc-Config-r17");
  rlc_cfg_r17.to_json(j);
  j.end_obj();
}

// MBS-NeighbourCell-r17 ::= SEQUENCE
SRSASN_CODE mbs_neighbour_cell_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(carrier_freq_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, pci_r17, (uint16_t)0u, (uint16_t)1007u));
  if (carrier_freq_r17_present) {
    HANDLE_CODE(pack_integer(bref, carrier_freq_r17, (uint32_t)0u, (uint32_t)3279165u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mbs_neighbour_cell_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(carrier_freq_r17_present, 1));

  HANDLE_CODE(unpack_integer(pci_r17, bref, (uint16_t)0u, (uint16_t)1007u));
  if (carrier_freq_r17_present) {
    HANDLE_CODE(unpack_integer(carrier_freq_r17, bref, (uint32_t)0u, (uint32_t)3279165u));
  }

  return SRSASN_SUCCESS;
}
void mbs_neighbour_cell_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId-r17", pci_r17);
  if (carrier_freq_r17_present) {
    j.write_int("carrierFreq-r17", carrier_freq_r17);
  }
  j.end_obj();
}

// MBS-SessionInfo-r17 ::= SEQUENCE
SRSASN_CODE mbs_session_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mtch_sched_info_r17_present, 1));
  HANDLE_CODE(bref.pack(mtch_neighbour_cell_r17_present, 1));
  HANDLE_CODE(bref.pack(pdsch_cfg_idx_r17_present, 1));
  HANDLE_CODE(bref.pack(mtch_ssb_map_win_idx_r17_present, 1));

  HANDLE_CODE(mbs_session_id_r17.pack(bref));
  HANDLE_CODE(pack_integer(bref, g_rnti_r17, (uint32_t)0u, (uint32_t)65535u));
  HANDLE_CODE(pack_dyn_seq_of(bref, mrb_list_broadcast_r17, 1, 4));
  if (mtch_sched_info_r17_present) {
    HANDLE_CODE(pack_integer(bref, mtch_sched_info_r17, (uint8_t)0u, (uint8_t)63u));
  }
  if (mtch_neighbour_cell_r17_present) {
    HANDLE_CODE(mtch_neighbour_cell_r17.pack(bref));
  }
  if (pdsch_cfg_idx_r17_present) {
    HANDLE_CODE(pack_integer(bref, pdsch_cfg_idx_r17, (uint8_t)0u, (uint8_t)15u));
  }
  if (mtch_ssb_map_win_idx_r17_present) {
    HANDLE_CODE(pack_integer(bref, mtch_ssb_map_win_idx_r17, (uint8_t)0u, (uint8_t)15u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mbs_session_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(mtch_sched_info_r17_present, 1));
  HANDLE_CODE(bref.unpack(mtch_neighbour_cell_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_cfg_idx_r17_present, 1));
  HANDLE_CODE(bref.unpack(mtch_ssb_map_win_idx_r17_present, 1));

  HANDLE_CODE(mbs_session_id_r17.unpack(bref));
  HANDLE_CODE(unpack_integer(g_rnti_r17, bref, (uint32_t)0u, (uint32_t)65535u));
  HANDLE_CODE(unpack_dyn_seq_of(mrb_list_broadcast_r17, bref, 1, 4));
  if (mtch_sched_info_r17_present) {
    HANDLE_CODE(unpack_integer(mtch_sched_info_r17, bref, (uint8_t)0u, (uint8_t)63u));
  }
  if (mtch_neighbour_cell_r17_present) {
    HANDLE_CODE(mtch_neighbour_cell_r17.unpack(bref));
  }
  if (pdsch_cfg_idx_r17_present) {
    HANDLE_CODE(unpack_integer(pdsch_cfg_idx_r17, bref, (uint8_t)0u, (uint8_t)15u));
  }
  if (mtch_ssb_map_win_idx_r17_present) {
    HANDLE_CODE(unpack_integer(mtch_ssb_map_win_idx_r17, bref, (uint8_t)0u, (uint8_t)15u));
  }

  return SRSASN_SUCCESS;
}
void mbs_session_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("mbs-SessionId-r17");
  mbs_session_id_r17.to_json(j);
  j.write_int("g-RNTI-r17", g_rnti_r17);
  j.start_array("mrb-ListBroadcast-r17");
  for (const auto& e1 : mrb_list_broadcast_r17) {
    e1.to_json(j);
  }
  j.end_array();
  if (mtch_sched_info_r17_present) {
    j.write_int("mtch-SchedulingInfo-r17", mtch_sched_info_r17);
  }
  if (mtch_neighbour_cell_r17_present) {
    j.write_str("mtch-NeighbourCell-r17", mtch_neighbour_cell_r17.to_string());
  }
  if (pdsch_cfg_idx_r17_present) {
    j.write_int("pdsch-ConfigIndex-r17", pdsch_cfg_idx_r17);
  }
  if (mtch_ssb_map_win_idx_r17_present) {
    j.write_int("mtch-SSB-MappingWindowIndex-r17", mtch_ssb_map_win_idx_r17);
  }
  j.end_obj();
}

// MTCH-SSB-MappingWindowCycleOffset-r17 ::= CHOICE
void mtch_ssb_map_win_cycle_offset_r17_c::destroy_() {}
void mtch_ssb_map_win_cycle_offset_r17_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
mtch_ssb_map_win_cycle_offset_r17_c::mtch_ssb_map_win_cycle_offset_r17_c(
    const mtch_ssb_map_win_cycle_offset_r17_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ms10:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms32:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms64:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms128:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms256:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "mtch_ssb_map_win_cycle_offset_r17_c");
  }
}
mtch_ssb_map_win_cycle_offset_r17_c&
mtch_ssb_map_win_cycle_offset_r17_c::operator=(const mtch_ssb_map_win_cycle_offset_r17_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ms10:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms32:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms64:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms128:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms256:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "mtch_ssb_map_win_cycle_offset_r17_c");
  }

  return *this;
}
uint8_t& mtch_ssb_map_win_cycle_offset_r17_c::set_ms10()
{
  set(types::ms10);
  return c.get<uint8_t>();
}
uint8_t& mtch_ssb_map_win_cycle_offset_r17_c::set_ms20()
{
  set(types::ms20);
  return c.get<uint8_t>();
}
uint8_t& mtch_ssb_map_win_cycle_offset_r17_c::set_ms32()
{
  set(types::ms32);
  return c.get<uint8_t>();
}
uint8_t& mtch_ssb_map_win_cycle_offset_r17_c::set_ms64()
{
  set(types::ms64);
  return c.get<uint8_t>();
}
uint8_t& mtch_ssb_map_win_cycle_offset_r17_c::set_ms128()
{
  set(types::ms128);
  return c.get<uint8_t>();
}
uint16_t& mtch_ssb_map_win_cycle_offset_r17_c::set_ms256()
{
  set(types::ms256);
  return c.get<uint16_t>();
}
void mtch_ssb_map_win_cycle_offset_r17_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ms10:
      j.write_int("ms10", c.get<uint8_t>());
      break;
    case types::ms20:
      j.write_int("ms20", c.get<uint8_t>());
      break;
    case types::ms32:
      j.write_int("ms32", c.get<uint8_t>());
      break;
    case types::ms64:
      j.write_int("ms64", c.get<uint8_t>());
      break;
    case types::ms128:
      j.write_int("ms128", c.get<uint8_t>());
      break;
    case types::ms256:
      j.write_int("ms256", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "mtch_ssb_map_win_cycle_offset_r17_c");
  }
  j.end_obj();
}
SRSASN_CODE mtch_ssb_map_win_cycle_offset_r17_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ms10:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)9u));
      break;
    case types::ms20:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms32:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms64:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)63u));
      break;
    case types::ms128:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    case types::ms256:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u));
      break;
    default:
      log_invalid_choice_id(type_, "mtch_ssb_map_win_cycle_offset_r17_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mtch_ssb_map_win_cycle_offset_r17_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ms10:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)9u));
      break;
    case types::ms20:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms32:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms64:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)63u));
      break;
    case types::ms128:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    case types::ms256:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u));
      break;
    default:
      log_invalid_choice_id(type_, "mtch_ssb_map_win_cycle_offset_r17_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* mtch_ssb_map_win_cycle_offset_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"ms10", "ms20", "ms32", "ms64", "ms128", "ms256"};
  return convert_enum_idx(names, 6, value, "mtch_ssb_map_win_cycle_offset_r17_c::types");
}
uint16_t mtch_ssb_map_win_cycle_offset_r17_c::types_opts::to_number() const
{
  static const uint16_t numbers[] = {10, 20, 32, 64, 128, 256};
  return map_enum_number(numbers, 6, value, "mtch_ssb_map_win_cycle_offset_r17_c::types");
}

// DRX-ConfigPTM-r17 ::= SEQUENCE
SRSASN_CODE drx_cfg_ptm_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(drx_harq_rtt_timer_dl_ptm_r17_present, 1));
  HANDLE_CODE(bref.pack(drx_retx_timer_dl_ptm_r17_present, 1));

  HANDLE_CODE(drx_on_dur_timer_ptm_r17.pack(bref));
  HANDLE_CODE(drx_inactivity_timer_ptm_r17.pack(bref));
  if (drx_harq_rtt_timer_dl_ptm_r17_present) {
    HANDLE_CODE(pack_integer(bref, drx_harq_rtt_timer_dl_ptm_r17, (uint8_t)0u, (uint8_t)56u));
  }
  if (drx_retx_timer_dl_ptm_r17_present) {
    HANDLE_CODE(drx_retx_timer_dl_ptm_r17.pack(bref));
  }
  HANDLE_CODE(drx_long_cycle_start_offset_ptm_r17.pack(bref));
  HANDLE_CODE(pack_integer(bref, drx_slot_offset_ptm_r17, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_cfg_ptm_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(drx_harq_rtt_timer_dl_ptm_r17_present, 1));
  HANDLE_CODE(bref.unpack(drx_retx_timer_dl_ptm_r17_present, 1));

  HANDLE_CODE(drx_on_dur_timer_ptm_r17.unpack(bref));
  HANDLE_CODE(drx_inactivity_timer_ptm_r17.unpack(bref));
  if (drx_harq_rtt_timer_dl_ptm_r17_present) {
    HANDLE_CODE(unpack_integer(drx_harq_rtt_timer_dl_ptm_r17, bref, (uint8_t)0u, (uint8_t)56u));
  }
  if (drx_retx_timer_dl_ptm_r17_present) {
    HANDLE_CODE(drx_retx_timer_dl_ptm_r17.unpack(bref));
  }
  HANDLE_CODE(drx_long_cycle_start_offset_ptm_r17.unpack(bref));
  HANDLE_CODE(unpack_integer(drx_slot_offset_ptm_r17, bref, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
void drx_cfg_ptm_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("drx-onDurationTimerPTM-r17");
  drx_on_dur_timer_ptm_r17.to_json(j);
  j.write_str("drx-InactivityTimerPTM-r17", drx_inactivity_timer_ptm_r17.to_string());
  if (drx_harq_rtt_timer_dl_ptm_r17_present) {
    j.write_int("drx-HARQ-RTT-TimerDL-PTM-r17", drx_harq_rtt_timer_dl_ptm_r17);
  }
  if (drx_retx_timer_dl_ptm_r17_present) {
    j.write_str("drx-RetransmissionTimerDL-PTM-r17", drx_retx_timer_dl_ptm_r17.to_string());
  }
  j.write_fieldname("drx-LongCycleStartOffsetPTM-r17");
  drx_long_cycle_start_offset_ptm_r17.to_json(j);
  j.write_int("drx-SlotOffsetPTM-r17", drx_slot_offset_ptm_r17);
  j.end_obj();
}

void drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::destroy_() {}
void drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::drx_on_dur_timer_ptm_r17_c_(
    const drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sub_milli_seconds:
      c.init(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.init(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_");
  }
}
drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_&
drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::operator=(const drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sub_milli_seconds:
      c.set(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.set(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_");
  }

  return *this;
}
uint8_t& drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::set_sub_milli_seconds()
{
  set(types::sub_milli_seconds);
  return c.get<uint8_t>();
}
drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::milli_seconds_e_&
drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::set_milli_seconds()
{
  set(types::milli_seconds);
  return c.get<milli_seconds_e_>();
}
void drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sub_milli_seconds:
      j.write_int("subMilliSeconds", c.get<uint8_t>());
      break;
    case types::milli_seconds:
      j.write_str("milliSeconds", c.get<milli_seconds_e_>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::milli_seconds_opts::to_string() const
{
  static const char* names[] = {"ms1",    "ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms8",    "ms10",
                                "ms20",   "ms30",   "ms40",   "ms50",   "ms60",   "ms80",   "ms100",  "ms200",
                                "ms300",  "ms400",  "ms500",  "ms600",  "ms800",  "ms1000", "ms1200", "ms1600",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::milli_seconds_e_");
}
uint16_t drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::milli_seconds_opts::to_number() const
{
  static const uint16_t numbers[] = {1,  2,  3,   4,   5,   6,   8,   10,  20,  30,   40,   50,
                                     60, 80, 100, 200, 300, 400, 500, 600, 800, 1000, 1200, 1600};
  return map_enum_number(numbers, 24, value, "drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::milli_seconds_e_");
}

const char* drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"subMilliSeconds", "milliSeconds"};
  return convert_enum_idx(names, 2, value, "drx_cfg_ptm_r17_s::drx_on_dur_timer_ptm_r17_c_::types");
}

const char* drx_cfg_ptm_r17_s::drx_inactivity_timer_ptm_r17_opts::to_string() const
{
  static const char* names[] = {"ms0",    "ms1",    "ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms8",
                                "ms10",   "ms20",   "ms30",   "ms40",   "ms50",   "ms60",   "ms80",   "ms100",
                                "ms200",  "ms300",  "ms500",  "ms750",  "ms1280", "ms1920", "ms2560", "spare9",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "drx_cfg_ptm_r17_s::drx_inactivity_timer_ptm_r17_e_");
}
uint16_t drx_cfg_ptm_r17_s::drx_inactivity_timer_ptm_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {0,  1,  2,  3,   4,   5,   6,   8,   10,   20,   30,  40,
                                     50, 60, 80, 100, 200, 300, 500, 750, 1280, 1920, 2560};
  return map_enum_number(numbers, 23, value, "drx_cfg_ptm_r17_s::drx_inactivity_timer_ptm_r17_e_");
}

const char* drx_cfg_ptm_r17_s::drx_retx_timer_dl_ptm_r17_opts::to_string() const
{
  static const char* names[] = {"sl0",    "sl1",     "sl2",     "sl4",     "sl6",     "sl8",     "sl16",    "sl24",
                                "sl33",   "sl40",    "sl64",    "sl80",    "sl96",    "sl112",   "sl128",   "sl160",
                                "sl320",  "spare15", "spare14", "spare13", "spare12", "spare11", "spare10", "spare9",
                                "spare8", "spare7",  "spare6",  "spare5",  "spare4",  "spare3",  "spare2",  "spare1"};
  return convert_enum_idx(names, 32, value, "drx_cfg_ptm_r17_s::drx_retx_timer_dl_ptm_r17_e_");
}
uint16_t drx_cfg_ptm_r17_s::drx_retx_timer_dl_ptm_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 1, 2, 4, 6, 8, 16, 24, 33, 40, 64, 80, 96, 112, 128, 160, 320};
  return map_enum_number(numbers, 17, value, "drx_cfg_ptm_r17_s::drx_retx_timer_dl_ptm_r17_e_");
}

void drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::destroy_() {}
void drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::drx_long_cycle_start_offset_ptm_r17_c_(
    const drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ms10:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms32:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms40:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms60:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms64:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms70:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms80:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms128:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms160:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms256:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms320:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms512:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms640:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms1024:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms1280:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms2048:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms2560:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms5120:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms10240:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_");
  }
}
drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_&
drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::operator=(
    const drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ms10:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms32:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms40:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms60:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms64:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms70:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms80:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms128:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms160:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms256:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms320:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms512:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms640:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms1024:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms1280:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms2048:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms2560:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms5120:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms10240:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_");
  }

  return *this;
}
uint8_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms10()
{
  set(types::ms10);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms20()
{
  set(types::ms20);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms32()
{
  set(types::ms32);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms40()
{
  set(types::ms40);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms60()
{
  set(types::ms60);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms64()
{
  set(types::ms64);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms70()
{
  set(types::ms70);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms80()
{
  set(types::ms80);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms128()
{
  set(types::ms128);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms160()
{
  set(types::ms160);
  return c.get<uint8_t>();
}
uint16_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms256()
{
  set(types::ms256);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms320()
{
  set(types::ms320);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms512()
{
  set(types::ms512);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms640()
{
  set(types::ms640);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms1024()
{
  set(types::ms1024);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms1280()
{
  set(types::ms1280);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms2048()
{
  set(types::ms2048);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms2560()
{
  set(types::ms2560);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms5120()
{
  set(types::ms5120);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::set_ms10240()
{
  set(types::ms10240);
  return c.get<uint16_t>();
}
void drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ms10:
      j.write_int("ms10", c.get<uint8_t>());
      break;
    case types::ms20:
      j.write_int("ms20", c.get<uint8_t>());
      break;
    case types::ms32:
      j.write_int("ms32", c.get<uint8_t>());
      break;
    case types::ms40:
      j.write_int("ms40", c.get<uint8_t>());
      break;
    case types::ms60:
      j.write_int("ms60", c.get<uint8_t>());
      break;
    case types::ms64:
      j.write_int("ms64", c.get<uint8_t>());
      break;
    case types::ms70:
      j.write_int("ms70", c.get<uint8_t>());
      break;
    case types::ms80:
      j.write_int("ms80", c.get<uint8_t>());
      break;
    case types::ms128:
      j.write_int("ms128", c.get<uint8_t>());
      break;
    case types::ms160:
      j.write_int("ms160", c.get<uint8_t>());
      break;
    case types::ms256:
      j.write_int("ms256", c.get<uint16_t>());
      break;
    case types::ms320:
      j.write_int("ms320", c.get<uint16_t>());
      break;
    case types::ms512:
      j.write_int("ms512", c.get<uint16_t>());
      break;
    case types::ms640:
      j.write_int("ms640", c.get<uint16_t>());
      break;
    case types::ms1024:
      j.write_int("ms1024", c.get<uint16_t>());
      break;
    case types::ms1280:
      j.write_int("ms1280", c.get<uint16_t>());
      break;
    case types::ms2048:
      j.write_int("ms2048", c.get<uint16_t>());
      break;
    case types::ms2560:
      j.write_int("ms2560", c.get<uint16_t>());
      break;
    case types::ms5120:
      j.write_int("ms5120", c.get<uint16_t>());
      break;
    case types::ms10240:
      j.write_int("ms10240", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ms10:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)9u));
      break;
    case types::ms20:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms32:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms40:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms60:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)59u));
      break;
    case types::ms64:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)63u));
      break;
    case types::ms70:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)69u));
      break;
    case types::ms80:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms128:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    case types::ms160:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms256:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u));
      break;
    case types::ms320:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms512:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)511u));
      break;
    case types::ms640:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms1024:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1023u));
      break;
    case types::ms1280:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms2048:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)2047u));
      break;
    case types::ms2560:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)2559u));
      break;
    case types::ms5120:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)5119u));
      break;
    case types::ms10240:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)10239u));
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ms10:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)9u));
      break;
    case types::ms20:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms32:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms40:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms60:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)59u));
      break;
    case types::ms64:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)63u));
      break;
    case types::ms70:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)69u));
      break;
    case types::ms80:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms128:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    case types::ms160:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms256:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u));
      break;
    case types::ms320:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms512:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)511u));
      break;
    case types::ms640:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms1024:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1023u));
      break;
    case types::ms1280:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms2048:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)2047u));
      break;
    case types::ms2560:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)2559u));
      break;
    case types::ms5120:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)5119u));
      break;
    case types::ms10240:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)10239u));
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"ms10",   "ms20",   "ms32",   "ms40",   "ms60",   "ms64",   "ms70",
                                "ms80",   "ms128",  "ms160",  "ms256",  "ms320",  "ms512",  "ms640",
                                "ms1024", "ms1280", "ms2048", "ms2560", "ms5120", "ms10240"};
  return convert_enum_idx(names, 20, value, "drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::types");
}
uint16_t drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {10,  20,  32,  40,  60,   64,   70,   80,   128,  160,
                                     256, 320, 512, 640, 1024, 1280, 2048, 2560, 5120, 10240};
  return map_enum_number(numbers, 20, value, "drx_cfg_ptm_r17_s::drx_long_cycle_start_offset_ptm_r17_c_::types");
}

// MBSBroadcastConfiguration-r17-IEs ::= SEQUENCE
SRSASN_CODE mbs_broadcast_cfg_r17_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mbs_session_info_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(mbs_neighbour_cell_list_r17_present, 1));
  HANDLE_CODE(bref.pack(drx_cfg_ptm_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(pdsch_cfg_mtch_r17_present, 1));
  HANDLE_CODE(bref.pack(mtch_ssb_map_win_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (mbs_session_info_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, mbs_session_info_list_r17, 1, 1024));
  }
  if (mbs_neighbour_cell_list_r17_present) {
    HANDLE_CODE(pack_dyn_seq_of(bref, mbs_neighbour_cell_list_r17, 0, 8));
  }
  if (drx_cfg_ptm_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, drx_cfg_ptm_list_r17, 1, 64));
  }
  if (pdsch_cfg_mtch_r17_present) {
    HANDLE_CODE(pdsch_cfg_mtch_r17.pack(bref));
  }
  if (mtch_ssb_map_win_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, mtch_ssb_map_win_list_r17, 1, 16));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mbs_broadcast_cfg_r17_ies_s::unpack(cbit_ref& bref)
{
  bool mbs_session_info_list_r17_present;
  HANDLE_CODE(bref.unpack(mbs_session_info_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(mbs_neighbour_cell_list_r17_present, 1));
  bool drx_cfg_ptm_list_r17_present;
  HANDLE_CODE(bref.unpack(drx_cfg_ptm_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_cfg_mtch_r17_present, 1));
  bool mtch_ssb_map_win_list_r17_present;
  HANDLE_CODE(bref.unpack(mtch_ssb_map_win_list_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (mbs_session_info_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(mbs_session_info_list_r17, bref, 1, 1024));
  }
  if (mbs_neighbour_cell_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(mbs_neighbour_cell_list_r17, bref, 0, 8));
  }
  if (drx_cfg_ptm_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(drx_cfg_ptm_list_r17, bref, 1, 64));
  }
  if (pdsch_cfg_mtch_r17_present) {
    HANDLE_CODE(pdsch_cfg_mtch_r17.unpack(bref));
  }
  if (mtch_ssb_map_win_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(mtch_ssb_map_win_list_r17, bref, 1, 16));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mbs_broadcast_cfg_r17_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mbs_session_info_list_r17.size() > 0) {
    j.start_array("mbs-SessionInfoList-r17");
    for (const auto& e1 : mbs_session_info_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (mbs_neighbour_cell_list_r17_present) {
    j.start_array("mbs-NeighbourCellList-r17");
    for (const auto& e1 : mbs_neighbour_cell_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (drx_cfg_ptm_list_r17.size() > 0) {
    j.start_array("drx-ConfigPTM-List-r17");
    for (const auto& e1 : drx_cfg_ptm_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (pdsch_cfg_mtch_r17_present) {
    j.write_fieldname("pdsch-ConfigMTCH-r17");
    pdsch_cfg_mtch_r17.to_json(j);
  }
  if (mtch_ssb_map_win_list_r17.size() > 0) {
    j.start_array("mtch-SSB-MappingWindowList-r17");
    for (const auto& e1 : mtch_ssb_map_win_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// MBSBroadcastConfiguration-r17 ::= SEQUENCE
SRSASN_CODE mbs_broadcast_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mbs_broadcast_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void mbs_broadcast_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void mbs_broadcast_cfg_r17_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
mbs_broadcast_cfg_r17_ies_s& mbs_broadcast_cfg_r17_s::crit_exts_c_::set_mbs_broadcast_cfg_r17()
{
  set(types::mbs_broadcast_cfg_r17);
  return c;
}
void mbs_broadcast_cfg_r17_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void mbs_broadcast_cfg_r17_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::mbs_broadcast_cfg_r17:
      j.write_fieldname("mbsBroadcastConfiguration-r17");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "mbs_broadcast_cfg_r17_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE mbs_broadcast_cfg_r17_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::mbs_broadcast_cfg_r17:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "mbs_broadcast_cfg_r17_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mbs_broadcast_cfg_r17_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::mbs_broadcast_cfg_r17:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "mbs_broadcast_cfg_r17_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* mbs_broadcast_cfg_r17_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"mbsBroadcastConfiguration-r17", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "mbs_broadcast_cfg_r17_s::crit_exts_c_::types");
}

// MCCH-MessageType-r17 ::= CHOICE
void mcch_msg_type_r17_c::set(types::options e)
{
  type_ = e;
}
mcch_msg_type_r17_c::c1_c_& mcch_msg_type_r17_c::set_c1()
{
  set(types::c1);
  return c;
}
void mcch_msg_type_r17_c::set_msg_class_ext()
{
  set(types::msg_class_ext);
}
void mcch_msg_type_r17_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "mcch_msg_type_r17_c");
  }
  j.end_obj();
}
SRSASN_CODE mcch_msg_type_r17_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "mcch_msg_type_r17_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mcch_msg_type_r17_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "mcch_msg_type_r17_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void mcch_msg_type_r17_c::c1_c_::set(types::options e)
{
  type_ = e;
}
mbs_broadcast_cfg_r17_s& mcch_msg_type_r17_c::c1_c_::set_mbs_broadcast_cfg_r17()
{
  set(types::mbs_broadcast_cfg_r17);
  return c;
}
void mcch_msg_type_r17_c::c1_c_::set_spare1()
{
  set(types::spare1);
}
void mcch_msg_type_r17_c::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::mbs_broadcast_cfg_r17:
      j.write_fieldname("mbsBroadcastConfiguration-r17");
      c.to_json(j);
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "mcch_msg_type_r17_c::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE mcch_msg_type_r17_c::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::mbs_broadcast_cfg_r17:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "mcch_msg_type_r17_c::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mcch_msg_type_r17_c::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::mbs_broadcast_cfg_r17:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "mcch_msg_type_r17_c::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* mcch_msg_type_r17_c::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"mbsBroadcastConfiguration-r17", "spare1"};
  return convert_enum_idx(names, 2, value, "mcch_msg_type_r17_c::c1_c_::types");
}

const char* mcch_msg_type_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"c1", "messageClassExtension"};
  return convert_enum_idx(names, 2, value, "mcch_msg_type_r17_c::types");
}
uint8_t mcch_msg_type_r17_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "mcch_msg_type_r17_c::types");
}

// MCCH-Message-r17 ::= SEQUENCE
SRSASN_CODE mcch_msg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(msg.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE mcch_msg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(msg.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void mcch_msg_r17_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("MCCH-Message-r17");
  j.write_fieldname("message");
  msg.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

// PagingRecord-v1700 ::= SEQUENCE
SRSASN_CODE paging_record_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(paging_cause_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_record_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(paging_cause_r17_present, 1));

  return SRSASN_SUCCESS;
}
void paging_record_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (paging_cause_r17_present) {
    j.write_str("pagingCause-r17", "voice");
  }
  j.end_obj();
}

// PagingUE-Identity ::= CHOICE
void paging_ue_id_c::destroy_()
{
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      c.destroy<fixed_bitstring<48>>();
      break;
    case types::full_i_rnti:
      c.destroy<fixed_bitstring<40>>();
      break;
    default:
      break;
  }
}
void paging_ue_id_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      c.init<fixed_bitstring<48>>();
      break;
    case types::full_i_rnti:
      c.init<fixed_bitstring<40>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_ue_id_c");
  }
}
paging_ue_id_c::paging_ue_id_c(const paging_ue_id_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      c.init(other.c.get<fixed_bitstring<48>>());
      break;
    case types::full_i_rnti:
      c.init(other.c.get<fixed_bitstring<40>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_ue_id_c");
  }
}
paging_ue_id_c& paging_ue_id_c::operator=(const paging_ue_id_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      c.set(other.c.get<fixed_bitstring<48>>());
      break;
    case types::full_i_rnti:
      c.set(other.c.get<fixed_bitstring<40>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_ue_id_c");
  }

  return *this;
}
fixed_bitstring<48>& paging_ue_id_c::set_ng_5_g_s_tmsi()
{
  set(types::ng_5_g_s_tmsi);
  return c.get<fixed_bitstring<48>>();
}
fixed_bitstring<40>& paging_ue_id_c::set_full_i_rnti()
{
  set(types::full_i_rnti);
  return c.get<fixed_bitstring<40>>();
}
void paging_ue_id_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      j.write_str("ng-5G-S-TMSI", c.get<fixed_bitstring<48>>().to_string());
      break;
    case types::full_i_rnti:
      j.write_str("fullI-RNTI", c.get<fixed_bitstring<40>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "paging_ue_id_c");
  }
  j.end_obj();
}
SRSASN_CODE paging_ue_id_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      HANDLE_CODE(c.get<fixed_bitstring<48>>().pack(bref));
      break;
    case types::full_i_rnti:
      HANDLE_CODE(c.get<fixed_bitstring<40>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "paging_ue_id_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_ue_id_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      HANDLE_CODE(c.get<fixed_bitstring<48>>().unpack(bref));
      break;
    case types::full_i_rnti:
      HANDLE_CODE(c.get<fixed_bitstring<40>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "paging_ue_id_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* paging_ue_id_c::types_opts::to_string() const
{
  static const char* names[] = {"ng-5G-S-TMSI", "fullI-RNTI"};
  return convert_enum_idx(names, 2, value, "paging_ue_id_c::types");
}
int8_t paging_ue_id_c::types_opts::to_number() const
{
  static const int8_t numbers[] = {-5};
  return map_enum_number(numbers, 1, value, "paging_ue_id_c::types");
}

// PagingRecord ::= SEQUENCE
SRSASN_CODE paging_record_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(access_type_present, 1));

  HANDLE_CODE(ue_id.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_record_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(access_type_present, 1));

  HANDLE_CODE(ue_id.unpack(bref));

  return SRSASN_SUCCESS;
}
void paging_record_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("ue-Identity");
  ue_id.to_json(j);
  if (access_type_present) {
    j.write_str("accessType", "non3GPP");
  }
  j.end_obj();
}

// Paging-v1700-IEs ::= SEQUENCE
SRSASN_CODE paging_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(paging_record_list_v1700.size() > 0, 1));
  HANDLE_CODE(bref.pack(paging_group_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (paging_record_list_v1700.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, paging_record_list_v1700, 1, 32));
  }
  if (paging_group_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, paging_group_list_r17, 1, 32));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_v1700_ies_s::unpack(cbit_ref& bref)
{
  bool paging_record_list_v1700_present;
  HANDLE_CODE(bref.unpack(paging_record_list_v1700_present, 1));
  bool paging_group_list_r17_present;
  HANDLE_CODE(bref.unpack(paging_group_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (paging_record_list_v1700_present) {
    HANDLE_CODE(unpack_dyn_seq_of(paging_record_list_v1700, bref, 1, 32));
  }
  if (paging_group_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(paging_group_list_r17, bref, 1, 32));
  }

  return SRSASN_SUCCESS;
}
void paging_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (paging_record_list_v1700.size() > 0) {
    j.start_array("pagingRecordList-v1700");
    for (const auto& e1 : paging_record_list_v1700) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (paging_group_list_r17.size() > 0) {
    j.start_array("pagingGroupList-r17");
    for (const auto& e1 : paging_group_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// Paging ::= SEQUENCE
SRSASN_CODE paging_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(paging_record_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (paging_record_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, paging_record_list, 1, 32));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_s::unpack(cbit_ref& bref)
{
  bool paging_record_list_present;
  HANDLE_CODE(bref.unpack(paging_record_list_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (paging_record_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(paging_record_list, bref, 1, 32));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void paging_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (paging_record_list.size() > 0) {
    j.start_array("pagingRecordList");
    for (const auto& e1 : paging_record_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// PCCH-MessageType ::= CHOICE
void pcch_msg_type_c::set(types::options e)
{
  type_ = e;
}
pcch_msg_type_c::c1_c_& pcch_msg_type_c::set_c1()
{
  set(types::c1);
  return c;
}
void pcch_msg_type_c::set_msg_class_ext()
{
  set(types::msg_class_ext);
}
void pcch_msg_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "pcch_msg_type_c");
  }
  j.end_obj();
}
SRSASN_CODE pcch_msg_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "pcch_msg_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pcch_msg_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "pcch_msg_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void pcch_msg_type_c::c1_c_::set(types::options e)
{
  type_ = e;
}
paging_s& pcch_msg_type_c::c1_c_::set_paging()
{
  set(types::paging);
  return c;
}
void pcch_msg_type_c::c1_c_::set_spare1()
{
  set(types::spare1);
}
void pcch_msg_type_c::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::paging:
      j.write_fieldname("paging");
      c.to_json(j);
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "pcch_msg_type_c::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE pcch_msg_type_c::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::paging:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "pcch_msg_type_c::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pcch_msg_type_c::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::paging:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "pcch_msg_type_c::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* pcch_msg_type_c::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"paging", "spare1"};
  return convert_enum_idx(names, 2, value, "pcch_msg_type_c::c1_c_::types");
}

const char* pcch_msg_type_c::types_opts::to_string() const
{
  static const char* names[] = {"c1", "messageClassExtension"};
  return convert_enum_idx(names, 2, value, "pcch_msg_type_c::types");
}
uint8_t pcch_msg_type_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "pcch_msg_type_c::types");
}

// PCCH-Message ::= SEQUENCE
SRSASN_CODE pcch_msg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(msg.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE pcch_msg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(msg.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void pcch_msg_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("PCCH-Message");
  j.write_fieldname("message");
  msg.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

// EstablishmentCause ::= ENUMERATED
const char* establishment_cause_opts::to_string() const
{
  static const char* names[] = {"emergency",
                                "highPriorityAccess",
                                "mt-Access",
                                "mo-Signalling",
                                "mo-Data",
                                "mo-VoiceCall",
                                "mo-VideoCall",
                                "mo-SMS",
                                "mps-PriorityAccess",
                                "mcs-PriorityAccess",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "establishment_cause_e");
}

// InitialUE-Identity ::= CHOICE
void init_ue_id_c::destroy_()
{
  switch (type_) {
    case types::ng_5_g_s_tmsi_part1:
      c.destroy<fixed_bitstring<39>>();
      break;
    case types::random_value:
      c.destroy<fixed_bitstring<39>>();
      break;
    default:
      break;
  }
}
void init_ue_id_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ng_5_g_s_tmsi_part1:
      c.init<fixed_bitstring<39>>();
      break;
    case types::random_value:
      c.init<fixed_bitstring<39>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "init_ue_id_c");
  }
}
init_ue_id_c::init_ue_id_c(const init_ue_id_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ng_5_g_s_tmsi_part1:
      c.init(other.c.get<fixed_bitstring<39>>());
      break;
    case types::random_value:
      c.init(other.c.get<fixed_bitstring<39>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "init_ue_id_c");
  }
}
init_ue_id_c& init_ue_id_c::operator=(const init_ue_id_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ng_5_g_s_tmsi_part1:
      c.set(other.c.get<fixed_bitstring<39>>());
      break;
    case types::random_value:
      c.set(other.c.get<fixed_bitstring<39>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "init_ue_id_c");
  }

  return *this;
}
fixed_bitstring<39>& init_ue_id_c::set_ng_5_g_s_tmsi_part1()
{
  set(types::ng_5_g_s_tmsi_part1);
  return c.get<fixed_bitstring<39>>();
}
fixed_bitstring<39>& init_ue_id_c::set_random_value()
{
  set(types::random_value);
  return c.get<fixed_bitstring<39>>();
}
void init_ue_id_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ng_5_g_s_tmsi_part1:
      j.write_str("ng-5G-S-TMSI-Part1", c.get<fixed_bitstring<39>>().to_string());
      break;
    case types::random_value:
      j.write_str("randomValue", c.get<fixed_bitstring<39>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "init_ue_id_c");
  }
  j.end_obj();
}
SRSASN_CODE init_ue_id_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ng_5_g_s_tmsi_part1:
      HANDLE_CODE(c.get<fixed_bitstring<39>>().pack(bref));
      break;
    case types::random_value:
      HANDLE_CODE(c.get<fixed_bitstring<39>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "init_ue_id_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE init_ue_id_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ng_5_g_s_tmsi_part1:
      HANDLE_CODE(c.get<fixed_bitstring<39>>().unpack(bref));
      break;
    case types::random_value:
      HANDLE_CODE(c.get<fixed_bitstring<39>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "init_ue_id_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* init_ue_id_c::types_opts::to_string() const
{
  static const char* names[] = {"ng-5G-S-TMSI-Part1", "randomValue"};
  return convert_enum_idx(names, 2, value, "init_ue_id_c::types");
}
int8_t init_ue_id_c::types_opts::to_number() const
{
  static const int8_t numbers[] = {-5};
  return map_enum_number(numbers, 1, value, "init_ue_id_c::types");
}

// ReestabUE-Identity ::= SEQUENCE
SRSASN_CODE reestab_ue_id_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, c_rnti, (uint32_t)0u, (uint32_t)65535u));
  HANDLE_CODE(pack_integer(bref, pci, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(short_mac_i.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE reestab_ue_id_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(c_rnti, bref, (uint32_t)0u, (uint32_t)65535u));
  HANDLE_CODE(unpack_integer(pci, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(short_mac_i.unpack(bref));

  return SRSASN_SUCCESS;
}
void reestab_ue_id_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("c-RNTI", c_rnti);
  j.write_int("physCellId", pci);
  j.write_str("shortMAC-I", short_mac_i.to_string());
  j.end_obj();
}

// ReestablishmentCause ::= ENUMERATED
const char* reest_cause_opts::to_string() const
{
  static const char* names[] = {"reconfigurationFailure", "handoverFailure", "otherFailure", "spare1"};
  return convert_enum_idx(names, 4, value, "reest_cause_e");
}

// ResumeCause ::= ENUMERATED
const char* resume_cause_opts::to_string() const
{
  static const char* names[] = {"emergency",
                                "highPriorityAccess",
                                "mt-Access",
                                "mo-Signalling",
                                "mo-Data",
                                "mo-VoiceCall",
                                "mo-VideoCall",
                                "mo-SMS",
                                "rna-Update",
                                "mps-PriorityAccess",
                                "mcs-PriorityAccess",
                                "spare1",
                                "spare2",
                                "spare3",
                                "spare4",
                                "spare5"};
  return convert_enum_idx(names, 16, value, "resume_cause_e");
}

// RRC-PosSystemInfoRequest-r16-IEs ::= SEQUENCE
SRSASN_CODE rrc_pos_sys_info_request_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(requested_pos_si_list.pack(bref));
  HANDLE_CODE(spare.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_pos_sys_info_request_r16_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(requested_pos_si_list.unpack(bref));
  HANDLE_CODE(spare.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_pos_sys_info_request_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("requestedPosSI-List", requested_pos_si_list.to_string());
  j.write_str("spare", spare.to_string());
  j.end_obj();
}

// RRCReestablishmentRequest-IEs ::= SEQUENCE
SRSASN_CODE rrc_reest_request_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(ue_id.pack(bref));
  HANDLE_CODE(reest_cause.pack(bref));
  HANDLE_CODE(spare.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_reest_request_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(ue_id.unpack(bref));
  HANDLE_CODE(reest_cause.unpack(bref));
  HANDLE_CODE(spare.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_reest_request_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("ue-Identity");
  ue_id.to_json(j);
  j.write_str("reestablishmentCause", reest_cause.to_string());
  j.write_str("spare", spare.to_string());
  j.end_obj();
}

// RRCResumeRequest-IEs ::= SEQUENCE
SRSASN_CODE rrc_resume_request_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(resume_id.pack(bref));
  HANDLE_CODE(resume_mac_i.pack(bref));
  HANDLE_CODE(resume_cause.pack(bref));
  HANDLE_CODE(spare.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_request_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(resume_id.unpack(bref));
  HANDLE_CODE(resume_mac_i.unpack(bref));
  HANDLE_CODE(resume_cause.unpack(bref));
  HANDLE_CODE(spare.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_resume_request_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("resumeIdentity", resume_id.to_string());
  j.write_str("resumeMAC-I", resume_mac_i.to_string());
  j.write_str("resumeCause", resume_cause.to_string());
  j.write_str("spare", spare.to_string());
  j.end_obj();
}

// RRCSetupRequest-IEs ::= SEQUENCE
SRSASN_CODE rrc_setup_request_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(ue_id.pack(bref));
  HANDLE_CODE(establishment_cause.pack(bref));
  HANDLE_CODE(spare.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_setup_request_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(ue_id.unpack(bref));
  HANDLE_CODE(establishment_cause.unpack(bref));
  HANDLE_CODE(spare.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_setup_request_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("ue-Identity");
  ue_id.to_json(j);
  j.write_str("establishmentCause", establishment_cause.to_string());
  j.write_str("spare", spare.to_string());
  j.end_obj();
}

// RRCSystemInfoRequest-IEs ::= SEQUENCE
SRSASN_CODE rrc_sys_info_request_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(requested_si_list.pack(bref));
  HANDLE_CODE(spare.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_sys_info_request_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(requested_si_list.unpack(bref));
  HANDLE_CODE(spare.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_sys_info_request_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("requested-SI-List", requested_si_list.to_string());
  j.write_str("spare", spare.to_string());
  j.end_obj();
}

// RRCReestablishmentRequest ::= SEQUENCE
SRSASN_CODE rrc_reest_request_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(rrc_reest_request.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_reest_request_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(rrc_reest_request.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_reest_request_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("rrcReestablishmentRequest");
  rrc_reest_request.to_json(j);
  j.end_obj();
}

// RRCResumeRequest ::= SEQUENCE
SRSASN_CODE rrc_resume_request_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(rrc_resume_request.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_request_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(rrc_resume_request.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_resume_request_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("rrcResumeRequest");
  rrc_resume_request.to_json(j);
  j.end_obj();
}

// RRCSetupRequest ::= SEQUENCE
SRSASN_CODE rrc_setup_request_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(rrc_setup_request.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_setup_request_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(rrc_setup_request.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_setup_request_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("rrcSetupRequest");
  rrc_setup_request.to_json(j);
  j.end_obj();
}

// RRCSystemInfoRequest ::= SEQUENCE
SRSASN_CODE rrc_sys_info_request_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_sys_info_request_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_sys_info_request_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_sys_info_request_s::crit_exts_c_::destroy_()
{
  switch (type_) {
    case types::rrc_sys_info_request:
      c.destroy<rrc_sys_info_request_ies_s>();
      break;
    case types::crit_exts_future_r16:
      c.destroy<crit_exts_future_r16_c_>();
      break;
    default:
      break;
  }
}
void rrc_sys_info_request_s::crit_exts_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::rrc_sys_info_request:
      c.init<rrc_sys_info_request_ies_s>();
      break;
    case types::crit_exts_future_r16:
      c.init<crit_exts_future_r16_c_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_sys_info_request_s::crit_exts_c_");
  }
}
rrc_sys_info_request_s::crit_exts_c_::crit_exts_c_(const rrc_sys_info_request_s::crit_exts_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::rrc_sys_info_request:
      c.init(other.c.get<rrc_sys_info_request_ies_s>());
      break;
    case types::crit_exts_future_r16:
      c.init(other.c.get<crit_exts_future_r16_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_sys_info_request_s::crit_exts_c_");
  }
}
rrc_sys_info_request_s::crit_exts_c_&
rrc_sys_info_request_s::crit_exts_c_::operator=(const rrc_sys_info_request_s::crit_exts_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::rrc_sys_info_request:
      c.set(other.c.get<rrc_sys_info_request_ies_s>());
      break;
    case types::crit_exts_future_r16:
      c.set(other.c.get<crit_exts_future_r16_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_sys_info_request_s::crit_exts_c_");
  }

  return *this;
}
rrc_sys_info_request_ies_s& rrc_sys_info_request_s::crit_exts_c_::set_rrc_sys_info_request()
{
  set(types::rrc_sys_info_request);
  return c.get<rrc_sys_info_request_ies_s>();
}
rrc_sys_info_request_s::crit_exts_c_::crit_exts_future_r16_c_&
rrc_sys_info_request_s::crit_exts_c_::set_crit_exts_future_r16()
{
  set(types::crit_exts_future_r16);
  return c.get<crit_exts_future_r16_c_>();
}
void rrc_sys_info_request_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_sys_info_request:
      j.write_fieldname("rrcSystemInfoRequest");
      c.get<rrc_sys_info_request_ies_s>().to_json(j);
      break;
    case types::crit_exts_future_r16:
      j.write_fieldname("criticalExtensionsFuture-r16");
      c.get<crit_exts_future_r16_c_>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "rrc_sys_info_request_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_sys_info_request_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_sys_info_request:
      HANDLE_CODE(c.get<rrc_sys_info_request_ies_s>().pack(bref));
      break;
    case types::crit_exts_future_r16:
      HANDLE_CODE(c.get<crit_exts_future_r16_c_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_sys_info_request_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_sys_info_request_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_sys_info_request:
      HANDLE_CODE(c.get<rrc_sys_info_request_ies_s>().unpack(bref));
      break;
    case types::crit_exts_future_r16:
      HANDLE_CODE(c.get<crit_exts_future_r16_c_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_sys_info_request_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void rrc_sys_info_request_s::crit_exts_c_::crit_exts_future_r16_c_::set(types::options e)
{
  type_ = e;
}
rrc_pos_sys_info_request_r16_ies_s&
rrc_sys_info_request_s::crit_exts_c_::crit_exts_future_r16_c_::set_rrc_pos_sys_info_request_r16()
{
  set(types::rrc_pos_sys_info_request_r16);
  return c;
}
void rrc_sys_info_request_s::crit_exts_c_::crit_exts_future_r16_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_sys_info_request_s::crit_exts_c_::crit_exts_future_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_pos_sys_info_request_r16:
      j.write_fieldname("rrcPosSystemInfoRequest-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_sys_info_request_s::crit_exts_c_::crit_exts_future_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_sys_info_request_s::crit_exts_c_::crit_exts_future_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_pos_sys_info_request_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_sys_info_request_s::crit_exts_c_::crit_exts_future_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_sys_info_request_s::crit_exts_c_::crit_exts_future_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_pos_sys_info_request_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_sys_info_request_s::crit_exts_c_::crit_exts_future_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_sys_info_request_s::crit_exts_c_::crit_exts_future_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcPosSystemInfoRequest-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_sys_info_request_s::crit_exts_c_::crit_exts_future_r16_c_::types");
}

const char* rrc_sys_info_request_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcSystemInfoRequest", "criticalExtensionsFuture-r16"};
  return convert_enum_idx(names, 2, value, "rrc_sys_info_request_s::crit_exts_c_::types");
}

// UL-CCCH-MessageType ::= CHOICE
void ul_ccch_msg_type_c::set(types::options e)
{
  type_ = e;
}
ul_ccch_msg_type_c::c1_c_& ul_ccch_msg_type_c::set_c1()
{
  set(types::c1);
  return c;
}
void ul_ccch_msg_type_c::set_msg_class_ext()
{
  set(types::msg_class_ext);
}
void ul_ccch_msg_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch_msg_type_c");
  }
  j.end_obj();
}
SRSASN_CODE ul_ccch_msg_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch_msg_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_ccch_msg_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch_msg_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void ul_ccch_msg_type_c::c1_c_::destroy_()
{
  switch (type_) {
    case types::rrc_setup_request:
      c.destroy<rrc_setup_request_s>();
      break;
    case types::rrc_resume_request:
      c.destroy<rrc_resume_request_s>();
      break;
    case types::rrc_reest_request:
      c.destroy<rrc_reest_request_s>();
      break;
    case types::rrc_sys_info_request:
      c.destroy<rrc_sys_info_request_s>();
      break;
    default:
      break;
  }
}
void ul_ccch_msg_type_c::c1_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::rrc_setup_request:
      c.init<rrc_setup_request_s>();
      break;
    case types::rrc_resume_request:
      c.init<rrc_resume_request_s>();
      break;
    case types::rrc_reest_request:
      c.init<rrc_reest_request_s>();
      break;
    case types::rrc_sys_info_request:
      c.init<rrc_sys_info_request_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch_msg_type_c::c1_c_");
  }
}
ul_ccch_msg_type_c::c1_c_::c1_c_(const ul_ccch_msg_type_c::c1_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::rrc_setup_request:
      c.init(other.c.get<rrc_setup_request_s>());
      break;
    case types::rrc_resume_request:
      c.init(other.c.get<rrc_resume_request_s>());
      break;
    case types::rrc_reest_request:
      c.init(other.c.get<rrc_reest_request_s>());
      break;
    case types::rrc_sys_info_request:
      c.init(other.c.get<rrc_sys_info_request_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch_msg_type_c::c1_c_");
  }
}
ul_ccch_msg_type_c::c1_c_& ul_ccch_msg_type_c::c1_c_::operator=(const ul_ccch_msg_type_c::c1_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::rrc_setup_request:
      c.set(other.c.get<rrc_setup_request_s>());
      break;
    case types::rrc_resume_request:
      c.set(other.c.get<rrc_resume_request_s>());
      break;
    case types::rrc_reest_request:
      c.set(other.c.get<rrc_reest_request_s>());
      break;
    case types::rrc_sys_info_request:
      c.set(other.c.get<rrc_sys_info_request_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch_msg_type_c::c1_c_");
  }

  return *this;
}
rrc_setup_request_s& ul_ccch_msg_type_c::c1_c_::set_rrc_setup_request()
{
  set(types::rrc_setup_request);
  return c.get<rrc_setup_request_s>();
}
rrc_resume_request_s& ul_ccch_msg_type_c::c1_c_::set_rrc_resume_request()
{
  set(types::rrc_resume_request);
  return c.get<rrc_resume_request_s>();
}
rrc_reest_request_s& ul_ccch_msg_type_c::c1_c_::set_rrc_reest_request()
{
  set(types::rrc_reest_request);
  return c.get<rrc_reest_request_s>();
}
rrc_sys_info_request_s& ul_ccch_msg_type_c::c1_c_::set_rrc_sys_info_request()
{
  set(types::rrc_sys_info_request);
  return c.get<rrc_sys_info_request_s>();
}
void ul_ccch_msg_type_c::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_setup_request:
      j.write_fieldname("rrcSetupRequest");
      c.get<rrc_setup_request_s>().to_json(j);
      break;
    case types::rrc_resume_request:
      j.write_fieldname("rrcResumeRequest");
      c.get<rrc_resume_request_s>().to_json(j);
      break;
    case types::rrc_reest_request:
      j.write_fieldname("rrcReestablishmentRequest");
      c.get<rrc_reest_request_s>().to_json(j);
      break;
    case types::rrc_sys_info_request:
      j.write_fieldname("rrcSystemInfoRequest");
      c.get<rrc_sys_info_request_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch_msg_type_c::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE ul_ccch_msg_type_c::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_setup_request:
      HANDLE_CODE(c.get<rrc_setup_request_s>().pack(bref));
      break;
    case types::rrc_resume_request:
      HANDLE_CODE(c.get<rrc_resume_request_s>().pack(bref));
      break;
    case types::rrc_reest_request:
      HANDLE_CODE(c.get<rrc_reest_request_s>().pack(bref));
      break;
    case types::rrc_sys_info_request:
      HANDLE_CODE(c.get<rrc_sys_info_request_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch_msg_type_c::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_ccch_msg_type_c::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_setup_request:
      HANDLE_CODE(c.get<rrc_setup_request_s>().unpack(bref));
      break;
    case types::rrc_resume_request:
      HANDLE_CODE(c.get<rrc_resume_request_s>().unpack(bref));
      break;
    case types::rrc_reest_request:
      HANDLE_CODE(c.get<rrc_reest_request_s>().unpack(bref));
      break;
    case types::rrc_sys_info_request:
      HANDLE_CODE(c.get<rrc_sys_info_request_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch_msg_type_c::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ul_ccch_msg_type_c::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {
      "rrcSetupRequest", "rrcResumeRequest", "rrcReestablishmentRequest", "rrcSystemInfoRequest"};
  return convert_enum_idx(names, 4, value, "ul_ccch_msg_type_c::c1_c_::types");
}

const char* ul_ccch_msg_type_c::types_opts::to_string() const
{
  static const char* names[] = {"c1", "messageClassExtension"};
  return convert_enum_idx(names, 2, value, "ul_ccch_msg_type_c::types");
}
uint8_t ul_ccch_msg_type_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "ul_ccch_msg_type_c::types");
}

// UL-CCCH-Message ::= SEQUENCE
SRSASN_CODE ul_ccch_msg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(msg.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_ccch_msg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(msg.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void ul_ccch_msg_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("UL-CCCH-Message");
  j.write_fieldname("message");
  msg.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

// RRCResumeRequest1-IEs ::= SEQUENCE
SRSASN_CODE rrc_resume_request1_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(resume_id.pack(bref));
  HANDLE_CODE(resume_mac_i.pack(bref));
  HANDLE_CODE(resume_cause.pack(bref));
  HANDLE_CODE(spare.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_request1_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(resume_id.unpack(bref));
  HANDLE_CODE(resume_mac_i.unpack(bref));
  HANDLE_CODE(resume_cause.unpack(bref));
  HANDLE_CODE(spare.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_resume_request1_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("resumeIdentity", resume_id.to_string());
  j.write_str("resumeMAC-I", resume_mac_i.to_string());
  j.write_str("resumeCause", resume_cause.to_string());
  j.write_str("spare", spare.to_string());
  j.end_obj();
}

// RRCResumeRequest1 ::= SEQUENCE
SRSASN_CODE rrc_resume_request1_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(rrc_resume_request1.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_request1_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(rrc_resume_request1.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_resume_request1_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("rrcResumeRequest1");
  rrc_resume_request1.to_json(j);
  j.end_obj();
}

// UL-CCCH1-MessageType ::= CHOICE
void ul_ccch1_msg_type_c::set(types::options e)
{
  type_ = e;
}
ul_ccch1_msg_type_c::c1_c_& ul_ccch1_msg_type_c::set_c1()
{
  set(types::c1);
  return c;
}
void ul_ccch1_msg_type_c::set_msg_class_ext()
{
  set(types::msg_class_ext);
}
void ul_ccch1_msg_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch1_msg_type_c");
  }
  j.end_obj();
}
SRSASN_CODE ul_ccch1_msg_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch1_msg_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_ccch1_msg_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch1_msg_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void ul_ccch1_msg_type_c::c1_c_::set(types::options e)
{
  type_ = e;
}
rrc_resume_request1_s& ul_ccch1_msg_type_c::c1_c_::set_rrc_resume_request1()
{
  set(types::rrc_resume_request1);
  return c;
}
void ul_ccch1_msg_type_c::c1_c_::set_spare3()
{
  set(types::spare3);
}
void ul_ccch1_msg_type_c::c1_c_::set_spare2()
{
  set(types::spare2);
}
void ul_ccch1_msg_type_c::c1_c_::set_spare1()
{
  set(types::spare1);
}
void ul_ccch1_msg_type_c::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_resume_request1:
      j.write_fieldname("rrcResumeRequest1");
      c.to_json(j);
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch1_msg_type_c::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE ul_ccch1_msg_type_c::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_resume_request1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch1_msg_type_c::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_ccch1_msg_type_c::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_resume_request1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ccch1_msg_type_c::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ul_ccch1_msg_type_c::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcResumeRequest1", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "ul_ccch1_msg_type_c::c1_c_::types");
}
uint8_t ul_ccch1_msg_type_c::c1_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "ul_ccch1_msg_type_c::c1_c_::types");
}

const char* ul_ccch1_msg_type_c::types_opts::to_string() const
{
  static const char* names[] = {"c1", "messageClassExtension"};
  return convert_enum_idx(names, 2, value, "ul_ccch1_msg_type_c::types");
}
uint8_t ul_ccch1_msg_type_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "ul_ccch1_msg_type_c::types");
}

// UL-CCCH1-Message ::= SEQUENCE
SRSASN_CODE ul_ccch1_msg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(msg.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_ccch1_msg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(msg.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void ul_ccch1_msg_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("UL-CCCH1-Message");
  j.write_fieldname("message");
  msg.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

// PLMN-Identity-EUTRA-5GC ::= CHOICE
void plmn_id_eutra_5_gc_c::destroy_()
{
  switch (type_) {
    case types::plmn_id_eutra_5_gc:
      c.destroy<plmn_id_s>();
      break;
    default:
      break;
  }
}
void plmn_id_eutra_5_gc_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::plmn_id_eutra_5_gc:
      c.init<plmn_id_s>();
      break;
    case types::plmn_idx:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "plmn_id_eutra_5_gc_c");
  }
}
plmn_id_eutra_5_gc_c::plmn_id_eutra_5_gc_c(const plmn_id_eutra_5_gc_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::plmn_id_eutra_5_gc:
      c.init(other.c.get<plmn_id_s>());
      break;
    case types::plmn_idx:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "plmn_id_eutra_5_gc_c");
  }
}
plmn_id_eutra_5_gc_c& plmn_id_eutra_5_gc_c::operator=(const plmn_id_eutra_5_gc_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::plmn_id_eutra_5_gc:
      c.set(other.c.get<plmn_id_s>());
      break;
    case types::plmn_idx:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "plmn_id_eutra_5_gc_c");
  }

  return *this;
}
plmn_id_s& plmn_id_eutra_5_gc_c::set_plmn_id_eutra_5_gc()
{
  set(types::plmn_id_eutra_5_gc);
  return c.get<plmn_id_s>();
}
uint8_t& plmn_id_eutra_5_gc_c::set_plmn_idx()
{
  set(types::plmn_idx);
  return c.get<uint8_t>();
}
void plmn_id_eutra_5_gc_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::plmn_id_eutra_5_gc:
      j.write_fieldname("plmn-Identity-EUTRA-5GC");
      c.get<plmn_id_s>().to_json(j);
      break;
    case types::plmn_idx:
      j.write_int("plmn-index", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "plmn_id_eutra_5_gc_c");
  }
  j.end_obj();
}
SRSASN_CODE plmn_id_eutra_5_gc_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::plmn_id_eutra_5_gc:
      HANDLE_CODE(c.get<plmn_id_s>().pack(bref));
      break;
    case types::plmn_idx:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)12u));
      break;
    default:
      log_invalid_choice_id(type_, "plmn_id_eutra_5_gc_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE plmn_id_eutra_5_gc_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::plmn_id_eutra_5_gc:
      HANDLE_CODE(c.get<plmn_id_s>().unpack(bref));
      break;
    case types::plmn_idx:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)12u));
      break;
    default:
      log_invalid_choice_id(type_, "plmn_id_eutra_5_gc_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* plmn_id_eutra_5_gc_c::types_opts::to_string() const
{
  static const char* names[] = {"plmn-Identity-EUTRA-5GC", "plmn-index"};
  return convert_enum_idx(names, 2, value, "plmn_id_eutra_5_gc_c::types");
}
int8_t plmn_id_eutra_5_gc_c::types_opts::to_number() const
{
  static const int8_t numbers[] = {-5};
  return map_enum_number(numbers, 1, value, "plmn_id_eutra_5_gc_c::types");
}

// CellIdentity-EUTRA-5GC ::= CHOICE
void cell_id_eutra_5_gc_c::destroy_()
{
  switch (type_) {
    case types::cell_id_eutra:
      c.destroy<fixed_bitstring<28>>();
      break;
    default:
      break;
  }
}
void cell_id_eutra_5_gc_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::cell_id_eutra:
      c.init<fixed_bitstring<28>>();
      break;
    case types::cell_id_idx:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cell_id_eutra_5_gc_c");
  }
}
cell_id_eutra_5_gc_c::cell_id_eutra_5_gc_c(const cell_id_eutra_5_gc_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::cell_id_eutra:
      c.init(other.c.get<fixed_bitstring<28>>());
      break;
    case types::cell_id_idx:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cell_id_eutra_5_gc_c");
  }
}
cell_id_eutra_5_gc_c& cell_id_eutra_5_gc_c::operator=(const cell_id_eutra_5_gc_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::cell_id_eutra:
      c.set(other.c.get<fixed_bitstring<28>>());
      break;
    case types::cell_id_idx:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cell_id_eutra_5_gc_c");
  }

  return *this;
}
fixed_bitstring<28>& cell_id_eutra_5_gc_c::set_cell_id_eutra()
{
  set(types::cell_id_eutra);
  return c.get<fixed_bitstring<28>>();
}
uint8_t& cell_id_eutra_5_gc_c::set_cell_id_idx()
{
  set(types::cell_id_idx);
  return c.get<uint8_t>();
}
void cell_id_eutra_5_gc_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cell_id_eutra:
      j.write_str("cellIdentity-EUTRA", c.get<fixed_bitstring<28>>().to_string());
      break;
    case types::cell_id_idx:
      j.write_int("cellId-index", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "cell_id_eutra_5_gc_c");
  }
  j.end_obj();
}
SRSASN_CODE cell_id_eutra_5_gc_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cell_id_eutra:
      HANDLE_CODE(c.get<fixed_bitstring<28>>().pack(bref));
      break;
    case types::cell_id_idx:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)12u));
      break;
    default:
      log_invalid_choice_id(type_, "cell_id_eutra_5_gc_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cell_id_eutra_5_gc_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cell_id_eutra:
      HANDLE_CODE(c.get<fixed_bitstring<28>>().unpack(bref));
      break;
    case types::cell_id_idx:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)12u));
      break;
    default:
      log_invalid_choice_id(type_, "cell_id_eutra_5_gc_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cell_id_eutra_5_gc_c::types_opts::to_string() const
{
  static const char* names[] = {"cellIdentity-EUTRA", "cellId-index"};
  return convert_enum_idx(names, 2, value, "cell_id_eutra_5_gc_c::types");
}

// FrequencyComponent-r17 ::= ENUMERATED
const char* freq_component_r17_opts::to_string() const
{
  static const char* names[] = {"activeCarrier", "configuredCarrier", "activeBWP", "configuredBWP"};
  return convert_enum_idx(names, 4, value, "freq_component_r17_e");
}

// MeasQuantityResults ::= SEQUENCE
SRSASN_CODE meas_quant_results_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rsrp_present, 1));
  HANDLE_CODE(bref.pack(rsrq_present, 1));
  HANDLE_CODE(bref.pack(sinr_present, 1));

  if (rsrp_present) {
    HANDLE_CODE(pack_integer(bref, rsrp, (uint8_t)0u, (uint8_t)127u));
  }
  if (rsrq_present) {
    HANDLE_CODE(pack_integer(bref, rsrq, (uint8_t)0u, (uint8_t)127u));
  }
  if (sinr_present) {
    HANDLE_CODE(pack_integer(bref, sinr, (uint8_t)0u, (uint8_t)127u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_quant_results_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(rsrp_present, 1));
  HANDLE_CODE(bref.unpack(rsrq_present, 1));
  HANDLE_CODE(bref.unpack(sinr_present, 1));

  if (rsrp_present) {
    HANDLE_CODE(unpack_integer(rsrp, bref, (uint8_t)0u, (uint8_t)127u));
  }
  if (rsrq_present) {
    HANDLE_CODE(unpack_integer(rsrq, bref, (uint8_t)0u, (uint8_t)127u));
  }
  if (sinr_present) {
    HANDLE_CODE(unpack_integer(sinr, bref, (uint8_t)0u, (uint8_t)127u));
  }

  return SRSASN_SUCCESS;
}
void meas_quant_results_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rsrp_present) {
    j.write_int("rsrp", rsrp);
  }
  if (rsrq_present) {
    j.write_int("rsrq", rsrq);
  }
  if (sinr_present) {
    j.write_int("sinr", sinr);
  }
  j.end_obj();
}

// CellAccessRelatedInfo-EUTRA-5GC ::= SEQUENCE
SRSASN_CODE cell_access_related_info_eutra_5_gc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ranac_5gc_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, plmn_id_list_eutra_5gc, 1, 12));
  HANDLE_CODE(tac_eutra_5gc.pack(bref));
  if (ranac_5gc_present) {
    HANDLE_CODE(pack_integer(bref, ranac_5gc, (uint16_t)0u, (uint16_t)255u));
  }
  HANDLE_CODE(cell_id_eutra_5gc.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cell_access_related_info_eutra_5_gc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ranac_5gc_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(plmn_id_list_eutra_5gc, bref, 1, 12));
  HANDLE_CODE(tac_eutra_5gc.unpack(bref));
  if (ranac_5gc_present) {
    HANDLE_CODE(unpack_integer(ranac_5gc, bref, (uint16_t)0u, (uint16_t)255u));
  }
  HANDLE_CODE(cell_id_eutra_5gc.unpack(bref));

  return SRSASN_SUCCESS;
}
void cell_access_related_info_eutra_5_gc_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("plmn-IdentityList-eutra-5gc");
  for (const auto& e1 : plmn_id_list_eutra_5gc) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_str("trackingAreaCode-eutra-5gc", tac_eutra_5gc.to_string());
  if (ranac_5gc_present) {
    j.write_int("ranac-5gc", ranac_5gc);
  }
  j.write_fieldname("cellIdentity-eutra-5gc");
  cell_id_eutra_5gc.to_json(j);
  j.end_obj();
}

// CellAccessRelatedInfo-EUTRA-EPC ::= SEQUENCE
SRSASN_CODE cell_access_related_info_eutra_epc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, plmn_id_list_eutra_epc, 1, 12));
  HANDLE_CODE(tac_eutra_epc.pack(bref));
  HANDLE_CODE(cell_id_eutra_epc.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cell_access_related_info_eutra_epc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(plmn_id_list_eutra_epc, bref, 1, 12));
  HANDLE_CODE(tac_eutra_epc.unpack(bref));
  HANDLE_CODE(cell_id_eutra_epc.unpack(bref));

  return SRSASN_SUCCESS;
}
void cell_access_related_info_eutra_epc_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("plmn-IdentityList-eutra-epc");
  for (const auto& e1 : plmn_id_list_eutra_epc) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_str("trackingAreaCode-eutra-epc", tac_eutra_epc.to_string());
  j.write_str("cellIdentity-eutra-epc", cell_id_eutra_epc.to_string());
  j.end_obj();
}

// DefaultDC-Location-r17 ::= CHOICE
void default_dc_location_r17_c::destroy_() {}
void default_dc_location_r17_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
default_dc_location_r17_c::default_dc_location_r17_c(const default_dc_location_r17_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ul:
      c.init(other.c.get<freq_component_r17_e>());
      break;
    case types::dl:
      c.init(other.c.get<freq_component_r17_e>());
      break;
    case types::ul_and_dl:
      c.init(other.c.get<freq_component_r17_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "default_dc_location_r17_c");
  }
}
default_dc_location_r17_c& default_dc_location_r17_c::operator=(const default_dc_location_r17_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ul:
      c.set(other.c.get<freq_component_r17_e>());
      break;
    case types::dl:
      c.set(other.c.get<freq_component_r17_e>());
      break;
    case types::ul_and_dl:
      c.set(other.c.get<freq_component_r17_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "default_dc_location_r17_c");
  }

  return *this;
}
freq_component_r17_e& default_dc_location_r17_c::set_ul()
{
  set(types::ul);
  return c.get<freq_component_r17_e>();
}
freq_component_r17_e& default_dc_location_r17_c::set_dl()
{
  set(types::dl);
  return c.get<freq_component_r17_e>();
}
freq_component_r17_e& default_dc_location_r17_c::set_ul_and_dl()
{
  set(types::ul_and_dl);
  return c.get<freq_component_r17_e>();
}
void default_dc_location_r17_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ul:
      j.write_str("ul", c.get<freq_component_r17_e>().to_string());
      break;
    case types::dl:
      j.write_str("dl", c.get<freq_component_r17_e>().to_string());
      break;
    case types::ul_and_dl:
      j.write_str("ulAndDL", c.get<freq_component_r17_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "default_dc_location_r17_c");
  }
  j.end_obj();
}
SRSASN_CODE default_dc_location_r17_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ul:
      HANDLE_CODE(c.get<freq_component_r17_e>().pack(bref));
      break;
    case types::dl:
      HANDLE_CODE(c.get<freq_component_r17_e>().pack(bref));
      break;
    case types::ul_and_dl:
      HANDLE_CODE(c.get<freq_component_r17_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "default_dc_location_r17_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE default_dc_location_r17_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ul:
      HANDLE_CODE(c.get<freq_component_r17_e>().unpack(bref));
      break;
    case types::dl:
      HANDLE_CODE(c.get<freq_component_r17_e>().unpack(bref));
      break;
    case types::ul_and_dl:
      HANDLE_CODE(c.get<freq_component_r17_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "default_dc_location_r17_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* default_dc_location_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"ul", "dl", "ulAndDL"};
  return convert_enum_idx(names, 3, value, "default_dc_location_r17_c::types");
}

// OffsetValue-r17 ::= SEQUENCE
SRSASN_CODE offset_value_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, offset_value_r17, (int16_t)-20000, (int16_t)20000));
  HANDLE_CODE(bref.pack(shift7dot5k_hz_r17, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE offset_value_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(offset_value_r17, bref, (int16_t)-20000, (int16_t)20000));
  HANDLE_CODE(bref.unpack(shift7dot5k_hz_r17, 1));

  return SRSASN_SUCCESS;
}
void offset_value_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("offsetValue-r17", offset_value_r17);
  j.write_bool("shift7dot5kHz-r17", shift7dot5k_hz_r17);
  j.end_obj();
}

// ResultsPerCSI-RS-Index ::= SEQUENCE
SRSASN_CODE results_per_csi_rs_idx_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(csi_rs_results_present, 1));

  HANDLE_CODE(pack_integer(bref, csi_rs_idx, (uint8_t)0u, (uint8_t)95u));
  if (csi_rs_results_present) {
    HANDLE_CODE(csi_rs_results.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE results_per_csi_rs_idx_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(csi_rs_results_present, 1));

  HANDLE_CODE(unpack_integer(csi_rs_idx, bref, (uint8_t)0u, (uint8_t)95u));
  if (csi_rs_results_present) {
    HANDLE_CODE(csi_rs_results.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void results_per_csi_rs_idx_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("csi-RS-Index", csi_rs_idx);
  if (csi_rs_results_present) {
    j.write_fieldname("csi-RS-Results");
    csi_rs_results.to_json(j);
  }
  j.end_obj();
}

// ResultsPerSSB-Index ::= SEQUENCE
SRSASN_CODE results_per_ssb_idx_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ssb_results_present, 1));

  HANDLE_CODE(pack_integer(bref, ssb_idx, (uint8_t)0u, (uint8_t)63u));
  if (ssb_results_present) {
    HANDLE_CODE(ssb_results.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE results_per_ssb_idx_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ssb_results_present, 1));

  HANDLE_CODE(unpack_integer(ssb_idx, bref, (uint8_t)0u, (uint8_t)63u));
  if (ssb_results_present) {
    HANDLE_CODE(ssb_results.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void results_per_ssb_idx_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("ssb-Index", ssb_idx);
  if (ssb_results_present) {
    j.write_fieldname("ssb-Results");
    ssb_results.to_json(j);
  }
  j.end_obj();
}

// CC-Group-r17 ::= SEQUENCE
SRSASN_CODE cc_group_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(serv_cell_idx_higher_r17_present, 1));
  HANDLE_CODE(bref.pack(offset_to_default_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, serv_cell_idx_lower_r17, (uint8_t)0u, (uint8_t)31u));
  if (serv_cell_idx_higher_r17_present) {
    HANDLE_CODE(pack_integer(bref, serv_cell_idx_higher_r17, (uint8_t)0u, (uint8_t)31u));
  }
  HANDLE_CODE(default_dc_location_r17.pack(bref));
  if (offset_to_default_r17_present) {
    HANDLE_CODE(offset_to_default_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cc_group_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(serv_cell_idx_higher_r17_present, 1));
  HANDLE_CODE(bref.unpack(offset_to_default_r17_present, 1));

  HANDLE_CODE(unpack_integer(serv_cell_idx_lower_r17, bref, (uint8_t)0u, (uint8_t)31u));
  if (serv_cell_idx_higher_r17_present) {
    HANDLE_CODE(unpack_integer(serv_cell_idx_higher_r17, bref, (uint8_t)0u, (uint8_t)31u));
  }
  HANDLE_CODE(default_dc_location_r17.unpack(bref));
  if (offset_to_default_r17_present) {
    HANDLE_CODE(offset_to_default_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cc_group_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("servCellIndexLower-r17", serv_cell_idx_lower_r17);
  if (serv_cell_idx_higher_r17_present) {
    j.write_int("servCellIndexHigher-r17", serv_cell_idx_higher_r17);
  }
  j.write_fieldname("defaultDC-Location-r17");
  default_dc_location_r17.to_json(j);
  if (offset_to_default_r17_present) {
    j.write_fieldname("offsetToDefault-r17");
    offset_to_default_r17.to_json(j);
  }
  j.end_obj();
}

void cc_group_r17_s::offset_to_default_r17_c_::destroy_()
{
  switch (type_) {
    case types::offset_value:
      c.destroy<offset_value_r17_s>();
      break;
    case types::offsetlist:
      c.destroy<offsetlist_l_>();
      break;
    default:
      break;
  }
}
void cc_group_r17_s::offset_to_default_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::offset_value:
      c.init<offset_value_r17_s>();
      break;
    case types::offsetlist:
      c.init<offsetlist_l_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cc_group_r17_s::offset_to_default_r17_c_");
  }
}
cc_group_r17_s::offset_to_default_r17_c_::offset_to_default_r17_c_(
    const cc_group_r17_s::offset_to_default_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::offset_value:
      c.init(other.c.get<offset_value_r17_s>());
      break;
    case types::offsetlist:
      c.init(other.c.get<offsetlist_l_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cc_group_r17_s::offset_to_default_r17_c_");
  }
}
cc_group_r17_s::offset_to_default_r17_c_&
cc_group_r17_s::offset_to_default_r17_c_::operator=(const cc_group_r17_s::offset_to_default_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::offset_value:
      c.set(other.c.get<offset_value_r17_s>());
      break;
    case types::offsetlist:
      c.set(other.c.get<offsetlist_l_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cc_group_r17_s::offset_to_default_r17_c_");
  }

  return *this;
}
offset_value_r17_s& cc_group_r17_s::offset_to_default_r17_c_::set_offset_value()
{
  set(types::offset_value);
  return c.get<offset_value_r17_s>();
}
cc_group_r17_s::offset_to_default_r17_c_::offsetlist_l_& cc_group_r17_s::offset_to_default_r17_c_::set_offsetlist()
{
  set(types::offsetlist);
  return c.get<offsetlist_l_>();
}
void cc_group_r17_s::offset_to_default_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::offset_value:
      j.write_fieldname("offsetValue");
      c.get<offset_value_r17_s>().to_json(j);
      break;
    case types::offsetlist:
      j.start_array("offsetlist");
      for (const auto& e1 : c.get<offsetlist_l_>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "cc_group_r17_s::offset_to_default_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE cc_group_r17_s::offset_to_default_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::offset_value:
      HANDLE_CODE(c.get<offset_value_r17_s>().pack(bref));
      break;
    case types::offsetlist:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<offsetlist_l_>(), 1, 128));
      break;
    default:
      log_invalid_choice_id(type_, "cc_group_r17_s::offset_to_default_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cc_group_r17_s::offset_to_default_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::offset_value:
      HANDLE_CODE(c.get<offset_value_r17_s>().unpack(bref));
      break;
    case types::offsetlist:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<offsetlist_l_>(), bref, 1, 128));
      break;
    default:
      log_invalid_choice_id(type_, "cc_group_r17_s::offset_to_default_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cc_group_r17_s::offset_to_default_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"offsetValue", "offsetlist"};
  return convert_enum_idx(names, 2, value, "cc_group_r17_s::offset_to_default_r17_c_::types");
}

// CGI-InfoEUTRA ::= SEQUENCE
SRSASN_CODE cgi_info_eutra_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cgi_info_epc_present, 1));
  HANDLE_CODE(bref.pack(cgi_info_5_gc.size() > 0, 1));
  HANDLE_CODE(bref.pack(multi_band_info_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(freq_band_ind_prio_present, 1));

  if (cgi_info_epc_present) {
    HANDLE_CODE(bref.pack(cgi_info_epc.cgi_info_epc_list.size() > 0, 1));
    HANDLE_CODE(cgi_info_epc.cgi_info_epc_legacy.pack(bref));
    if (cgi_info_epc.cgi_info_epc_list.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref, cgi_info_epc.cgi_info_epc_list, 1, 12));
    }
  }
  if (cgi_info_5_gc.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cgi_info_5_gc, 1, 12));
  }
  HANDLE_CODE(pack_integer(bref, freq_band_ind, (uint16_t)1u, (uint16_t)256u));
  if (multi_band_info_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, multi_band_info_list, 1, 8, integer_packer<uint16_t>(1, 256)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cgi_info_eutra_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(cgi_info_epc_present, 1));
  bool cgi_info_5_gc_present;
  HANDLE_CODE(bref.unpack(cgi_info_5_gc_present, 1));
  bool multi_band_info_list_present;
  HANDLE_CODE(bref.unpack(multi_band_info_list_present, 1));
  HANDLE_CODE(bref.unpack(freq_band_ind_prio_present, 1));

  if (cgi_info_epc_present) {
    bool cgi_info_epc_list_present;
    HANDLE_CODE(bref.unpack(cgi_info_epc_list_present, 1));
    HANDLE_CODE(cgi_info_epc.cgi_info_epc_legacy.unpack(bref));
    if (cgi_info_epc_list_present) {
      HANDLE_CODE(unpack_dyn_seq_of(cgi_info_epc.cgi_info_epc_list, bref, 1, 12));
    }
  }
  if (cgi_info_5_gc_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cgi_info_5_gc, bref, 1, 12));
  }
  HANDLE_CODE(unpack_integer(freq_band_ind, bref, (uint16_t)1u, (uint16_t)256u));
  if (multi_band_info_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(multi_band_info_list, bref, 1, 8, integer_packer<uint16_t>(1, 256)));
  }

  return SRSASN_SUCCESS;
}
void cgi_info_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (cgi_info_epc_present) {
    j.write_fieldname("cgi-info-EPC");
    j.start_obj();
    j.write_fieldname("cgi-info-EPC-legacy");
    cgi_info_epc.cgi_info_epc_legacy.to_json(j);
    if (cgi_info_epc.cgi_info_epc_list.size() > 0) {
      j.start_array("cgi-info-EPC-list");
      for (const auto& e1 : cgi_info_epc.cgi_info_epc_list) {
        e1.to_json(j);
      }
      j.end_array();
    }
    j.end_obj();
  }
  if (cgi_info_5_gc.size() > 0) {
    j.start_array("cgi-info-5GC");
    for (const auto& e1 : cgi_info_5_gc) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_int("freqBandIndicator", freq_band_ind);
  if (multi_band_info_list.size() > 0) {
    j.start_array("multiBandInfoList");
    for (const auto& e1 : multi_band_info_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (freq_band_ind_prio_present) {
    j.write_str("freqBandIndicatorPriority", "true");
  }
  j.end_obj();
}

// CGI-InfoNR ::= SEQUENCE
SRSASN_CODE cgi_info_nr_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(plmn_id_info_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(freq_band_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(no_sib1_present, 1));

  if (plmn_id_info_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, plmn_id_info_list, 1, 12));
  }
  if (freq_band_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, freq_band_list, 1, 8, integer_packer<uint16_t>(1, 1024)));
  }
  if (no_sib1_present) {
    HANDLE_CODE(pack_integer(bref, no_sib1.ssb_subcarrier_offset, (uint8_t)0u, (uint8_t)15u));
    HANDLE_CODE(no_sib1.pdcch_cfg_sib1.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= npn_id_info_list_r16.is_present();
    group_flags[1] |= cell_reserved_for_other_use_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(npn_id_info_list_r16.is_present(), 1));
      if (npn_id_info_list_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *npn_id_info_list_r16, 1, 12));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(cell_reserved_for_other_use_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cgi_info_nr_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool plmn_id_info_list_present;
  HANDLE_CODE(bref.unpack(plmn_id_info_list_present, 1));
  bool freq_band_list_present;
  HANDLE_CODE(bref.unpack(freq_band_list_present, 1));
  HANDLE_CODE(bref.unpack(no_sib1_present, 1));

  if (plmn_id_info_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(plmn_id_info_list, bref, 1, 12));
  }
  if (freq_band_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(freq_band_list, bref, 1, 8, integer_packer<uint16_t>(1, 1024)));
  }
  if (no_sib1_present) {
    HANDLE_CODE(unpack_integer(no_sib1.ssb_subcarrier_offset, bref, (uint8_t)0u, (uint8_t)15u));
    HANDLE_CODE(no_sib1.pdcch_cfg_sib1.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(npn_id_info_list_r16, bref);
      if (npn_id_info_list_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*npn_id_info_list_r16, bref, 1, 12));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(cell_reserved_for_other_use_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void cgi_info_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (plmn_id_info_list.size() > 0) {
    j.start_array("plmn-IdentityInfoList");
    for (const auto& e1 : plmn_id_info_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (freq_band_list.size() > 0) {
    j.start_array("frequencyBandList");
    for (const auto& e1 : freq_band_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (no_sib1_present) {
    j.write_fieldname("noSIB1");
    j.start_obj();
    j.write_int("ssb-SubcarrierOffset", no_sib1.ssb_subcarrier_offset);
    j.write_fieldname("pdcch-ConfigSIB1");
    no_sib1.pdcch_cfg_sib1.to_json(j);
    j.end_obj();
  }
  if (ext) {
    if (npn_id_info_list_r16.is_present()) {
      j.start_array("npn-IdentityInfoList-r16");
      for (const auto& e1 : *npn_id_info_list_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (cell_reserved_for_other_use_r16_present) {
      j.write_str("cellReservedForOtherUse-r16", "true");
    }
  }
  j.end_obj();
}

// MeasQuantityResultsEUTRA ::= SEQUENCE
SRSASN_CODE meas_quant_results_eutra_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rsrp_present, 1));
  HANDLE_CODE(bref.pack(rsrq_present, 1));
  HANDLE_CODE(bref.pack(sinr_present, 1));

  if (rsrp_present) {
    HANDLE_CODE(pack_integer(bref, rsrp, (uint8_t)0u, (uint8_t)97u));
  }
  if (rsrq_present) {
    HANDLE_CODE(pack_integer(bref, rsrq, (uint8_t)0u, (uint8_t)34u));
  }
  if (sinr_present) {
    HANDLE_CODE(pack_integer(bref, sinr, (uint8_t)0u, (uint8_t)127u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_quant_results_eutra_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(rsrp_present, 1));
  HANDLE_CODE(bref.unpack(rsrq_present, 1));
  HANDLE_CODE(bref.unpack(sinr_present, 1));

  if (rsrp_present) {
    HANDLE_CODE(unpack_integer(rsrp, bref, (uint8_t)0u, (uint8_t)97u));
  }
  if (rsrq_present) {
    HANDLE_CODE(unpack_integer(rsrq, bref, (uint8_t)0u, (uint8_t)34u));
  }
  if (sinr_present) {
    HANDLE_CODE(unpack_integer(sinr, bref, (uint8_t)0u, (uint8_t)127u));
  }

  return SRSASN_SUCCESS;
}
void meas_quant_results_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rsrp_present) {
    j.write_int("rsrp", rsrp);
  }
  if (rsrq_present) {
    j.write_int("rsrq", rsrq);
  }
  if (sinr_present) {
    j.write_int("sinr", sinr);
  }
  j.end_obj();
}

// NeedForNCSG-IntraFreq-r17 ::= SEQUENCE
SRSASN_CODE need_for_ncsg_intra_freq_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, serv_cell_id_r17, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(gap_ind_intra_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE need_for_ncsg_intra_freq_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(serv_cell_id_r17, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(gap_ind_intra_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void need_for_ncsg_intra_freq_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("servCellId-r17", serv_cell_id_r17);
  j.write_str("gapIndicationIntra-r17", gap_ind_intra_r17.to_string());
  j.end_obj();
}

const char* need_for_ncsg_intra_freq_r17_s::gap_ind_intra_r17_opts::to_string() const
{
  static const char* names[] = {"gap", "ncsg", "nogap-noncsg"};
  return convert_enum_idx(names, 3, value, "need_for_ncsg_intra_freq_r17_s::gap_ind_intra_r17_e_");
}

// NeedForNCSG-NR-r17 ::= SEQUENCE
SRSASN_CODE need_for_ncsg_nr_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, band_nr_r17, (uint16_t)1u, (uint16_t)1024u));
  HANDLE_CODE(gap_ind_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE need_for_ncsg_nr_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(band_nr_r17, bref, (uint16_t)1u, (uint16_t)1024u));
  HANDLE_CODE(gap_ind_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void need_for_ncsg_nr_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("bandNR-r17", band_nr_r17);
  j.write_str("gapIndication-r17", gap_ind_r17.to_string());
  j.end_obj();
}

const char* need_for_ncsg_nr_r17_s::gap_ind_r17_opts::to_string() const
{
  static const char* names[] = {"gap", "ncsg", "nogap-noncsg"};
  return convert_enum_idx(names, 3, value, "need_for_ncsg_nr_r17_s::gap_ind_r17_e_");
}

// PerRAAttemptInfo-r16 ::= SEQUENCE
SRSASN_CODE per_ra_attempt_info_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(contention_detected_r16_present, 1));
  HANDLE_CODE(bref.pack(dl_rsrp_above_thres_r16_present, 1));

  if (contention_detected_r16_present) {
    HANDLE_CODE(bref.pack(contention_detected_r16, 1));
  }
  if (dl_rsrp_above_thres_r16_present) {
    HANDLE_CODE(bref.pack(dl_rsrp_above_thres_r16, 1));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= fallback_to_four_step_ra_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(fallback_to_four_step_ra_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE per_ra_attempt_info_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(contention_detected_r16_present, 1));
  HANDLE_CODE(bref.unpack(dl_rsrp_above_thres_r16_present, 1));

  if (contention_detected_r16_present) {
    HANDLE_CODE(bref.unpack(contention_detected_r16, 1));
  }
  if (dl_rsrp_above_thres_r16_present) {
    HANDLE_CODE(bref.unpack(dl_rsrp_above_thres_r16, 1));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(fallback_to_four_step_ra_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void per_ra_attempt_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (contention_detected_r16_present) {
    j.write_bool("contentionDetected-r16", contention_detected_r16);
  }
  if (dl_rsrp_above_thres_r16_present) {
    j.write_bool("dlRSRPAboveThreshold-r16", dl_rsrp_above_thres_r16);
  }
  if (ext) {
    if (fallback_to_four_step_ra_r17_present) {
      j.write_str("fallbackToFourStepRA-r17", "true");
    }
  }
  j.end_obj();
}

// MeasResultEUTRA ::= SEQUENCE
SRSASN_CODE meas_result_eutra_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cgi_info_present, 1));

  HANDLE_CODE(pack_integer(bref, eutra_pci, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(meas_result.pack(bref));
  if (cgi_info_present) {
    HANDLE_CODE(cgi_info.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_eutra_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(cgi_info_present, 1));

  HANDLE_CODE(unpack_integer(eutra_pci, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(meas_result.unpack(bref));
  if (cgi_info_present) {
    HANDLE_CODE(cgi_info.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_result_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("eutra-PhysCellId", eutra_pci);
  j.write_fieldname("measResult");
  meas_result.to_json(j);
  if (cgi_info_present) {
    j.write_fieldname("cgi-Info");
    cgi_info.to_json(j);
  }
  j.end_obj();
}

// MeasResultLoggingNR-r16 ::= SEQUENCE
SRSASN_CODE meas_result_logging_nr_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(nof_good_ssb_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, pci_r16, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(results_ssb_cell_r16.pack(bref));
  if (nof_good_ssb_r16_present) {
    HANDLE_CODE(pack_integer(bref, nof_good_ssb_r16, (uint8_t)1u, (uint8_t)64u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_logging_nr_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(nof_good_ssb_r16_present, 1));

  HANDLE_CODE(unpack_integer(pci_r16, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(results_ssb_cell_r16.unpack(bref));
  if (nof_good_ssb_r16_present) {
    HANDLE_CODE(unpack_integer(nof_good_ssb_r16, bref, (uint8_t)1u, (uint8_t)64u));
  }

  return SRSASN_SUCCESS;
}
void meas_result_logging_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId-r16", pci_r16);
  j.write_fieldname("resultsSSB-Cell-r16");
  results_ssb_cell_r16.to_json(j);
  if (nof_good_ssb_r16_present) {
    j.write_int("numberOfGoodSSB-r16", nof_good_ssb_r16);
  }
  j.end_obj();
}

// MeasResultNR ::= SEQUENCE
SRSASN_CODE meas_result_nr_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(pci_present, 1));

  if (pci_present) {
    HANDLE_CODE(pack_integer(bref, pci, (uint16_t)0u, (uint16_t)1007u));
  }
  HANDLE_CODE(bref.pack(meas_result.rs_idx_results_present, 1));
  HANDLE_CODE(bref.pack(meas_result.cell_results.results_ssb_cell_present, 1));
  HANDLE_CODE(bref.pack(meas_result.cell_results.results_csi_rs_cell_present, 1));
  if (meas_result.cell_results.results_ssb_cell_present) {
    HANDLE_CODE(meas_result.cell_results.results_ssb_cell.pack(bref));
  }
  if (meas_result.cell_results.results_csi_rs_cell_present) {
    HANDLE_CODE(meas_result.cell_results.results_csi_rs_cell.pack(bref));
  }
  if (meas_result.rs_idx_results_present) {
    HANDLE_CODE(bref.pack(meas_result.rs_idx_results.results_ssb_idxes.size() > 0, 1));
    HANDLE_CODE(bref.pack(meas_result.rs_idx_results.results_csi_rs_idxes.size() > 0, 1));
    if (meas_result.rs_idx_results.results_ssb_idxes.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref, meas_result.rs_idx_results.results_ssb_idxes, 1, 64));
    }
    if (meas_result.rs_idx_results.results_csi_rs_idxes.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref, meas_result.rs_idx_results.results_csi_rs_idxes, 1, 64));
    }
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= cgi_info.is_present();
    group_flags[1] |= cho_candidate_r17_present;
    group_flags[1] |= cho_cfg_r17.is_present();
    group_flags[1] |= triggered_event_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(cgi_info.is_present(), 1));
      if (cgi_info.is_present()) {
        HANDLE_CODE(cgi_info->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(cho_candidate_r17_present, 1));
      HANDLE_CODE(bref.pack(cho_cfg_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(triggered_event_r17.is_present(), 1));
      if (cho_cfg_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *cho_cfg_r17, 1, 2));
      }
      if (triggered_event_r17.is_present()) {
        HANDLE_CODE(bref.pack(triggered_event_r17->time_between_events_r17_present, 1));
        HANDLE_CODE(bref.pack(triggered_event_r17->first_triggered_event_present, 1));
        if (triggered_event_r17->time_between_events_r17_present) {
          HANDLE_CODE(pack_integer(bref, triggered_event_r17->time_between_events_r17, (uint16_t)0u, (uint16_t)1023u));
        }
        if (triggered_event_r17->first_triggered_event_present) {
          HANDLE_CODE(triggered_event_r17->first_triggered_event.pack(bref));
        }
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_nr_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(pci_present, 1));

  if (pci_present) {
    HANDLE_CODE(unpack_integer(pci, bref, (uint16_t)0u, (uint16_t)1007u));
  }
  HANDLE_CODE(bref.unpack(meas_result.rs_idx_results_present, 1));
  HANDLE_CODE(bref.unpack(meas_result.cell_results.results_ssb_cell_present, 1));
  HANDLE_CODE(bref.unpack(meas_result.cell_results.results_csi_rs_cell_present, 1));
  if (meas_result.cell_results.results_ssb_cell_present) {
    HANDLE_CODE(meas_result.cell_results.results_ssb_cell.unpack(bref));
  }
  if (meas_result.cell_results.results_csi_rs_cell_present) {
    HANDLE_CODE(meas_result.cell_results.results_csi_rs_cell.unpack(bref));
  }
  if (meas_result.rs_idx_results_present) {
    bool results_ssb_idxes_present;
    HANDLE_CODE(bref.unpack(results_ssb_idxes_present, 1));
    bool results_csi_rs_idxes_present;
    HANDLE_CODE(bref.unpack(results_csi_rs_idxes_present, 1));
    if (results_ssb_idxes_present) {
      HANDLE_CODE(unpack_dyn_seq_of(meas_result.rs_idx_results.results_ssb_idxes, bref, 1, 64));
    }
    if (results_csi_rs_idxes_present) {
      HANDLE_CODE(unpack_dyn_seq_of(meas_result.rs_idx_results.results_csi_rs_idxes, bref, 1, 64));
    }
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(cgi_info, bref);
      if (cgi_info.is_present()) {
        HANDLE_CODE(cgi_info->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(cho_candidate_r17_present, 1));
      unpack_presence_flag(cho_cfg_r17, bref);
      unpack_presence_flag(triggered_event_r17, bref);
      if (cho_cfg_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*cho_cfg_r17, bref, 1, 2));
      }
      if (triggered_event_r17.is_present()) {
        HANDLE_CODE(bref.unpack(triggered_event_r17->time_between_events_r17_present, 1));
        HANDLE_CODE(bref.unpack(triggered_event_r17->first_triggered_event_present, 1));
        if (triggered_event_r17->time_between_events_r17_present) {
          HANDLE_CODE(
              unpack_integer(triggered_event_r17->time_between_events_r17, bref, (uint16_t)0u, (uint16_t)1023u));
        }
        if (triggered_event_r17->first_triggered_event_present) {
          HANDLE_CODE(triggered_event_r17->first_triggered_event.unpack(bref));
        }
      }
    }
  }
  return SRSASN_SUCCESS;
}
void meas_result_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pci_present) {
    j.write_int("physCellId", pci);
  }
  j.write_fieldname("measResult");
  j.start_obj();
  j.write_fieldname("cellResults");
  j.start_obj();
  if (meas_result.cell_results.results_ssb_cell_present) {
    j.write_fieldname("resultsSSB-Cell");
    meas_result.cell_results.results_ssb_cell.to_json(j);
  }
  if (meas_result.cell_results.results_csi_rs_cell_present) {
    j.write_fieldname("resultsCSI-RS-Cell");
    meas_result.cell_results.results_csi_rs_cell.to_json(j);
  }
  j.end_obj();
  if (meas_result.rs_idx_results_present) {
    j.write_fieldname("rsIndexResults");
    j.start_obj();
    if (meas_result.rs_idx_results.results_ssb_idxes.size() > 0) {
      j.start_array("resultsSSB-Indexes");
      for (const auto& e1 : meas_result.rs_idx_results.results_ssb_idxes) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (meas_result.rs_idx_results.results_csi_rs_idxes.size() > 0) {
      j.start_array("resultsCSI-RS-Indexes");
      for (const auto& e1 : meas_result.rs_idx_results.results_csi_rs_idxes) {
        e1.to_json(j);
      }
      j.end_array();
    }
    j.end_obj();
  }
  j.end_obj();
  if (ext) {
    if (cgi_info.is_present()) {
      j.write_fieldname("cgi-Info");
      cgi_info->to_json(j);
    }
    if (cho_candidate_r17_present) {
      j.write_str("choCandidate-r17", "true");
    }
    if (cho_cfg_r17.is_present()) {
      j.start_array("choConfig-r17");
      for (const auto& e1 : *cho_cfg_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (triggered_event_r17.is_present()) {
      j.write_fieldname("triggeredEvent-r17");
      j.start_obj();
      if (triggered_event_r17->time_between_events_r17_present) {
        j.write_int("timeBetweenEvents-r17", triggered_event_r17->time_between_events_r17);
      }
      if (triggered_event_r17->first_triggered_event_present) {
        j.write_str("firstTriggeredEvent", triggered_event_r17->first_triggered_event.to_string());
      }
      j.end_obj();
    }
  }
  j.end_obj();
}

const char* meas_result_nr_s::triggered_event_r17_s_::first_triggered_event_opts::to_string() const
{
  static const char* names[] = {"condFirstEvent", "condSecondEvent"};
  return convert_enum_idx(names, 2, value, "meas_result_nr_s::triggered_event_r17_s_::first_triggered_event_e_");
}

// NeedForNCSG-EUTRA-r17 ::= SEQUENCE
SRSASN_CODE need_for_ncsg_eutra_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, band_eutra_r17, (uint16_t)1u, (uint16_t)256u));
  HANDLE_CODE(gap_ind_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE need_for_ncsg_eutra_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(band_eutra_r17, bref, (uint16_t)1u, (uint16_t)256u));
  HANDLE_CODE(gap_ind_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void need_for_ncsg_eutra_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("bandEUTRA-r17", band_eutra_r17);
  j.write_str("gapIndication-r17", gap_ind_r17.to_string());
  j.end_obj();
}

const char* need_for_ncsg_eutra_r17_s::gap_ind_r17_opts::to_string() const
{
  static const char* names[] = {"gap", "ncsg", "nogap-noncsg"};
  return convert_enum_idx(names, 3, value, "need_for_ncsg_eutra_r17_s::gap_ind_r17_e_");
}

// SL-QoS-Info-r16 ::= SEQUENCE
SRSASN_CODE sl_qos_info_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_qos_profile_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, sl_qos_flow_id_r16, (uint16_t)1u, (uint16_t)2048u));
  if (sl_qos_profile_r16_present) {
    HANDLE_CODE(sl_qos_profile_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_qos_info_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_qos_profile_r16_present, 1));

  HANDLE_CODE(unpack_integer(sl_qos_flow_id_r16, bref, (uint16_t)1u, (uint16_t)2048u));
  if (sl_qos_profile_r16_present) {
    HANDLE_CODE(sl_qos_profile_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_qos_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-QoS-FlowIdentity-r16", sl_qos_flow_id_r16);
  if (sl_qos_profile_r16_present) {
    j.write_fieldname("sl-QoS-Profile-r16");
    sl_qos_profile_r16.to_json(j);
  }
  j.end_obj();
}

// UplinkTxDirectCurrentCarrierInfo-r16 ::= SEQUENCE
SRSASN_CODE ul_tx_direct_current_carrier_info_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, serv_cell_idx_r16, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(serv_cell_info_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_tx_direct_current_carrier_info_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(serv_cell_idx_r16, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(serv_cell_info_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void ul_tx_direct_current_carrier_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("servCellIndex-r16", serv_cell_idx_r16);
  j.write_fieldname("servCellInfo-r16");
  serv_cell_info_r16.to_json(j);
  j.end_obj();
}

void ul_tx_direct_current_carrier_info_r16_s::serv_cell_info_r16_c_::set(types::options e)
{
  type_ = e;
}
uint8_t& ul_tx_direct_current_carrier_info_r16_s::serv_cell_info_r16_c_::set_bwp_id_r16()
{
  set(types::bwp_id_r16);
  return c;
}
void ul_tx_direct_current_carrier_info_r16_s::serv_cell_info_r16_c_::set_deactiv_carrier_r16()
{
  set(types::deactiv_carrier_r16);
}
void ul_tx_direct_current_carrier_info_r16_s::serv_cell_info_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::bwp_id_r16:
      j.write_int("bwp-Id-r16", c);
      break;
    case types::deactiv_carrier_r16:
      break;
    default:
      log_invalid_choice_id(type_, "ul_tx_direct_current_carrier_info_r16_s::serv_cell_info_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE ul_tx_direct_current_carrier_info_r16_s::serv_cell_info_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::bwp_id_r16:
      HANDLE_CODE(pack_integer(bref, c, (uint8_t)0u, (uint8_t)4u));
      break;
    case types::deactiv_carrier_r16:
      break;
    default:
      log_invalid_choice_id(type_, "ul_tx_direct_current_carrier_info_r16_s::serv_cell_info_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_tx_direct_current_carrier_info_r16_s::serv_cell_info_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::bwp_id_r16:
      HANDLE_CODE(unpack_integer(c, bref, (uint8_t)0u, (uint8_t)4u));
      break;
    case types::deactiv_carrier_r16:
      break;
    default:
      log_invalid_choice_id(type_, "ul_tx_direct_current_carrier_info_r16_s::serv_cell_info_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ul_tx_direct_current_carrier_info_r16_s::serv_cell_info_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"bwp-Id-r16", "deactivatedCarrier-r16"};
  return convert_enum_idx(names, 2, value, "ul_tx_direct_current_carrier_info_r16_s::serv_cell_info_r16_c_::types");
}

// UplinkTxDirectCurrentTwoCarrierInfo-r16 ::= SEQUENCE
SRSASN_CODE ul_tx_direct_current_two_carrier_info_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, ref_carrier_idx_r16, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(bref.pack(shift7dot5k_hz_r16, 1));
  HANDLE_CODE(pack_integer(bref, tx_direct_current_location_r16, (uint16_t)0u, (uint16_t)3301u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_tx_direct_current_two_carrier_info_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(ref_carrier_idx_r16, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(bref.unpack(shift7dot5k_hz_r16, 1));
  HANDLE_CODE(unpack_integer(tx_direct_current_location_r16, bref, (uint16_t)0u, (uint16_t)3301u));

  return SRSASN_SUCCESS;
}
void ul_tx_direct_current_two_carrier_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("referenceCarrierIndex-r16", ref_carrier_idx_r16);
  j.write_bool("shift7dot5kHz-r16", shift7dot5k_hz_r16);
  j.write_int("txDirectCurrentLocation-r16", tx_direct_current_location_r16);
  j.end_obj();
}

// WLAN-Identifiers-r16 ::= SEQUENCE
SRSASN_CODE wlan_ids_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ssid_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(bssid_r16_present, 1));
  HANDLE_CODE(bref.pack(hessid_r16_present, 1));

  if (ssid_r16.size() > 0) {
    HANDLE_CODE(ssid_r16.pack(bref));
  }
  if (bssid_r16_present) {
    HANDLE_CODE(bssid_r16.pack(bref));
  }
  if (hessid_r16_present) {
    HANDLE_CODE(hessid_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE wlan_ids_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool ssid_r16_present;
  HANDLE_CODE(bref.unpack(ssid_r16_present, 1));
  HANDLE_CODE(bref.unpack(bssid_r16_present, 1));
  HANDLE_CODE(bref.unpack(hessid_r16_present, 1));

  if (ssid_r16_present) {
    HANDLE_CODE(ssid_r16.unpack(bref));
  }
  if (bssid_r16_present) {
    HANDLE_CODE(bssid_r16.unpack(bref));
  }
  if (hessid_r16_present) {
    HANDLE_CODE(hessid_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void wlan_ids_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ssid_r16.size() > 0) {
    j.write_str("ssid-r16", ssid_r16.to_string());
  }
  if (bssid_r16_present) {
    j.write_str("bssid-r16", bssid_r16.to_string());
  }
  if (hessid_r16_present) {
    j.write_str("hessid-r16", hessid_r16.to_string());
  }
  j.end_obj();
}

// WLAN-RTT-r16 ::= SEQUENCE
SRSASN_CODE wlan_rtt_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(rtt_accuracy_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, rtt_value_r16, (uint32_t)0u, (uint32_t)16777215u));
  HANDLE_CODE(rtt_units_r16.pack(bref));
  if (rtt_accuracy_r16_present) {
    HANDLE_CODE(pack_integer(bref, rtt_accuracy_r16, (uint16_t)0u, (uint16_t)255u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE wlan_rtt_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(rtt_accuracy_r16_present, 1));

  HANDLE_CODE(unpack_integer(rtt_value_r16, bref, (uint32_t)0u, (uint32_t)16777215u));
  HANDLE_CODE(rtt_units_r16.unpack(bref));
  if (rtt_accuracy_r16_present) {
    HANDLE_CODE(unpack_integer(rtt_accuracy_r16, bref, (uint16_t)0u, (uint16_t)255u));
  }

  return SRSASN_SUCCESS;
}
void wlan_rtt_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rttValue-r16", rtt_value_r16);
  j.write_str("rttUnits-r16", rtt_units_r16.to_string());
  if (rtt_accuracy_r16_present) {
    j.write_int("rttAccuracy-r16", rtt_accuracy_r16);
  }
  j.end_obj();
}

const char* wlan_rtt_r16_s::rtt_units_r16_opts::to_string() const
{
  static const char* names[] = {
      "microseconds", "hundredsofnanoseconds", "tensofnanoseconds", "nanoseconds", "tenthsofnanoseconds"};
  return convert_enum_idx(names, 5, value, "wlan_rtt_r16_s::rtt_units_r16_e_");
}

// CGI-InfoEUTRALogging ::= SEQUENCE
SRSASN_CODE cgi_info_eutra_logging_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(plmn_id_eutra_5gc_present, 1));
  HANDLE_CODE(bref.pack(tac_eutra_5gc_present, 1));
  HANDLE_CODE(bref.pack(cell_id_eutra_5gc_present, 1));
  HANDLE_CODE(bref.pack(plmn_id_eutra_epc_present, 1));
  HANDLE_CODE(bref.pack(tac_eutra_epc_present, 1));
  HANDLE_CODE(bref.pack(cell_id_eutra_epc_present, 1));

  if (plmn_id_eutra_5gc_present) {
    HANDLE_CODE(plmn_id_eutra_5gc.pack(bref));
  }
  if (tac_eutra_5gc_present) {
    HANDLE_CODE(tac_eutra_5gc.pack(bref));
  }
  if (cell_id_eutra_5gc_present) {
    HANDLE_CODE(cell_id_eutra_5gc.pack(bref));
  }
  if (plmn_id_eutra_epc_present) {
    HANDLE_CODE(plmn_id_eutra_epc.pack(bref));
  }
  if (tac_eutra_epc_present) {
    HANDLE_CODE(tac_eutra_epc.pack(bref));
  }
  if (cell_id_eutra_epc_present) {
    HANDLE_CODE(cell_id_eutra_epc.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cgi_info_eutra_logging_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(plmn_id_eutra_5gc_present, 1));
  HANDLE_CODE(bref.unpack(tac_eutra_5gc_present, 1));
  HANDLE_CODE(bref.unpack(cell_id_eutra_5gc_present, 1));
  HANDLE_CODE(bref.unpack(plmn_id_eutra_epc_present, 1));
  HANDLE_CODE(bref.unpack(tac_eutra_epc_present, 1));
  HANDLE_CODE(bref.unpack(cell_id_eutra_epc_present, 1));

  if (plmn_id_eutra_5gc_present) {
    HANDLE_CODE(plmn_id_eutra_5gc.unpack(bref));
  }
  if (tac_eutra_5gc_present) {
    HANDLE_CODE(tac_eutra_5gc.unpack(bref));
  }
  if (cell_id_eutra_5gc_present) {
    HANDLE_CODE(cell_id_eutra_5gc.unpack(bref));
  }
  if (plmn_id_eutra_epc_present) {
    HANDLE_CODE(plmn_id_eutra_epc.unpack(bref));
  }
  if (tac_eutra_epc_present) {
    HANDLE_CODE(tac_eutra_epc.unpack(bref));
  }
  if (cell_id_eutra_epc_present) {
    HANDLE_CODE(cell_id_eutra_epc.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cgi_info_eutra_logging_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (plmn_id_eutra_5gc_present) {
    j.write_fieldname("plmn-Identity-eutra-5gc");
    plmn_id_eutra_5gc.to_json(j);
  }
  if (tac_eutra_5gc_present) {
    j.write_str("trackingAreaCode-eutra-5gc", tac_eutra_5gc.to_string());
  }
  if (cell_id_eutra_5gc_present) {
    j.write_str("cellIdentity-eutra-5gc", cell_id_eutra_5gc.to_string());
  }
  if (plmn_id_eutra_epc_present) {
    j.write_fieldname("plmn-Identity-eutra-epc");
    plmn_id_eutra_epc.to_json(j);
  }
  if (tac_eutra_epc_present) {
    j.write_str("trackingAreaCode-eutra-epc", tac_eutra_epc.to_string());
  }
  if (cell_id_eutra_epc_present) {
    j.write_str("cellIdentity-eutra-epc", cell_id_eutra_epc.to_string());
  }
  j.end_obj();
}

// LogMeasResultBT-r16 ::= SEQUENCE
SRSASN_CODE log_meas_result_bt_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(rssi_bt_r16_present, 1));

  HANDLE_CODE(bt_addr_r16.pack(bref));
  if (rssi_bt_r16_present) {
    HANDLE_CODE(pack_integer(bref, rssi_bt_r16, (int16_t)-128, (int16_t)127));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE log_meas_result_bt_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(rssi_bt_r16_present, 1));

  HANDLE_CODE(bt_addr_r16.unpack(bref));
  if (rssi_bt_r16_present) {
    HANDLE_CODE(unpack_integer(rssi_bt_r16, bref, (int16_t)-128, (int16_t)127));
  }

  return SRSASN_SUCCESS;
}
void log_meas_result_bt_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("bt-Addr-r16", bt_addr_r16.to_string());
  if (rssi_bt_r16_present) {
    j.write_int("rssi-BT-r16", rssi_bt_r16);
  }
  j.end_obj();
}

// LogMeasResultWLAN-r16 ::= SEQUENCE
SRSASN_CODE log_meas_result_wlan_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(rssi_wlan_r16_present, 1));
  HANDLE_CODE(bref.pack(rtt_wlan_r16_present, 1));

  HANDLE_CODE(wlan_ids_r16.pack(bref));
  if (rssi_wlan_r16_present) {
    HANDLE_CODE(pack_integer(bref, rssi_wlan_r16, (uint8_t)0u, (uint8_t)141u));
  }
  if (rtt_wlan_r16_present) {
    HANDLE_CODE(rtt_wlan_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE log_meas_result_wlan_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(rssi_wlan_r16_present, 1));
  HANDLE_CODE(bref.unpack(rtt_wlan_r16_present, 1));

  HANDLE_CODE(wlan_ids_r16.unpack(bref));
  if (rssi_wlan_r16_present) {
    HANDLE_CODE(unpack_integer(rssi_wlan_r16, bref, (uint8_t)0u, (uint8_t)141u));
  }
  if (rtt_wlan_r16_present) {
    HANDLE_CODE(rtt_wlan_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void log_meas_result_wlan_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("wlan-Identifiers-r16");
  wlan_ids_r16.to_json(j);
  if (rssi_wlan_r16_present) {
    j.write_int("rssiWLAN-r16", rssi_wlan_r16);
  }
  if (rtt_wlan_r16_present) {
    j.write_fieldname("rtt-WLAN-r16");
    rtt_wlan_r16.to_json(j);
  }
  j.end_obj();
}

// NeedForGapNCSG-InfoEUTRA-r17 ::= SEQUENCE
SRSASN_CODE need_for_gap_ncsg_info_eutra_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, need_for_ncsg_eutra_r17, 1, 256));

  return SRSASN_SUCCESS;
}
SRSASN_CODE need_for_gap_ncsg_info_eutra_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(need_for_ncsg_eutra_r17, bref, 1, 256));

  return SRSASN_SUCCESS;
}
void need_for_gap_ncsg_info_eutra_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("needForNCSG-EUTRA-r17");
  for (const auto& e1 : need_for_ncsg_eutra_r17) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// NeedForGapNCSG-InfoNR-r17 ::= SEQUENCE
SRSASN_CODE need_for_gap_ncsg_info_nr_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, intra_freq_need_for_ncsg_r17, 1, 32));
  HANDLE_CODE(pack_dyn_seq_of(bref, inter_freq_need_for_ncsg_r17, 1, 1024));

  return SRSASN_SUCCESS;
}
SRSASN_CODE need_for_gap_ncsg_info_nr_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(intra_freq_need_for_ncsg_r17, bref, 1, 32));
  HANDLE_CODE(unpack_dyn_seq_of(inter_freq_need_for_ncsg_r17, bref, 1, 1024));

  return SRSASN_SUCCESS;
}
void need_for_gap_ncsg_info_nr_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("intraFreq-needForNCSG-r17");
  for (const auto& e1 : intra_freq_need_for_ncsg_r17) {
    e1.to_json(j);
  }
  j.end_array();
  j.start_array("interFreq-needForNCSG-r17");
  for (const auto& e1 : inter_freq_need_for_ncsg_r17) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// NeedForGapsIntraFreq-r16 ::= SEQUENCE
SRSASN_CODE need_for_gaps_intra_freq_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, serv_cell_id_r16, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(gap_ind_intra_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE need_for_gaps_intra_freq_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(serv_cell_id_r16, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(gap_ind_intra_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void need_for_gaps_intra_freq_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("servCellId-r16", serv_cell_id_r16);
  j.write_str("gapIndicationIntra-r16", gap_ind_intra_r16.to_string());
  j.end_obj();
}

const char* need_for_gaps_intra_freq_r16_s::gap_ind_intra_r16_opts::to_string() const
{
  static const char* names[] = {"gap", "no-gap"};
  return convert_enum_idx(names, 2, value, "need_for_gaps_intra_freq_r16_s::gap_ind_intra_r16_e_");
}

// NeedForGapsNR-r16 ::= SEQUENCE
SRSASN_CODE need_for_gaps_nr_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, band_nr_r16, (uint16_t)1u, (uint16_t)1024u));
  HANDLE_CODE(gap_ind_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE need_for_gaps_nr_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(band_nr_r16, bref, (uint16_t)1u, (uint16_t)1024u));
  HANDLE_CODE(gap_ind_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void need_for_gaps_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("bandNR-r16", band_nr_r16);
  j.write_str("gapIndication-r16", gap_ind_r16.to_string());
  j.end_obj();
}

const char* need_for_gaps_nr_r16_s::gap_ind_r16_opts::to_string() const
{
  static const char* names[] = {"gap", "no-gap"};
  return convert_enum_idx(names, 2, value, "need_for_gaps_nr_r16_s::gap_ind_r16_e_");
}

// PCI-ARFCN-EUTRA-r16 ::= SEQUENCE
SRSASN_CODE pci_arfcn_eutra_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, pci_r16, (uint16_t)0u, (uint16_t)503u));
  HANDLE_CODE(pack_integer(bref, carrier_freq_r16, (uint32_t)0u, (uint32_t)262143u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pci_arfcn_eutra_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(pci_r16, bref, (uint16_t)0u, (uint16_t)503u));
  HANDLE_CODE(unpack_integer(carrier_freq_r16, bref, (uint32_t)0u, (uint32_t)262143u));

  return SRSASN_SUCCESS;
}
void pci_arfcn_eutra_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId-r16", pci_r16);
  j.write_int("carrierFreq-r16", carrier_freq_r16);
  j.end_obj();
}

// PCI-ARFCN-NR-r16 ::= SEQUENCE
SRSASN_CODE pci_arfcn_nr_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, pci_r16, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(pack_integer(bref, carrier_freq_r16, (uint32_t)0u, (uint32_t)3279165u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pci_arfcn_nr_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(pci_r16, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(unpack_integer(carrier_freq_r16, bref, (uint32_t)0u, (uint32_t)3279165u));

  return SRSASN_SUCCESS;
}
void pci_arfcn_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId-r16", pci_r16);
  j.write_int("carrierFreq-r16", carrier_freq_r16);
  j.end_obj();
}

// PerRACSI-RSInfo-r16 ::= SEQUENCE
SRSASN_CODE per_ra_csi_r_si_nfo_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, csi_rs_idx_r16, (uint8_t)0u, (uint8_t)95u));
  HANDLE_CODE(pack_integer(bref, nof_preambs_sent_on_csi_rs_r16, (uint8_t)1u, (uint8_t)200u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE per_ra_csi_r_si_nfo_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(csi_rs_idx_r16, bref, (uint8_t)0u, (uint8_t)95u));
  HANDLE_CODE(unpack_integer(nof_preambs_sent_on_csi_rs_r16, bref, (uint8_t)1u, (uint8_t)200u));

  return SRSASN_SUCCESS;
}
void per_ra_csi_r_si_nfo_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("csi-RS-Index-r16", csi_rs_idx_r16);
  j.write_int("numberOfPreamblesSentOnCSI-RS-r16", nof_preambs_sent_on_csi_rs_r16);
  j.end_obj();
}

// PerRASSBInfo-r16 ::= SEQUENCE
SRSASN_CODE per_ra_ssb_info_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, ssb_idx_r16, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(pack_integer(bref, nof_preambs_sent_on_ssb_r16, (uint8_t)1u, (uint8_t)200u));
  HANDLE_CODE(pack_dyn_seq_of(bref, per_ra_attempt_info_list_r16, 1, 200));

  return SRSASN_SUCCESS;
}
SRSASN_CODE per_ra_ssb_info_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(ssb_idx_r16, bref, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(unpack_integer(nof_preambs_sent_on_ssb_r16, bref, (uint8_t)1u, (uint8_t)200u));
  HANDLE_CODE(unpack_dyn_seq_of(per_ra_attempt_info_list_r16, bref, 1, 200));

  return SRSASN_SUCCESS;
}
void per_ra_ssb_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("ssb-Index-r16", ssb_idx_r16);
  j.write_int("numberOfPreamblesSentOnSSB-r16", nof_preambs_sent_on_ssb_r16);
  j.start_array("perRAAttemptInfoList-r16");
  for (const auto& e1 : per_ra_attempt_info_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// RRCReconfigurationComplete-v1720-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_complete_v1720_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_tx_direct_current_more_carrier_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ul_tx_direct_current_more_carrier_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ul_tx_direct_current_more_carrier_list_r17, 1, 16));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_v1720_ies_s::unpack(cbit_ref& bref)
{
  bool ul_tx_direct_current_more_carrier_list_r17_present;
  HANDLE_CODE(bref.unpack(ul_tx_direct_current_more_carrier_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ul_tx_direct_current_more_carrier_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ul_tx_direct_current_more_carrier_list_r17, bref, 1, 16));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_complete_v1720_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_tx_direct_current_more_carrier_list_r17.size() > 0) {
    j.start_array("uplinkTxDirectCurrentMoreCarrierList-r17");
    for (const auto& e1 : ul_tx_direct_current_more_carrier_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// ResultsPerSSB-IndexIdle-r16 ::= SEQUENCE
SRSASN_CODE results_per_ssb_idx_idle_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ssb_results_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, ssb_idx_r16, (uint8_t)0u, (uint8_t)63u));
  if (ssb_results_r16_present) {
    HANDLE_CODE(bref.pack(ssb_results_r16.ssb_rsrp_result_r16_present, 1));
    HANDLE_CODE(bref.pack(ssb_results_r16.ssb_rsrq_result_r16_present, 1));
    if (ssb_results_r16.ssb_rsrp_result_r16_present) {
      HANDLE_CODE(pack_integer(bref, ssb_results_r16.ssb_rsrp_result_r16, (uint8_t)0u, (uint8_t)127u));
    }
    if (ssb_results_r16.ssb_rsrq_result_r16_present) {
      HANDLE_CODE(pack_integer(bref, ssb_results_r16.ssb_rsrq_result_r16, (uint8_t)0u, (uint8_t)127u));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE results_per_ssb_idx_idle_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ssb_results_r16_present, 1));

  HANDLE_CODE(unpack_integer(ssb_idx_r16, bref, (uint8_t)0u, (uint8_t)63u));
  if (ssb_results_r16_present) {
    HANDLE_CODE(bref.unpack(ssb_results_r16.ssb_rsrp_result_r16_present, 1));
    HANDLE_CODE(bref.unpack(ssb_results_r16.ssb_rsrq_result_r16_present, 1));
    if (ssb_results_r16.ssb_rsrp_result_r16_present) {
      HANDLE_CODE(unpack_integer(ssb_results_r16.ssb_rsrp_result_r16, bref, (uint8_t)0u, (uint8_t)127u));
    }
    if (ssb_results_r16.ssb_rsrq_result_r16_present) {
      HANDLE_CODE(unpack_integer(ssb_results_r16.ssb_rsrq_result_r16, bref, (uint8_t)0u, (uint8_t)127u));
    }
  }

  return SRSASN_SUCCESS;
}
void results_per_ssb_idx_idle_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("ssb-Index-r16", ssb_idx_r16);
  if (ssb_results_r16_present) {
    j.write_fieldname("ssb-Results-r16");
    j.start_obj();
    if (ssb_results_r16.ssb_rsrp_result_r16_present) {
      j.write_int("ssb-RSRP-Result-r16", ssb_results_r16.ssb_rsrp_result_r16);
    }
    if (ssb_results_r16.ssb_rsrq_result_r16_present) {
      j.write_int("ssb-RSRQ-Result-r16", ssb_results_r16.ssb_rsrq_result_r16);
    }
    j.end_obj();
  }
  j.end_obj();
}

// SL-PagingIdentityRemoteUE-r17 ::= SEQUENCE
SRSASN_CODE sl_paging_id_remote_ue_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(full_i_rnti_r17_present, 1));

  HANDLE_CODE(ng_5_g_s_tmsi_r17.pack(bref));
  if (full_i_rnti_r17_present) {
    HANDLE_CODE(full_i_rnti_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_paging_id_remote_ue_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(full_i_rnti_r17_present, 1));

  HANDLE_CODE(ng_5_g_s_tmsi_r17.unpack(bref));
  if (full_i_rnti_r17_present) {
    HANDLE_CODE(full_i_rnti_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_paging_id_remote_ue_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("ng-5G-S-TMSI-r17", ng_5_g_s_tmsi_r17.to_string());
  if (full_i_rnti_r17_present) {
    j.write_str("fullI-RNTI-r17", full_i_rnti_r17.to_string());
  }
  j.end_obj();
}

// SL-RLC-ModeIndication-r16 ::= SEQUENCE
SRSASN_CODE sl_rlc_mode_ind_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(sl_mode_r16.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, sl_qos_info_list_r16, 1, 64));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_rlc_mode_ind_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(sl_mode_r16.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(sl_qos_info_list_r16, bref, 1, 64));

  return SRSASN_SUCCESS;
}
void sl_rlc_mode_ind_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sl-Mode-r16");
  sl_mode_r16.to_json(j);
  j.start_array("sl-QoS-InfoList-r16");
  for (const auto& e1 : sl_qos_info_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

void sl_rlc_mode_ind_r16_s::sl_mode_r16_c_::set(types::options e)
{
  type_ = e;
}
void sl_rlc_mode_ind_r16_s::sl_mode_r16_c_::set_sl_am_mode_r16()
{
  set(types::sl_am_mode_r16);
}
void sl_rlc_mode_ind_r16_s::sl_mode_r16_c_::set_sl_um_mode_r16()
{
  set(types::sl_um_mode_r16);
}
void sl_rlc_mode_ind_r16_s::sl_mode_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  j.end_obj();
}
SRSASN_CODE sl_rlc_mode_ind_r16_s::sl_mode_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_rlc_mode_ind_r16_s::sl_mode_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  return SRSASN_SUCCESS;
}

const char* sl_rlc_mode_ind_r16_s::sl_mode_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"sl-AM-Mode-r16", "sl-UM-Mode-r16"};
  return convert_enum_idx(names, 2, value, "sl_rlc_mode_ind_r16_s::sl_mode_r16_c_::types");
}

// UplinkTxDirectCurrentTwoCarrier-r16 ::= SEQUENCE
SRSASN_CODE ul_tx_direct_current_two_carrier_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(second_pa_tx_direct_current_r16_present, 1));

  HANDLE_CODE(carrier_one_info_r16.pack(bref));
  HANDLE_CODE(carrier_two_info_r16.pack(bref));
  HANDLE_CODE(single_pa_tx_direct_current_r16.pack(bref));
  if (second_pa_tx_direct_current_r16_present) {
    HANDLE_CODE(second_pa_tx_direct_current_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_tx_direct_current_two_carrier_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(second_pa_tx_direct_current_r16_present, 1));

  HANDLE_CODE(carrier_one_info_r16.unpack(bref));
  HANDLE_CODE(carrier_two_info_r16.unpack(bref));
  HANDLE_CODE(single_pa_tx_direct_current_r16.unpack(bref));
  if (second_pa_tx_direct_current_r16_present) {
    HANDLE_CODE(second_pa_tx_direct_current_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ul_tx_direct_current_two_carrier_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("carrierOneInfo-r16");
  carrier_one_info_r16.to_json(j);
  j.write_fieldname("carrierTwoInfo-r16");
  carrier_two_info_r16.to_json(j);
  j.write_fieldname("singlePA-TxDirectCurrent-r16");
  single_pa_tx_direct_current_r16.to_json(j);
  if (second_pa_tx_direct_current_r16_present) {
    j.write_fieldname("secondPA-TxDirectCurrent-r16");
    second_pa_tx_direct_current_r16.to_json(j);
  }
  j.end_obj();
}

// VictimSystemType-r16 ::= SEQUENCE
SRSASN_CODE victim_sys_type_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(gps_r16_present, 1));
  HANDLE_CODE(bref.pack(glonass_r16_present, 1));
  HANDLE_CODE(bref.pack(bds_r16_present, 1));
  HANDLE_CODE(bref.pack(galileo_r16_present, 1));
  HANDLE_CODE(bref.pack(nav_ic_r16_present, 1));
  HANDLE_CODE(bref.pack(wlan_r16_present, 1));
  HANDLE_CODE(bref.pack(bluetooth_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE victim_sys_type_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(gps_r16_present, 1));
  HANDLE_CODE(bref.unpack(glonass_r16_present, 1));
  HANDLE_CODE(bref.unpack(bds_r16_present, 1));
  HANDLE_CODE(bref.unpack(galileo_r16_present, 1));
  HANDLE_CODE(bref.unpack(nav_ic_r16_present, 1));
  HANDLE_CODE(bref.unpack(wlan_r16_present, 1));
  HANDLE_CODE(bref.unpack(bluetooth_r16_present, 1));

  return SRSASN_SUCCESS;
}
void victim_sys_type_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (gps_r16_present) {
    j.write_str("gps-r16", "true");
  }
  if (glonass_r16_present) {
    j.write_str("glonass-r16", "true");
  }
  if (bds_r16_present) {
    j.write_str("bds-r16", "true");
  }
  if (galileo_r16_present) {
    j.write_str("galileo-r16", "true");
  }
  if (nav_ic_r16_present) {
    j.write_str("navIC-r16", "true");
  }
  if (wlan_r16_present) {
    j.write_str("wlan-r16", "true");
  }
  if (bluetooth_r16_present) {
    j.write_str("bluetooth-r16", "true");
  }
  j.end_obj();
}

// AffectedCarrierFreq-r16 ::= SEQUENCE
SRSASN_CODE affected_carrier_freq_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, carrier_freq_r16, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(interference_direction_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE affected_carrier_freq_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(carrier_freq_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(interference_direction_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void affected_carrier_freq_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq-r16", carrier_freq_r16);
  j.write_str("interferenceDirection-r16", interference_direction_r16.to_string());
  j.end_obj();
}

const char* affected_carrier_freq_r16_s::interference_direction_r16_opts::to_string() const
{
  static const char* names[] = {"nr", "other", "both", "spare"};
  return convert_enum_idx(names, 4, value, "affected_carrier_freq_r16_s::interference_direction_r16_e_");
}

// AffectedCarrierFreqComb-r16 ::= SEQUENCE
SRSASN_CODE affected_carrier_freq_comb_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(affected_carrier_freq_comb_r16.size() > 0, 1));

  if (affected_carrier_freq_comb_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, affected_carrier_freq_comb_r16, 2, 32, integer_packer<uint32_t>(0, 3279165)));
  }
  HANDLE_CODE(victim_sys_type_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE affected_carrier_freq_comb_r16_s::unpack(cbit_ref& bref)
{
  bool affected_carrier_freq_comb_r16_present;
  HANDLE_CODE(bref.unpack(affected_carrier_freq_comb_r16_present, 1));

  if (affected_carrier_freq_comb_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(affected_carrier_freq_comb_r16, bref, 2, 32, integer_packer<uint32_t>(0, 3279165)));
  }
  HANDLE_CODE(victim_sys_type_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void affected_carrier_freq_comb_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (affected_carrier_freq_comb_r16.size() > 0) {
    j.start_array("affectedCarrierFreqComb-r16");
    for (const auto& e1 : affected_carrier_freq_comb_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.write_fieldname("victimSystemType-r16");
  victim_sys_type_r16.to_json(j);
  j.end_obj();
}

// CommonLocationInfo-r16 ::= SEQUENCE
SRSASN_CODE common_location_info_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(gnss_tod_msec_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(location_timestamp_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(location_coordinate_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(location_error_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(location_source_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(velocity_estimate_r16.size() > 0, 1));

  if (gnss_tod_msec_r16.size() > 0) {
    HANDLE_CODE(gnss_tod_msec_r16.pack(bref));
  }
  if (location_timestamp_r16.size() > 0) {
    HANDLE_CODE(location_timestamp_r16.pack(bref));
  }
  if (location_coordinate_r16.size() > 0) {
    HANDLE_CODE(location_coordinate_r16.pack(bref));
  }
  if (location_error_r16.size() > 0) {
    HANDLE_CODE(location_error_r16.pack(bref));
  }
  if (location_source_r16.size() > 0) {
    HANDLE_CODE(location_source_r16.pack(bref));
  }
  if (velocity_estimate_r16.size() > 0) {
    HANDLE_CODE(velocity_estimate_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE common_location_info_r16_s::unpack(cbit_ref& bref)
{
  bool gnss_tod_msec_r16_present;
  HANDLE_CODE(bref.unpack(gnss_tod_msec_r16_present, 1));
  bool location_timestamp_r16_present;
  HANDLE_CODE(bref.unpack(location_timestamp_r16_present, 1));
  bool location_coordinate_r16_present;
  HANDLE_CODE(bref.unpack(location_coordinate_r16_present, 1));
  bool location_error_r16_present;
  HANDLE_CODE(bref.unpack(location_error_r16_present, 1));
  bool location_source_r16_present;
  HANDLE_CODE(bref.unpack(location_source_r16_present, 1));
  bool velocity_estimate_r16_present;
  HANDLE_CODE(bref.unpack(velocity_estimate_r16_present, 1));

  if (gnss_tod_msec_r16_present) {
    HANDLE_CODE(gnss_tod_msec_r16.unpack(bref));
  }
  if (location_timestamp_r16_present) {
    HANDLE_CODE(location_timestamp_r16.unpack(bref));
  }
  if (location_coordinate_r16_present) {
    HANDLE_CODE(location_coordinate_r16.unpack(bref));
  }
  if (location_error_r16_present) {
    HANDLE_CODE(location_error_r16.unpack(bref));
  }
  if (location_source_r16_present) {
    HANDLE_CODE(location_source_r16.unpack(bref));
  }
  if (velocity_estimate_r16_present) {
    HANDLE_CODE(velocity_estimate_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void common_location_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (gnss_tod_msec_r16.size() > 0) {
    j.write_str("gnss-TOD-msec-r16", gnss_tod_msec_r16.to_string());
  }
  if (location_timestamp_r16.size() > 0) {
    j.write_str("locationTimestamp-r16", location_timestamp_r16.to_string());
  }
  if (location_coordinate_r16.size() > 0) {
    j.write_str("locationCoordinate-r16", location_coordinate_r16.to_string());
  }
  if (location_error_r16.size() > 0) {
    j.write_str("locationError-r16", location_error_r16.to_string());
  }
  if (location_source_r16.size() > 0) {
    j.write_str("locationSource-r16", location_source_r16.to_string());
  }
  if (velocity_estimate_r16.size() > 0) {
    j.write_str("velocityEstimate-r16", velocity_estimate_r16.to_string());
  }
  j.end_obj();
}

// MeasResult2EUTRA-r16 ::= SEQUENCE
SRSASN_CODE meas_result2_eutra_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, carrier_freq_r16, (uint32_t)0u, (uint32_t)262143u));
  HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_list_r16, 1, 8));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result2_eutra_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(carrier_freq_r16, bref, (uint32_t)0u, (uint32_t)262143u));
  HANDLE_CODE(unpack_dyn_seq_of(meas_result_list_r16, bref, 1, 8));

  return SRSASN_SUCCESS;
}
void meas_result2_eutra_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq-r16", carrier_freq_r16);
  j.start_array("measResultList-r16");
  for (const auto& e1 : meas_result_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// MeasResult2NR-r16 ::= SEQUENCE
SRSASN_CODE meas_result2_nr_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ssb_freq_r16_present, 1));
  HANDLE_CODE(bref.pack(ref_freq_csi_rs_r16_present, 1));

  if (ssb_freq_r16_present) {
    HANDLE_CODE(pack_integer(bref, ssb_freq_r16, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (ref_freq_csi_rs_r16_present) {
    HANDLE_CODE(pack_integer(bref, ref_freq_csi_rs_r16, (uint32_t)0u, (uint32_t)3279165u));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_list_r16, 1, 8));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result2_nr_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ssb_freq_r16_present, 1));
  HANDLE_CODE(bref.unpack(ref_freq_csi_rs_r16_present, 1));

  if (ssb_freq_r16_present) {
    HANDLE_CODE(unpack_integer(ssb_freq_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (ref_freq_csi_rs_r16_present) {
    HANDLE_CODE(unpack_integer(ref_freq_csi_rs_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  }
  HANDLE_CODE(unpack_dyn_seq_of(meas_result_list_r16, bref, 1, 8));

  return SRSASN_SUCCESS;
}
void meas_result2_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ssb_freq_r16_present) {
    j.write_int("ssbFrequency-r16", ssb_freq_r16);
  }
  if (ref_freq_csi_rs_r16_present) {
    j.write_int("refFreqCSI-RS-r16", ref_freq_csi_rs_r16);
  }
  j.start_array("measResultList-r16");
  for (const auto& e1 : meas_result_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// MeasResultLogging2NR-r16 ::= SEQUENCE
SRSASN_CODE meas_result_logging2_nr_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, carrier_freq_r16, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_list_logging_nr_r16, 1, 8));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_logging2_nr_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(carrier_freq_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(unpack_dyn_seq_of(meas_result_list_logging_nr_r16, bref, 1, 8));

  return SRSASN_SUCCESS;
}
void meas_result_logging2_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq-r16", carrier_freq_r16);
  j.start_array("measResultListLoggingNR-r16");
  for (const auto& e1 : meas_result_list_logging_nr_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// MeasResultUTRA-FDD-r16 ::= SEQUENCE
SRSASN_CODE meas_result_utra_fdd_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, pci_r16, (uint16_t)0u, (uint16_t)511u));
  HANDLE_CODE(bref.pack(meas_result_r16.utra_fdd_rs_cp_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_result_r16.utra_fdd_ec_n0_r16_present, 1));
  if (meas_result_r16.utra_fdd_rs_cp_r16_present) {
    HANDLE_CODE(pack_integer(bref, meas_result_r16.utra_fdd_rs_cp_r16, (int8_t)-5, (int8_t)91));
  }
  if (meas_result_r16.utra_fdd_ec_n0_r16_present) {
    HANDLE_CODE(pack_integer(bref, meas_result_r16.utra_fdd_ec_n0_r16, (uint8_t)0u, (uint8_t)49u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_utra_fdd_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(pci_r16, bref, (uint16_t)0u, (uint16_t)511u));
  HANDLE_CODE(bref.unpack(meas_result_r16.utra_fdd_rs_cp_r16_present, 1));
  HANDLE_CODE(bref.unpack(meas_result_r16.utra_fdd_ec_n0_r16_present, 1));
  if (meas_result_r16.utra_fdd_rs_cp_r16_present) {
    HANDLE_CODE(unpack_integer(meas_result_r16.utra_fdd_rs_cp_r16, bref, (int8_t)-5, (int8_t)91));
  }
  if (meas_result_r16.utra_fdd_ec_n0_r16_present) {
    HANDLE_CODE(unpack_integer(meas_result_r16.utra_fdd_ec_n0_r16, bref, (uint8_t)0u, (uint8_t)49u));
  }

  return SRSASN_SUCCESS;
}
void meas_result_utra_fdd_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId-r16", pci_r16);
  j.write_fieldname("measResult-r16");
  j.start_obj();
  if (meas_result_r16.utra_fdd_rs_cp_r16_present) {
    j.write_int("utra-FDD-RSCP-r16", meas_result_r16.utra_fdd_rs_cp_r16);
  }
  if (meas_result_r16.utra_fdd_ec_n0_r16_present) {
    j.write_int("utra-FDD-EcN0-r16", meas_result_r16.utra_fdd_ec_n0_r16);
  }
  j.end_obj();
  j.end_obj();
}

// PerRACSI-RSInfo-v1660 ::= SEQUENCE
SRSASN_CODE per_ra_csi_r_si_nfo_v1660_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(csi_rs_idx_v1660_present, 1));

  if (csi_rs_idx_v1660_present) {
    HANDLE_CODE(pack_integer(bref, csi_rs_idx_v1660, (uint8_t)1u, (uint8_t)96u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE per_ra_csi_r_si_nfo_v1660_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(csi_rs_idx_v1660_present, 1));

  if (csi_rs_idx_v1660_present) {
    HANDLE_CODE(unpack_integer(csi_rs_idx_v1660, bref, (uint8_t)1u, (uint8_t)96u));
  }

  return SRSASN_SUCCESS;
}
void per_ra_csi_r_si_nfo_v1660_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (csi_rs_idx_v1660_present) {
    j.write_int("csi-RS-Index-v1660", csi_rs_idx_v1660);
  }
  j.end_obj();
}

// PerRAInfo-r16 ::= CHOICE
void per_ra_info_r16_c::destroy_()
{
  switch (type_) {
    case types::per_ra_ssb_info_list_r16:
      c.destroy<per_ra_ssb_info_r16_s>();
      break;
    case types::per_ra_csi_r_si_nfo_list_r16:
      c.destroy<per_ra_csi_r_si_nfo_r16_s>();
      break;
    default:
      break;
  }
}
void per_ra_info_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::per_ra_ssb_info_list_r16:
      c.init<per_ra_ssb_info_r16_s>();
      break;
    case types::per_ra_csi_r_si_nfo_list_r16:
      c.init<per_ra_csi_r_si_nfo_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "per_ra_info_r16_c");
  }
}
per_ra_info_r16_c::per_ra_info_r16_c(const per_ra_info_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::per_ra_ssb_info_list_r16:
      c.init(other.c.get<per_ra_ssb_info_r16_s>());
      break;
    case types::per_ra_csi_r_si_nfo_list_r16:
      c.init(other.c.get<per_ra_csi_r_si_nfo_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "per_ra_info_r16_c");
  }
}
per_ra_info_r16_c& per_ra_info_r16_c::operator=(const per_ra_info_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::per_ra_ssb_info_list_r16:
      c.set(other.c.get<per_ra_ssb_info_r16_s>());
      break;
    case types::per_ra_csi_r_si_nfo_list_r16:
      c.set(other.c.get<per_ra_csi_r_si_nfo_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "per_ra_info_r16_c");
  }

  return *this;
}
per_ra_ssb_info_r16_s& per_ra_info_r16_c::set_per_ra_ssb_info_list_r16()
{
  set(types::per_ra_ssb_info_list_r16);
  return c.get<per_ra_ssb_info_r16_s>();
}
per_ra_csi_r_si_nfo_r16_s& per_ra_info_r16_c::set_per_ra_csi_r_si_nfo_list_r16()
{
  set(types::per_ra_csi_r_si_nfo_list_r16);
  return c.get<per_ra_csi_r_si_nfo_r16_s>();
}
void per_ra_info_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::per_ra_ssb_info_list_r16:
      j.write_fieldname("perRASSBInfoList-r16");
      c.get<per_ra_ssb_info_r16_s>().to_json(j);
      break;
    case types::per_ra_csi_r_si_nfo_list_r16:
      j.write_fieldname("perRACSI-RSInfoList-r16");
      c.get<per_ra_csi_r_si_nfo_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "per_ra_info_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE per_ra_info_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::per_ra_ssb_info_list_r16:
      HANDLE_CODE(c.get<per_ra_ssb_info_r16_s>().pack(bref));
      break;
    case types::per_ra_csi_r_si_nfo_list_r16:
      HANDLE_CODE(c.get<per_ra_csi_r_si_nfo_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "per_ra_info_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE per_ra_info_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::per_ra_ssb_info_list_r16:
      HANDLE_CODE(c.get<per_ra_ssb_info_r16_s>().unpack(bref));
      break;
    case types::per_ra_csi_r_si_nfo_list_r16:
      HANDLE_CODE(c.get<per_ra_csi_r_si_nfo_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "per_ra_info_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* per_ra_info_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"perRASSBInfoList-r16", "perRACSI-RSInfoList-r16"};
  return convert_enum_idx(names, 2, value, "per_ra_info_r16_c::types");
}

// RRCReconfigurationComplete-v1700-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_complete_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(need_for_gap_ncsg_info_nr_r17_present, 1));
  HANDLE_CODE(bref.pack(need_for_gap_ncsg_info_eutra_r17_present, 1));
  HANDLE_CODE(bref.pack(sel_cond_rrc_recfg_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (need_for_gap_ncsg_info_nr_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_info_nr_r17.pack(bref));
  }
  if (need_for_gap_ncsg_info_eutra_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_info_eutra_r17.pack(bref));
  }
  if (sel_cond_rrc_recfg_r17_present) {
    HANDLE_CODE(pack_integer(bref, sel_cond_rrc_recfg_r17, (uint8_t)1u, (uint8_t)8u));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(need_for_gap_ncsg_info_nr_r17_present, 1));
  HANDLE_CODE(bref.unpack(need_for_gap_ncsg_info_eutra_r17_present, 1));
  HANDLE_CODE(bref.unpack(sel_cond_rrc_recfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (need_for_gap_ncsg_info_nr_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_info_nr_r17.unpack(bref));
  }
  if (need_for_gap_ncsg_info_eutra_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_info_eutra_r17.unpack(bref));
  }
  if (sel_cond_rrc_recfg_r17_present) {
    HANDLE_CODE(unpack_integer(sel_cond_rrc_recfg_r17, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_complete_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (need_for_gap_ncsg_info_nr_r17_present) {
    j.write_fieldname("needForGapNCSG-InfoNR-r17");
    need_for_gap_ncsg_info_nr_r17.to_json(j);
  }
  if (need_for_gap_ncsg_info_eutra_r17_present) {
    j.write_fieldname("needForGapNCSG-InfoEUTRA-r17");
    need_for_gap_ncsg_info_eutra_r17.to_json(j);
  }
  if (sel_cond_rrc_recfg_r17_present) {
    j.write_int("selectedCondRRCReconfig-r17", sel_cond_rrc_recfg_r17);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// ReducedAggregatedBandwidth ::= ENUMERATED
const char* reduced_aggr_bw_opts::to_string() const
{
  static const char* names[] = {
      "mhz0", "mhz10", "mhz20", "mhz30", "mhz40", "mhz50", "mhz60", "mhz80", "mhz100", "mhz200", "mhz300", "mhz400"};
  return convert_enum_idx(names, 12, value, "reduced_aggr_bw_e");
}
uint16_t reduced_aggr_bw_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 10, 20, 30, 40, 50, 60, 80, 100, 200, 300, 400};
  return map_enum_number(numbers, 12, value, "reduced_aggr_bw_e");
}

// ReducedAggregatedBandwidth-r17 ::= ENUMERATED
const char* reduced_aggr_bw_r17_opts::to_string() const
{
  static const char* names[] = {"mhz0", "mhz100", "mhz200", "mhz400", "mhz800", "mhz1200", "mhz1600", "mhz2000"};
  return convert_enum_idx(names, 8, value, "reduced_aggr_bw_r17_e");
}
uint16_t reduced_aggr_bw_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 100, 200, 400, 800, 1200, 1600, 2000};
  return map_enum_number(numbers, 8, value, "reduced_aggr_bw_r17_e");
}

// SL-DRX-ConfigUC-SemiStatic-r17 ::= SEQUENCE
SRSASN_CODE sl_drx_cfg_uc_semi_static_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(sl_drx_on_dur_timer_r17.pack(bref));
  HANDLE_CODE(sl_drx_cycle_start_offset_r17.pack(bref));
  HANDLE_CODE(pack_integer(bref, sl_drx_slot_offset_r17, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drx_cfg_uc_semi_static_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(sl_drx_on_dur_timer_r17.unpack(bref));
  HANDLE_CODE(sl_drx_cycle_start_offset_r17.unpack(bref));
  HANDLE_CODE(unpack_integer(sl_drx_slot_offset_r17, bref, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
void sl_drx_cfg_uc_semi_static_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sl-drx-onDurationTimer-r17");
  sl_drx_on_dur_timer_r17.to_json(j);
  j.write_fieldname("sl-drx-CycleStartOffset-r17");
  sl_drx_cycle_start_offset_r17.to_json(j);
  j.write_int("sl-drx-SlotOffset-r17", sl_drx_slot_offset_r17);
  j.end_obj();
}

void sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::destroy_() {}
void sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::sl_drx_on_dur_timer_r17_c_(
    const sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sub_milli_seconds:
      c.init(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.init(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_");
  }
}
sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_&
sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::operator=(
    const sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sub_milli_seconds:
      c.set(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.set(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_");
  }

  return *this;
}
uint8_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::set_sub_milli_seconds()
{
  set(types::sub_milli_seconds);
  return c.get<uint8_t>();
}
sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::milli_seconds_e_&
sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::set_milli_seconds()
{
  set(types::milli_seconds);
  return c.get<milli_seconds_e_>();
}
void sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sub_milli_seconds:
      j.write_int("subMilliSeconds", c.get<uint8_t>());
      break;
    case types::milli_seconds:
      j.write_str("milliSeconds", c.get<milli_seconds_e_>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::milli_seconds_opts::to_string() const
{
  static const char* names[] = {"ms1",    "ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms8",    "ms10",
                                "ms20",   "ms30",   "ms40",   "ms50",   "ms60",   "ms80",   "ms100",  "ms200",
                                "ms300",  "ms400",  "ms500",  "ms600",  "ms800",  "ms1000", "ms1200", "ms1600",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(
      names, 32, value, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::milli_seconds_e_");
}
uint16_t sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::milli_seconds_opts::to_number() const
{
  static const uint16_t numbers[] = {1,  2,  3,   4,   5,   6,   8,   10,  20,  30,   40,   50,
                                     60, 80, 100, 200, 300, 400, 500, 600, 800, 1000, 1200, 1600};
  return map_enum_number(
      numbers, 24, value, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::milli_seconds_e_");
}

const char* sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"subMilliSeconds", "milliSeconds"};
  return convert_enum_idx(names, 2, value, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_on_dur_timer_r17_c_::types");
}

void sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::destroy_() {}
void sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::sl_drx_cycle_start_offset_r17_c_(
    const sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ms10:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms32:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms40:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms60:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms64:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms70:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms80:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms128:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms160:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms256:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms320:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms512:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms640:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms1024:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms1280:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms2048:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms2560:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms5120:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms10240:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_");
  }
}
sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_&
sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::operator=(
    const sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ms10:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms32:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms40:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms60:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms64:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms70:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms80:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms128:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms160:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms256:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms320:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms512:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms640:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms1024:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms1280:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms2048:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms2560:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms5120:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms10240:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_");
  }

  return *this;
}
uint8_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms10()
{
  set(types::ms10);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms20()
{
  set(types::ms20);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms32()
{
  set(types::ms32);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms40()
{
  set(types::ms40);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms60()
{
  set(types::ms60);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms64()
{
  set(types::ms64);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms70()
{
  set(types::ms70);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms80()
{
  set(types::ms80);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms128()
{
  set(types::ms128);
  return c.get<uint8_t>();
}
uint8_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms160()
{
  set(types::ms160);
  return c.get<uint8_t>();
}
uint16_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms256()
{
  set(types::ms256);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms320()
{
  set(types::ms320);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms512()
{
  set(types::ms512);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms640()
{
  set(types::ms640);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms1024()
{
  set(types::ms1024);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms1280()
{
  set(types::ms1280);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms2048()
{
  set(types::ms2048);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms2560()
{
  set(types::ms2560);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms5120()
{
  set(types::ms5120);
  return c.get<uint16_t>();
}
uint16_t& sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::set_ms10240()
{
  set(types::ms10240);
  return c.get<uint16_t>();
}
void sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ms10:
      j.write_int("ms10", c.get<uint8_t>());
      break;
    case types::ms20:
      j.write_int("ms20", c.get<uint8_t>());
      break;
    case types::ms32:
      j.write_int("ms32", c.get<uint8_t>());
      break;
    case types::ms40:
      j.write_int("ms40", c.get<uint8_t>());
      break;
    case types::ms60:
      j.write_int("ms60", c.get<uint8_t>());
      break;
    case types::ms64:
      j.write_int("ms64", c.get<uint8_t>());
      break;
    case types::ms70:
      j.write_int("ms70", c.get<uint8_t>());
      break;
    case types::ms80:
      j.write_int("ms80", c.get<uint8_t>());
      break;
    case types::ms128:
      j.write_int("ms128", c.get<uint8_t>());
      break;
    case types::ms160:
      j.write_int("ms160", c.get<uint8_t>());
      break;
    case types::ms256:
      j.write_int("ms256", c.get<uint16_t>());
      break;
    case types::ms320:
      j.write_int("ms320", c.get<uint16_t>());
      break;
    case types::ms512:
      j.write_int("ms512", c.get<uint16_t>());
      break;
    case types::ms640:
      j.write_int("ms640", c.get<uint16_t>());
      break;
    case types::ms1024:
      j.write_int("ms1024", c.get<uint16_t>());
      break;
    case types::ms1280:
      j.write_int("ms1280", c.get<uint16_t>());
      break;
    case types::ms2048:
      j.write_int("ms2048", c.get<uint16_t>());
      break;
    case types::ms2560:
      j.write_int("ms2560", c.get<uint16_t>());
      break;
    case types::ms5120:
      j.write_int("ms5120", c.get<uint16_t>());
      break;
    case types::ms10240:
      j.write_int("ms10240", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ms10:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)9u));
      break;
    case types::ms20:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms32:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms40:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms60:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)59u));
      break;
    case types::ms64:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)63u));
      break;
    case types::ms70:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)69u));
      break;
    case types::ms80:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms128:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    case types::ms160:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms256:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u));
      break;
    case types::ms320:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms512:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)511u));
      break;
    case types::ms640:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms1024:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1023u));
      break;
    case types::ms1280:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms2048:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)2047u));
      break;
    case types::ms2560:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)2559u));
      break;
    case types::ms5120:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)5119u));
      break;
    case types::ms10240:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)10239u));
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ms10:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)9u));
      break;
    case types::ms20:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms32:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms40:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms60:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)59u));
      break;
    case types::ms64:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)63u));
      break;
    case types::ms70:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)69u));
      break;
    case types::ms80:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms128:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    case types::ms160:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms256:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u));
      break;
    case types::ms320:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms512:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)511u));
      break;
    case types::ms640:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms1024:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1023u));
      break;
    case types::ms1280:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms2048:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)2047u));
      break;
    case types::ms2560:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)2559u));
      break;
    case types::ms5120:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)5119u));
      break;
    case types::ms10240:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)10239u));
      break;
    default:
      log_invalid_choice_id(type_, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"ms10",   "ms20",   "ms32",   "ms40",   "ms60",   "ms64",   "ms70",
                                "ms80",   "ms128",  "ms160",  "ms256",  "ms320",  "ms512",  "ms640",
                                "ms1024", "ms1280", "ms2048", "ms2560", "ms5120", "ms10240"};
  return convert_enum_idx(names, 20, value, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::types");
}
uint16_t sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {10,  20,  32,  40,  60,   64,   70,   80,   128,  160,
                                     256, 320, 512, 640, 1024, 1280, 2048, 2560, 5120, 10240};
  return map_enum_number(
      numbers, 20, value, "sl_drx_cfg_uc_semi_static_r17_s::sl_drx_cycle_start_offset_r17_c_::types");
}

// SL-TxResourceReq-r16 ::= SEQUENCE
SRSASN_CODE sl_tx_res_req_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_rlc_mode_ind_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_qos_info_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_type_tx_sync_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_tx_interested_freq_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_cap_info_sidelink_r16.size() > 0, 1));

  HANDLE_CODE(sl_dest_id_r16.pack(bref));
  HANDLE_CODE(sl_cast_type_r16.pack(bref));
  if (sl_rlc_mode_ind_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rlc_mode_ind_list_r16, 1, 512));
  }
  if (sl_qos_info_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_qos_info_list_r16, 1, 64));
  }
  if (sl_type_tx_sync_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_type_tx_sync_list_r16, 1, 8));
  }
  if (sl_tx_interested_freq_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_tx_interested_freq_list_r16, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (sl_cap_info_sidelink_r16.size() > 0) {
    HANDLE_CODE(sl_cap_info_sidelink_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_tx_res_req_r16_s::unpack(cbit_ref& bref)
{
  bool sl_rlc_mode_ind_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_rlc_mode_ind_list_r16_present, 1));
  bool sl_qos_info_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_qos_info_list_r16_present, 1));
  bool sl_type_tx_sync_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_type_tx_sync_list_r16_present, 1));
  bool sl_tx_interested_freq_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_tx_interested_freq_list_r16_present, 1));
  bool sl_cap_info_sidelink_r16_present;
  HANDLE_CODE(bref.unpack(sl_cap_info_sidelink_r16_present, 1));

  HANDLE_CODE(sl_dest_id_r16.unpack(bref));
  HANDLE_CODE(sl_cast_type_r16.unpack(bref));
  if (sl_rlc_mode_ind_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rlc_mode_ind_list_r16, bref, 1, 512));
  }
  if (sl_qos_info_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_qos_info_list_r16, bref, 1, 64));
  }
  if (sl_type_tx_sync_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_type_tx_sync_list_r16, bref, 1, 8));
  }
  if (sl_tx_interested_freq_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_tx_interested_freq_list_r16, bref, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (sl_cap_info_sidelink_r16_present) {
    HANDLE_CODE(sl_cap_info_sidelink_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_tx_res_req_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sl-DestinationIdentity-r16", sl_dest_id_r16.to_string());
  j.write_str("sl-CastType-r16", sl_cast_type_r16.to_string());
  if (sl_rlc_mode_ind_list_r16.size() > 0) {
    j.start_array("sl-RLC-ModeIndicationList-r16");
    for (const auto& e1 : sl_rlc_mode_ind_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_qos_info_list_r16.size() > 0) {
    j.start_array("sl-QoS-InfoList-r16");
    for (const auto& e1 : sl_qos_info_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_type_tx_sync_list_r16.size() > 0) {
    j.start_array("sl-TypeTxSyncList-r16");
    for (const auto& e1 : sl_type_tx_sync_list_r16) {
      j.write_str(e1.to_string());
    }
    j.end_array();
  }
  if (sl_tx_interested_freq_list_r16.size() > 0) {
    j.start_array("sl-TxInterestedFreqList-r16");
    for (const auto& e1 : sl_tx_interested_freq_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_cap_info_sidelink_r16.size() > 0) {
    j.write_str("sl-CapabilityInformationSidelink-r16", sl_cap_info_sidelink_r16.to_string());
  }
  j.end_obj();
}

const char* sl_tx_res_req_r16_s::sl_cast_type_r16_opts::to_string() const
{
  static const char* names[] = {"broadcast", "groupcast", "unicast", "spare1"};
  return convert_enum_idx(names, 4, value, "sl_tx_res_req_r16_s::sl_cast_type_r16_e_");
}

// SL-TxResourceReqL2U2N-Relay-r17 ::= SEQUENCE
SRSASN_CODE sl_tx_res_req_l2_u2_n_relay_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_dest_id_l2_u2_n_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_local_id_request_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_paging_id_remote_ue_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_cap_info_sidelink_r17.size() > 0, 1));

  if (sl_dest_id_l2_u2_n_r17_present) {
    HANDLE_CODE(sl_dest_id_l2_u2_n_r17.pack(bref));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, sl_tx_interested_freq_list_l2_u2_n_r17, 1, 8, integer_packer<uint8_t>(1, 8)));
  HANDLE_CODE(pack_dyn_seq_of(bref, sl_type_tx_sync_list_l2_u2_n_r17, 1, 8));
  if (sl_paging_id_remote_ue_r17_present) {
    HANDLE_CODE(sl_paging_id_remote_ue_r17.pack(bref));
  }
  if (sl_cap_info_sidelink_r17.size() > 0) {
    HANDLE_CODE(sl_cap_info_sidelink_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_tx_res_req_l2_u2_n_relay_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_dest_id_l2_u2_n_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_local_id_request_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_paging_id_remote_ue_r17_present, 1));
  bool sl_cap_info_sidelink_r17_present;
  HANDLE_CODE(bref.unpack(sl_cap_info_sidelink_r17_present, 1));

  if (sl_dest_id_l2_u2_n_r17_present) {
    HANDLE_CODE(sl_dest_id_l2_u2_n_r17.unpack(bref));
  }
  HANDLE_CODE(unpack_dyn_seq_of(sl_tx_interested_freq_list_l2_u2_n_r17, bref, 1, 8, integer_packer<uint8_t>(1, 8)));
  HANDLE_CODE(unpack_dyn_seq_of(sl_type_tx_sync_list_l2_u2_n_r17, bref, 1, 8));
  if (sl_paging_id_remote_ue_r17_present) {
    HANDLE_CODE(sl_paging_id_remote_ue_r17.unpack(bref));
  }
  if (sl_cap_info_sidelink_r17_present) {
    HANDLE_CODE(sl_cap_info_sidelink_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_tx_res_req_l2_u2_n_relay_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_dest_id_l2_u2_n_r17_present) {
    j.write_str("sl-DestinationIdentityL2U2N-r17", sl_dest_id_l2_u2_n_r17.to_string());
  }
  j.start_array("sl-TxInterestedFreqListL2U2N-r17");
  for (const auto& e1 : sl_tx_interested_freq_list_l2_u2_n_r17) {
    j.write_int(e1);
  }
  j.end_array();
  j.start_array("sl-TypeTxSyncListL2U2N-r17");
  for (const auto& e1 : sl_type_tx_sync_list_l2_u2_n_r17) {
    j.write_str(e1.to_string());
  }
  j.end_array();
  if (sl_local_id_request_r17_present) {
    j.write_str("sl-LocalID-Request-r17", "true");
  }
  if (sl_paging_id_remote_ue_r17_present) {
    j.write_fieldname("sl-PagingIdentityRemoteUE-r17");
    sl_paging_id_remote_ue_r17.to_json(j);
  }
  if (sl_cap_info_sidelink_r17.size() > 0) {
    j.write_str("sl-CapabilityInformationSidelink-r17", sl_cap_info_sidelink_r17.to_string());
  }
  j.end_obj();
}

// Sensor-LocationInfo-r16 ::= SEQUENCE
SRSASN_CODE sensor_location_info_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sensor_meas_info_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sensor_motion_info_r16.size() > 0, 1));

  if (sensor_meas_info_r16.size() > 0) {
    HANDLE_CODE(sensor_meas_info_r16.pack(bref));
  }
  if (sensor_motion_info_r16.size() > 0) {
    HANDLE_CODE(sensor_motion_info_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sensor_location_info_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sensor_meas_info_r16_present;
  HANDLE_CODE(bref.unpack(sensor_meas_info_r16_present, 1));
  bool sensor_motion_info_r16_present;
  HANDLE_CODE(bref.unpack(sensor_motion_info_r16_present, 1));

  if (sensor_meas_info_r16_present) {
    HANDLE_CODE(sensor_meas_info_r16.unpack(bref));
  }
  if (sensor_motion_info_r16_present) {
    HANDLE_CODE(sensor_motion_info_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sensor_location_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sensor_meas_info_r16.size() > 0) {
    j.write_str("sensor-MeasurementInformation-r16", sensor_meas_info_r16.to_string());
  }
  if (sensor_motion_info_r16.size() > 0) {
    j.write_str("sensor-MotionInformation-r16", sensor_motion_info_r16.to_string());
  }
  j.end_obj();
}

// VisitedPSCellInfo-r17 ::= SEQUENCE
SRSASN_CODE visited_pscell_info_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(visited_cell_id_r17_present, 1));

  if (visited_cell_id_r17_present) {
    HANDLE_CODE(visited_cell_id_r17.pack(bref));
  }
  HANDLE_CODE(pack_integer(bref, time_spent_r17, (uint16_t)0u, (uint16_t)4095u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE visited_pscell_info_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(visited_cell_id_r17_present, 1));

  if (visited_cell_id_r17_present) {
    HANDLE_CODE(visited_cell_id_r17.unpack(bref));
  }
  HANDLE_CODE(unpack_integer(time_spent_r17, bref, (uint16_t)0u, (uint16_t)4095u));

  return SRSASN_SUCCESS;
}
void visited_pscell_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (visited_cell_id_r17_present) {
    j.write_fieldname("visitedCellId-r17");
    visited_cell_id_r17.to_json(j);
  }
  j.write_int("timeSpent-r17", time_spent_r17);
  j.end_obj();
}

void visited_pscell_info_r17_s::visited_cell_id_r17_c_::destroy_()
{
  switch (type_) {
    case types::nr_cell_id_r17:
      c.destroy<nr_cell_id_r17_c_>();
      break;
    case types::eutra_cell_id_r17:
      c.destroy<eutra_cell_id_r17_c_>();
      break;
    default:
      break;
  }
}
void visited_pscell_info_r17_s::visited_cell_id_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::nr_cell_id_r17:
      c.init<nr_cell_id_r17_c_>();
      break;
    case types::eutra_cell_id_r17:
      c.init<eutra_cell_id_r17_c_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_");
  }
}
visited_pscell_info_r17_s::visited_cell_id_r17_c_::visited_cell_id_r17_c_(
    const visited_pscell_info_r17_s::visited_cell_id_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::nr_cell_id_r17:
      c.init(other.c.get<nr_cell_id_r17_c_>());
      break;
    case types::eutra_cell_id_r17:
      c.init(other.c.get<eutra_cell_id_r17_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_");
  }
}
visited_pscell_info_r17_s::visited_cell_id_r17_c_& visited_pscell_info_r17_s::visited_cell_id_r17_c_::operator=(
    const visited_pscell_info_r17_s::visited_cell_id_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::nr_cell_id_r17:
      c.set(other.c.get<nr_cell_id_r17_c_>());
      break;
    case types::eutra_cell_id_r17:
      c.set(other.c.get<eutra_cell_id_r17_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_");
  }

  return *this;
}
visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_&
visited_pscell_info_r17_s::visited_cell_id_r17_c_::set_nr_cell_id_r17()
{
  set(types::nr_cell_id_r17);
  return c.get<nr_cell_id_r17_c_>();
}
visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_&
visited_pscell_info_r17_s::visited_cell_id_r17_c_::set_eutra_cell_id_r17()
{
  set(types::eutra_cell_id_r17);
  return c.get<eutra_cell_id_r17_c_>();
}
void visited_pscell_info_r17_s::visited_cell_id_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::nr_cell_id_r17:
      j.write_fieldname("nr-CellId-r17");
      c.get<nr_cell_id_r17_c_>().to_json(j);
      break;
    case types::eutra_cell_id_r17:
      j.write_fieldname("eutra-CellId-r17");
      c.get<eutra_cell_id_r17_c_>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE visited_pscell_info_r17_s::visited_cell_id_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::nr_cell_id_r17:
      HANDLE_CODE(c.get<nr_cell_id_r17_c_>().pack(bref));
      break;
    case types::eutra_cell_id_r17:
      HANDLE_CODE(c.get<eutra_cell_id_r17_c_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE visited_pscell_info_r17_s::visited_cell_id_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::nr_cell_id_r17:
      HANDLE_CODE(c.get<nr_cell_id_r17_c_>().unpack(bref));
      break;
    case types::eutra_cell_id_r17:
      HANDLE_CODE(c.get<eutra_cell_id_r17_c_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_::destroy_()
{
  switch (type_) {
    case types::cgi_info_r17:
      c.destroy<cgi_info_logging_r16_s>();
      break;
    case types::pci_arfcn_r17:
      c.destroy<pci_arfcn_nr_r16_s>();
      break;
    default:
      break;
  }
}
void visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::cgi_info_r17:
      c.init<cgi_info_logging_r16_s>();
      break;
    case types::pci_arfcn_r17:
      c.init<pci_arfcn_nr_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_");
  }
}
visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_::nr_cell_id_r17_c_(
    const visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::cgi_info_r17:
      c.init(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::pci_arfcn_r17:
      c.init(other.c.get<pci_arfcn_nr_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_");
  }
}
visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_&
visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_::operator=(
    const visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::cgi_info_r17:
      c.set(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::pci_arfcn_r17:
      c.set(other.c.get<pci_arfcn_nr_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_");
  }

  return *this;
}
cgi_info_logging_r16_s& visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_::set_cgi_info_r17()
{
  set(types::cgi_info_r17);
  return c.get<cgi_info_logging_r16_s>();
}
pci_arfcn_nr_r16_s& visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_::set_pci_arfcn_r17()
{
  set(types::pci_arfcn_r17);
  return c.get<pci_arfcn_nr_r16_s>();
}
void visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cgi_info_r17:
      j.write_fieldname("cgi-Info-r17");
      c.get<cgi_info_logging_r16_s>().to_json(j);
      break;
    case types::pci_arfcn_r17:
      j.write_fieldname("pci-arfcn-r17");
      c.get<pci_arfcn_nr_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cgi_info_r17:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().pack(bref));
      break;
    case types::pci_arfcn_r17:
      HANDLE_CODE(c.get<pci_arfcn_nr_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cgi_info_r17:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().unpack(bref));
      break;
    case types::pci_arfcn_r17:
      HANDLE_CODE(c.get<pci_arfcn_nr_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"cgi-Info-r17", "pci-arfcn-r17"};
  return convert_enum_idx(
      names, 2, value, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::nr_cell_id_r17_c_::types");
}

void visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_::destroy_()
{
  switch (type_) {
    case types::cell_global_id_r17:
      c.destroy<cgi_info_eutra_logging_s>();
      break;
    case types::pci_arfcn_r17:
      c.destroy<pci_arfcn_eutra_r16_s>();
      break;
    default:
      break;
  }
}
void visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::cell_global_id_r17:
      c.init<cgi_info_eutra_logging_s>();
      break;
    case types::pci_arfcn_r17:
      c.init<pci_arfcn_eutra_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_");
  }
}
visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_::eutra_cell_id_r17_c_(
    const visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::cell_global_id_r17:
      c.init(other.c.get<cgi_info_eutra_logging_s>());
      break;
    case types::pci_arfcn_r17:
      c.init(other.c.get<pci_arfcn_eutra_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_");
  }
}
visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_&
visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_::operator=(
    const visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::cell_global_id_r17:
      c.set(other.c.get<cgi_info_eutra_logging_s>());
      break;
    case types::pci_arfcn_r17:
      c.set(other.c.get<pci_arfcn_eutra_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_");
  }

  return *this;
}
cgi_info_eutra_logging_s&
visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_::set_cell_global_id_r17()
{
  set(types::cell_global_id_r17);
  return c.get<cgi_info_eutra_logging_s>();
}
pci_arfcn_eutra_r16_s& visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_::set_pci_arfcn_r17()
{
  set(types::pci_arfcn_r17);
  return c.get<pci_arfcn_eutra_r16_s>();
}
void visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cell_global_id_r17:
      j.write_fieldname("cellGlobalId-r17");
      c.get<cgi_info_eutra_logging_s>().to_json(j);
      break;
    case types::pci_arfcn_r17:
      j.write_fieldname("pci-arfcn-r17");
      c.get<pci_arfcn_eutra_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cell_global_id_r17:
      HANDLE_CODE(c.get<cgi_info_eutra_logging_s>().pack(bref));
      break;
    case types::pci_arfcn_r17:
      HANDLE_CODE(c.get<pci_arfcn_eutra_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cell_global_id_r17:
      HANDLE_CODE(c.get<cgi_info_eutra_logging_s>().unpack(bref));
      break;
    case types::pci_arfcn_r17:
      HANDLE_CODE(c.get<pci_arfcn_eutra_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"cellGlobalId-r17", "pci-arfcn-r17"};
  return convert_enum_idx(
      names, 2, value, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::eutra_cell_id_r17_c_::types");
}

const char* visited_pscell_info_r17_s::visited_cell_id_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"nr-CellId-r17", "eutra-CellId-r17"};
  return convert_enum_idx(names, 2, value, "visited_pscell_info_r17_s::visited_cell_id_r17_c_::types");
}

// LocationInfo-r16 ::= SEQUENCE
SRSASN_CODE location_info_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(common_location_info_r16_present, 1));
  HANDLE_CODE(bref.pack(bt_location_info_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(wlan_location_info_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sensor_location_info_r16_present, 1));

  if (common_location_info_r16_present) {
    HANDLE_CODE(common_location_info_r16.pack(bref));
  }
  if (bt_location_info_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, bt_location_info_r16, 1, 32));
  }
  if (wlan_location_info_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, wlan_location_info_r16, 1, 32));
  }
  if (sensor_location_info_r16_present) {
    HANDLE_CODE(sensor_location_info_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE location_info_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(common_location_info_r16_present, 1));
  bool bt_location_info_r16_present;
  HANDLE_CODE(bref.unpack(bt_location_info_r16_present, 1));
  bool wlan_location_info_r16_present;
  HANDLE_CODE(bref.unpack(wlan_location_info_r16_present, 1));
  HANDLE_CODE(bref.unpack(sensor_location_info_r16_present, 1));

  if (common_location_info_r16_present) {
    HANDLE_CODE(common_location_info_r16.unpack(bref));
  }
  if (bt_location_info_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(bt_location_info_r16, bref, 1, 32));
  }
  if (wlan_location_info_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(wlan_location_info_r16, bref, 1, 32));
  }
  if (sensor_location_info_r16_present) {
    HANDLE_CODE(sensor_location_info_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void location_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (common_location_info_r16_present) {
    j.write_fieldname("commonLocationInfo-r16");
    common_location_info_r16.to_json(j);
  }
  if (bt_location_info_r16.size() > 0) {
    j.start_array("bt-LocationInfo-r16");
    for (const auto& e1 : bt_location_info_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (wlan_location_info_r16.size() > 0) {
    j.start_array("wlan-LocationInfo-r16");
    for (const auto& e1 : wlan_location_info_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sensor_location_info_r16_present) {
    j.write_fieldname("sensor-LocationInfo-r16");
    sensor_location_info_r16.to_json(j);
  }
  j.end_obj();
}

// MUSIM-Assistance-r17 ::= SEQUENCE
SRSASN_CODE mu_si_m_assist_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(musim_preferred_rrc_state_r17_present, 1));
  HANDLE_CODE(bref.pack(musim_gap_pref_list_r17.size() > 0, 1));

  if (musim_preferred_rrc_state_r17_present) {
    HANDLE_CODE(musim_preferred_rrc_state_r17.pack(bref));
  }
  if (musim_gap_pref_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, musim_gap_pref_list_r17, 1, 4));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mu_si_m_assist_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(musim_preferred_rrc_state_r17_present, 1));
  bool musim_gap_pref_list_r17_present;
  HANDLE_CODE(bref.unpack(musim_gap_pref_list_r17_present, 1));

  if (musim_preferred_rrc_state_r17_present) {
    HANDLE_CODE(musim_preferred_rrc_state_r17.unpack(bref));
  }
  if (musim_gap_pref_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(musim_gap_pref_list_r17, bref, 1, 4));
  }

  return SRSASN_SUCCESS;
}
void mu_si_m_assist_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (musim_preferred_rrc_state_r17_present) {
    j.write_str("musim-PreferredRRC-State-r17", musim_preferred_rrc_state_r17.to_string());
  }
  if (musim_gap_pref_list_r17.size() > 0) {
    j.start_array("musim-GapPreferenceList-r17");
    for (const auto& e1 : musim_gap_pref_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

const char* mu_si_m_assist_r17_s::musim_preferred_rrc_state_r17_opts::to_string() const
{
  static const char* names[] = {"idle", "inactive", "outOfConnected"};
  return convert_enum_idx(names, 3, value, "mu_si_m_assist_r17_s::musim_preferred_rrc_state_r17_e_");
}

// MaxBW-PreferenceFR2-2-r17 ::= SEQUENCE
SRSASN_CODE max_bw_pref_fr2_2_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(reduced_max_bw_fr2_2_r17_present, 1));

  if (reduced_max_bw_fr2_2_r17_present) {
    HANDLE_CODE(bref.pack(reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_dl_r17_present, 1));
    HANDLE_CODE(bref.pack(reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_ul_r17_present, 1));
    if (reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_dl_r17_present) {
      HANDLE_CODE(reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_dl_r17.pack(bref));
    }
    if (reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_ul_r17_present) {
      HANDLE_CODE(reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_ul_r17.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE max_bw_pref_fr2_2_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(reduced_max_bw_fr2_2_r17_present, 1));

  if (reduced_max_bw_fr2_2_r17_present) {
    HANDLE_CODE(bref.unpack(reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_dl_r17_present, 1));
    HANDLE_CODE(bref.unpack(reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_ul_r17_present, 1));
    if (reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_dl_r17_present) {
      HANDLE_CODE(reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_dl_r17.unpack(bref));
    }
    if (reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_ul_r17_present) {
      HANDLE_CODE(reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_ul_r17.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void max_bw_pref_fr2_2_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (reduced_max_bw_fr2_2_r17_present) {
    j.write_fieldname("reducedMaxBW-FR2-2-r17");
    j.start_obj();
    if (reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_dl_r17_present) {
      j.write_str("reducedBW-FR2-2-DL-r17", reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_dl_r17.to_string());
    }
    if (reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_ul_r17_present) {
      j.write_str("reducedBW-FR2-2-UL-r17", reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_ul_r17.to_string());
    }
    j.end_obj();
  }
  j.end_obj();
}

// MaxMIMO-LayerPreferenceFR2-2-r17 ::= SEQUENCE
SRSASN_CODE max_mimo_layer_pref_fr2_2_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(reduced_max_mimo_layers_fr2_2_r17_present, 1));

  if (reduced_max_mimo_layers_fr2_2_r17_present) {
    HANDLE_CODE(pack_integer(
        bref, reduced_max_mimo_layers_fr2_2_r17.reduced_mimo_layers_fr2_2_dl_r17, (uint8_t)1u, (uint8_t)8u));
    HANDLE_CODE(pack_integer(
        bref, reduced_max_mimo_layers_fr2_2_r17.reduced_mimo_layers_fr2_2_ul_r17, (uint8_t)1u, (uint8_t)4u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE max_mimo_layer_pref_fr2_2_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(reduced_max_mimo_layers_fr2_2_r17_present, 1));

  if (reduced_max_mimo_layers_fr2_2_r17_present) {
    HANDLE_CODE(unpack_integer(
        reduced_max_mimo_layers_fr2_2_r17.reduced_mimo_layers_fr2_2_dl_r17, bref, (uint8_t)1u, (uint8_t)8u));
    HANDLE_CODE(unpack_integer(
        reduced_max_mimo_layers_fr2_2_r17.reduced_mimo_layers_fr2_2_ul_r17, bref, (uint8_t)1u, (uint8_t)4u));
  }

  return SRSASN_SUCCESS;
}
void max_mimo_layer_pref_fr2_2_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (reduced_max_mimo_layers_fr2_2_r17_present) {
    j.write_fieldname("reducedMaxMIMO-LayersFR2-2-r17");
    j.start_obj();
    j.write_int("reducedMIMO-LayersFR2-2-DL-r17", reduced_max_mimo_layers_fr2_2_r17.reduced_mimo_layers_fr2_2_dl_r17);
    j.write_int("reducedMIMO-LayersFR2-2-UL-r17", reduced_max_mimo_layers_fr2_2_r17.reduced_mimo_layers_fr2_2_ul_r17);
    j.end_obj();
  }
  j.end_obj();
}

// MeasResultCBR-NR-r16 ::= SEQUENCE
SRSASN_CODE meas_result_cbr_nr_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, sl_pool_report_id_r16, (uint8_t)1u, (uint8_t)16u));
  HANDLE_CODE(pack_integer(bref, sl_cbr_results_nr_r16, (uint8_t)0u, (uint8_t)100u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_cbr_nr_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(sl_pool_report_id_r16, bref, (uint8_t)1u, (uint8_t)16u));
  HANDLE_CODE(unpack_integer(sl_cbr_results_nr_r16, bref, (uint8_t)0u, (uint8_t)100u));

  return SRSASN_SUCCESS;
}
void meas_result_cbr_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-poolReportIdentity-r16", sl_pool_report_id_r16);
  j.write_int("sl-CBR-ResultsNR-r16", sl_cbr_results_nr_r16);
  j.end_obj();
}

// MeasResultCLI-RSSI-r16 ::= SEQUENCE
SRSASN_CODE meas_result_cli_rssi_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rssi_res_id_r16, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(pack_integer(bref, cli_rssi_result_r16, (uint8_t)0u, (uint8_t)76u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_cli_rssi_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rssi_res_id_r16, bref, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(unpack_integer(cli_rssi_result_r16, bref, (uint8_t)0u, (uint8_t)76u));

  return SRSASN_SUCCESS;
}
void meas_result_cli_rssi_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rssi-ResourceId-r16", rssi_res_id_r16);
  j.write_int("cli-RSSI-Result-r16", cli_rssi_result_r16);
  j.end_obj();
}

// MeasResultFailedCell-r16 ::= SEQUENCE
SRSASN_CODE meas_result_failed_cell_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(cgi_info.pack(bref));
  HANDLE_CODE(meas_result_r16.cell_results_r16.results_ssb_cell_r16.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_r16.rs_idx_results_r16.results_ssb_idxes_r16, 1, 64));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_failed_cell_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(cgi_info.unpack(bref));
  HANDLE_CODE(meas_result_r16.cell_results_r16.results_ssb_cell_r16.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(meas_result_r16.rs_idx_results_r16.results_ssb_idxes_r16, bref, 1, 64));

  return SRSASN_SUCCESS;
}
void meas_result_failed_cell_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("cgi-Info");
  cgi_info.to_json(j);
  j.write_fieldname("measResult-r16");
  j.start_obj();
  j.write_fieldname("cellResults-r16");
  j.start_obj();
  j.write_fieldname("resultsSSB-Cell-r16");
  meas_result_r16.cell_results_r16.results_ssb_cell_r16.to_json(j);
  j.end_obj();
  j.write_fieldname("rsIndexResults-r16");
  j.start_obj();
  j.start_array("resultsSSB-Indexes-r16");
  for (const auto& e1 : meas_result_r16.rs_idx_results_r16.results_ssb_idxes_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
  j.end_obj();
  j.end_obj();
}

// MeasResultSRS-RSRP-r16 ::= SEQUENCE
SRSASN_CODE meas_result_srs_rsrp_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, srs_res_id_r16, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(pack_integer(bref, srs_rsrp_result_r16, (uint8_t)0u, (uint8_t)98u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_srs_rsrp_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(srs_res_id_r16, bref, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(unpack_integer(srs_rsrp_result_r16, bref, (uint8_t)0u, (uint8_t)98u));

  return SRSASN_SUCCESS;
}
void meas_result_srs_rsrp_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("srs-ResourceId-r16", srs_res_id_r16);
  j.write_int("srs-RSRP-Result-r16", srs_rsrp_result_r16);
  j.end_obj();
}

// MeasResultServingCell-r16 ::= SEQUENCE
SRSASN_CODE meas_result_serving_cell_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(results_ssb_present, 1));

  HANDLE_CODE(results_ssb_cell.pack(bref));
  if (results_ssb_present) {
    HANDLE_CODE(pack_integer(bref, results_ssb.best_ssb_idx, (uint8_t)0u, (uint8_t)63u));
    HANDLE_CODE(results_ssb.best_ssb_results.pack(bref));
    HANDLE_CODE(pack_integer(bref, results_ssb.nof_good_ssb, (uint8_t)1u, (uint8_t)64u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_serving_cell_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(results_ssb_present, 1));

  HANDLE_CODE(results_ssb_cell.unpack(bref));
  if (results_ssb_present) {
    HANDLE_CODE(unpack_integer(results_ssb.best_ssb_idx, bref, (uint8_t)0u, (uint8_t)63u));
    HANDLE_CODE(results_ssb.best_ssb_results.unpack(bref));
    HANDLE_CODE(unpack_integer(results_ssb.nof_good_ssb, bref, (uint8_t)1u, (uint8_t)64u));
  }

  return SRSASN_SUCCESS;
}
void meas_result_serving_cell_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("resultsSSB-Cell");
  results_ssb_cell.to_json(j);
  if (results_ssb_present) {
    j.write_fieldname("resultsSSB");
    j.start_obj();
    j.write_int("best-ssb-Index", results_ssb.best_ssb_idx);
    j.write_fieldname("best-ssb-Results");
    results_ssb.best_ssb_results.to_json(j);
    j.write_int("numberOfGoodSSB", results_ssb.nof_good_ssb);
    j.end_obj();
  }
  j.end_obj();
}

// MeasResultsPerCellIdleEUTRA-r16 ::= SEQUENCE
SRSASN_CODE meas_results_per_cell_idle_eutra_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, eutra_pci_r16, (uint16_t)0u, (uint16_t)503u));
  HANDLE_CODE(bref.pack(meas_idle_result_eutra_r16.rsrp_result_eutra_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_idle_result_eutra_r16.rsrq_result_eutra_r16_present, 1));
  if (meas_idle_result_eutra_r16.rsrp_result_eutra_r16_present) {
    HANDLE_CODE(pack_integer(bref, meas_idle_result_eutra_r16.rsrp_result_eutra_r16, (uint8_t)0u, (uint8_t)97u));
  }
  if (meas_idle_result_eutra_r16.rsrq_result_eutra_r16_present) {
    HANDLE_CODE(pack_integer(bref, meas_idle_result_eutra_r16.rsrq_result_eutra_r16, (int8_t)-30, (int8_t)46));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_results_per_cell_idle_eutra_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(eutra_pci_r16, bref, (uint16_t)0u, (uint16_t)503u));
  HANDLE_CODE(bref.unpack(meas_idle_result_eutra_r16.rsrp_result_eutra_r16_present, 1));
  HANDLE_CODE(bref.unpack(meas_idle_result_eutra_r16.rsrq_result_eutra_r16_present, 1));
  if (meas_idle_result_eutra_r16.rsrp_result_eutra_r16_present) {
    HANDLE_CODE(unpack_integer(meas_idle_result_eutra_r16.rsrp_result_eutra_r16, bref, (uint8_t)0u, (uint8_t)97u));
  }
  if (meas_idle_result_eutra_r16.rsrq_result_eutra_r16_present) {
    HANDLE_CODE(unpack_integer(meas_idle_result_eutra_r16.rsrq_result_eutra_r16, bref, (int8_t)-30, (int8_t)46));
  }

  return SRSASN_SUCCESS;
}
void meas_results_per_cell_idle_eutra_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("eutra-PhysCellId-r16", eutra_pci_r16);
  j.write_fieldname("measIdleResultEUTRA-r16");
  j.start_obj();
  if (meas_idle_result_eutra_r16.rsrp_result_eutra_r16_present) {
    j.write_int("rsrp-ResultEUTRA-r16", meas_idle_result_eutra_r16.rsrp_result_eutra_r16);
  }
  if (meas_idle_result_eutra_r16.rsrq_result_eutra_r16_present) {
    j.write_int("rsrq-ResultEUTRA-r16", meas_idle_result_eutra_r16.rsrq_result_eutra_r16);
  }
  j.end_obj();
  j.end_obj();
}

// MeasResultsPerCellIdleNR-r16 ::= SEQUENCE
SRSASN_CODE meas_results_per_cell_idle_nr_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, pci_r16, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(bref.pack(meas_idle_result_nr_r16.rsrp_result_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_idle_result_nr_r16.rsrq_result_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_idle_result_nr_r16.results_ssb_idxes_r16.size() > 0, 1));
  if (meas_idle_result_nr_r16.rsrp_result_r16_present) {
    HANDLE_CODE(pack_integer(bref, meas_idle_result_nr_r16.rsrp_result_r16, (uint8_t)0u, (uint8_t)127u));
  }
  if (meas_idle_result_nr_r16.rsrq_result_r16_present) {
    HANDLE_CODE(pack_integer(bref, meas_idle_result_nr_r16.rsrq_result_r16, (uint8_t)0u, (uint8_t)127u));
  }
  if (meas_idle_result_nr_r16.results_ssb_idxes_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_idle_result_nr_r16.results_ssb_idxes_r16, 1, 32));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_results_per_cell_idle_nr_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(pci_r16, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(bref.unpack(meas_idle_result_nr_r16.rsrp_result_r16_present, 1));
  HANDLE_CODE(bref.unpack(meas_idle_result_nr_r16.rsrq_result_r16_present, 1));
  bool results_ssb_idxes_r16_present;
  HANDLE_CODE(bref.unpack(results_ssb_idxes_r16_present, 1));
  if (meas_idle_result_nr_r16.rsrp_result_r16_present) {
    HANDLE_CODE(unpack_integer(meas_idle_result_nr_r16.rsrp_result_r16, bref, (uint8_t)0u, (uint8_t)127u));
  }
  if (meas_idle_result_nr_r16.rsrq_result_r16_present) {
    HANDLE_CODE(unpack_integer(meas_idle_result_nr_r16.rsrq_result_r16, bref, (uint8_t)0u, (uint8_t)127u));
  }
  if (results_ssb_idxes_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_idle_result_nr_r16.results_ssb_idxes_r16, bref, 1, 32));
  }

  return SRSASN_SUCCESS;
}
void meas_results_per_cell_idle_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId-r16", pci_r16);
  j.write_fieldname("measIdleResultNR-r16");
  j.start_obj();
  if (meas_idle_result_nr_r16.rsrp_result_r16_present) {
    j.write_int("rsrp-Result-r16", meas_idle_result_nr_r16.rsrp_result_r16);
  }
  if (meas_idle_result_nr_r16.rsrq_result_r16_present) {
    j.write_int("rsrq-Result-r16", meas_idle_result_nr_r16.rsrq_result_r16);
  }
  if (meas_idle_result_nr_r16.results_ssb_idxes_r16.size() > 0) {
    j.start_array("resultsSSB-Indexes-r16");
    for (const auto& e1 : meas_idle_result_nr_r16.results_ssb_idxes_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
  j.end_obj();
}

// MinSchedulingOffsetPreferenceExt-r17 ::= SEQUENCE
SRSASN_CODE min_sched_offset_pref_ext_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(preferred_k0_r17_present, 1));
  HANDLE_CODE(bref.pack(preferred_k2_r17_present, 1));

  if (preferred_k0_r17_present) {
    HANDLE_CODE(bref.pack(preferred_k0_r17.preferred_k0_scs_480k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(preferred_k0_r17.preferred_k0_scs_960k_hz_r17_present, 1));
    if (preferred_k0_r17.preferred_k0_scs_480k_hz_r17_present) {
      HANDLE_CODE(preferred_k0_r17.preferred_k0_scs_480k_hz_r17.pack(bref));
    }
    if (preferred_k0_r17.preferred_k0_scs_960k_hz_r17_present) {
      HANDLE_CODE(preferred_k0_r17.preferred_k0_scs_960k_hz_r17.pack(bref));
    }
  }
  if (preferred_k2_r17_present) {
    HANDLE_CODE(bref.pack(preferred_k2_r17.preferred_k2_scs_480k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(preferred_k2_r17.preferred_k2_scs_960k_hz_r17_present, 1));
    if (preferred_k2_r17.preferred_k2_scs_480k_hz_r17_present) {
      HANDLE_CODE(preferred_k2_r17.preferred_k2_scs_480k_hz_r17.pack(bref));
    }
    if (preferred_k2_r17.preferred_k2_scs_960k_hz_r17_present) {
      HANDLE_CODE(preferred_k2_r17.preferred_k2_scs_960k_hz_r17.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE min_sched_offset_pref_ext_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(preferred_k0_r17_present, 1));
  HANDLE_CODE(bref.unpack(preferred_k2_r17_present, 1));

  if (preferred_k0_r17_present) {
    HANDLE_CODE(bref.unpack(preferred_k0_r17.preferred_k0_scs_480k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(preferred_k0_r17.preferred_k0_scs_960k_hz_r17_present, 1));
    if (preferred_k0_r17.preferred_k0_scs_480k_hz_r17_present) {
      HANDLE_CODE(preferred_k0_r17.preferred_k0_scs_480k_hz_r17.unpack(bref));
    }
    if (preferred_k0_r17.preferred_k0_scs_960k_hz_r17_present) {
      HANDLE_CODE(preferred_k0_r17.preferred_k0_scs_960k_hz_r17.unpack(bref));
    }
  }
  if (preferred_k2_r17_present) {
    HANDLE_CODE(bref.unpack(preferred_k2_r17.preferred_k2_scs_480k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(preferred_k2_r17.preferred_k2_scs_960k_hz_r17_present, 1));
    if (preferred_k2_r17.preferred_k2_scs_480k_hz_r17_present) {
      HANDLE_CODE(preferred_k2_r17.preferred_k2_scs_480k_hz_r17.unpack(bref));
    }
    if (preferred_k2_r17.preferred_k2_scs_960k_hz_r17_present) {
      HANDLE_CODE(preferred_k2_r17.preferred_k2_scs_960k_hz_r17.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void min_sched_offset_pref_ext_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (preferred_k0_r17_present) {
    j.write_fieldname("preferredK0-r17");
    j.start_obj();
    if (preferred_k0_r17.preferred_k0_scs_480k_hz_r17_present) {
      j.write_str("preferredK0-SCS-480kHz-r17", preferred_k0_r17.preferred_k0_scs_480k_hz_r17.to_string());
    }
    if (preferred_k0_r17.preferred_k0_scs_960k_hz_r17_present) {
      j.write_str("preferredK0-SCS-960kHz-r17", preferred_k0_r17.preferred_k0_scs_960k_hz_r17.to_string());
    }
    j.end_obj();
  }
  if (preferred_k2_r17_present) {
    j.write_fieldname("preferredK2-r17");
    j.start_obj();
    if (preferred_k2_r17.preferred_k2_scs_480k_hz_r17_present) {
      j.write_str("preferredK2-SCS-480kHz-r17", preferred_k2_r17.preferred_k2_scs_480k_hz_r17.to_string());
    }
    if (preferred_k2_r17.preferred_k2_scs_960k_hz_r17_present) {
      j.write_str("preferredK2-SCS-960kHz-r17", preferred_k2_r17.preferred_k2_scs_960k_hz_r17.to_string());
    }
    j.end_obj();
  }
  j.end_obj();
}

const char* min_sched_offset_pref_ext_r17_s::preferred_k0_r17_s_::preferred_k0_scs_480k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sl8", "sl16", "sl32", "sl48"};
  return convert_enum_idx(
      names, 4, value, "min_sched_offset_pref_ext_r17_s::preferred_k0_r17_s_::preferred_k0_scs_480k_hz_r17_e_");
}
uint8_t min_sched_offset_pref_ext_r17_s::preferred_k0_r17_s_::preferred_k0_scs_480k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16, 32, 48};
  return map_enum_number(
      numbers, 4, value, "min_sched_offset_pref_ext_r17_s::preferred_k0_r17_s_::preferred_k0_scs_480k_hz_r17_e_");
}

const char* min_sched_offset_pref_ext_r17_s::preferred_k0_r17_s_::preferred_k0_scs_960k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sl8", "sl16", "sl32", "sl48"};
  return convert_enum_idx(
      names, 4, value, "min_sched_offset_pref_ext_r17_s::preferred_k0_r17_s_::preferred_k0_scs_960k_hz_r17_e_");
}
uint8_t min_sched_offset_pref_ext_r17_s::preferred_k0_r17_s_::preferred_k0_scs_960k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16, 32, 48};
  return map_enum_number(
      numbers, 4, value, "min_sched_offset_pref_ext_r17_s::preferred_k0_r17_s_::preferred_k0_scs_960k_hz_r17_e_");
}

const char* min_sched_offset_pref_ext_r17_s::preferred_k2_r17_s_::preferred_k2_scs_480k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sl8", "sl16", "sl32", "sl48"};
  return convert_enum_idx(
      names, 4, value, "min_sched_offset_pref_ext_r17_s::preferred_k2_r17_s_::preferred_k2_scs_480k_hz_r17_e_");
}
uint8_t min_sched_offset_pref_ext_r17_s::preferred_k2_r17_s_::preferred_k2_scs_480k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16, 32, 48};
  return map_enum_number(
      numbers, 4, value, "min_sched_offset_pref_ext_r17_s::preferred_k2_r17_s_::preferred_k2_scs_480k_hz_r17_e_");
}

const char* min_sched_offset_pref_ext_r17_s::preferred_k2_r17_s_::preferred_k2_scs_960k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sl8", "sl16", "sl32", "sl48"};
  return convert_enum_idx(
      names, 4, value, "min_sched_offset_pref_ext_r17_s::preferred_k2_r17_s_::preferred_k2_scs_960k_hz_r17_e_");
}
uint8_t min_sched_offset_pref_ext_r17_s::preferred_k2_r17_s_::preferred_k2_scs_960k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16, 32, 48};
  return map_enum_number(
      numbers, 4, value, "min_sched_offset_pref_ext_r17_s::preferred_k2_r17_s_::preferred_k2_scs_960k_hz_r17_e_");
}

// NeedForGapsInfoNR-r16 ::= SEQUENCE
SRSASN_CODE need_for_gaps_info_nr_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, intra_freq_need_for_gap_r16, 1, 32));
  HANDLE_CODE(pack_dyn_seq_of(bref, inter_freq_need_for_gap_r16, 1, 1024));

  return SRSASN_SUCCESS;
}
SRSASN_CODE need_for_gaps_info_nr_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(intra_freq_need_for_gap_r16, bref, 1, 32));
  HANDLE_CODE(unpack_dyn_seq_of(inter_freq_need_for_gap_r16, bref, 1, 1024));

  return SRSASN_SUCCESS;
}
void need_for_gaps_info_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("intraFreq-needForGap-r16");
  for (const auto& e1 : intra_freq_need_for_gap_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.start_array("interFreq-needForGap-r16");
  for (const auto& e1 : inter_freq_need_for_gap_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// OverheatingAssistance-r17 ::= SEQUENCE
SRSASN_CODE overheat_assist_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(reduced_max_bw_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.pack(reduced_max_mimo_layers_fr2_2_present, 1));

  if (reduced_max_bw_fr2_2_r17_present) {
    HANDLE_CODE(reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_dl_r17.pack(bref));
    HANDLE_CODE(reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_ul_r17.pack(bref));
  }
  if (reduced_max_mimo_layers_fr2_2_present) {
    HANDLE_CODE(reduced_max_mimo_layers_fr2_2.reduced_mimo_layers_fr2_2_dl.pack(bref));
    HANDLE_CODE(reduced_max_mimo_layers_fr2_2.reduced_mimo_layers_fr2_2_ul.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE overheat_assist_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(reduced_max_bw_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.unpack(reduced_max_mimo_layers_fr2_2_present, 1));

  if (reduced_max_bw_fr2_2_r17_present) {
    HANDLE_CODE(reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_dl_r17.unpack(bref));
    HANDLE_CODE(reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_ul_r17.unpack(bref));
  }
  if (reduced_max_mimo_layers_fr2_2_present) {
    HANDLE_CODE(reduced_max_mimo_layers_fr2_2.reduced_mimo_layers_fr2_2_dl.unpack(bref));
    HANDLE_CODE(reduced_max_mimo_layers_fr2_2.reduced_mimo_layers_fr2_2_ul.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void overheat_assist_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (reduced_max_bw_fr2_2_r17_present) {
    j.write_fieldname("reducedMaxBW-FR2-2-r17");
    j.start_obj();
    j.write_str("reducedBW-FR2-2-DL-r17", reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_dl_r17.to_string());
    j.write_str("reducedBW-FR2-2-UL-r17", reduced_max_bw_fr2_2_r17.reduced_bw_fr2_2_ul_r17.to_string());
    j.end_obj();
  }
  if (reduced_max_mimo_layers_fr2_2_present) {
    j.write_fieldname("reducedMaxMIMO-LayersFR2-2");
    j.start_obj();
    j.write_str("reducedMIMO-LayersFR2-2-DL", reduced_max_mimo_layers_fr2_2.reduced_mimo_layers_fr2_2_dl.to_string());
    j.write_str("reducedMIMO-LayersFR2-2-UL", reduced_max_mimo_layers_fr2_2.reduced_mimo_layers_fr2_2_ul.to_string());
    j.end_obj();
  }
  j.end_obj();
}

// RRCReconfigurationComplete-v1640-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_complete_v1640_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_tx_direct_current_two_carrier_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ul_tx_direct_current_two_carrier_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ul_tx_direct_current_two_carrier_list_r16, 1, 64));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_v1640_ies_s::unpack(cbit_ref& bref)
{
  bool ul_tx_direct_current_two_carrier_list_r16_present;
  HANDLE_CODE(bref.unpack(ul_tx_direct_current_two_carrier_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ul_tx_direct_current_two_carrier_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ul_tx_direct_current_two_carrier_list_r16, bref, 1, 64));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_complete_v1640_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_tx_direct_current_two_carrier_list_r16.size() > 0) {
    j.start_array("uplinkTxDirectCurrentTwoCarrierList-r16");
    for (const auto& e1 : ul_tx_direct_current_two_carrier_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCResumeComplete-v1720-IEs ::= SEQUENCE
SRSASN_CODE rrc_resume_complete_v1720_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_tx_direct_current_more_carrier_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ul_tx_direct_current_more_carrier_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ul_tx_direct_current_more_carrier_list_r17, 1, 16));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_complete_v1720_ies_s::unpack(cbit_ref& bref)
{
  bool ul_tx_direct_current_more_carrier_list_r17_present;
  HANDLE_CODE(bref.unpack(ul_tx_direct_current_more_carrier_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ul_tx_direct_current_more_carrier_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ul_tx_direct_current_more_carrier_list_r17, bref, 1, 16));
  }

  return SRSASN_SUCCESS;
}
void rrc_resume_complete_v1720_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_tx_direct_current_more_carrier_list_r17.size() > 0) {
    j.start_array("uplinkTxDirectCurrentMoreCarrierList-r17");
    for (const auto& e1 : ul_tx_direct_current_more_carrier_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// ReducedMaxBW-FRx-r16 ::= SEQUENCE
SRSASN_CODE reduced_max_bw_f_rx_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(reduced_bw_dl_r16.pack(bref));
  HANDLE_CODE(reduced_bw_ul_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE reduced_max_bw_f_rx_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(reduced_bw_dl_r16.unpack(bref));
  HANDLE_CODE(reduced_bw_ul_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void reduced_max_bw_f_rx_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("reducedBW-DL-r16", reduced_bw_dl_r16.to_string());
  j.write_str("reducedBW-UL-r16", reduced_bw_ul_r16.to_string());
  j.end_obj();
}

// ReducedMaxCCs-r16 ::= SEQUENCE
SRSASN_CODE reduced_max_ccs_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, reduced_ccs_dl_r16, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(pack_integer(bref, reduced_ccs_ul_r16, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE reduced_max_ccs_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(reduced_ccs_dl_r16, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(unpack_integer(reduced_ccs_ul_r16, bref, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
void reduced_max_ccs_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("reducedCCsDL-r16", reduced_ccs_dl_r16);
  j.write_int("reducedCCsUL-r16", reduced_ccs_ul_r16);
  j.end_obj();
}

// SIB-Type-r17 ::= ENUMERATED
const char* sib_type_r17_opts::to_string() const
{
  static const char* names[] = {"sibType2",
                                "sibType3",
                                "sibType4",
                                "sibType5",
                                "sibType9",
                                "sibType10-v1610",
                                "sibType11-v1610",
                                "sibType12-v1610",
                                "sibType13-v1610",
                                "sibType14-v1610",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "sib_type_r17_e");
}
uint8_t sib_type_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 4, 5, 9, 10, 11, 12, 13, 14};
  return map_enum_number(numbers, 10, value, "sib_type_r17_e");
}

// SL-TrafficPatternInfo-r16 ::= SEQUENCE
SRSASN_CODE sl_traffic_pattern_info_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(traffic_periodicity_r16.pack(bref));
  HANDLE_CODE(pack_integer(bref, timing_offset_r16, (uint16_t)0u, (uint16_t)10239u));
  HANDLE_CODE(msg_size_r16.pack(bref));
  HANDLE_CODE(pack_integer(bref, sl_qos_flow_id_r16, (uint16_t)1u, (uint16_t)2048u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_traffic_pattern_info_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(traffic_periodicity_r16.unpack(bref));
  HANDLE_CODE(unpack_integer(timing_offset_r16, bref, (uint16_t)0u, (uint16_t)10239u));
  HANDLE_CODE(msg_size_r16.unpack(bref));
  HANDLE_CODE(unpack_integer(sl_qos_flow_id_r16, bref, (uint16_t)1u, (uint16_t)2048u));

  return SRSASN_SUCCESS;
}
void sl_traffic_pattern_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("trafficPeriodicity-r16", traffic_periodicity_r16.to_string());
  j.write_int("timingOffset-r16", timing_offset_r16);
  j.write_str("messageSize-r16", msg_size_r16.to_string());
  j.write_int("sl-QoS-FlowIdentity-r16", sl_qos_flow_id_r16);
  j.end_obj();
}

const char* sl_traffic_pattern_info_r16_s::traffic_periodicity_r16_opts::to_string() const
{
  static const char* names[] = {
      "ms20", "ms50", "ms100", "ms200", "ms300", "ms400", "ms500", "ms600", "ms700", "ms800", "ms900", "ms1000"};
  return convert_enum_idx(names, 12, value, "sl_traffic_pattern_info_r16_s::traffic_periodicity_r16_e_");
}
uint16_t sl_traffic_pattern_info_r16_s::traffic_periodicity_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {20, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000};
  return map_enum_number(numbers, 12, value, "sl_traffic_pattern_info_r16_s::traffic_periodicity_r16_e_");
}

// SL-TxResourceReq-v1700 ::= SEQUENCE
SRSASN_CODE sl_tx_res_req_v1700_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_drx_info_from_rx_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_drx_ind_r17_present, 1));

  if (sl_drx_info_from_rx_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_drx_info_from_rx_list_r17, 1, 4));
  }
  if (sl_drx_ind_r17_present) {
    HANDLE_CODE(sl_drx_ind_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_tx_res_req_v1700_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sl_drx_info_from_rx_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_drx_info_from_rx_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_drx_ind_r17_present, 1));

  if (sl_drx_info_from_rx_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_drx_info_from_rx_list_r17, bref, 1, 4));
  }
  if (sl_drx_ind_r17_present) {
    HANDLE_CODE(sl_drx_ind_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_tx_res_req_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_drx_info_from_rx_list_r17.size() > 0) {
    j.start_array("sl-DRX-InfoFromRxList-r17");
    for (const auto& e1 : sl_drx_info_from_rx_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_drx_ind_r17_present) {
    j.write_str("sl-DRX-Indication-r17", sl_drx_ind_r17.to_string());
  }
  j.end_obj();
}

const char* sl_tx_res_req_v1700_s::sl_drx_ind_r17_opts::to_string() const
{
  static const char* names[] = {"on", "off"};
  return convert_enum_idx(names, 2, value, "sl_tx_res_req_v1700_s::sl_drx_ind_r17_e_");
}

// SL-TxResourceReqCommRelay-r17 ::= CHOICE
void sl_tx_res_req_comm_relay_r17_c::destroy_()
{
  switch (type_) {
    case types::sl_tx_res_req_l2_u2_n_relay_r17:
      c.destroy<sl_tx_res_req_l2_u2_n_relay_r17_s>();
      break;
    case types::sl_tx_res_req_l3_u2_n_relay_r17:
      c.destroy<sl_tx_res_req_r16_s>();
      break;
    default:
      break;
  }
}
void sl_tx_res_req_comm_relay_r17_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::sl_tx_res_req_l2_u2_n_relay_r17:
      c.init<sl_tx_res_req_l2_u2_n_relay_r17_s>();
      break;
    case types::sl_tx_res_req_l3_u2_n_relay_r17:
      c.init<sl_tx_res_req_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_tx_res_req_comm_relay_r17_c");
  }
}
sl_tx_res_req_comm_relay_r17_c::sl_tx_res_req_comm_relay_r17_c(const sl_tx_res_req_comm_relay_r17_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sl_tx_res_req_l2_u2_n_relay_r17:
      c.init(other.c.get<sl_tx_res_req_l2_u2_n_relay_r17_s>());
      break;
    case types::sl_tx_res_req_l3_u2_n_relay_r17:
      c.init(other.c.get<sl_tx_res_req_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_tx_res_req_comm_relay_r17_c");
  }
}
sl_tx_res_req_comm_relay_r17_c& sl_tx_res_req_comm_relay_r17_c::operator=(const sl_tx_res_req_comm_relay_r17_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sl_tx_res_req_l2_u2_n_relay_r17:
      c.set(other.c.get<sl_tx_res_req_l2_u2_n_relay_r17_s>());
      break;
    case types::sl_tx_res_req_l3_u2_n_relay_r17:
      c.set(other.c.get<sl_tx_res_req_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_tx_res_req_comm_relay_r17_c");
  }

  return *this;
}
sl_tx_res_req_l2_u2_n_relay_r17_s& sl_tx_res_req_comm_relay_r17_c::set_sl_tx_res_req_l2_u2_n_relay_r17()
{
  set(types::sl_tx_res_req_l2_u2_n_relay_r17);
  return c.get<sl_tx_res_req_l2_u2_n_relay_r17_s>();
}
sl_tx_res_req_r16_s& sl_tx_res_req_comm_relay_r17_c::set_sl_tx_res_req_l3_u2_n_relay_r17()
{
  set(types::sl_tx_res_req_l3_u2_n_relay_r17);
  return c.get<sl_tx_res_req_r16_s>();
}
void sl_tx_res_req_comm_relay_r17_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sl_tx_res_req_l2_u2_n_relay_r17:
      j.write_fieldname("sl-TxResourceReqL2U2N-Relay-r17");
      c.get<sl_tx_res_req_l2_u2_n_relay_r17_s>().to_json(j);
      break;
    case types::sl_tx_res_req_l3_u2_n_relay_r17:
      j.write_fieldname("sl-TxResourceReqL3U2N-Relay-r17");
      c.get<sl_tx_res_req_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "sl_tx_res_req_comm_relay_r17_c");
  }
  j.end_obj();
}
SRSASN_CODE sl_tx_res_req_comm_relay_r17_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sl_tx_res_req_l2_u2_n_relay_r17:
      HANDLE_CODE(c.get<sl_tx_res_req_l2_u2_n_relay_r17_s>().pack(bref));
      break;
    case types::sl_tx_res_req_l3_u2_n_relay_r17:
      HANDLE_CODE(c.get<sl_tx_res_req_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_tx_res_req_comm_relay_r17_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_tx_res_req_comm_relay_r17_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sl_tx_res_req_l2_u2_n_relay_r17:
      HANDLE_CODE(c.get<sl_tx_res_req_l2_u2_n_relay_r17_s>().unpack(bref));
      break;
    case types::sl_tx_res_req_l3_u2_n_relay_r17:
      HANDLE_CODE(c.get<sl_tx_res_req_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_tx_res_req_comm_relay_r17_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_tx_res_req_comm_relay_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"sl-TxResourceReqL2U2N-Relay-r17", "sl-TxResourceReqL3U2N-Relay-r17"};
  return convert_enum_idx(names, 2, value, "sl_tx_res_req_comm_relay_r17_c::types");
}
uint8_t sl_tx_res_req_comm_relay_r17_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3};
  return map_enum_number(numbers, 2, value, "sl_tx_res_req_comm_relay_r17_c::types");
}

// UE-MeasurementsAvailable-r16 ::= SEQUENCE
SRSASN_CODE ue_meass_available_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(log_meas_available_r16_present, 1));
  HANDLE_CODE(bref.pack(log_meas_available_bt_r16_present, 1));
  HANDLE_CODE(bref.pack(log_meas_available_wlan_r16_present, 1));
  HANDLE_CODE(bref.pack(conn_est_fail_info_available_r16_present, 1));
  HANDLE_CODE(bref.pack(rlf_info_available_r16_present, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= success_ho_info_available_r17_present;
    group_flags[0] |= sig_log_meas_cfg_available_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(success_ho_info_available_r17_present, 1));
      HANDLE_CODE(bref.pack(sig_log_meas_cfg_available_r17_present, 1));
      if (sig_log_meas_cfg_available_r17_present) {
        HANDLE_CODE(bref.pack(sig_log_meas_cfg_available_r17, 1));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_meass_available_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(log_meas_available_r16_present, 1));
  HANDLE_CODE(bref.unpack(log_meas_available_bt_r16_present, 1));
  HANDLE_CODE(bref.unpack(log_meas_available_wlan_r16_present, 1));
  HANDLE_CODE(bref.unpack(conn_est_fail_info_available_r16_present, 1));
  HANDLE_CODE(bref.unpack(rlf_info_available_r16_present, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(success_ho_info_available_r17_present, 1));
      HANDLE_CODE(bref.unpack(sig_log_meas_cfg_available_r17_present, 1));
      if (sig_log_meas_cfg_available_r17_present) {
        HANDLE_CODE(bref.unpack(sig_log_meas_cfg_available_r17, 1));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void ue_meass_available_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (log_meas_available_r16_present) {
    j.write_str("logMeasAvailable-r16", "true");
  }
  if (log_meas_available_bt_r16_present) {
    j.write_str("logMeasAvailableBT-r16", "true");
  }
  if (log_meas_available_wlan_r16_present) {
    j.write_str("logMeasAvailableWLAN-r16", "true");
  }
  if (conn_est_fail_info_available_r16_present) {
    j.write_str("connEstFailInfoAvailable-r16", "true");
  }
  if (rlf_info_available_r16_present) {
    j.write_str("rlf-InfoAvailable-r16", "true");
  }
  if (ext) {
    if (success_ho_info_available_r17_present) {
      j.write_str("successHO-InfoAvailable-r17", "true");
    }
    if (sig_log_meas_cfg_available_r17_present) {
      j.write_bool("sigLogMeasConfigAvailable-r17", sig_log_meas_cfg_available_r17);
    }
  }
  j.end_obj();
}

// UL-GapFR2-Preference-r17 ::= SEQUENCE
SRSASN_CODE ul_gap_fr2_pref_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_gap_fr2_pattern_pref_r17_present, 1));

  if (ul_gap_fr2_pattern_pref_r17_present) {
    HANDLE_CODE(pack_integer(bref, ul_gap_fr2_pattern_pref_r17, (uint8_t)0u, (uint8_t)3u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_gap_fr2_pref_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ul_gap_fr2_pattern_pref_r17_present, 1));

  if (ul_gap_fr2_pattern_pref_r17_present) {
    HANDLE_CODE(unpack_integer(ul_gap_fr2_pattern_pref_r17, bref, (uint8_t)0u, (uint8_t)3u));
  }

  return SRSASN_SUCCESS;
}
void ul_gap_fr2_pref_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_gap_fr2_pattern_pref_r17_present) {
    j.write_int("ul-GapFR2-PatternPreference-r17", ul_gap_fr2_pattern_pref_r17);
  }
  j.end_obj();
}

// UplinkTxDirectCurrentBWP ::= SEQUENCE
SRSASN_CODE ul_tx_direct_current_bwp_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, bwp_id, (uint8_t)0u, (uint8_t)4u));
  HANDLE_CODE(bref.pack(shift7dot5k_hz, 1));
  HANDLE_CODE(pack_integer(bref, tx_direct_current_location, (uint16_t)0u, (uint16_t)3301u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_tx_direct_current_bwp_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(bwp_id, bref, (uint8_t)0u, (uint8_t)4u));
  HANDLE_CODE(bref.unpack(shift7dot5k_hz, 1));
  HANDLE_CODE(unpack_integer(tx_direct_current_location, bref, (uint16_t)0u, (uint16_t)3301u));

  return SRSASN_SUCCESS;
}
void ul_tx_direct_current_bwp_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("bwp-Id", bwp_id);
  j.write_bool("shift7dot5kHz", shift7dot5k_hz);
  j.write_int("txDirectCurrentLocation", tx_direct_current_location);
  j.end_obj();
}

// ChoCandidateCell-r17 ::= CHOICE
void cho_candidate_cell_r17_c::destroy_()
{
  switch (type_) {
    case types::cell_global_id_r17:
      c.destroy<cgi_info_logging_r16_s>();
      break;
    case types::pci_arfcn_r17:
      c.destroy<pci_arfcn_nr_r16_s>();
      break;
    default:
      break;
  }
}
void cho_candidate_cell_r17_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::cell_global_id_r17:
      c.init<cgi_info_logging_r16_s>();
      break;
    case types::pci_arfcn_r17:
      c.init<pci_arfcn_nr_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cho_candidate_cell_r17_c");
  }
}
cho_candidate_cell_r17_c::cho_candidate_cell_r17_c(const cho_candidate_cell_r17_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::cell_global_id_r17:
      c.init(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::pci_arfcn_r17:
      c.init(other.c.get<pci_arfcn_nr_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cho_candidate_cell_r17_c");
  }
}
cho_candidate_cell_r17_c& cho_candidate_cell_r17_c::operator=(const cho_candidate_cell_r17_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::cell_global_id_r17:
      c.set(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::pci_arfcn_r17:
      c.set(other.c.get<pci_arfcn_nr_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cho_candidate_cell_r17_c");
  }

  return *this;
}
cgi_info_logging_r16_s& cho_candidate_cell_r17_c::set_cell_global_id_r17()
{
  set(types::cell_global_id_r17);
  return c.get<cgi_info_logging_r16_s>();
}
pci_arfcn_nr_r16_s& cho_candidate_cell_r17_c::set_pci_arfcn_r17()
{
  set(types::pci_arfcn_r17);
  return c.get<pci_arfcn_nr_r16_s>();
}
void cho_candidate_cell_r17_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cell_global_id_r17:
      j.write_fieldname("cellGlobalId-r17");
      c.get<cgi_info_logging_r16_s>().to_json(j);
      break;
    case types::pci_arfcn_r17:
      j.write_fieldname("pci-arfcn-r17");
      c.get<pci_arfcn_nr_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "cho_candidate_cell_r17_c");
  }
  j.end_obj();
}
SRSASN_CODE cho_candidate_cell_r17_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cell_global_id_r17:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().pack(bref));
      break;
    case types::pci_arfcn_r17:
      HANDLE_CODE(c.get<pci_arfcn_nr_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cho_candidate_cell_r17_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cho_candidate_cell_r17_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cell_global_id_r17:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().unpack(bref));
      break;
    case types::pci_arfcn_r17:
      HANDLE_CODE(c.get<pci_arfcn_nr_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cho_candidate_cell_r17_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cho_candidate_cell_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"cellGlobalId-r17", "pci-arfcn-r17"};
  return convert_enum_idx(names, 2, value, "cho_candidate_cell_r17_c::types");
}

// ConnEstFailReport-r16 ::= SEQUENCE
SRSASN_CODE conn_est_fail_report_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(location_info_r16_present, 1));

  HANDLE_CODE(meas_result_failed_cell_r16.pack(bref));
  if (location_info_r16_present) {
    HANDLE_CODE(location_info_r16.pack(bref));
  }
  HANDLE_CODE(bref.pack(meas_result_neigh_cells_r16.meas_result_neigh_cell_list_nr.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_result_neigh_cells_r16.meas_result_neigh_cell_list_eutra.size() > 0, 1));
  if (meas_result_neigh_cells_r16.meas_result_neigh_cell_list_nr.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_neigh_cells_r16.meas_result_neigh_cell_list_nr, 1, 8));
  }
  if (meas_result_neigh_cells_r16.meas_result_neigh_cell_list_eutra.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_neigh_cells_r16.meas_result_neigh_cell_list_eutra, 1, 8));
  }
  HANDLE_CODE(pack_integer(bref, nof_conn_fail_r16, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(pack_dyn_seq_of(bref, per_ra_info_list_r16, 1, 200));
  HANDLE_CODE(pack_integer(bref, time_since_fail_r16, (uint32_t)0u, (uint32_t)172800u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE conn_est_fail_report_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(location_info_r16_present, 1));

  HANDLE_CODE(meas_result_failed_cell_r16.unpack(bref));
  if (location_info_r16_present) {
    HANDLE_CODE(location_info_r16.unpack(bref));
  }
  bool meas_result_neigh_cell_list_nr_present;
  HANDLE_CODE(bref.unpack(meas_result_neigh_cell_list_nr_present, 1));
  bool meas_result_neigh_cell_list_eutra_present;
  HANDLE_CODE(bref.unpack(meas_result_neigh_cell_list_eutra_present, 1));
  if (meas_result_neigh_cell_list_nr_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_neigh_cells_r16.meas_result_neigh_cell_list_nr, bref, 1, 8));
  }
  if (meas_result_neigh_cell_list_eutra_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_neigh_cells_r16.meas_result_neigh_cell_list_eutra, bref, 1, 8));
  }
  HANDLE_CODE(unpack_integer(nof_conn_fail_r16, bref, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(unpack_dyn_seq_of(per_ra_info_list_r16, bref, 1, 200));
  HANDLE_CODE(unpack_integer(time_since_fail_r16, bref, (uint32_t)0u, (uint32_t)172800u));

  return SRSASN_SUCCESS;
}
void conn_est_fail_report_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("measResultFailedCell-r16");
  meas_result_failed_cell_r16.to_json(j);
  if (location_info_r16_present) {
    j.write_fieldname("locationInfo-r16");
    location_info_r16.to_json(j);
  }
  j.write_fieldname("measResultNeighCells-r16");
  j.start_obj();
  if (meas_result_neigh_cells_r16.meas_result_neigh_cell_list_nr.size() > 0) {
    j.start_array("measResultNeighCellListNR");
    for (const auto& e1 : meas_result_neigh_cells_r16.meas_result_neigh_cell_list_nr) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_result_neigh_cells_r16.meas_result_neigh_cell_list_eutra.size() > 0) {
    j.start_array("measResultNeighCellListEUTRA");
    for (const auto& e1 : meas_result_neigh_cells_r16.meas_result_neigh_cell_list_eutra) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
  j.write_int("numberOfConnFail-r16", nof_conn_fail_r16);
  j.start_array("perRAInfoList-r16");
  for (const auto& e1 : per_ra_info_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_int("timeSinceFailure-r16", time_since_fail_r16);
  j.end_obj();
}

// DRX-Preference-r16 ::= SEQUENCE
SRSASN_CODE drx_pref_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(preferred_drx_inactivity_timer_r16_present, 1));
  HANDLE_CODE(bref.pack(preferred_drx_long_cycle_r16_present, 1));
  HANDLE_CODE(bref.pack(preferred_drx_short_cycle_r16_present, 1));
  HANDLE_CODE(bref.pack(preferred_drx_short_cycle_timer_r16_present, 1));

  if (preferred_drx_inactivity_timer_r16_present) {
    HANDLE_CODE(preferred_drx_inactivity_timer_r16.pack(bref));
  }
  if (preferred_drx_long_cycle_r16_present) {
    HANDLE_CODE(preferred_drx_long_cycle_r16.pack(bref));
  }
  if (preferred_drx_short_cycle_r16_present) {
    HANDLE_CODE(preferred_drx_short_cycle_r16.pack(bref));
  }
  if (preferred_drx_short_cycle_timer_r16_present) {
    HANDLE_CODE(pack_integer(bref, preferred_drx_short_cycle_timer_r16, (uint8_t)1u, (uint8_t)16u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_pref_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(preferred_drx_inactivity_timer_r16_present, 1));
  HANDLE_CODE(bref.unpack(preferred_drx_long_cycle_r16_present, 1));
  HANDLE_CODE(bref.unpack(preferred_drx_short_cycle_r16_present, 1));
  HANDLE_CODE(bref.unpack(preferred_drx_short_cycle_timer_r16_present, 1));

  if (preferred_drx_inactivity_timer_r16_present) {
    HANDLE_CODE(preferred_drx_inactivity_timer_r16.unpack(bref));
  }
  if (preferred_drx_long_cycle_r16_present) {
    HANDLE_CODE(preferred_drx_long_cycle_r16.unpack(bref));
  }
  if (preferred_drx_short_cycle_r16_present) {
    HANDLE_CODE(preferred_drx_short_cycle_r16.unpack(bref));
  }
  if (preferred_drx_short_cycle_timer_r16_present) {
    HANDLE_CODE(unpack_integer(preferred_drx_short_cycle_timer_r16, bref, (uint8_t)1u, (uint8_t)16u));
  }

  return SRSASN_SUCCESS;
}
void drx_pref_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (preferred_drx_inactivity_timer_r16_present) {
    j.write_str("preferredDRX-InactivityTimer-r16", preferred_drx_inactivity_timer_r16.to_string());
  }
  if (preferred_drx_long_cycle_r16_present) {
    j.write_str("preferredDRX-LongCycle-r16", preferred_drx_long_cycle_r16.to_string());
  }
  if (preferred_drx_short_cycle_r16_present) {
    j.write_str("preferredDRX-ShortCycle-r16", preferred_drx_short_cycle_r16.to_string());
  }
  if (preferred_drx_short_cycle_timer_r16_present) {
    j.write_int("preferredDRX-ShortCycleTimer-r16", preferred_drx_short_cycle_timer_r16);
  }
  j.end_obj();
}

const char* drx_pref_r16_s::preferred_drx_inactivity_timer_r16_opts::to_string() const
{
  static const char* names[] = {"ms0",    "ms1",    "ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms8",
                                "ms10",   "ms20",   "ms30",   "ms40",   "ms50",   "ms60",   "ms80",   "ms100",
                                "ms200",  "ms300",  "ms500",  "ms750",  "ms1280", "ms1920", "ms2560", "spare9",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "drx_pref_r16_s::preferred_drx_inactivity_timer_r16_e_");
}
uint16_t drx_pref_r16_s::preferred_drx_inactivity_timer_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {0,  1,  2,  3,   4,   5,   6,   8,   10,   20,   30,  40,
                                     50, 60, 80, 100, 200, 300, 500, 750, 1280, 1920, 2560};
  return map_enum_number(numbers, 23, value, "drx_pref_r16_s::preferred_drx_inactivity_timer_r16_e_");
}

const char* drx_pref_r16_s::preferred_drx_long_cycle_r16_opts::to_string() const
{
  static const char* names[] = {"ms10",   "ms20",   "ms32",   "ms40",    "ms60",    "ms64",    "ms70",    "ms80",
                                "ms128",  "ms160",  "ms256",  "ms320",   "ms512",   "ms640",   "ms1024",  "ms1280",
                                "ms2048", "ms2560", "ms5120", "ms10240", "spare12", "spare11", "spare10", "spare9",
                                "spare8", "spare7", "spare6", "spare5",  "spare4",  "spare3",  "spare2",  "spare1"};
  return convert_enum_idx(names, 32, value, "drx_pref_r16_s::preferred_drx_long_cycle_r16_e_");
}
uint16_t drx_pref_r16_s::preferred_drx_long_cycle_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {10,  20,  32,  40,  60,   64,   70,   80,   128,  160,
                                     256, 320, 512, 640, 1024, 1280, 2048, 2560, 5120, 10240};
  return map_enum_number(numbers, 20, value, "drx_pref_r16_s::preferred_drx_long_cycle_r16_e_");
}

const char* drx_pref_r16_s::preferred_drx_short_cycle_r16_opts::to_string() const
{
  static const char* names[] = {"ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms7",    "ms8",    "ms10",
                                "ms14",   "ms16",   "ms20",   "ms30",   "ms32",   "ms35",   "ms40",   "ms64",
                                "ms80",   "ms128",  "ms160",  "ms256",  "ms320",  "ms512",  "ms640",  "spare9",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "drx_pref_r16_s::preferred_drx_short_cycle_r16_e_");
}
uint16_t drx_pref_r16_s::preferred_drx_short_cycle_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {2,  3,  4,  5,  6,  7,   8,   10,  14,  16,  20, 30,
                                     32, 35, 40, 64, 80, 128, 160, 256, 320, 512, 640};
  return map_enum_number(numbers, 23, value, "drx_pref_r16_s::preferred_drx_short_cycle_r16_e_");
}

// EUTRA-RSTD-Info ::= SEQUENCE
SRSASN_CODE eutra_rstd_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, carrier_freq, (uint32_t)0u, (uint32_t)262143u));
  HANDLE_CODE(pack_integer(bref, meas_prs_offset, (uint8_t)0u, (uint8_t)39u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_rstd_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(carrier_freq, bref, (uint32_t)0u, (uint32_t)262143u));
  HANDLE_CODE(unpack_integer(meas_prs_offset, bref, (uint8_t)0u, (uint8_t)39u));

  return SRSASN_SUCCESS;
}
void eutra_rstd_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq", carrier_freq);
  j.write_int("measPRS-Offset", meas_prs_offset);
  j.end_obj();
}

// IDC-Assistance-r16 ::= SEQUENCE
SRSASN_CODE idc_assist_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(affected_carrier_freq_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(affected_carrier_freq_comb_list_r16.size() > 0, 1));

  if (affected_carrier_freq_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, affected_carrier_freq_list_r16, 1, 128));
  }
  if (affected_carrier_freq_comb_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, affected_carrier_freq_comb_list_r16, 1, 128));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE idc_assist_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool affected_carrier_freq_list_r16_present;
  HANDLE_CODE(bref.unpack(affected_carrier_freq_list_r16_present, 1));
  bool affected_carrier_freq_comb_list_r16_present;
  HANDLE_CODE(bref.unpack(affected_carrier_freq_comb_list_r16_present, 1));

  if (affected_carrier_freq_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(affected_carrier_freq_list_r16, bref, 1, 128));
  }
  if (affected_carrier_freq_comb_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(affected_carrier_freq_comb_list_r16, bref, 1, 128));
  }

  return SRSASN_SUCCESS;
}
void idc_assist_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (affected_carrier_freq_list_r16.size() > 0) {
    j.start_array("affectedCarrierFreqList-r16");
    for (const auto& e1 : affected_carrier_freq_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (affected_carrier_freq_comb_list_r16.size() > 0) {
    j.start_array("affectedCarrierFreqCombList-r16");
    for (const auto& e1 : affected_carrier_freq_comb_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// LogMeasInfo-r16 ::= SEQUENCE
SRSASN_CODE log_meas_info_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(location_info_r16_present, 1));
  HANDLE_CODE(bref.pack(serv_cell_id_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_result_serving_cell_r16_present, 1));
  HANDLE_CODE(bref.pack(any_cell_sel_detected_r16_present, 1));

  if (location_info_r16_present) {
    HANDLE_CODE(location_info_r16.pack(bref));
  }
  HANDLE_CODE(pack_integer(bref, relative_time_stamp_r16, (uint16_t)0u, (uint16_t)7200u));
  if (serv_cell_id_r16_present) {
    HANDLE_CODE(serv_cell_id_r16.pack(bref));
  }
  if (meas_result_serving_cell_r16_present) {
    HANDLE_CODE(meas_result_serving_cell_r16.pack(bref));
  }
  HANDLE_CODE(bref.pack(meas_result_neigh_cells_r16.meas_result_neigh_cell_list_nr.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_result_neigh_cells_r16.meas_result_neigh_cell_list_eutra.size() > 0, 1));
  if (meas_result_neigh_cells_r16.meas_result_neigh_cell_list_nr.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_neigh_cells_r16.meas_result_neigh_cell_list_nr, 1, 8));
  }
  if (meas_result_neigh_cells_r16.meas_result_neigh_cell_list_eutra.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_neigh_cells_r16.meas_result_neigh_cell_list_eutra, 1, 8));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= in_dev_coex_detected_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(in_dev_coex_detected_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE log_meas_info_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(location_info_r16_present, 1));
  HANDLE_CODE(bref.unpack(serv_cell_id_r16_present, 1));
  HANDLE_CODE(bref.unpack(meas_result_serving_cell_r16_present, 1));
  HANDLE_CODE(bref.unpack(any_cell_sel_detected_r16_present, 1));

  if (location_info_r16_present) {
    HANDLE_CODE(location_info_r16.unpack(bref));
  }
  HANDLE_CODE(unpack_integer(relative_time_stamp_r16, bref, (uint16_t)0u, (uint16_t)7200u));
  if (serv_cell_id_r16_present) {
    HANDLE_CODE(serv_cell_id_r16.unpack(bref));
  }
  if (meas_result_serving_cell_r16_present) {
    HANDLE_CODE(meas_result_serving_cell_r16.unpack(bref));
  }
  bool meas_result_neigh_cell_list_nr_present;
  HANDLE_CODE(bref.unpack(meas_result_neigh_cell_list_nr_present, 1));
  bool meas_result_neigh_cell_list_eutra_present;
  HANDLE_CODE(bref.unpack(meas_result_neigh_cell_list_eutra_present, 1));
  if (meas_result_neigh_cell_list_nr_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_neigh_cells_r16.meas_result_neigh_cell_list_nr, bref, 1, 8));
  }
  if (meas_result_neigh_cell_list_eutra_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_neigh_cells_r16.meas_result_neigh_cell_list_eutra, bref, 1, 8));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(in_dev_coex_detected_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void log_meas_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (location_info_r16_present) {
    j.write_fieldname("locationInfo-r16");
    location_info_r16.to_json(j);
  }
  j.write_int("relativeTimeStamp-r16", relative_time_stamp_r16);
  if (serv_cell_id_r16_present) {
    j.write_fieldname("servCellIdentity-r16");
    serv_cell_id_r16.to_json(j);
  }
  if (meas_result_serving_cell_r16_present) {
    j.write_fieldname("measResultServingCell-r16");
    meas_result_serving_cell_r16.to_json(j);
  }
  j.write_fieldname("measResultNeighCells-r16");
  j.start_obj();
  if (meas_result_neigh_cells_r16.meas_result_neigh_cell_list_nr.size() > 0) {
    j.start_array("measResultNeighCellListNR");
    for (const auto& e1 : meas_result_neigh_cells_r16.meas_result_neigh_cell_list_nr) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_result_neigh_cells_r16.meas_result_neigh_cell_list_eutra.size() > 0) {
    j.start_array("measResultNeighCellListEUTRA");
    for (const auto& e1 : meas_result_neigh_cells_r16.meas_result_neigh_cell_list_eutra) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
  if (any_cell_sel_detected_r16_present) {
    j.write_str("anyCellSelectionDetected-r16", "true");
  }
  if (ext) {
    if (in_dev_coex_detected_r17_present) {
      j.write_str("inDeviceCoexDetected-r17", "true");
    }
  }
  j.end_obj();
}

// MaxBW-Preference-r16 ::= SEQUENCE
SRSASN_CODE max_bw_pref_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(reduced_max_bw_fr1_r16_present, 1));
  HANDLE_CODE(bref.pack(reduced_max_bw_fr2_r16_present, 1));

  if (reduced_max_bw_fr1_r16_present) {
    HANDLE_CODE(reduced_max_bw_fr1_r16.pack(bref));
  }
  if (reduced_max_bw_fr2_r16_present) {
    HANDLE_CODE(reduced_max_bw_fr2_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE max_bw_pref_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(reduced_max_bw_fr1_r16_present, 1));
  HANDLE_CODE(bref.unpack(reduced_max_bw_fr2_r16_present, 1));

  if (reduced_max_bw_fr1_r16_present) {
    HANDLE_CODE(reduced_max_bw_fr1_r16.unpack(bref));
  }
  if (reduced_max_bw_fr2_r16_present) {
    HANDLE_CODE(reduced_max_bw_fr2_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void max_bw_pref_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (reduced_max_bw_fr1_r16_present) {
    j.write_fieldname("reducedMaxBW-FR1-r16");
    reduced_max_bw_fr1_r16.to_json(j);
  }
  if (reduced_max_bw_fr2_r16_present) {
    j.write_fieldname("reducedMaxBW-FR2-r16");
    reduced_max_bw_fr2_r16.to_json(j);
  }
  j.end_obj();
}

// MaxCC-Preference-r16 ::= SEQUENCE
SRSASN_CODE max_cc_pref_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(reduced_max_ccs_r16_present, 1));

  if (reduced_max_ccs_r16_present) {
    HANDLE_CODE(reduced_max_ccs_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE max_cc_pref_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(reduced_max_ccs_r16_present, 1));

  if (reduced_max_ccs_r16_present) {
    HANDLE_CODE(reduced_max_ccs_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void max_cc_pref_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (reduced_max_ccs_r16_present) {
    j.write_fieldname("reducedMaxCCs-r16");
    reduced_max_ccs_r16.to_json(j);
  }
  j.end_obj();
}

// MaxMIMO-LayerPreference-r16 ::= SEQUENCE
SRSASN_CODE max_mimo_layer_pref_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(reduced_max_mimo_layers_fr1_r16_present, 1));
  HANDLE_CODE(bref.pack(reduced_max_mimo_layers_fr2_r16_present, 1));

  if (reduced_max_mimo_layers_fr1_r16_present) {
    HANDLE_CODE(
        pack_integer(bref, reduced_max_mimo_layers_fr1_r16.reduced_mimo_layers_fr1_dl_r16, (uint8_t)1u, (uint8_t)8u));
    HANDLE_CODE(
        pack_integer(bref, reduced_max_mimo_layers_fr1_r16.reduced_mimo_layers_fr1_ul_r16, (uint8_t)1u, (uint8_t)4u));
  }
  if (reduced_max_mimo_layers_fr2_r16_present) {
    HANDLE_CODE(
        pack_integer(bref, reduced_max_mimo_layers_fr2_r16.reduced_mimo_layers_fr2_dl_r16, (uint8_t)1u, (uint8_t)8u));
    HANDLE_CODE(
        pack_integer(bref, reduced_max_mimo_layers_fr2_r16.reduced_mimo_layers_fr2_ul_r16, (uint8_t)1u, (uint8_t)4u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE max_mimo_layer_pref_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(reduced_max_mimo_layers_fr1_r16_present, 1));
  HANDLE_CODE(bref.unpack(reduced_max_mimo_layers_fr2_r16_present, 1));

  if (reduced_max_mimo_layers_fr1_r16_present) {
    HANDLE_CODE(
        unpack_integer(reduced_max_mimo_layers_fr1_r16.reduced_mimo_layers_fr1_dl_r16, bref, (uint8_t)1u, (uint8_t)8u));
    HANDLE_CODE(
        unpack_integer(reduced_max_mimo_layers_fr1_r16.reduced_mimo_layers_fr1_ul_r16, bref, (uint8_t)1u, (uint8_t)4u));
  }
  if (reduced_max_mimo_layers_fr2_r16_present) {
    HANDLE_CODE(
        unpack_integer(reduced_max_mimo_layers_fr2_r16.reduced_mimo_layers_fr2_dl_r16, bref, (uint8_t)1u, (uint8_t)8u));
    HANDLE_CODE(
        unpack_integer(reduced_max_mimo_layers_fr2_r16.reduced_mimo_layers_fr2_ul_r16, bref, (uint8_t)1u, (uint8_t)4u));
  }

  return SRSASN_SUCCESS;
}
void max_mimo_layer_pref_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (reduced_max_mimo_layers_fr1_r16_present) {
    j.write_fieldname("reducedMaxMIMO-LayersFR1-r16");
    j.start_obj();
    j.write_int("reducedMIMO-LayersFR1-DL-r16", reduced_max_mimo_layers_fr1_r16.reduced_mimo_layers_fr1_dl_r16);
    j.write_int("reducedMIMO-LayersFR1-UL-r16", reduced_max_mimo_layers_fr1_r16.reduced_mimo_layers_fr1_ul_r16);
    j.end_obj();
  }
  if (reduced_max_mimo_layers_fr2_r16_present) {
    j.write_fieldname("reducedMaxMIMO-LayersFR2-r16");
    j.start_obj();
    j.write_int("reducedMIMO-LayersFR2-DL-r16", reduced_max_mimo_layers_fr2_r16.reduced_mimo_layers_fr2_dl_r16);
    j.write_int("reducedMIMO-LayersFR2-UL-r16", reduced_max_mimo_layers_fr2_r16.reduced_mimo_layers_fr2_ul_r16);
    j.end_obj();
  }
  j.end_obj();
}

// MeasResult2EUTRA ::= SEQUENCE
SRSASN_CODE meas_result2_eutra_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_result_serving_cell_present, 1));
  HANDLE_CODE(bref.pack(meas_result_best_neigh_cell_present, 1));

  HANDLE_CODE(pack_integer(bref, carrier_freq, (uint32_t)0u, (uint32_t)262143u));
  if (meas_result_serving_cell_present) {
    HANDLE_CODE(meas_result_serving_cell.pack(bref));
  }
  if (meas_result_best_neigh_cell_present) {
    HANDLE_CODE(meas_result_best_neigh_cell.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result2_eutra_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(meas_result_serving_cell_present, 1));
  HANDLE_CODE(bref.unpack(meas_result_best_neigh_cell_present, 1));

  HANDLE_CODE(unpack_integer(carrier_freq, bref, (uint32_t)0u, (uint32_t)262143u));
  if (meas_result_serving_cell_present) {
    HANDLE_CODE(meas_result_serving_cell.unpack(bref));
  }
  if (meas_result_best_neigh_cell_present) {
    HANDLE_CODE(meas_result_best_neigh_cell.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_result2_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq", carrier_freq);
  if (meas_result_serving_cell_present) {
    j.write_fieldname("measResultServingCell");
    meas_result_serving_cell.to_json(j);
  }
  if (meas_result_best_neigh_cell_present) {
    j.write_fieldname("measResultBestNeighCell");
    meas_result_best_neigh_cell.to_json(j);
  }
  j.end_obj();
}

// MeasResult2NR ::= SEQUENCE
SRSASN_CODE meas_result2_nr_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ssb_freq_present, 1));
  HANDLE_CODE(bref.pack(ref_freq_csi_rs_present, 1));
  HANDLE_CODE(bref.pack(meas_result_serving_cell_present, 1));
  HANDLE_CODE(bref.pack(meas_result_neigh_cell_list_nr.size() > 0, 1));

  if (ssb_freq_present) {
    HANDLE_CODE(pack_integer(bref, ssb_freq, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (ref_freq_csi_rs_present) {
    HANDLE_CODE(pack_integer(bref, ref_freq_csi_rs, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (meas_result_serving_cell_present) {
    HANDLE_CODE(meas_result_serving_cell.pack(bref));
  }
  if (meas_result_neigh_cell_list_nr.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_neigh_cell_list_nr, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result2_nr_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ssb_freq_present, 1));
  HANDLE_CODE(bref.unpack(ref_freq_csi_rs_present, 1));
  HANDLE_CODE(bref.unpack(meas_result_serving_cell_present, 1));
  bool meas_result_neigh_cell_list_nr_present;
  HANDLE_CODE(bref.unpack(meas_result_neigh_cell_list_nr_present, 1));

  if (ssb_freq_present) {
    HANDLE_CODE(unpack_integer(ssb_freq, bref, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (ref_freq_csi_rs_present) {
    HANDLE_CODE(unpack_integer(ref_freq_csi_rs, bref, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (meas_result_serving_cell_present) {
    HANDLE_CODE(meas_result_serving_cell.unpack(bref));
  }
  if (meas_result_neigh_cell_list_nr_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_neigh_cell_list_nr, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void meas_result2_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ssb_freq_present) {
    j.write_int("ssbFrequency", ssb_freq);
  }
  if (ref_freq_csi_rs_present) {
    j.write_int("refFreqCSI-RS", ref_freq_csi_rs);
  }
  if (meas_result_serving_cell_present) {
    j.write_fieldname("measResultServingCell");
    meas_result_serving_cell.to_json(j);
  }
  if (meas_result_neigh_cell_list_nr.size() > 0) {
    j.start_array("measResultNeighCellListNR");
    for (const auto& e1 : meas_result_neigh_cell_list_nr) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// MeasResult2UTRA-FDD-r16 ::= SEQUENCE
SRSASN_CODE meas_result2_utra_fdd_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, carrier_freq_r16, (uint16_t)0u, (uint16_t)16383u));
  HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_neigh_cell_list_r16, 1, 8));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result2_utra_fdd_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(carrier_freq_r16, bref, (uint16_t)0u, (uint16_t)16383u));
  HANDLE_CODE(unpack_dyn_seq_of(meas_result_neigh_cell_list_r16, bref, 1, 8));

  return SRSASN_SUCCESS;
}
void meas_result2_utra_fdd_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq-r16", carrier_freq_r16);
  j.start_array("measResultNeighCellList-r16");
  for (const auto& e1 : meas_result_neigh_cell_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// MeasResultCellSFTD-NR ::= SEQUENCE
SRSASN_CODE meas_result_cell_sftd_nr_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rsrp_result_present, 1));

  HANDLE_CODE(pack_integer(bref, pci, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(pack_integer(bref, sfn_offset_result, (uint16_t)0u, (uint16_t)1023u));
  HANDLE_CODE(pack_integer(bref, frame_boundary_offset_result, (int16_t)-30720, (int16_t)30719));
  if (rsrp_result_present) {
    HANDLE_CODE(pack_integer(bref, rsrp_result, (uint8_t)0u, (uint8_t)127u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_cell_sftd_nr_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(rsrp_result_present, 1));

  HANDLE_CODE(unpack_integer(pci, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(unpack_integer(sfn_offset_result, bref, (uint16_t)0u, (uint16_t)1023u));
  HANDLE_CODE(unpack_integer(frame_boundary_offset_result, bref, (int16_t)-30720, (int16_t)30719));
  if (rsrp_result_present) {
    HANDLE_CODE(unpack_integer(rsrp_result, bref, (uint8_t)0u, (uint8_t)127u));
  }

  return SRSASN_SUCCESS;
}
void meas_result_cell_sftd_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId", pci);
  j.write_int("sfn-OffsetResult", sfn_offset_result);
  j.write_int("frameBoundaryOffsetResult", frame_boundary_offset_result);
  if (rsrp_result_present) {
    j.write_int("rsrp-Result", rsrp_result);
  }
  j.end_obj();
}

// MeasResultNR-SL-r16 ::= SEQUENCE
SRSASN_CODE meas_result_nr_sl_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_list_cbr_nr_r16, 1, 8));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_nr_sl_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_dyn_seq_of(meas_result_list_cbr_nr_r16, bref, 1, 8));

  return SRSASN_SUCCESS;
}
void meas_result_nr_sl_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("measResultListCBR-NR-r16");
  for (const auto& e1 : meas_result_list_cbr_nr_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// MeasResultServMO ::= SEQUENCE
SRSASN_CODE meas_result_serv_mo_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_result_best_neigh_cell_present, 1));

  HANDLE_CODE(pack_integer(bref, serv_cell_id, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(meas_result_serving_cell.pack(bref));
  if (meas_result_best_neigh_cell_present) {
    HANDLE_CODE(meas_result_best_neigh_cell.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_serv_mo_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(meas_result_best_neigh_cell_present, 1));

  HANDLE_CODE(unpack_integer(serv_cell_id, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(meas_result_serving_cell.unpack(bref));
  if (meas_result_best_neigh_cell_present) {
    HANDLE_CODE(meas_result_best_neigh_cell.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_result_serv_mo_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("servCellId", serv_cell_id);
  j.write_fieldname("measResultServingCell");
  meas_result_serving_cell.to_json(j);
  if (meas_result_best_neigh_cell_present) {
    j.write_fieldname("measResultBestNeighCell");
    meas_result_best_neigh_cell.to_json(j);
  }
  j.end_obj();
}

// MeasResultSuccessHONR-r17 ::= SEQUENCE
SRSASN_CODE meas_result_success_ho_nr_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_result_r17.cell_results_r17.results_ssb_cell_r17_present, 1));
  HANDLE_CODE(bref.pack(meas_result_r17.cell_results_r17.results_csi_rs_cell_r17_present, 1));
  if (meas_result_r17.cell_results_r17.results_ssb_cell_r17_present) {
    HANDLE_CODE(meas_result_r17.cell_results_r17.results_ssb_cell_r17.pack(bref));
  }
  if (meas_result_r17.cell_results_r17.results_csi_rs_cell_r17_present) {
    HANDLE_CODE(meas_result_r17.cell_results_r17.results_csi_rs_cell_r17.pack(bref));
  }
  HANDLE_CODE(bref.pack(meas_result_r17.rs_idx_results_r17.results_ssb_idxes_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_result_r17.rs_idx_results_r17.results_csi_rs_idxes_r17.size() > 0, 1));
  if (meas_result_r17.rs_idx_results_r17.results_ssb_idxes_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_r17.rs_idx_results_r17.results_ssb_idxes_r17, 1, 64));
  }
  if (meas_result_r17.rs_idx_results_r17.results_csi_rs_idxes_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_r17.rs_idx_results_r17.results_csi_rs_idxes_r17, 1, 64));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_success_ho_nr_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_result_r17.cell_results_r17.results_ssb_cell_r17_present, 1));
  HANDLE_CODE(bref.unpack(meas_result_r17.cell_results_r17.results_csi_rs_cell_r17_present, 1));
  if (meas_result_r17.cell_results_r17.results_ssb_cell_r17_present) {
    HANDLE_CODE(meas_result_r17.cell_results_r17.results_ssb_cell_r17.unpack(bref));
  }
  if (meas_result_r17.cell_results_r17.results_csi_rs_cell_r17_present) {
    HANDLE_CODE(meas_result_r17.cell_results_r17.results_csi_rs_cell_r17.unpack(bref));
  }
  bool results_ssb_idxes_r17_present;
  HANDLE_CODE(bref.unpack(results_ssb_idxes_r17_present, 1));
  bool results_csi_rs_idxes_r17_present;
  HANDLE_CODE(bref.unpack(results_csi_rs_idxes_r17_present, 1));
  if (results_ssb_idxes_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_r17.rs_idx_results_r17.results_ssb_idxes_r17, bref, 1, 64));
  }
  if (results_csi_rs_idxes_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_r17.rs_idx_results_r17.results_csi_rs_idxes_r17, bref, 1, 64));
  }

  return SRSASN_SUCCESS;
}
void meas_result_success_ho_nr_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("measResult-r17");
  j.start_obj();
  j.write_fieldname("cellResults-r17");
  j.start_obj();
  if (meas_result_r17.cell_results_r17.results_ssb_cell_r17_present) {
    j.write_fieldname("resultsSSB-Cell-r17");
    meas_result_r17.cell_results_r17.results_ssb_cell_r17.to_json(j);
  }
  if (meas_result_r17.cell_results_r17.results_csi_rs_cell_r17_present) {
    j.write_fieldname("resultsCSI-RS-Cell-r17");
    meas_result_r17.cell_results_r17.results_csi_rs_cell_r17.to_json(j);
  }
  j.end_obj();
  j.write_fieldname("rsIndexResults-r17");
  j.start_obj();
  if (meas_result_r17.rs_idx_results_r17.results_ssb_idxes_r17.size() > 0) {
    j.start_array("resultsSSB-Indexes-r17");
    for (const auto& e1 : meas_result_r17.rs_idx_results_r17.results_ssb_idxes_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_result_r17.rs_idx_results_r17.results_csi_rs_idxes_r17.size() > 0) {
    j.start_array("resultsCSI-RS-Indexes-r17");
    for (const auto& e1 : meas_result_r17.rs_idx_results_r17.results_csi_rs_idxes_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
  j.end_obj();
  j.end_obj();
}

// MeasResultsPerCarrierIdleEUTRA-r16 ::= SEQUENCE
SRSASN_CODE meas_results_per_carrier_idle_eutra_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, carrier_freq_eutra_r16, (uint32_t)0u, (uint32_t)262143u));
  HANDLE_CODE(pack_dyn_seq_of(bref, meas_results_per_cell_list_idle_eutra_r16, 1, 8));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_results_per_carrier_idle_eutra_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(carrier_freq_eutra_r16, bref, (uint32_t)0u, (uint32_t)262143u));
  HANDLE_CODE(unpack_dyn_seq_of(meas_results_per_cell_list_idle_eutra_r16, bref, 1, 8));

  return SRSASN_SUCCESS;
}
void meas_results_per_carrier_idle_eutra_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreqEUTRA-r16", carrier_freq_eutra_r16);
  j.start_array("measResultsPerCellListIdleEUTRA-r16");
  for (const auto& e1 : meas_results_per_cell_list_idle_eutra_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// MeasResultsPerCarrierIdleNR-r16 ::= SEQUENCE
SRSASN_CODE meas_results_per_carrier_idle_nr_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, carrier_freq_r16, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(pack_dyn_seq_of(bref, meas_results_per_cell_list_idle_nr_r16, 1, 8));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_results_per_carrier_idle_nr_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(carrier_freq_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(unpack_dyn_seq_of(meas_results_per_cell_list_idle_nr_r16, bref, 1, 8));

  return SRSASN_SUCCESS;
}
void meas_results_per_carrier_idle_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("carrierFreq-r16", carrier_freq_r16);
  j.start_array("measResultsPerCellListIdleNR-r16");
  for (const auto& e1 : meas_results_per_cell_list_idle_nr_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// MinSchedulingOffsetPreference-r16 ::= SEQUENCE
SRSASN_CODE min_sched_offset_pref_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(preferred_k0_r16_present, 1));
  HANDLE_CODE(bref.pack(preferred_k2_r16_present, 1));

  if (preferred_k0_r16_present) {
    HANDLE_CODE(bref.pack(preferred_k0_r16.preferred_k0_scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(preferred_k0_r16.preferred_k0_scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(preferred_k0_r16.preferred_k0_scs_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(preferred_k0_r16.preferred_k0_scs_120k_hz_r16_present, 1));
    if (preferred_k0_r16.preferred_k0_scs_15k_hz_r16_present) {
      HANDLE_CODE(preferred_k0_r16.preferred_k0_scs_15k_hz_r16.pack(bref));
    }
    if (preferred_k0_r16.preferred_k0_scs_30k_hz_r16_present) {
      HANDLE_CODE(preferred_k0_r16.preferred_k0_scs_30k_hz_r16.pack(bref));
    }
    if (preferred_k0_r16.preferred_k0_scs_60k_hz_r16_present) {
      HANDLE_CODE(preferred_k0_r16.preferred_k0_scs_60k_hz_r16.pack(bref));
    }
    if (preferred_k0_r16.preferred_k0_scs_120k_hz_r16_present) {
      HANDLE_CODE(preferred_k0_r16.preferred_k0_scs_120k_hz_r16.pack(bref));
    }
  }
  if (preferred_k2_r16_present) {
    HANDLE_CODE(bref.pack(preferred_k2_r16.preferred_k2_scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(preferred_k2_r16.preferred_k2_scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(preferred_k2_r16.preferred_k2_scs_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(preferred_k2_r16.preferred_k2_scs_120k_hz_r16_present, 1));
    if (preferred_k2_r16.preferred_k2_scs_15k_hz_r16_present) {
      HANDLE_CODE(preferred_k2_r16.preferred_k2_scs_15k_hz_r16.pack(bref));
    }
    if (preferred_k2_r16.preferred_k2_scs_30k_hz_r16_present) {
      HANDLE_CODE(preferred_k2_r16.preferred_k2_scs_30k_hz_r16.pack(bref));
    }
    if (preferred_k2_r16.preferred_k2_scs_60k_hz_r16_present) {
      HANDLE_CODE(preferred_k2_r16.preferred_k2_scs_60k_hz_r16.pack(bref));
    }
    if (preferred_k2_r16.preferred_k2_scs_120k_hz_r16_present) {
      HANDLE_CODE(preferred_k2_r16.preferred_k2_scs_120k_hz_r16.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE min_sched_offset_pref_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(preferred_k0_r16_present, 1));
  HANDLE_CODE(bref.unpack(preferred_k2_r16_present, 1));

  if (preferred_k0_r16_present) {
    HANDLE_CODE(bref.unpack(preferred_k0_r16.preferred_k0_scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(preferred_k0_r16.preferred_k0_scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(preferred_k0_r16.preferred_k0_scs_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(preferred_k0_r16.preferred_k0_scs_120k_hz_r16_present, 1));
    if (preferred_k0_r16.preferred_k0_scs_15k_hz_r16_present) {
      HANDLE_CODE(preferred_k0_r16.preferred_k0_scs_15k_hz_r16.unpack(bref));
    }
    if (preferred_k0_r16.preferred_k0_scs_30k_hz_r16_present) {
      HANDLE_CODE(preferred_k0_r16.preferred_k0_scs_30k_hz_r16.unpack(bref));
    }
    if (preferred_k0_r16.preferred_k0_scs_60k_hz_r16_present) {
      HANDLE_CODE(preferred_k0_r16.preferred_k0_scs_60k_hz_r16.unpack(bref));
    }
    if (preferred_k0_r16.preferred_k0_scs_120k_hz_r16_present) {
      HANDLE_CODE(preferred_k0_r16.preferred_k0_scs_120k_hz_r16.unpack(bref));
    }
  }
  if (preferred_k2_r16_present) {
    HANDLE_CODE(bref.unpack(preferred_k2_r16.preferred_k2_scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(preferred_k2_r16.preferred_k2_scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(preferred_k2_r16.preferred_k2_scs_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(preferred_k2_r16.preferred_k2_scs_120k_hz_r16_present, 1));
    if (preferred_k2_r16.preferred_k2_scs_15k_hz_r16_present) {
      HANDLE_CODE(preferred_k2_r16.preferred_k2_scs_15k_hz_r16.unpack(bref));
    }
    if (preferred_k2_r16.preferred_k2_scs_30k_hz_r16_present) {
      HANDLE_CODE(preferred_k2_r16.preferred_k2_scs_30k_hz_r16.unpack(bref));
    }
    if (preferred_k2_r16.preferred_k2_scs_60k_hz_r16_present) {
      HANDLE_CODE(preferred_k2_r16.preferred_k2_scs_60k_hz_r16.unpack(bref));
    }
    if (preferred_k2_r16.preferred_k2_scs_120k_hz_r16_present) {
      HANDLE_CODE(preferred_k2_r16.preferred_k2_scs_120k_hz_r16.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void min_sched_offset_pref_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (preferred_k0_r16_present) {
    j.write_fieldname("preferredK0-r16");
    j.start_obj();
    if (preferred_k0_r16.preferred_k0_scs_15k_hz_r16_present) {
      j.write_str("preferredK0-SCS-15kHz-r16", preferred_k0_r16.preferred_k0_scs_15k_hz_r16.to_string());
    }
    if (preferred_k0_r16.preferred_k0_scs_30k_hz_r16_present) {
      j.write_str("preferredK0-SCS-30kHz-r16", preferred_k0_r16.preferred_k0_scs_30k_hz_r16.to_string());
    }
    if (preferred_k0_r16.preferred_k0_scs_60k_hz_r16_present) {
      j.write_str("preferredK0-SCS-60kHz-r16", preferred_k0_r16.preferred_k0_scs_60k_hz_r16.to_string());
    }
    if (preferred_k0_r16.preferred_k0_scs_120k_hz_r16_present) {
      j.write_str("preferredK0-SCS-120kHz-r16", preferred_k0_r16.preferred_k0_scs_120k_hz_r16.to_string());
    }
    j.end_obj();
  }
  if (preferred_k2_r16_present) {
    j.write_fieldname("preferredK2-r16");
    j.start_obj();
    if (preferred_k2_r16.preferred_k2_scs_15k_hz_r16_present) {
      j.write_str("preferredK2-SCS-15kHz-r16", preferred_k2_r16.preferred_k2_scs_15k_hz_r16.to_string());
    }
    if (preferred_k2_r16.preferred_k2_scs_30k_hz_r16_present) {
      j.write_str("preferredK2-SCS-30kHz-r16", preferred_k2_r16.preferred_k2_scs_30k_hz_r16.to_string());
    }
    if (preferred_k2_r16.preferred_k2_scs_60k_hz_r16_present) {
      j.write_str("preferredK2-SCS-60kHz-r16", preferred_k2_r16.preferred_k2_scs_60k_hz_r16.to_string());
    }
    if (preferred_k2_r16.preferred_k2_scs_120k_hz_r16_present) {
      j.write_str("preferredK2-SCS-120kHz-r16", preferred_k2_r16.preferred_k2_scs_120k_hz_r16.to_string());
    }
    j.end_obj();
  }
  j.end_obj();
}

const char* min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_15k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sl1", "sl2", "sl4", "sl6"};
  return convert_enum_idx(
      names, 4, value, "min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_15k_hz_r16_e_");
}
uint8_t min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_15k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6};
  return map_enum_number(
      numbers, 4, value, "min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_15k_hz_r16_e_");
}

const char* min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_30k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sl1", "sl2", "sl4", "sl6"};
  return convert_enum_idx(
      names, 4, value, "min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_30k_hz_r16_e_");
}
uint8_t min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_30k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6};
  return map_enum_number(
      numbers, 4, value, "min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_30k_hz_r16_e_");
}

const char* min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_60k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sl2", "sl4", "sl8", "sl12"};
  return convert_enum_idx(
      names, 4, value, "min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_60k_hz_r16_e_");
}
uint8_t min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_60k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 12};
  return map_enum_number(
      numbers, 4, value, "min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_60k_hz_r16_e_");
}

const char* min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_120k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sl2", "sl4", "sl8", "sl12"};
  return convert_enum_idx(
      names, 4, value, "min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_120k_hz_r16_e_");
}
uint8_t min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_120k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 12};
  return map_enum_number(
      numbers, 4, value, "min_sched_offset_pref_r16_s::preferred_k0_r16_s_::preferred_k0_scs_120k_hz_r16_e_");
}

const char* min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_15k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sl1", "sl2", "sl4", "sl6"};
  return convert_enum_idx(
      names, 4, value, "min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_15k_hz_r16_e_");
}
uint8_t min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_15k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6};
  return map_enum_number(
      numbers, 4, value, "min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_15k_hz_r16_e_");
}

const char* min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_30k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sl1", "sl2", "sl4", "sl6"};
  return convert_enum_idx(
      names, 4, value, "min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_30k_hz_r16_e_");
}
uint8_t min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_30k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6};
  return map_enum_number(
      numbers, 4, value, "min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_30k_hz_r16_e_");
}

const char* min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_60k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sl2", "sl4", "sl8", "sl12"};
  return convert_enum_idx(
      names, 4, value, "min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_60k_hz_r16_e_");
}
uint8_t min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_60k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 12};
  return map_enum_number(
      numbers, 4, value, "min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_60k_hz_r16_e_");
}

const char* min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_120k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sl2", "sl4", "sl8", "sl12"};
  return convert_enum_idx(
      names, 4, value, "min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_120k_hz_r16_e_");
}
uint8_t min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_120k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 12};
  return map_enum_number(
      numbers, 4, value, "min_sched_offset_pref_r16_s::preferred_k2_r16_s_::preferred_k2_scs_120k_hz_r16_e_");
}

// NR-PRS-MeasurementInfo-r16 ::= SEQUENCE
SRSASN_CODE nr_prs_meas_info_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, dl_prs_point_a_r16, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(nr_meas_prs_repeat_and_offset_r16.pack(bref));
  HANDLE_CODE(nr_meas_prs_len_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE nr_prs_meas_info_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(dl_prs_point_a_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(nr_meas_prs_repeat_and_offset_r16.unpack(bref));
  HANDLE_CODE(nr_meas_prs_len_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void nr_prs_meas_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dl-PRS-PointA-r16", dl_prs_point_a_r16);
  j.write_fieldname("nr-MeasPRS-RepetitionAndOffset-r16");
  nr_meas_prs_repeat_and_offset_r16.to_json(j);
  j.write_str("nr-MeasPRS-length-r16", nr_meas_prs_len_r16.to_string());
  j.end_obj();
}

void nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::destroy_() {}
void nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::nr_meas_prs_repeat_and_offset_r16_c_(
    const nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ms20_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms40_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms80_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms160_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_");
  }
}
nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_&
nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::operator=(
    const nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ms20_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms40_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms80_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms160_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_");
  }

  return *this;
}
uint8_t& nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::set_ms20_r16()
{
  set(types::ms20_r16);
  return c.get<uint8_t>();
}
uint8_t& nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::set_ms40_r16()
{
  set(types::ms40_r16);
  return c.get<uint8_t>();
}
uint8_t& nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::set_ms80_r16()
{
  set(types::ms80_r16);
  return c.get<uint8_t>();
}
uint8_t& nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::set_ms160_r16()
{
  set(types::ms160_r16);
  return c.get<uint8_t>();
}
void nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ms20_r16:
      j.write_int("ms20-r16", c.get<uint8_t>());
      break;
    case types::ms40_r16:
      j.write_int("ms40-r16", c.get<uint8_t>());
      break;
    case types::ms80_r16:
      j.write_int("ms80-r16", c.get<uint8_t>());
      break;
    case types::ms160_r16:
      j.write_int("ms160-r16", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ms20_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms40_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms80_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms160_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)159u));
      break;
    default:
      log_invalid_choice_id(type_, "nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ms20_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms40_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms80_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms160_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)159u));
      break;
    default:
      log_invalid_choice_id(type_, "nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"ms20-r16", "ms40-r16", "ms80-r16", "ms160-r16"};
  return convert_enum_idx(names, 4, value, "nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::types");
}
uint8_t nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {20, 40, 80, 160};
  return map_enum_number(numbers, 4, value, "nr_prs_meas_info_r16_s::nr_meas_prs_repeat_and_offset_r16_c_::types");
}

const char* nr_prs_meas_info_r16_s::nr_meas_prs_len_r16_opts::to_string() const
{
  static const char* names[] = {"ms1dot5", "ms3", "ms3dot5", "ms4", "ms5dot5", "ms6", "ms10", "ms20"};
  return convert_enum_idx(names, 8, value, "nr_prs_meas_info_r16_s::nr_meas_prs_len_r16_e_");
}
float nr_prs_meas_info_r16_s::nr_meas_prs_len_r16_opts::to_number() const
{
  static const float numbers[] = {1.5, 3.0, 3.5, 4.0, 5.5, 6.0, 10.0, 20.0};
  return map_enum_number(numbers, 8, value, "nr_prs_meas_info_r16_s::nr_meas_prs_len_r16_e_");
}
const char* nr_prs_meas_info_r16_s::nr_meas_prs_len_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"1.5", "3", "3.5", "4", "5.5", "6", "10", "20"};
  return convert_enum_idx(number_strs, 8, value, "nr_prs_meas_info_r16_s::nr_meas_prs_len_r16_e_");
}

// NR-TimeStamp-r17 ::= SEQUENCE
SRSASN_CODE nr_time_stamp_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, nr_sfn_r17, (uint16_t)0u, (uint16_t)1023u));
  HANDLE_CODE(nr_slot_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE nr_time_stamp_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(nr_sfn_r17, bref, (uint16_t)0u, (uint16_t)1023u));
  HANDLE_CODE(nr_slot_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void nr_time_stamp_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("nr-SFN-r17", nr_sfn_r17);
  j.write_fieldname("nr-Slot-r17");
  nr_slot_r17.to_json(j);
  j.end_obj();
}

void nr_time_stamp_r17_s::nr_slot_r17_c_::destroy_() {}
void nr_time_stamp_r17_s::nr_slot_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
nr_time_stamp_r17_s::nr_slot_r17_c_::nr_slot_r17_c_(const nr_time_stamp_r17_s::nr_slot_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::scs15_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::scs30_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::scs60_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::scs120_r17:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "nr_time_stamp_r17_s::nr_slot_r17_c_");
  }
}
nr_time_stamp_r17_s::nr_slot_r17_c_&
nr_time_stamp_r17_s::nr_slot_r17_c_::operator=(const nr_time_stamp_r17_s::nr_slot_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::scs15_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::scs30_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::scs60_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::scs120_r17:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "nr_time_stamp_r17_s::nr_slot_r17_c_");
  }

  return *this;
}
uint8_t& nr_time_stamp_r17_s::nr_slot_r17_c_::set_scs15_r17()
{
  set(types::scs15_r17);
  return c.get<uint8_t>();
}
uint8_t& nr_time_stamp_r17_s::nr_slot_r17_c_::set_scs30_r17()
{
  set(types::scs30_r17);
  return c.get<uint8_t>();
}
uint8_t& nr_time_stamp_r17_s::nr_slot_r17_c_::set_scs60_r17()
{
  set(types::scs60_r17);
  return c.get<uint8_t>();
}
uint8_t& nr_time_stamp_r17_s::nr_slot_r17_c_::set_scs120_r17()
{
  set(types::scs120_r17);
  return c.get<uint8_t>();
}
void nr_time_stamp_r17_s::nr_slot_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::scs15_r17:
      j.write_int("scs15-r17", c.get<uint8_t>());
      break;
    case types::scs30_r17:
      j.write_int("scs30-r17", c.get<uint8_t>());
      break;
    case types::scs60_r17:
      j.write_int("scs60-r17", c.get<uint8_t>());
      break;
    case types::scs120_r17:
      j.write_int("scs120-r17", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "nr_time_stamp_r17_s::nr_slot_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE nr_time_stamp_r17_s::nr_slot_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::scs15_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)9u));
      break;
    case types::scs30_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)19u));
      break;
    case types::scs60_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)39u));
      break;
    case types::scs120_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u));
      break;
    default:
      log_invalid_choice_id(type_, "nr_time_stamp_r17_s::nr_slot_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE nr_time_stamp_r17_s::nr_slot_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::scs15_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)9u));
      break;
    case types::scs30_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)19u));
      break;
    case types::scs60_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)39u));
      break;
    case types::scs120_r17:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u));
      break;
    default:
      log_invalid_choice_id(type_, "nr_time_stamp_r17_s::nr_slot_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* nr_time_stamp_r17_s::nr_slot_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"scs15-r17", "scs30-r17", "scs60-r17", "scs120-r17"};
  return convert_enum_idx(names, 4, value, "nr_time_stamp_r17_s::nr_slot_r17_c_::types");
}
uint8_t nr_time_stamp_r17_s::nr_slot_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {15, 30, 60, 120};
  return map_enum_number(numbers, 4, value, "nr_time_stamp_r17_s::nr_slot_r17_c_::types");
}

// RA-InformationCommon-r16 ::= SEQUENCE
SRSASN_CODE ra_info_common_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(msg1_freq_start_r16_present, 1));
  HANDLE_CODE(bref.pack(msg1_freq_start_cfra_r16_present, 1));
  HANDLE_CODE(bref.pack(msg1_subcarrier_spacing_r16_present, 1));
  HANDLE_CODE(bref.pack(msg1_subcarrier_spacing_cfra_r16_present, 1));
  HANDLE_CODE(bref.pack(msg1_fdm_r16_present, 1));
  HANDLE_CODE(bref.pack(msg1_fdmcfra_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, absolute_freq_point_a_r16, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(pack_integer(bref, location_and_bw_r16, (uint16_t)0u, (uint16_t)37949u));
  HANDLE_CODE(subcarrier_spacing_r16.pack(bref));
  if (msg1_freq_start_r16_present) {
    HANDLE_CODE(pack_integer(bref, msg1_freq_start_r16, (uint16_t)0u, (uint16_t)274u));
  }
  if (msg1_freq_start_cfra_r16_present) {
    HANDLE_CODE(pack_integer(bref, msg1_freq_start_cfra_r16, (uint16_t)0u, (uint16_t)274u));
  }
  if (msg1_subcarrier_spacing_r16_present) {
    HANDLE_CODE(msg1_subcarrier_spacing_r16.pack(bref));
  }
  if (msg1_subcarrier_spacing_cfra_r16_present) {
    HANDLE_CODE(msg1_subcarrier_spacing_cfra_r16.pack(bref));
  }
  if (msg1_fdm_r16_present) {
    HANDLE_CODE(msg1_fdm_r16.pack(bref));
  }
  if (msg1_fdmcfra_r16_present) {
    HANDLE_CODE(msg1_fdmcfra_r16.pack(bref));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, per_ra_info_list_r16, 1, 200));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= per_ra_info_list_v1660.is_present();
    group_flags[1] |= msg1_scs_from_prach_cfg_idx_r16_present;
    group_flags[2] |= msg1_scs_from_prach_cfg_idx_cfra_r16_present;
    group_flags[3] |= msg_a_ro_freq_start_r17_present;
    group_flags[3] |= msg_a_ro_freq_start_cfra_r17_present;
    group_flags[3] |= msg_a_subcarrier_spacing_r17_present;
    group_flags[3] |= msg_a_ro_fdm_r17_present;
    group_flags[3] |= msg_a_ro_fdmcfra_r17_present;
    group_flags[3] |= msg_a_scs_from_prach_cfg_idx_r17_present;
    group_flags[3] |= msg_a_trans_max_r17_present;
    group_flags[3] |= msg_a_mcs_r17_present;
    group_flags[3] |= nrof_prbs_per_msg_a_po_r17_present;
    group_flags[3] |= msg_a_pusch_time_domain_alloc_r17_present;
    group_flags[3] |= freq_start_msg_a_pusch_r17_present;
    group_flags[3] |= nrof_msg_a_po_fdm_r17_present;
    group_flags[3] |= dl_pathloss_rsrp_r17_present;
    group_flags[3] |= intended_sibs_r17.is_present();
    group_flags[3] |= ssbs_for_si_acquisition_r17.is_present();
    group_flags[3] |= msg_a_pusch_payload_size_r17_present;
    group_flags[3] |= on_demand_si_success_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(per_ra_info_list_v1660.is_present(), 1));
      if (per_ra_info_list_v1660.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *per_ra_info_list_v1660, 1, 200));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(msg1_scs_from_prach_cfg_idx_r16_present, 1));
      if (msg1_scs_from_prach_cfg_idx_r16_present) {
        HANDLE_CODE(msg1_scs_from_prach_cfg_idx_r16.pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(msg1_scs_from_prach_cfg_idx_cfra_r16_present, 1));
      if (msg1_scs_from_prach_cfg_idx_cfra_r16_present) {
        HANDLE_CODE(msg1_scs_from_prach_cfg_idx_cfra_r16.pack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(msg_a_ro_freq_start_r17_present, 1));
      HANDLE_CODE(bref.pack(msg_a_ro_freq_start_cfra_r17_present, 1));
      HANDLE_CODE(bref.pack(msg_a_subcarrier_spacing_r17_present, 1));
      HANDLE_CODE(bref.pack(msg_a_ro_fdm_r17_present, 1));
      HANDLE_CODE(bref.pack(msg_a_ro_fdmcfra_r17_present, 1));
      HANDLE_CODE(bref.pack(msg_a_scs_from_prach_cfg_idx_r17_present, 1));
      HANDLE_CODE(bref.pack(msg_a_trans_max_r17_present, 1));
      HANDLE_CODE(bref.pack(msg_a_mcs_r17_present, 1));
      HANDLE_CODE(bref.pack(nrof_prbs_per_msg_a_po_r17_present, 1));
      HANDLE_CODE(bref.pack(msg_a_pusch_time_domain_alloc_r17_present, 1));
      HANDLE_CODE(bref.pack(freq_start_msg_a_pusch_r17_present, 1));
      HANDLE_CODE(bref.pack(nrof_msg_a_po_fdm_r17_present, 1));
      HANDLE_CODE(bref.pack(dl_pathloss_rsrp_r17_present, 1));
      HANDLE_CODE(bref.pack(intended_sibs_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(ssbs_for_si_acquisition_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(msg_a_pusch_payload_size_r17_present, 1));
      HANDLE_CODE(bref.pack(on_demand_si_success_r17_present, 1));
      if (msg_a_ro_freq_start_r17_present) {
        HANDLE_CODE(pack_integer(bref, msg_a_ro_freq_start_r17, (uint16_t)0u, (uint16_t)274u));
      }
      if (msg_a_ro_freq_start_cfra_r17_present) {
        HANDLE_CODE(pack_integer(bref, msg_a_ro_freq_start_cfra_r17, (uint16_t)0u, (uint16_t)274u));
      }
      if (msg_a_subcarrier_spacing_r17_present) {
        HANDLE_CODE(msg_a_subcarrier_spacing_r17.pack(bref));
      }
      if (msg_a_ro_fdm_r17_present) {
        HANDLE_CODE(msg_a_ro_fdm_r17.pack(bref));
      }
      if (msg_a_ro_fdmcfra_r17_present) {
        HANDLE_CODE(msg_a_ro_fdmcfra_r17.pack(bref));
      }
      if (msg_a_scs_from_prach_cfg_idx_r17_present) {
        HANDLE_CODE(msg_a_scs_from_prach_cfg_idx_r17.pack(bref));
      }
      if (msg_a_trans_max_r17_present) {
        HANDLE_CODE(msg_a_trans_max_r17.pack(bref));
      }
      if (msg_a_mcs_r17_present) {
        HANDLE_CODE(pack_integer(bref, msg_a_mcs_r17, (uint8_t)0u, (uint8_t)15u));
      }
      if (nrof_prbs_per_msg_a_po_r17_present) {
        HANDLE_CODE(pack_integer(bref, nrof_prbs_per_msg_a_po_r17, (uint8_t)1u, (uint8_t)32u));
      }
      if (msg_a_pusch_time_domain_alloc_r17_present) {
        HANDLE_CODE(pack_integer(bref, msg_a_pusch_time_domain_alloc_r17, (uint8_t)1u, (uint8_t)16u));
      }
      if (freq_start_msg_a_pusch_r17_present) {
        HANDLE_CODE(pack_integer(bref, freq_start_msg_a_pusch_r17, (uint16_t)0u, (uint16_t)274u));
      }
      if (nrof_msg_a_po_fdm_r17_present) {
        HANDLE_CODE(nrof_msg_a_po_fdm_r17.pack(bref));
      }
      if (dl_pathloss_rsrp_r17_present) {
        HANDLE_CODE(pack_integer(bref, dl_pathloss_rsrp_r17, (uint8_t)0u, (uint8_t)127u));
      }
      if (intended_sibs_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *intended_sibs_r17, 1, 32));
      }
      if (ssbs_for_si_acquisition_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *ssbs_for_si_acquisition_r17, 1, 64, integer_packer<uint8_t>(0, 63)));
      }
      if (msg_a_pusch_payload_size_r17_present) {
        HANDLE_CODE(msg_a_pusch_payload_size_r17.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ra_info_common_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(msg1_freq_start_r16_present, 1));
  HANDLE_CODE(bref.unpack(msg1_freq_start_cfra_r16_present, 1));
  HANDLE_CODE(bref.unpack(msg1_subcarrier_spacing_r16_present, 1));
  HANDLE_CODE(bref.unpack(msg1_subcarrier_spacing_cfra_r16_present, 1));
  HANDLE_CODE(bref.unpack(msg1_fdm_r16_present, 1));
  HANDLE_CODE(bref.unpack(msg1_fdmcfra_r16_present, 1));

  HANDLE_CODE(unpack_integer(absolute_freq_point_a_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(unpack_integer(location_and_bw_r16, bref, (uint16_t)0u, (uint16_t)37949u));
  HANDLE_CODE(subcarrier_spacing_r16.unpack(bref));
  if (msg1_freq_start_r16_present) {
    HANDLE_CODE(unpack_integer(msg1_freq_start_r16, bref, (uint16_t)0u, (uint16_t)274u));
  }
  if (msg1_freq_start_cfra_r16_present) {
    HANDLE_CODE(unpack_integer(msg1_freq_start_cfra_r16, bref, (uint16_t)0u, (uint16_t)274u));
  }
  if (msg1_subcarrier_spacing_r16_present) {
    HANDLE_CODE(msg1_subcarrier_spacing_r16.unpack(bref));
  }
  if (msg1_subcarrier_spacing_cfra_r16_present) {
    HANDLE_CODE(msg1_subcarrier_spacing_cfra_r16.unpack(bref));
  }
  if (msg1_fdm_r16_present) {
    HANDLE_CODE(msg1_fdm_r16.unpack(bref));
  }
  if (msg1_fdmcfra_r16_present) {
    HANDLE_CODE(msg1_fdmcfra_r16.unpack(bref));
  }
  HANDLE_CODE(unpack_dyn_seq_of(per_ra_info_list_r16, bref, 1, 200));

  if (ext) {
    ext_groups_unpacker_guard group_flags(4);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(per_ra_info_list_v1660, bref);
      if (per_ra_info_list_v1660.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*per_ra_info_list_v1660, bref, 1, 200));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(msg1_scs_from_prach_cfg_idx_r16_present, 1));
      if (msg1_scs_from_prach_cfg_idx_r16_present) {
        HANDLE_CODE(msg1_scs_from_prach_cfg_idx_r16.unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(msg1_scs_from_prach_cfg_idx_cfra_r16_present, 1));
      if (msg1_scs_from_prach_cfg_idx_cfra_r16_present) {
        HANDLE_CODE(msg1_scs_from_prach_cfg_idx_cfra_r16.unpack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(msg_a_ro_freq_start_r17_present, 1));
      HANDLE_CODE(bref.unpack(msg_a_ro_freq_start_cfra_r17_present, 1));
      HANDLE_CODE(bref.unpack(msg_a_subcarrier_spacing_r17_present, 1));
      HANDLE_CODE(bref.unpack(msg_a_ro_fdm_r17_present, 1));
      HANDLE_CODE(bref.unpack(msg_a_ro_fdmcfra_r17_present, 1));
      HANDLE_CODE(bref.unpack(msg_a_scs_from_prach_cfg_idx_r17_present, 1));
      HANDLE_CODE(bref.unpack(msg_a_trans_max_r17_present, 1));
      HANDLE_CODE(bref.unpack(msg_a_mcs_r17_present, 1));
      HANDLE_CODE(bref.unpack(nrof_prbs_per_msg_a_po_r17_present, 1));
      HANDLE_CODE(bref.unpack(msg_a_pusch_time_domain_alloc_r17_present, 1));
      HANDLE_CODE(bref.unpack(freq_start_msg_a_pusch_r17_present, 1));
      HANDLE_CODE(bref.unpack(nrof_msg_a_po_fdm_r17_present, 1));
      HANDLE_CODE(bref.unpack(dl_pathloss_rsrp_r17_present, 1));
      unpack_presence_flag(intended_sibs_r17, bref);
      unpack_presence_flag(ssbs_for_si_acquisition_r17, bref);
      HANDLE_CODE(bref.unpack(msg_a_pusch_payload_size_r17_present, 1));
      HANDLE_CODE(bref.unpack(on_demand_si_success_r17_present, 1));
      if (msg_a_ro_freq_start_r17_present) {
        HANDLE_CODE(unpack_integer(msg_a_ro_freq_start_r17, bref, (uint16_t)0u, (uint16_t)274u));
      }
      if (msg_a_ro_freq_start_cfra_r17_present) {
        HANDLE_CODE(unpack_integer(msg_a_ro_freq_start_cfra_r17, bref, (uint16_t)0u, (uint16_t)274u));
      }
      if (msg_a_subcarrier_spacing_r17_present) {
        HANDLE_CODE(msg_a_subcarrier_spacing_r17.unpack(bref));
      }
      if (msg_a_ro_fdm_r17_present) {
        HANDLE_CODE(msg_a_ro_fdm_r17.unpack(bref));
      }
      if (msg_a_ro_fdmcfra_r17_present) {
        HANDLE_CODE(msg_a_ro_fdmcfra_r17.unpack(bref));
      }
      if (msg_a_scs_from_prach_cfg_idx_r17_present) {
        HANDLE_CODE(msg_a_scs_from_prach_cfg_idx_r17.unpack(bref));
      }
      if (msg_a_trans_max_r17_present) {
        HANDLE_CODE(msg_a_trans_max_r17.unpack(bref));
      }
      if (msg_a_mcs_r17_present) {
        HANDLE_CODE(unpack_integer(msg_a_mcs_r17, bref, (uint8_t)0u, (uint8_t)15u));
      }
      if (nrof_prbs_per_msg_a_po_r17_present) {
        HANDLE_CODE(unpack_integer(nrof_prbs_per_msg_a_po_r17, bref, (uint8_t)1u, (uint8_t)32u));
      }
      if (msg_a_pusch_time_domain_alloc_r17_present) {
        HANDLE_CODE(unpack_integer(msg_a_pusch_time_domain_alloc_r17, bref, (uint8_t)1u, (uint8_t)16u));
      }
      if (freq_start_msg_a_pusch_r17_present) {
        HANDLE_CODE(unpack_integer(freq_start_msg_a_pusch_r17, bref, (uint16_t)0u, (uint16_t)274u));
      }
      if (nrof_msg_a_po_fdm_r17_present) {
        HANDLE_CODE(nrof_msg_a_po_fdm_r17.unpack(bref));
      }
      if (dl_pathloss_rsrp_r17_present) {
        HANDLE_CODE(unpack_integer(dl_pathloss_rsrp_r17, bref, (uint8_t)0u, (uint8_t)127u));
      }
      if (intended_sibs_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*intended_sibs_r17, bref, 1, 32));
      }
      if (ssbs_for_si_acquisition_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*ssbs_for_si_acquisition_r17, bref, 1, 64, integer_packer<uint8_t>(0, 63)));
      }
      if (msg_a_pusch_payload_size_r17_present) {
        HANDLE_CODE(msg_a_pusch_payload_size_r17.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void ra_info_common_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("absoluteFrequencyPointA-r16", absolute_freq_point_a_r16);
  j.write_int("locationAndBandwidth-r16", location_and_bw_r16);
  j.write_str("subcarrierSpacing-r16", subcarrier_spacing_r16.to_string());
  if (msg1_freq_start_r16_present) {
    j.write_int("msg1-FrequencyStart-r16", msg1_freq_start_r16);
  }
  if (msg1_freq_start_cfra_r16_present) {
    j.write_int("msg1-FrequencyStartCFRA-r16", msg1_freq_start_cfra_r16);
  }
  if (msg1_subcarrier_spacing_r16_present) {
    j.write_str("msg1-SubcarrierSpacing-r16", msg1_subcarrier_spacing_r16.to_string());
  }
  if (msg1_subcarrier_spacing_cfra_r16_present) {
    j.write_str("msg1-SubcarrierSpacingCFRA-r16", msg1_subcarrier_spacing_cfra_r16.to_string());
  }
  if (msg1_fdm_r16_present) {
    j.write_str("msg1-FDM-r16", msg1_fdm_r16.to_string());
  }
  if (msg1_fdmcfra_r16_present) {
    j.write_str("msg1-FDMCFRA-r16", msg1_fdmcfra_r16.to_string());
  }
  j.start_array("perRAInfoList-r16");
  for (const auto& e1 : per_ra_info_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  if (ext) {
    if (per_ra_info_list_v1660.is_present()) {
      j.start_array("perRAInfoList-v1660");
      for (const auto& e1 : *per_ra_info_list_v1660) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (msg1_scs_from_prach_cfg_idx_r16_present) {
      j.write_str("msg1-SCS-From-prach-ConfigurationIndex-r16", msg1_scs_from_prach_cfg_idx_r16.to_string());
    }
    if (msg1_scs_from_prach_cfg_idx_cfra_r16_present) {
      j.write_str("msg1-SCS-From-prach-ConfigurationIndexCFRA-r16", msg1_scs_from_prach_cfg_idx_cfra_r16.to_string());
    }
    if (msg_a_ro_freq_start_r17_present) {
      j.write_int("msgA-RO-FrequencyStart-r17", msg_a_ro_freq_start_r17);
    }
    if (msg_a_ro_freq_start_cfra_r17_present) {
      j.write_int("msgA-RO-FrequencyStartCFRA-r17", msg_a_ro_freq_start_cfra_r17);
    }
    if (msg_a_subcarrier_spacing_r17_present) {
      j.write_str("msgA-SubcarrierSpacing-r17", msg_a_subcarrier_spacing_r17.to_string());
    }
    if (msg_a_ro_fdm_r17_present) {
      j.write_str("msgA-RO-FDM-r17", msg_a_ro_fdm_r17.to_string());
    }
    if (msg_a_ro_fdmcfra_r17_present) {
      j.write_str("msgA-RO-FDMCFRA-r17", msg_a_ro_fdmcfra_r17.to_string());
    }
    if (msg_a_scs_from_prach_cfg_idx_r17_present) {
      j.write_str("msgA-SCS-From-prach-ConfigurationIndex-r17", msg_a_scs_from_prach_cfg_idx_r17.to_string());
    }
    if (msg_a_trans_max_r17_present) {
      j.write_str("msgA-TransMax-r17", msg_a_trans_max_r17.to_string());
    }
    if (msg_a_mcs_r17_present) {
      j.write_int("msgA-MCS-r17", msg_a_mcs_r17);
    }
    if (nrof_prbs_per_msg_a_po_r17_present) {
      j.write_int("nrofPRBs-PerMsgA-PO-r17", nrof_prbs_per_msg_a_po_r17);
    }
    if (msg_a_pusch_time_domain_alloc_r17_present) {
      j.write_int("msgA-PUSCH-TimeDomainAllocation-r17", msg_a_pusch_time_domain_alloc_r17);
    }
    if (freq_start_msg_a_pusch_r17_present) {
      j.write_int("frequencyStartMsgA-PUSCH-r17", freq_start_msg_a_pusch_r17);
    }
    if (nrof_msg_a_po_fdm_r17_present) {
      j.write_str("nrofMsgA-PO-FDM-r17", nrof_msg_a_po_fdm_r17.to_string());
    }
    if (dl_pathloss_rsrp_r17_present) {
      j.write_int("dlPathlossRSRP-r17", dl_pathloss_rsrp_r17);
    }
    if (intended_sibs_r17.is_present()) {
      j.start_array("intendedSIBs-r17");
      for (const auto& e1 : *intended_sibs_r17) {
        j.write_str(e1.to_string());
      }
      j.end_array();
    }
    if (ssbs_for_si_acquisition_r17.is_present()) {
      j.start_array("ssbsForSI-Acquisition-r17");
      for (const auto& e1 : *ssbs_for_si_acquisition_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (msg_a_pusch_payload_size_r17_present) {
      j.write_str("msgA-PUSCH-PayloadSize-r17", msg_a_pusch_payload_size_r17.to_string());
    }
    if (on_demand_si_success_r17_present) {
      j.write_str("onDemandSISuccess-r17", "true");
    }
  }
  j.end_obj();
}

const char* ra_info_common_r16_s::msg1_fdm_r16_opts::to_string() const
{
  static const char* names[] = {"one", "two", "four", "eight"};
  return convert_enum_idx(names, 4, value, "ra_info_common_r16_s::msg1_fdm_r16_e_");
}
uint8_t ra_info_common_r16_s::msg1_fdm_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(numbers, 4, value, "ra_info_common_r16_s::msg1_fdm_r16_e_");
}

const char* ra_info_common_r16_s::msg1_fdmcfra_r16_opts::to_string() const
{
  static const char* names[] = {"one", "two", "four", "eight"};
  return convert_enum_idx(names, 4, value, "ra_info_common_r16_s::msg1_fdmcfra_r16_e_");
}
uint8_t ra_info_common_r16_s::msg1_fdmcfra_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(numbers, 4, value, "ra_info_common_r16_s::msg1_fdmcfra_r16_e_");
}

const char* ra_info_common_r16_s::msg1_scs_from_prach_cfg_idx_r16_opts::to_string() const
{
  static const char* names[] = {"kHz1dot25", "kHz5", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "ra_info_common_r16_s::msg1_scs_from_prach_cfg_idx_r16_e_");
}
float ra_info_common_r16_s::msg1_scs_from_prach_cfg_idx_r16_opts::to_number() const
{
  static const float numbers[] = {1.25, 5.0};
  return map_enum_number(numbers, 2, value, "ra_info_common_r16_s::msg1_scs_from_prach_cfg_idx_r16_e_");
}
const char* ra_info_common_r16_s::msg1_scs_from_prach_cfg_idx_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"1.25", "5"};
  return convert_enum_idx(number_strs, 4, value, "ra_info_common_r16_s::msg1_scs_from_prach_cfg_idx_r16_e_");
}

const char* ra_info_common_r16_s::msg1_scs_from_prach_cfg_idx_cfra_r16_opts::to_string() const
{
  static const char* names[] = {"kHz1dot25", "kHz5", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "ra_info_common_r16_s::msg1_scs_from_prach_cfg_idx_cfra_r16_e_");
}
float ra_info_common_r16_s::msg1_scs_from_prach_cfg_idx_cfra_r16_opts::to_number() const
{
  static const float numbers[] = {1.25, 5.0};
  return map_enum_number(numbers, 2, value, "ra_info_common_r16_s::msg1_scs_from_prach_cfg_idx_cfra_r16_e_");
}
const char* ra_info_common_r16_s::msg1_scs_from_prach_cfg_idx_cfra_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"1.25", "5"};
  return convert_enum_idx(number_strs, 4, value, "ra_info_common_r16_s::msg1_scs_from_prach_cfg_idx_cfra_r16_e_");
}

const char* ra_info_common_r16_s::msg_a_ro_fdm_r17_opts::to_string() const
{
  static const char* names[] = {"one", "two", "four", "eight"};
  return convert_enum_idx(names, 4, value, "ra_info_common_r16_s::msg_a_ro_fdm_r17_e_");
}
uint8_t ra_info_common_r16_s::msg_a_ro_fdm_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(numbers, 4, value, "ra_info_common_r16_s::msg_a_ro_fdm_r17_e_");
}

const char* ra_info_common_r16_s::msg_a_ro_fdmcfra_r17_opts::to_string() const
{
  static const char* names[] = {"one", "two", "four", "eight"};
  return convert_enum_idx(names, 4, value, "ra_info_common_r16_s::msg_a_ro_fdmcfra_r17_e_");
}
uint8_t ra_info_common_r16_s::msg_a_ro_fdmcfra_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(numbers, 4, value, "ra_info_common_r16_s::msg_a_ro_fdmcfra_r17_e_");
}

const char* ra_info_common_r16_s::msg_a_scs_from_prach_cfg_idx_r17_opts::to_string() const
{
  static const char* names[] = {"kHz1dot25", "kHz5", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "ra_info_common_r16_s::msg_a_scs_from_prach_cfg_idx_r17_e_");
}
float ra_info_common_r16_s::msg_a_scs_from_prach_cfg_idx_r17_opts::to_number() const
{
  static const float numbers[] = {1.25, 5.0};
  return map_enum_number(numbers, 2, value, "ra_info_common_r16_s::msg_a_scs_from_prach_cfg_idx_r17_e_");
}
const char* ra_info_common_r16_s::msg_a_scs_from_prach_cfg_idx_r17_opts::to_number_string() const
{
  static const char* number_strs[] = {"1.25", "5"};
  return convert_enum_idx(number_strs, 4, value, "ra_info_common_r16_s::msg_a_scs_from_prach_cfg_idx_r17_e_");
}

const char* ra_info_common_r16_s::msg_a_trans_max_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n6", "n8", "n10", "n20", "n50", "n100", "n200"};
  return convert_enum_idx(names, 10, value, "ra_info_common_r16_s::msg_a_trans_max_r17_e_");
}
uint8_t ra_info_common_r16_s::msg_a_trans_max_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6, 8, 10, 20, 50, 100, 200};
  return map_enum_number(numbers, 10, value, "ra_info_common_r16_s::msg_a_trans_max_r17_e_");
}

const char* ra_info_common_r16_s::nrof_msg_a_po_fdm_r17_opts::to_string() const
{
  static const char* names[] = {"one", "two", "four", "eight"};
  return convert_enum_idx(names, 4, value, "ra_info_common_r16_s::nrof_msg_a_po_fdm_r17_e_");
}
uint8_t ra_info_common_r16_s::nrof_msg_a_po_fdm_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(numbers, 4, value, "ra_info_common_r16_s::nrof_msg_a_po_fdm_r17_e_");
}

// RAN-VisibleMeasurements-r17 ::= SEQUENCE
SRSASN_CODE ran_visible_meass_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(app_layer_buffer_level_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(playout_delay_for_media_startup_r17_present, 1));
  HANDLE_CODE(bref.pack(pdu_session_id_list_r17.size() > 0, 1));

  if (app_layer_buffer_level_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, app_layer_buffer_level_list_r17, 1, 8, integer_packer<uint16_t>(0, 30000)));
  }
  if (playout_delay_for_media_startup_r17_present) {
    HANDLE_CODE(pack_integer(bref, playout_delay_for_media_startup_r17, (uint16_t)0u, (uint16_t)30000u));
  }
  if (pdu_session_id_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, pdu_session_id_list_r17, 1, 256, integer_packer<uint16_t>(0, 255)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ran_visible_meass_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool app_layer_buffer_level_list_r17_present;
  HANDLE_CODE(bref.unpack(app_layer_buffer_level_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(playout_delay_for_media_startup_r17_present, 1));
  bool pdu_session_id_list_r17_present;
  HANDLE_CODE(bref.unpack(pdu_session_id_list_r17_present, 1));

  if (app_layer_buffer_level_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(app_layer_buffer_level_list_r17, bref, 1, 8, integer_packer<uint16_t>(0, 30000)));
  }
  if (playout_delay_for_media_startup_r17_present) {
    HANDLE_CODE(unpack_integer(playout_delay_for_media_startup_r17, bref, (uint16_t)0u, (uint16_t)30000u));
  }
  if (pdu_session_id_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(pdu_session_id_list_r17, bref, 1, 256, integer_packer<uint16_t>(0, 255)));
  }

  return SRSASN_SUCCESS;
}
void ran_visible_meass_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (app_layer_buffer_level_list_r17.size() > 0) {
    j.start_array("appLayerBufferLevelList-r17");
    for (const auto& e1 : app_layer_buffer_level_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (playout_delay_for_media_startup_r17_present) {
    j.write_int("playoutDelayForMediaStartup-r17", playout_delay_for_media_startup_r17);
  }
  if (pdu_session_id_list_r17.size() > 0) {
    j.start_array("pdu-SessionIdList-r17");
    for (const auto& e1 : pdu_session_id_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// RRCReconfigurationComplete-v1610-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_complete_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ue_meass_available_r16_present, 1));
  HANDLE_CODE(bref.pack(need_for_gaps_info_nr_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ue_meass_available_r16_present) {
    HANDLE_CODE(ue_meass_available_r16.pack(bref));
  }
  if (need_for_gaps_info_nr_r16_present) {
    HANDLE_CODE(need_for_gaps_info_nr_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ue_meass_available_r16_present, 1));
  HANDLE_CODE(bref.unpack(need_for_gaps_info_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ue_meass_available_r16_present) {
    HANDLE_CODE(ue_meass_available_r16.unpack(bref));
  }
  if (need_for_gaps_info_nr_r16_present) {
    HANDLE_CODE(need_for_gaps_info_nr_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_complete_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ue_meass_available_r16_present) {
    j.write_fieldname("ue-MeasurementsAvailable-r16");
    ue_meass_available_r16.to_json(j);
  }
  if (need_for_gaps_info_nr_r16_present) {
    j.write_fieldname("needForGapsInfoNR-r16");
    need_for_gaps_info_nr_r16.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCResumeComplete-v1700-IEs ::= SEQUENCE
SRSASN_CODE rrc_resume_complete_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(need_for_gap_ncsg_info_nr_r17_present, 1));
  HANDLE_CODE(bref.pack(need_for_gap_ncsg_info_eutra_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (need_for_gap_ncsg_info_nr_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_info_nr_r17.pack(bref));
  }
  if (need_for_gap_ncsg_info_eutra_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_info_eutra_r17.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_complete_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(need_for_gap_ncsg_info_nr_r17_present, 1));
  HANDLE_CODE(bref.unpack(need_for_gap_ncsg_info_eutra_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (need_for_gap_ncsg_info_nr_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_info_nr_r17.unpack(bref));
  }
  if (need_for_gap_ncsg_info_eutra_r17_present) {
    HANDLE_CODE(need_for_gap_ncsg_info_eutra_r17.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_resume_complete_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (need_for_gap_ncsg_info_nr_r17_present) {
    j.write_fieldname("needForGapNCSG-InfoNR-r17");
    need_for_gap_ncsg_info_nr_r17.to_json(j);
  }
  if (need_for_gap_ncsg_info_eutra_r17_present) {
    j.write_fieldname("needForGapNCSG-InfoEUTRA-r17");
    need_for_gap_ncsg_info_eutra_r17.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCSetupComplete-v1700-IEs ::= SEQUENCE
SRSASN_CODE rrc_setup_complete_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(onboarding_request_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_setup_complete_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(onboarding_request_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
void rrc_setup_complete_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (onboarding_request_r17_present) {
    j.write_str("onboardingRequest-r17", "true");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// ReleasePreference-r16 ::= SEQUENCE
SRSASN_CODE release_pref_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(preferred_rrc_state_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE release_pref_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(preferred_rrc_state_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void release_pref_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("preferredRRC-State-r16", preferred_rrc_state_r16.to_string());
  j.end_obj();
}

const char* release_pref_r16_s::preferred_rrc_state_r16_opts::to_string() const
{
  static const char* names[] = {"idle", "inactive", "connected", "outOfConnected"};
  return convert_enum_idx(names, 4, value, "release_pref_r16_s::preferred_rrc_state_r16_e_");
}

// SHR-Cause-r17 ::= SEQUENCE
SRSASN_CODE shr_cause_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(t304_cause_r17_present, 1));
  HANDLE_CODE(bref.pack(t310_cause_r17_present, 1));
  HANDLE_CODE(bref.pack(t312_cause_r17_present, 1));
  HANDLE_CODE(bref.pack(source_daps_fail_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE shr_cause_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(t304_cause_r17_present, 1));
  HANDLE_CODE(bref.unpack(t310_cause_r17_present, 1));
  HANDLE_CODE(bref.unpack(t312_cause_r17_present, 1));
  HANDLE_CODE(bref.unpack(source_daps_fail_r17_present, 1));

  return SRSASN_SUCCESS;
}
void shr_cause_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (t304_cause_r17_present) {
    j.write_str("t304-cause-r17", "true");
  }
  if (t310_cause_r17_present) {
    j.write_str("t310-cause-r17", "true");
  }
  if (t312_cause_r17_present) {
    j.write_str("t312-cause-r17", "true");
  }
  if (source_daps_fail_r17_present) {
    j.write_str("sourceDAPS-Failure-r17", "true");
  }
  j.end_obj();
}

// SL-RxDRX-Report-v1700 ::= SEQUENCE
SRSASN_CODE sl_rx_drx_report_v1700_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(sl_drx_cfg_from_tx_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_rx_drx_report_v1700_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(sl_drx_cfg_from_tx_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_rx_drx_report_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sl-DRX-ConfigFromTx-r17");
  sl_drx_cfg_from_tx_r17.to_json(j);
  j.end_obj();
}

// SL-RxInterestedGC-BC-Dest-r17 ::= SEQUENCE
SRSASN_CODE sl_rx_interested_gc_bc_dest_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, sl_rx_interested_qos_info_list_r17, 1, 64));
  HANDLE_CODE(sl_dest_id_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_rx_interested_gc_bc_dest_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(sl_rx_interested_qos_info_list_r17, bref, 1, 64));
  HANDLE_CODE(sl_dest_id_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_rx_interested_gc_bc_dest_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("sl-RxInterestedQoS-InfoList-r17");
  for (const auto& e1 : sl_rx_interested_qos_info_list_r17) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_str("sl-DestinationIdentity-r16", sl_dest_id_r16.to_string());
  j.end_obj();
}

// SL-TxResourceReqCommRelayInfo-r17 ::= SEQUENCE
SRSASN_CODE sl_tx_res_req_comm_relay_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_relay_drx_cfg_r17_present, 1));

  if (sl_relay_drx_cfg_r17_present) {
    HANDLE_CODE(sl_relay_drx_cfg_r17.pack(bref));
  }
  HANDLE_CODE(sl_tx_res_req_comm_relay_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_tx_res_req_comm_relay_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_relay_drx_cfg_r17_present, 1));

  if (sl_relay_drx_cfg_r17_present) {
    HANDLE_CODE(sl_relay_drx_cfg_r17.unpack(bref));
  }
  HANDLE_CODE(sl_tx_res_req_comm_relay_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_tx_res_req_comm_relay_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_relay_drx_cfg_r17_present) {
    j.write_fieldname("sl-RelayDRXConfig-r17");
    sl_relay_drx_cfg_r17.to_json(j);
  }
  j.write_fieldname("sl-TxResourceReqCommRelay-r17");
  sl_tx_res_req_comm_relay_r17.to_json(j);
  j.end_obj();
}

// SL-TxResourceReqDisc-r17 ::= SEQUENCE
SRSASN_CODE sl_tx_res_req_disc_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_source_id_relay_ue_r17_present, 1));

  HANDLE_CODE(sl_dest_id_disc_r17.pack(bref));
  if (sl_source_id_relay_ue_r17_present) {
    HANDLE_CODE(sl_source_id_relay_ue_r17.pack(bref));
  }
  HANDLE_CODE(sl_cast_type_disc_r17.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, sl_tx_interested_freq_list_disc_r17, 1, 8, integer_packer<uint8_t>(1, 8)));
  HANDLE_CODE(pack_dyn_seq_of(bref, sl_type_tx_sync_list_disc_r17, 1, 8));
  HANDLE_CODE(sl_discovery_type_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_tx_res_req_disc_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_source_id_relay_ue_r17_present, 1));

  HANDLE_CODE(sl_dest_id_disc_r17.unpack(bref));
  if (sl_source_id_relay_ue_r17_present) {
    HANDLE_CODE(sl_source_id_relay_ue_r17.unpack(bref));
  }
  HANDLE_CODE(sl_cast_type_disc_r17.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(sl_tx_interested_freq_list_disc_r17, bref, 1, 8, integer_packer<uint8_t>(1, 8)));
  HANDLE_CODE(unpack_dyn_seq_of(sl_type_tx_sync_list_disc_r17, bref, 1, 8));
  HANDLE_CODE(sl_discovery_type_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_tx_res_req_disc_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sl-DestinationIdentityDisc-r17", sl_dest_id_disc_r17.to_string());
  if (sl_source_id_relay_ue_r17_present) {
    j.write_str("sl-SourceIdentityRelayUE-r17", sl_source_id_relay_ue_r17.to_string());
  }
  j.write_str("sl-CastTypeDisc-r17", sl_cast_type_disc_r17.to_string());
  j.start_array("sl-TxInterestedFreqListDisc-r17");
  for (const auto& e1 : sl_tx_interested_freq_list_disc_r17) {
    j.write_int(e1);
  }
  j.end_array();
  j.start_array("sl-TypeTxSyncListDisc-r17");
  for (const auto& e1 : sl_type_tx_sync_list_disc_r17) {
    j.write_str(e1.to_string());
  }
  j.end_array();
  j.write_str("sl-DiscoveryType-r17", sl_discovery_type_r17.to_string());
  j.end_obj();
}

const char* sl_tx_res_req_disc_r17_s::sl_cast_type_disc_r17_opts::to_string() const
{
  static const char* names[] = {"broadcast", "groupcast", "unicast", "spare1"};
  return convert_enum_idx(names, 4, value, "sl_tx_res_req_disc_r17_s::sl_cast_type_disc_r17_e_");
}

const char* sl_tx_res_req_disc_r17_s::sl_discovery_type_r17_opts::to_string() const
{
  static const char* names[] = {"relay", "non-Relay"};
  return convert_enum_idx(names, 2, value, "sl_tx_res_req_disc_r17_s::sl_discovery_type_r17_e_");
}

// UEAssistanceInformation-v1700-IEs ::= SEQUENCE
SRSASN_CODE ue_assist_info_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_gap_fr2_pref_r17_present, 1));
  HANDLE_CODE(bref.pack(musim_assist_r17_present, 1));
  HANDLE_CODE(bref.pack(overheat_assist_r17_present, 1));
  HANDLE_CODE(bref.pack(max_bw_pref_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.pack(max_mimo_layer_pref_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.pack(min_sched_offset_pref_ext_r17_present, 1));
  HANDLE_CODE(bref.pack(rlm_meas_relaxation_state_r17_present, 1));
  HANDLE_CODE(bref.pack(bfd_meas_relaxation_state_r17_present, 1));
  HANDLE_CODE(bref.pack(non_sdt_data_ind_r17_present, 1));
  HANDLE_CODE(bref.pack(scg_deactivation_pref_r17_present, 1));
  HANDLE_CODE(bref.pack(ul_data_r17_present, 1));
  HANDLE_CODE(bref.pack(rrm_meas_relaxation_fulfilment_r17_present, 1));
  HANDLE_CODE(bref.pack(propagation_delay_difference_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ul_gap_fr2_pref_r17_present) {
    HANDLE_CODE(ul_gap_fr2_pref_r17.pack(bref));
  }
  if (musim_assist_r17_present) {
    HANDLE_CODE(musim_assist_r17.pack(bref));
  }
  if (overheat_assist_r17_present) {
    HANDLE_CODE(overheat_assist_r17.pack(bref));
  }
  if (max_bw_pref_fr2_2_r17_present) {
    HANDLE_CODE(max_bw_pref_fr2_2_r17.pack(bref));
  }
  if (max_mimo_layer_pref_fr2_2_r17_present) {
    HANDLE_CODE(max_mimo_layer_pref_fr2_2_r17.pack(bref));
  }
  if (min_sched_offset_pref_ext_r17_present) {
    HANDLE_CODE(min_sched_offset_pref_ext_r17.pack(bref));
  }
  if (rlm_meas_relaxation_state_r17_present) {
    HANDLE_CODE(bref.pack(rlm_meas_relaxation_state_r17, 1));
  }
  if (bfd_meas_relaxation_state_r17_present) {
    HANDLE_CODE(bfd_meas_relaxation_state_r17.pack(bref));
  }
  if (non_sdt_data_ind_r17_present) {
    HANDLE_CODE(bref.pack(non_sdt_data_ind_r17.resume_cause_r17_present, 1));
    if (non_sdt_data_ind_r17.resume_cause_r17_present) {
      HANDLE_CODE(non_sdt_data_ind_r17.resume_cause_r17.pack(bref));
    }
  }
  if (scg_deactivation_pref_r17_present) {
    HANDLE_CODE(scg_deactivation_pref_r17.pack(bref));
  }
  if (rrm_meas_relaxation_fulfilment_r17_present) {
    HANDLE_CODE(bref.pack(rrm_meas_relaxation_fulfilment_r17, 1));
  }
  if (propagation_delay_difference_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, propagation_delay_difference_r17, 1, 4, integer_packer<int16_t>(-270, 270)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_assist_info_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ul_gap_fr2_pref_r17_present, 1));
  HANDLE_CODE(bref.unpack(musim_assist_r17_present, 1));
  HANDLE_CODE(bref.unpack(overheat_assist_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_bw_pref_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_mimo_layer_pref_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.unpack(min_sched_offset_pref_ext_r17_present, 1));
  HANDLE_CODE(bref.unpack(rlm_meas_relaxation_state_r17_present, 1));
  HANDLE_CODE(bref.unpack(bfd_meas_relaxation_state_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_sdt_data_ind_r17_present, 1));
  HANDLE_CODE(bref.unpack(scg_deactivation_pref_r17_present, 1));
  HANDLE_CODE(bref.unpack(ul_data_r17_present, 1));
  HANDLE_CODE(bref.unpack(rrm_meas_relaxation_fulfilment_r17_present, 1));
  bool propagation_delay_difference_r17_present;
  HANDLE_CODE(bref.unpack(propagation_delay_difference_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ul_gap_fr2_pref_r17_present) {
    HANDLE_CODE(ul_gap_fr2_pref_r17.unpack(bref));
  }
  if (musim_assist_r17_present) {
    HANDLE_CODE(musim_assist_r17.unpack(bref));
  }
  if (overheat_assist_r17_present) {
    HANDLE_CODE(overheat_assist_r17.unpack(bref));
  }
  if (max_bw_pref_fr2_2_r17_present) {
    HANDLE_CODE(max_bw_pref_fr2_2_r17.unpack(bref));
  }
  if (max_mimo_layer_pref_fr2_2_r17_present) {
    HANDLE_CODE(max_mimo_layer_pref_fr2_2_r17.unpack(bref));
  }
  if (min_sched_offset_pref_ext_r17_present) {
    HANDLE_CODE(min_sched_offset_pref_ext_r17.unpack(bref));
  }
  if (rlm_meas_relaxation_state_r17_present) {
    HANDLE_CODE(bref.unpack(rlm_meas_relaxation_state_r17, 1));
  }
  if (bfd_meas_relaxation_state_r17_present) {
    HANDLE_CODE(bfd_meas_relaxation_state_r17.unpack(bref));
  }
  if (non_sdt_data_ind_r17_present) {
    HANDLE_CODE(bref.unpack(non_sdt_data_ind_r17.resume_cause_r17_present, 1));
    if (non_sdt_data_ind_r17.resume_cause_r17_present) {
      HANDLE_CODE(non_sdt_data_ind_r17.resume_cause_r17.unpack(bref));
    }
  }
  if (scg_deactivation_pref_r17_present) {
    HANDLE_CODE(scg_deactivation_pref_r17.unpack(bref));
  }
  if (rrm_meas_relaxation_fulfilment_r17_present) {
    HANDLE_CODE(bref.unpack(rrm_meas_relaxation_fulfilment_r17, 1));
  }
  if (propagation_delay_difference_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(propagation_delay_difference_r17, bref, 1, 4, integer_packer<int16_t>(-270, 270)));
  }

  return SRSASN_SUCCESS;
}
void ue_assist_info_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_gap_fr2_pref_r17_present) {
    j.write_fieldname("ul-GapFR2-Preference-r17");
    ul_gap_fr2_pref_r17.to_json(j);
  }
  if (musim_assist_r17_present) {
    j.write_fieldname("musim-Assistance-r17");
    musim_assist_r17.to_json(j);
  }
  if (overheat_assist_r17_present) {
    j.write_fieldname("overheatingAssistance-r17");
    overheat_assist_r17.to_json(j);
  }
  if (max_bw_pref_fr2_2_r17_present) {
    j.write_fieldname("maxBW-PreferenceFR2-2-r17");
    max_bw_pref_fr2_2_r17.to_json(j);
  }
  if (max_mimo_layer_pref_fr2_2_r17_present) {
    j.write_fieldname("maxMIMO-LayerPreferenceFR2-2-r17");
    max_mimo_layer_pref_fr2_2_r17.to_json(j);
  }
  if (min_sched_offset_pref_ext_r17_present) {
    j.write_fieldname("minSchedulingOffsetPreferenceExt-r17");
    min_sched_offset_pref_ext_r17.to_json(j);
  }
  if (rlm_meas_relaxation_state_r17_present) {
    j.write_bool("rlm-MeasRelaxationState-r17", rlm_meas_relaxation_state_r17);
  }
  if (bfd_meas_relaxation_state_r17_present) {
    j.write_str("bfd-MeasRelaxationState-r17", bfd_meas_relaxation_state_r17.to_string());
  }
  if (non_sdt_data_ind_r17_present) {
    j.write_fieldname("nonSDT-DataIndication-r17");
    j.start_obj();
    if (non_sdt_data_ind_r17.resume_cause_r17_present) {
      j.write_str("resumeCause-r17", non_sdt_data_ind_r17.resume_cause_r17.to_string());
    }
    j.end_obj();
  }
  if (scg_deactivation_pref_r17_present) {
    j.write_str("scg-DeactivationPreference-r17", scg_deactivation_pref_r17.to_string());
  }
  if (ul_data_r17_present) {
    j.write_str("uplinkData-r17", "true");
  }
  if (rrm_meas_relaxation_fulfilment_r17_present) {
    j.write_bool("rrm-MeasRelaxationFulfilment-r17", rrm_meas_relaxation_fulfilment_r17);
  }
  if (propagation_delay_difference_r17.size() > 0) {
    j.start_array("propagationDelayDifference-r17");
    for (const auto& e1 : propagation_delay_difference_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

const char* ue_assist_info_v1700_ies_s::scg_deactivation_pref_r17_opts::to_string() const
{
  static const char* names[] = {"scgDeactivationPreferred", "noPreference"};
  return convert_enum_idx(names, 2, value, "ue_assist_info_v1700_ies_s::scg_deactivation_pref_r17_e_");
}

// UL-PDCP-DelayValueResult-r16 ::= SEQUENCE
SRSASN_CODE ul_pdcp_delay_value_result_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, drb_id_r16, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(pack_integer(bref, average_delay_r16, (uint16_t)0u, (uint16_t)10000u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_pdcp_delay_value_result_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(drb_id_r16, bref, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(unpack_integer(average_delay_r16, bref, (uint16_t)0u, (uint16_t)10000u));

  return SRSASN_SUCCESS;
}
void ul_pdcp_delay_value_result_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("drb-Id-r16", drb_id_r16);
  j.write_int("averageDelay-r16", average_delay_r16);
  j.end_obj();
}

// UL-PDCP-ExcessDelayResult-r17 ::= SEQUENCE
SRSASN_CODE ul_pdcp_excess_delay_result_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, drb_id_r17, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(pack_integer(bref, excess_delay_r17, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_pdcp_excess_delay_result_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(drb_id_r17, bref, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(unpack_integer(excess_delay_r17, bref, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
void ul_pdcp_excess_delay_result_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("drb-Id-r17", drb_id_r17);
  j.write_int("excessDelay-r17", excess_delay_r17);
  j.end_obj();
}

// UplinkTxDirectCurrentCell ::= SEQUENCE
SRSASN_CODE ul_tx_direct_current_cell_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, serv_cell_idx, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(pack_dyn_seq_of(bref, ul_direct_current_bwp, 1, 4));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ul_direct_current_bwp_sul.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ul_direct_current_bwp_sul.is_present(), 1));
      if (ul_direct_current_bwp_sul.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *ul_direct_current_bwp_sul, 1, 4));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_tx_direct_current_cell_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(serv_cell_idx, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(unpack_dyn_seq_of(ul_direct_current_bwp, bref, 1, 4));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(ul_direct_current_bwp_sul, bref);
      if (ul_direct_current_bwp_sul.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*ul_direct_current_bwp_sul, bref, 1, 4));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void ul_tx_direct_current_cell_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("servCellIndex", serv_cell_idx);
  j.start_array("uplinkDirectCurrentBWP");
  for (const auto& e1 : ul_direct_current_bwp) {
    e1.to_json(j);
  }
  j.end_array();
  if (ext) {
    if (ul_direct_current_bwp_sul.is_present()) {
      j.start_array("uplinkDirectCurrentBWP-SUL");
      for (const auto& e1 : *ul_direct_current_bwp_sul) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

// VisitedCellInfo-r16 ::= SEQUENCE
SRSASN_CODE visited_cell_info_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(visited_cell_id_r16_present, 1));

  if (visited_cell_id_r16_present) {
    HANDLE_CODE(visited_cell_id_r16.pack(bref));
  }
  HANDLE_CODE(pack_integer(bref, time_spent_r16, (uint16_t)0u, (uint16_t)4095u));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= visited_pscell_info_list_report_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(visited_pscell_info_list_report_r17.is_present(), 1));
      if (visited_pscell_info_list_report_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *visited_pscell_info_list_report_r17, 1, 16));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE visited_cell_info_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(visited_cell_id_r16_present, 1));

  if (visited_cell_id_r16_present) {
    HANDLE_CODE(visited_cell_id_r16.unpack(bref));
  }
  HANDLE_CODE(unpack_integer(time_spent_r16, bref, (uint16_t)0u, (uint16_t)4095u));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(visited_pscell_info_list_report_r17, bref);
      if (visited_pscell_info_list_report_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*visited_pscell_info_list_report_r17, bref, 1, 16));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void visited_cell_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (visited_cell_id_r16_present) {
    j.write_fieldname("visitedCellId-r16");
    visited_cell_id_r16.to_json(j);
  }
  j.write_int("timeSpent-r16", time_spent_r16);
  if (ext) {
    if (visited_pscell_info_list_report_r17.is_present()) {
      j.start_array("visitedPSCellInfoListReport-r17");
      for (const auto& e1 : *visited_pscell_info_list_report_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

void visited_cell_info_r16_s::visited_cell_id_r16_c_::destroy_()
{
  switch (type_) {
    case types::nr_cell_id_r16:
      c.destroy<nr_cell_id_r16_c_>();
      break;
    case types::eutra_cell_id_r16:
      c.destroy<eutra_cell_id_r16_c_>();
      break;
    default:
      break;
  }
}
void visited_cell_info_r16_s::visited_cell_id_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::nr_cell_id_r16:
      c.init<nr_cell_id_r16_c_>();
      break;
    case types::eutra_cell_id_r16:
      c.init<eutra_cell_id_r16_c_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_");
  }
}
visited_cell_info_r16_s::visited_cell_id_r16_c_::visited_cell_id_r16_c_(
    const visited_cell_info_r16_s::visited_cell_id_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::nr_cell_id_r16:
      c.init(other.c.get<nr_cell_id_r16_c_>());
      break;
    case types::eutra_cell_id_r16:
      c.init(other.c.get<eutra_cell_id_r16_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_");
  }
}
visited_cell_info_r16_s::visited_cell_id_r16_c_&
visited_cell_info_r16_s::visited_cell_id_r16_c_::operator=(const visited_cell_info_r16_s::visited_cell_id_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::nr_cell_id_r16:
      c.set(other.c.get<nr_cell_id_r16_c_>());
      break;
    case types::eutra_cell_id_r16:
      c.set(other.c.get<eutra_cell_id_r16_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_");
  }

  return *this;
}
visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_&
visited_cell_info_r16_s::visited_cell_id_r16_c_::set_nr_cell_id_r16()
{
  set(types::nr_cell_id_r16);
  return c.get<nr_cell_id_r16_c_>();
}
visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_&
visited_cell_info_r16_s::visited_cell_id_r16_c_::set_eutra_cell_id_r16()
{
  set(types::eutra_cell_id_r16);
  return c.get<eutra_cell_id_r16_c_>();
}
void visited_cell_info_r16_s::visited_cell_id_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::nr_cell_id_r16:
      j.write_fieldname("nr-CellId-r16");
      c.get<nr_cell_id_r16_c_>().to_json(j);
      break;
    case types::eutra_cell_id_r16:
      j.write_fieldname("eutra-CellId-r16");
      c.get<eutra_cell_id_r16_c_>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE visited_cell_info_r16_s::visited_cell_id_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::nr_cell_id_r16:
      HANDLE_CODE(c.get<nr_cell_id_r16_c_>().pack(bref));
      break;
    case types::eutra_cell_id_r16:
      HANDLE_CODE(c.get<eutra_cell_id_r16_c_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE visited_cell_info_r16_s::visited_cell_id_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::nr_cell_id_r16:
      HANDLE_CODE(c.get<nr_cell_id_r16_c_>().unpack(bref));
      break;
    case types::eutra_cell_id_r16:
      HANDLE_CODE(c.get<eutra_cell_id_r16_c_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_::destroy_()
{
  switch (type_) {
    case types::cgi_info:
      c.destroy<cgi_info_logging_r16_s>();
      break;
    case types::pci_arfcn_r16:
      c.destroy<pci_arfcn_nr_r16_s>();
      break;
    default:
      break;
  }
}
void visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::cgi_info:
      c.init<cgi_info_logging_r16_s>();
      break;
    case types::pci_arfcn_r16:
      c.init<pci_arfcn_nr_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_");
  }
}
visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_::nr_cell_id_r16_c_(
    const visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::cgi_info:
      c.init(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::pci_arfcn_r16:
      c.init(other.c.get<pci_arfcn_nr_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_");
  }
}
visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_&
visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_::operator=(
    const visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::cgi_info:
      c.set(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::pci_arfcn_r16:
      c.set(other.c.get<pci_arfcn_nr_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_");
  }

  return *this;
}
cgi_info_logging_r16_s& visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_::set_cgi_info()
{
  set(types::cgi_info);
  return c.get<cgi_info_logging_r16_s>();
}
pci_arfcn_nr_r16_s& visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_::set_pci_arfcn_r16()
{
  set(types::pci_arfcn_r16);
  return c.get<pci_arfcn_nr_r16_s>();
}
void visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cgi_info:
      j.write_fieldname("cgi-Info");
      c.get<cgi_info_logging_r16_s>().to_json(j);
      break;
    case types::pci_arfcn_r16:
      j.write_fieldname("pci-arfcn-r16");
      c.get<pci_arfcn_nr_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cgi_info:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().pack(bref));
      break;
    case types::pci_arfcn_r16:
      HANDLE_CODE(c.get<pci_arfcn_nr_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cgi_info:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().unpack(bref));
      break;
    case types::pci_arfcn_r16:
      HANDLE_CODE(c.get<pci_arfcn_nr_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"cgi-Info", "pci-arfcn-r16"};
  return convert_enum_idx(names, 2, value, "visited_cell_info_r16_s::visited_cell_id_r16_c_::nr_cell_id_r16_c_::types");
}

void visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_::destroy_()
{
  switch (type_) {
    case types::cell_global_id_r16:
      c.destroy<cgi_info_eutra_s>();
      break;
    case types::pci_arfcn_r16:
      c.destroy<pci_arfcn_eutra_r16_s>();
      break;
    default:
      break;
  }
}
void visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::cell_global_id_r16:
      c.init<cgi_info_eutra_s>();
      break;
    case types::pci_arfcn_r16:
      c.init<pci_arfcn_eutra_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_");
  }
}
visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_::eutra_cell_id_r16_c_(
    const visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::cell_global_id_r16:
      c.init(other.c.get<cgi_info_eutra_s>());
      break;
    case types::pci_arfcn_r16:
      c.init(other.c.get<pci_arfcn_eutra_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_");
  }
}
visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_&
visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_::operator=(
    const visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::cell_global_id_r16:
      c.set(other.c.get<cgi_info_eutra_s>());
      break;
    case types::pci_arfcn_r16:
      c.set(other.c.get<pci_arfcn_eutra_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_");
  }

  return *this;
}
cgi_info_eutra_s& visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_::set_cell_global_id_r16()
{
  set(types::cell_global_id_r16);
  return c.get<cgi_info_eutra_s>();
}
pci_arfcn_eutra_r16_s& visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_::set_pci_arfcn_r16()
{
  set(types::pci_arfcn_r16);
  return c.get<pci_arfcn_eutra_r16_s>();
}
void visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cell_global_id_r16:
      j.write_fieldname("cellGlobalId-r16");
      c.get<cgi_info_eutra_s>().to_json(j);
      break;
    case types::pci_arfcn_r16:
      j.write_fieldname("pci-arfcn-r16");
      c.get<pci_arfcn_eutra_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cell_global_id_r16:
      HANDLE_CODE(c.get<cgi_info_eutra_s>().pack(bref));
      break;
    case types::pci_arfcn_r16:
      HANDLE_CODE(c.get<pci_arfcn_eutra_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cell_global_id_r16:
      HANDLE_CODE(c.get<cgi_info_eutra_s>().unpack(bref));
      break;
    case types::pci_arfcn_r16:
      HANDLE_CODE(c.get<pci_arfcn_eutra_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"cellGlobalId-r16", "pci-arfcn-r16"};
  return convert_enum_idx(
      names, 2, value, "visited_cell_info_r16_s::visited_cell_id_r16_c_::eutra_cell_id_r16_c_::types");
}

const char* visited_cell_info_r16_s::visited_cell_id_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"nr-CellId-r16", "eutra-CellId-r16"};
  return convert_enum_idx(names, 2, value, "visited_cell_info_r16_s::visited_cell_id_r16_c_::types");
}

// DRB-CountInfo ::= SEQUENCE
SRSASN_CODE drb_count_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(pack_integer(bref, count_ul, (uint64_t)0u, (uint64_t)4294967295u));
  HANDLE_CODE(pack_integer(bref, count_dl, (uint64_t)0u, (uint64_t)4294967295u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE drb_count_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(unpack_integer(count_ul, bref, (uint64_t)0u, (uint64_t)4294967295u));
  HANDLE_CODE(unpack_integer(count_dl, bref, (uint64_t)0u, (uint64_t)4294967295u));

  return SRSASN_SUCCESS;
}
void drb_count_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("drb-Identity", drb_id);
  j.write_int("count-Uplink", count_ul);
  j.write_int("count-Downlink", count_dl);
  j.end_obj();
}

// FailureInfoDAPS-r16 ::= SEQUENCE
SRSASN_CODE fail_info_daps_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(fail_type_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE fail_info_daps_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(fail_type_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void fail_info_daps_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("failureType-r16", fail_type_r16.to_string());
  j.end_obj();
}

const char* fail_info_daps_r16_s::fail_type_r16_opts::to_string() const
{
  static const char* names[] = {"daps-failure", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "fail_info_daps_r16_s::fail_type_r16_e_");
}

// MBS-ServiceInfo-r17 ::= SEQUENCE
SRSASN_CODE mbs_service_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(tmgi_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mbs_service_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(tmgi_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void mbs_service_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("tmgi-r17");
  tmgi_r17.to_json(j);
  j.end_obj();
}

// MeasReportAppLayer-r17 ::= SEQUENCE
SRSASN_CODE meas_report_app_layer_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_report_app_layer_container_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(app_layer_session_status_r17_present, 1));
  HANDLE_CODE(bref.pack(ran_visible_meass_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, meas_cfg_app_layer_id_r17, (uint8_t)0u, (uint8_t)15u));
  if (meas_report_app_layer_container_r17.size() > 0) {
    HANDLE_CODE(meas_report_app_layer_container_r17.pack(bref));
  }
  if (app_layer_session_status_r17_present) {
    HANDLE_CODE(app_layer_session_status_r17.pack(bref));
  }
  if (ran_visible_meass_r17_present) {
    HANDLE_CODE(ran_visible_meass_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_report_app_layer_r17_s::unpack(cbit_ref& bref)
{
  bool meas_report_app_layer_container_r17_present;
  HANDLE_CODE(bref.unpack(meas_report_app_layer_container_r17_present, 1));
  HANDLE_CODE(bref.unpack(app_layer_session_status_r17_present, 1));
  HANDLE_CODE(bref.unpack(ran_visible_meass_r17_present, 1));

  HANDLE_CODE(unpack_integer(meas_cfg_app_layer_id_r17, bref, (uint8_t)0u, (uint8_t)15u));
  if (meas_report_app_layer_container_r17_present) {
    HANDLE_CODE(meas_report_app_layer_container_r17.unpack(bref));
  }
  if (app_layer_session_status_r17_present) {
    HANDLE_CODE(app_layer_session_status_r17.unpack(bref));
  }
  if (ran_visible_meass_r17_present) {
    HANDLE_CODE(ran_visible_meass_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_report_app_layer_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("measConfigAppLayerId-r17", meas_cfg_app_layer_id_r17);
  if (meas_report_app_layer_container_r17.size() > 0) {
    j.write_str("measReportAppLayerContainer-r17", meas_report_app_layer_container_r17.to_string());
  }
  if (app_layer_session_status_r17_present) {
    j.write_str("appLayerSessionStatus-r17", app_layer_session_status_r17.to_string());
  }
  if (ran_visible_meass_r17_present) {
    j.write_fieldname("ran-VisibleMeasurements-r17");
    ran_visible_meass_r17.to_json(j);
  }
  j.end_obj();
}

const char* meas_report_app_layer_r17_s::app_layer_session_status_r17_opts::to_string() const
{
  static const char* names[] = {"started", "stopped"};
  return convert_enum_idx(names, 2, value, "meas_report_app_layer_r17_s::app_layer_session_status_r17_e_");
}

// MeasResultCLI-r16 ::= SEQUENCE
SRSASN_CODE meas_result_cli_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_result_list_srs_rsrp_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_result_list_cli_rssi_r16.size() > 0, 1));

  if (meas_result_list_srs_rsrp_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_list_srs_rsrp_r16, 1, 8));
  }
  if (meas_result_list_cli_rssi_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_list_cli_rssi_r16, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_cli_r16_s::unpack(cbit_ref& bref)
{
  bool meas_result_list_srs_rsrp_r16_present;
  HANDLE_CODE(bref.unpack(meas_result_list_srs_rsrp_r16_present, 1));
  bool meas_result_list_cli_rssi_r16_present;
  HANDLE_CODE(bref.unpack(meas_result_list_cli_rssi_r16_present, 1));

  if (meas_result_list_srs_rsrp_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_list_srs_rsrp_r16, bref, 1, 8));
  }
  if (meas_result_list_cli_rssi_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_list_cli_rssi_r16, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void meas_result_cli_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_result_list_srs_rsrp_r16.size() > 0) {
    j.start_array("measResultListSRS-RSRP-r16");
    for (const auto& e1 : meas_result_list_srs_rsrp_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_result_list_cli_rssi_r16.size() > 0) {
    j.start_array("measResultListCLI-RSSI-r16");
    for (const auto& e1 : meas_result_list_cli_rssi_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// MeasResultForRSSI-r16 ::= SEQUENCE
SRSASN_CODE meas_result_for_rssi_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rssi_result_r16, (uint8_t)0u, (uint8_t)76u));
  HANDLE_CODE(pack_integer(bref, ch_occupancy_r16, (uint8_t)0u, (uint8_t)100u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_for_rssi_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rssi_result_r16, bref, (uint8_t)0u, (uint8_t)76u));
  HANDLE_CODE(unpack_integer(ch_occupancy_r16, bref, (uint8_t)0u, (uint8_t)100u));

  return SRSASN_SUCCESS;
}
void meas_result_for_rssi_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rssi-Result-r16", rssi_result_r16);
  j.write_int("channelOccupancy-r16", ch_occupancy_r16);
  j.end_obj();
}

// MeasResultIdleEUTRA-r16 ::= SEQUENCE
SRSASN_CODE meas_result_idle_eutra_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_dyn_seq_of(bref, meas_results_per_carrier_list_idle_eutra_r16, 1, 8));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_idle_eutra_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_dyn_seq_of(meas_results_per_carrier_list_idle_eutra_r16, bref, 1, 8));

  return SRSASN_SUCCESS;
}
void meas_result_idle_eutra_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("measResultsPerCarrierListIdleEUTRA-r16");
  for (const auto& e1 : meas_results_per_carrier_list_idle_eutra_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// MeasResultIdleNR-r16 ::= SEQUENCE
SRSASN_CODE meas_result_idle_nr_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_results_per_carrier_list_idle_nr_r16.size() > 0, 1));

  HANDLE_CODE(bref.pack(meas_result_serving_cell_r16.rsrp_result_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_result_serving_cell_r16.rsrq_result_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_result_serving_cell_r16.results_ssb_idxes_r16.size() > 0, 1));
  if (meas_result_serving_cell_r16.rsrp_result_r16_present) {
    HANDLE_CODE(pack_integer(bref, meas_result_serving_cell_r16.rsrp_result_r16, (uint8_t)0u, (uint8_t)127u));
  }
  if (meas_result_serving_cell_r16.rsrq_result_r16_present) {
    HANDLE_CODE(pack_integer(bref, meas_result_serving_cell_r16.rsrq_result_r16, (uint8_t)0u, (uint8_t)127u));
  }
  if (meas_result_serving_cell_r16.results_ssb_idxes_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_serving_cell_r16.results_ssb_idxes_r16, 1, 32));
  }
  if (meas_results_per_carrier_list_idle_nr_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_results_per_carrier_list_idle_nr_r16, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_idle_nr_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool meas_results_per_carrier_list_idle_nr_r16_present;
  HANDLE_CODE(bref.unpack(meas_results_per_carrier_list_idle_nr_r16_present, 1));

  HANDLE_CODE(bref.unpack(meas_result_serving_cell_r16.rsrp_result_r16_present, 1));
  HANDLE_CODE(bref.unpack(meas_result_serving_cell_r16.rsrq_result_r16_present, 1));
  bool results_ssb_idxes_r16_present;
  HANDLE_CODE(bref.unpack(results_ssb_idxes_r16_present, 1));
  if (meas_result_serving_cell_r16.rsrp_result_r16_present) {
    HANDLE_CODE(unpack_integer(meas_result_serving_cell_r16.rsrp_result_r16, bref, (uint8_t)0u, (uint8_t)127u));
  }
  if (meas_result_serving_cell_r16.rsrq_result_r16_present) {
    HANDLE_CODE(unpack_integer(meas_result_serving_cell_r16.rsrq_result_r16, bref, (uint8_t)0u, (uint8_t)127u));
  }
  if (results_ssb_idxes_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_serving_cell_r16.results_ssb_idxes_r16, bref, 1, 32));
  }
  if (meas_results_per_carrier_list_idle_nr_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_results_per_carrier_list_idle_nr_r16, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void meas_result_idle_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("measResultServingCell-r16");
  j.start_obj();
  if (meas_result_serving_cell_r16.rsrp_result_r16_present) {
    j.write_int("rsrp-Result-r16", meas_result_serving_cell_r16.rsrp_result_r16);
  }
  if (meas_result_serving_cell_r16.rsrq_result_r16_present) {
    j.write_int("rsrq-Result-r16", meas_result_serving_cell_r16.rsrq_result_r16);
  }
  if (meas_result_serving_cell_r16.results_ssb_idxes_r16.size() > 0) {
    j.start_array("resultsSSB-Indexes-r16");
    for (const auto& e1 : meas_result_serving_cell_r16.results_ssb_idxes_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
  if (meas_results_per_carrier_list_idle_nr_r16.size() > 0) {
    j.start_array("measResultsPerCarrierListIdleNR-r16");
    for (const auto& e1 : meas_results_per_carrier_list_idle_nr_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// MeasResultRLFNR-r16 ::= SEQUENCE
SRSASN_CODE meas_result_rlf_nr_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_result_r16.rs_idx_results_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_result_r16.cell_results_r16.results_ssb_cell_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_result_r16.cell_results_r16.results_csi_rs_cell_r16_present, 1));
  if (meas_result_r16.cell_results_r16.results_ssb_cell_r16_present) {
    HANDLE_CODE(meas_result_r16.cell_results_r16.results_ssb_cell_r16.pack(bref));
  }
  if (meas_result_r16.cell_results_r16.results_csi_rs_cell_r16_present) {
    HANDLE_CODE(meas_result_r16.cell_results_r16.results_csi_rs_cell_r16.pack(bref));
  }
  if (meas_result_r16.rs_idx_results_r16_present) {
    HANDLE_CODE(bref.pack(meas_result_r16.rs_idx_results_r16.results_ssb_idxes_r16.size() > 0, 1));
    HANDLE_CODE(bref.pack(meas_result_r16.rs_idx_results_r16.ssb_rlm_cfg_bitmap_r16_present, 1));
    HANDLE_CODE(bref.pack(meas_result_r16.rs_idx_results_r16.results_csi_rs_idxes_r16.size() > 0, 1));
    HANDLE_CODE(bref.pack(meas_result_r16.rs_idx_results_r16.csi_rs_rlm_cfg_bitmap_r16_present, 1));
    if (meas_result_r16.rs_idx_results_r16.results_ssb_idxes_r16.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_r16.rs_idx_results_r16.results_ssb_idxes_r16, 1, 64));
    }
    if (meas_result_r16.rs_idx_results_r16.ssb_rlm_cfg_bitmap_r16_present) {
      HANDLE_CODE(meas_result_r16.rs_idx_results_r16.ssb_rlm_cfg_bitmap_r16.pack(bref));
    }
    if (meas_result_r16.rs_idx_results_r16.results_csi_rs_idxes_r16.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_r16.rs_idx_results_r16.results_csi_rs_idxes_r16, 1, 64));
    }
    if (meas_result_r16.rs_idx_results_r16.csi_rs_rlm_cfg_bitmap_r16_present) {
      HANDLE_CODE(meas_result_r16.rs_idx_results_r16.csi_rs_rlm_cfg_bitmap_r16.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_rlf_nr_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_result_r16.rs_idx_results_r16_present, 1));
  HANDLE_CODE(bref.unpack(meas_result_r16.cell_results_r16.results_ssb_cell_r16_present, 1));
  HANDLE_CODE(bref.unpack(meas_result_r16.cell_results_r16.results_csi_rs_cell_r16_present, 1));
  if (meas_result_r16.cell_results_r16.results_ssb_cell_r16_present) {
    HANDLE_CODE(meas_result_r16.cell_results_r16.results_ssb_cell_r16.unpack(bref));
  }
  if (meas_result_r16.cell_results_r16.results_csi_rs_cell_r16_present) {
    HANDLE_CODE(meas_result_r16.cell_results_r16.results_csi_rs_cell_r16.unpack(bref));
  }
  if (meas_result_r16.rs_idx_results_r16_present) {
    bool results_ssb_idxes_r16_present;
    HANDLE_CODE(bref.unpack(results_ssb_idxes_r16_present, 1));
    HANDLE_CODE(bref.unpack(meas_result_r16.rs_idx_results_r16.ssb_rlm_cfg_bitmap_r16_present, 1));
    bool results_csi_rs_idxes_r16_present;
    HANDLE_CODE(bref.unpack(results_csi_rs_idxes_r16_present, 1));
    HANDLE_CODE(bref.unpack(meas_result_r16.rs_idx_results_r16.csi_rs_rlm_cfg_bitmap_r16_present, 1));
    if (results_ssb_idxes_r16_present) {
      HANDLE_CODE(unpack_dyn_seq_of(meas_result_r16.rs_idx_results_r16.results_ssb_idxes_r16, bref, 1, 64));
    }
    if (meas_result_r16.rs_idx_results_r16.ssb_rlm_cfg_bitmap_r16_present) {
      HANDLE_CODE(meas_result_r16.rs_idx_results_r16.ssb_rlm_cfg_bitmap_r16.unpack(bref));
    }
    if (results_csi_rs_idxes_r16_present) {
      HANDLE_CODE(unpack_dyn_seq_of(meas_result_r16.rs_idx_results_r16.results_csi_rs_idxes_r16, bref, 1, 64));
    }
    if (meas_result_r16.rs_idx_results_r16.csi_rs_rlm_cfg_bitmap_r16_present) {
      HANDLE_CODE(meas_result_r16.rs_idx_results_r16.csi_rs_rlm_cfg_bitmap_r16.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void meas_result_rlf_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("measResult-r16");
  j.start_obj();
  j.write_fieldname("cellResults-r16");
  j.start_obj();
  if (meas_result_r16.cell_results_r16.results_ssb_cell_r16_present) {
    j.write_fieldname("resultsSSB-Cell-r16");
    meas_result_r16.cell_results_r16.results_ssb_cell_r16.to_json(j);
  }
  if (meas_result_r16.cell_results_r16.results_csi_rs_cell_r16_present) {
    j.write_fieldname("resultsCSI-RS-Cell-r16");
    meas_result_r16.cell_results_r16.results_csi_rs_cell_r16.to_json(j);
  }
  j.end_obj();
  if (meas_result_r16.rs_idx_results_r16_present) {
    j.write_fieldname("rsIndexResults-r16");
    j.start_obj();
    if (meas_result_r16.rs_idx_results_r16.results_ssb_idxes_r16.size() > 0) {
      j.start_array("resultsSSB-Indexes-r16");
      for (const auto& e1 : meas_result_r16.rs_idx_results_r16.results_ssb_idxes_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (meas_result_r16.rs_idx_results_r16.ssb_rlm_cfg_bitmap_r16_present) {
      j.write_str("ssbRLMConfigBitmap-r16", meas_result_r16.rs_idx_results_r16.ssb_rlm_cfg_bitmap_r16.to_string());
    }
    if (meas_result_r16.rs_idx_results_r16.results_csi_rs_idxes_r16.size() > 0) {
      j.start_array("resultsCSI-RS-Indexes-r16");
      for (const auto& e1 : meas_result_r16.rs_idx_results_r16.results_csi_rs_idxes_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (meas_result_r16.rs_idx_results_r16.csi_rs_rlm_cfg_bitmap_r16_present) {
      j.write_str("csi-rsRLMConfigBitmap-r16",
                  meas_result_r16.rs_idx_results_r16.csi_rs_rlm_cfg_bitmap_r16.to_string());
    }
    j.end_obj();
  }
  j.end_obj();
  j.end_obj();
}

// MeasResultRxTxTimeDiff-r17 ::= SEQUENCE
SRSASN_CODE meas_result_rx_tx_time_diff_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(rx_tx_time_diff_ue_r17_present, 1));

  if (rx_tx_time_diff_ue_r17_present) {
    HANDLE_CODE(rx_tx_time_diff_ue_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_rx_tx_time_diff_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(rx_tx_time_diff_ue_r17_present, 1));

  if (rx_tx_time_diff_ue_r17_present) {
    HANDLE_CODE(rx_tx_time_diff_ue_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_result_rx_tx_time_diff_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rx_tx_time_diff_ue_r17_present) {
    j.write_fieldname("rxTxTimeDiff-ue-r17");
    rx_tx_time_diff_ue_r17.to_json(j);
  }
  j.end_obj();
}

// MeasResultSFTD-EUTRA ::= SEQUENCE
SRSASN_CODE meas_result_sftd_eutra_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rsrp_result_present, 1));

  HANDLE_CODE(pack_integer(bref, eutra_pci, (uint16_t)0u, (uint16_t)503u));
  HANDLE_CODE(pack_integer(bref, sfn_offset_result, (uint16_t)0u, (uint16_t)1023u));
  HANDLE_CODE(pack_integer(bref, frame_boundary_offset_result, (int16_t)-30720, (int16_t)30719));
  if (rsrp_result_present) {
    HANDLE_CODE(pack_integer(bref, rsrp_result, (uint8_t)0u, (uint8_t)127u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_sftd_eutra_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(rsrp_result_present, 1));

  HANDLE_CODE(unpack_integer(eutra_pci, bref, (uint16_t)0u, (uint16_t)503u));
  HANDLE_CODE(unpack_integer(sfn_offset_result, bref, (uint16_t)0u, (uint16_t)1023u));
  HANDLE_CODE(unpack_integer(frame_boundary_offset_result, bref, (int16_t)-30720, (int16_t)30719));
  if (rsrp_result_present) {
    HANDLE_CODE(unpack_integer(rsrp_result, bref, (uint8_t)0u, (uint8_t)127u));
  }

  return SRSASN_SUCCESS;
}
void meas_result_sftd_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("eutra-PhysCellId", eutra_pci);
  j.write_int("sfn-OffsetResult", sfn_offset_result);
  j.write_int("frameBoundaryOffsetResult", frame_boundary_offset_result);
  if (rsrp_result_present) {
    j.write_int("rsrp-Result", rsrp_result);
  }
  j.end_obj();
}

// MeasResultsSL-r16 ::= SEQUENCE
SRSASN_CODE meas_results_sl_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(meas_results_list_sl_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_results_sl_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(meas_results_list_sl_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void meas_results_sl_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("measResultsListSL-r16");
  meas_results_list_sl_r16.to_json(j);
  j.end_obj();
}

void meas_results_sl_r16_s::meas_results_list_sl_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("measResultNR-SL-r16");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE meas_results_sl_r16_s::meas_results_list_sl_r16_c_::pack(bit_ref& bref) const
{
  pack_enum(bref, type());
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_results_sl_r16_s::meas_results_list_sl_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  unpack_enum(e, bref);
  if (e != type()) {
    log_invalid_choice_id(e, "meas_results_sl_r16_s::meas_results_list_sl_r16_c_");
    return SRSASN_ERROR_DECODE_FAIL;
  }
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* meas_results_sl_r16_s::meas_results_list_sl_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"measResultNR-SL-r16"};
  return convert_enum_idx(names, 1, value, "meas_results_sl_r16_s::meas_results_list_sl_r16_c_::types");
}

// OverheatingAssistance ::= SEQUENCE
SRSASN_CODE overheat_assist_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(reduced_max_ccs_present, 1));
  HANDLE_CODE(bref.pack(reduced_max_bw_fr1_present, 1));
  HANDLE_CODE(bref.pack(reduced_max_bw_fr2_present, 1));
  HANDLE_CODE(bref.pack(reduced_max_mimo_layers_fr1_present, 1));
  HANDLE_CODE(bref.pack(reduced_max_mimo_layers_fr2_present, 1));

  if (reduced_max_ccs_present) {
    HANDLE_CODE(reduced_max_ccs.pack(bref));
  }
  if (reduced_max_bw_fr1_present) {
    HANDLE_CODE(reduced_max_bw_fr1.pack(bref));
  }
  if (reduced_max_bw_fr2_present) {
    HANDLE_CODE(reduced_max_bw_fr2.pack(bref));
  }
  if (reduced_max_mimo_layers_fr1_present) {
    HANDLE_CODE(reduced_max_mimo_layers_fr1.reduced_mimo_layers_fr1_dl.pack(bref));
    HANDLE_CODE(reduced_max_mimo_layers_fr1.reduced_mimo_layers_fr1_ul.pack(bref));
  }
  if (reduced_max_mimo_layers_fr2_present) {
    HANDLE_CODE(reduced_max_mimo_layers_fr2.reduced_mimo_layers_fr2_dl.pack(bref));
    HANDLE_CODE(reduced_max_mimo_layers_fr2.reduced_mimo_layers_fr2_ul.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE overheat_assist_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(reduced_max_ccs_present, 1));
  HANDLE_CODE(bref.unpack(reduced_max_bw_fr1_present, 1));
  HANDLE_CODE(bref.unpack(reduced_max_bw_fr2_present, 1));
  HANDLE_CODE(bref.unpack(reduced_max_mimo_layers_fr1_present, 1));
  HANDLE_CODE(bref.unpack(reduced_max_mimo_layers_fr2_present, 1));

  if (reduced_max_ccs_present) {
    HANDLE_CODE(reduced_max_ccs.unpack(bref));
  }
  if (reduced_max_bw_fr1_present) {
    HANDLE_CODE(reduced_max_bw_fr1.unpack(bref));
  }
  if (reduced_max_bw_fr2_present) {
    HANDLE_CODE(reduced_max_bw_fr2.unpack(bref));
  }
  if (reduced_max_mimo_layers_fr1_present) {
    HANDLE_CODE(reduced_max_mimo_layers_fr1.reduced_mimo_layers_fr1_dl.unpack(bref));
    HANDLE_CODE(reduced_max_mimo_layers_fr1.reduced_mimo_layers_fr1_ul.unpack(bref));
  }
  if (reduced_max_mimo_layers_fr2_present) {
    HANDLE_CODE(reduced_max_mimo_layers_fr2.reduced_mimo_layers_fr2_dl.unpack(bref));
    HANDLE_CODE(reduced_max_mimo_layers_fr2.reduced_mimo_layers_fr2_ul.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void overheat_assist_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (reduced_max_ccs_present) {
    j.write_fieldname("reducedMaxCCs");
    reduced_max_ccs.to_json(j);
  }
  if (reduced_max_bw_fr1_present) {
    j.write_fieldname("reducedMaxBW-FR1");
    reduced_max_bw_fr1.to_json(j);
  }
  if (reduced_max_bw_fr2_present) {
    j.write_fieldname("reducedMaxBW-FR2");
    reduced_max_bw_fr2.to_json(j);
  }
  if (reduced_max_mimo_layers_fr1_present) {
    j.write_fieldname("reducedMaxMIMO-LayersFR1");
    j.start_obj();
    j.write_str("reducedMIMO-LayersFR1-DL", reduced_max_mimo_layers_fr1.reduced_mimo_layers_fr1_dl.to_string());
    j.write_str("reducedMIMO-LayersFR1-UL", reduced_max_mimo_layers_fr1.reduced_mimo_layers_fr1_ul.to_string());
    j.end_obj();
  }
  if (reduced_max_mimo_layers_fr2_present) {
    j.write_fieldname("reducedMaxMIMO-LayersFR2");
    j.start_obj();
    j.write_str("reducedMIMO-LayersFR2-DL", reduced_max_mimo_layers_fr2.reduced_mimo_layers_fr2_dl.to_string());
    j.write_str("reducedMIMO-LayersFR2-UL", reduced_max_mimo_layers_fr2.reduced_mimo_layers_fr2_ul.to_string());
    j.end_obj();
  }
  j.end_obj();
}

// RA-Report-r16 ::= SEQUENCE
SRSASN_CODE ra_report_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ra_info_common_r16_present, 1));

  HANDLE_CODE(cell_id_r16.pack(bref));
  if (ra_info_common_r16_present) {
    HANDLE_CODE(ra_info_common_r16.pack(bref));
  }
  HANDLE_CODE(ra_purpose_r16.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sp_cell_id_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sp_cell_id_r17.is_present(), 1));
      if (sp_cell_id_r17.is_present()) {
        HANDLE_CODE(sp_cell_id_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ra_report_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ra_info_common_r16_present, 1));

  HANDLE_CODE(cell_id_r16.unpack(bref));
  if (ra_info_common_r16_present) {
    HANDLE_CODE(ra_info_common_r16.unpack(bref));
  }
  HANDLE_CODE(ra_purpose_r16.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sp_cell_id_r17, bref);
      if (sp_cell_id_r17.is_present()) {
        HANDLE_CODE(sp_cell_id_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void ra_report_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("cellId-r16");
  cell_id_r16.to_json(j);
  if (ra_info_common_r16_present) {
    j.write_fieldname("ra-InformationCommon-r16");
    ra_info_common_r16.to_json(j);
  }
  j.write_str("raPurpose-r16", ra_purpose_r16.to_string());
  if (ext) {
    if (sp_cell_id_r17.is_present()) {
      j.write_fieldname("spCellID-r17");
      sp_cell_id_r17->to_json(j);
    }
  }
  j.end_obj();
}

void ra_report_r16_s::cell_id_r16_c_::destroy_()
{
  switch (type_) {
    case types::cell_global_id_r16:
      c.destroy<cgi_info_logging_r16_s>();
      break;
    case types::pci_arfcn_r16:
      c.destroy<pci_arfcn_nr_r16_s>();
      break;
    default:
      break;
  }
}
void ra_report_r16_s::cell_id_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::cell_global_id_r16:
      c.init<cgi_info_logging_r16_s>();
      break;
    case types::pci_arfcn_r16:
      c.init<pci_arfcn_nr_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ra_report_r16_s::cell_id_r16_c_");
  }
}
ra_report_r16_s::cell_id_r16_c_::cell_id_r16_c_(const ra_report_r16_s::cell_id_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::cell_global_id_r16:
      c.init(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::pci_arfcn_r16:
      c.init(other.c.get<pci_arfcn_nr_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ra_report_r16_s::cell_id_r16_c_");
  }
}
ra_report_r16_s::cell_id_r16_c_&
ra_report_r16_s::cell_id_r16_c_::operator=(const ra_report_r16_s::cell_id_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::cell_global_id_r16:
      c.set(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::pci_arfcn_r16:
      c.set(other.c.get<pci_arfcn_nr_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ra_report_r16_s::cell_id_r16_c_");
  }

  return *this;
}
cgi_info_logging_r16_s& ra_report_r16_s::cell_id_r16_c_::set_cell_global_id_r16()
{
  set(types::cell_global_id_r16);
  return c.get<cgi_info_logging_r16_s>();
}
pci_arfcn_nr_r16_s& ra_report_r16_s::cell_id_r16_c_::set_pci_arfcn_r16()
{
  set(types::pci_arfcn_r16);
  return c.get<pci_arfcn_nr_r16_s>();
}
void ra_report_r16_s::cell_id_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cell_global_id_r16:
      j.write_fieldname("cellGlobalId-r16");
      c.get<cgi_info_logging_r16_s>().to_json(j);
      break;
    case types::pci_arfcn_r16:
      j.write_fieldname("pci-arfcn-r16");
      c.get<pci_arfcn_nr_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ra_report_r16_s::cell_id_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE ra_report_r16_s::cell_id_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cell_global_id_r16:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().pack(bref));
      break;
    case types::pci_arfcn_r16:
      HANDLE_CODE(c.get<pci_arfcn_nr_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ra_report_r16_s::cell_id_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ra_report_r16_s::cell_id_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cell_global_id_r16:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().unpack(bref));
      break;
    case types::pci_arfcn_r16:
      HANDLE_CODE(c.get<pci_arfcn_nr_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ra_report_r16_s::cell_id_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ra_report_r16_s::cell_id_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"cellGlobalId-r16", "pci-arfcn-r16"};
  return convert_enum_idx(names, 2, value, "ra_report_r16_s::cell_id_r16_c_::types");
}

const char* ra_report_r16_s::ra_purpose_r16_opts::to_string() const
{
  static const char* names[] = {"accessRelated",
                                "beamFailureRecovery",
                                "reconfigurationWithSync",
                                "ulUnSynchronized",
                                "schedulingRequestFailure",
                                "noPUCCHResourceAvailable",
                                "requestForOtherSI",
                                "msg3RequestForOtherSI-r17",
                                "spare8",
                                "spare7",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "ra_report_r16_s::ra_purpose_r16_e_");
}
uint8_t ra_report_r16_s::ra_purpose_r16_opts::to_number() const
{
  if (value == msg3_request_for_other_si_r17) {
    return 3;
  }
  invalid_enum_number(value, "ra_report_r16_s::ra_purpose_r16_e_");
  return 0;
}

// RRCReconfigurationComplete-v1560-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_complete_v1560_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(scg_resp_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (scg_resp_present) {
    HANDLE_CODE(scg_resp.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_v1560_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(scg_resp_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (scg_resp_present) {
    HANDLE_CODE(scg_resp.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_complete_v1560_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (scg_resp_present) {
    j.write_fieldname("scg-Response");
    scg_resp.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

void rrc_recfg_complete_v1560_ies_s::scg_resp_c_::destroy_()
{
  switch (type_) {
    case types::nr_scg_resp:
      c.destroy<dyn_octstring>();
      break;
    case types::eutra_scg_resp:
      c.destroy<dyn_octstring>();
      break;
    default:
      break;
  }
}
void rrc_recfg_complete_v1560_ies_s::scg_resp_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::nr_scg_resp:
      c.init<dyn_octstring>();
      break;
    case types::eutra_scg_resp:
      c.init<dyn_octstring>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_complete_v1560_ies_s::scg_resp_c_");
  }
}
rrc_recfg_complete_v1560_ies_s::scg_resp_c_::scg_resp_c_(const rrc_recfg_complete_v1560_ies_s::scg_resp_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::nr_scg_resp:
      c.init(other.c.get<dyn_octstring>());
      break;
    case types::eutra_scg_resp:
      c.init(other.c.get<dyn_octstring>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_complete_v1560_ies_s::scg_resp_c_");
  }
}
rrc_recfg_complete_v1560_ies_s::scg_resp_c_&
rrc_recfg_complete_v1560_ies_s::scg_resp_c_::operator=(const rrc_recfg_complete_v1560_ies_s::scg_resp_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::nr_scg_resp:
      c.set(other.c.get<dyn_octstring>());
      break;
    case types::eutra_scg_resp:
      c.set(other.c.get<dyn_octstring>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_complete_v1560_ies_s::scg_resp_c_");
  }

  return *this;
}
dyn_octstring& rrc_recfg_complete_v1560_ies_s::scg_resp_c_::set_nr_scg_resp()
{
  set(types::nr_scg_resp);
  return c.get<dyn_octstring>();
}
dyn_octstring& rrc_recfg_complete_v1560_ies_s::scg_resp_c_::set_eutra_scg_resp()
{
  set(types::eutra_scg_resp);
  return c.get<dyn_octstring>();
}
void rrc_recfg_complete_v1560_ies_s::scg_resp_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::nr_scg_resp:
      j.write_str("nr-SCG-Response", c.get<dyn_octstring>().to_string());
      break;
    case types::eutra_scg_resp:
      j.write_str("eutra-SCG-Response", c.get<dyn_octstring>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_complete_v1560_ies_s::scg_resp_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_recfg_complete_v1560_ies_s::scg_resp_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::nr_scg_resp:
      HANDLE_CODE(c.get<dyn_octstring>().pack(bref));
      break;
    case types::eutra_scg_resp:
      HANDLE_CODE(c.get<dyn_octstring>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_complete_v1560_ies_s::scg_resp_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_v1560_ies_s::scg_resp_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::nr_scg_resp:
      HANDLE_CODE(c.get<dyn_octstring>().unpack(bref));
      break;
    case types::eutra_scg_resp:
      HANDLE_CODE(c.get<dyn_octstring>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_complete_v1560_ies_s::scg_resp_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_recfg_complete_v1560_ies_s::scg_resp_c_::types_opts::to_string() const
{
  static const char* names[] = {"nr-SCG-Response", "eutra-SCG-Response"};
  return convert_enum_idx(names, 2, value, "rrc_recfg_complete_v1560_ies_s::scg_resp_c_::types");
}

// RRCResumeComplete-v1640-IEs ::= SEQUENCE
SRSASN_CODE rrc_resume_complete_v1640_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_tx_direct_current_two_carrier_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ul_tx_direct_current_two_carrier_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ul_tx_direct_current_two_carrier_list_r16, 1, 64));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_complete_v1640_ies_s::unpack(cbit_ref& bref)
{
  bool ul_tx_direct_current_two_carrier_list_r16_present;
  HANDLE_CODE(bref.unpack(ul_tx_direct_current_two_carrier_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ul_tx_direct_current_two_carrier_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ul_tx_direct_current_two_carrier_list_r16, bref, 1, 64));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_resume_complete_v1640_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_tx_direct_current_two_carrier_list_r16.size() > 0) {
    j.start_array("uplinkTxDirectCurrentTwoCarrierList-r16");
    for (const auto& e1 : ul_tx_direct_current_two_carrier_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCSetupComplete-v1690-IEs ::= SEQUENCE
SRSASN_CODE rrc_setup_complete_v1690_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_rrc_segmentation_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_setup_complete_v1690_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ul_rrc_segmentation_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_setup_complete_v1690_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_rrc_segmentation_r16_present) {
    j.write_str("ul-RRC-Segmentation-r16", "true");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// SL-Failure-r16 ::= SEQUENCE
SRSASN_CODE sl_fail_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(sl_dest_id_r16.pack(bref));
  HANDLE_CODE(sl_fail_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_fail_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(sl_dest_id_r16.unpack(bref));
  HANDLE_CODE(sl_fail_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_fail_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sl-DestinationIdentity-r16", sl_dest_id_r16.to_string());
  j.write_str("sl-Failure-r16", sl_fail_r16.to_string());
  j.end_obj();
}

const char* sl_fail_r16_s::sl_fail_r16_opts::to_string() const
{
  static const char* names[] = {
      "rlf", "configFailure", "drxReject-v1710", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "sl_fail_r16_s::sl_fail_r16_e_");
}

// SuccessHO-Report-r17 ::= SEQUENCE
SRSASN_CODE success_ho_report_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_result_neigh_cells_r17_present, 1));
  HANDLE_CODE(bref.pack(location_info_r17_present, 1));
  HANDLE_CODE(bref.pack(time_since_cho_recfg_r17_present, 1));
  HANDLE_CODE(bref.pack(shr_cause_r17_present, 1));
  HANDLE_CODE(bref.pack(ra_info_common_r17_present, 1));
  HANDLE_CODE(bref.pack(up_interruption_time_at_ho_r17_present, 1));
  HANDLE_CODE(bref.pack(c_rnti_r17_present, 1));

  HANDLE_CODE(bref.pack(source_cell_info_r17.source_cell_meas_r17_present, 1));
  HANDLE_CODE(bref.pack(source_cell_info_r17.rlf_in_source_daps_r17_present, 1));
  HANDLE_CODE(source_cell_info_r17.source_pcell_id_r17.pack(bref));
  if (source_cell_info_r17.source_cell_meas_r17_present) {
    HANDLE_CODE(source_cell_info_r17.source_cell_meas_r17.pack(bref));
  }
  HANDLE_CODE(bref.pack(target_cell_info_r17.target_cell_meas_r17_present, 1));
  HANDLE_CODE(target_cell_info_r17.target_pcell_id_r17.pack(bref));
  if (target_cell_info_r17.target_cell_meas_r17_present) {
    HANDLE_CODE(target_cell_info_r17.target_cell_meas_r17.pack(bref));
  }
  if (meas_result_neigh_cells_r17_present) {
    HANDLE_CODE(bref.pack(meas_result_neigh_cells_r17.meas_result_list_nr_r17.size() > 0, 1));
    HANDLE_CODE(bref.pack(meas_result_neigh_cells_r17.meas_result_list_eutra_r17.size() > 0, 1));
    if (meas_result_neigh_cells_r17.meas_result_list_nr_r17.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_neigh_cells_r17.meas_result_list_nr_r17, 1, 8));
    }
    if (meas_result_neigh_cells_r17.meas_result_list_eutra_r17.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_neigh_cells_r17.meas_result_list_eutra_r17, 1, 8));
    }
  }
  if (location_info_r17_present) {
    HANDLE_CODE(location_info_r17.pack(bref));
  }
  if (time_since_cho_recfg_r17_present) {
    HANDLE_CODE(pack_integer(bref, time_since_cho_recfg_r17, (uint16_t)0u, (uint16_t)1023u));
  }
  if (shr_cause_r17_present) {
    HANDLE_CODE(shr_cause_r17.pack(bref));
  }
  if (ra_info_common_r17_present) {
    HANDLE_CODE(ra_info_common_r17.pack(bref));
  }
  if (up_interruption_time_at_ho_r17_present) {
    HANDLE_CODE(pack_integer(bref, up_interruption_time_at_ho_r17, (uint16_t)0u, (uint16_t)1023u));
  }
  if (c_rnti_r17_present) {
    HANDLE_CODE(pack_integer(bref, c_rnti_r17, (uint32_t)0u, (uint32_t)65535u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE success_ho_report_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(meas_result_neigh_cells_r17_present, 1));
  HANDLE_CODE(bref.unpack(location_info_r17_present, 1));
  HANDLE_CODE(bref.unpack(time_since_cho_recfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(shr_cause_r17_present, 1));
  HANDLE_CODE(bref.unpack(ra_info_common_r17_present, 1));
  HANDLE_CODE(bref.unpack(up_interruption_time_at_ho_r17_present, 1));
  HANDLE_CODE(bref.unpack(c_rnti_r17_present, 1));

  HANDLE_CODE(bref.unpack(source_cell_info_r17.source_cell_meas_r17_present, 1));
  HANDLE_CODE(bref.unpack(source_cell_info_r17.rlf_in_source_daps_r17_present, 1));
  HANDLE_CODE(source_cell_info_r17.source_pcell_id_r17.unpack(bref));
  if (source_cell_info_r17.source_cell_meas_r17_present) {
    HANDLE_CODE(source_cell_info_r17.source_cell_meas_r17.unpack(bref));
  }
  HANDLE_CODE(bref.unpack(target_cell_info_r17.target_cell_meas_r17_present, 1));
  HANDLE_CODE(target_cell_info_r17.target_pcell_id_r17.unpack(bref));
  if (target_cell_info_r17.target_cell_meas_r17_present) {
    HANDLE_CODE(target_cell_info_r17.target_cell_meas_r17.unpack(bref));
  }
  if (meas_result_neigh_cells_r17_present) {
    bool meas_result_list_nr_r17_present;
    HANDLE_CODE(bref.unpack(meas_result_list_nr_r17_present, 1));
    bool meas_result_list_eutra_r17_present;
    HANDLE_CODE(bref.unpack(meas_result_list_eutra_r17_present, 1));
    if (meas_result_list_nr_r17_present) {
      HANDLE_CODE(unpack_dyn_seq_of(meas_result_neigh_cells_r17.meas_result_list_nr_r17, bref, 1, 8));
    }
    if (meas_result_list_eutra_r17_present) {
      HANDLE_CODE(unpack_dyn_seq_of(meas_result_neigh_cells_r17.meas_result_list_eutra_r17, bref, 1, 8));
    }
  }
  if (location_info_r17_present) {
    HANDLE_CODE(location_info_r17.unpack(bref));
  }
  if (time_since_cho_recfg_r17_present) {
    HANDLE_CODE(unpack_integer(time_since_cho_recfg_r17, bref, (uint16_t)0u, (uint16_t)1023u));
  }
  if (shr_cause_r17_present) {
    HANDLE_CODE(shr_cause_r17.unpack(bref));
  }
  if (ra_info_common_r17_present) {
    HANDLE_CODE(ra_info_common_r17.unpack(bref));
  }
  if (up_interruption_time_at_ho_r17_present) {
    HANDLE_CODE(unpack_integer(up_interruption_time_at_ho_r17, bref, (uint16_t)0u, (uint16_t)1023u));
  }
  if (c_rnti_r17_present) {
    HANDLE_CODE(unpack_integer(c_rnti_r17, bref, (uint32_t)0u, (uint32_t)65535u));
  }

  return SRSASN_SUCCESS;
}
void success_ho_report_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sourceCellInfo-r17");
  j.start_obj();
  j.write_fieldname("sourcePCellId-r17");
  source_cell_info_r17.source_pcell_id_r17.to_json(j);
  if (source_cell_info_r17.source_cell_meas_r17_present) {
    j.write_fieldname("sourceCellMeas-r17");
    source_cell_info_r17.source_cell_meas_r17.to_json(j);
  }
  if (source_cell_info_r17.rlf_in_source_daps_r17_present) {
    j.write_str("rlf-InSourceDAPS-r17", "true");
  }
  j.end_obj();
  j.write_fieldname("targetCellInfo-r17");
  j.start_obj();
  j.write_fieldname("targetPCellId-r17");
  target_cell_info_r17.target_pcell_id_r17.to_json(j);
  if (target_cell_info_r17.target_cell_meas_r17_present) {
    j.write_fieldname("targetCellMeas-r17");
    target_cell_info_r17.target_cell_meas_r17.to_json(j);
  }
  j.end_obj();
  if (meas_result_neigh_cells_r17_present) {
    j.write_fieldname("measResultNeighCells-r17");
    j.start_obj();
    if (meas_result_neigh_cells_r17.meas_result_list_nr_r17.size() > 0) {
      j.start_array("measResultListNR-r17");
      for (const auto& e1 : meas_result_neigh_cells_r17.meas_result_list_nr_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (meas_result_neigh_cells_r17.meas_result_list_eutra_r17.size() > 0) {
      j.start_array("measResultListEUTRA-r17");
      for (const auto& e1 : meas_result_neigh_cells_r17.meas_result_list_eutra_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    j.end_obj();
  }
  if (location_info_r17_present) {
    j.write_fieldname("locationInfo-r17");
    location_info_r17.to_json(j);
  }
  if (time_since_cho_recfg_r17_present) {
    j.write_int("timeSinceCHO-Reconfig-r17", time_since_cho_recfg_r17);
  }
  if (shr_cause_r17_present) {
    j.write_fieldname("shr-Cause-r17");
    shr_cause_r17.to_json(j);
  }
  if (ra_info_common_r17_present) {
    j.write_fieldname("ra-InformationCommon-r17");
    ra_info_common_r17.to_json(j);
  }
  if (up_interruption_time_at_ho_r17_present) {
    j.write_int("upInterruptionTimeAtHO-r17", up_interruption_time_at_ho_r17);
  }
  if (c_rnti_r17_present) {
    j.write_int("c-RNTI-r17", c_rnti_r17);
  }
  j.end_obj();
}

// UE-CapabilityRAT-Container ::= SEQUENCE
SRSASN_CODE ue_cap_rat_container_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(rat_type.pack(bref));
  HANDLE_CODE(ue_cap_rat_container.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_rat_container_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(rat_type.unpack(bref));
  HANDLE_CODE(ue_cap_rat_container.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_cap_rat_container_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("rat-Type", rat_type.to_string());
  j.write_str("ue-CapabilityRAT-Container", ue_cap_rat_container.to_string());
  j.end_obj();
}

// UE-TxTEG-Association-r17 ::= SEQUENCE
SRSASN_CODE ue_tx_teg_assoc_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(serv_cell_id_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, ue_tx_teg_id_r17, (uint8_t)0u, (uint8_t)7u));
  HANDLE_CODE(nr_time_stamp_r17.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, associated_srs_pos_res_id_list_r17, 1, 64, integer_packer<uint8_t>(0, 63)));
  if (serv_cell_id_r17_present) {
    HANDLE_CODE(pack_integer(bref, serv_cell_id_r17, (uint8_t)0u, (uint8_t)31u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_tx_teg_assoc_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(serv_cell_id_r17_present, 1));

  HANDLE_CODE(unpack_integer(ue_tx_teg_id_r17, bref, (uint8_t)0u, (uint8_t)7u));
  HANDLE_CODE(nr_time_stamp_r17.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(associated_srs_pos_res_id_list_r17, bref, 1, 64, integer_packer<uint8_t>(0, 63)));
  if (serv_cell_id_r17_present) {
    HANDLE_CODE(unpack_integer(serv_cell_id_r17, bref, (uint8_t)0u, (uint8_t)31u));
  }

  return SRSASN_SUCCESS;
}
void ue_tx_teg_assoc_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("ue-TxTEG-ID-r17", ue_tx_teg_id_r17);
  j.write_fieldname("nr-TimeStamp-r17");
  nr_time_stamp_r17.to_json(j);
  j.start_array("associatedSRS-PosResourceIdList-r17");
  for (const auto& e1 : associated_srs_pos_res_id_list_r17) {
    j.write_int(e1);
  }
  j.end_array();
  if (serv_cell_id_r17_present) {
    j.write_int("servCellId-r17", serv_cell_id_r17);
  }
  j.end_obj();
}

// UEAssistanceInformation-v1610-IEs ::= SEQUENCE
SRSASN_CODE ue_assist_info_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(idc_assist_r16_present, 1));
  HANDLE_CODE(bref.pack(drx_pref_r16_present, 1));
  HANDLE_CODE(bref.pack(max_bw_pref_r16_present, 1));
  HANDLE_CODE(bref.pack(max_cc_pref_r16_present, 1));
  HANDLE_CODE(bref.pack(max_mimo_layer_pref_r16_present, 1));
  HANDLE_CODE(bref.pack(min_sched_offset_pref_r16_present, 1));
  HANDLE_CODE(bref.pack(release_pref_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ue_assist_info_nr_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ref_time_info_pref_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (idc_assist_r16_present) {
    HANDLE_CODE(idc_assist_r16.pack(bref));
  }
  if (drx_pref_r16_present) {
    HANDLE_CODE(drx_pref_r16.pack(bref));
  }
  if (max_bw_pref_r16_present) {
    HANDLE_CODE(max_bw_pref_r16.pack(bref));
  }
  if (max_cc_pref_r16_present) {
    HANDLE_CODE(max_cc_pref_r16.pack(bref));
  }
  if (max_mimo_layer_pref_r16_present) {
    HANDLE_CODE(max_mimo_layer_pref_r16.pack(bref));
  }
  if (min_sched_offset_pref_r16_present) {
    HANDLE_CODE(min_sched_offset_pref_r16.pack(bref));
  }
  if (release_pref_r16_present) {
    HANDLE_CODE(release_pref_r16.pack(bref));
  }
  if (sl_ue_assist_info_nr_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_ue_assist_info_nr_r16, 1, 8));
  }
  if (ref_time_info_pref_r16_present) {
    HANDLE_CODE(bref.pack(ref_time_info_pref_r16, 1));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_assist_info_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(idc_assist_r16_present, 1));
  HANDLE_CODE(bref.unpack(drx_pref_r16_present, 1));
  HANDLE_CODE(bref.unpack(max_bw_pref_r16_present, 1));
  HANDLE_CODE(bref.unpack(max_cc_pref_r16_present, 1));
  HANDLE_CODE(bref.unpack(max_mimo_layer_pref_r16_present, 1));
  HANDLE_CODE(bref.unpack(min_sched_offset_pref_r16_present, 1));
  HANDLE_CODE(bref.unpack(release_pref_r16_present, 1));
  bool sl_ue_assist_info_nr_r16_present;
  HANDLE_CODE(bref.unpack(sl_ue_assist_info_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(ref_time_info_pref_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (idc_assist_r16_present) {
    HANDLE_CODE(idc_assist_r16.unpack(bref));
  }
  if (drx_pref_r16_present) {
    HANDLE_CODE(drx_pref_r16.unpack(bref));
  }
  if (max_bw_pref_r16_present) {
    HANDLE_CODE(max_bw_pref_r16.unpack(bref));
  }
  if (max_cc_pref_r16_present) {
    HANDLE_CODE(max_cc_pref_r16.unpack(bref));
  }
  if (max_mimo_layer_pref_r16_present) {
    HANDLE_CODE(max_mimo_layer_pref_r16.unpack(bref));
  }
  if (min_sched_offset_pref_r16_present) {
    HANDLE_CODE(min_sched_offset_pref_r16.unpack(bref));
  }
  if (release_pref_r16_present) {
    HANDLE_CODE(release_pref_r16.unpack(bref));
  }
  if (sl_ue_assist_info_nr_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_ue_assist_info_nr_r16, bref, 1, 8));
  }
  if (ref_time_info_pref_r16_present) {
    HANDLE_CODE(bref.unpack(ref_time_info_pref_r16, 1));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_assist_info_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (idc_assist_r16_present) {
    j.write_fieldname("idc-Assistance-r16");
    idc_assist_r16.to_json(j);
  }
  if (drx_pref_r16_present) {
    j.write_fieldname("drx-Preference-r16");
    drx_pref_r16.to_json(j);
  }
  if (max_bw_pref_r16_present) {
    j.write_fieldname("maxBW-Preference-r16");
    max_bw_pref_r16.to_json(j);
  }
  if (max_cc_pref_r16_present) {
    j.write_fieldname("maxCC-Preference-r16");
    max_cc_pref_r16.to_json(j);
  }
  if (max_mimo_layer_pref_r16_present) {
    j.write_fieldname("maxMIMO-LayerPreference-r16");
    max_mimo_layer_pref_r16.to_json(j);
  }
  if (min_sched_offset_pref_r16_present) {
    j.write_fieldname("minSchedulingOffsetPreference-r16");
    min_sched_offset_pref_r16.to_json(j);
  }
  if (release_pref_r16_present) {
    j.write_fieldname("releasePreference-r16");
    release_pref_r16.to_json(j);
  }
  if (sl_ue_assist_info_nr_r16.size() > 0) {
    j.start_array("sl-UE-AssistanceInformationNR-r16");
    for (const auto& e1 : sl_ue_assist_info_nr_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ref_time_info_pref_r16_present) {
    j.write_bool("referenceTimeInfoPreference-r16", ref_time_info_pref_r16);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// DelayBudgetReport ::= CHOICE
void delay_budget_report_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("type1", c.to_string());
  j.end_obj();
}
SRSASN_CODE delay_budget_report_c::pack(bit_ref& bref) const
{
  pack_enum(bref, type());
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE delay_budget_report_c::unpack(cbit_ref& bref)
{
  types e;
  unpack_enum(e, bref);
  if (e != type()) {
    log_invalid_choice_id(e, "delay_budget_report_c");
    return SRSASN_ERROR_DECODE_FAIL;
  }
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* delay_budget_report_c::type1_opts::to_string() const
{
  static const char* names[] = {"msMinus1280",
                                "msMinus640",
                                "msMinus320",
                                "msMinus160",
                                "msMinus80",
                                "msMinus60",
                                "msMinus40",
                                "msMinus20",
                                "ms0",
                                "ms20",
                                "ms40",
                                "ms60",
                                "ms80",
                                "ms160",
                                "ms320",
                                "ms640",
                                "ms1280"};
  return convert_enum_idx(names, 17, value, "delay_budget_report_c::type1_e_");
}
int16_t delay_budget_report_c::type1_opts::to_number() const
{
  static const int16_t numbers[] = {
      -1280, -640, -320, -160, -80, -60, -40, -20, 0, 20, 40, 60, 80, 160, 320, 640, 1280};
  return map_enum_number(numbers, 17, value, "delay_budget_report_c::type1_e_");
}

const char* delay_budget_report_c::types_opts::to_string() const
{
  static const char* names[] = {"type1"};
  return convert_enum_idx(names, 1, value, "delay_budget_report_c::types");
}
uint8_t delay_budget_report_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "delay_budget_report_c::types");
}

// FailureInfoRLC-Bearer ::= SEQUENCE
SRSASN_CODE fail_info_rlc_bearer_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, cell_group_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(pack_integer(bref, lc_ch_id, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(fail_type.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE fail_info_rlc_bearer_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(cell_group_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(unpack_integer(lc_ch_id, bref, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(fail_type.unpack(bref));

  return SRSASN_SUCCESS;
}
void fail_info_rlc_bearer_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("cellGroupId", cell_group_id);
  j.write_int("logicalChannelIdentity", lc_ch_id);
  j.write_str("failureType", fail_type.to_string());
  j.end_obj();
}

const char* fail_info_rlc_bearer_s::fail_type_opts::to_string() const
{
  static const char* names[] = {"rlc-failure", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "fail_info_rlc_bearer_s::fail_type_e_");
}

// FailureInformation-v1610-IEs ::= SEQUENCE
SRSASN_CODE fail_info_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fail_info_daps_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (fail_info_daps_r16_present) {
    HANDLE_CODE(fail_info_daps_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE fail_info_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(fail_info_daps_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (fail_info_daps_r16_present) {
    HANDLE_CODE(fail_info_daps_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void fail_info_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (fail_info_daps_r16_present) {
    j.write_fieldname("failureInfoDAPS-r16");
    fail_info_daps_r16.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// FailureReportMCG-r16 ::= SEQUENCE
SRSASN_CODE fail_report_mcg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(fail_type_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_result_freq_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_result_freq_list_eutra_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_result_scg_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_result_scg_eutra_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_result_freq_list_utra_fdd_r16.size() > 0, 1));

  if (fail_type_r16_present) {
    HANDLE_CODE(fail_type_r16.pack(bref));
  }
  if (meas_result_freq_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_freq_list_r16, 1, 8));
  }
  if (meas_result_freq_list_eutra_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_freq_list_eutra_r16, 1, 8));
  }
  if (meas_result_scg_r16.size() > 0) {
    HANDLE_CODE(meas_result_scg_r16.pack(bref));
  }
  if (meas_result_scg_eutra_r16.size() > 0) {
    HANDLE_CODE(meas_result_scg_eutra_r16.pack(bref));
  }
  if (meas_result_freq_list_utra_fdd_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_freq_list_utra_fdd_r16, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE fail_report_mcg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(fail_type_r16_present, 1));
  bool meas_result_freq_list_r16_present;
  HANDLE_CODE(bref.unpack(meas_result_freq_list_r16_present, 1));
  bool meas_result_freq_list_eutra_r16_present;
  HANDLE_CODE(bref.unpack(meas_result_freq_list_eutra_r16_present, 1));
  bool meas_result_scg_r16_present;
  HANDLE_CODE(bref.unpack(meas_result_scg_r16_present, 1));
  bool meas_result_scg_eutra_r16_present;
  HANDLE_CODE(bref.unpack(meas_result_scg_eutra_r16_present, 1));
  bool meas_result_freq_list_utra_fdd_r16_present;
  HANDLE_CODE(bref.unpack(meas_result_freq_list_utra_fdd_r16_present, 1));

  if (fail_type_r16_present) {
    HANDLE_CODE(fail_type_r16.unpack(bref));
  }
  if (meas_result_freq_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_freq_list_r16, bref, 1, 8));
  }
  if (meas_result_freq_list_eutra_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_freq_list_eutra_r16, bref, 1, 8));
  }
  if (meas_result_scg_r16_present) {
    HANDLE_CODE(meas_result_scg_r16.unpack(bref));
  }
  if (meas_result_scg_eutra_r16_present) {
    HANDLE_CODE(meas_result_scg_eutra_r16.unpack(bref));
  }
  if (meas_result_freq_list_utra_fdd_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_freq_list_utra_fdd_r16, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void fail_report_mcg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (fail_type_r16_present) {
    j.write_str("failureType-r16", fail_type_r16.to_string());
  }
  if (meas_result_freq_list_r16.size() > 0) {
    j.start_array("measResultFreqList-r16");
    for (const auto& e1 : meas_result_freq_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_result_freq_list_eutra_r16.size() > 0) {
    j.start_array("measResultFreqListEUTRA-r16");
    for (const auto& e1 : meas_result_freq_list_eutra_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_result_scg_r16.size() > 0) {
    j.write_str("measResultSCG-r16", meas_result_scg_r16.to_string());
  }
  if (meas_result_scg_eutra_r16.size() > 0) {
    j.write_str("measResultSCG-EUTRA-r16", meas_result_scg_eutra_r16.to_string());
  }
  if (meas_result_freq_list_utra_fdd_r16.size() > 0) {
    j.start_array("measResultFreqListUTRA-FDD-r16");
    for (const auto& e1 : meas_result_freq_list_utra_fdd_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

const char* fail_report_mcg_r16_s::fail_type_r16_opts::to_string() const
{
  static const char* names[] = {"t310-Expiry",
                                "randomAccessProblem",
                                "rlc-MaxNumRetx",
                                "t312-Expiry-r16",
                                "lbt-Failure-r16",
                                "beamFailureRecoveryFailure-r16",
                                "bh-RLF-r16",
                                "spare1"};
  return convert_enum_idx(names, 8, value, "fail_report_mcg_r16_s::fail_type_r16_e_");
}
uint16_t fail_report_mcg_r16_s::fail_type_r16_opts::to_number() const
{
  switch (value) {
    case t310_expiry:
      return 310;
    case t312_expiry_r16:
      return 312;
    default:
      invalid_enum_number(value, "fail_report_mcg_r16_s::fail_type_r16_e_");
  }
  return 0;
}

// FailureReportSCG ::= SEQUENCE
SRSASN_CODE fail_report_scg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_result_freq_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_result_scg_fail.size() > 0, 1));

  HANDLE_CODE(fail_type.pack(bref));
  if (meas_result_freq_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_freq_list, 1, 8));
  }
  if (meas_result_scg_fail.size() > 0) {
    HANDLE_CODE(meas_result_scg_fail.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= location_info_r16.is_present();
    group_flags[0] |= fail_type_v1610_present;
    group_flags[1] |= prev_pscell_id_r17.is_present();
    group_flags[1] |= failed_pscell_id_r17.is_present();
    group_flags[1] |= time_scg_fail_r17_present;
    group_flags[1] |= per_ra_info_list_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(location_info_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(fail_type_v1610_present, 1));
      if (location_info_r16.is_present()) {
        HANDLE_CODE(location_info_r16->pack(bref));
      }
      if (fail_type_v1610_present) {
        HANDLE_CODE(fail_type_v1610.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(prev_pscell_id_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(failed_pscell_id_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(time_scg_fail_r17_present, 1));
      HANDLE_CODE(bref.pack(per_ra_info_list_r17.is_present(), 1));
      if (prev_pscell_id_r17.is_present()) {
        HANDLE_CODE(pack_integer(bref, prev_pscell_id_r17->pci_r17, (uint16_t)0u, (uint16_t)1007u));
        HANDLE_CODE(pack_integer(bref, prev_pscell_id_r17->carrier_freq_r17, (uint32_t)0u, (uint32_t)3279165u));
      }
      if (failed_pscell_id_r17.is_present()) {
        HANDLE_CODE(pack_integer(bref, failed_pscell_id_r17->pci_r17, (uint16_t)0u, (uint16_t)1007u));
        HANDLE_CODE(pack_integer(bref, failed_pscell_id_r17->carrier_freq_r17, (uint32_t)0u, (uint32_t)3279165u));
      }
      if (time_scg_fail_r17_present) {
        HANDLE_CODE(pack_integer(bref, time_scg_fail_r17, (uint16_t)0u, (uint16_t)1023u));
      }
      if (per_ra_info_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *per_ra_info_list_r17, 1, 200));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE fail_report_scg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool meas_result_freq_list_present;
  HANDLE_CODE(bref.unpack(meas_result_freq_list_present, 1));
  bool meas_result_scg_fail_present;
  HANDLE_CODE(bref.unpack(meas_result_scg_fail_present, 1));

  HANDLE_CODE(fail_type.unpack(bref));
  if (meas_result_freq_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_freq_list, bref, 1, 8));
  }
  if (meas_result_scg_fail_present) {
    HANDLE_CODE(meas_result_scg_fail.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(location_info_r16, bref);
      HANDLE_CODE(bref.unpack(fail_type_v1610_present, 1));
      if (location_info_r16.is_present()) {
        HANDLE_CODE(location_info_r16->unpack(bref));
      }
      if (fail_type_v1610_present) {
        HANDLE_CODE(fail_type_v1610.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(prev_pscell_id_r17, bref);
      unpack_presence_flag(failed_pscell_id_r17, bref);
      HANDLE_CODE(bref.unpack(time_scg_fail_r17_present, 1));
      unpack_presence_flag(per_ra_info_list_r17, bref);
      if (prev_pscell_id_r17.is_present()) {
        HANDLE_CODE(unpack_integer(prev_pscell_id_r17->pci_r17, bref, (uint16_t)0u, (uint16_t)1007u));
        HANDLE_CODE(unpack_integer(prev_pscell_id_r17->carrier_freq_r17, bref, (uint32_t)0u, (uint32_t)3279165u));
      }
      if (failed_pscell_id_r17.is_present()) {
        HANDLE_CODE(unpack_integer(failed_pscell_id_r17->pci_r17, bref, (uint16_t)0u, (uint16_t)1007u));
        HANDLE_CODE(unpack_integer(failed_pscell_id_r17->carrier_freq_r17, bref, (uint32_t)0u, (uint32_t)3279165u));
      }
      if (time_scg_fail_r17_present) {
        HANDLE_CODE(unpack_integer(time_scg_fail_r17, bref, (uint16_t)0u, (uint16_t)1023u));
      }
      if (per_ra_info_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*per_ra_info_list_r17, bref, 1, 200));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void fail_report_scg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("failureType", fail_type.to_string());
  if (meas_result_freq_list.size() > 0) {
    j.start_array("measResultFreqList");
    for (const auto& e1 : meas_result_freq_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_result_scg_fail.size() > 0) {
    j.write_str("measResultSCG-Failure", meas_result_scg_fail.to_string());
  }
  if (ext) {
    if (location_info_r16.is_present()) {
      j.write_fieldname("locationInfo-r16");
      location_info_r16->to_json(j);
    }
    if (fail_type_v1610_present) {
      j.write_str("failureType-v1610", fail_type_v1610.to_string());
    }
    if (prev_pscell_id_r17.is_present()) {
      j.write_fieldname("previousPSCellId-r17");
      j.start_obj();
      j.write_int("physCellId-r17", prev_pscell_id_r17->pci_r17);
      j.write_int("carrierFreq-r17", prev_pscell_id_r17->carrier_freq_r17);
      j.end_obj();
    }
    if (failed_pscell_id_r17.is_present()) {
      j.write_fieldname("failedPSCellId-r17");
      j.start_obj();
      j.write_int("physCellId-r17", failed_pscell_id_r17->pci_r17);
      j.write_int("carrierFreq-r17", failed_pscell_id_r17->carrier_freq_r17);
      j.end_obj();
    }
    if (time_scg_fail_r17_present) {
      j.write_int("timeSCGFailure-r17", time_scg_fail_r17);
    }
    if (per_ra_info_list_r17.is_present()) {
      j.start_array("perRAInfoList-r17");
      for (const auto& e1 : *per_ra_info_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

const char* fail_report_scg_s::fail_type_opts::to_string() const
{
  static const char* names[] = {"t310-Expiry",
                                "randomAccessProblem",
                                "rlc-MaxNumRetx",
                                "synchReconfigFailureSCG",
                                "scg-ReconfigFailure",
                                "srb3-IntegrityFailure",
                                "other-r16",
                                "spare1"};
  return convert_enum_idx(names, 8, value, "fail_report_scg_s::fail_type_e_");
}
uint16_t fail_report_scg_s::fail_type_opts::to_number() const
{
  switch (value) {
    case t310_expiry:
      return 310;
    case srb3_integrity_fail:
      return 3;
    default:
      invalid_enum_number(value, "fail_report_scg_s::fail_type_e_");
  }
  return 0;
}

const char* fail_report_scg_s::fail_type_v1610_opts::to_string() const
{
  static const char* names[] = {"scg-lbtFailure-r16",
                                "beamFailureRecoveryFailure-r16",
                                "t312-Expiry-r16",
                                "bh-RLF-r16",
                                "beamFailure-r17",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 8, value, "fail_report_scg_s::fail_type_v1610_e_");
}
uint16_t fail_report_scg_s::fail_type_v1610_opts::to_number() const
{
  if (value == t312_expiry_r16) {
    return 312;
  }
  invalid_enum_number(value, "fail_report_scg_s::fail_type_v1610_e_");
  return 0;
}

// FailureReportSCG-EUTRA ::= SEQUENCE
SRSASN_CODE fail_report_scg_eutra_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_result_freq_list_mrdc.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_result_scg_fail_mrdc.size() > 0, 1));

  HANDLE_CODE(fail_type.pack(bref));
  if (meas_result_freq_list_mrdc.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_freq_list_mrdc, 1, 8));
  }
  if (meas_result_scg_fail_mrdc.size() > 0) {
    HANDLE_CODE(meas_result_scg_fail_mrdc.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= location_info_r16.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(location_info_r16.is_present(), 1));
      if (location_info_r16.is_present()) {
        HANDLE_CODE(location_info_r16->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE fail_report_scg_eutra_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool meas_result_freq_list_mrdc_present;
  HANDLE_CODE(bref.unpack(meas_result_freq_list_mrdc_present, 1));
  bool meas_result_scg_fail_mrdc_present;
  HANDLE_CODE(bref.unpack(meas_result_scg_fail_mrdc_present, 1));

  HANDLE_CODE(fail_type.unpack(bref));
  if (meas_result_freq_list_mrdc_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_freq_list_mrdc, bref, 1, 8));
  }
  if (meas_result_scg_fail_mrdc_present) {
    HANDLE_CODE(meas_result_scg_fail_mrdc.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(location_info_r16, bref);
      if (location_info_r16.is_present()) {
        HANDLE_CODE(location_info_r16->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void fail_report_scg_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("failureType", fail_type.to_string());
  if (meas_result_freq_list_mrdc.size() > 0) {
    j.start_array("measResultFreqListMRDC");
    for (const auto& e1 : meas_result_freq_list_mrdc) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_result_scg_fail_mrdc.size() > 0) {
    j.write_str("measResultSCG-FailureMRDC", meas_result_scg_fail_mrdc.to_string());
  }
  if (ext) {
    if (location_info_r16.is_present()) {
      j.write_fieldname("locationInfo-r16");
      location_info_r16->to_json(j);
    }
  }
  j.end_obj();
}

const char* fail_report_scg_eutra_s::fail_type_opts::to_string() const
{
  static const char* names[] = {"t313-Expiry",
                                "randomAccessProblem",
                                "rlc-MaxNumRetx",
                                "scg-ChangeFailure",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 8, value, "fail_report_scg_eutra_s::fail_type_e_");
}
uint16_t fail_report_scg_eutra_s::fail_type_opts::to_number() const
{
  static const uint16_t numbers[] = {313};
  return map_enum_number(numbers, 1, value, "fail_report_scg_eutra_s::fail_type_e_");
}

// IAB-IP-AddressAndTraffic-r16 ::= SEQUENCE
SRSASN_CODE iab_ip_address_and_traffic_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(all_traffic_iab_ip_address_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(f1_c_traffic_ip_address_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(f1_u_traffic_ip_address_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_f1_traffic_ip_address_r16.size() > 0, 1));

  if (all_traffic_iab_ip_address_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, all_traffic_iab_ip_address_r16, 1, 8));
  }
  if (f1_c_traffic_ip_address_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, f1_c_traffic_ip_address_r16, 1, 8));
  }
  if (f1_u_traffic_ip_address_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, f1_u_traffic_ip_address_r16, 1, 8));
  }
  if (non_f1_traffic_ip_address_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, non_f1_traffic_ip_address_r16, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_ip_address_and_traffic_r16_s::unpack(cbit_ref& bref)
{
  bool all_traffic_iab_ip_address_r16_present;
  HANDLE_CODE(bref.unpack(all_traffic_iab_ip_address_r16_present, 1));
  bool f1_c_traffic_ip_address_r16_present;
  HANDLE_CODE(bref.unpack(f1_c_traffic_ip_address_r16_present, 1));
  bool f1_u_traffic_ip_address_r16_present;
  HANDLE_CODE(bref.unpack(f1_u_traffic_ip_address_r16_present, 1));
  bool non_f1_traffic_ip_address_r16_present;
  HANDLE_CODE(bref.unpack(non_f1_traffic_ip_address_r16_present, 1));

  if (all_traffic_iab_ip_address_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(all_traffic_iab_ip_address_r16, bref, 1, 8));
  }
  if (f1_c_traffic_ip_address_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(f1_c_traffic_ip_address_r16, bref, 1, 8));
  }
  if (f1_u_traffic_ip_address_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(f1_u_traffic_ip_address_r16, bref, 1, 8));
  }
  if (non_f1_traffic_ip_address_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(non_f1_traffic_ip_address_r16, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void iab_ip_address_and_traffic_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (all_traffic_iab_ip_address_r16.size() > 0) {
    j.start_array("all-Traffic-IAB-IP-Address-r16");
    for (const auto& e1 : all_traffic_iab_ip_address_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (f1_c_traffic_ip_address_r16.size() > 0) {
    j.start_array("f1-C-Traffic-IP-Address-r16");
    for (const auto& e1 : f1_c_traffic_ip_address_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (f1_u_traffic_ip_address_r16.size() > 0) {
    j.start_array("f1-U-Traffic-IP-Address-r16");
    for (const auto& e1 : f1_u_traffic_ip_address_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_f1_traffic_ip_address_r16.size() > 0) {
    j.start_array("non-F1-Traffic-IP-Address-r16");
    for (const auto& e1 : non_f1_traffic_ip_address_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// IAB-IP-AddressNumReq-r16 ::= SEQUENCE
SRSASN_CODE iab_ip_address_num_req_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(all_traffic_num_req_r16_present, 1));
  HANDLE_CODE(bref.pack(f1_c_traffic_num_req_r16_present, 1));
  HANDLE_CODE(bref.pack(f1_u_traffic_num_req_r16_present, 1));
  HANDLE_CODE(bref.pack(non_f1_traffic_num_req_r16_present, 1));

  if (all_traffic_num_req_r16_present) {
    HANDLE_CODE(pack_integer(bref, all_traffic_num_req_r16, (uint8_t)1u, (uint8_t)8u));
  }
  if (f1_c_traffic_num_req_r16_present) {
    HANDLE_CODE(pack_integer(bref, f1_c_traffic_num_req_r16, (uint8_t)1u, (uint8_t)8u));
  }
  if (f1_u_traffic_num_req_r16_present) {
    HANDLE_CODE(pack_integer(bref, f1_u_traffic_num_req_r16, (uint8_t)1u, (uint8_t)8u));
  }
  if (non_f1_traffic_num_req_r16_present) {
    HANDLE_CODE(pack_integer(bref, non_f1_traffic_num_req_r16, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_ip_address_num_req_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(all_traffic_num_req_r16_present, 1));
  HANDLE_CODE(bref.unpack(f1_c_traffic_num_req_r16_present, 1));
  HANDLE_CODE(bref.unpack(f1_u_traffic_num_req_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_f1_traffic_num_req_r16_present, 1));

  if (all_traffic_num_req_r16_present) {
    HANDLE_CODE(unpack_integer(all_traffic_num_req_r16, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (f1_c_traffic_num_req_r16_present) {
    HANDLE_CODE(unpack_integer(f1_c_traffic_num_req_r16, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (f1_u_traffic_num_req_r16_present) {
    HANDLE_CODE(unpack_integer(f1_u_traffic_num_req_r16, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (non_f1_traffic_num_req_r16_present) {
    HANDLE_CODE(unpack_integer(non_f1_traffic_num_req_r16, bref, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
void iab_ip_address_num_req_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (all_traffic_num_req_r16_present) {
    j.write_int("all-Traffic-NumReq-r16", all_traffic_num_req_r16);
  }
  if (f1_c_traffic_num_req_r16_present) {
    j.write_int("f1-C-Traffic-NumReq-r16", f1_c_traffic_num_req_r16);
  }
  if (f1_u_traffic_num_req_r16_present) {
    j.write_int("f1-U-Traffic-NumReq-r16", f1_u_traffic_num_req_r16);
  }
  if (non_f1_traffic_num_req_r16_present) {
    j.write_int("non-F1-Traffic-NumReq-r16", non_f1_traffic_num_req_r16);
  }
  j.end_obj();
}

// IAB-IP-AddressPrefixReq-r16 ::= SEQUENCE
SRSASN_CODE iab_ip_address_prefix_req_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(all_traffic_prefix_req_r16_present, 1));
  HANDLE_CODE(bref.pack(f1_c_traffic_prefix_req_r16_present, 1));
  HANDLE_CODE(bref.pack(f1_u_traffic_prefix_req_r16_present, 1));
  HANDLE_CODE(bref.pack(non_f1_traffic_prefix_req_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_ip_address_prefix_req_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(all_traffic_prefix_req_r16_present, 1));
  HANDLE_CODE(bref.unpack(f1_c_traffic_prefix_req_r16_present, 1));
  HANDLE_CODE(bref.unpack(f1_u_traffic_prefix_req_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_f1_traffic_prefix_req_r16_present, 1));

  return SRSASN_SUCCESS;
}
void iab_ip_address_prefix_req_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (all_traffic_prefix_req_r16_present) {
    j.write_str("all-Traffic-PrefixReq-r16", "true");
  }
  if (f1_c_traffic_prefix_req_r16_present) {
    j.write_str("f1-C-Traffic-PrefixReq-r16", "true");
  }
  if (f1_u_traffic_prefix_req_r16_present) {
    j.write_str("f1-U-Traffic-PrefixReq-r16", "true");
  }
  if (non_f1_traffic_prefix_req_r16_present) {
    j.write_str("non-F1-Traffic-PrefixReq-r16", "true");
  }
  j.end_obj();
}

// IAB-IP-PrefixAndTraffic-r16 ::= SEQUENCE
SRSASN_CODE iab_ip_prefix_and_traffic_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(all_traffic_iab_ip_address_r16_present, 1));
  HANDLE_CODE(bref.pack(f1_c_traffic_ip_address_r16_present, 1));
  HANDLE_CODE(bref.pack(f1_u_traffic_ip_address_r16_present, 1));
  HANDLE_CODE(bref.pack(non_f1_traffic_ip_address_r16_present, 1));

  if (all_traffic_iab_ip_address_r16_present) {
    HANDLE_CODE(all_traffic_iab_ip_address_r16.pack(bref));
  }
  if (f1_c_traffic_ip_address_r16_present) {
    HANDLE_CODE(f1_c_traffic_ip_address_r16.pack(bref));
  }
  if (f1_u_traffic_ip_address_r16_present) {
    HANDLE_CODE(f1_u_traffic_ip_address_r16.pack(bref));
  }
  if (non_f1_traffic_ip_address_r16_present) {
    HANDLE_CODE(non_f1_traffic_ip_address_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_ip_prefix_and_traffic_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(all_traffic_iab_ip_address_r16_present, 1));
  HANDLE_CODE(bref.unpack(f1_c_traffic_ip_address_r16_present, 1));
  HANDLE_CODE(bref.unpack(f1_u_traffic_ip_address_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_f1_traffic_ip_address_r16_present, 1));

  if (all_traffic_iab_ip_address_r16_present) {
    HANDLE_CODE(all_traffic_iab_ip_address_r16.unpack(bref));
  }
  if (f1_c_traffic_ip_address_r16_present) {
    HANDLE_CODE(f1_c_traffic_ip_address_r16.unpack(bref));
  }
  if (f1_u_traffic_ip_address_r16_present) {
    HANDLE_CODE(f1_u_traffic_ip_address_r16.unpack(bref));
  }
  if (non_f1_traffic_ip_address_r16_present) {
    HANDLE_CODE(non_f1_traffic_ip_address_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void iab_ip_prefix_and_traffic_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (all_traffic_iab_ip_address_r16_present) {
    j.write_fieldname("all-Traffic-IAB-IP-Address-r16");
    all_traffic_iab_ip_address_r16.to_json(j);
  }
  if (f1_c_traffic_ip_address_r16_present) {
    j.write_fieldname("f1-C-Traffic-IP-Address-r16");
    f1_c_traffic_ip_address_r16.to_json(j);
  }
  if (f1_u_traffic_ip_address_r16_present) {
    j.write_fieldname("f1-U-Traffic-IP-Address-r16");
    f1_u_traffic_ip_address_r16.to_json(j);
  }
  if (non_f1_traffic_ip_address_r16_present) {
    j.write_fieldname("non-F1-Traffic-IP-Address-r16");
    non_f1_traffic_ip_address_r16.to_json(j);
  }
  j.end_obj();
}

// LocationMeasurementInfo ::= CHOICE
void location_meas_info_c::destroy_()
{
  switch (type_) {
    case types::eutra_rstd:
      c.destroy<eutra_rstd_info_list_l>();
      break;
    case types::nr_prs_meas_r16:
      c.destroy<nr_prs_meas_info_list_r16_l>();
      break;
    default:
      break;
  }
}
void location_meas_info_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::eutra_rstd:
      c.init<eutra_rstd_info_list_l>();
      break;
    case types::eutra_fine_timing_detection:
      break;
    case types::nr_prs_meas_r16:
      c.init<nr_prs_meas_info_list_r16_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "location_meas_info_c");
  }
}
location_meas_info_c::location_meas_info_c(const location_meas_info_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::eutra_rstd:
      c.init(other.c.get<eutra_rstd_info_list_l>());
      break;
    case types::eutra_fine_timing_detection:
      break;
    case types::nr_prs_meas_r16:
      c.init(other.c.get<nr_prs_meas_info_list_r16_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "location_meas_info_c");
  }
}
location_meas_info_c& location_meas_info_c::operator=(const location_meas_info_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::eutra_rstd:
      c.set(other.c.get<eutra_rstd_info_list_l>());
      break;
    case types::eutra_fine_timing_detection:
      break;
    case types::nr_prs_meas_r16:
      c.set(other.c.get<nr_prs_meas_info_list_r16_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "location_meas_info_c");
  }

  return *this;
}
eutra_rstd_info_list_l& location_meas_info_c::set_eutra_rstd()
{
  set(types::eutra_rstd);
  return c.get<eutra_rstd_info_list_l>();
}
void location_meas_info_c::set_eutra_fine_timing_detection()
{
  set(types::eutra_fine_timing_detection);
}
nr_prs_meas_info_list_r16_l& location_meas_info_c::set_nr_prs_meas_r16()
{
  set(types::nr_prs_meas_r16);
  return c.get<nr_prs_meas_info_list_r16_l>();
}
void location_meas_info_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::eutra_rstd:
      j.start_array("eutra-RSTD");
      for (const auto& e1 : c.get<eutra_rstd_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::eutra_fine_timing_detection:
      break;
    case types::nr_prs_meas_r16:
      j.start_array("nr-PRS-Measurement-r16");
      for (const auto& e1 : c.get<nr_prs_meas_info_list_r16_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "location_meas_info_c");
  }
  j.end_obj();
}
SRSASN_CODE location_meas_info_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::eutra_rstd:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<eutra_rstd_info_list_l>(), 1, 3));
      break;
    case types::eutra_fine_timing_detection:
      break;
    case types::nr_prs_meas_r16: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<nr_prs_meas_info_list_r16_l>(), 1, 4));
    } break;
    default:
      log_invalid_choice_id(type_, "location_meas_info_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE location_meas_info_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::eutra_rstd:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<eutra_rstd_info_list_l>(), bref, 1, 3));
      break;
    case types::eutra_fine_timing_detection:
      break;
    case types::nr_prs_meas_r16: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(unpack_dyn_seq_of(c.get<nr_prs_meas_info_list_r16_l>(), bref, 1, 4));
    } break;
    default:
      log_invalid_choice_id(type_, "location_meas_info_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* location_meas_info_c::types_opts::to_string() const
{
  static const char* names[] = {"eutra-RSTD", "eutra-FineTimingDetection", "nr-PRS-Measurement-r16"};
  return convert_enum_idx(names, 3, value, "location_meas_info_c::types");
}

// LogMeasReport-r16 ::= SEQUENCE
SRSASN_CODE log_meas_report_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(log_meas_available_r16_present, 1));
  HANDLE_CODE(bref.pack(log_meas_available_bt_r16_present, 1));
  HANDLE_CODE(bref.pack(log_meas_available_wlan_r16_present, 1));

  HANDLE_CODE(absolute_time_stamp_r16.pack(bref));
  HANDLE_CODE(trace_ref_r16.pack(bref));
  HANDLE_CODE(trace_recording_session_ref_r16.pack(bref));
  HANDLE_CODE(tce_id_r16.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, log_meas_info_list_r16, 1, 520));

  return SRSASN_SUCCESS;
}
SRSASN_CODE log_meas_report_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(log_meas_available_r16_present, 1));
  HANDLE_CODE(bref.unpack(log_meas_available_bt_r16_present, 1));
  HANDLE_CODE(bref.unpack(log_meas_available_wlan_r16_present, 1));

  HANDLE_CODE(absolute_time_stamp_r16.unpack(bref));
  HANDLE_CODE(trace_ref_r16.unpack(bref));
  HANDLE_CODE(trace_recording_session_ref_r16.unpack(bref));
  HANDLE_CODE(tce_id_r16.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(log_meas_info_list_r16, bref, 1, 520));

  return SRSASN_SUCCESS;
}
void log_meas_report_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("absoluteTimeStamp-r16", absolute_time_stamp_r16.to_string());
  j.write_fieldname("traceReference-r16");
  trace_ref_r16.to_json(j);
  j.write_str("traceRecordingSessionRef-r16", trace_recording_session_ref_r16.to_string());
  j.write_str("tce-Id-r16", tce_id_r16.to_string());
  j.start_array("logMeasInfoList-r16");
  for (const auto& e1 : log_meas_info_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  if (log_meas_available_r16_present) {
    j.write_str("logMeasAvailable-r16", "true");
  }
  if (log_meas_available_bt_r16_present) {
    j.write_str("logMeasAvailableBT-r16", "true");
  }
  if (log_meas_available_wlan_r16_present) {
    j.write_str("logMeasAvailableWLAN-r16", "true");
  }
  j.end_obj();
}

// MeasResults ::= SEQUENCE
SRSASN_CODE meas_results_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_result_neigh_cells_present, 1));

  HANDLE_CODE(pack_integer(bref, meas_id, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_serving_mo_list, 1, 32));
  if (meas_result_neigh_cells_present) {
    HANDLE_CODE(meas_result_neigh_cells.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= meas_result_serv_freq_list_eutra_scg.is_present();
    group_flags[0] |= meas_result_serv_freq_list_nr_scg.is_present();
    group_flags[0] |= meas_result_sftd_eutra.is_present();
    group_flags[0] |= meas_result_sftd_nr.is_present();
    group_flags[1] |= meas_result_cell_list_sftd_nr.is_present();
    group_flags[2] |= meas_result_for_rssi_r16.is_present();
    group_flags[2] |= location_info_r16.is_present();
    group_flags[2] |= ul_pdcp_delay_value_result_list_r16.is_present();
    group_flags[2] |= meas_results_sl_r16.is_present();
    group_flags[2] |= meas_result_cli_r16.is_present();
    group_flags[3] |= meas_result_rx_tx_time_diff_r17.is_present();
    group_flags[3] |= sl_meas_result_serving_relay_r17.size() > 0;
    group_flags[3] |= ul_pdcp_excess_delay_result_list_r17.is_present();
    group_flags[3] |= coarse_location_info_r17.size() > 0;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(meas_result_serv_freq_list_eutra_scg.is_present(), 1));
      HANDLE_CODE(bref.pack(meas_result_serv_freq_list_nr_scg.is_present(), 1));
      HANDLE_CODE(bref.pack(meas_result_sftd_eutra.is_present(), 1));
      HANDLE_CODE(bref.pack(meas_result_sftd_nr.is_present(), 1));
      if (meas_result_serv_freq_list_eutra_scg.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *meas_result_serv_freq_list_eutra_scg, 1, 32));
      }
      if (meas_result_serv_freq_list_nr_scg.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *meas_result_serv_freq_list_nr_scg, 1, 32));
      }
      if (meas_result_sftd_eutra.is_present()) {
        HANDLE_CODE(meas_result_sftd_eutra->pack(bref));
      }
      if (meas_result_sftd_nr.is_present()) {
        HANDLE_CODE(meas_result_sftd_nr->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(meas_result_cell_list_sftd_nr.is_present(), 1));
      if (meas_result_cell_list_sftd_nr.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *meas_result_cell_list_sftd_nr, 1, 3));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(meas_result_for_rssi_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(location_info_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(ul_pdcp_delay_value_result_list_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(meas_results_sl_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(meas_result_cli_r16.is_present(), 1));
      if (meas_result_for_rssi_r16.is_present()) {
        HANDLE_CODE(meas_result_for_rssi_r16->pack(bref));
      }
      if (location_info_r16.is_present()) {
        HANDLE_CODE(location_info_r16->pack(bref));
      }
      if (ul_pdcp_delay_value_result_list_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *ul_pdcp_delay_value_result_list_r16, 1, 29));
      }
      if (meas_results_sl_r16.is_present()) {
        HANDLE_CODE(meas_results_sl_r16->pack(bref));
      }
      if (meas_result_cli_r16.is_present()) {
        HANDLE_CODE(meas_result_cli_r16->pack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(meas_result_rx_tx_time_diff_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(sl_meas_result_serving_relay_r17.size() > 0, 1));
      HANDLE_CODE(bref.pack(ul_pdcp_excess_delay_result_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(coarse_location_info_r17.size() > 0, 1));
      if (meas_result_rx_tx_time_diff_r17.is_present()) {
        HANDLE_CODE(meas_result_rx_tx_time_diff_r17->pack(bref));
      }
      if (sl_meas_result_serving_relay_r17.size() > 0) {
        HANDLE_CODE(sl_meas_result_serving_relay_r17.pack(bref));
      }
      if (ul_pdcp_excess_delay_result_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *ul_pdcp_excess_delay_result_list_r17, 1, 29));
      }
      if (coarse_location_info_r17.size() > 0) {
        HANDLE_CODE(coarse_location_info_r17.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_results_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(meas_result_neigh_cells_present, 1));

  HANDLE_CODE(unpack_integer(meas_id, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_dyn_seq_of(meas_result_serving_mo_list, bref, 1, 32));
  if (meas_result_neigh_cells_present) {
    HANDLE_CODE(meas_result_neigh_cells.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(4);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(meas_result_serv_freq_list_eutra_scg, bref);
      unpack_presence_flag(meas_result_serv_freq_list_nr_scg, bref);
      unpack_presence_flag(meas_result_sftd_eutra, bref);
      unpack_presence_flag(meas_result_sftd_nr, bref);
      if (meas_result_serv_freq_list_eutra_scg.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*meas_result_serv_freq_list_eutra_scg, bref, 1, 32));
      }
      if (meas_result_serv_freq_list_nr_scg.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*meas_result_serv_freq_list_nr_scg, bref, 1, 32));
      }
      if (meas_result_sftd_eutra.is_present()) {
        HANDLE_CODE(meas_result_sftd_eutra->unpack(bref));
      }
      if (meas_result_sftd_nr.is_present()) {
        HANDLE_CODE(meas_result_sftd_nr->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(meas_result_cell_list_sftd_nr, bref);
      if (meas_result_cell_list_sftd_nr.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*meas_result_cell_list_sftd_nr, bref, 1, 3));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(meas_result_for_rssi_r16, bref);
      unpack_presence_flag(location_info_r16, bref);
      unpack_presence_flag(ul_pdcp_delay_value_result_list_r16, bref);
      unpack_presence_flag(meas_results_sl_r16, bref);
      unpack_presence_flag(meas_result_cli_r16, bref);
      if (meas_result_for_rssi_r16.is_present()) {
        HANDLE_CODE(meas_result_for_rssi_r16->unpack(bref));
      }
      if (location_info_r16.is_present()) {
        HANDLE_CODE(location_info_r16->unpack(bref));
      }
      if (ul_pdcp_delay_value_result_list_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*ul_pdcp_delay_value_result_list_r16, bref, 1, 29));
      }
      if (meas_results_sl_r16.is_present()) {
        HANDLE_CODE(meas_results_sl_r16->unpack(bref));
      }
      if (meas_result_cli_r16.is_present()) {
        HANDLE_CODE(meas_result_cli_r16->unpack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(meas_result_rx_tx_time_diff_r17, bref);
      bool sl_meas_result_serving_relay_r17_present;
      HANDLE_CODE(bref.unpack(sl_meas_result_serving_relay_r17_present, 1));
      unpack_presence_flag(ul_pdcp_excess_delay_result_list_r17, bref);
      bool coarse_location_info_r17_present;
      HANDLE_CODE(bref.unpack(coarse_location_info_r17_present, 1));
      if (meas_result_rx_tx_time_diff_r17.is_present()) {
        HANDLE_CODE(meas_result_rx_tx_time_diff_r17->unpack(bref));
      }
      if (sl_meas_result_serving_relay_r17_present) {
        HANDLE_CODE(sl_meas_result_serving_relay_r17.unpack(bref));
      }
      if (ul_pdcp_excess_delay_result_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*ul_pdcp_excess_delay_result_list_r17, bref, 1, 29));
      }
      if (coarse_location_info_r17_present) {
        HANDLE_CODE(coarse_location_info_r17.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void meas_results_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("measId", meas_id);
  j.start_array("measResultServingMOList");
  for (const auto& e1 : meas_result_serving_mo_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (meas_result_neigh_cells_present) {
    j.write_fieldname("measResultNeighCells");
    meas_result_neigh_cells.to_json(j);
  }
  if (ext) {
    if (meas_result_serv_freq_list_eutra_scg.is_present()) {
      j.start_array("measResultServFreqListEUTRA-SCG");
      for (const auto& e1 : *meas_result_serv_freq_list_eutra_scg) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (meas_result_serv_freq_list_nr_scg.is_present()) {
      j.start_array("measResultServFreqListNR-SCG");
      for (const auto& e1 : *meas_result_serv_freq_list_nr_scg) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (meas_result_sftd_eutra.is_present()) {
      j.write_fieldname("measResultSFTD-EUTRA");
      meas_result_sftd_eutra->to_json(j);
    }
    if (meas_result_sftd_nr.is_present()) {
      j.write_fieldname("measResultSFTD-NR");
      meas_result_sftd_nr->to_json(j);
    }
    if (meas_result_cell_list_sftd_nr.is_present()) {
      j.start_array("measResultCellListSFTD-NR");
      for (const auto& e1 : *meas_result_cell_list_sftd_nr) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (meas_result_for_rssi_r16.is_present()) {
      j.write_fieldname("measResultForRSSI-r16");
      meas_result_for_rssi_r16->to_json(j);
    }
    if (location_info_r16.is_present()) {
      j.write_fieldname("locationInfo-r16");
      location_info_r16->to_json(j);
    }
    if (ul_pdcp_delay_value_result_list_r16.is_present()) {
      j.start_array("ul-PDCP-DelayValueResultList-r16");
      for (const auto& e1 : *ul_pdcp_delay_value_result_list_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (meas_results_sl_r16.is_present()) {
      j.write_fieldname("measResultsSL-r16");
      meas_results_sl_r16->to_json(j);
    }
    if (meas_result_cli_r16.is_present()) {
      j.write_fieldname("measResultCLI-r16");
      meas_result_cli_r16->to_json(j);
    }
    if (meas_result_rx_tx_time_diff_r17.is_present()) {
      j.write_fieldname("measResultRxTxTimeDiff-r17");
      meas_result_rx_tx_time_diff_r17->to_json(j);
    }
    if (sl_meas_result_serving_relay_r17.size() > 0) {
      j.write_str("sl-MeasResultServingRelay-r17", sl_meas_result_serving_relay_r17.to_string());
    }
    if (ul_pdcp_excess_delay_result_list_r17.is_present()) {
      j.start_array("ul-PDCP-ExcessDelayResultList-r17");
      for (const auto& e1 : *ul_pdcp_excess_delay_result_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (coarse_location_info_r17.size() > 0) {
      j.write_str("coarseLocationInfo-r17", coarse_location_info_r17.to_string());
    }
  }
  j.end_obj();
}

void meas_results_s::meas_result_neigh_cells_c_::destroy_()
{
  switch (type_) {
    case types::meas_result_list_nr:
      c.destroy<meas_result_list_nr_l>();
      break;
    case types::meas_result_list_eutra:
      c.destroy<meas_result_list_eutra_l>();
      break;
    case types::meas_result_list_utra_fdd_r16:
      c.destroy<meas_result_list_utra_fdd_r16_l>();
      break;
    case types::sl_meas_results_cand_relay_r17:
      c.destroy<dyn_octstring>();
      break;
    default:
      break;
  }
}
void meas_results_s::meas_result_neigh_cells_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::meas_result_list_nr:
      c.init<meas_result_list_nr_l>();
      break;
    case types::meas_result_list_eutra:
      c.init<meas_result_list_eutra_l>();
      break;
    case types::meas_result_list_utra_fdd_r16:
      c.init<meas_result_list_utra_fdd_r16_l>();
      break;
    case types::sl_meas_results_cand_relay_r17:
      c.init<dyn_octstring>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_results_s::meas_result_neigh_cells_c_");
  }
}
meas_results_s::meas_result_neigh_cells_c_::meas_result_neigh_cells_c_(
    const meas_results_s::meas_result_neigh_cells_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::meas_result_list_nr:
      c.init(other.c.get<meas_result_list_nr_l>());
      break;
    case types::meas_result_list_eutra:
      c.init(other.c.get<meas_result_list_eutra_l>());
      break;
    case types::meas_result_list_utra_fdd_r16:
      c.init(other.c.get<meas_result_list_utra_fdd_r16_l>());
      break;
    case types::sl_meas_results_cand_relay_r17:
      c.init(other.c.get<dyn_octstring>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_results_s::meas_result_neigh_cells_c_");
  }
}
meas_results_s::meas_result_neigh_cells_c_&
meas_results_s::meas_result_neigh_cells_c_::operator=(const meas_results_s::meas_result_neigh_cells_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::meas_result_list_nr:
      c.set(other.c.get<meas_result_list_nr_l>());
      break;
    case types::meas_result_list_eutra:
      c.set(other.c.get<meas_result_list_eutra_l>());
      break;
    case types::meas_result_list_utra_fdd_r16:
      c.set(other.c.get<meas_result_list_utra_fdd_r16_l>());
      break;
    case types::sl_meas_results_cand_relay_r17:
      c.set(other.c.get<dyn_octstring>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_results_s::meas_result_neigh_cells_c_");
  }

  return *this;
}
meas_result_list_nr_l& meas_results_s::meas_result_neigh_cells_c_::set_meas_result_list_nr()
{
  set(types::meas_result_list_nr);
  return c.get<meas_result_list_nr_l>();
}
meas_result_list_eutra_l& meas_results_s::meas_result_neigh_cells_c_::set_meas_result_list_eutra()
{
  set(types::meas_result_list_eutra);
  return c.get<meas_result_list_eutra_l>();
}
meas_result_list_utra_fdd_r16_l& meas_results_s::meas_result_neigh_cells_c_::set_meas_result_list_utra_fdd_r16()
{
  set(types::meas_result_list_utra_fdd_r16);
  return c.get<meas_result_list_utra_fdd_r16_l>();
}
dyn_octstring& meas_results_s::meas_result_neigh_cells_c_::set_sl_meas_results_cand_relay_r17()
{
  set(types::sl_meas_results_cand_relay_r17);
  return c.get<dyn_octstring>();
}
void meas_results_s::meas_result_neigh_cells_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::meas_result_list_nr:
      j.start_array("measResultListNR");
      for (const auto& e1 : c.get<meas_result_list_nr_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::meas_result_list_eutra:
      j.start_array("measResultListEUTRA");
      for (const auto& e1 : c.get<meas_result_list_eutra_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::meas_result_list_utra_fdd_r16:
      j.start_array("measResultListUTRA-FDD-r16");
      for (const auto& e1 : c.get<meas_result_list_utra_fdd_r16_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sl_meas_results_cand_relay_r17:
      j.write_str("sl-MeasResultsCandRelay-r17", c.get<dyn_octstring>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "meas_results_s::meas_result_neigh_cells_c_");
  }
  j.end_obj();
}
SRSASN_CODE meas_results_s::meas_result_neigh_cells_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::meas_result_list_nr:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<meas_result_list_nr_l>(), 1, 8));
      break;
    case types::meas_result_list_eutra: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<meas_result_list_eutra_l>(), 1, 8));
    } break;
    case types::meas_result_list_utra_fdd_r16: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<meas_result_list_utra_fdd_r16_l>(), 1, 8));
    } break;
    case types::sl_meas_results_cand_relay_r17: {
      varlength_field_pack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<dyn_octstring>().pack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "meas_results_s::meas_result_neigh_cells_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_results_s::meas_result_neigh_cells_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::meas_result_list_nr:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<meas_result_list_nr_l>(), bref, 1, 8));
      break;
    case types::meas_result_list_eutra: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(unpack_dyn_seq_of(c.get<meas_result_list_eutra_l>(), bref, 1, 8));
    } break;
    case types::meas_result_list_utra_fdd_r16: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(unpack_dyn_seq_of(c.get<meas_result_list_utra_fdd_r16_l>(), bref, 1, 8));
    } break;
    case types::sl_meas_results_cand_relay_r17: {
      varlength_field_unpack_guard varlen_scope(bref, false);
      HANDLE_CODE(c.get<dyn_octstring>().unpack(bref));
    } break;
    default:
      log_invalid_choice_id(type_, "meas_results_s::meas_result_neigh_cells_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* meas_results_s::meas_result_neigh_cells_c_::types_opts::to_string() const
{
  static const char* names[] = {
      "measResultListNR", "measResultListEUTRA", "measResultListUTRA-FDD-r16", "sl-MeasResultsCandRelay-r17"};
  return convert_enum_idx(names, 4, value, "meas_results_s::meas_result_neigh_cells_c_::types");
}

// PosSIB-ReqInfo-r16 ::= SEQUENCE
SRSASN_CODE pos_sib_req_info_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(gnss_id_r16_present, 1));
  HANDLE_CODE(bref.pack(sbas_id_r16_present, 1));

  if (gnss_id_r16_present) {
    HANDLE_CODE(gnss_id_r16.pack(bref));
  }
  if (sbas_id_r16_present) {
    HANDLE_CODE(sbas_id_r16.pack(bref));
  }
  HANDLE_CODE(pos_sib_type_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pos_sib_req_info_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(gnss_id_r16_present, 1));
  HANDLE_CODE(bref.unpack(sbas_id_r16_present, 1));

  if (gnss_id_r16_present) {
    HANDLE_CODE(gnss_id_r16.unpack(bref));
  }
  if (sbas_id_r16_present) {
    HANDLE_CODE(sbas_id_r16.unpack(bref));
  }
  HANDLE_CODE(pos_sib_type_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void pos_sib_req_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (gnss_id_r16_present) {
    j.write_fieldname("gnss-id-r16");
    gnss_id_r16.to_json(j);
  }
  if (sbas_id_r16_present) {
    j.write_fieldname("sbas-id-r16");
    sbas_id_r16.to_json(j);
  }
  j.write_str("posSibType-r16", pos_sib_type_r16.to_string());
  j.end_obj();
}

const char* pos_sib_req_info_r16_s::pos_sib_type_r16_opts::to_string() const
{
  static const char* names[] = {
      "posSibType1-1",        "posSibType1-2",       "posSibType1-3",        "posSibType1-4",
      "posSibType1-5",        "posSibType1-6",       "posSibType1-7",        "posSibType1-8",
      "posSibType2-1",        "posSibType2-2",       "posSibType2-3",        "posSibType2-4",
      "posSibType2-5",        "posSibType2-6",       "posSibType2-7",        "posSibType2-8",
      "posSibType2-9",        "posSibType2-10",      "posSibType2-11",       "posSibType2-12",
      "posSibType2-13",       "posSibType2-14",      "posSibType2-15",       "posSibType2-16",
      "posSibType2-17",       "posSibType2-18",      "posSibType2-19",       "posSibType2-20",
      "posSibType2-21",       "posSibType2-22",      "posSibType2-23",       "posSibType3-1",
      "posSibType4-1",        "posSibType5-1",       "posSibType6-1",        "posSibType6-2",
      "posSibType6-3",        "posSibType1-9-v1710", "posSibType1-10-v1710", "posSibType2-24-v1710",
      "posSibType2-25-v1710", "posSibType6-4-v1710", "posSibType6-5-v1710",  "posSibType6-6-v1710"};
  return convert_enum_idx(names, 44, value, "pos_sib_req_info_r16_s::pos_sib_type_r16_e_");
}

// RLF-Report-r16 ::= CHOICE
void rlf_report_r16_c::destroy_()
{
  switch (type_) {
    case types::nr_rlf_report_r16:
      c.destroy<nr_rlf_report_r16_s_>();
      break;
    case types::eutra_rlf_report_r16:
      c.destroy<eutra_rlf_report_r16_s_>();
      break;
    default:
      break;
  }
}
void rlf_report_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::nr_rlf_report_r16:
      c.init<nr_rlf_report_r16_s_>();
      break;
    case types::eutra_rlf_report_r16:
      c.init<eutra_rlf_report_r16_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c");
  }
}
rlf_report_r16_c::rlf_report_r16_c(const rlf_report_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::nr_rlf_report_r16:
      c.init(other.c.get<nr_rlf_report_r16_s_>());
      break;
    case types::eutra_rlf_report_r16:
      c.init(other.c.get<eutra_rlf_report_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c");
  }
}
rlf_report_r16_c& rlf_report_r16_c::operator=(const rlf_report_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::nr_rlf_report_r16:
      c.set(other.c.get<nr_rlf_report_r16_s_>());
      break;
    case types::eutra_rlf_report_r16:
      c.set(other.c.get<eutra_rlf_report_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c");
  }

  return *this;
}
rlf_report_r16_c::nr_rlf_report_r16_s_& rlf_report_r16_c::set_nr_rlf_report_r16()
{
  set(types::nr_rlf_report_r16);
  return c.get<nr_rlf_report_r16_s_>();
}
rlf_report_r16_c::eutra_rlf_report_r16_s_& rlf_report_r16_c::set_eutra_rlf_report_r16()
{
  set(types::eutra_rlf_report_r16);
  return c.get<eutra_rlf_report_r16_s_>();
}
void rlf_report_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::nr_rlf_report_r16:
      j.write_fieldname("nr-RLF-Report-r16");
      c.get<nr_rlf_report_r16_s_>().to_json(j);
      break;
    case types::eutra_rlf_report_r16:
      j.write_fieldname("eutra-RLF-Report-r16");
      c.get<eutra_rlf_report_r16_s_>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE rlf_report_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::nr_rlf_report_r16:
      HANDLE_CODE(c.get<nr_rlf_report_r16_s_>().pack(bref));
      break;
    case types::eutra_rlf_report_r16:
      HANDLE_CODE(c.get<eutra_rlf_report_r16_s_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rlf_report_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::nr_rlf_report_r16:
      HANDLE_CODE(c.get<nr_rlf_report_r16_s_>().unpack(bref));
      break;
    case types::eutra_rlf_report_r16:
      HANDLE_CODE(c.get<eutra_rlf_report_r16_s_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE rlf_report_r16_c::nr_rlf_report_r16_s_::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_result_neigh_cells_r16_present, 1));
  HANDLE_CODE(bref.pack(prev_pcell_id_r16_present, 1));
  HANDLE_CODE(bref.pack(reconnect_cell_id_r16_present, 1));
  HANDLE_CODE(bref.pack(time_until_reconn_r16_present, 1));
  HANDLE_CODE(bref.pack(reest_cell_id_r16_present, 1));
  HANDLE_CODE(bref.pack(time_conn_fail_r16_present, 1));
  HANDLE_CODE(bref.pack(location_info_r16_present, 1));
  HANDLE_CODE(bref.pack(no_suitable_cell_found_r16_present, 1));
  HANDLE_CODE(bref.pack(ra_info_common_r16_present, 1));

  HANDLE_CODE(meas_result_last_serv_cell_r16.pack(bref));
  if (meas_result_neigh_cells_r16_present) {
    HANDLE_CODE(bref.pack(meas_result_neigh_cells_r16.meas_result_list_nr_r16.size() > 0, 1));
    HANDLE_CODE(bref.pack(meas_result_neigh_cells_r16.meas_result_list_eutra_r16.size() > 0, 1));
    if (meas_result_neigh_cells_r16.meas_result_list_nr_r16.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_neigh_cells_r16.meas_result_list_nr_r16, 1, 8));
    }
    if (meas_result_neigh_cells_r16.meas_result_list_eutra_r16.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_neigh_cells_r16.meas_result_list_eutra_r16, 1, 8));
    }
  }
  HANDLE_CODE(pack_integer(bref, c_rnti_r16, (uint32_t)0u, (uint32_t)65535u));
  if (prev_pcell_id_r16_present) {
    HANDLE_CODE(prev_pcell_id_r16.pack(bref));
  }
  HANDLE_CODE(failed_pcell_id_r16.pack(bref));
  if (reconnect_cell_id_r16_present) {
    HANDLE_CODE(reconnect_cell_id_r16.pack(bref));
  }
  if (time_until_reconn_r16_present) {
    HANDLE_CODE(pack_integer(bref, time_until_reconn_r16, (uint32_t)0u, (uint32_t)172800u));
  }
  if (reest_cell_id_r16_present) {
    HANDLE_CODE(reest_cell_id_r16.pack(bref));
  }
  if (time_conn_fail_r16_present) {
    HANDLE_CODE(pack_integer(bref, time_conn_fail_r16, (uint16_t)0u, (uint16_t)1023u));
  }
  HANDLE_CODE(pack_integer(bref, time_since_fail_r16, (uint32_t)0u, (uint32_t)172800u));
  HANDLE_CODE(conn_fail_type_r16.pack(bref));
  HANDLE_CODE(rlf_cause_r16.pack(bref));
  if (location_info_r16_present) {
    HANDLE_CODE(location_info_r16.pack(bref));
  }
  if (ra_info_common_r16_present) {
    HANDLE_CODE(ra_info_common_r16.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= csi_rs_rlm_cfg_bitmap_v1650_present;
    group_flags[1] |= last_ho_type_r17_present;
    group_flags[1] |= time_conn_source_daps_fail_r17_present;
    group_flags[1] |= time_since_cho_recfg_r17_present;
    group_flags[1] |= cho_cell_id_r17.is_present();
    group_flags[1] |= cho_candidate_cell_list_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(csi_rs_rlm_cfg_bitmap_v1650_present, 1));
      if (csi_rs_rlm_cfg_bitmap_v1650_present) {
        HANDLE_CODE(csi_rs_rlm_cfg_bitmap_v1650.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(last_ho_type_r17_present, 1));
      HANDLE_CODE(bref.pack(time_conn_source_daps_fail_r17_present, 1));
      HANDLE_CODE(bref.pack(time_since_cho_recfg_r17_present, 1));
      HANDLE_CODE(bref.pack(cho_cell_id_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(cho_candidate_cell_list_r17.is_present(), 1));
      if (last_ho_type_r17_present) {
        HANDLE_CODE(last_ho_type_r17.pack(bref));
      }
      if (time_conn_source_daps_fail_r17_present) {
        HANDLE_CODE(pack_integer(bref, time_conn_source_daps_fail_r17, (uint16_t)0u, (uint16_t)1023u));
      }
      if (time_since_cho_recfg_r17_present) {
        HANDLE_CODE(pack_integer(bref, time_since_cho_recfg_r17, (uint16_t)0u, (uint16_t)1023u));
      }
      if (cho_cell_id_r17.is_present()) {
        HANDLE_CODE(cho_cell_id_r17->pack(bref));
      }
      if (cho_candidate_cell_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *cho_candidate_cell_list_r17, 1, 8));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rlf_report_r16_c::nr_rlf_report_r16_s_::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(meas_result_neigh_cells_r16_present, 1));
  HANDLE_CODE(bref.unpack(prev_pcell_id_r16_present, 1));
  HANDLE_CODE(bref.unpack(reconnect_cell_id_r16_present, 1));
  HANDLE_CODE(bref.unpack(time_until_reconn_r16_present, 1));
  HANDLE_CODE(bref.unpack(reest_cell_id_r16_present, 1));
  HANDLE_CODE(bref.unpack(time_conn_fail_r16_present, 1));
  HANDLE_CODE(bref.unpack(location_info_r16_present, 1));
  HANDLE_CODE(bref.unpack(no_suitable_cell_found_r16_present, 1));
  HANDLE_CODE(bref.unpack(ra_info_common_r16_present, 1));

  HANDLE_CODE(meas_result_last_serv_cell_r16.unpack(bref));
  if (meas_result_neigh_cells_r16_present) {
    bool meas_result_list_nr_r16_present;
    HANDLE_CODE(bref.unpack(meas_result_list_nr_r16_present, 1));
    bool meas_result_list_eutra_r16_present;
    HANDLE_CODE(bref.unpack(meas_result_list_eutra_r16_present, 1));
    if (meas_result_list_nr_r16_present) {
      HANDLE_CODE(unpack_dyn_seq_of(meas_result_neigh_cells_r16.meas_result_list_nr_r16, bref, 1, 8));
    }
    if (meas_result_list_eutra_r16_present) {
      HANDLE_CODE(unpack_dyn_seq_of(meas_result_neigh_cells_r16.meas_result_list_eutra_r16, bref, 1, 8));
    }
  }
  HANDLE_CODE(unpack_integer(c_rnti_r16, bref, (uint32_t)0u, (uint32_t)65535u));
  if (prev_pcell_id_r16_present) {
    HANDLE_CODE(prev_pcell_id_r16.unpack(bref));
  }
  HANDLE_CODE(failed_pcell_id_r16.unpack(bref));
  if (reconnect_cell_id_r16_present) {
    HANDLE_CODE(reconnect_cell_id_r16.unpack(bref));
  }
  if (time_until_reconn_r16_present) {
    HANDLE_CODE(unpack_integer(time_until_reconn_r16, bref, (uint32_t)0u, (uint32_t)172800u));
  }
  if (reest_cell_id_r16_present) {
    HANDLE_CODE(reest_cell_id_r16.unpack(bref));
  }
  if (time_conn_fail_r16_present) {
    HANDLE_CODE(unpack_integer(time_conn_fail_r16, bref, (uint16_t)0u, (uint16_t)1023u));
  }
  HANDLE_CODE(unpack_integer(time_since_fail_r16, bref, (uint32_t)0u, (uint32_t)172800u));
  HANDLE_CODE(conn_fail_type_r16.unpack(bref));
  HANDLE_CODE(rlf_cause_r16.unpack(bref));
  if (location_info_r16_present) {
    HANDLE_CODE(location_info_r16.unpack(bref));
  }
  if (ra_info_common_r16_present) {
    HANDLE_CODE(ra_info_common_r16.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(csi_rs_rlm_cfg_bitmap_v1650_present, 1));
      if (csi_rs_rlm_cfg_bitmap_v1650_present) {
        HANDLE_CODE(csi_rs_rlm_cfg_bitmap_v1650.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(last_ho_type_r17_present, 1));
      HANDLE_CODE(bref.unpack(time_conn_source_daps_fail_r17_present, 1));
      HANDLE_CODE(bref.unpack(time_since_cho_recfg_r17_present, 1));
      unpack_presence_flag(cho_cell_id_r17, bref);
      unpack_presence_flag(cho_candidate_cell_list_r17, bref);
      if (last_ho_type_r17_present) {
        HANDLE_CODE(last_ho_type_r17.unpack(bref));
      }
      if (time_conn_source_daps_fail_r17_present) {
        HANDLE_CODE(unpack_integer(time_conn_source_daps_fail_r17, bref, (uint16_t)0u, (uint16_t)1023u));
      }
      if (time_since_cho_recfg_r17_present) {
        HANDLE_CODE(unpack_integer(time_since_cho_recfg_r17, bref, (uint16_t)0u, (uint16_t)1023u));
      }
      if (cho_cell_id_r17.is_present()) {
        HANDLE_CODE(cho_cell_id_r17->unpack(bref));
      }
      if (cho_candidate_cell_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*cho_candidate_cell_list_r17, bref, 1, 8));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void rlf_report_r16_c::nr_rlf_report_r16_s_::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("measResultLastServCell-r16");
  meas_result_last_serv_cell_r16.to_json(j);
  if (meas_result_neigh_cells_r16_present) {
    j.write_fieldname("measResultNeighCells-r16");
    j.start_obj();
    if (meas_result_neigh_cells_r16.meas_result_list_nr_r16.size() > 0) {
      j.start_array("measResultListNR-r16");
      for (const auto& e1 : meas_result_neigh_cells_r16.meas_result_list_nr_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (meas_result_neigh_cells_r16.meas_result_list_eutra_r16.size() > 0) {
      j.start_array("measResultListEUTRA-r16");
      for (const auto& e1 : meas_result_neigh_cells_r16.meas_result_list_eutra_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    j.end_obj();
  }
  j.write_int("c-RNTI-r16", c_rnti_r16);
  if (prev_pcell_id_r16_present) {
    j.write_fieldname("previousPCellId-r16");
    prev_pcell_id_r16.to_json(j);
  }
  j.write_fieldname("failedPCellId-r16");
  failed_pcell_id_r16.to_json(j);
  if (reconnect_cell_id_r16_present) {
    j.write_fieldname("reconnectCellId-r16");
    reconnect_cell_id_r16.to_json(j);
  }
  if (time_until_reconn_r16_present) {
    j.write_int("timeUntilReconnection-r16", time_until_reconn_r16);
  }
  if (reest_cell_id_r16_present) {
    j.write_fieldname("reestablishmentCellId-r16");
    reest_cell_id_r16.to_json(j);
  }
  if (time_conn_fail_r16_present) {
    j.write_int("timeConnFailure-r16", time_conn_fail_r16);
  }
  j.write_int("timeSinceFailure-r16", time_since_fail_r16);
  j.write_str("connectionFailureType-r16", conn_fail_type_r16.to_string());
  j.write_str("rlf-Cause-r16", rlf_cause_r16.to_string());
  if (location_info_r16_present) {
    j.write_fieldname("locationInfo-r16");
    location_info_r16.to_json(j);
  }
  if (no_suitable_cell_found_r16_present) {
    j.write_str("noSuitableCellFound-r16", "true");
  }
  if (ra_info_common_r16_present) {
    j.write_fieldname("ra-InformationCommon-r16");
    ra_info_common_r16.to_json(j);
  }
  if (ext) {
    if (csi_rs_rlm_cfg_bitmap_v1650_present) {
      j.write_str("csi-rsRLMConfigBitmap-v1650", csi_rs_rlm_cfg_bitmap_v1650.to_string());
    }
    if (last_ho_type_r17_present) {
      j.write_str("lastHO-Type-r17", last_ho_type_r17.to_string());
    }
    if (time_conn_source_daps_fail_r17_present) {
      j.write_int("timeConnSourceDAPS-Failure-r17", time_conn_source_daps_fail_r17);
    }
    if (time_since_cho_recfg_r17_present) {
      j.write_int("timeSinceCHO-Reconfig-r17", time_since_cho_recfg_r17);
    }
    if (cho_cell_id_r17.is_present()) {
      j.write_fieldname("choCellId-r17");
      cho_cell_id_r17->to_json(j);
    }
    if (cho_candidate_cell_list_r17.is_present()) {
      j.start_array("choCandidateCellList-r17");
      for (const auto& e1 : *cho_candidate_cell_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

void rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_::destroy_()
{
  switch (type_) {
    case types::nr_prev_cell_r16:
      c.destroy<cgi_info_logging_r16_s>();
      break;
    case types::eutra_prev_cell_r16:
      c.destroy<cgi_info_eutra_logging_s>();
      break;
    default:
      break;
  }
}
void rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::nr_prev_cell_r16:
      c.init<cgi_info_logging_r16_s>();
      break;
    case types::eutra_prev_cell_r16:
      c.init<cgi_info_eutra_logging_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_");
  }
}
rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_::prev_pcell_id_r16_c_(
    const rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::nr_prev_cell_r16:
      c.init(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::eutra_prev_cell_r16:
      c.init(other.c.get<cgi_info_eutra_logging_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_");
  }
}
rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_&
rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_::operator=(
    const rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::nr_prev_cell_r16:
      c.set(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::eutra_prev_cell_r16:
      c.set(other.c.get<cgi_info_eutra_logging_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_");
  }

  return *this;
}
cgi_info_logging_r16_s& rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_::set_nr_prev_cell_r16()
{
  set(types::nr_prev_cell_r16);
  return c.get<cgi_info_logging_r16_s>();
}
cgi_info_eutra_logging_s& rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_::set_eutra_prev_cell_r16()
{
  set(types::eutra_prev_cell_r16);
  return c.get<cgi_info_eutra_logging_s>();
}
void rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::nr_prev_cell_r16:
      j.write_fieldname("nrPreviousCell-r16");
      c.get<cgi_info_logging_r16_s>().to_json(j);
      break;
    case types::eutra_prev_cell_r16:
      j.write_fieldname("eutraPreviousCell-r16");
      c.get<cgi_info_eutra_logging_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::nr_prev_cell_r16:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().pack(bref));
      break;
    case types::eutra_prev_cell_r16:
      HANDLE_CODE(c.get<cgi_info_eutra_logging_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::nr_prev_cell_r16:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().unpack(bref));
      break;
    case types::eutra_prev_cell_r16:
      HANDLE_CODE(c.get<cgi_info_eutra_logging_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"nrPreviousCell-r16", "eutraPreviousCell-r16"};
  return convert_enum_idx(names, 2, value, "rlf_report_r16_c::nr_rlf_report_r16_s_::prev_pcell_id_r16_c_::types");
}

void rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::destroy_()
{
  switch (type_) {
    case types::nr_failed_pcell_id_r16:
      c.destroy<nr_failed_pcell_id_r16_c_>();
      break;
    case types::eutra_failed_pcell_id_r16:
      c.destroy<eutra_failed_pcell_id_r16_c_>();
      break;
    default:
      break;
  }
}
void rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::nr_failed_pcell_id_r16:
      c.init<nr_failed_pcell_id_r16_c_>();
      break;
    case types::eutra_failed_pcell_id_r16:
      c.init<eutra_failed_pcell_id_r16_c_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_");
  }
}
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::failed_pcell_id_r16_c_(
    const rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::nr_failed_pcell_id_r16:
      c.init(other.c.get<nr_failed_pcell_id_r16_c_>());
      break;
    case types::eutra_failed_pcell_id_r16:
      c.init(other.c.get<eutra_failed_pcell_id_r16_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_");
  }
}
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_&
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::operator=(
    const rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::nr_failed_pcell_id_r16:
      c.set(other.c.get<nr_failed_pcell_id_r16_c_>());
      break;
    case types::eutra_failed_pcell_id_r16:
      c.set(other.c.get<eutra_failed_pcell_id_r16_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_");
  }

  return *this;
}
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_&
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::set_nr_failed_pcell_id_r16()
{
  set(types::nr_failed_pcell_id_r16);
  return c.get<nr_failed_pcell_id_r16_c_>();
}
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_&
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::set_eutra_failed_pcell_id_r16()
{
  set(types::eutra_failed_pcell_id_r16);
  return c.get<eutra_failed_pcell_id_r16_c_>();
}
void rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::nr_failed_pcell_id_r16:
      j.write_fieldname("nrFailedPCellId-r16");
      c.get<nr_failed_pcell_id_r16_c_>().to_json(j);
      break;
    case types::eutra_failed_pcell_id_r16:
      j.write_fieldname("eutraFailedPCellId-r16");
      c.get<eutra_failed_pcell_id_r16_c_>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::nr_failed_pcell_id_r16:
      HANDLE_CODE(c.get<nr_failed_pcell_id_r16_c_>().pack(bref));
      break;
    case types::eutra_failed_pcell_id_r16:
      HANDLE_CODE(c.get<eutra_failed_pcell_id_r16_c_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::nr_failed_pcell_id_r16:
      HANDLE_CODE(c.get<nr_failed_pcell_id_r16_c_>().unpack(bref));
      break;
    case types::eutra_failed_pcell_id_r16:
      HANDLE_CODE(c.get<eutra_failed_pcell_id_r16_c_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_::destroy_()
{
  switch (type_) {
    case types::cell_global_id_r16:
      c.destroy<cgi_info_logging_r16_s>();
      break;
    case types::pci_arfcn_r16:
      c.destroy<pci_arfcn_nr_r16_s>();
      break;
    default:
      break;
  }
}
void rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::cell_global_id_r16:
      c.init<cgi_info_logging_r16_s>();
      break;
    case types::pci_arfcn_r16:
      c.init<pci_arfcn_nr_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_");
  }
}
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_(
    const rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::cell_global_id_r16:
      c.init(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::pci_arfcn_r16:
      c.init(other.c.get<pci_arfcn_nr_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_");
  }
}
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_&
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_::operator=(
    const rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::cell_global_id_r16:
      c.set(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::pci_arfcn_r16:
      c.set(other.c.get<pci_arfcn_nr_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_");
  }

  return *this;
}
cgi_info_logging_r16_s&
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_::set_cell_global_id_r16()
{
  set(types::cell_global_id_r16);
  return c.get<cgi_info_logging_r16_s>();
}
pci_arfcn_nr_r16_s&
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_::set_pci_arfcn_r16()
{
  set(types::pci_arfcn_r16);
  return c.get<pci_arfcn_nr_r16_s>();
}
void rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_::to_json(
    json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cell_global_id_r16:
      j.write_fieldname("cellGlobalId-r16");
      c.get<cgi_info_logging_r16_s>().to_json(j);
      break;
    case types::pci_arfcn_r16:
      j.write_fieldname("pci-arfcn-r16");
      c.get<pci_arfcn_nr_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(
          type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cell_global_id_r16:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().pack(bref));
      break;
    case types::pci_arfcn_r16:
      HANDLE_CODE(c.get<pci_arfcn_nr_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(
          type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cell_global_id_r16:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().unpack(bref));
      break;
    case types::pci_arfcn_r16:
      HANDLE_CODE(c.get<pci_arfcn_nr_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(
          type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char*
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"cellGlobalId-r16", "pci-arfcn-r16"};
  return convert_enum_idx(
      names,
      2,
      value,
      "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::nr_failed_pcell_id_r16_c_::types");
}

void rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_::destroy_()
{
  switch (type_) {
    case types::cell_global_id_r16:
      c.destroy<cgi_info_eutra_logging_s>();
      break;
    case types::pci_arfcn_r16:
      c.destroy<pci_arfcn_eutra_r16_s>();
      break;
    default:
      break;
  }
}
void rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::cell_global_id_r16:
      c.init<cgi_info_eutra_logging_s>();
      break;
    case types::pci_arfcn_r16:
      c.init<pci_arfcn_eutra_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_");
  }
}
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_::
    eutra_failed_pcell_id_r16_c_(
        const rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::cell_global_id_r16:
      c.init(other.c.get<cgi_info_eutra_logging_s>());
      break;
    case types::pci_arfcn_r16:
      c.init(other.c.get<pci_arfcn_eutra_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_");
  }
}
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_&
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_::operator=(
    const rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::cell_global_id_r16:
      c.set(other.c.get<cgi_info_eutra_logging_s>());
      break;
    case types::pci_arfcn_r16:
      c.set(other.c.get<pci_arfcn_eutra_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_");
  }

  return *this;
}
cgi_info_eutra_logging_s&
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_::set_cell_global_id_r16()
{
  set(types::cell_global_id_r16);
  return c.get<cgi_info_eutra_logging_s>();
}
pci_arfcn_eutra_r16_s&
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_::set_pci_arfcn_r16()
{
  set(types::pci_arfcn_r16);
  return c.get<pci_arfcn_eutra_r16_s>();
}
void rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_::to_json(
    json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cell_global_id_r16:
      j.write_fieldname("cellGlobalId-r16");
      c.get<cgi_info_eutra_logging_s>().to_json(j);
      break;
    case types::pci_arfcn_r16:
      j.write_fieldname("pci-arfcn-r16");
      c.get<pci_arfcn_eutra_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(
          type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cell_global_id_r16:
      HANDLE_CODE(c.get<cgi_info_eutra_logging_s>().pack(bref));
      break;
    case types::pci_arfcn_r16:
      HANDLE_CODE(c.get<pci_arfcn_eutra_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(
          type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cell_global_id_r16:
      HANDLE_CODE(c.get<cgi_info_eutra_logging_s>().unpack(bref));
      break;
    case types::pci_arfcn_r16:
      HANDLE_CODE(c.get<pci_arfcn_eutra_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(
          type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char*
rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_::types_opts::to_string()
    const
{
  static const char* names[] = {"cellGlobalId-r16", "pci-arfcn-r16"};
  return convert_enum_idx(
      names,
      2,
      value,
      "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::eutra_failed_pcell_id_r16_c_::types");
}

const char* rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"nrFailedPCellId-r16", "eutraFailedPCellId-r16"};
  return convert_enum_idx(names, 2, value, "rlf_report_r16_c::nr_rlf_report_r16_s_::failed_pcell_id_r16_c_::types");
}

void rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_::destroy_()
{
  switch (type_) {
    case types::nr_reconnect_cell_id_r16:
      c.destroy<cgi_info_logging_r16_s>();
      break;
    case types::eutra_reconnect_cell_id_r16:
      c.destroy<cgi_info_eutra_logging_s>();
      break;
    default:
      break;
  }
}
void rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::nr_reconnect_cell_id_r16:
      c.init<cgi_info_logging_r16_s>();
      break;
    case types::eutra_reconnect_cell_id_r16:
      c.init<cgi_info_eutra_logging_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_");
  }
}
rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_::reconnect_cell_id_r16_c_(
    const rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::nr_reconnect_cell_id_r16:
      c.init(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::eutra_reconnect_cell_id_r16:
      c.init(other.c.get<cgi_info_eutra_logging_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_");
  }
}
rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_&
rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_::operator=(
    const rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::nr_reconnect_cell_id_r16:
      c.set(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::eutra_reconnect_cell_id_r16:
      c.set(other.c.get<cgi_info_eutra_logging_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_");
  }

  return *this;
}
cgi_info_logging_r16_s& rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_::set_nr_reconnect_cell_id_r16()
{
  set(types::nr_reconnect_cell_id_r16);
  return c.get<cgi_info_logging_r16_s>();
}
cgi_info_eutra_logging_s&
rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_::set_eutra_reconnect_cell_id_r16()
{
  set(types::eutra_reconnect_cell_id_r16);
  return c.get<cgi_info_eutra_logging_s>();
}
void rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::nr_reconnect_cell_id_r16:
      j.write_fieldname("nrReconnectCellId-r16");
      c.get<cgi_info_logging_r16_s>().to_json(j);
      break;
    case types::eutra_reconnect_cell_id_r16:
      j.write_fieldname("eutraReconnectCellId-r16");
      c.get<cgi_info_eutra_logging_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::nr_reconnect_cell_id_r16:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().pack(bref));
      break;
    case types::eutra_reconnect_cell_id_r16:
      HANDLE_CODE(c.get<cgi_info_eutra_logging_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::nr_reconnect_cell_id_r16:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().unpack(bref));
      break;
    case types::eutra_reconnect_cell_id_r16:
      HANDLE_CODE(c.get<cgi_info_eutra_logging_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"nrReconnectCellId-r16", "eutraReconnectCellId-r16"};
  return convert_enum_idx(names, 2, value, "rlf_report_r16_c::nr_rlf_report_r16_s_::reconnect_cell_id_r16_c_::types");
}

const char* rlf_report_r16_c::nr_rlf_report_r16_s_::conn_fail_type_r16_opts::to_string() const
{
  static const char* names[] = {"rlf", "hof"};
  return convert_enum_idx(names, 2, value, "rlf_report_r16_c::nr_rlf_report_r16_s_::conn_fail_type_r16_e_");
}

const char* rlf_report_r16_c::nr_rlf_report_r16_s_::rlf_cause_r16_opts::to_string() const
{
  static const char* names[] = {"t310-Expiry",
                                "randomAccessProblem",
                                "rlc-MaxNumRetx",
                                "beamFailureRecoveryFailure",
                                "lbtFailure-r16",
                                "bh-rlfRecoveryFailure",
                                "t312-expiry-r17",
                                "spare1"};
  return convert_enum_idx(names, 8, value, "rlf_report_r16_c::nr_rlf_report_r16_s_::rlf_cause_r16_e_");
}
uint16_t rlf_report_r16_c::nr_rlf_report_r16_s_::rlf_cause_r16_opts::to_number() const
{
  switch (value) {
    case t310_expiry:
      return 310;
    case t312_expiry_r17:
      return 312;
    default:
      invalid_enum_number(value, "rlf_report_r16_c::nr_rlf_report_r16_s_::rlf_cause_r16_e_");
  }
  return 0;
}

const char* rlf_report_r16_c::nr_rlf_report_r16_s_::last_ho_type_r17_opts::to_string() const
{
  static const char* names[] = {"cho", "daps", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "rlf_report_r16_c::nr_rlf_report_r16_s_::last_ho_type_r17_e_");
}

void rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_::destroy_()
{
  switch (type_) {
    case types::cell_global_id_r17:
      c.destroy<cgi_info_logging_r16_s>();
      break;
    case types::pci_arfcn_r17:
      c.destroy<pci_arfcn_nr_r16_s>();
      break;
    default:
      break;
  }
}
void rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::cell_global_id_r17:
      c.init<cgi_info_logging_r16_s>();
      break;
    case types::pci_arfcn_r17:
      c.init<pci_arfcn_nr_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_");
  }
}
rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_::cho_cell_id_r17_c_(
    const rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::cell_global_id_r17:
      c.init(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::pci_arfcn_r17:
      c.init(other.c.get<pci_arfcn_nr_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_");
  }
}
rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_&
rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_::operator=(
    const rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::cell_global_id_r17:
      c.set(other.c.get<cgi_info_logging_r16_s>());
      break;
    case types::pci_arfcn_r17:
      c.set(other.c.get<pci_arfcn_nr_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_");
  }

  return *this;
}
cgi_info_logging_r16_s& rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_::set_cell_global_id_r17()
{
  set(types::cell_global_id_r17);
  return c.get<cgi_info_logging_r16_s>();
}
pci_arfcn_nr_r16_s& rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_::set_pci_arfcn_r17()
{
  set(types::pci_arfcn_r17);
  return c.get<pci_arfcn_nr_r16_s>();
}
void rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cell_global_id_r17:
      j.write_fieldname("cellGlobalId-r17");
      c.get<cgi_info_logging_r16_s>().to_json(j);
      break;
    case types::pci_arfcn_r17:
      j.write_fieldname("pci-arfcn-r17");
      c.get<pci_arfcn_nr_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cell_global_id_r17:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().pack(bref));
      break;
    case types::pci_arfcn_r17:
      HANDLE_CODE(c.get<pci_arfcn_nr_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cell_global_id_r17:
      HANDLE_CODE(c.get<cgi_info_logging_r16_s>().unpack(bref));
      break;
    case types::pci_arfcn_r17:
      HANDLE_CODE(c.get<pci_arfcn_nr_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"cellGlobalId-r17", "pci-arfcn-r17"};
  return convert_enum_idx(names, 2, value, "rlf_report_r16_c::nr_rlf_report_r16_s_::cho_cell_id_r17_c_::types");
}

SRSASN_CODE rlf_report_r16_c::eutra_rlf_report_r16_s_::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(failed_pcell_id_eutra.pack(bref));
  HANDLE_CODE(meas_result_rlf_report_eutra_r16.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= meas_result_rlf_report_eutra_v1690.size() > 0;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(meas_result_rlf_report_eutra_v1690.size() > 0, 1));
      if (meas_result_rlf_report_eutra_v1690.size() > 0) {
        HANDLE_CODE(meas_result_rlf_report_eutra_v1690.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rlf_report_r16_c::eutra_rlf_report_r16_s_::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(failed_pcell_id_eutra.unpack(bref));
  HANDLE_CODE(meas_result_rlf_report_eutra_r16.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      bool meas_result_rlf_report_eutra_v1690_present;
      HANDLE_CODE(bref.unpack(meas_result_rlf_report_eutra_v1690_present, 1));
      if (meas_result_rlf_report_eutra_v1690_present) {
        HANDLE_CODE(meas_result_rlf_report_eutra_v1690.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void rlf_report_r16_c::eutra_rlf_report_r16_s_::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("failedPCellId-EUTRA");
  failed_pcell_id_eutra.to_json(j);
  j.write_str("measResult-RLF-Report-EUTRA-r16", meas_result_rlf_report_eutra_r16.to_string());
  if (ext) {
    if (meas_result_rlf_report_eutra_v1690.size() > 0) {
      j.write_str("measResult-RLF-Report-EUTRA-v1690", meas_result_rlf_report_eutra_v1690.to_string());
    }
  }
  j.end_obj();
}

const char* rlf_report_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"nr-RLF-Report-r16", "eutra-RLF-Report-r16"};
  return convert_enum_idx(names, 2, value, "rlf_report_r16_c::types");
}

// RRCReconfigurationComplete-v1530-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_complete_v1530_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_tx_direct_current_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ul_tx_direct_current_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ul_tx_direct_current_list, 1, 32));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_v1530_ies_s::unpack(cbit_ref& bref)
{
  bool ul_tx_direct_current_list_present;
  HANDLE_CODE(bref.unpack(ul_tx_direct_current_list_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ul_tx_direct_current_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ul_tx_direct_current_list, bref, 1, 32));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_complete_v1530_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_tx_direct_current_list.size() > 0) {
    j.start_array("uplinkTxDirectCurrentList");
    for (const auto& e1 : ul_tx_direct_current_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCReestablishmentComplete-v1610-IEs ::= SEQUENCE
SRSASN_CODE rrc_reest_complete_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ue_meass_available_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ue_meass_available_r16_present) {
    HANDLE_CODE(ue_meass_available_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_reest_complete_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ue_meass_available_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ue_meass_available_r16_present) {
    HANDLE_CODE(ue_meass_available_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_reest_complete_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ue_meass_available_r16_present) {
    j.write_fieldname("ue-MeasurementsAvailable-r16");
    ue_meass_available_r16.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// RRCResumeComplete-v1610-IEs ::= SEQUENCE
SRSASN_CODE rrc_resume_complete_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(idle_meas_available_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_result_idle_eutra_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_result_idle_nr_r16_present, 1));
  HANDLE_CODE(bref.pack(scg_resp_r16_present, 1));
  HANDLE_CODE(bref.pack(ue_meass_available_r16_present, 1));
  HANDLE_CODE(bref.pack(mob_history_avail_r16_present, 1));
  HANDLE_CODE(bref.pack(mob_state_r16_present, 1));
  HANDLE_CODE(bref.pack(need_for_gaps_info_nr_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (meas_result_idle_eutra_r16_present) {
    HANDLE_CODE(meas_result_idle_eutra_r16.pack(bref));
  }
  if (meas_result_idle_nr_r16_present) {
    HANDLE_CODE(meas_result_idle_nr_r16.pack(bref));
  }
  if (scg_resp_r16_present) {
    HANDLE_CODE(scg_resp_r16.pack(bref));
  }
  if (ue_meass_available_r16_present) {
    HANDLE_CODE(ue_meass_available_r16.pack(bref));
  }
  if (mob_state_r16_present) {
    HANDLE_CODE(mob_state_r16.pack(bref));
  }
  if (need_for_gaps_info_nr_r16_present) {
    HANDLE_CODE(need_for_gaps_info_nr_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_complete_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(idle_meas_available_r16_present, 1));
  HANDLE_CODE(bref.unpack(meas_result_idle_eutra_r16_present, 1));
  HANDLE_CODE(bref.unpack(meas_result_idle_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(scg_resp_r16_present, 1));
  HANDLE_CODE(bref.unpack(ue_meass_available_r16_present, 1));
  HANDLE_CODE(bref.unpack(mob_history_avail_r16_present, 1));
  HANDLE_CODE(bref.unpack(mob_state_r16_present, 1));
  HANDLE_CODE(bref.unpack(need_for_gaps_info_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (meas_result_idle_eutra_r16_present) {
    HANDLE_CODE(meas_result_idle_eutra_r16.unpack(bref));
  }
  if (meas_result_idle_nr_r16_present) {
    HANDLE_CODE(meas_result_idle_nr_r16.unpack(bref));
  }
  if (scg_resp_r16_present) {
    HANDLE_CODE(scg_resp_r16.unpack(bref));
  }
  if (ue_meass_available_r16_present) {
    HANDLE_CODE(ue_meass_available_r16.unpack(bref));
  }
  if (mob_state_r16_present) {
    HANDLE_CODE(mob_state_r16.unpack(bref));
  }
  if (need_for_gaps_info_nr_r16_present) {
    HANDLE_CODE(need_for_gaps_info_nr_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_resume_complete_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (idle_meas_available_r16_present) {
    j.write_str("idleMeasAvailable-r16", "true");
  }
  if (meas_result_idle_eutra_r16_present) {
    j.write_fieldname("measResultIdleEUTRA-r16");
    meas_result_idle_eutra_r16.to_json(j);
  }
  if (meas_result_idle_nr_r16_present) {
    j.write_fieldname("measResultIdleNR-r16");
    meas_result_idle_nr_r16.to_json(j);
  }
  if (scg_resp_r16_present) {
    j.write_fieldname("scg-Response-r16");
    scg_resp_r16.to_json(j);
  }
  if (ue_meass_available_r16_present) {
    j.write_fieldname("ue-MeasurementsAvailable-r16");
    ue_meass_available_r16.to_json(j);
  }
  if (mob_history_avail_r16_present) {
    j.write_str("mobilityHistoryAvail-r16", "true");
  }
  if (mob_state_r16_present) {
    j.write_str("mobilityState-r16", mob_state_r16.to_string());
  }
  if (need_for_gaps_info_nr_r16_present) {
    j.write_fieldname("needForGapsInfoNR-r16");
    need_for_gaps_info_nr_r16.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

void rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_::destroy_()
{
  switch (type_) {
    case types::nr_scg_resp:
      c.destroy<dyn_octstring>();
      break;
    case types::eutra_scg_resp:
      c.destroy<dyn_octstring>();
      break;
    default:
      break;
  }
}
void rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::nr_scg_resp:
      c.init<dyn_octstring>();
      break;
    case types::eutra_scg_resp:
      c.init<dyn_octstring>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_");
  }
}
rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_::scg_resp_r16_c_(
    const rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::nr_scg_resp:
      c.init(other.c.get<dyn_octstring>());
      break;
    case types::eutra_scg_resp:
      c.init(other.c.get<dyn_octstring>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_");
  }
}
rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_& rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_::operator=(
    const rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::nr_scg_resp:
      c.set(other.c.get<dyn_octstring>());
      break;
    case types::eutra_scg_resp:
      c.set(other.c.get<dyn_octstring>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_");
  }

  return *this;
}
dyn_octstring& rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_::set_nr_scg_resp()
{
  set(types::nr_scg_resp);
  return c.get<dyn_octstring>();
}
dyn_octstring& rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_::set_eutra_scg_resp()
{
  set(types::eutra_scg_resp);
  return c.get<dyn_octstring>();
}
void rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::nr_scg_resp:
      j.write_str("nr-SCG-Response", c.get<dyn_octstring>().to_string());
      break;
    case types::eutra_scg_resp:
      j.write_str("eutra-SCG-Response", c.get<dyn_octstring>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::nr_scg_resp:
      HANDLE_CODE(c.get<dyn_octstring>().pack(bref));
      break;
    case types::eutra_scg_resp:
      HANDLE_CODE(c.get<dyn_octstring>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::nr_scg_resp:
      HANDLE_CODE(c.get<dyn_octstring>().unpack(bref));
      break;
    case types::eutra_scg_resp:
      HANDLE_CODE(c.get<dyn_octstring>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"nr-SCG-Response", "eutra-SCG-Response"};
  return convert_enum_idx(names, 2, value, "rrc_resume_complete_v1610_ies_s::scg_resp_r16_c_::types");
}

const char* rrc_resume_complete_v1610_ies_s::mob_state_r16_opts::to_string() const
{
  static const char* names[] = {"normal", "medium", "high", "spare"};
  return convert_enum_idx(names, 4, value, "rrc_resume_complete_v1610_ies_s::mob_state_r16_e_");
}

// RRCSetupComplete-v1610-IEs ::= SEQUENCE
SRSASN_CODE rrc_setup_complete_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(iab_node_ind_r16_present, 1));
  HANDLE_CODE(bref.pack(idle_meas_available_r16_present, 1));
  HANDLE_CODE(bref.pack(ue_meass_available_r16_present, 1));
  HANDLE_CODE(bref.pack(mob_history_avail_r16_present, 1));
  HANDLE_CODE(bref.pack(mob_state_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ue_meass_available_r16_present) {
    HANDLE_CODE(ue_meass_available_r16.pack(bref));
  }
  if (mob_state_r16_present) {
    HANDLE_CODE(mob_state_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_setup_complete_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(iab_node_ind_r16_present, 1));
  HANDLE_CODE(bref.unpack(idle_meas_available_r16_present, 1));
  HANDLE_CODE(bref.unpack(ue_meass_available_r16_present, 1));
  HANDLE_CODE(bref.unpack(mob_history_avail_r16_present, 1));
  HANDLE_CODE(bref.unpack(mob_state_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ue_meass_available_r16_present) {
    HANDLE_CODE(ue_meass_available_r16.unpack(bref));
  }
  if (mob_state_r16_present) {
    HANDLE_CODE(mob_state_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_setup_complete_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (iab_node_ind_r16_present) {
    j.write_str("iab-NodeIndication-r16", "true");
  }
  if (idle_meas_available_r16_present) {
    j.write_str("idleMeasAvailable-r16", "true");
  }
  if (ue_meass_available_r16_present) {
    j.write_fieldname("ue-MeasurementsAvailable-r16");
    ue_meass_available_r16.to_json(j);
  }
  if (mob_history_avail_r16_present) {
    j.write_str("mobilityHistoryAvail-r16", "true");
  }
  if (mob_state_r16_present) {
    j.write_str("mobilityState-r16", mob_state_r16.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

const char* rrc_setup_complete_v1610_ies_s::mob_state_r16_opts::to_string() const
{
  static const char* names[] = {"normal", "medium", "high", "spare"};
  return convert_enum_idx(names, 4, value, "rrc_setup_complete_v1610_ies_s::mob_state_r16_e_");
}

// RegisteredAMF ::= SEQUENCE
SRSASN_CODE registered_amf_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(plmn_id_present, 1));

  if (plmn_id_present) {
    HANDLE_CODE(plmn_id.pack(bref));
  }
  HANDLE_CODE(amf_id.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE registered_amf_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(plmn_id_present, 1));

  if (plmn_id_present) {
    HANDLE_CODE(plmn_id.unpack(bref));
  }
  HANDLE_CODE(amf_id.unpack(bref));

  return SRSASN_SUCCESS;
}
void registered_amf_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (plmn_id_present) {
    j.write_fieldname("plmn-Identity");
    plmn_id.to_json(j);
  }
  j.write_str("amf-Identifier", amf_id.to_string());
  j.end_obj();
}

// S-NSSAI ::= CHOICE
void s_nssai_c::destroy_()
{
  switch (type_) {
    case types::sst:
      c.destroy<fixed_bitstring<8>>();
      break;
    case types::sst_sd:
      c.destroy<fixed_bitstring<32>>();
      break;
    default:
      break;
  }
}
void s_nssai_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::sst:
      c.init<fixed_bitstring<8>>();
      break;
    case types::sst_sd:
      c.init<fixed_bitstring<32>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "s_nssai_c");
  }
}
s_nssai_c::s_nssai_c(const s_nssai_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sst:
      c.init(other.c.get<fixed_bitstring<8>>());
      break;
    case types::sst_sd:
      c.init(other.c.get<fixed_bitstring<32>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "s_nssai_c");
  }
}
s_nssai_c& s_nssai_c::operator=(const s_nssai_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sst:
      c.set(other.c.get<fixed_bitstring<8>>());
      break;
    case types::sst_sd:
      c.set(other.c.get<fixed_bitstring<32>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "s_nssai_c");
  }

  return *this;
}
fixed_bitstring<8>& s_nssai_c::set_sst()
{
  set(types::sst);
  return c.get<fixed_bitstring<8>>();
}
fixed_bitstring<32>& s_nssai_c::set_sst_sd()
{
  set(types::sst_sd);
  return c.get<fixed_bitstring<32>>();
}
void s_nssai_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sst:
      j.write_str("sst", c.get<fixed_bitstring<8>>().to_string());
      break;
    case types::sst_sd:
      j.write_str("sst-SD", c.get<fixed_bitstring<32>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "s_nssai_c");
  }
  j.end_obj();
}
SRSASN_CODE s_nssai_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sst:
      HANDLE_CODE(c.get<fixed_bitstring<8>>().pack(bref));
      break;
    case types::sst_sd:
      HANDLE_CODE(c.get<fixed_bitstring<32>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "s_nssai_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE s_nssai_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sst:
      HANDLE_CODE(c.get<fixed_bitstring<8>>().unpack(bref));
      break;
    case types::sst_sd:
      HANDLE_CODE(c.get<fixed_bitstring<32>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "s_nssai_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* s_nssai_c::types_opts::to_string() const
{
  static const char* names[] = {"sst", "sst-SD"};
  return convert_enum_idx(names, 2, value, "s_nssai_c::types");
}

// SCGFailureInformation-v1590-IEs ::= SEQUENCE
SRSASN_CODE scg_fail_info_v1590_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE scg_fail_info_v1590_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void scg_fail_info_v1590_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// SCGFailureInformationEUTRA-v1590-IEs ::= SEQUENCE
SRSASN_CODE scg_fail_info_eutra_v1590_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE scg_fail_info_eutra_v1590_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void scg_fail_info_eutra_v1590_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// SIB-ReqInfo-r16 ::= ENUMERATED
const char* sib_req_info_r16_opts::to_string() const
{
  static const char* names[] = {"sib12", "sib13", "sib14", "sib20-v1700", "sib21-v1700", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "sib_req_info_r16_e");
}
uint8_t sib_req_info_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {12, 13, 14, 20, 21};
  return map_enum_number(numbers, 5, value, "sib_req_info_r16_e");
}

// SidelinkUEInformationNR-v1700-IEs ::= SEQUENCE
SRSASN_CODE sidelink_ue_info_nr_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_tx_res_req_list_v1700.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_rx_drx_report_list_v1700.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_rx_interested_gc_bc_dest_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_rx_interested_freq_list_disc_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_tx_res_req_list_disc_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_tx_res_req_list_comm_relay_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ue_type_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_source_id_remote_ue_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (sl_tx_res_req_list_v1700.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_tx_res_req_list_v1700, 1, 32));
  }
  if (sl_rx_drx_report_list_v1700.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rx_drx_report_list_v1700, 1, 32));
  }
  if (sl_rx_interested_gc_bc_dest_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rx_interested_gc_bc_dest_list_r17, 1, 32));
  }
  if (sl_rx_interested_freq_list_disc_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rx_interested_freq_list_disc_r17, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (sl_tx_res_req_list_disc_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_tx_res_req_list_disc_r17, 1, 32));
  }
  if (sl_tx_res_req_list_comm_relay_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_tx_res_req_list_comm_relay_r17, 1, 32));
  }
  if (ue_type_r17_present) {
    HANDLE_CODE(ue_type_r17.pack(bref));
  }
  if (sl_source_id_remote_ue_r17_present) {
    HANDLE_CODE(sl_source_id_remote_ue_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sidelink_ue_info_nr_v1700_ies_s::unpack(cbit_ref& bref)
{
  bool sl_tx_res_req_list_v1700_present;
  HANDLE_CODE(bref.unpack(sl_tx_res_req_list_v1700_present, 1));
  bool sl_rx_drx_report_list_v1700_present;
  HANDLE_CODE(bref.unpack(sl_rx_drx_report_list_v1700_present, 1));
  bool sl_rx_interested_gc_bc_dest_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_rx_interested_gc_bc_dest_list_r17_present, 1));
  bool sl_rx_interested_freq_list_disc_r17_present;
  HANDLE_CODE(bref.unpack(sl_rx_interested_freq_list_disc_r17_present, 1));
  bool sl_tx_res_req_list_disc_r17_present;
  HANDLE_CODE(bref.unpack(sl_tx_res_req_list_disc_r17_present, 1));
  bool sl_tx_res_req_list_comm_relay_r17_present;
  HANDLE_CODE(bref.unpack(sl_tx_res_req_list_comm_relay_r17_present, 1));
  HANDLE_CODE(bref.unpack(ue_type_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_source_id_remote_ue_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (sl_tx_res_req_list_v1700_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_tx_res_req_list_v1700, bref, 1, 32));
  }
  if (sl_rx_drx_report_list_v1700_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rx_drx_report_list_v1700, bref, 1, 32));
  }
  if (sl_rx_interested_gc_bc_dest_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rx_interested_gc_bc_dest_list_r17, bref, 1, 32));
  }
  if (sl_rx_interested_freq_list_disc_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rx_interested_freq_list_disc_r17, bref, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (sl_tx_res_req_list_disc_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_tx_res_req_list_disc_r17, bref, 1, 32));
  }
  if (sl_tx_res_req_list_comm_relay_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_tx_res_req_list_comm_relay_r17, bref, 1, 32));
  }
  if (ue_type_r17_present) {
    HANDLE_CODE(ue_type_r17.unpack(bref));
  }
  if (sl_source_id_remote_ue_r17_present) {
    HANDLE_CODE(sl_source_id_remote_ue_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sidelink_ue_info_nr_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_tx_res_req_list_v1700.size() > 0) {
    j.start_array("sl-TxResourceReqList-v1700");
    for (const auto& e1 : sl_tx_res_req_list_v1700) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_rx_drx_report_list_v1700.size() > 0) {
    j.start_array("sl-RxDRX-ReportList-v1700");
    for (const auto& e1 : sl_rx_drx_report_list_v1700) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_rx_interested_gc_bc_dest_list_r17.size() > 0) {
    j.start_array("sl-RxInterestedGC-BC-DestList-r17");
    for (const auto& e1 : sl_rx_interested_gc_bc_dest_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_rx_interested_freq_list_disc_r17.size() > 0) {
    j.start_array("sl-RxInterestedFreqListDisc-r17");
    for (const auto& e1 : sl_rx_interested_freq_list_disc_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_tx_res_req_list_disc_r17.size() > 0) {
    j.start_array("sl-TxResourceReqListDisc-r17");
    for (const auto& e1 : sl_tx_res_req_list_disc_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_tx_res_req_list_comm_relay_r17.size() > 0) {
    j.start_array("sl-TxResourceReqListCommRelay-r17");
    for (const auto& e1 : sl_tx_res_req_list_comm_relay_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ue_type_r17_present) {
    j.write_str("ue-Type-r17", ue_type_r17.to_string());
  }
  if (sl_source_id_remote_ue_r17_present) {
    j.write_str("sl-SourceIdentityRemoteUE-r17", sl_source_id_remote_ue_r17.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

const char* sidelink_ue_info_nr_v1700_ies_s::ue_type_r17_opts::to_string() const
{
  static const char* names[] = {"relayUE", "remoteUE"};
  return convert_enum_idx(names, 2, value, "sidelink_ue_info_nr_v1700_ies_s::ue_type_r17_e_");
}

// UEAssistanceInformation-v1540-IEs ::= SEQUENCE
SRSASN_CODE ue_assist_info_v1540_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(overheat_assist_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (overheat_assist_present) {
    HANDLE_CODE(overheat_assist.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_assist_info_v1540_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(overheat_assist_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (overheat_assist_present) {
    HANDLE_CODE(overheat_assist.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_assist_info_v1540_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (overheat_assist_present) {
    j.write_fieldname("overheatingAssistance");
    overheat_assist.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UEInformationResponse-v1700-IEs ::= SEQUENCE
SRSASN_CODE ue_info_resp_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(success_ho_report_r17_present, 1));
  HANDLE_CODE(bref.pack(conn_est_fail_report_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(coarse_location_info_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (success_ho_report_r17_present) {
    HANDLE_CODE(success_ho_report_r17.pack(bref));
  }
  if (conn_est_fail_report_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, conn_est_fail_report_list_r17, 1, 4));
  }
  if (coarse_location_info_r17.size() > 0) {
    HANDLE_CODE(coarse_location_info_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_info_resp_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(success_ho_report_r17_present, 1));
  bool conn_est_fail_report_list_r17_present;
  HANDLE_CODE(bref.unpack(conn_est_fail_report_list_r17_present, 1));
  bool coarse_location_info_r17_present;
  HANDLE_CODE(bref.unpack(coarse_location_info_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (success_ho_report_r17_present) {
    HANDLE_CODE(success_ho_report_r17.unpack(bref));
  }
  if (conn_est_fail_report_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(conn_est_fail_report_list_r17, bref, 1, 4));
  }
  if (coarse_location_info_r17_present) {
    HANDLE_CODE(coarse_location_info_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_info_resp_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (success_ho_report_r17_present) {
    j.write_fieldname("successHO-Report-r17");
    success_ho_report_r17.to_json(j);
  }
  if (conn_est_fail_report_list_r17.size() > 0) {
    j.start_array("connEstFailReportList-r17");
    for (const auto& e1 : conn_est_fail_report_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (coarse_location_info_r17.size() > 0) {
    j.write_str("coarseLocationInfo-r17", coarse_location_info_r17.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// UEPositioningAssistanceInfo-v1720-IEs ::= SEQUENCE
SRSASN_CODE ue_positioning_assist_info_v1720_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ue_tx_teg_timing_error_margin_value_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ue_tx_teg_timing_error_margin_value_r17_present) {
    HANDLE_CODE(ue_tx_teg_timing_error_margin_value_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_positioning_assist_info_v1720_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ue_tx_teg_timing_error_margin_value_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ue_tx_teg_timing_error_margin_value_r17_present) {
    HANDLE_CODE(ue_tx_teg_timing_error_margin_value_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_positioning_assist_info_v1720_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ue_tx_teg_timing_error_margin_value_r17_present) {
    j.write_str("ue-TxTEG-TimingErrorMarginValue-r17", ue_tx_teg_timing_error_margin_value_r17.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

const char* ue_positioning_assist_info_v1720_ies_s::ue_tx_teg_timing_error_margin_value_r17_opts::to_string() const
{
  static const char* names[] = {"tc0",
                                "tc2",
                                "tc4",
                                "tc6",
                                "tc8",
                                "tc12",
                                "tc16",
                                "tc20",
                                "tc24",
                                "tc32",
                                "tc40",
                                "tc48",
                                "tc56",
                                "tc64",
                                "tc72",
                                "tc80"};
  return convert_enum_idx(
      names, 16, value, "ue_positioning_assist_info_v1720_ies_s::ue_tx_teg_timing_error_margin_value_r17_e_");
}
uint8_t ue_positioning_assist_info_v1720_ies_s::ue_tx_teg_timing_error_margin_value_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 2, 4, 6, 8, 12, 16, 20, 24, 32, 40, 48, 56, 64, 72, 80};
  return map_enum_number(
      numbers, 16, value, "ue_positioning_assist_info_v1720_ies_s::ue_tx_teg_timing_error_margin_value_r17_e_");
}

// ULInformationTransfer-v1700-IEs ::= SEQUENCE
SRSASN_CODE ul_info_transfer_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ded_info_f1c_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ded_info_f1c_r17.size() > 0) {
    HANDLE_CODE(ded_info_f1c_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_info_transfer_v1700_ies_s::unpack(cbit_ref& bref)
{
  bool ded_info_f1c_r17_present;
  HANDLE_CODE(bref.unpack(ded_info_f1c_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ded_info_f1c_r17_present) {
    HANDLE_CODE(ded_info_f1c_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ul_info_transfer_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ded_info_f1c_r17.size() > 0) {
    j.write_str("dedicatedInfoF1c-r17", ded_info_f1c_r17.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// CounterCheckResponse-IEs ::= SEQUENCE
SRSASN_CODE counter_check_resp_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, drb_count_info_list, 0, 29));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE counter_check_resp_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(drb_count_info_list, bref, 0, 29));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void counter_check_resp_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("drb-CountInfoList");
  for (const auto& e1 : drb_count_info_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// DedicatedSIBRequest-r16-IEs ::= SEQUENCE
SRSASN_CODE ded_sib_request_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(on_demand_sib_request_list_r16_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (on_demand_sib_request_list_r16_present) {
    HANDLE_CODE(bref.pack(on_demand_sib_request_list_r16.requested_sib_list_r16.size() > 0, 1));
    HANDLE_CODE(bref.pack(on_demand_sib_request_list_r16.requested_pos_sib_list_r16.size() > 0, 1));
    if (on_demand_sib_request_list_r16.requested_sib_list_r16.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref, on_demand_sib_request_list_r16.requested_sib_list_r16, 1, 8));
    }
    if (on_demand_sib_request_list_r16.requested_pos_sib_list_r16.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref, on_demand_sib_request_list_r16.requested_pos_sib_list_r16, 1, 32));
    }
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ded_sib_request_r16_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(on_demand_sib_request_list_r16_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (on_demand_sib_request_list_r16_present) {
    bool requested_sib_list_r16_present;
    HANDLE_CODE(bref.unpack(requested_sib_list_r16_present, 1));
    bool requested_pos_sib_list_r16_present;
    HANDLE_CODE(bref.unpack(requested_pos_sib_list_r16_present, 1));
    if (requested_sib_list_r16_present) {
      HANDLE_CODE(unpack_dyn_seq_of(on_demand_sib_request_list_r16.requested_sib_list_r16, bref, 1, 8));
    }
    if (requested_pos_sib_list_r16_present) {
      HANDLE_CODE(unpack_dyn_seq_of(on_demand_sib_request_list_r16.requested_pos_sib_list_r16, bref, 1, 32));
    }
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ded_sib_request_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (on_demand_sib_request_list_r16_present) {
    j.write_fieldname("onDemandSIB-RequestList-r16");
    j.start_obj();
    if (on_demand_sib_request_list_r16.requested_sib_list_r16.size() > 0) {
      j.start_array("requestedSIB-List-r16");
      for (const auto& e1 : on_demand_sib_request_list_r16.requested_sib_list_r16) {
        j.write_str(e1.to_string());
      }
      j.end_array();
    }
    if (on_demand_sib_request_list_r16.requested_pos_sib_list_r16.size() > 0) {
      j.start_array("requestedPosSIB-List-r16");
      for (const auto& e1 : on_demand_sib_request_list_r16.requested_pos_sib_list_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    j.end_obj();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// FailureInformation-IEs ::= SEQUENCE
SRSASN_CODE fail_info_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fail_info_rlc_bearer_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (fail_info_rlc_bearer_present) {
    HANDLE_CODE(fail_info_rlc_bearer.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE fail_info_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(fail_info_rlc_bearer_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (fail_info_rlc_bearer_present) {
    HANDLE_CODE(fail_info_rlc_bearer.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void fail_info_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (fail_info_rlc_bearer_present) {
    j.write_fieldname("failureInfoRLC-Bearer");
    fail_info_rlc_bearer.to_json(j);
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// IABOtherInformation-r16-IEs ::= SEQUENCE
SRSASN_CODE iab_other_info_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(ip_info_type_r16.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_other_info_r16_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(ip_info_type_r16.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void iab_other_info_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("ip-InfoType-r16");
  ip_info_type_r16.to_json(j);
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

void iab_other_info_r16_ies_s::ip_info_type_r16_c_::destroy_()
{
  switch (type_) {
    case types::iab_ip_request_r16:
      c.destroy<iab_ip_request_r16_s_>();
      break;
    case types::iab_ip_report_r16:
      c.destroy<iab_ip_report_r16_s_>();
      break;
    default:
      break;
  }
}
void iab_other_info_r16_ies_s::ip_info_type_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::iab_ip_request_r16:
      c.init<iab_ip_request_r16_s_>();
      break;
    case types::iab_ip_report_r16:
      c.init<iab_ip_report_r16_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_");
  }
}
iab_other_info_r16_ies_s::ip_info_type_r16_c_::ip_info_type_r16_c_(
    const iab_other_info_r16_ies_s::ip_info_type_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::iab_ip_request_r16:
      c.init(other.c.get<iab_ip_request_r16_s_>());
      break;
    case types::iab_ip_report_r16:
      c.init(other.c.get<iab_ip_report_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_");
  }
}
iab_other_info_r16_ies_s::ip_info_type_r16_c_&
iab_other_info_r16_ies_s::ip_info_type_r16_c_::operator=(const iab_other_info_r16_ies_s::ip_info_type_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::iab_ip_request_r16:
      c.set(other.c.get<iab_ip_request_r16_s_>());
      break;
    case types::iab_ip_report_r16:
      c.set(other.c.get<iab_ip_report_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_");
  }

  return *this;
}
iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_&
iab_other_info_r16_ies_s::ip_info_type_r16_c_::set_iab_ip_request_r16()
{
  set(types::iab_ip_request_r16);
  return c.get<iab_ip_request_r16_s_>();
}
iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_&
iab_other_info_r16_ies_s::ip_info_type_r16_c_::set_iab_ip_report_r16()
{
  set(types::iab_ip_report_r16);
  return c.get<iab_ip_report_r16_s_>();
}
void iab_other_info_r16_ies_s::ip_info_type_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::iab_ip_request_r16:
      j.write_fieldname("iab-IP-Request-r16");
      j.start_obj();
      if (c.get<iab_ip_request_r16_s_>().iab_ip_v4_address_num_req_r16_present) {
        j.write_fieldname("iab-IPv4-AddressNumReq-r16");
        c.get<iab_ip_request_r16_s_>().iab_ip_v4_address_num_req_r16.to_json(j);
      }
      if (c.get<iab_ip_request_r16_s_>().iab_ip_v6_address_req_r16_present) {
        j.write_fieldname("iab-IPv6-AddressReq-r16");
        c.get<iab_ip_request_r16_s_>().iab_ip_v6_address_req_r16.to_json(j);
      }
      j.end_obj();
      break;
    case types::iab_ip_report_r16:
      j.write_fieldname("iab-IP-Report-r16");
      j.start_obj();
      if (c.get<iab_ip_report_r16_s_>().iab_ip_v4_address_report_r16_present) {
        j.write_fieldname("iab-IPv4-AddressReport-r16");
        c.get<iab_ip_report_r16_s_>().iab_ip_v4_address_report_r16.to_json(j);
      }
      if (c.get<iab_ip_report_r16_s_>().iab_ip_v6_report_r16_present) {
        j.write_fieldname("iab-IPv6-Report-r16");
        c.get<iab_ip_report_r16_s_>().iab_ip_v6_report_r16.to_json(j);
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE iab_other_info_r16_ies_s::ip_info_type_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::iab_ip_request_r16:
      HANDLE_CODE(bref.pack(c.get<iab_ip_request_r16_s_>().iab_ip_v4_address_num_req_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<iab_ip_request_r16_s_>().iab_ip_v6_address_req_r16_present, 1));
      if (c.get<iab_ip_request_r16_s_>().iab_ip_v4_address_num_req_r16_present) {
        HANDLE_CODE(c.get<iab_ip_request_r16_s_>().iab_ip_v4_address_num_req_r16.pack(bref));
      }
      if (c.get<iab_ip_request_r16_s_>().iab_ip_v6_address_req_r16_present) {
        HANDLE_CODE(c.get<iab_ip_request_r16_s_>().iab_ip_v6_address_req_r16.pack(bref));
      }
      break;
    case types::iab_ip_report_r16:
      HANDLE_CODE(bref.pack(c.get<iab_ip_report_r16_s_>().iab_ip_v4_address_report_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<iab_ip_report_r16_s_>().iab_ip_v6_report_r16_present, 1));
      if (c.get<iab_ip_report_r16_s_>().iab_ip_v4_address_report_r16_present) {
        HANDLE_CODE(c.get<iab_ip_report_r16_s_>().iab_ip_v4_address_report_r16.pack(bref));
      }
      if (c.get<iab_ip_report_r16_s_>().iab_ip_v6_report_r16_present) {
        HANDLE_CODE(c.get<iab_ip_report_r16_s_>().iab_ip_v6_report_r16.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_other_info_r16_ies_s::ip_info_type_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::iab_ip_request_r16:
      HANDLE_CODE(bref.unpack(c.get<iab_ip_request_r16_s_>().iab_ip_v4_address_num_req_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<iab_ip_request_r16_s_>().iab_ip_v6_address_req_r16_present, 1));
      if (c.get<iab_ip_request_r16_s_>().iab_ip_v4_address_num_req_r16_present) {
        HANDLE_CODE(c.get<iab_ip_request_r16_s_>().iab_ip_v4_address_num_req_r16.unpack(bref));
      }
      if (c.get<iab_ip_request_r16_s_>().iab_ip_v6_address_req_r16_present) {
        HANDLE_CODE(c.get<iab_ip_request_r16_s_>().iab_ip_v6_address_req_r16.unpack(bref));
      }
      break;
    case types::iab_ip_report_r16:
      HANDLE_CODE(bref.unpack(c.get<iab_ip_report_r16_s_>().iab_ip_v4_address_report_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<iab_ip_report_r16_s_>().iab_ip_v6_report_r16_present, 1));
      if (c.get<iab_ip_report_r16_s_>().iab_ip_v4_address_report_r16_present) {
        HANDLE_CODE(c.get<iab_ip_report_r16_s_>().iab_ip_v4_address_report_r16.unpack(bref));
      }
      if (c.get<iab_ip_report_r16_s_>().iab_ip_v6_report_r16_present) {
        HANDLE_CODE(c.get<iab_ip_report_r16_s_>().iab_ip_v6_report_r16.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_::destroy_()
{
  switch (type_) {
    case types::iab_ip_v6_address_num_req_r16:
      c.destroy<iab_ip_address_num_req_r16_s>();
      break;
    case types::iab_ip_v6_address_prefix_req_r16:
      c.destroy<iab_ip_address_prefix_req_r16_s>();
      break;
    default:
      break;
  }
}
void iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_::set(
    types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::iab_ip_v6_address_num_req_r16:
      c.init<iab_ip_address_num_req_r16_s>();
      break;
    case types::iab_ip_v6_address_prefix_req_r16:
      c.init<iab_ip_address_prefix_req_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_");
  }
}
iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_::
    iab_ip_v6_address_req_r16_c_(
        const iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::iab_ip_v6_address_num_req_r16:
      c.init(other.c.get<iab_ip_address_num_req_r16_s>());
      break;
    case types::iab_ip_v6_address_prefix_req_r16:
      c.init(other.c.get<iab_ip_address_prefix_req_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_");
  }
}
iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_&
iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_::operator=(
    const iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::iab_ip_v6_address_num_req_r16:
      c.set(other.c.get<iab_ip_address_num_req_r16_s>());
      break;
    case types::iab_ip_v6_address_prefix_req_r16:
      c.set(other.c.get<iab_ip_address_prefix_req_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_");
  }

  return *this;
}
iab_ip_address_num_req_r16_s& iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::
    iab_ip_v6_address_req_r16_c_::set_iab_ip_v6_address_num_req_r16()
{
  set(types::iab_ip_v6_address_num_req_r16);
  return c.get<iab_ip_address_num_req_r16_s>();
}
iab_ip_address_prefix_req_r16_s& iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::
    iab_ip_v6_address_req_r16_c_::set_iab_ip_v6_address_prefix_req_r16()
{
  set(types::iab_ip_v6_address_prefix_req_r16);
  return c.get<iab_ip_address_prefix_req_r16_s>();
}
void iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_::to_json(
    json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::iab_ip_v6_address_num_req_r16:
      j.write_fieldname("iab-IPv6-AddressNumReq-r16");
      c.get<iab_ip_address_num_req_r16_s>().to_json(j);
      break;
    case types::iab_ip_v6_address_prefix_req_r16:
      j.write_fieldname("iab-IPv6-AddressPrefixReq-r16");
      c.get<iab_ip_address_prefix_req_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(
          type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_::pack(
    bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::iab_ip_v6_address_num_req_r16:
      HANDLE_CODE(c.get<iab_ip_address_num_req_r16_s>().pack(bref));
      break;
    case types::iab_ip_v6_address_prefix_req_r16:
      HANDLE_CODE(c.get<iab_ip_address_prefix_req_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(
          type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_::unpack(
    cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::iab_ip_v6_address_num_req_r16:
      HANDLE_CODE(c.get<iab_ip_address_num_req_r16_s>().unpack(bref));
      break;
    case types::iab_ip_v6_address_prefix_req_r16:
      HANDLE_CODE(c.get<iab_ip_address_prefix_req_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(
          type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_::
    types_opts::to_string() const
{
  static const char* names[] = {"iab-IPv6-AddressNumReq-r16", "iab-IPv6-AddressPrefixReq-r16"};
  return convert_enum_idx(
      names,
      2,
      value,
      "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_request_r16_s_::iab_ip_v6_address_req_r16_c_::types");
}

void iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_::destroy_()
{
  switch (type_) {
    case types::iab_ip_v6_address_report_r16:
      c.destroy<iab_ip_address_and_traffic_r16_s>();
      break;
    case types::iab_ip_v6_prefix_report_r16:
      c.destroy<iab_ip_prefix_and_traffic_r16_s>();
      break;
    default:
      break;
  }
}
void iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::iab_ip_v6_address_report_r16:
      c.init<iab_ip_address_and_traffic_r16_s>();
      break;
    case types::iab_ip_v6_prefix_report_r16:
      c.init<iab_ip_prefix_and_traffic_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_");
  }
}
iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_::iab_ip_v6_report_r16_c_(
    const iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::iab_ip_v6_address_report_r16:
      c.init(other.c.get<iab_ip_address_and_traffic_r16_s>());
      break;
    case types::iab_ip_v6_prefix_report_r16:
      c.init(other.c.get<iab_ip_prefix_and_traffic_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_");
  }
}
iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_&
iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_::operator=(
    const iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::iab_ip_v6_address_report_r16:
      c.set(other.c.get<iab_ip_address_and_traffic_r16_s>());
      break;
    case types::iab_ip_v6_prefix_report_r16:
      c.set(other.c.get<iab_ip_prefix_and_traffic_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_");
  }

  return *this;
}
iab_ip_address_and_traffic_r16_s& iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::
    iab_ip_v6_report_r16_c_::set_iab_ip_v6_address_report_r16()
{
  set(types::iab_ip_v6_address_report_r16);
  return c.get<iab_ip_address_and_traffic_r16_s>();
}
iab_ip_prefix_and_traffic_r16_s& iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::
    iab_ip_v6_report_r16_c_::set_iab_ip_v6_prefix_report_r16()
{
  set(types::iab_ip_v6_prefix_report_r16);
  return c.get<iab_ip_prefix_and_traffic_r16_s>();
}
void iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_::to_json(
    json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::iab_ip_v6_address_report_r16:
      j.write_fieldname("iab-IPv6-AddressReport-r16");
      c.get<iab_ip_address_and_traffic_r16_s>().to_json(j);
      break;
    case types::iab_ip_v6_prefix_report_r16:
      j.write_fieldname("iab-IPv6-PrefixReport-r16");
      c.get<iab_ip_prefix_and_traffic_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(
          type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE
iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::iab_ip_v6_address_report_r16:
      HANDLE_CODE(c.get<iab_ip_address_and_traffic_r16_s>().pack(bref));
      break;
    case types::iab_ip_v6_prefix_report_r16:
      HANDLE_CODE(c.get<iab_ip_prefix_and_traffic_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(
          type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE
iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::iab_ip_v6_address_report_r16:
      HANDLE_CODE(c.get<iab_ip_address_and_traffic_r16_s>().unpack(bref));
      break;
    case types::iab_ip_v6_prefix_report_r16:
      HANDLE_CODE(c.get<iab_ip_prefix_and_traffic_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(
          type_, "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char*
iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_::types_opts::to_string()
    const
{
  static const char* names[] = {"iab-IPv6-AddressReport-r16", "iab-IPv6-PrefixReport-r16"};
  return convert_enum_idx(
      names,
      2,
      value,
      "iab_other_info_r16_ies_s::ip_info_type_r16_c_::iab_ip_report_r16_s_::iab_ip_v6_report_r16_c_::types");
}

const char* iab_other_info_r16_ies_s::ip_info_type_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"iab-IP-Request-r16", "iab-IP-Report-r16"};
  return convert_enum_idx(names, 2, value, "iab_other_info_r16_ies_s::ip_info_type_r16_c_::types");
}

// LocationMeasurementIndication-IEs ::= SEQUENCE
SRSASN_CODE location_meas_ind_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(meas_ind.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE location_meas_ind_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(meas_ind.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void location_meas_ind_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("measurementIndication");
  meas_ind.to_json(j);
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// MBSInterestIndication-r17-IEs ::= SEQUENCE
SRSASN_CODE mb_si_nterest_ind_r17_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mbs_freq_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(mbs_prio_r17_present, 1));
  HANDLE_CODE(bref.pack(mbs_service_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (mbs_freq_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, mbs_freq_list_r17, 1, 16, integer_packer<uint32_t>(0, 3279165)));
  }
  if (mbs_service_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, mbs_service_list_r17, 1, 16));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mb_si_nterest_ind_r17_ies_s::unpack(cbit_ref& bref)
{
  bool mbs_freq_list_r17_present;
  HANDLE_CODE(bref.unpack(mbs_freq_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(mbs_prio_r17_present, 1));
  bool mbs_service_list_r17_present;
  HANDLE_CODE(bref.unpack(mbs_service_list_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (mbs_freq_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(mbs_freq_list_r17, bref, 1, 16, integer_packer<uint32_t>(0, 3279165)));
  }
  if (mbs_service_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(mbs_service_list_r17, bref, 1, 16));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mb_si_nterest_ind_r17_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mbs_freq_list_r17.size() > 0) {
    j.start_array("mbs-FreqList-r17");
    for (const auto& e1 : mbs_freq_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (mbs_prio_r17_present) {
    j.write_str("mbs-Priority-r17", "true");
  }
  if (mbs_service_list_r17.size() > 0) {
    j.start_array("mbs-ServiceList-r17");
    for (const auto& e1 : mbs_service_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// MCGFailureInformation-r16-IEs ::= SEQUENCE
SRSASN_CODE mcg_fail_info_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fail_report_mcg_r16_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (fail_report_mcg_r16_present) {
    HANDLE_CODE(fail_report_mcg_r16.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mcg_fail_info_r16_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(fail_report_mcg_r16_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (fail_report_mcg_r16_present) {
    HANDLE_CODE(fail_report_mcg_r16.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mcg_fail_info_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (fail_report_mcg_r16_present) {
    j.write_fieldname("failureReportMCG-r16");
    fail_report_mcg_r16.to_json(j);
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// MeasurementReport-IEs ::= SEQUENCE
SRSASN_CODE meas_report_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(meas_results.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_report_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(meas_results.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_report_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("measResults");
  meas_results.to_json(j);
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// MeasurementReportAppLayer-r17-IEs ::= SEQUENCE
SRSASN_CODE meas_report_app_layer_r17_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, meas_report_app_layer_list_r17, 1, 16));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_report_app_layer_r17_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(meas_report_app_layer_list_r17, bref, 1, 16));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_report_app_layer_r17_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("measurementReportAppLayerList-r17");
  for (const auto& e1 : meas_report_app_layer_list_r17) {
    e1.to_json(j);
  }
  j.end_array();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// RRCReconfigurationComplete-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_complete_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_complete_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCReestablishmentComplete-IEs ::= SEQUENCE
SRSASN_CODE rrc_reest_complete_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_reest_complete_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_reest_complete_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCResumeComplete-IEs ::= SEQUENCE
SRSASN_CODE rrc_resume_complete_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ded_nas_msg.size() > 0, 1));
  HANDLE_CODE(bref.pack(sel_plmn_id_present, 1));
  HANDLE_CODE(bref.pack(ul_tx_direct_current_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ded_nas_msg.size() > 0) {
    HANDLE_CODE(ded_nas_msg.pack(bref));
  }
  if (sel_plmn_id_present) {
    HANDLE_CODE(pack_integer(bref, sel_plmn_id, (uint8_t)1u, (uint8_t)12u));
  }
  if (ul_tx_direct_current_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ul_tx_direct_current_list, 1, 32));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_complete_ies_s::unpack(cbit_ref& bref)
{
  bool ded_nas_msg_present;
  HANDLE_CODE(bref.unpack(ded_nas_msg_present, 1));
  HANDLE_CODE(bref.unpack(sel_plmn_id_present, 1));
  bool ul_tx_direct_current_list_present;
  HANDLE_CODE(bref.unpack(ul_tx_direct_current_list_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ded_nas_msg_present) {
    HANDLE_CODE(ded_nas_msg.unpack(bref));
  }
  if (sel_plmn_id_present) {
    HANDLE_CODE(unpack_integer(sel_plmn_id, bref, (uint8_t)1u, (uint8_t)12u));
  }
  if (ul_tx_direct_current_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ul_tx_direct_current_list, bref, 1, 32));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_resume_complete_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ded_nas_msg.size() > 0) {
    j.write_str("dedicatedNAS-Message", ded_nas_msg.to_string());
  }
  if (sel_plmn_id_present) {
    j.write_int("selectedPLMN-Identity", sel_plmn_id);
  }
  if (ul_tx_direct_current_list.size() > 0) {
    j.start_array("uplinkTxDirectCurrentList");
    for (const auto& e1 : ul_tx_direct_current_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCSetupComplete-IEs ::= SEQUENCE
SRSASN_CODE rrc_setup_complete_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(registered_amf_present, 1));
  HANDLE_CODE(bref.pack(guami_type_present, 1));
  HANDLE_CODE(bref.pack(s_nssai_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(ng_5_g_s_tmsi_value_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(pack_integer(bref, sel_plmn_id, (uint8_t)1u, (uint8_t)12u));
  if (registered_amf_present) {
    HANDLE_CODE(registered_amf.pack(bref));
  }
  if (guami_type_present) {
    HANDLE_CODE(guami_type.pack(bref));
  }
  if (s_nssai_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, s_nssai_list, 1, 8));
  }
  HANDLE_CODE(ded_nas_msg.pack(bref));
  if (ng_5_g_s_tmsi_value_present) {
    HANDLE_CODE(ng_5_g_s_tmsi_value.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_setup_complete_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(registered_amf_present, 1));
  HANDLE_CODE(bref.unpack(guami_type_present, 1));
  bool s_nssai_list_present;
  HANDLE_CODE(bref.unpack(s_nssai_list_present, 1));
  HANDLE_CODE(bref.unpack(ng_5_g_s_tmsi_value_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(unpack_integer(sel_plmn_id, bref, (uint8_t)1u, (uint8_t)12u));
  if (registered_amf_present) {
    HANDLE_CODE(registered_amf.unpack(bref));
  }
  if (guami_type_present) {
    HANDLE_CODE(guami_type.unpack(bref));
  }
  if (s_nssai_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(s_nssai_list, bref, 1, 8));
  }
  HANDLE_CODE(ded_nas_msg.unpack(bref));
  if (ng_5_g_s_tmsi_value_present) {
    HANDLE_CODE(ng_5_g_s_tmsi_value.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_setup_complete_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("selectedPLMN-Identity", sel_plmn_id);
  if (registered_amf_present) {
    j.write_fieldname("registeredAMF");
    registered_amf.to_json(j);
  }
  if (guami_type_present) {
    j.write_str("guami-Type", guami_type.to_string());
  }
  if (s_nssai_list.size() > 0) {
    j.start_array("s-NSSAI-List");
    for (const auto& e1 : s_nssai_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_str("dedicatedNAS-Message", ded_nas_msg.to_string());
  if (ng_5_g_s_tmsi_value_present) {
    j.write_fieldname("ng-5G-S-TMSI-Value");
    ng_5_g_s_tmsi_value.to_json(j);
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

const char* rrc_setup_complete_ies_s::guami_type_opts::to_string() const
{
  static const char* names[] = {"native", "mapped"};
  return convert_enum_idx(names, 2, value, "rrc_setup_complete_ies_s::guami_type_e_");
}

void rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_::destroy_()
{
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      c.destroy<fixed_bitstring<48>>();
      break;
    case types::ng_5_g_s_tmsi_part2:
      c.destroy<fixed_bitstring<9>>();
      break;
    default:
      break;
  }
}
void rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      c.init<fixed_bitstring<48>>();
      break;
    case types::ng_5_g_s_tmsi_part2:
      c.init<fixed_bitstring<9>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_");
  }
}
rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_::ng_5_g_s_tmsi_value_c_(
    const rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      c.init(other.c.get<fixed_bitstring<48>>());
      break;
    case types::ng_5_g_s_tmsi_part2:
      c.init(other.c.get<fixed_bitstring<9>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_");
  }
}
rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_& rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_::operator=(
    const rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      c.set(other.c.get<fixed_bitstring<48>>());
      break;
    case types::ng_5_g_s_tmsi_part2:
      c.set(other.c.get<fixed_bitstring<9>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_");
  }

  return *this;
}
fixed_bitstring<48>& rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_::set_ng_5_g_s_tmsi()
{
  set(types::ng_5_g_s_tmsi);
  return c.get<fixed_bitstring<48>>();
}
fixed_bitstring<9>& rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_::set_ng_5_g_s_tmsi_part2()
{
  set(types::ng_5_g_s_tmsi_part2);
  return c.get<fixed_bitstring<9>>();
}
void rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      j.write_str("ng-5G-S-TMSI", c.get<fixed_bitstring<48>>().to_string());
      break;
    case types::ng_5_g_s_tmsi_part2:
      j.write_str("ng-5G-S-TMSI-Part2", c.get<fixed_bitstring<9>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      HANDLE_CODE(c.get<fixed_bitstring<48>>().pack(bref));
      break;
    case types::ng_5_g_s_tmsi_part2:
      HANDLE_CODE(c.get<fixed_bitstring<9>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ng_5_g_s_tmsi:
      HANDLE_CODE(c.get<fixed_bitstring<48>>().unpack(bref));
      break;
    case types::ng_5_g_s_tmsi_part2:
      HANDLE_CODE(c.get<fixed_bitstring<9>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_::types_opts::to_string() const
{
  static const char* names[] = {"ng-5G-S-TMSI", "ng-5G-S-TMSI-Part2"};
  return convert_enum_idx(names, 2, value, "rrc_setup_complete_ies_s::ng_5_g_s_tmsi_value_c_::types");
}

// SCGFailureInformation-IEs ::= SEQUENCE
SRSASN_CODE scg_fail_info_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fail_report_scg_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (fail_report_scg_present) {
    HANDLE_CODE(fail_report_scg.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE scg_fail_info_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(fail_report_scg_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (fail_report_scg_present) {
    HANDLE_CODE(fail_report_scg.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void scg_fail_info_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (fail_report_scg_present) {
    j.write_fieldname("failureReportSCG");
    fail_report_scg.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// SCGFailureInformationEUTRA-IEs ::= SEQUENCE
SRSASN_CODE scg_fail_info_eutra_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fail_report_scg_eutra_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (fail_report_scg_eutra_present) {
    HANDLE_CODE(fail_report_scg_eutra.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE scg_fail_info_eutra_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(fail_report_scg_eutra_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (fail_report_scg_eutra_present) {
    HANDLE_CODE(fail_report_scg_eutra.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void scg_fail_info_eutra_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (fail_report_scg_eutra_present) {
    j.write_fieldname("failureReportSCG-EUTRA");
    fail_report_scg_eutra.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// SecurityModeComplete-IEs ::= SEQUENCE
SRSASN_CODE security_mode_complete_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE security_mode_complete_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void security_mode_complete_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// SecurityModeFailure-IEs ::= SEQUENCE
SRSASN_CODE security_mode_fail_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE security_mode_fail_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void security_mode_fail_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// SidelinkUEInformationNR-r16-IEs ::= SEQUENCE
SRSASN_CODE sidelink_ue_info_nr_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_rx_interested_freq_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_tx_res_req_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_fail_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (sl_rx_interested_freq_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rx_interested_freq_list_r16, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (sl_tx_res_req_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_tx_res_req_list_r16, 1, 32));
  }
  if (sl_fail_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_fail_list_r16, 1, 32));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sidelink_ue_info_nr_r16_ies_s::unpack(cbit_ref& bref)
{
  bool sl_rx_interested_freq_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_rx_interested_freq_list_r16_present, 1));
  bool sl_tx_res_req_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_tx_res_req_list_r16_present, 1));
  bool sl_fail_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_fail_list_r16_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (sl_rx_interested_freq_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rx_interested_freq_list_r16, bref, 1, 8, integer_packer<uint8_t>(1, 8)));
  }
  if (sl_tx_res_req_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_tx_res_req_list_r16, bref, 1, 32));
  }
  if (sl_fail_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_fail_list_r16, bref, 1, 32));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sidelink_ue_info_nr_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_rx_interested_freq_list_r16.size() > 0) {
    j.start_array("sl-RxInterestedFreqList-r16");
    for (const auto& e1 : sl_rx_interested_freq_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_tx_res_req_list_r16.size() > 0) {
    j.start_array("sl-TxResourceReqList-r16");
    for (const auto& e1 : sl_tx_res_req_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_fail_list_r16.size() > 0) {
    j.start_array("sl-FailureList-r16");
    for (const auto& e1 : sl_fail_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UEAssistanceInformation-IEs ::= SEQUENCE
SRSASN_CODE ue_assist_info_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(delay_budget_report_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (delay_budget_report_present) {
    HANDLE_CODE(delay_budget_report.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_assist_info_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(delay_budget_report_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (delay_budget_report_present) {
    HANDLE_CODE(delay_budget_report.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_assist_info_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (delay_budget_report_present) {
    j.write_fieldname("delayBudgetReport");
    delay_budget_report.to_json(j);
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UECapabilityInformation-IEs ::= SEQUENCE
SRSASN_CODE ue_cap_info_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ue_cap_rat_container_list_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ue_cap_rat_container_list_present) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ue_cap_rat_container_list, 0, 8));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_info_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ue_cap_rat_container_list_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ue_cap_rat_container_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ue_cap_rat_container_list, bref, 0, 8));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_cap_info_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ue_cap_rat_container_list_present) {
    j.start_array("ue-CapabilityRAT-ContainerList");
    for (const auto& e1 : ue_cap_rat_container_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// UEInformationResponse-r16-IEs ::= SEQUENCE
SRSASN_CODE ue_info_resp_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_result_idle_eutra_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_result_idle_nr_r16_present, 1));
  HANDLE_CODE(bref.pack(log_meas_report_r16_present, 1));
  HANDLE_CODE(bref.pack(conn_est_fail_report_r16_present, 1));
  HANDLE_CODE(bref.pack(ra_report_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(rlf_report_r16_present, 1));
  HANDLE_CODE(bref.pack(mob_history_report_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (meas_result_idle_eutra_r16_present) {
    HANDLE_CODE(meas_result_idle_eutra_r16.pack(bref));
  }
  if (meas_result_idle_nr_r16_present) {
    HANDLE_CODE(meas_result_idle_nr_r16.pack(bref));
  }
  if (log_meas_report_r16_present) {
    HANDLE_CODE(log_meas_report_r16.pack(bref));
  }
  if (conn_est_fail_report_r16_present) {
    HANDLE_CODE(conn_est_fail_report_r16.pack(bref));
  }
  if (ra_report_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ra_report_list_r16, 1, 8));
  }
  if (rlf_report_r16_present) {
    HANDLE_CODE(rlf_report_r16.pack(bref));
  }
  if (mob_history_report_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, mob_history_report_r16, 1, 16));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_info_resp_r16_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_result_idle_eutra_r16_present, 1));
  HANDLE_CODE(bref.unpack(meas_result_idle_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(log_meas_report_r16_present, 1));
  HANDLE_CODE(bref.unpack(conn_est_fail_report_r16_present, 1));
  bool ra_report_list_r16_present;
  HANDLE_CODE(bref.unpack(ra_report_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(rlf_report_r16_present, 1));
  bool mob_history_report_r16_present;
  HANDLE_CODE(bref.unpack(mob_history_report_r16_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (meas_result_idle_eutra_r16_present) {
    HANDLE_CODE(meas_result_idle_eutra_r16.unpack(bref));
  }
  if (meas_result_idle_nr_r16_present) {
    HANDLE_CODE(meas_result_idle_nr_r16.unpack(bref));
  }
  if (log_meas_report_r16_present) {
    HANDLE_CODE(log_meas_report_r16.unpack(bref));
  }
  if (conn_est_fail_report_r16_present) {
    HANDLE_CODE(conn_est_fail_report_r16.unpack(bref));
  }
  if (ra_report_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ra_report_list_r16, bref, 1, 8));
  }
  if (rlf_report_r16_present) {
    HANDLE_CODE(rlf_report_r16.unpack(bref));
  }
  if (mob_history_report_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(mob_history_report_r16, bref, 1, 16));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_info_resp_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_result_idle_eutra_r16_present) {
    j.write_fieldname("measResultIdleEUTRA-r16");
    meas_result_idle_eutra_r16.to_json(j);
  }
  if (meas_result_idle_nr_r16_present) {
    j.write_fieldname("measResultIdleNR-r16");
    meas_result_idle_nr_r16.to_json(j);
  }
  if (log_meas_report_r16_present) {
    j.write_fieldname("logMeasReport-r16");
    log_meas_report_r16.to_json(j);
  }
  if (conn_est_fail_report_r16_present) {
    j.write_fieldname("connEstFailReport-r16");
    conn_est_fail_report_r16.to_json(j);
  }
  if (ra_report_list_r16.size() > 0) {
    j.start_array("ra-ReportList-r16");
    for (const auto& e1 : ra_report_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (rlf_report_r16_present) {
    j.write_fieldname("rlf-Report-r16");
    rlf_report_r16.to_json(j);
  }
  if (mob_history_report_r16.size() > 0) {
    j.start_array("mobilityHistoryReport-r16");
    for (const auto& e1 : mob_history_report_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UEPositioningAssistanceInfo-r17-IEs ::= SEQUENCE
SRSASN_CODE ue_positioning_assist_info_r17_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ue_tx_teg_assoc_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ue_tx_teg_assoc_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ue_tx_teg_assoc_list_r17, 1, 256));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_positioning_assist_info_r17_ies_s::unpack(cbit_ref& bref)
{
  bool ue_tx_teg_assoc_list_r17_present;
  HANDLE_CODE(bref.unpack(ue_tx_teg_assoc_list_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ue_tx_teg_assoc_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ue_tx_teg_assoc_list_r17, bref, 1, 256));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_positioning_assist_info_r17_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ue_tx_teg_assoc_list_r17.size() > 0) {
    j.start_array("ue-TxTEG-AssociationList-r17");
    for (const auto& e1 : ue_tx_teg_assoc_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// ULDedicatedMessageSegment-r16-IEs ::= SEQUENCE
SRSASN_CODE ul_ded_msg_segment_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(pack_integer(bref, segment_num_r16, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(rrc_msg_segment_container_r16.pack(bref));
  HANDLE_CODE(rrc_msg_segment_type_r16.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_ded_msg_segment_r16_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(unpack_integer(segment_num_r16, bref, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(rrc_msg_segment_container_r16.unpack(bref));
  HANDLE_CODE(rrc_msg_segment_type_r16.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ul_ded_msg_segment_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("segmentNumber-r16", segment_num_r16);
  j.write_str("rrc-MessageSegmentContainer-r16", rrc_msg_segment_container_r16.to_string());
  j.write_str("rrc-MessageSegmentType-r16", rrc_msg_segment_type_r16.to_string());
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

const char* ul_ded_msg_segment_r16_ies_s::rrc_msg_segment_type_r16_opts::to_string() const
{
  static const char* names[] = {"notLastSegment", "lastSegment"};
  return convert_enum_idx(names, 2, value, "ul_ded_msg_segment_r16_ies_s::rrc_msg_segment_type_r16_e_");
}

// ULInformationTransfer-IEs ::= SEQUENCE
SRSASN_CODE ul_info_transfer_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ded_nas_msg.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ded_nas_msg.size() > 0) {
    HANDLE_CODE(ded_nas_msg.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_info_transfer_ies_s::unpack(cbit_ref& bref)
{
  bool ded_nas_msg_present;
  HANDLE_CODE(bref.unpack(ded_nas_msg_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ded_nas_msg_present) {
    HANDLE_CODE(ded_nas_msg.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ul_info_transfer_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ded_nas_msg.size() > 0) {
    j.write_str("dedicatedNAS-Message", ded_nas_msg.to_string());
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// ULInformationTransferIRAT-r16-IEs ::= SEQUENCE
SRSASN_CODE ul_info_transfer_irat_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_dcch_msg_eutra_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ul_dcch_msg_eutra_r16.size() > 0) {
    HANDLE_CODE(ul_dcch_msg_eutra_r16.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_info_transfer_irat_r16_ies_s::unpack(cbit_ref& bref)
{
  bool ul_dcch_msg_eutra_r16_present;
  HANDLE_CODE(bref.unpack(ul_dcch_msg_eutra_r16_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ul_dcch_msg_eutra_r16_present) {
    HANDLE_CODE(ul_dcch_msg_eutra_r16.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ul_info_transfer_irat_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_dcch_msg_eutra_r16.size() > 0) {
    j.write_str("ul-DCCH-MessageEUTRA-r16", ul_dcch_msg_eutra_r16.to_string());
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// ULInformationTransferMRDC-IEs ::= SEQUENCE
SRSASN_CODE ul_info_transfer_mrdc_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_dcch_msg_nr.size() > 0, 1));
  HANDLE_CODE(bref.pack(ul_dcch_msg_eutra.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ul_dcch_msg_nr.size() > 0) {
    HANDLE_CODE(ul_dcch_msg_nr.pack(bref));
  }
  if (ul_dcch_msg_eutra.size() > 0) {
    HANDLE_CODE(ul_dcch_msg_eutra.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_info_transfer_mrdc_ies_s::unpack(cbit_ref& bref)
{
  bool ul_dcch_msg_nr_present;
  HANDLE_CODE(bref.unpack(ul_dcch_msg_nr_present, 1));
  bool ul_dcch_msg_eutra_present;
  HANDLE_CODE(bref.unpack(ul_dcch_msg_eutra_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ul_dcch_msg_nr_present) {
    HANDLE_CODE(ul_dcch_msg_nr.unpack(bref));
  }
  if (ul_dcch_msg_eutra_present) {
    HANDLE_CODE(ul_dcch_msg_eutra.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ul_info_transfer_mrdc_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_dcch_msg_nr.size() > 0) {
    j.write_str("ul-DCCH-MessageNR", ul_dcch_msg_nr.to_string());
  }
  if (ul_dcch_msg_eutra.size() > 0) {
    j.write_str("ul-DCCH-MessageEUTRA", ul_dcch_msg_eutra.to_string());
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// CounterCheckResponse ::= SEQUENCE
SRSASN_CODE counter_check_resp_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE counter_check_resp_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void counter_check_resp_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void counter_check_resp_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
counter_check_resp_ies_s& counter_check_resp_s::crit_exts_c_::set_counter_check_resp()
{
  set(types::counter_check_resp);
  return c;
}
void counter_check_resp_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void counter_check_resp_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::counter_check_resp:
      j.write_fieldname("counterCheckResponse");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "counter_check_resp_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE counter_check_resp_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::counter_check_resp:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "counter_check_resp_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE counter_check_resp_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::counter_check_resp:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "counter_check_resp_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* counter_check_resp_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"counterCheckResponse", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "counter_check_resp_s::crit_exts_c_::types");
}

// DedicatedSIBRequest-r16 ::= SEQUENCE
SRSASN_CODE ded_sib_request_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ded_sib_request_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ded_sib_request_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ded_sib_request_r16_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ded_sib_request_r16_ies_s& ded_sib_request_r16_s::crit_exts_c_::set_ded_sib_request_r16()
{
  set(types::ded_sib_request_r16);
  return c;
}
void ded_sib_request_r16_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ded_sib_request_r16_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ded_sib_request_r16:
      j.write_fieldname("dedicatedSIBRequest-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ded_sib_request_r16_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ded_sib_request_r16_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ded_sib_request_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ded_sib_request_r16_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ded_sib_request_r16_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ded_sib_request_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ded_sib_request_r16_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ded_sib_request_r16_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"dedicatedSIBRequest-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ded_sib_request_r16_s::crit_exts_c_::types");
}

// FailureInformation ::= SEQUENCE
SRSASN_CODE fail_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE fail_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void fail_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void fail_info_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
fail_info_ies_s& fail_info_s::crit_exts_c_::set_fail_info()
{
  set(types::fail_info);
  return c;
}
void fail_info_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void fail_info_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fail_info:
      j.write_fieldname("failureInformation");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "fail_info_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE fail_info_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fail_info:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "fail_info_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE fail_info_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fail_info:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "fail_info_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* fail_info_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"failureInformation", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "fail_info_s::crit_exts_c_::types");
}

// IABOtherInformation-r16 ::= SEQUENCE
SRSASN_CODE iab_other_info_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_other_info_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void iab_other_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void iab_other_info_r16_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
iab_other_info_r16_ies_s& iab_other_info_r16_s::crit_exts_c_::set_iab_other_info_r16()
{
  set(types::iab_other_info_r16);
  return c;
}
void iab_other_info_r16_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void iab_other_info_r16_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::iab_other_info_r16:
      j.write_fieldname("iabOtherInformation-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "iab_other_info_r16_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE iab_other_info_r16_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::iab_other_info_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "iab_other_info_r16_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_other_info_r16_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::iab_other_info_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "iab_other_info_r16_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* iab_other_info_r16_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"iabOtherInformation-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "iab_other_info_r16_s::crit_exts_c_::types");
}

// LocationMeasurementIndication ::= SEQUENCE
SRSASN_CODE location_meas_ind_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE location_meas_ind_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void location_meas_ind_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void location_meas_ind_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
location_meas_ind_ies_s& location_meas_ind_s::crit_exts_c_::set_location_meas_ind()
{
  set(types::location_meas_ind);
  return c;
}
void location_meas_ind_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void location_meas_ind_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::location_meas_ind:
      j.write_fieldname("locationMeasurementIndication");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "location_meas_ind_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE location_meas_ind_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::location_meas_ind:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "location_meas_ind_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE location_meas_ind_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::location_meas_ind:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "location_meas_ind_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* location_meas_ind_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"locationMeasurementIndication", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "location_meas_ind_s::crit_exts_c_::types");
}

// MBSInterestIndication-r17 ::= SEQUENCE
SRSASN_CODE mb_si_nterest_ind_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mb_si_nterest_ind_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void mb_si_nterest_ind_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void mb_si_nterest_ind_r17_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
mb_si_nterest_ind_r17_ies_s& mb_si_nterest_ind_r17_s::crit_exts_c_::set_mbs_interest_ind_r17()
{
  set(types::mbs_interest_ind_r17);
  return c;
}
void mb_si_nterest_ind_r17_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void mb_si_nterest_ind_r17_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::mbs_interest_ind_r17:
      j.write_fieldname("mbsInterestIndication-r17");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "mb_si_nterest_ind_r17_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE mb_si_nterest_ind_r17_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::mbs_interest_ind_r17:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "mb_si_nterest_ind_r17_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mb_si_nterest_ind_r17_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::mbs_interest_ind_r17:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "mb_si_nterest_ind_r17_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* mb_si_nterest_ind_r17_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"mbsInterestIndication-r17", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "mb_si_nterest_ind_r17_s::crit_exts_c_::types");
}

// MCGFailureInformation-r16 ::= SEQUENCE
SRSASN_CODE mcg_fail_info_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mcg_fail_info_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void mcg_fail_info_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void mcg_fail_info_r16_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
mcg_fail_info_r16_ies_s& mcg_fail_info_r16_s::crit_exts_c_::set_mcg_fail_info_r16()
{
  set(types::mcg_fail_info_r16);
  return c;
}
void mcg_fail_info_r16_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void mcg_fail_info_r16_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::mcg_fail_info_r16:
      j.write_fieldname("mcgFailureInformation-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "mcg_fail_info_r16_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE mcg_fail_info_r16_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::mcg_fail_info_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "mcg_fail_info_r16_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mcg_fail_info_r16_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::mcg_fail_info_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "mcg_fail_info_r16_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* mcg_fail_info_r16_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"mcgFailureInformation-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "mcg_fail_info_r16_s::crit_exts_c_::types");
}

// MeasurementReport ::= SEQUENCE
SRSASN_CODE meas_report_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_report_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void meas_report_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void meas_report_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
meas_report_ies_s& meas_report_s::crit_exts_c_::set_meas_report()
{
  set(types::meas_report);
  return c;
}
void meas_report_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void meas_report_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::meas_report:
      j.write_fieldname("measurementReport");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "meas_report_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE meas_report_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::meas_report:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "meas_report_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_report_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::meas_report:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "meas_report_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* meas_report_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"measurementReport", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "meas_report_s::crit_exts_c_::types");
}

// RRCReconfigurationComplete ::= SEQUENCE
SRSASN_CODE rrc_recfg_complete_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_recfg_complete_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_recfg_complete_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
rrc_recfg_complete_ies_s& rrc_recfg_complete_s::crit_exts_c_::set_rrc_recfg_complete()
{
  set(types::rrc_recfg_complete);
  return c;
}
void rrc_recfg_complete_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_recfg_complete_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_recfg_complete:
      j.write_fieldname("rrcReconfigurationComplete");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_complete_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_recfg_complete_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_recfg_complete:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_complete_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_recfg_complete:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_complete_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_recfg_complete_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcReconfigurationComplete", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_recfg_complete_s::crit_exts_c_::types");
}

// RRCReestablishmentComplete ::= SEQUENCE
SRSASN_CODE rrc_reest_complete_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_reest_complete_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_reest_complete_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_reest_complete_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
rrc_reest_complete_ies_s& rrc_reest_complete_s::crit_exts_c_::set_rrc_reest_complete()
{
  set(types::rrc_reest_complete);
  return c;
}
void rrc_reest_complete_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_reest_complete_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_reest_complete:
      j.write_fieldname("rrcReestablishmentComplete");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_reest_complete_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_reest_complete_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_reest_complete:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_reest_complete_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_reest_complete_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_reest_complete:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_reest_complete_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_reest_complete_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcReestablishmentComplete", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_reest_complete_s::crit_exts_c_::types");
}

// RRCResumeComplete ::= SEQUENCE
SRSASN_CODE rrc_resume_complete_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_complete_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_resume_complete_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_resume_complete_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
rrc_resume_complete_ies_s& rrc_resume_complete_s::crit_exts_c_::set_rrc_resume_complete()
{
  set(types::rrc_resume_complete);
  return c;
}
void rrc_resume_complete_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_resume_complete_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_resume_complete:
      j.write_fieldname("rrcResumeComplete");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_complete_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_resume_complete_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_resume_complete:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_complete_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_resume_complete_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_resume_complete:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_resume_complete_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_resume_complete_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcResumeComplete", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_resume_complete_s::crit_exts_c_::types");
}

// RRCSetupComplete ::= SEQUENCE
SRSASN_CODE rrc_setup_complete_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_setup_complete_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_setup_complete_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_setup_complete_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
rrc_setup_complete_ies_s& rrc_setup_complete_s::crit_exts_c_::set_rrc_setup_complete()
{
  set(types::rrc_setup_complete);
  return c;
}
void rrc_setup_complete_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_setup_complete_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_setup_complete:
      j.write_fieldname("rrcSetupComplete");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_setup_complete_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_setup_complete_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_setup_complete:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_setup_complete_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_setup_complete_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_setup_complete:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_setup_complete_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_setup_complete_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcSetupComplete", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_setup_complete_s::crit_exts_c_::types");
}

// SCGFailureInformation ::= SEQUENCE
SRSASN_CODE scg_fail_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE scg_fail_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void scg_fail_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void scg_fail_info_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
scg_fail_info_ies_s& scg_fail_info_s::crit_exts_c_::set_scg_fail_info()
{
  set(types::scg_fail_info);
  return c;
}
void scg_fail_info_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void scg_fail_info_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::scg_fail_info:
      j.write_fieldname("scgFailureInformation");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "scg_fail_info_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE scg_fail_info_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::scg_fail_info:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "scg_fail_info_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE scg_fail_info_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::scg_fail_info:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "scg_fail_info_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* scg_fail_info_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"scgFailureInformation", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "scg_fail_info_s::crit_exts_c_::types");
}

// SCGFailureInformationEUTRA ::= SEQUENCE
SRSASN_CODE scg_fail_info_eutra_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE scg_fail_info_eutra_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void scg_fail_info_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void scg_fail_info_eutra_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
scg_fail_info_eutra_ies_s& scg_fail_info_eutra_s::crit_exts_c_::set_scg_fail_info_eutra()
{
  set(types::scg_fail_info_eutra);
  return c;
}
void scg_fail_info_eutra_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void scg_fail_info_eutra_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::scg_fail_info_eutra:
      j.write_fieldname("scgFailureInformationEUTRA");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "scg_fail_info_eutra_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE scg_fail_info_eutra_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::scg_fail_info_eutra:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "scg_fail_info_eutra_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE scg_fail_info_eutra_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::scg_fail_info_eutra:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "scg_fail_info_eutra_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* scg_fail_info_eutra_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"scgFailureInformationEUTRA", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "scg_fail_info_eutra_s::crit_exts_c_::types");
}

// SecurityModeComplete ::= SEQUENCE
SRSASN_CODE security_mode_complete_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE security_mode_complete_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void security_mode_complete_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void security_mode_complete_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
security_mode_complete_ies_s& security_mode_complete_s::crit_exts_c_::set_security_mode_complete()
{
  set(types::security_mode_complete);
  return c;
}
void security_mode_complete_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void security_mode_complete_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::security_mode_complete:
      j.write_fieldname("securityModeComplete");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "security_mode_complete_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE security_mode_complete_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::security_mode_complete:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "security_mode_complete_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE security_mode_complete_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::security_mode_complete:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "security_mode_complete_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* security_mode_complete_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"securityModeComplete", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "security_mode_complete_s::crit_exts_c_::types");
}

// SecurityModeFailure ::= SEQUENCE
SRSASN_CODE security_mode_fail_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE security_mode_fail_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void security_mode_fail_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void security_mode_fail_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
security_mode_fail_ies_s& security_mode_fail_s::crit_exts_c_::set_security_mode_fail()
{
  set(types::security_mode_fail);
  return c;
}
void security_mode_fail_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void security_mode_fail_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::security_mode_fail:
      j.write_fieldname("securityModeFailure");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "security_mode_fail_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE security_mode_fail_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::security_mode_fail:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "security_mode_fail_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE security_mode_fail_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::security_mode_fail:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "security_mode_fail_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* security_mode_fail_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"securityModeFailure", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "security_mode_fail_s::crit_exts_c_::types");
}

// SidelinkUEInformationNR-r16 ::= SEQUENCE
SRSASN_CODE sidelink_ue_info_nr_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sidelink_ue_info_nr_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void sidelink_ue_info_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void sidelink_ue_info_nr_r16_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
sidelink_ue_info_nr_r16_ies_s& sidelink_ue_info_nr_r16_s::crit_exts_c_::set_sidelink_ue_info_nr_r16()
{
  set(types::sidelink_ue_info_nr_r16);
  return c;
}
void sidelink_ue_info_nr_r16_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void sidelink_ue_info_nr_r16_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sidelink_ue_info_nr_r16:
      j.write_fieldname("sidelinkUEInformationNR-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "sidelink_ue_info_nr_r16_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE sidelink_ue_info_nr_r16_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sidelink_ue_info_nr_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "sidelink_ue_info_nr_r16_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sidelink_ue_info_nr_r16_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sidelink_ue_info_nr_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "sidelink_ue_info_nr_r16_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sidelink_ue_info_nr_r16_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"sidelinkUEInformationNR-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "sidelink_ue_info_nr_r16_s::crit_exts_c_::types");
}

// UEAssistanceInformation ::= SEQUENCE
SRSASN_CODE ue_assist_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_assist_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_assist_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ue_assist_info_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ue_assist_info_ies_s& ue_assist_info_s::crit_exts_c_::set_ue_assist_info()
{
  set(types::ue_assist_info);
  return c;
}
void ue_assist_info_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ue_assist_info_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_assist_info:
      j.write_fieldname("ueAssistanceInformation");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_assist_info_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ue_assist_info_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ue_assist_info:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_assist_info_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_assist_info_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ue_assist_info:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_assist_info_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_assist_info_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"ueAssistanceInformation", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ue_assist_info_s::crit_exts_c_::types");
}

// UECapabilityInformation ::= SEQUENCE
SRSASN_CODE ue_cap_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_cap_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ue_cap_info_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ue_cap_info_ies_s& ue_cap_info_s::crit_exts_c_::set_ue_cap_info()
{
  set(types::ue_cap_info);
  return c;
}
void ue_cap_info_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ue_cap_info_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_cap_info:
      j.write_fieldname("ueCapabilityInformation");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_cap_info_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ue_cap_info_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ue_cap_info:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_cap_info_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_info_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ue_cap_info:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_cap_info_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_cap_info_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"ueCapabilityInformation", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ue_cap_info_s::crit_exts_c_::types");
}

// UEInformationResponse-r16 ::= SEQUENCE
SRSASN_CODE ue_info_resp_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_info_resp_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_info_resp_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier", rrc_transaction_id);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ue_info_resp_r16_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ue_info_resp_r16_ies_s& ue_info_resp_r16_s::crit_exts_c_::set_ue_info_resp_r16()
{
  set(types::ue_info_resp_r16);
  return c;
}
void ue_info_resp_r16_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ue_info_resp_r16_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_info_resp_r16:
      j.write_fieldname("ueInformationResponse-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_info_resp_r16_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ue_info_resp_r16_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ue_info_resp_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_info_resp_r16_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_info_resp_r16_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ue_info_resp_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_info_resp_r16_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_info_resp_r16_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"ueInformationResponse-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ue_info_resp_r16_s::crit_exts_c_::types");
}

// UEPositioningAssistanceInfo-r17 ::= SEQUENCE
SRSASN_CODE ue_positioning_assist_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_positioning_assist_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_positioning_assist_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ue_positioning_assist_info_r17_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ue_positioning_assist_info_r17_ies_s&
ue_positioning_assist_info_r17_s::crit_exts_c_::set_ue_positioning_assist_info_r17()
{
  set(types::ue_positioning_assist_info_r17);
  return c;
}
void ue_positioning_assist_info_r17_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ue_positioning_assist_info_r17_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_positioning_assist_info_r17:
      j.write_fieldname("uePositioningAssistanceInfo-r17");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_positioning_assist_info_r17_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ue_positioning_assist_info_r17_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ue_positioning_assist_info_r17:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_positioning_assist_info_r17_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_positioning_assist_info_r17_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ue_positioning_assist_info_r17:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_positioning_assist_info_r17_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_positioning_assist_info_r17_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"uePositioningAssistanceInfo-r17", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ue_positioning_assist_info_r17_s::crit_exts_c_::types");
}

// ULDedicatedMessageSegment-r16 ::= SEQUENCE
SRSASN_CODE ul_ded_msg_segment_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_ded_msg_segment_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ul_ded_msg_segment_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ul_ded_msg_segment_r16_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ul_ded_msg_segment_r16_ies_s& ul_ded_msg_segment_r16_s::crit_exts_c_::set_ul_ded_msg_segment_r16()
{
  set(types::ul_ded_msg_segment_r16);
  return c;
}
void ul_ded_msg_segment_r16_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ul_ded_msg_segment_r16_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ul_ded_msg_segment_r16:
      j.write_fieldname("ulDedicatedMessageSegment-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ded_msg_segment_r16_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ul_ded_msg_segment_r16_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ul_ded_msg_segment_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ded_msg_segment_r16_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_ded_msg_segment_r16_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ul_ded_msg_segment_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ul_ded_msg_segment_r16_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ul_ded_msg_segment_r16_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"ulDedicatedMessageSegment-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ul_ded_msg_segment_r16_s::crit_exts_c_::types");
}

// ULInformationTransfer ::= SEQUENCE
SRSASN_CODE ul_info_transfer_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_info_transfer_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ul_info_transfer_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ul_info_transfer_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ul_info_transfer_ies_s& ul_info_transfer_s::crit_exts_c_::set_ul_info_transfer()
{
  set(types::ul_info_transfer);
  return c;
}
void ul_info_transfer_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ul_info_transfer_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ul_info_transfer:
      j.write_fieldname("ulInformationTransfer");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ul_info_transfer_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ul_info_transfer:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_info_transfer_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ul_info_transfer:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ul_info_transfer_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"ulInformationTransfer", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ul_info_transfer_s::crit_exts_c_::types");
}

// ULInformationTransferIRAT-r16 ::= SEQUENCE
SRSASN_CODE ul_info_transfer_irat_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_info_transfer_irat_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ul_info_transfer_irat_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ul_info_transfer_irat_r16_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_& ul_info_transfer_irat_r16_s::crit_exts_c_::set_c1()
{
  set(types::c1);
  return c;
}
void ul_info_transfer_irat_r16_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ul_info_transfer_irat_r16_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_irat_r16_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ul_info_transfer_irat_r16_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_irat_r16_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_info_transfer_irat_r16_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_irat_r16_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_::set(types::options e)
{
  type_ = e;
}
ul_info_transfer_irat_r16_ies_s& ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_::set_ul_info_transfer_irat_r16()
{
  set(types::ul_info_transfer_irat_r16);
  return c;
}
void ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_::set_spare3()
{
  set(types::spare3);
}
void ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_::set_spare2()
{
  set(types::spare2);
}
void ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_::set_spare1()
{
  set(types::spare1);
}
void ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ul_info_transfer_irat_r16:
      j.write_fieldname("ulInformationTransferIRAT-r16");
      c.to_json(j);
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ul_info_transfer_irat_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ul_info_transfer_irat_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"ulInformationTransferIRAT-r16", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "ul_info_transfer_irat_r16_s::crit_exts_c_::c1_c_::types");
}

const char* ul_info_transfer_irat_r16_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"c1", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ul_info_transfer_irat_r16_s::crit_exts_c_::types");
}
uint8_t ul_info_transfer_irat_r16_s::crit_exts_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "ul_info_transfer_irat_r16_s::crit_exts_c_::types");
}

// ULInformationTransferMRDC ::= SEQUENCE
SRSASN_CODE ul_info_transfer_mrdc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_info_transfer_mrdc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ul_info_transfer_mrdc_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ul_info_transfer_mrdc_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_& ul_info_transfer_mrdc_s::crit_exts_c_::set_c1()
{
  set(types::c1);
  return c;
}
void ul_info_transfer_mrdc_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ul_info_transfer_mrdc_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_mrdc_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ul_info_transfer_mrdc_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_mrdc_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_info_transfer_mrdc_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_mrdc_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_::set(types::options e)
{
  type_ = e;
}
ul_info_transfer_mrdc_ies_s& ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_::set_ul_info_transfer_mrdc()
{
  set(types::ul_info_transfer_mrdc);
  return c;
}
void ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_::set_spare3()
{
  set(types::spare3);
}
void ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_::set_spare2()
{
  set(types::spare2);
}
void ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_::set_spare1()
{
  set(types::spare1);
}
void ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ul_info_transfer_mrdc:
      j.write_fieldname("ulInformationTransferMRDC");
      c.to_json(j);
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ul_info_transfer_mrdc:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ul_info_transfer_mrdc:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"ulInformationTransferMRDC", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "ul_info_transfer_mrdc_s::crit_exts_c_::c1_c_::types");
}

const char* ul_info_transfer_mrdc_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"c1", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ul_info_transfer_mrdc_s::crit_exts_c_::types");
}
uint8_t ul_info_transfer_mrdc_s::crit_exts_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "ul_info_transfer_mrdc_s::crit_exts_c_::types");
}

// UL-DCCH-MessageType ::= CHOICE
void ul_dcch_msg_type_c::destroy_()
{
  switch (type_) {
    case types::c1:
      c.destroy<c1_c_>();
      break;
    case types::msg_class_ext:
      c.destroy<msg_class_ext_c_>();
      break;
    default:
      break;
  }
}
void ul_dcch_msg_type_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::c1:
      c.init<c1_c_>();
      break;
    case types::msg_class_ext:
      c.init<msg_class_ext_c_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c");
  }
}
ul_dcch_msg_type_c::ul_dcch_msg_type_c(const ul_dcch_msg_type_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::c1:
      c.init(other.c.get<c1_c_>());
      break;
    case types::msg_class_ext:
      c.init(other.c.get<msg_class_ext_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c");
  }
}
ul_dcch_msg_type_c& ul_dcch_msg_type_c::operator=(const ul_dcch_msg_type_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::c1:
      c.set(other.c.get<c1_c_>());
      break;
    case types::msg_class_ext:
      c.set(other.c.get<msg_class_ext_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c");
  }

  return *this;
}
ul_dcch_msg_type_c::c1_c_& ul_dcch_msg_type_c::set_c1()
{
  set(types::c1);
  return c.get<c1_c_>();
}
ul_dcch_msg_type_c::msg_class_ext_c_& ul_dcch_msg_type_c::set_msg_class_ext()
{
  set(types::msg_class_ext);
  return c.get<msg_class_ext_c_>();
}
void ul_dcch_msg_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.get<c1_c_>().to_json(j);
      break;
    case types::msg_class_ext:
      j.write_fieldname("messageClassExtension");
      c.get<msg_class_ext_c_>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c");
  }
  j.end_obj();
}
SRSASN_CODE ul_dcch_msg_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.get<c1_c_>().pack(bref));
      break;
    case types::msg_class_ext:
      HANDLE_CODE(c.get<msg_class_ext_c_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_dcch_msg_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.get<c1_c_>().unpack(bref));
      break;
    case types::msg_class_ext:
      HANDLE_CODE(c.get<msg_class_ext_c_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void ul_dcch_msg_type_c::c1_c_::destroy_()
{
  switch (type_) {
    case types::meas_report:
      c.destroy<meas_report_s>();
      break;
    case types::rrc_recfg_complete:
      c.destroy<rrc_recfg_complete_s>();
      break;
    case types::rrc_setup_complete:
      c.destroy<rrc_setup_complete_s>();
      break;
    case types::rrc_reest_complete:
      c.destroy<rrc_reest_complete_s>();
      break;
    case types::rrc_resume_complete:
      c.destroy<rrc_resume_complete_s>();
      break;
    case types::security_mode_complete:
      c.destroy<security_mode_complete_s>();
      break;
    case types::security_mode_fail:
      c.destroy<security_mode_fail_s>();
      break;
    case types::ul_info_transfer:
      c.destroy<ul_info_transfer_s>();
      break;
    case types::location_meas_ind:
      c.destroy<location_meas_ind_s>();
      break;
    case types::ue_cap_info:
      c.destroy<ue_cap_info_s>();
      break;
    case types::counter_check_resp:
      c.destroy<counter_check_resp_s>();
      break;
    case types::ue_assist_info:
      c.destroy<ue_assist_info_s>();
      break;
    case types::fail_info:
      c.destroy<fail_info_s>();
      break;
    case types::ul_info_transfer_mrdc:
      c.destroy<ul_info_transfer_mrdc_s>();
      break;
    case types::scg_fail_info:
      c.destroy<scg_fail_info_s>();
      break;
    case types::scg_fail_info_eutra:
      c.destroy<scg_fail_info_eutra_s>();
      break;
    default:
      break;
  }
}
void ul_dcch_msg_type_c::c1_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::meas_report:
      c.init<meas_report_s>();
      break;
    case types::rrc_recfg_complete:
      c.init<rrc_recfg_complete_s>();
      break;
    case types::rrc_setup_complete:
      c.init<rrc_setup_complete_s>();
      break;
    case types::rrc_reest_complete:
      c.init<rrc_reest_complete_s>();
      break;
    case types::rrc_resume_complete:
      c.init<rrc_resume_complete_s>();
      break;
    case types::security_mode_complete:
      c.init<security_mode_complete_s>();
      break;
    case types::security_mode_fail:
      c.init<security_mode_fail_s>();
      break;
    case types::ul_info_transfer:
      c.init<ul_info_transfer_s>();
      break;
    case types::location_meas_ind:
      c.init<location_meas_ind_s>();
      break;
    case types::ue_cap_info:
      c.init<ue_cap_info_s>();
      break;
    case types::counter_check_resp:
      c.init<counter_check_resp_s>();
      break;
    case types::ue_assist_info:
      c.init<ue_assist_info_s>();
      break;
    case types::fail_info:
      c.init<fail_info_s>();
      break;
    case types::ul_info_transfer_mrdc:
      c.init<ul_info_transfer_mrdc_s>();
      break;
    case types::scg_fail_info:
      c.init<scg_fail_info_s>();
      break;
    case types::scg_fail_info_eutra:
      c.init<scg_fail_info_eutra_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::c1_c_");
  }
}
ul_dcch_msg_type_c::c1_c_::c1_c_(const ul_dcch_msg_type_c::c1_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::meas_report:
      c.init(other.c.get<meas_report_s>());
      break;
    case types::rrc_recfg_complete:
      c.init(other.c.get<rrc_recfg_complete_s>());
      break;
    case types::rrc_setup_complete:
      c.init(other.c.get<rrc_setup_complete_s>());
      break;
    case types::rrc_reest_complete:
      c.init(other.c.get<rrc_reest_complete_s>());
      break;
    case types::rrc_resume_complete:
      c.init(other.c.get<rrc_resume_complete_s>());
      break;
    case types::security_mode_complete:
      c.init(other.c.get<security_mode_complete_s>());
      break;
    case types::security_mode_fail:
      c.init(other.c.get<security_mode_fail_s>());
      break;
    case types::ul_info_transfer:
      c.init(other.c.get<ul_info_transfer_s>());
      break;
    case types::location_meas_ind:
      c.init(other.c.get<location_meas_ind_s>());
      break;
    case types::ue_cap_info:
      c.init(other.c.get<ue_cap_info_s>());
      break;
    case types::counter_check_resp:
      c.init(other.c.get<counter_check_resp_s>());
      break;
    case types::ue_assist_info:
      c.init(other.c.get<ue_assist_info_s>());
      break;
    case types::fail_info:
      c.init(other.c.get<fail_info_s>());
      break;
    case types::ul_info_transfer_mrdc:
      c.init(other.c.get<ul_info_transfer_mrdc_s>());
      break;
    case types::scg_fail_info:
      c.init(other.c.get<scg_fail_info_s>());
      break;
    case types::scg_fail_info_eutra:
      c.init(other.c.get<scg_fail_info_eutra_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::c1_c_");
  }
}
ul_dcch_msg_type_c::c1_c_& ul_dcch_msg_type_c::c1_c_::operator=(const ul_dcch_msg_type_c::c1_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::meas_report:
      c.set(other.c.get<meas_report_s>());
      break;
    case types::rrc_recfg_complete:
      c.set(other.c.get<rrc_recfg_complete_s>());
      break;
    case types::rrc_setup_complete:
      c.set(other.c.get<rrc_setup_complete_s>());
      break;
    case types::rrc_reest_complete:
      c.set(other.c.get<rrc_reest_complete_s>());
      break;
    case types::rrc_resume_complete:
      c.set(other.c.get<rrc_resume_complete_s>());
      break;
    case types::security_mode_complete:
      c.set(other.c.get<security_mode_complete_s>());
      break;
    case types::security_mode_fail:
      c.set(other.c.get<security_mode_fail_s>());
      break;
    case types::ul_info_transfer:
      c.set(other.c.get<ul_info_transfer_s>());
      break;
    case types::location_meas_ind:
      c.set(other.c.get<location_meas_ind_s>());
      break;
    case types::ue_cap_info:
      c.set(other.c.get<ue_cap_info_s>());
      break;
    case types::counter_check_resp:
      c.set(other.c.get<counter_check_resp_s>());
      break;
    case types::ue_assist_info:
      c.set(other.c.get<ue_assist_info_s>());
      break;
    case types::fail_info:
      c.set(other.c.get<fail_info_s>());
      break;
    case types::ul_info_transfer_mrdc:
      c.set(other.c.get<ul_info_transfer_mrdc_s>());
      break;
    case types::scg_fail_info:
      c.set(other.c.get<scg_fail_info_s>());
      break;
    case types::scg_fail_info_eutra:
      c.set(other.c.get<scg_fail_info_eutra_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::c1_c_");
  }

  return *this;
}
meas_report_s& ul_dcch_msg_type_c::c1_c_::set_meas_report()
{
  set(types::meas_report);
  return c.get<meas_report_s>();
}
rrc_recfg_complete_s& ul_dcch_msg_type_c::c1_c_::set_rrc_recfg_complete()
{
  set(types::rrc_recfg_complete);
  return c.get<rrc_recfg_complete_s>();
}
rrc_setup_complete_s& ul_dcch_msg_type_c::c1_c_::set_rrc_setup_complete()
{
  set(types::rrc_setup_complete);
  return c.get<rrc_setup_complete_s>();
}
rrc_reest_complete_s& ul_dcch_msg_type_c::c1_c_::set_rrc_reest_complete()
{
  set(types::rrc_reest_complete);
  return c.get<rrc_reest_complete_s>();
}
rrc_resume_complete_s& ul_dcch_msg_type_c::c1_c_::set_rrc_resume_complete()
{
  set(types::rrc_resume_complete);
  return c.get<rrc_resume_complete_s>();
}
security_mode_complete_s& ul_dcch_msg_type_c::c1_c_::set_security_mode_complete()
{
  set(types::security_mode_complete);
  return c.get<security_mode_complete_s>();
}
security_mode_fail_s& ul_dcch_msg_type_c::c1_c_::set_security_mode_fail()
{
  set(types::security_mode_fail);
  return c.get<security_mode_fail_s>();
}
ul_info_transfer_s& ul_dcch_msg_type_c::c1_c_::set_ul_info_transfer()
{
  set(types::ul_info_transfer);
  return c.get<ul_info_transfer_s>();
}
location_meas_ind_s& ul_dcch_msg_type_c::c1_c_::set_location_meas_ind()
{
  set(types::location_meas_ind);
  return c.get<location_meas_ind_s>();
}
ue_cap_info_s& ul_dcch_msg_type_c::c1_c_::set_ue_cap_info()
{
  set(types::ue_cap_info);
  return c.get<ue_cap_info_s>();
}
counter_check_resp_s& ul_dcch_msg_type_c::c1_c_::set_counter_check_resp()
{
  set(types::counter_check_resp);
  return c.get<counter_check_resp_s>();
}
ue_assist_info_s& ul_dcch_msg_type_c::c1_c_::set_ue_assist_info()
{
  set(types::ue_assist_info);
  return c.get<ue_assist_info_s>();
}
fail_info_s& ul_dcch_msg_type_c::c1_c_::set_fail_info()
{
  set(types::fail_info);
  return c.get<fail_info_s>();
}
ul_info_transfer_mrdc_s& ul_dcch_msg_type_c::c1_c_::set_ul_info_transfer_mrdc()
{
  set(types::ul_info_transfer_mrdc);
  return c.get<ul_info_transfer_mrdc_s>();
}
scg_fail_info_s& ul_dcch_msg_type_c::c1_c_::set_scg_fail_info()
{
  set(types::scg_fail_info);
  return c.get<scg_fail_info_s>();
}
scg_fail_info_eutra_s& ul_dcch_msg_type_c::c1_c_::set_scg_fail_info_eutra()
{
  set(types::scg_fail_info_eutra);
  return c.get<scg_fail_info_eutra_s>();
}
void ul_dcch_msg_type_c::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::meas_report:
      j.write_fieldname("measurementReport");
      c.get<meas_report_s>().to_json(j);
      break;
    case types::rrc_recfg_complete:
      j.write_fieldname("rrcReconfigurationComplete");
      c.get<rrc_recfg_complete_s>().to_json(j);
      break;
    case types::rrc_setup_complete:
      j.write_fieldname("rrcSetupComplete");
      c.get<rrc_setup_complete_s>().to_json(j);
      break;
    case types::rrc_reest_complete:
      j.write_fieldname("rrcReestablishmentComplete");
      c.get<rrc_reest_complete_s>().to_json(j);
      break;
    case types::rrc_resume_complete:
      j.write_fieldname("rrcResumeComplete");
      c.get<rrc_resume_complete_s>().to_json(j);
      break;
    case types::security_mode_complete:
      j.write_fieldname("securityModeComplete");
      c.get<security_mode_complete_s>().to_json(j);
      break;
    case types::security_mode_fail:
      j.write_fieldname("securityModeFailure");
      c.get<security_mode_fail_s>().to_json(j);
      break;
    case types::ul_info_transfer:
      j.write_fieldname("ulInformationTransfer");
      c.get<ul_info_transfer_s>().to_json(j);
      break;
    case types::location_meas_ind:
      j.write_fieldname("locationMeasurementIndication");
      c.get<location_meas_ind_s>().to_json(j);
      break;
    case types::ue_cap_info:
      j.write_fieldname("ueCapabilityInformation");
      c.get<ue_cap_info_s>().to_json(j);
      break;
    case types::counter_check_resp:
      j.write_fieldname("counterCheckResponse");
      c.get<counter_check_resp_s>().to_json(j);
      break;
    case types::ue_assist_info:
      j.write_fieldname("ueAssistanceInformation");
      c.get<ue_assist_info_s>().to_json(j);
      break;
    case types::fail_info:
      j.write_fieldname("failureInformation");
      c.get<fail_info_s>().to_json(j);
      break;
    case types::ul_info_transfer_mrdc:
      j.write_fieldname("ulInformationTransferMRDC");
      c.get<ul_info_transfer_mrdc_s>().to_json(j);
      break;
    case types::scg_fail_info:
      j.write_fieldname("scgFailureInformation");
      c.get<scg_fail_info_s>().to_json(j);
      break;
    case types::scg_fail_info_eutra:
      j.write_fieldname("scgFailureInformationEUTRA");
      c.get<scg_fail_info_eutra_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE ul_dcch_msg_type_c::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::meas_report:
      HANDLE_CODE(c.get<meas_report_s>().pack(bref));
      break;
    case types::rrc_recfg_complete:
      HANDLE_CODE(c.get<rrc_recfg_complete_s>().pack(bref));
      break;
    case types::rrc_setup_complete:
      HANDLE_CODE(c.get<rrc_setup_complete_s>().pack(bref));
      break;
    case types::rrc_reest_complete:
      HANDLE_CODE(c.get<rrc_reest_complete_s>().pack(bref));
      break;
    case types::rrc_resume_complete:
      HANDLE_CODE(c.get<rrc_resume_complete_s>().pack(bref));
      break;
    case types::security_mode_complete:
      HANDLE_CODE(c.get<security_mode_complete_s>().pack(bref));
      break;
    case types::security_mode_fail:
      HANDLE_CODE(c.get<security_mode_fail_s>().pack(bref));
      break;
    case types::ul_info_transfer:
      HANDLE_CODE(c.get<ul_info_transfer_s>().pack(bref));
      break;
    case types::location_meas_ind:
      HANDLE_CODE(c.get<location_meas_ind_s>().pack(bref));
      break;
    case types::ue_cap_info:
      HANDLE_CODE(c.get<ue_cap_info_s>().pack(bref));
      break;
    case types::counter_check_resp:
      HANDLE_CODE(c.get<counter_check_resp_s>().pack(bref));
      break;
    case types::ue_assist_info:
      HANDLE_CODE(c.get<ue_assist_info_s>().pack(bref));
      break;
    case types::fail_info:
      HANDLE_CODE(c.get<fail_info_s>().pack(bref));
      break;
    case types::ul_info_transfer_mrdc:
      HANDLE_CODE(c.get<ul_info_transfer_mrdc_s>().pack(bref));
      break;
    case types::scg_fail_info:
      HANDLE_CODE(c.get<scg_fail_info_s>().pack(bref));
      break;
    case types::scg_fail_info_eutra:
      HANDLE_CODE(c.get<scg_fail_info_eutra_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_dcch_msg_type_c::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::meas_report:
      HANDLE_CODE(c.get<meas_report_s>().unpack(bref));
      break;
    case types::rrc_recfg_complete:
      HANDLE_CODE(c.get<rrc_recfg_complete_s>().unpack(bref));
      break;
    case types::rrc_setup_complete:
      HANDLE_CODE(c.get<rrc_setup_complete_s>().unpack(bref));
      break;
    case types::rrc_reest_complete:
      HANDLE_CODE(c.get<rrc_reest_complete_s>().unpack(bref));
      break;
    case types::rrc_resume_complete:
      HANDLE_CODE(c.get<rrc_resume_complete_s>().unpack(bref));
      break;
    case types::security_mode_complete:
      HANDLE_CODE(c.get<security_mode_complete_s>().unpack(bref));
      break;
    case types::security_mode_fail:
      HANDLE_CODE(c.get<security_mode_fail_s>().unpack(bref));
      break;
    case types::ul_info_transfer:
      HANDLE_CODE(c.get<ul_info_transfer_s>().unpack(bref));
      break;
    case types::location_meas_ind:
      HANDLE_CODE(c.get<location_meas_ind_s>().unpack(bref));
      break;
    case types::ue_cap_info:
      HANDLE_CODE(c.get<ue_cap_info_s>().unpack(bref));
      break;
    case types::counter_check_resp:
      HANDLE_CODE(c.get<counter_check_resp_s>().unpack(bref));
      break;
    case types::ue_assist_info:
      HANDLE_CODE(c.get<ue_assist_info_s>().unpack(bref));
      break;
    case types::fail_info:
      HANDLE_CODE(c.get<fail_info_s>().unpack(bref));
      break;
    case types::ul_info_transfer_mrdc:
      HANDLE_CODE(c.get<ul_info_transfer_mrdc_s>().unpack(bref));
      break;
    case types::scg_fail_info:
      HANDLE_CODE(c.get<scg_fail_info_s>().unpack(bref));
      break;
    case types::scg_fail_info_eutra:
      HANDLE_CODE(c.get<scg_fail_info_eutra_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ul_dcch_msg_type_c::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"measurementReport",
                                "rrcReconfigurationComplete",
                                "rrcSetupComplete",
                                "rrcReestablishmentComplete",
                                "rrcResumeComplete",
                                "securityModeComplete",
                                "securityModeFailure",
                                "ulInformationTransfer",
                                "locationMeasurementIndication",
                                "ueCapabilityInformation",
                                "counterCheckResponse",
                                "ueAssistanceInformation",
                                "failureInformation",
                                "ulInformationTransferMRDC",
                                "scgFailureInformation",
                                "scgFailureInformationEUTRA"};
  return convert_enum_idx(names, 16, value, "ul_dcch_msg_type_c::c1_c_::types");
}

void ul_dcch_msg_type_c::msg_class_ext_c_::set(types::options e)
{
  type_ = e;
}
ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_& ul_dcch_msg_type_c::msg_class_ext_c_::set_c2()
{
  set(types::c2);
  return c;
}
void ul_dcch_msg_type_c::msg_class_ext_c_::set_msg_class_ext_future_r16()
{
  set(types::msg_class_ext_future_r16);
}
void ul_dcch_msg_type_c::msg_class_ext_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c2:
      j.write_fieldname("c2");
      c.to_json(j);
      break;
    case types::msg_class_ext_future_r16:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::msg_class_ext_c_");
  }
  j.end_obj();
}
SRSASN_CODE ul_dcch_msg_type_c::msg_class_ext_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c2:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::msg_class_ext_future_r16:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::msg_class_ext_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_dcch_msg_type_c::msg_class_ext_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c2:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::msg_class_ext_future_r16:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::msg_class_ext_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::destroy_()
{
  switch (type_) {
    case types::ul_ded_msg_segment_r16:
      c.destroy<ul_ded_msg_segment_r16_s>();
      break;
    case types::ded_sib_request_r16:
      c.destroy<ded_sib_request_r16_s>();
      break;
    case types::mcg_fail_info_r16:
      c.destroy<mcg_fail_info_r16_s>();
      break;
    case types::ue_info_resp_r16:
      c.destroy<ue_info_resp_r16_s>();
      break;
    case types::sidelink_ue_info_nr_r16:
      c.destroy<sidelink_ue_info_nr_r16_s>();
      break;
    case types::ul_info_transfer_irat_r16:
      c.destroy<ul_info_transfer_irat_r16_s>();
      break;
    case types::iab_other_info_r16:
      c.destroy<iab_other_info_r16_s>();
      break;
    case types::mbs_interest_ind_r17:
      c.destroy<mb_si_nterest_ind_r17_s>();
      break;
    case types::ue_positioning_assist_info_r17:
      c.destroy<ue_positioning_assist_info_r17_s>();
      break;
    case types::meas_report_app_layer_r17:
      c.destroy<meas_report_app_layer_r17_s>();
      break;
    default:
      break;
  }
}
void ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ul_ded_msg_segment_r16:
      c.init<ul_ded_msg_segment_r16_s>();
      break;
    case types::ded_sib_request_r16:
      c.init<ded_sib_request_r16_s>();
      break;
    case types::mcg_fail_info_r16:
      c.init<mcg_fail_info_r16_s>();
      break;
    case types::ue_info_resp_r16:
      c.init<ue_info_resp_r16_s>();
      break;
    case types::sidelink_ue_info_nr_r16:
      c.init<sidelink_ue_info_nr_r16_s>();
      break;
    case types::ul_info_transfer_irat_r16:
      c.init<ul_info_transfer_irat_r16_s>();
      break;
    case types::iab_other_info_r16:
      c.init<iab_other_info_r16_s>();
      break;
    case types::mbs_interest_ind_r17:
      c.init<mb_si_nterest_ind_r17_s>();
      break;
    case types::ue_positioning_assist_info_r17:
      c.init<ue_positioning_assist_info_r17_s>();
      break;
    case types::meas_report_app_layer_r17:
      c.init<meas_report_app_layer_r17_s>();
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_");
  }
}
ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::c2_c_(const ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ul_ded_msg_segment_r16:
      c.init(other.c.get<ul_ded_msg_segment_r16_s>());
      break;
    case types::ded_sib_request_r16:
      c.init(other.c.get<ded_sib_request_r16_s>());
      break;
    case types::mcg_fail_info_r16:
      c.init(other.c.get<mcg_fail_info_r16_s>());
      break;
    case types::ue_info_resp_r16:
      c.init(other.c.get<ue_info_resp_r16_s>());
      break;
    case types::sidelink_ue_info_nr_r16:
      c.init(other.c.get<sidelink_ue_info_nr_r16_s>());
      break;
    case types::ul_info_transfer_irat_r16:
      c.init(other.c.get<ul_info_transfer_irat_r16_s>());
      break;
    case types::iab_other_info_r16:
      c.init(other.c.get<iab_other_info_r16_s>());
      break;
    case types::mbs_interest_ind_r17:
      c.init(other.c.get<mb_si_nterest_ind_r17_s>());
      break;
    case types::ue_positioning_assist_info_r17:
      c.init(other.c.get<ue_positioning_assist_info_r17_s>());
      break;
    case types::meas_report_app_layer_r17:
      c.init(other.c.get<meas_report_app_layer_r17_s>());
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_");
  }
}
ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_&
ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::operator=(const ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ul_ded_msg_segment_r16:
      c.set(other.c.get<ul_ded_msg_segment_r16_s>());
      break;
    case types::ded_sib_request_r16:
      c.set(other.c.get<ded_sib_request_r16_s>());
      break;
    case types::mcg_fail_info_r16:
      c.set(other.c.get<mcg_fail_info_r16_s>());
      break;
    case types::ue_info_resp_r16:
      c.set(other.c.get<ue_info_resp_r16_s>());
      break;
    case types::sidelink_ue_info_nr_r16:
      c.set(other.c.get<sidelink_ue_info_nr_r16_s>());
      break;
    case types::ul_info_transfer_irat_r16:
      c.set(other.c.get<ul_info_transfer_irat_r16_s>());
      break;
    case types::iab_other_info_r16:
      c.set(other.c.get<iab_other_info_r16_s>());
      break;
    case types::mbs_interest_ind_r17:
      c.set(other.c.get<mb_si_nterest_ind_r17_s>());
      break;
    case types::ue_positioning_assist_info_r17:
      c.set(other.c.get<ue_positioning_assist_info_r17_s>());
      break;
    case types::meas_report_app_layer_r17:
      c.set(other.c.get<meas_report_app_layer_r17_s>());
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_");
  }

  return *this;
}
ul_ded_msg_segment_r16_s& ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_ul_ded_msg_segment_r16()
{
  set(types::ul_ded_msg_segment_r16);
  return c.get<ul_ded_msg_segment_r16_s>();
}
ded_sib_request_r16_s& ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_ded_sib_request_r16()
{
  set(types::ded_sib_request_r16);
  return c.get<ded_sib_request_r16_s>();
}
mcg_fail_info_r16_s& ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_mcg_fail_info_r16()
{
  set(types::mcg_fail_info_r16);
  return c.get<mcg_fail_info_r16_s>();
}
ue_info_resp_r16_s& ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_ue_info_resp_r16()
{
  set(types::ue_info_resp_r16);
  return c.get<ue_info_resp_r16_s>();
}
sidelink_ue_info_nr_r16_s& ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_sidelink_ue_info_nr_r16()
{
  set(types::sidelink_ue_info_nr_r16);
  return c.get<sidelink_ue_info_nr_r16_s>();
}
ul_info_transfer_irat_r16_s& ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_ul_info_transfer_irat_r16()
{
  set(types::ul_info_transfer_irat_r16);
  return c.get<ul_info_transfer_irat_r16_s>();
}
iab_other_info_r16_s& ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_iab_other_info_r16()
{
  set(types::iab_other_info_r16);
  return c.get<iab_other_info_r16_s>();
}
mb_si_nterest_ind_r17_s& ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_mbs_interest_ind_r17()
{
  set(types::mbs_interest_ind_r17);
  return c.get<mb_si_nterest_ind_r17_s>();
}
ue_positioning_assist_info_r17_s& ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_ue_positioning_assist_info_r17()
{
  set(types::ue_positioning_assist_info_r17);
  return c.get<ue_positioning_assist_info_r17_s>();
}
meas_report_app_layer_r17_s& ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_meas_report_app_layer_r17()
{
  set(types::meas_report_app_layer_r17);
  return c.get<meas_report_app_layer_r17_s>();
}
void ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_spare6()
{
  set(types::spare6);
}
void ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_spare5()
{
  set(types::spare5);
}
void ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_spare4()
{
  set(types::spare4);
}
void ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_spare3()
{
  set(types::spare3);
}
void ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_spare2()
{
  set(types::spare2);
}
void ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::set_spare1()
{
  set(types::spare1);
}
void ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ul_ded_msg_segment_r16:
      j.write_fieldname("ulDedicatedMessageSegment-r16");
      c.get<ul_ded_msg_segment_r16_s>().to_json(j);
      break;
    case types::ded_sib_request_r16:
      j.write_fieldname("dedicatedSIBRequest-r16");
      c.get<ded_sib_request_r16_s>().to_json(j);
      break;
    case types::mcg_fail_info_r16:
      j.write_fieldname("mcgFailureInformation-r16");
      c.get<mcg_fail_info_r16_s>().to_json(j);
      break;
    case types::ue_info_resp_r16:
      j.write_fieldname("ueInformationResponse-r16");
      c.get<ue_info_resp_r16_s>().to_json(j);
      break;
    case types::sidelink_ue_info_nr_r16:
      j.write_fieldname("sidelinkUEInformationNR-r16");
      c.get<sidelink_ue_info_nr_r16_s>().to_json(j);
      break;
    case types::ul_info_transfer_irat_r16:
      j.write_fieldname("ulInformationTransferIRAT-r16");
      c.get<ul_info_transfer_irat_r16_s>().to_json(j);
      break;
    case types::iab_other_info_r16:
      j.write_fieldname("iabOtherInformation-r16");
      c.get<iab_other_info_r16_s>().to_json(j);
      break;
    case types::mbs_interest_ind_r17:
      j.write_fieldname("mbsInterestIndication-r17");
      c.get<mb_si_nterest_ind_r17_s>().to_json(j);
      break;
    case types::ue_positioning_assist_info_r17:
      j.write_fieldname("uePositioningAssistanceInfo-r17");
      c.get<ue_positioning_assist_info_r17_s>().to_json(j);
      break;
    case types::meas_report_app_layer_r17:
      j.write_fieldname("measurementReportAppLayer-r17");
      c.get<meas_report_app_layer_r17_s>().to_json(j);
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_");
  }
  j.end_obj();
}
SRSASN_CODE ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ul_ded_msg_segment_r16:
      HANDLE_CODE(c.get<ul_ded_msg_segment_r16_s>().pack(bref));
      break;
    case types::ded_sib_request_r16:
      HANDLE_CODE(c.get<ded_sib_request_r16_s>().pack(bref));
      break;
    case types::mcg_fail_info_r16:
      HANDLE_CODE(c.get<mcg_fail_info_r16_s>().pack(bref));
      break;
    case types::ue_info_resp_r16:
      HANDLE_CODE(c.get<ue_info_resp_r16_s>().pack(bref));
      break;
    case types::sidelink_ue_info_nr_r16:
      HANDLE_CODE(c.get<sidelink_ue_info_nr_r16_s>().pack(bref));
      break;
    case types::ul_info_transfer_irat_r16:
      HANDLE_CODE(c.get<ul_info_transfer_irat_r16_s>().pack(bref));
      break;
    case types::iab_other_info_r16:
      HANDLE_CODE(c.get<iab_other_info_r16_s>().pack(bref));
      break;
    case types::mbs_interest_ind_r17:
      HANDLE_CODE(c.get<mb_si_nterest_ind_r17_s>().pack(bref));
      break;
    case types::ue_positioning_assist_info_r17:
      HANDLE_CODE(c.get<ue_positioning_assist_info_r17_s>().pack(bref));
      break;
    case types::meas_report_app_layer_r17:
      HANDLE_CODE(c.get<meas_report_app_layer_r17_s>().pack(bref));
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ul_ded_msg_segment_r16:
      HANDLE_CODE(c.get<ul_ded_msg_segment_r16_s>().unpack(bref));
      break;
    case types::ded_sib_request_r16:
      HANDLE_CODE(c.get<ded_sib_request_r16_s>().unpack(bref));
      break;
    case types::mcg_fail_info_r16:
      HANDLE_CODE(c.get<mcg_fail_info_r16_s>().unpack(bref));
      break;
    case types::ue_info_resp_r16:
      HANDLE_CODE(c.get<ue_info_resp_r16_s>().unpack(bref));
      break;
    case types::sidelink_ue_info_nr_r16:
      HANDLE_CODE(c.get<sidelink_ue_info_nr_r16_s>().unpack(bref));
      break;
    case types::ul_info_transfer_irat_r16:
      HANDLE_CODE(c.get<ul_info_transfer_irat_r16_s>().unpack(bref));
      break;
    case types::iab_other_info_r16:
      HANDLE_CODE(c.get<iab_other_info_r16_s>().unpack(bref));
      break;
    case types::mbs_interest_ind_r17:
      HANDLE_CODE(c.get<mb_si_nterest_ind_r17_s>().unpack(bref));
      break;
    case types::ue_positioning_assist_info_r17:
      HANDLE_CODE(c.get<ue_positioning_assist_info_r17_s>().unpack(bref));
      break;
    case types::meas_report_app_layer_r17:
      HANDLE_CODE(c.get<meas_report_app_layer_r17_s>().unpack(bref));
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::types_opts::to_string() const
{
  static const char* names[] = {"ulDedicatedMessageSegment-r16",
                                "dedicatedSIBRequest-r16",
                                "mcgFailureInformation-r16",
                                "ueInformationResponse-r16",
                                "sidelinkUEInformationNR-r16",
                                "ulInformationTransferIRAT-r16",
                                "iabOtherInformation-r16",
                                "mbsInterestIndication-r17",
                                "uePositioningAssistanceInfo-r17",
                                "measurementReportAppLayer-r17",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "ul_dcch_msg_type_c::msg_class_ext_c_::c2_c_::types");
}

const char* ul_dcch_msg_type_c::msg_class_ext_c_::types_opts::to_string() const
{
  static const char* names[] = {"c2", "messageClassExtensionFuture-r16"};
  return convert_enum_idx(names, 2, value, "ul_dcch_msg_type_c::msg_class_ext_c_::types");
}
uint8_t ul_dcch_msg_type_c::msg_class_ext_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {2};
  return map_enum_number(numbers, 1, value, "ul_dcch_msg_type_c::msg_class_ext_c_::types");
}

const char* ul_dcch_msg_type_c::types_opts::to_string() const
{
  static const char* names[] = {"c1", "messageClassExtension"};
  return convert_enum_idx(names, 2, value, "ul_dcch_msg_type_c::types");
}
uint8_t ul_dcch_msg_type_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "ul_dcch_msg_type_c::types");
}

// UL-DCCH-Message ::= SEQUENCE
SRSASN_CODE ul_dcch_msg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(msg.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_dcch_msg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(msg.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void ul_dcch_msg_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("UL-DCCH-Message");
  j.write_fieldname("message");
  msg.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

// BH-LogicalChannelIdentity-r16 ::= CHOICE
void bh_lc_ch_id_r16_c::destroy_() {}
void bh_lc_ch_id_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
bh_lc_ch_id_r16_c::bh_lc_ch_id_r16_c(const bh_lc_ch_id_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::bh_lc_ch_id_r16:
      c.init(other.c.get<uint8_t>());
      break;
    case types::bh_lc_ch_id_ext_r16:
      c.init(other.c.get<uint32_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bh_lc_ch_id_r16_c");
  }
}
bh_lc_ch_id_r16_c& bh_lc_ch_id_r16_c::operator=(const bh_lc_ch_id_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::bh_lc_ch_id_r16:
      c.set(other.c.get<uint8_t>());
      break;
    case types::bh_lc_ch_id_ext_r16:
      c.set(other.c.get<uint32_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bh_lc_ch_id_r16_c");
  }

  return *this;
}
uint8_t& bh_lc_ch_id_r16_c::set_bh_lc_ch_id_r16()
{
  set(types::bh_lc_ch_id_r16);
  return c.get<uint8_t>();
}
uint32_t& bh_lc_ch_id_r16_c::set_bh_lc_ch_id_ext_r16()
{
  set(types::bh_lc_ch_id_ext_r16);
  return c.get<uint32_t>();
}
void bh_lc_ch_id_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::bh_lc_ch_id_r16:
      j.write_int("bh-LogicalChannelIdentity-r16", c.get<uint8_t>());
      break;
    case types::bh_lc_ch_id_ext_r16:
      j.write_int("bh-LogicalChannelIdentityExt-r16", c.get<uint32_t>());
      break;
    default:
      log_invalid_choice_id(type_, "bh_lc_ch_id_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE bh_lc_ch_id_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::bh_lc_ch_id_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)32u));
      break;
    case types::bh_lc_ch_id_ext_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)320u, (uint32_t)65855u));
      break;
    default:
      log_invalid_choice_id(type_, "bh_lc_ch_id_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_lc_ch_id_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::bh_lc_ch_id_r16:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)32u));
      break;
    case types::bh_lc_ch_id_ext_r16:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)320u, (uint32_t)65855u));
      break;
    default:
      log_invalid_choice_id(type_, "bh_lc_ch_id_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* bh_lc_ch_id_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"bh-LogicalChannelIdentity-r16", "bh-LogicalChannelIdentityExt-r16"};
  return convert_enum_idx(names, 2, value, "bh_lc_ch_id_r16_c::types");
}

// T-StatusProhibit ::= ENUMERATED
const char* t_status_prohibit_opts::to_string() const
{
  static const char* names[] = {
      "ms0",   "ms5",   "ms10",   "ms15",   "ms20",   "ms25",   "ms30",   "ms35",   "ms40",  "ms45",  "ms50",
      "ms55",  "ms60",  "ms65",   "ms70",   "ms75",   "ms80",   "ms85",   "ms90",   "ms95",  "ms100", "ms105",
      "ms110", "ms115", "ms120",  "ms125",  "ms130",  "ms135",  "ms140",  "ms145",  "ms150", "ms155", "ms160",
      "ms165", "ms170", "ms175",  "ms180",  "ms185",  "ms190",  "ms195",  "ms200",  "ms205", "ms210", "ms215",
      "ms220", "ms225", "ms230",  "ms235",  "ms240",  "ms245",  "ms250",  "ms300",  "ms350", "ms400", "ms450",
      "ms500", "ms800", "ms1000", "ms1200", "ms1600", "ms2000", "ms2400", "spare2", "spare1"};
  return convert_enum_idx(names, 64, value, "t_status_prohibit_e");
}
uint16_t t_status_prohibit_opts::to_number() const
{
  static const uint16_t numbers[] = {0,   5,   10,  15,  20,  25,  30,  35,  40,  45,   50,   55,   60,   65,  70,  75,
                                     80,  85,  90,  95,  100, 105, 110, 115, 120, 125,  130,  135,  140,  145, 150, 155,
                                     160, 165, 170, 175, 180, 185, 190, 195, 200, 205,  210,  215,  220,  225, 230, 235,
                                     240, 245, 250, 300, 350, 400, 450, 500, 800, 1000, 1200, 1600, 2000, 2400};
  return map_enum_number(numbers, 62, value, "t_status_prohibit_e");
}

// DL-AM-RLC ::= SEQUENCE
SRSASN_CODE dl_am_rlc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sn_field_len_present, 1));

  if (sn_field_len_present) {
    HANDLE_CODE(sn_field_len.pack(bref));
  }
  HANDLE_CODE(t_reassembly.pack(bref));
  HANDLE_CODE(t_status_prohibit.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_am_rlc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sn_field_len_present, 1));

  if (sn_field_len_present) {
    HANDLE_CODE(sn_field_len.unpack(bref));
  }
  HANDLE_CODE(t_reassembly.unpack(bref));
  HANDLE_CODE(t_status_prohibit.unpack(bref));

  return SRSASN_SUCCESS;
}
void dl_am_rlc_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sn_field_len_present) {
    j.write_str("sn-FieldLength", sn_field_len.to_string());
  }
  j.write_str("t-Reassembly", t_reassembly.to_string());
  j.write_str("t-StatusProhibit", t_status_prohibit.to_string());
  j.end_obj();
}

// DL-UM-RLC ::= SEQUENCE
SRSASN_CODE dl_um_rlc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sn_field_len_present, 1));

  if (sn_field_len_present) {
    HANDLE_CODE(sn_field_len.pack(bref));
  }
  HANDLE_CODE(t_reassembly.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_um_rlc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sn_field_len_present, 1));

  if (sn_field_len_present) {
    HANDLE_CODE(sn_field_len.unpack(bref));
  }
  HANDLE_CODE(t_reassembly.unpack(bref));

  return SRSASN_SUCCESS;
}
void dl_um_rlc_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sn_field_len_present) {
    j.write_str("sn-FieldLength", sn_field_len.to_string());
  }
  j.write_str("t-Reassembly", t_reassembly.to_string());
  j.end_obj();
}

// UL-AM-RLC ::= SEQUENCE
SRSASN_CODE ul_am_rlc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sn_field_len_present, 1));

  if (sn_field_len_present) {
    HANDLE_CODE(sn_field_len.pack(bref));
  }
  HANDLE_CODE(t_poll_retx.pack(bref));
  HANDLE_CODE(poll_pdu.pack(bref));
  HANDLE_CODE(poll_byte.pack(bref));
  HANDLE_CODE(max_retx_thres.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_am_rlc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sn_field_len_present, 1));

  if (sn_field_len_present) {
    HANDLE_CODE(sn_field_len.unpack(bref));
  }
  HANDLE_CODE(t_poll_retx.unpack(bref));
  HANDLE_CODE(poll_pdu.unpack(bref));
  HANDLE_CODE(poll_byte.unpack(bref));
  HANDLE_CODE(max_retx_thres.unpack(bref));

  return SRSASN_SUCCESS;
}
void ul_am_rlc_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sn_field_len_present) {
    j.write_str("sn-FieldLength", sn_field_len.to_string());
  }
  j.write_str("t-PollRetransmit", t_poll_retx.to_string());
  j.write_str("pollPDU", poll_pdu.to_string());
  j.write_str("pollByte", poll_byte.to_string());
  j.write_str("maxRetxThreshold", max_retx_thres.to_string());
  j.end_obj();
}

const char* ul_am_rlc_s::max_retx_thres_opts::to_string() const
{
  static const char* names[] = {"t1", "t2", "t3", "t4", "t6", "t8", "t16", "t32"};
  return convert_enum_idx(names, 8, value, "ul_am_rlc_s::max_retx_thres_e_");
}
uint8_t ul_am_rlc_s::max_retx_thres_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 6, 8, 16, 32};
  return map_enum_number(numbers, 8, value, "ul_am_rlc_s::max_retx_thres_e_");
}

// UL-UM-RLC ::= SEQUENCE
SRSASN_CODE ul_um_rlc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sn_field_len_present, 1));

  if (sn_field_len_present) {
    HANDLE_CODE(sn_field_len.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_um_rlc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sn_field_len_present, 1));

  if (sn_field_len_present) {
    HANDLE_CODE(sn_field_len.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ul_um_rlc_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sn_field_len_present) {
    j.write_str("sn-FieldLength", sn_field_len.to_string());
  }
  j.end_obj();
}

// LogicalChannelConfig ::= SEQUENCE
SRSASN_CODE lc_ch_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ul_specific_params_present, 1));

  if (ul_specific_params_present) {
    HANDLE_CODE(ul_specific_params.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ch_access_prio_r16_present;
    group_flags[0] |= bit_rate_multiplier_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ch_access_prio_r16_present, 1));
      HANDLE_CODE(bref.pack(bit_rate_multiplier_r16_present, 1));
      if (ch_access_prio_r16_present) {
        HANDLE_CODE(pack_integer(bref, ch_access_prio_r16, (uint8_t)1u, (uint8_t)4u));
      }
      if (bit_rate_multiplier_r16_present) {
        HANDLE_CODE(bit_rate_multiplier_r16.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE lc_ch_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ul_specific_params_present, 1));

  if (ul_specific_params_present) {
    HANDLE_CODE(ul_specific_params.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ch_access_prio_r16_present, 1));
      HANDLE_CODE(bref.unpack(bit_rate_multiplier_r16_present, 1));
      if (ch_access_prio_r16_present) {
        HANDLE_CODE(unpack_integer(ch_access_prio_r16, bref, (uint8_t)1u, (uint8_t)4u));
      }
      if (bit_rate_multiplier_r16_present) {
        HANDLE_CODE(bit_rate_multiplier_r16.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void lc_ch_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_specific_params_present) {
    j.write_fieldname("ul-SpecificParameters");
    ul_specific_params.to_json(j);
  }
  if (ext) {
    if (ch_access_prio_r16_present) {
      j.write_int("channelAccessPriority-r16", ch_access_prio_r16);
    }
    if (bit_rate_multiplier_r16_present) {
      j.write_str("bitRateMultiplier-r16", bit_rate_multiplier_r16.to_string());
    }
  }
  j.end_obj();
}

SRSASN_CODE lc_ch_cfg_s::ul_specific_params_s_::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(allowed_serving_cells.size() > 0, 1));
  HANDLE_CODE(bref.pack(allowed_scs_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(max_pusch_dur_present, 1));
  HANDLE_CODE(bref.pack(cfg_grant_type1_allowed_present, 1));
  HANDLE_CODE(bref.pack(lc_ch_group_present, 1));
  HANDLE_CODE(bref.pack(sched_request_id_present, 1));

  HANDLE_CODE(pack_integer(bref, prio, (uint8_t)1u, (uint8_t)16u));
  HANDLE_CODE(prioritised_bit_rate.pack(bref));
  HANDLE_CODE(bucket_size_dur.pack(bref));
  if (allowed_serving_cells.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, allowed_serving_cells, 1, 31, integer_packer<uint8_t>(0, 31)));
  }
  if (allowed_scs_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, allowed_scs_list, 1, 5));
  }
  if (max_pusch_dur_present) {
    HANDLE_CODE(max_pusch_dur.pack(bref));
  }
  if (lc_ch_group_present) {
    HANDLE_CODE(pack_integer(bref, lc_ch_group, (uint8_t)0u, (uint8_t)7u));
  }
  if (sched_request_id_present) {
    HANDLE_CODE(pack_integer(bref, sched_request_id, (uint8_t)0u, (uint8_t)7u));
  }
  HANDLE_CODE(bref.pack(lc_ch_sr_mask, 1));
  HANDLE_CODE(bref.pack(lc_ch_sr_delay_timer_applied, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= bit_rate_query_prohibit_timer_present;
    group_flags[1] |= allowed_cg_list_r16.is_present();
    group_flags[1] |= allowed_phy_prio_idx_r16_present;
    group_flags[2] |= lc_ch_group_iab_ext_r17_present;
    group_flags[2] |= allowed_harq_mode_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(bit_rate_query_prohibit_timer_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(allowed_cg_list_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(allowed_phy_prio_idx_r16_present, 1));
      if (allowed_cg_list_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *allowed_cg_list_r16, 0, 31, integer_packer<uint8_t>(0, 31)));
      }
      if (allowed_phy_prio_idx_r16_present) {
        HANDLE_CODE(allowed_phy_prio_idx_r16.pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(lc_ch_group_iab_ext_r17_present, 1));
      HANDLE_CODE(bref.pack(allowed_harq_mode_r17_present, 1));
      if (lc_ch_group_iab_ext_r17_present) {
        HANDLE_CODE(pack_integer(bref, lc_ch_group_iab_ext_r17, (uint16_t)0u, (uint16_t)255u));
      }
      if (allowed_harq_mode_r17_present) {
        HANDLE_CODE(allowed_harq_mode_r17.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE lc_ch_cfg_s::ul_specific_params_s_::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool allowed_serving_cells_present;
  HANDLE_CODE(bref.unpack(allowed_serving_cells_present, 1));
  bool allowed_scs_list_present;
  HANDLE_CODE(bref.unpack(allowed_scs_list_present, 1));
  HANDLE_CODE(bref.unpack(max_pusch_dur_present, 1));
  HANDLE_CODE(bref.unpack(cfg_grant_type1_allowed_present, 1));
  HANDLE_CODE(bref.unpack(lc_ch_group_present, 1));
  HANDLE_CODE(bref.unpack(sched_request_id_present, 1));

  HANDLE_CODE(unpack_integer(prio, bref, (uint8_t)1u, (uint8_t)16u));
  HANDLE_CODE(prioritised_bit_rate.unpack(bref));
  HANDLE_CODE(bucket_size_dur.unpack(bref));
  if (allowed_serving_cells_present) {
    HANDLE_CODE(unpack_dyn_seq_of(allowed_serving_cells, bref, 1, 31, integer_packer<uint8_t>(0, 31)));
  }
  if (allowed_scs_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(allowed_scs_list, bref, 1, 5));
  }
  if (max_pusch_dur_present) {
    HANDLE_CODE(max_pusch_dur.unpack(bref));
  }
  if (lc_ch_group_present) {
    HANDLE_CODE(unpack_integer(lc_ch_group, bref, (uint8_t)0u, (uint8_t)7u));
  }
  if (sched_request_id_present) {
    HANDLE_CODE(unpack_integer(sched_request_id, bref, (uint8_t)0u, (uint8_t)7u));
  }
  HANDLE_CODE(bref.unpack(lc_ch_sr_mask, 1));
  HANDLE_CODE(bref.unpack(lc_ch_sr_delay_timer_applied, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(3);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(bit_rate_query_prohibit_timer_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(allowed_cg_list_r16, bref);
      HANDLE_CODE(bref.unpack(allowed_phy_prio_idx_r16_present, 1));
      if (allowed_cg_list_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*allowed_cg_list_r16, bref, 0, 31, integer_packer<uint8_t>(0, 31)));
      }
      if (allowed_phy_prio_idx_r16_present) {
        HANDLE_CODE(allowed_phy_prio_idx_r16.unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(lc_ch_group_iab_ext_r17_present, 1));
      HANDLE_CODE(bref.unpack(allowed_harq_mode_r17_present, 1));
      if (lc_ch_group_iab_ext_r17_present) {
        HANDLE_CODE(unpack_integer(lc_ch_group_iab_ext_r17, bref, (uint16_t)0u, (uint16_t)255u));
      }
      if (allowed_harq_mode_r17_present) {
        HANDLE_CODE(allowed_harq_mode_r17.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void lc_ch_cfg_s::ul_specific_params_s_::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("priority", prio);
  j.write_str("prioritisedBitRate", prioritised_bit_rate.to_string());
  j.write_str("bucketSizeDuration", bucket_size_dur.to_string());
  if (allowed_serving_cells.size() > 0) {
    j.start_array("allowedServingCells");
    for (const auto& e1 : allowed_serving_cells) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (allowed_scs_list.size() > 0) {
    j.start_array("allowedSCS-List");
    for (const auto& e1 : allowed_scs_list) {
      j.write_str(e1.to_string());
    }
    j.end_array();
  }
  if (max_pusch_dur_present) {
    j.write_str("maxPUSCH-Duration", max_pusch_dur.to_string());
  }
  if (cfg_grant_type1_allowed_present) {
    j.write_str("configuredGrantType1Allowed", "true");
  }
  if (lc_ch_group_present) {
    j.write_int("logicalChannelGroup", lc_ch_group);
  }
  if (sched_request_id_present) {
    j.write_int("schedulingRequestID", sched_request_id);
  }
  j.write_bool("logicalChannelSR-Mask", lc_ch_sr_mask);
  j.write_bool("logicalChannelSR-DelayTimerApplied", lc_ch_sr_delay_timer_applied);
  if (ext) {
    if (bit_rate_query_prohibit_timer_present) {
      j.write_str("bitRateQueryProhibitTimer", bit_rate_query_prohibit_timer.to_string());
    }
    if (allowed_cg_list_r16.is_present()) {
      j.start_array("allowedCG-List-r16");
      for (const auto& e1 : *allowed_cg_list_r16) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (allowed_phy_prio_idx_r16_present) {
      j.write_str("allowedPHY-PriorityIndex-r16", allowed_phy_prio_idx_r16.to_string());
    }
    if (lc_ch_group_iab_ext_r17_present) {
      j.write_int("logicalChannelGroupIAB-Ext-r17", lc_ch_group_iab_ext_r17);
    }
    if (allowed_harq_mode_r17_present) {
      j.write_str("allowedHARQ-mode-r17", allowed_harq_mode_r17.to_string());
    }
  }
  j.end_obj();
}

const char* lc_ch_cfg_s::ul_specific_params_s_::prioritised_bit_rate_opts::to_string() const
{
  static const char* names[] = {"kBps0",
                                "kBps8",
                                "kBps16",
                                "kBps32",
                                "kBps64",
                                "kBps128",
                                "kBps256",
                                "kBps512",
                                "kBps1024",
                                "kBps2048",
                                "kBps4096",
                                "kBps8192",
                                "kBps16384",
                                "kBps32768",
                                "kBps65536",
                                "infinity"};
  return convert_enum_idx(names, 16, value, "lc_ch_cfg_s::ul_specific_params_s_::prioritised_bit_rate_e_");
}
int32_t lc_ch_cfg_s::ul_specific_params_s_::prioritised_bit_rate_opts::to_number() const
{
  static const int32_t numbers[] = {0, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, -1};
  return map_enum_number(numbers, 16, value, "lc_ch_cfg_s::ul_specific_params_s_::prioritised_bit_rate_e_");
}

const char* lc_ch_cfg_s::ul_specific_params_s_::bucket_size_dur_opts::to_string() const
{
  static const char* names[] = {"ms5",
                                "ms10",
                                "ms20",
                                "ms50",
                                "ms100",
                                "ms150",
                                "ms300",
                                "ms500",
                                "ms1000",
                                "spare7",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "lc_ch_cfg_s::ul_specific_params_s_::bucket_size_dur_e_");
}
uint16_t lc_ch_cfg_s::ul_specific_params_s_::bucket_size_dur_opts::to_number() const
{
  static const uint16_t numbers[] = {5, 10, 20, 50, 100, 150, 300, 500, 1000};
  return map_enum_number(numbers, 9, value, "lc_ch_cfg_s::ul_specific_params_s_::bucket_size_dur_e_");
}

const char* lc_ch_cfg_s::ul_specific_params_s_::max_pusch_dur_opts::to_string() const
{
  static const char* names[] = {"ms0p02", "ms0p04", "ms0p0625", "ms0p125", "ms0p25", "ms0p5", "ms0p01-v1700", "spare1"};
  return convert_enum_idx(names, 8, value, "lc_ch_cfg_s::ul_specific_params_s_::max_pusch_dur_e_");
}

const char* lc_ch_cfg_s::ul_specific_params_s_::bit_rate_query_prohibit_timer_opts::to_string() const
{
  static const char* names[] = {"s0", "s0dot4", "s0dot8", "s1dot6", "s3", "s6", "s12", "s30"};
  return convert_enum_idx(names, 8, value, "lc_ch_cfg_s::ul_specific_params_s_::bit_rate_query_prohibit_timer_e_");
}
float lc_ch_cfg_s::ul_specific_params_s_::bit_rate_query_prohibit_timer_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.4, 0.8, 1.6, 3.0, 6.0, 12.0, 30.0};
  return map_enum_number(numbers, 8, value, "lc_ch_cfg_s::ul_specific_params_s_::bit_rate_query_prohibit_timer_e_");
}
const char* lc_ch_cfg_s::ul_specific_params_s_::bit_rate_query_prohibit_timer_opts::to_number_string() const
{
  static const char* number_strs[] = {"0", "0.4", "0.8", "1.6", "3", "6", "12", "30"};
  return convert_enum_idx(
      number_strs, 8, value, "lc_ch_cfg_s::ul_specific_params_s_::bit_rate_query_prohibit_timer_e_");
}

const char* lc_ch_cfg_s::ul_specific_params_s_::allowed_phy_prio_idx_r16_opts::to_string() const
{
  static const char* names[] = {"p0", "p1"};
  return convert_enum_idx(names, 2, value, "lc_ch_cfg_s::ul_specific_params_s_::allowed_phy_prio_idx_r16_e_");
}
uint8_t lc_ch_cfg_s::ul_specific_params_s_::allowed_phy_prio_idx_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1};
  return map_enum_number(numbers, 2, value, "lc_ch_cfg_s::ul_specific_params_s_::allowed_phy_prio_idx_r16_e_");
}

const char* lc_ch_cfg_s::ul_specific_params_s_::allowed_harq_mode_r17_opts::to_string() const
{
  static const char* names[] = {"harqModeA", "harqModeB"};
  return convert_enum_idx(names, 2, value, "lc_ch_cfg_s::ul_specific_params_s_::allowed_harq_mode_r17_e_");
}

const char* lc_ch_cfg_s::bit_rate_multiplier_r16_opts::to_string() const
{
  static const char* names[] = {"x40", "x70", "x100", "x200"};
  return convert_enum_idx(names, 4, value, "lc_ch_cfg_s::bit_rate_multiplier_r16_e_");
}
uint8_t lc_ch_cfg_s::bit_rate_multiplier_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {40, 70, 100, 200};
  return map_enum_number(numbers, 4, value, "lc_ch_cfg_s::bit_rate_multiplier_r16_e_");
}

// RLC-Config ::= CHOICE
void rlc_cfg_c::destroy_()
{
  switch (type_) {
    case types::am:
      c.destroy<am_s_>();
      break;
    case types::um_bi_dir:
      c.destroy<um_bi_dir_s_>();
      break;
    case types::um_uni_dir_ul:
      c.destroy<um_uni_dir_ul_s_>();
      break;
    case types::um_uni_dir_dl:
      c.destroy<um_uni_dir_dl_s_>();
      break;
    default:
      break;
  }
}
void rlc_cfg_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::am:
      c.init<am_s_>();
      break;
    case types::um_bi_dir:
      c.init<um_bi_dir_s_>();
      break;
    case types::um_uni_dir_ul:
      c.init<um_uni_dir_ul_s_>();
      break;
    case types::um_uni_dir_dl:
      c.init<um_uni_dir_dl_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlc_cfg_c");
  }
}
rlc_cfg_c::rlc_cfg_c(const rlc_cfg_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::am:
      c.init(other.c.get<am_s_>());
      break;
    case types::um_bi_dir:
      c.init(other.c.get<um_bi_dir_s_>());
      break;
    case types::um_uni_dir_ul:
      c.init(other.c.get<um_uni_dir_ul_s_>());
      break;
    case types::um_uni_dir_dl:
      c.init(other.c.get<um_uni_dir_dl_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlc_cfg_c");
  }
}
rlc_cfg_c& rlc_cfg_c::operator=(const rlc_cfg_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::am:
      c.set(other.c.get<am_s_>());
      break;
    case types::um_bi_dir:
      c.set(other.c.get<um_bi_dir_s_>());
      break;
    case types::um_uni_dir_ul:
      c.set(other.c.get<um_uni_dir_ul_s_>());
      break;
    case types::um_uni_dir_dl:
      c.set(other.c.get<um_uni_dir_dl_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlc_cfg_c");
  }

  return *this;
}
rlc_cfg_c::am_s_& rlc_cfg_c::set_am()
{
  set(types::am);
  return c.get<am_s_>();
}
rlc_cfg_c::um_bi_dir_s_& rlc_cfg_c::set_um_bi_dir()
{
  set(types::um_bi_dir);
  return c.get<um_bi_dir_s_>();
}
rlc_cfg_c::um_uni_dir_ul_s_& rlc_cfg_c::set_um_uni_dir_ul()
{
  set(types::um_uni_dir_ul);
  return c.get<um_uni_dir_ul_s_>();
}
rlc_cfg_c::um_uni_dir_dl_s_& rlc_cfg_c::set_um_uni_dir_dl()
{
  set(types::um_uni_dir_dl);
  return c.get<um_uni_dir_dl_s_>();
}
void rlc_cfg_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::am:
      j.write_fieldname("am");
      j.start_obj();
      j.write_fieldname("ul-AM-RLC");
      c.get<am_s_>().ul_am_rlc.to_json(j);
      j.write_fieldname("dl-AM-RLC");
      c.get<am_s_>().dl_am_rlc.to_json(j);
      j.end_obj();
      break;
    case types::um_bi_dir:
      j.write_fieldname("um-Bi-Directional");
      j.start_obj();
      j.write_fieldname("ul-UM-RLC");
      c.get<um_bi_dir_s_>().ul_um_rlc.to_json(j);
      j.write_fieldname("dl-UM-RLC");
      c.get<um_bi_dir_s_>().dl_um_rlc.to_json(j);
      j.end_obj();
      break;
    case types::um_uni_dir_ul:
      j.write_fieldname("um-Uni-Directional-UL");
      j.start_obj();
      j.write_fieldname("ul-UM-RLC");
      c.get<um_uni_dir_ul_s_>().ul_um_rlc.to_json(j);
      j.end_obj();
      break;
    case types::um_uni_dir_dl:
      j.write_fieldname("um-Uni-Directional-DL");
      j.start_obj();
      j.write_fieldname("dl-UM-RLC");
      c.get<um_uni_dir_dl_s_>().dl_um_rlc.to_json(j);
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "rlc_cfg_c");
  }
  j.end_obj();
}
SRSASN_CODE rlc_cfg_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::am:
      HANDLE_CODE(c.get<am_s_>().ul_am_rlc.pack(bref));
      HANDLE_CODE(c.get<am_s_>().dl_am_rlc.pack(bref));
      break;
    case types::um_bi_dir:
      HANDLE_CODE(c.get<um_bi_dir_s_>().ul_um_rlc.pack(bref));
      HANDLE_CODE(c.get<um_bi_dir_s_>().dl_um_rlc.pack(bref));
      break;
    case types::um_uni_dir_ul:
      HANDLE_CODE(c.get<um_uni_dir_ul_s_>().ul_um_rlc.pack(bref));
      break;
    case types::um_uni_dir_dl:
      HANDLE_CODE(c.get<um_uni_dir_dl_s_>().dl_um_rlc.pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rlc_cfg_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rlc_cfg_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::am:
      HANDLE_CODE(c.get<am_s_>().ul_am_rlc.unpack(bref));
      HANDLE_CODE(c.get<am_s_>().dl_am_rlc.unpack(bref));
      break;
    case types::um_bi_dir:
      HANDLE_CODE(c.get<um_bi_dir_s_>().ul_um_rlc.unpack(bref));
      HANDLE_CODE(c.get<um_bi_dir_s_>().dl_um_rlc.unpack(bref));
      break;
    case types::um_uni_dir_ul:
      HANDLE_CODE(c.get<um_uni_dir_ul_s_>().ul_um_rlc.unpack(bref));
      break;
    case types::um_uni_dir_dl:
      HANDLE_CODE(c.get<um_uni_dir_dl_s_>().dl_um_rlc.unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rlc_cfg_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rlc_cfg_c::types_opts::to_string() const
{
  static const char* names[] = {"am", "um-Bi-Directional", "um-Uni-Directional-UL", "um-Uni-Directional-DL"};
  return convert_enum_idx(names, 4, value, "rlc_cfg_c::types");
}

// BH-RLC-ChannelConfig-r16 ::= SEQUENCE
SRSASN_CODE bh_rlc_ch_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(bh_lc_ch_id_r16_present, 1));
  HANDLE_CODE(bref.pack(reestablish_rlc_r16_present, 1));
  HANDLE_CODE(bref.pack(rlc_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(mac_lc_ch_cfg_r16_present, 1));

  if (bh_lc_ch_id_r16_present) {
    HANDLE_CODE(bh_lc_ch_id_r16.pack(bref));
  }
  HANDLE_CODE(bh_rlc_ch_id_r16.pack(bref));
  if (rlc_cfg_r16_present) {
    HANDLE_CODE(rlc_cfg_r16.pack(bref));
  }
  if (mac_lc_ch_cfg_r16_present) {
    HANDLE_CODE(mac_lc_ch_cfg_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE bh_rlc_ch_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(bh_lc_ch_id_r16_present, 1));
  HANDLE_CODE(bref.unpack(reestablish_rlc_r16_present, 1));
  HANDLE_CODE(bref.unpack(rlc_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(mac_lc_ch_cfg_r16_present, 1));

  if (bh_lc_ch_id_r16_present) {
    HANDLE_CODE(bh_lc_ch_id_r16.unpack(bref));
  }
  HANDLE_CODE(bh_rlc_ch_id_r16.unpack(bref));
  if (rlc_cfg_r16_present) {
    HANDLE_CODE(rlc_cfg_r16.unpack(bref));
  }
  if (mac_lc_ch_cfg_r16_present) {
    HANDLE_CODE(mac_lc_ch_cfg_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void bh_rlc_ch_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (bh_lc_ch_id_r16_present) {
    j.write_fieldname("bh-LogicalChannelIdentity-r16");
    bh_lc_ch_id_r16.to_json(j);
  }
  j.write_str("bh-RLC-ChannelID-r16", bh_rlc_ch_id_r16.to_string());
  if (reestablish_rlc_r16_present) {
    j.write_str("reestablishRLC-r16", "true");
  }
  if (rlc_cfg_r16_present) {
    j.write_fieldname("rlc-Config-r16");
    rlc_cfg_r16.to_json(j);
  }
  if (mac_lc_ch_cfg_r16_present) {
    j.write_fieldname("mac-LogicalChannelConfig-r16");
    mac_lc_ch_cfg_r16.to_json(j);
  }
  j.end_obj();
}

const char* beam_link_monitoring_rs_r17_s::detection_res_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-Index", "csi-RS-Index"};
  return convert_enum_idx(names, 2, value, "beam_link_monitoring_rs_r17_s::detection_res_r17_c_::types");
}

const char* csi_rs_res_map_s::freq_domain_alloc_c_::types_opts::to_string() const
{
  static const char* names[] = {"row1", "row2", "row4", "other"};
  return convert_enum_idx(names, 4, value, "csi_rs_res_map_s::freq_domain_alloc_c_::types");
}
uint8_t csi_rs_res_map_s::freq_domain_alloc_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "csi_rs_res_map_s::freq_domain_alloc_c_::types");
}

const char* csi_rs_res_map_s::density_c_::types_opts::to_string() const
{
  static const char* names[] = {"dot5", "one", "three", "spare"};
  return convert_enum_idx(names, 4, value, "csi_rs_res_map_s::density_c_::types");
}
uint8_t csi_rs_res_map_s::density_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 1, 3};
  return map_enum_number(numbers, 3, value, "csi_rs_res_map_s::density_c_::types");
}

const char* csi_res_periodicity_and_offset_c::types_opts::to_string() const
{
  static const char* names[] = {"slots4",
                                "slots5",
                                "slots8",
                                "slots10",
                                "slots16",
                                "slots20",
                                "slots32",
                                "slots40",
                                "slots64",
                                "slots80",
                                "slots160",
                                "slots320",
                                "slots640"};
  return convert_enum_idx(names, 13, value, "csi_res_periodicity_and_offset_c::types");
}
uint16_t csi_res_periodicity_and_offset_c::types_opts::to_number() const
{
  static const uint16_t numbers[] = {4, 5, 8, 10, 16, 20, 32, 40, 64, 80, 160, 320, 640};
  return map_enum_number(numbers, 13, value, "csi_res_periodicity_and_offset_c::types");
}

const char* qcl_info_s::ref_sig_c_::types_opts::to_string() const
{
  static const char* names[] = {"csi-rs", "ssb"};
  return convert_enum_idx(names, 2, value, "qcl_info_s::ref_sig_c_::types");
}

const char* dl_ppw_periodicity_and_start_slot_r17_c::scs15_c_::types_opts::to_string() const
{
  static const char* names[] = {"n4",
                                "n5",
                                "n8",
                                "n10",
                                "n16",
                                "n20",
                                "n32",
                                "n40",
                                "n64",
                                "n80",
                                "n160",
                                "n320",
                                "n640",
                                "n1280",
                                "n2560",
                                "n5120",
                                "n10240"};
  return convert_enum_idx(names, 17, value, "dl_ppw_periodicity_and_start_slot_r17_c::scs15_c_::types");
}
uint16_t dl_ppw_periodicity_and_start_slot_r17_c::scs15_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {4, 5, 8, 10, 16, 20, 32, 40, 64, 80, 160, 320, 640, 1280, 2560, 5120, 10240};
  return map_enum_number(numbers, 17, value, "dl_ppw_periodicity_and_start_slot_r17_c::scs15_c_::types");
}

const char* dl_ppw_periodicity_and_start_slot_r17_c::scs30_c_::types_opts::to_string() const
{
  static const char* names[] = {"n8",
                                "n10",
                                "n16",
                                "n20",
                                "n32",
                                "n40",
                                "n64",
                                "n80",
                                "n128",
                                "n160",
                                "n320",
                                "n640",
                                "n1280",
                                "n2560",
                                "n5120",
                                "n10240",
                                "n20480"};
  return convert_enum_idx(names, 17, value, "dl_ppw_periodicity_and_start_slot_r17_c::scs30_c_::types");
}
uint16_t dl_ppw_periodicity_and_start_slot_r17_c::scs30_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {8, 10, 16, 20, 32, 40, 64, 80, 128, 160, 320, 640, 1280, 2560, 5120, 10240, 20480};
  return map_enum_number(numbers, 17, value, "dl_ppw_periodicity_and_start_slot_r17_c::scs30_c_::types");
}

const char* dl_ppw_periodicity_and_start_slot_r17_c::scs60_c_::types_opts::to_string() const
{
  static const char* names[] = {"n16",
                                "n20",
                                "n32",
                                "n40",
                                "n64",
                                "n80",
                                "n128",
                                "n160",
                                "n256",
                                "n320",
                                "n640",
                                "n1280",
                                "n2560",
                                "n5120",
                                "n10240",
                                "n20480",
                                "n40960"};
  return convert_enum_idx(names, 17, value, "dl_ppw_periodicity_and_start_slot_r17_c::scs60_c_::types");
}
uint16_t dl_ppw_periodicity_and_start_slot_r17_c::scs60_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {
      16, 20, 32, 40, 64, 80, 128, 160, 256, 320, 640, 1280, 2560, 5120, 10240, 20480, 40960};
  return map_enum_number(numbers, 17, value, "dl_ppw_periodicity_and_start_slot_r17_c::scs60_c_::types");
}

const char* dl_ppw_periodicity_and_start_slot_r17_c::scs120_c_::types_opts::to_string() const
{
  static const char* names[] = {"n32",
                                "n40",
                                "n64",
                                "n80",
                                "n128",
                                "n160",
                                "n256",
                                "n320",
                                "n512",
                                "n640",
                                "n1280",
                                "n2560",
                                "n5120",
                                "n10240",
                                "n20480",
                                "n40960",
                                "n81920"};
  return convert_enum_idx(names, 17, value, "dl_ppw_periodicity_and_start_slot_r17_c::scs120_c_::types");
}
uint32_t dl_ppw_periodicity_and_start_slot_r17_c::scs120_c_::types_opts::to_number() const
{
  static const uint32_t numbers[] = {
      32, 40, 64, 80, 128, 160, 256, 320, 512, 640, 1280, 2560, 5120, 10240, 20480, 40960, 81920};
  return map_enum_number(numbers, 17, value, "dl_ppw_periodicity_and_start_slot_r17_c::scs120_c_::types");
}

const char* dl_ppw_periodicity_and_start_slot_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"scs15", "scs30", "scs60", "scs120"};
  return convert_enum_idx(names, 4, value, "dl_ppw_periodicity_and_start_slot_r17_c::types");
}
uint8_t dl_ppw_periodicity_and_start_slot_r17_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {15, 30, 60, 120};
  return map_enum_number(numbers, 4, value, "dl_ppw_periodicity_and_start_slot_r17_c::types");
}

const char* rate_match_pattern_group_item_c_::types_opts::to_string() const
{
  static const char* names[] = {"cellLevel", "bwpLevel"};
  return convert_enum_idx(names, 2, value, "rate_match_pattern_group_item_c_::types");
}

const char* repeat_scheme_cfg_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"fdm-TDM-r16", "slotBased-r16"};
  return convert_enum_idx(names, 2, value, "repeat_scheme_cfg_r16_c::types");
}

const char* candidate_beam_rs_r16_s::candidate_beam_cfg_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-r16", "csi-RS-r16"};
  return convert_enum_idx(names, 2, value, "candidate_beam_rs_r16_s::candidate_beam_cfg_r16_c_::types");
}

const char* pdsch_cfg_s::prb_bundling_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"staticBundling", "dynamicBundling"};
  return convert_enum_idx(names, 2, value, "pdsch_cfg_s::prb_bundling_type_c_::types");
}

const char* pdsch_cfg_s::prb_bundling_type_dci_1_2_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"staticBundling-r16", "dynamicBundling-r16"};
  return convert_enum_idx(names, 2, value, "pdsch_cfg_s::prb_bundling_type_dci_1_2_r16_c_::types");
}

const char* pdsch_cfg_s::dl_or_joint_tci_state_list_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"explicitlist", "unifiedTCI-StateRef-r17"};
  return convert_enum_idx(names, 2, value, "pdsch_cfg_s::dl_or_joint_tci_state_list_r17_c_::types");
}

const char* radio_link_monitoring_rs_s::detection_res_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-Index", "csi-RS-Index"};
  return convert_enum_idx(names, 2, value, "radio_link_monitoring_rs_s::detection_res_c_::types");
}

// BWP-DownlinkDedicatedSDT-r17 ::= SEQUENCE
SRSASN_CODE bwp_dl_ded_sdt_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(pdcch_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(pdsch_cfg_r17_present, 1));

  if (pdcch_cfg_r17_present) {
    HANDLE_CODE(pdcch_cfg_r17.pack(bref));
  }
  if (pdsch_cfg_r17_present) {
    HANDLE_CODE(pdsch_cfg_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE bwp_dl_ded_sdt_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(pdcch_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_cfg_r17_present, 1));

  if (pdcch_cfg_r17_present) {
    HANDLE_CODE(pdcch_cfg_r17.unpack(bref));
  }
  if (pdsch_cfg_r17_present) {
    HANDLE_CODE(pdsch_cfg_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void bwp_dl_ded_sdt_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pdcch_cfg_r17_present) {
    j.write_fieldname("pdcch-Config-r17");
    pdcch_cfg_r17.to_json(j);
  }
  if (pdsch_cfg_r17_present) {
    j.write_fieldname("pdsch-Config-r17");
    pdsch_cfg_r17.to_json(j);
  }
  j.end_obj();
}

const char* pucch_pathloss_ref_rs_r16_s::ref_sig_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-Index-r16", "csi-RS-Index-r16"};
  return convert_enum_idx(names, 2, value, "pucch_pathloss_ref_rs_r16_s::ref_sig_r16_c_::types");
}

const char* pathloss_ref_rs_cfg_c::types_opts::to_string() const
{
  static const char* names[] = {"ssb-Index", "csi-RS-Index"};
  return convert_enum_idx(names, 2, value, "pathloss_ref_rs_cfg_c::types");
}

const char* pucch_pathloss_ref_rs_s::ref_sig_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-Index", "csi-RS-Index"};
  return convert_enum_idx(names, 2, value, "pucch_pathloss_ref_rs_s::ref_sig_c_::types");
}

const char* beta_offsets_cross_pri_sel_cg_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"dynamic-r17", "semiStatic-r17"};
  return convert_enum_idx(names, 2, value, "beta_offsets_cross_pri_sel_cg_r17_c::types");
}

const char* cg_cot_sharing_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"noCOT-Sharing-r16", "cot-Sharing-r16"};
  return convert_enum_idx(names, 2, value, "cg_cot_sharing_r16_c::types");
}

const char* cg_cot_sharing_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"noCOT-Sharing-r17", "cot-Sharing-r17"};
  return convert_enum_idx(names, 2, value, "cg_cot_sharing_r17_c::types");
}

const char* cg_sdt_cfg_r17_s::sdt_ssb_subset_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"shortBitmap-r17", "mediumBitmap-r17", "longBitmap-r17"};
  return convert_enum_idx(names, 3, value, "cg_sdt_cfg_r17_s::sdt_ssb_subset_r17_c_::types");
}

const char* cg_sdt_cfg_r17_s::sdt_dmrs_ports_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"dmrsType1-r17", "dmrsType2-r17"};
  return convert_enum_idx(names, 2, value, "cg_sdt_cfg_r17_s::sdt_dmrs_ports_r17_c_::types");
}
uint8_t cg_sdt_cfg_r17_s::sdt_dmrs_ports_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "cg_sdt_cfg_r17_s::sdt_dmrs_ports_r17_c_::types");
}

const char* cg_uci_on_pusch_c::types_opts::to_string() const
{
  static const char* names[] = {"dynamic", "semiStatic"};
  return convert_enum_idx(names, 2, value, "cg_uci_on_pusch_c::types");
}

const char* prach_res_ded_bfr_c::types_opts::to_string() const
{
  static const char* names[] = {"ssb", "csi-RS"};
  return convert_enum_idx(names, 2, value, "prach_res_ded_bfr_c::types");
}

const char* pucch_res_s::format_c_::types_opts::to_string() const
{
  static const char* names[] = {"format0", "format1", "format2", "format3", "format4"};
  return convert_enum_idx(names, 5, value, "pucch_res_s::format_c_::types");
}
uint8_t pucch_res_s::format_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 3, 4};
  return map_enum_number(numbers, 5, value, "pucch_res_s::format_c_::types");
}

const char* pucch_res_ext_v1610_s::interlace_alloc_r16_s_::interlace0_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"scs15", "scs30"};
  return convert_enum_idx(names, 2, value, "pucch_res_ext_v1610_s::interlace_alloc_r16_s_::interlace0_r16_c_::types");
}
uint8_t pucch_res_ext_v1610_s::interlace_alloc_r16_s_::interlace0_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {15, 30};
  return map_enum_number(numbers, 2, value, "pucch_res_ext_v1610_s::interlace_alloc_r16_s_::interlace0_r16_c_::types");
}

const char* pucch_res_ext_v1610_s::format_v1610_c_::types_opts::to_string() const
{
  static const char* names[] = {"interlace1-v1610", "occ-v1610"};
  return convert_enum_idx(names, 2, value, "pucch_res_ext_v1610_s::format_v1610_c_::types");
}
uint8_t pucch_res_ext_v1610_s::format_v1610_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "pucch_res_ext_v1610_s::format_v1610_c_::types");
}

const char* pucch_spatial_relation_info_s::ref_sig_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-Index", "csi-RS-Index", "srs"};
  return convert_enum_idx(names, 3, value, "pucch_spatial_relation_info_s::ref_sig_c_::types");
}

const char* pusch_pathloss_ref_rs_s::ref_sig_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-Index", "csi-RS-Index"};
  return convert_enum_idx(names, 2, value, "pusch_pathloss_ref_rs_s::ref_sig_c_::types");
}

const char* pusch_pathloss_ref_rs_r16_s::ref_sig_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-Index-r16", "csi-RS-Index-r16"};
  return convert_enum_idx(names, 2, value, "pusch_pathloss_ref_rs_r16_s::ref_sig_r16_c_::types");
}

const char* srs_periodicity_and_offset_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"sl1",   "sl2",    "sl4",    "sl5",    "sl8",     "sl10",    "sl16",
                                "sl20",  "sl32",   "sl40",   "sl64",   "sl80",    "sl160",   "sl320",
                                "sl640", "sl1280", "sl2560", "sl5120", "sl10240", "sl40960", "sl81920"};
  return convert_enum_idx(names, 21, value, "srs_periodicity_and_offset_r16_c::types");
}
uint32_t srs_periodicity_and_offset_r16_c::types_opts::to_number() const
{
  static const uint32_t numbers[] = {1,  2,   4,   5,   8,    10,   16,   20,    32,    40,   64,
                                     80, 160, 320, 640, 1280, 2560, 5120, 10240, 40960, 81920};
  return map_enum_number(numbers, 21, value, "srs_periodicity_and_offset_r16_c::types");
}

const char* srs_periodicity_and_offset_ext_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"sl128", "sl256", "sl512", "sl20480"};
  return convert_enum_idx(names, 4, value, "srs_periodicity_and_offset_ext_r16_c::types");
}
uint16_t srs_periodicity_and_offset_ext_r16_c::types_opts::to_number() const
{
  static const uint16_t numbers[] = {128, 256, 512, 20480};
  return map_enum_number(numbers, 4, value, "srs_periodicity_and_offset_ext_r16_c::types");
}

const char* srs_spatial_relation_info_pos_r16_c::serving_rs_r16_s_::ref_sig_r16_c_::srs_spatial_relation_r16_s_::
    res_sel_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"srs-ResourceId-r16", "srs-PosResourceId-r16"};
  return convert_enum_idx(names,
                          2,
                          value,
                          "srs_spatial_relation_info_pos_r16_c::serving_rs_r16_s_::ref_sig_r16_c_::srs_spatial_"
                          "relation_r16_s_::res_sel_r16_c_::types");
}

const char* srs_spatial_relation_info_pos_r16_c::serving_rs_r16_s_::ref_sig_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-IndexServing-r16", "csi-RS-IndexServing-r16", "srs-SpatialRelation-r16"};
  return convert_enum_idx(
      names, 3, value, "srs_spatial_relation_info_pos_r16_c::serving_rs_r16_s_::ref_sig_r16_c_::types");
}

const char* srs_spatial_relation_info_pos_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"servingRS-r16", "ssb-Ncell-r16", "dl-PRS-r16"};
  return convert_enum_idx(names, 3, value, "srs_spatial_relation_info_pos_r16_c::types");
}

const char* sched_request_res_cfg_s::periodicity_and_offset_c_::types_opts::to_string() const
{
  static const char* names[] = {"sym2",
                                "sym6or7",
                                "sl1",
                                "sl2",
                                "sl4",
                                "sl5",
                                "sl8",
                                "sl10",
                                "sl16",
                                "sl20",
                                "sl40",
                                "sl80",
                                "sl160",
                                "sl320",
                                "sl640"};
  return convert_enum_idx(names, 15, value, "sched_request_res_cfg_s::periodicity_and_offset_c_::types");
}

const char* sched_request_res_cfg_ext_v1700_s::periodicity_and_offset_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"sl1280", "sl2560", "sl5120"};
  return convert_enum_idx(names, 3, value, "sched_request_res_cfg_ext_v1700_s::periodicity_and_offset_r17_c_::types");
}
uint16_t sched_request_res_cfg_ext_v1700_s::periodicity_and_offset_r17_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {1280, 2560, 5120};
  return map_enum_number(numbers, 3, value, "sched_request_res_cfg_ext_v1700_s::periodicity_and_offset_r17_c_::types");
}

const char* uci_on_pusch_s::beta_offsets_c_::types_opts::to_string() const
{
  static const char* names[] = {"dynamic", "semiStatic"};
  return convert_enum_idx(names, 2, value, "uci_on_pusch_s::beta_offsets_c_::types");
}

const char* uci_on_pusch_dci_0_2_r16_s::beta_offsets_dci_0_2_r16_c_::dyn_dci_0_2_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"oneBit-r16", "twoBits-r16"};
  return convert_enum_idx(
      names, 2, value, "uci_on_pusch_dci_0_2_r16_s::beta_offsets_dci_0_2_r16_c_::dyn_dci_0_2_r16_c_::types");
}
uint8_t uci_on_pusch_dci_0_2_r16_s::beta_offsets_dci_0_2_r16_c_::dyn_dci_0_2_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers, 2, value, "uci_on_pusch_dci_0_2_r16_s::beta_offsets_dci_0_2_r16_c_::dyn_dci_0_2_r16_c_::types");
}

const char* uci_on_pusch_dci_0_2_r16_s::beta_offsets_dci_0_2_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"dynamicDCI-0-2-r16", "semiStaticDCI-0-2-r16"};
  return convert_enum_idx(names, 2, value, "uci_on_pusch_dci_0_2_r16_s::beta_offsets_dci_0_2_r16_c_::types");
}

const char* beta_offsets_cross_pri_sel_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"dynamic-r17", "semiStatic-r17"};
  return convert_enum_idx(names, 2, value, "beta_offsets_cross_pri_sel_r17_c::types");
}

const char* beta_offsets_cross_pri_sel_dci_0_2_r17_c::dyn_dci_0_2_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"oneBit-r17", "twoBits-r17"};
  return convert_enum_idx(names, 2, value, "beta_offsets_cross_pri_sel_dci_0_2_r17_c::dyn_dci_0_2_r17_c_::types");
}
uint8_t beta_offsets_cross_pri_sel_dci_0_2_r17_c::dyn_dci_0_2_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "beta_offsets_cross_pri_sel_dci_0_2_r17_c::dyn_dci_0_2_r17_c_::types");
}

const char* beta_offsets_cross_pri_sel_dci_0_2_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"dynamicDCI-0-2-r17", "semiStaticDCI-0-2-r17"};
  return convert_enum_idx(names, 2, value, "beta_offsets_cross_pri_sel_dci_0_2_r17_c::types");
}

const char* invalid_symbol_pattern_r16_s::symbols_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"oneSlot", "twoSlots"};
  return convert_enum_idx(names, 2, value, "invalid_symbol_pattern_r16_s::symbols_r16_c_::types");
}
uint8_t invalid_symbol_pattern_r16_s::symbols_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "invalid_symbol_pattern_r16_s::symbols_r16_c_::types");
}

const char* invalid_symbol_pattern_r16_s::periodicity_and_pattern_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n5", "n8", "n10", "n20", "n40"};
  return convert_enum_idx(names, 7, value, "invalid_symbol_pattern_r16_s::periodicity_and_pattern_r16_c_::types");
}
uint8_t invalid_symbol_pattern_r16_s::periodicity_and_pattern_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 5, 8, 10, 20, 40};
  return map_enum_number(numbers, 7, value, "invalid_symbol_pattern_r16_s::periodicity_and_pattern_r16_c_::types");
}

const char* mpe_res_r17_s::mpe_ref_sig_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"csi-RS-Resource-r17", "ssb-Resource-r17"};
  return convert_enum_idx(names, 2, value, "mpe_res_r17_s::mpe_ref_sig_r17_c_::types");
}

const char* pucch_cfg_s::subslot_len_for_pucch_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"normalCP-r16", "extendedCP-r16"};
  return convert_enum_idx(names, 2, value, "pucch_cfg_s::subslot_len_for_pucch_r16_c_::types");
}

const char* srs_pos_res_r16_s::tx_comb_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"n2-r16", "n4-r16", "n8-r16"};
  return convert_enum_idx(names, 3, value, "srs_pos_res_r16_s::tx_comb_r16_c_::types");
}
uint8_t srs_pos_res_r16_s::tx_comb_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8};
  return map_enum_number(numbers, 3, value, "srs_pos_res_r16_s::tx_comb_r16_c_::types");
}

const char* srs_pos_res_r16_s::res_type_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"aperiodic-r16", "semi-persistent-r16", "periodic-r16"};
  return convert_enum_idx(names, 3, value, "srs_pos_res_r16_s::res_type_r16_c_::types");
}

const char* srs_pos_res_set_r16_s::res_type_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"aperiodic-r16", "semi-persistent-r16", "periodic-r16"};
  return convert_enum_idx(names, 3, value, "srs_pos_res_set_r16_s::res_type_r16_c_::types");
}

const char* srs_pos_res_set_r16_s::pathloss_ref_rs_pos_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-IndexServing-r16", "ssb-Ncell-r16", "dl-PRS-r16"};
  return convert_enum_idx(names, 3, value, "srs_pos_res_set_r16_s::pathloss_ref_rs_pos_r16_c_::types");
}

const char* srs_res_set_s::res_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"aperiodic", "semi-persistent", "periodic"};
  return convert_enum_idx(names, 3, value, "srs_res_set_s::res_type_c_::types");
}

const char* pusch_cfg_s::freq_hop_dci_0_2_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"pusch-RepTypeA", "pusch-RepTypeB"};
  return convert_enum_idx(names, 2, value, "pusch_cfg_s::freq_hop_dci_0_2_r16_c_::types");
}

const char* pathloss_ref_rs_r17_s::ref_sig_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-Index", "csi-RS-Index"};
  return convert_enum_idx(names, 2, value, "pathloss_ref_rs_r17_s::ref_sig_r17_c_::types");
}

const char* tci_ul_state_r17_s::ref_sig_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-Index-r17", "csi-RS-Index-r17", "srs-r17"};
  return convert_enum_idx(names, 3, value, "tci_ul_state_r17_s::ref_sig_r17_c_::types");
}

const char* bwp_ul_ded_s::ul_tci_state_list_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"explicitlist", "unifiedTCI-StateRef-r17"};
  return convert_enum_idx(names, 2, value, "bwp_ul_ded_s::ul_tci_state_list_r17_c_::types");
}

// BWP-UplinkDedicatedSDT-r17 ::= SEQUENCE
SRSASN_CODE bwp_ul_ded_sdt_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(pusch_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(cfg_grant_cfg_to_add_mod_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(cfg_grant_cfg_to_release_list_r17.size() > 0, 1));

  if (pusch_cfg_r17_present) {
    HANDLE_CODE(pusch_cfg_r17.pack(bref));
  }
  if (cfg_grant_cfg_to_add_mod_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cfg_grant_cfg_to_add_mod_list_r17, 1, 12));
  }
  if (cfg_grant_cfg_to_release_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cfg_grant_cfg_to_release_list_r17, 1, 12, integer_packer<uint8_t>(0, 11)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE bwp_ul_ded_sdt_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(pusch_cfg_r17_present, 1));
  bool cfg_grant_cfg_to_add_mod_list_r17_present;
  HANDLE_CODE(bref.unpack(cfg_grant_cfg_to_add_mod_list_r17_present, 1));
  bool cfg_grant_cfg_to_release_list_r17_present;
  HANDLE_CODE(bref.unpack(cfg_grant_cfg_to_release_list_r17_present, 1));

  if (pusch_cfg_r17_present) {
    HANDLE_CODE(pusch_cfg_r17.unpack(bref));
  }
  if (cfg_grant_cfg_to_add_mod_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cfg_grant_cfg_to_add_mod_list_r17, bref, 1, 12));
  }
  if (cfg_grant_cfg_to_release_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cfg_grant_cfg_to_release_list_r17, bref, 1, 12, integer_packer<uint8_t>(0, 11)));
  }

  return SRSASN_SUCCESS;
}
void bwp_ul_ded_sdt_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pusch_cfg_r17_present) {
    j.write_fieldname("pusch-Config-r17");
    pusch_cfg_r17.to_json(j);
  }
  if (cfg_grant_cfg_to_add_mod_list_r17.size() > 0) {
    j.start_array("configuredGrantConfigToAddModList-r17");
    for (const auto& e1 : cfg_grant_cfg_to_add_mod_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (cfg_grant_cfg_to_release_list_r17.size() > 0) {
    j.start_array("configuredGrantConfigToReleaseList-r17");
    for (const auto& e1 : cfg_grant_cfg_to_release_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

const char* band_params_c::types_opts::to_string() const
{
  static const char* names[] = {"eutra", "nr"};
  return convert_enum_idx(names, 2, value, "band_params_c::types");
}

const char* band_params_v1540_s::srs_carrier_switch_c_::types_opts::to_string() const
{
  static const char* names[] = {"nr", "eutra"};
  return convert_enum_idx(names, 2, value, "band_params_v1540_s::srs_carrier_switch_c_::types");
}

// PDCCH-BlindDetectionCA-MixedExt-r16 ::= SEQUENCE
SRSASN_CODE pdcch_blind_detection_ca_mixed_ext_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_ca1_r16, (uint8_t)1u, (uint8_t)15u));
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_ca2_r16, (uint8_t)1u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_blind_detection_ca_mixed_ext_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca1_r16, bref, (uint8_t)1u, (uint8_t)15u));
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca2_r16, bref, (uint8_t)1u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
void pdcch_blind_detection_ca_mixed_ext_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("pdcch-BlindDetectionCA1-r16", pdcch_blind_detection_ca1_r16);
  j.write_int("pdcch-BlindDetectionCA2-r16", pdcch_blind_detection_ca2_r16);
  j.end_obj();
}

// PDCCH-BlindDetectionCG-UE-MixedExt-r16 ::= SEQUENCE
SRSASN_CODE pdcch_blind_detection_cg_ue_mixed_ext_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_cg_ue1_r16, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_cg_ue2_r16, (uint8_t)0u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_blind_detection_cg_ue_mixed_ext_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_cg_ue1_r16, bref, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_cg_ue2_r16, bref, (uint8_t)0u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
void pdcch_blind_detection_cg_ue_mixed_ext_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("pdcch-BlindDetectionCG-UE1-r16", pdcch_blind_detection_cg_ue1_r16);
  j.write_int("pdcch-BlindDetectionCG-UE2-r16", pdcch_blind_detection_cg_ue2_r16);
  j.end_obj();
}

// PDCCH-BlindDetectionMixedList-r16 ::= SEQUENCE
SRSASN_CODE pdcch_blind_detection_mixed_list_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pdcch_blind_detection_ca_mixed_ext_r16_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_cg_ue_mixed_ext_r16_present, 1));

  if (pdcch_blind_detection_ca_mixed_ext_r16_present) {
    HANDLE_CODE(pdcch_blind_detection_ca_mixed_ext_r16.pack(bref));
  }
  if (pdcch_blind_detection_cg_ue_mixed_ext_r16_present) {
    HANDLE_CODE(pdcch_blind_detection_cg_ue_mixed_ext_r16.pdcch_blind_detection_mcg_ue_mixed_v16a0.pack(bref));
    HANDLE_CODE(pdcch_blind_detection_cg_ue_mixed_ext_r16.pdcch_blind_detection_scg_ue_mixed_v16a0.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_blind_detection_mixed_list_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_ca_mixed_ext_r16_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_cg_ue_mixed_ext_r16_present, 1));

  if (pdcch_blind_detection_ca_mixed_ext_r16_present) {
    HANDLE_CODE(pdcch_blind_detection_ca_mixed_ext_r16.unpack(bref));
  }
  if (pdcch_blind_detection_cg_ue_mixed_ext_r16_present) {
    HANDLE_CODE(pdcch_blind_detection_cg_ue_mixed_ext_r16.pdcch_blind_detection_mcg_ue_mixed_v16a0.unpack(bref));
    HANDLE_CODE(pdcch_blind_detection_cg_ue_mixed_ext_r16.pdcch_blind_detection_scg_ue_mixed_v16a0.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void pdcch_blind_detection_mixed_list_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pdcch_blind_detection_ca_mixed_ext_r16_present) {
    j.write_fieldname("pdcch-BlindDetectionCA-MixedExt-r16");
    pdcch_blind_detection_ca_mixed_ext_r16.to_json(j);
  }
  if (pdcch_blind_detection_cg_ue_mixed_ext_r16_present) {
    j.write_fieldname("pdcch-BlindDetectionCG-UE-MixedExt-r16");
    j.start_obj();
    j.write_fieldname("pdcch-BlindDetectionMCG-UE-Mixed-v16a0");
    pdcch_blind_detection_cg_ue_mixed_ext_r16.pdcch_blind_detection_mcg_ue_mixed_v16a0.to_json(j);
    j.write_fieldname("pdcch-BlindDetectionSCG-UE-Mixed-v16a0");
    pdcch_blind_detection_cg_ue_mixed_ext_r16.pdcch_blind_detection_scg_ue_mixed_v16a0.to_json(j);
    j.end_obj();
  }
  j.end_obj();
}

void pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_::destroy_()
{
  switch (type_) {
    case types::pdcch_blind_detection_ca_mixed_v16a0:
      c.destroy<pdcch_blind_detection_ca_mixed_ext_r16_s>();
      break;
    case types::pdcch_blind_detection_ca_mixed_non_aligned_span_v16a0:
      c.destroy<pdcch_blind_detection_ca_mixed_ext_r16_s>();
      break;
    default:
      break;
  }
}
void pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::pdcch_blind_detection_ca_mixed_v16a0:
      c.init<pdcch_blind_detection_ca_mixed_ext_r16_s>();
      break;
    case types::pdcch_blind_detection_ca_mixed_non_aligned_span_v16a0:
      c.init<pdcch_blind_detection_ca_mixed_ext_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_");
  }
}
pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_::
    pdcch_blind_detection_ca_mixed_ext_r16_c_(
        const pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::pdcch_blind_detection_ca_mixed_v16a0:
      c.init(other.c.get<pdcch_blind_detection_ca_mixed_ext_r16_s>());
      break;
    case types::pdcch_blind_detection_ca_mixed_non_aligned_span_v16a0:
      c.init(other.c.get<pdcch_blind_detection_ca_mixed_ext_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_");
  }
}
pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_&
pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_::operator=(
    const pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::pdcch_blind_detection_ca_mixed_v16a0:
      c.set(other.c.get<pdcch_blind_detection_ca_mixed_ext_r16_s>());
      break;
    case types::pdcch_blind_detection_ca_mixed_non_aligned_span_v16a0:
      c.set(other.c.get<pdcch_blind_detection_ca_mixed_ext_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_");
  }

  return *this;
}
pdcch_blind_detection_ca_mixed_ext_r16_s& pdcch_blind_detection_mixed_list_r16_s::
    pdcch_blind_detection_ca_mixed_ext_r16_c_::set_pdcch_blind_detection_ca_mixed_v16a0()
{
  set(types::pdcch_blind_detection_ca_mixed_v16a0);
  return c.get<pdcch_blind_detection_ca_mixed_ext_r16_s>();
}
pdcch_blind_detection_ca_mixed_ext_r16_s& pdcch_blind_detection_mixed_list_r16_s::
    pdcch_blind_detection_ca_mixed_ext_r16_c_::set_pdcch_blind_detection_ca_mixed_non_aligned_span_v16a0()
{
  set(types::pdcch_blind_detection_ca_mixed_non_aligned_span_v16a0);
  return c.get<pdcch_blind_detection_ca_mixed_ext_r16_s>();
}
void pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::pdcch_blind_detection_ca_mixed_v16a0:
      j.write_fieldname("pdcch-BlindDetectionCA-Mixed-v16a0");
      c.get<pdcch_blind_detection_ca_mixed_ext_r16_s>().to_json(j);
      break;
    case types::pdcch_blind_detection_ca_mixed_non_aligned_span_v16a0:
      j.write_fieldname("pdcch-BlindDetectionCA-Mixed-NonAlignedSpan-v16a0");
      c.get<pdcch_blind_detection_ca_mixed_ext_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::pdcch_blind_detection_ca_mixed_v16a0:
      HANDLE_CODE(c.get<pdcch_blind_detection_ca_mixed_ext_r16_s>().pack(bref));
      break;
    case types::pdcch_blind_detection_ca_mixed_non_aligned_span_v16a0:
      HANDLE_CODE(c.get<pdcch_blind_detection_ca_mixed_ext_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::pdcch_blind_detection_ca_mixed_v16a0:
      HANDLE_CODE(c.get<pdcch_blind_detection_ca_mixed_ext_r16_s>().unpack(bref));
      break;
    case types::pdcch_blind_detection_ca_mixed_non_aligned_span_v16a0:
      HANDLE_CODE(c.get<pdcch_blind_detection_ca_mixed_ext_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char*
pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"pdcch-BlindDetectionCA-Mixed-v16a0",
                                "pdcch-BlindDetectionCA-Mixed-NonAlignedSpan-v16a0"};
  return convert_enum_idx(
      names, 2, value, "pdcch_blind_detection_mixed_list_r16_s::pdcch_blind_detection_ca_mixed_ext_r16_c_::types");
}

// CA-ParametersNR-v16a0 ::= SEQUENCE
SRSASN_CODE ca_params_nr_v16a0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, pdcch_blind_detection_mixed_list_r16, 1, 7));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_v16a0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(pdcch_blind_detection_mixed_list_r16, bref, 1, 7));

  return SRSASN_SUCCESS;
}
void ca_params_nr_v16a0_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("pdcch-BlindDetectionMixedList-r16");
  for (const auto& e1 : pdcch_blind_detection_mixed_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// CA-ParametersNRDC-v16a0 ::= SEQUENCE
SRSASN_CODE ca_params_nrdc_v16a0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_for_dc_v16a0_present, 1));

  if (ca_params_nr_for_dc_v16a0_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v16a0.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nrdc_v16a0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_for_dc_v16a0_present, 1));

  if (ca_params_nr_for_dc_v16a0_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v16a0.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nrdc_v16a0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_for_dc_v16a0_present) {
    j.write_fieldname("ca-ParametersNR-ForDC-v16a0");
    ca_params_nr_for_dc_v16a0.to_json(j);
  }
  j.end_obj();
}

// BandCombination-v16a0 ::= SEQUENCE
SRSASN_CODE band_combination_v16a0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_v16a0_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nrdc_v16a0_present, 1));

  if (ca_params_nr_v16a0_present) {
    HANDLE_CODE(ca_params_nr_v16a0.pack(bref));
  }
  if (ca_params_nrdc_v16a0_present) {
    HANDLE_CODE(ca_params_nrdc_v16a0.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v16a0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_v16a0_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nrdc_v16a0_present, 1));

  if (ca_params_nr_v16a0_present) {
    HANDLE_CODE(ca_params_nr_v16a0.unpack(bref));
  }
  if (ca_params_nrdc_v16a0_present) {
    HANDLE_CODE(ca_params_nrdc_v16a0.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v16a0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_v16a0_present) {
    j.write_fieldname("ca-ParametersNR-v16a0");
    ca_params_nr_v16a0.to_json(j);
  }
  if (ca_params_nrdc_v16a0_present) {
    j.write_fieldname("ca-ParametersNRDC-v16a0");
    ca_params_nrdc_v16a0.to_json(j);
  }
  j.end_obj();
}

// BandCombination-UplinkTxSwitch-v16a0 ::= SEQUENCE
SRSASN_CODE band_combination_ul_tx_switch_v16a0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(band_combination_v16a0_present, 1));

  if (band_combination_v16a0_present) {
    HANDLE_CODE(band_combination_v16a0.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_ul_tx_switch_v16a0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(band_combination_v16a0_present, 1));

  if (band_combination_v16a0_present) {
    HANDLE_CODE(band_combination_v16a0.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_ul_tx_switch_v16a0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (band_combination_v16a0_present) {
    j.write_fieldname("bandCombination-v16a0");
    band_combination_v16a0.to_json(j);
  }
  j.end_obj();
}

const char* band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"fr1-r17", "fr2-r17"};
  return convert_enum_idx(names,
                          2,
                          value,
                          "band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_pattern_tx_"
                          "sidelink_mode_two_r17_c_::types");
}
uint8_t band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers,
                         2,
                         value,
                         "band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_pattern_tx_"
                         "sidelink_mode_two_r17_c_::types");
}

const char* band_params_sidelink_eutra_nr_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"eutra", "nr"};
  return convert_enum_idx(names, 2, value, "band_params_sidelink_eutra_nr_r16_c::types");
}

const char* band_params_sidelink_eutra_nr_v1630_c::types_opts::to_string() const
{
  static const char* names[] = {"eutra", "nr"};
  return convert_enum_idx(names, 2, value, "band_params_sidelink_eutra_nr_v1630_c::types");
}

const char* band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"fr1-r17", "fr2-r17"};
  return convert_enum_idx(names,
                          2,
                          value,
                          "band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_"
                          "pattern_tx_sidelink_mode_two_r17_c_::types");
}
uint8_t band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers,
                         2,
                         value,
                         "band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_"
                         "pattern_tx_sidelink_mode_two_r17_c_::types");
}

const char* band_params_sidelink_eutra_nr_v1710_c::types_opts::to_string() const
{
  static const char* names[] = {"eutra", "nr"};
  return convert_enum_idx(names, 2, value, "band_params_sidelink_eutra_nr_v1710_c::types");
}

const char*
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"ppw-durationOfPRS-Processing1-r17", "ppw-durationOfPRS-Processing2-r17"};
  return convert_enum_idx(
      names, 2, value, "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::types");
}
uint8_t
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers,
      2,
      value,
      "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::types");
}

const char*
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"fr1-r17", "fr2-r17"};
  return convert_enum_idx(
      names, 2, value, "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::types");
}
uint8_t prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers, 2, value, "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::types");
}

const char* band_nr_s::ch_bws_dl_c_::types_opts::to_string() const
{
  static const char* names[] = {"fr1", "fr2"};
  return convert_enum_idx(names, 2, value, "band_nr_s::ch_bws_dl_c_::types");
}
uint8_t band_nr_s::ch_bws_dl_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "band_nr_s::ch_bws_dl_c_::types");
}

const char* band_nr_s::ch_bws_ul_c_::types_opts::to_string() const
{
  static const char* names[] = {"fr1", "fr2"};
  return convert_enum_idx(names, 2, value, "band_nr_s::ch_bws_ul_c_::types");
}
uint8_t band_nr_s::ch_bws_ul_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "band_nr_s::ch_bws_ul_c_::types");
}

const char* band_nr_s::ch_bws_dl_v1590_c_::types_opts::to_string() const
{
  static const char* names[] = {"fr1", "fr2"};
  return convert_enum_idx(names, 2, value, "band_nr_s::ch_bws_dl_v1590_c_::types");
}
uint8_t band_nr_s::ch_bws_dl_v1590_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "band_nr_s::ch_bws_dl_v1590_c_::types");
}

const char* band_nr_s::ch_bws_ul_v1590_c_::types_opts::to_string() const
{
  static const char* names[] = {"fr1", "fr2"};
  return convert_enum_idx(names, 2, value, "band_nr_s::ch_bws_ul_v1590_c_::types");
}
uint8_t band_nr_s::ch_bws_ul_v1590_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "band_nr_s::ch_bws_ul_v1590_c_::types");
}

const char* band_nr_s::ch_bw_dl_iab_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"fr1-100mhz", "fr2-200mhz"};
  return convert_enum_idx(names, 2, value, "band_nr_s::ch_bw_dl_iab_r16_c_::types");
}
uint8_t band_nr_s::ch_bw_dl_iab_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "band_nr_s::ch_bw_dl_iab_r16_c_::types");
}

const char* band_nr_s::ch_bw_ul_iab_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"fr1-100mhz", "fr2-200mhz"};
  return convert_enum_idx(names, 2, value, "band_nr_s::ch_bw_ul_iab_r16_c_::types");
}
uint8_t band_nr_s::ch_bw_ul_iab_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "band_nr_s::ch_bw_ul_iab_r16_c_::types");
}

const char* band_nr_s::max_mod_order_for_multicast_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"fr1-r17", "fr2-r17"};
  return convert_enum_idx(names, 2, value, "band_nr_s::max_mod_order_for_multicast_r17_c_::types");
}
uint8_t band_nr_s::max_mod_order_for_multicast_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "band_nr_s::max_mod_order_for_multicast_r17_c_::types");
}

const char* band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"fr1-r16", "fr2-r16"};
  return convert_enum_idx(
      names, 2, value, "band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::types");
}
uint8_t band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers, 2, value, "band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::types");
}

const char*
band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"fr1-r16", "fr2-r16"};
  return convert_enum_idx(
      names, 2, value, "band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::types");
}
uint8_t
band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers, 2, value, "band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::types");
}

const char* band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::
    types_opts::to_string() const
{
  static const char* names[] = {"fr1-r17", "fr2-r17"};
  return convert_enum_idx(
      names,
      2,
      value,
      "band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::types");
}
uint8_t band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::types_opts::
    to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers,
      2,
      value,
      "band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::types");
}

// CarrierState-r17 ::= CHOICE
void carrier_state_r17_c::set(types::options e)
{
  type_ = e;
}
void carrier_state_r17_c::set_de_activ_r17()
{
  set(types::de_activ_r17);
}
uint8_t& carrier_state_r17_c::set_active_bwp_r17()
{
  set(types::active_bwp_r17);
  return c;
}
void carrier_state_r17_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::de_activ_r17:
      break;
    case types::active_bwp_r17:
      j.write_int("activeBWP-r17", c);
      break;
    default:
      log_invalid_choice_id(type_, "carrier_state_r17_c");
  }
  j.end_obj();
}
SRSASN_CODE carrier_state_r17_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::de_activ_r17:
      break;
    case types::active_bwp_r17:
      HANDLE_CODE(pack_integer(bref, c, (uint8_t)0u, (uint8_t)4u));
      break;
    default:
      log_invalid_choice_id(type_, "carrier_state_r17_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE carrier_state_r17_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::de_activ_r17:
      break;
    case types::active_bwp_r17:
      HANDLE_CODE(unpack_integer(c, bref, (uint8_t)0u, (uint8_t)4u));
      break;
    default:
      log_invalid_choice_id(type_, "carrier_state_r17_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* carrier_state_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"deActivated-r17", "activeBWP-r17"};
  return convert_enum_idx(names, 2, value, "carrier_state_r17_c::types");
}

// CC-State-r17 ::= SEQUENCE
SRSASN_CODE cc_state_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(dl_carrier_r17_present, 1));
  HANDLE_CODE(bref.pack(ul_carrier_r17_present, 1));

  if (dl_carrier_r17_present) {
    HANDLE_CODE(dl_carrier_r17.pack(bref));
  }
  if (ul_carrier_r17_present) {
    HANDLE_CODE(ul_carrier_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cc_state_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(dl_carrier_r17_present, 1));
  HANDLE_CODE(bref.unpack(ul_carrier_r17_present, 1));

  if (dl_carrier_r17_present) {
    HANDLE_CODE(dl_carrier_r17.unpack(bref));
  }
  if (ul_carrier_r17_present) {
    HANDLE_CODE(ul_carrier_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cc_state_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dl_carrier_r17_present) {
    j.write_fieldname("dlCarrier-r17");
    dl_carrier_r17.to_json(j);
  }
  if (ul_carrier_r17_present) {
    j.write_fieldname("ulCarrier-r17");
    ul_carrier_r17.to_json(j);
  }
  j.end_obj();
}

// CFRA-CSIRS-Resource ::= SEQUENCE
SRSASN_CODE cfra_csi_rs_res_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, csi_rs, (uint8_t)0u, (uint8_t)95u));
  HANDLE_CODE(pack_dyn_seq_of(bref, ra_occasion_list, 1, 64, integer_packer<uint16_t>(0, 511)));
  HANDLE_CODE(pack_integer(bref, ra_preamb_idx, (uint8_t)0u, (uint8_t)63u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cfra_csi_rs_res_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(csi_rs, bref, (uint8_t)0u, (uint8_t)95u));
  HANDLE_CODE(unpack_dyn_seq_of(ra_occasion_list, bref, 1, 64, integer_packer<uint16_t>(0, 511)));
  HANDLE_CODE(unpack_integer(ra_preamb_idx, bref, (uint8_t)0u, (uint8_t)63u));

  return SRSASN_SUCCESS;
}
void cfra_csi_rs_res_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("csi-RS", csi_rs);
  j.start_array("ra-OccasionList");
  for (const auto& e1 : ra_occasion_list) {
    j.write_int(e1);
  }
  j.end_array();
  j.write_int("ra-PreambleIndex", ra_preamb_idx);
  j.end_obj();
}

// CFRA-SSB-Resource ::= SEQUENCE
SRSASN_CODE cfra_ssb_res_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, ssb, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(pack_integer(bref, ra_preamb_idx, (uint8_t)0u, (uint8_t)63u));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= msg_a_pusch_res_idx_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(msg_a_pusch_res_idx_r16_present, 1));
      if (msg_a_pusch_res_idx_r16_present) {
        HANDLE_CODE(pack_integer(bref, msg_a_pusch_res_idx_r16, (uint16_t)0u, (uint16_t)3071u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cfra_ssb_res_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(ssb, bref, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(unpack_integer(ra_preamb_idx, bref, (uint8_t)0u, (uint8_t)63u));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(msg_a_pusch_res_idx_r16_present, 1));
      if (msg_a_pusch_res_idx_r16_present) {
        HANDLE_CODE(unpack_integer(msg_a_pusch_res_idx_r16, bref, (uint16_t)0u, (uint16_t)3071u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void cfra_ssb_res_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("ssb", ssb);
  j.write_int("ra-PreambleIndex", ra_preamb_idx);
  if (ext) {
    if (msg_a_pusch_res_idx_r16_present) {
      j.write_int("msgA-PUSCH-Resource-Index-r16", msg_a_pusch_res_idx_r16);
    }
  }
  j.end_obj();
}

// CFRA ::= SEQUENCE
SRSASN_CODE cfra_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(occasions_present, 1));

  if (occasions_present) {
    HANDLE_CODE(bref.pack(occasions.ssb_per_rach_occasion_present, 1));
    HANDLE_CODE(occasions.rach_cfg_generic.pack(bref));
    if (occasions.ssb_per_rach_occasion_present) {
      HANDLE_CODE(occasions.ssb_per_rach_occasion.pack(bref));
    }
  }
  HANDLE_CODE(res.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= total_nof_ra_preambs_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(total_nof_ra_preambs_present, 1));
      if (total_nof_ra_preambs_present) {
        HANDLE_CODE(pack_integer(bref, total_nof_ra_preambs, (uint8_t)1u, (uint8_t)63u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cfra_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(occasions_present, 1));

  if (occasions_present) {
    HANDLE_CODE(bref.unpack(occasions.ssb_per_rach_occasion_present, 1));
    HANDLE_CODE(occasions.rach_cfg_generic.unpack(bref));
    if (occasions.ssb_per_rach_occasion_present) {
      HANDLE_CODE(occasions.ssb_per_rach_occasion.unpack(bref));
    }
  }
  HANDLE_CODE(res.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(total_nof_ra_preambs_present, 1));
      if (total_nof_ra_preambs_present) {
        HANDLE_CODE(unpack_integer(total_nof_ra_preambs, bref, (uint8_t)1u, (uint8_t)63u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void cfra_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (occasions_present) {
    j.write_fieldname("occasions");
    j.start_obj();
    j.write_fieldname("rach-ConfigGeneric");
    occasions.rach_cfg_generic.to_json(j);
    if (occasions.ssb_per_rach_occasion_present) {
      j.write_str("ssb-perRACH-Occasion", occasions.ssb_per_rach_occasion.to_string());
    }
    j.end_obj();
  }
  j.write_fieldname("resources");
  res.to_json(j);
  if (ext) {
    if (total_nof_ra_preambs_present) {
      j.write_int("totalNumberOfRA-Preambles", total_nof_ra_preambs);
    }
  }
  j.end_obj();
}

const char* cfra_s::occasions_s_::ssb_per_rach_occasion_opts::to_string() const
{
  static const char* names[] = {"oneEighth", "oneFourth", "oneHalf", "one", "two", "four", "eight", "sixteen"};
  return convert_enum_idx(names, 8, value, "cfra_s::occasions_s_::ssb_per_rach_occasion_e_");
}
float cfra_s::occasions_s_::ssb_per_rach_occasion_opts::to_number() const
{
  static const float numbers[] = {0.125, 0.25, 0.5, 1.0, 2.0, 4.0, 8.0, 6.0};
  return map_enum_number(numbers, 8, value, "cfra_s::occasions_s_::ssb_per_rach_occasion_e_");
}
const char* cfra_s::occasions_s_::ssb_per_rach_occasion_opts::to_number_string() const
{
  static const char* number_strs[] = {"1/8", "1/4", "1/2", "1", "2", "4", "8", "6"};
  return convert_enum_idx(number_strs, 8, value, "cfra_s::occasions_s_::ssb_per_rach_occasion_e_");
}

void cfra_s::res_c_::destroy_()
{
  switch (type_) {
    case types::ssb:
      c.destroy<ssb_s_>();
      break;
    case types::csirs:
      c.destroy<csirs_s_>();
      break;
    default:
      break;
  }
}
void cfra_s::res_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ssb:
      c.init<ssb_s_>();
      break;
    case types::csirs:
      c.init<csirs_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cfra_s::res_c_");
  }
}
cfra_s::res_c_::res_c_(const cfra_s::res_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ssb:
      c.init(other.c.get<ssb_s_>());
      break;
    case types::csirs:
      c.init(other.c.get<csirs_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cfra_s::res_c_");
  }
}
cfra_s::res_c_& cfra_s::res_c_::operator=(const cfra_s::res_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ssb:
      c.set(other.c.get<ssb_s_>());
      break;
    case types::csirs:
      c.set(other.c.get<csirs_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cfra_s::res_c_");
  }

  return *this;
}
cfra_s::res_c_::ssb_s_& cfra_s::res_c_::set_ssb()
{
  set(types::ssb);
  return c.get<ssb_s_>();
}
cfra_s::res_c_::csirs_s_& cfra_s::res_c_::set_csirs()
{
  set(types::csirs);
  return c.get<csirs_s_>();
}
void cfra_s::res_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ssb:
      j.write_fieldname("ssb");
      j.start_obj();
      j.start_array("ssb-ResourceList");
      for (const auto& e1 : c.get<ssb_s_>().ssb_res_list) {
        e1.to_json(j);
      }
      j.end_array();
      j.write_int("ra-ssb-OccasionMaskIndex", c.get<ssb_s_>().ra_ssb_occasion_mask_idx);
      j.end_obj();
      break;
    case types::csirs:
      j.write_fieldname("csirs");
      j.start_obj();
      j.start_array("csirs-ResourceList");
      for (const auto& e1 : c.get<csirs_s_>().csirs_res_list) {
        e1.to_json(j);
      }
      j.end_array();
      j.write_int("rsrp-ThresholdCSI-RS", c.get<csirs_s_>().rsrp_thres_csi_rs);
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "cfra_s::res_c_");
  }
  j.end_obj();
}
SRSASN_CODE cfra_s::res_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ssb:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ssb_s_>().ssb_res_list, 1, 64));
      HANDLE_CODE(pack_integer(bref, c.get<ssb_s_>().ra_ssb_occasion_mask_idx, (uint8_t)0u, (uint8_t)15u));
      break;
    case types::csirs:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<csirs_s_>().csirs_res_list, 1, 96));
      HANDLE_CODE(pack_integer(bref, c.get<csirs_s_>().rsrp_thres_csi_rs, (uint8_t)0u, (uint8_t)127u));
      break;
    default:
      log_invalid_choice_id(type_, "cfra_s::res_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cfra_s::res_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ssb:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ssb_s_>().ssb_res_list, bref, 1, 64));
      HANDLE_CODE(unpack_integer(c.get<ssb_s_>().ra_ssb_occasion_mask_idx, bref, (uint8_t)0u, (uint8_t)15u));
      break;
    case types::csirs:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<csirs_s_>().csirs_res_list, bref, 1, 96));
      HANDLE_CODE(unpack_integer(c.get<csirs_s_>().rsrp_thres_csi_rs, bref, (uint8_t)0u, (uint8_t)127u));
      break;
    default:
      log_invalid_choice_id(type_, "cfra_s::res_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cfra_s::res_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb", "csirs"};
  return convert_enum_idx(names, 2, value, "cfra_s::res_c_::types");
}

// CFRA-TwoStep-r16 ::= SEQUENCE
SRSASN_CODE cfra_two_step_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(occasions_two_step_ra_r16_present, 1));
  HANDLE_CODE(bref.pack(msg_a_trans_max_r16_present, 1));

  if (occasions_two_step_ra_r16_present) {
    HANDLE_CODE(occasions_two_step_ra_r16.rach_cfg_generic_two_step_ra_r16.pack(bref));
    HANDLE_CODE(occasions_two_step_ra_r16.ssb_per_rach_occasion_two_step_ra_r16.pack(bref));
  }
  HANDLE_CODE(msg_a_cfra_pusch_r16.pack(bref));
  if (msg_a_trans_max_r16_present) {
    HANDLE_CODE(msg_a_trans_max_r16.pack(bref));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, res_two_step_r16.ssb_res_list, 1, 64));
  HANDLE_CODE(pack_integer(bref, res_two_step_r16.ra_ssb_occasion_mask_idx, (uint8_t)0u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cfra_two_step_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(occasions_two_step_ra_r16_present, 1));
  HANDLE_CODE(bref.unpack(msg_a_trans_max_r16_present, 1));

  if (occasions_two_step_ra_r16_present) {
    HANDLE_CODE(occasions_two_step_ra_r16.rach_cfg_generic_two_step_ra_r16.unpack(bref));
    HANDLE_CODE(occasions_two_step_ra_r16.ssb_per_rach_occasion_two_step_ra_r16.unpack(bref));
  }
  HANDLE_CODE(msg_a_cfra_pusch_r16.unpack(bref));
  if (msg_a_trans_max_r16_present) {
    HANDLE_CODE(msg_a_trans_max_r16.unpack(bref));
  }
  HANDLE_CODE(unpack_dyn_seq_of(res_two_step_r16.ssb_res_list, bref, 1, 64));
  HANDLE_CODE(unpack_integer(res_two_step_r16.ra_ssb_occasion_mask_idx, bref, (uint8_t)0u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
void cfra_two_step_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (occasions_two_step_ra_r16_present) {
    j.write_fieldname("occasionsTwoStepRA-r16");
    j.start_obj();
    j.write_fieldname("rach-ConfigGenericTwoStepRA-r16");
    occasions_two_step_ra_r16.rach_cfg_generic_two_step_ra_r16.to_json(j);
    j.write_str("ssb-PerRACH-OccasionTwoStepRA-r16",
                occasions_two_step_ra_r16.ssb_per_rach_occasion_two_step_ra_r16.to_string());
    j.end_obj();
  }
  j.write_fieldname("msgA-CFRA-PUSCH-r16");
  msg_a_cfra_pusch_r16.to_json(j);
  if (msg_a_trans_max_r16_present) {
    j.write_str("msgA-TransMax-r16", msg_a_trans_max_r16.to_string());
  }
  j.write_fieldname("resourcesTwoStep-r16");
  j.start_obj();
  j.start_array("ssb-ResourceList");
  for (const auto& e1 : res_two_step_r16.ssb_res_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_int("ra-ssb-OccasionMaskIndex", res_two_step_r16.ra_ssb_occasion_mask_idx);
  j.end_obj();
  j.end_obj();
}

const char*
cfra_two_step_r16_s::occasions_two_step_ra_r16_s_::ssb_per_rach_occasion_two_step_ra_r16_opts::to_string() const
{
  static const char* names[] = {"oneEighth", "oneFourth", "oneHalf", "one", "two", "four", "eight", "sixteen"};
  return convert_enum_idx(
      names, 8, value, "cfra_two_step_r16_s::occasions_two_step_ra_r16_s_::ssb_per_rach_occasion_two_step_ra_r16_e_");
}
float cfra_two_step_r16_s::occasions_two_step_ra_r16_s_::ssb_per_rach_occasion_two_step_ra_r16_opts::to_number() const
{
  static const float numbers[] = {0.125, 0.25, 0.5, 1.0, 2.0, 4.0, 8.0, 6.0};
  return map_enum_number(
      numbers, 8, value, "cfra_two_step_r16_s::occasions_two_step_ra_r16_s_::ssb_per_rach_occasion_two_step_ra_r16_e_");
}
const char*
cfra_two_step_r16_s::occasions_two_step_ra_r16_s_::ssb_per_rach_occasion_two_step_ra_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"1/8", "1/4", "1/2", "1", "2", "4", "8", "6"};
  return convert_enum_idx(
      number_strs,
      8,
      value,
      "cfra_two_step_r16_s::occasions_two_step_ra_r16_s_::ssb_per_rach_occasion_two_step_ra_r16_e_");
}

const char* cfra_two_step_r16_s::msg_a_trans_max_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n6", "n8", "n10", "n20", "n50", "n100", "n200"};
  return convert_enum_idx(names, 10, value, "cfra_two_step_r16_s::msg_a_trans_max_r16_e_");
}
uint8_t cfra_two_step_r16_s::msg_a_trans_max_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6, 8, 10, 20, 50, 100, 200};
  return map_enum_number(numbers, 10, value, "cfra_two_step_r16_s::msg_a_trans_max_r16_e_");
}

// CG-SDT-ConfigLCH-Restriction-r17 ::= SEQUENCE
SRSASN_CODE cg_sdt_cfg_lch_restrict_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cfg_grant_type1_allowed_r17_present, 1));
  HANDLE_CODE(bref.pack(allowed_cg_list_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, lc_ch_id_r17, (uint8_t)1u, (uint8_t)32u));
  if (allowed_cg_list_r17_present) {
    HANDLE_CODE(pack_dyn_seq_of(bref, allowed_cg_list_r17, 0, 31, integer_packer<uint8_t>(0, 31)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_sdt_cfg_lch_restrict_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(cfg_grant_type1_allowed_r17_present, 1));
  HANDLE_CODE(bref.unpack(allowed_cg_list_r17_present, 1));

  HANDLE_CODE(unpack_integer(lc_ch_id_r17, bref, (uint8_t)1u, (uint8_t)32u));
  if (allowed_cg_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(allowed_cg_list_r17, bref, 0, 31, integer_packer<uint8_t>(0, 31)));
  }

  return SRSASN_SUCCESS;
}
void cg_sdt_cfg_lch_restrict_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("logicalChannelIdentity-r17", lc_ch_id_r17);
  if (cfg_grant_type1_allowed_r17_present) {
    j.write_str("configuredGrantType1Allowed-r17", "true");
  }
  if (allowed_cg_list_r17_present) {
    j.start_array("allowedCG-List-r17");
    for (const auto& e1 : allowed_cg_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

const char* csi_associated_report_cfg_info_s::res_for_ch_c_::types_opts::to_string() const
{
  static const char* names[] = {"nzp-CSI-RS", "csi-SSB-ResourceSet"};
  return convert_enum_idx(names, 2, value, "csi_associated_report_cfg_info_s::res_for_ch_c_::types");
}

const char* csi_associated_report_cfg_info_s::res_for_ch2_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"nzp-CSI-RS2-r17", "csi-SSB-ResourceSet2-r17"};
  return convert_enum_idx(names, 2, value, "csi_associated_report_cfg_info_s::res_for_ch2_r17_c_::types");
}

const char* csi_im_res_s::csi_im_res_elem_pattern_c_::types_opts::to_string() const
{
  static const char* names[] = {"pattern0", "pattern1"};
  return convert_enum_idx(names, 2, value, "csi_im_res_s::csi_im_res_elem_pattern_c_::types");
}
uint8_t csi_im_res_s::csi_im_res_elem_pattern_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1};
  return map_enum_number(numbers, 2, value, "csi_im_res_s::csi_im_res_elem_pattern_c_::types");
}

const char* csi_report_periodicity_and_offset_c::types_opts::to_string() const
{
  static const char* names[] = {
      "slots4", "slots5", "slots8", "slots10", "slots16", "slots20", "slots40", "slots80", "slots160", "slots320"};
  return convert_enum_idx(names, 10, value, "csi_report_periodicity_and_offset_c::types");
}
uint16_t csi_report_periodicity_and_offset_c::types_opts::to_number() const
{
  static const uint16_t numbers[] = {4, 5, 8, 10, 16, 20, 40, 80, 160, 320};
  return map_enum_number(numbers, 10, value, "csi_report_periodicity_and_offset_c::types");
}

const char* codebook_cfg_s::codebook_type_c_::type1_s_::sub_type_c_::type_i_single_panel_s_::nr_of_ant_ports_c_::
    more_than_two_s_::n1_n2_c_::types_opts::to_string() const
{
  static const char* names[] = {"two-one-TypeI-SinglePanel-Restriction",
                                "two-two-TypeI-SinglePanel-Restriction",
                                "four-one-TypeI-SinglePanel-Restriction",
                                "three-two-TypeI-SinglePanel-Restriction",
                                "six-one-TypeI-SinglePanel-Restriction",
                                "four-two-TypeI-SinglePanel-Restriction",
                                "eight-one-TypeI-SinglePanel-Restriction",
                                "four-three-TypeI-SinglePanel-Restriction",
                                "six-two-TypeI-SinglePanel-Restriction",
                                "twelve-one-TypeI-SinglePanel-Restriction",
                                "four-four-TypeI-SinglePanel-Restriction",
                                "eight-two-TypeI-SinglePanel-Restriction",
                                "sixteen-one-TypeI-SinglePanel-Restriction"};
  return convert_enum_idx(names,
                          13,
                          value,
                          "codebook_cfg_s::codebook_type_c_::type1_s_::sub_type_c_::type_i_single_panel_s_::nr_of_ant_"
                          "ports_c_::more_than_two_s_::n1_n2_c_::types");
}

const char* codebook_cfg_s::codebook_type_c_::type1_s_::sub_type_c_::type_i_single_panel_s_::nr_of_ant_ports_c_::
    types_opts::to_string() const
{
  static const char* names[] = {"two", "moreThanTwo"};
  return convert_enum_idx(
      names,
      2,
      value,
      "codebook_cfg_s::codebook_type_c_::type1_s_::sub_type_c_::type_i_single_panel_s_::nr_of_ant_ports_c_::types");
}
uint8_t codebook_cfg_s::codebook_type_c_::type1_s_::sub_type_c_::type_i_single_panel_s_::nr_of_ant_ports_c_::
    types_opts::to_number() const
{
  static const uint8_t numbers[] = {2};
  return map_enum_number(
      numbers,
      1,
      value,
      "codebook_cfg_s::codebook_type_c_::type1_s_::sub_type_c_::type_i_single_panel_s_::nr_of_ant_ports_c_::types");
}

const char*
codebook_cfg_s::codebook_type_c_::type1_s_::sub_type_c_::type_i_multi_panel_s_::ng_n1_n2_c_::types_opts::to_string()
    const
{
  static const char* names[] = {"two-two-one-TypeI-MultiPanel-Restriction",
                                "two-four-one-TypeI-MultiPanel-Restriction",
                                "four-two-one-TypeI-MultiPanel-Restriction",
                                "two-two-two-TypeI-MultiPanel-Restriction",
                                "two-eight-one-TypeI-MultiPanel-Restriction",
                                "four-four-one-TypeI-MultiPanel-Restriction",
                                "two-four-two-TypeI-MultiPanel-Restriction",
                                "four-two-two-TypeI-MultiPanel-Restriction"};
  return convert_enum_idx(
      names,
      8,
      value,
      "codebook_cfg_s::codebook_type_c_::type1_s_::sub_type_c_::type_i_multi_panel_s_::ng_n1_n2_c_::types");
}

const char* codebook_cfg_s::codebook_type_c_::type1_s_::sub_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"typeI-SinglePanel", "typeI-MultiPanel"};
  return convert_enum_idx(names, 2, value, "codebook_cfg_s::codebook_type_c_::type1_s_::sub_type_c_::types");
}

const char* codebook_cfg_s::codebook_type_c_::type2_s_::sub_type_c_::type_ii_s_::n1_n2_codebook_subset_restrict_c_::
    types_opts::to_string() const
{
  static const char* names[] = {"two-one",
                                "two-two",
                                "four-one",
                                "three-two",
                                "six-one",
                                "four-two",
                                "eight-one",
                                "four-three",
                                "six-two",
                                "twelve-one",
                                "four-four",
                                "eight-two",
                                "sixteen-one"};
  return convert_enum_idx(
      names,
      13,
      value,
      "codebook_cfg_s::codebook_type_c_::type2_s_::sub_type_c_::type_ii_s_::n1_n2_codebook_subset_restrict_c_::types");
}

const char* codebook_cfg_s::codebook_type_c_::type2_s_::sub_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"typeII", "typeII-PortSelection"};
  return convert_enum_idx(names, 2, value, "codebook_cfg_s::codebook_type_c_::type2_s_::sub_type_c_::types");
}

const char* codebook_cfg_s::codebook_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"type1", "type2"};
  return convert_enum_idx(names, 2, value, "codebook_cfg_s::codebook_type_c_::types");
}
uint8_t codebook_cfg_s::codebook_type_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "codebook_cfg_s::codebook_type_c_::types");
}

const char* codebook_cfg_r16_s::codebook_type_c_::type2_s_::sub_type_c_::type_ii_r16_s_::
    n1_n2_codebook_subset_restrict_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"two-one",
                                "two-two",
                                "four-one",
                                "three-two",
                                "six-one",
                                "four-two",
                                "eight-one",
                                "four-three",
                                "six-two",
                                "twelve-one",
                                "four-four",
                                "eight-two",
                                "sixteen-one"};
  return convert_enum_idx(names,
                          13,
                          value,
                          "codebook_cfg_r16_s::codebook_type_c_::type2_s_::sub_type_c_::type_ii_r16_s_::n1_n2_codebook_"
                          "subset_restrict_r16_c_::types");
}

const char* codebook_cfg_r16_s::codebook_type_c_::type2_s_::sub_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"typeII-r16", "typeII-PortSelection-r16"};
  return convert_enum_idx(names, 2, value, "codebook_cfg_r16_s::codebook_type_c_::type2_s_::sub_type_c_::types");
}

const char* codebook_cfg_r16_s::codebook_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"type2"};
  return convert_enum_idx(names, 1, value, "codebook_cfg_r16_s::codebook_type_c_::types");
}
uint8_t codebook_cfg_r16_s::codebook_type_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {2};
  return map_enum_number(numbers, 1, value, "codebook_cfg_r16_s::codebook_type_c_::types");
}

const char* codebook_cfg_r17_s::codebook_type_c_::type1_s_::type_i_single_panel_group1_r17_s_::nr_of_ant_ports_c_::
    more_than_two_s_::n1_n2_c_::types_opts::to_string() const
{
  static const char* names[] = {"two-one-TypeI-SinglePanel-Restriction1-r17",
                                "two-two-TypeI-SinglePanel-Restriction1-r17",
                                "four-one-TypeI-SinglePanel-Restriction1-r17",
                                "three-two-TypeI-SinglePanel-Restriction1-r17",
                                "six-one-TypeI-SinglePanel-Restriction1-r17",
                                "four-two-TypeI-SinglePanel-Restriction1-r17",
                                "eight-one-TypeI-SinglePanel-Restriction1-r17",
                                "four-three-TypeI-SinglePanel-Restriction1-r17",
                                "six-two-TypeI-SinglePanel-Restriction1-r17",
                                "twelve-one-TypeI-SinglePanel-Restriction1-r17",
                                "four-four-TypeI-SinglePanel-Restriction1-r17",
                                "eight-two-TypeI-SinglePanel-Restriction1-r17",
                                "sixteen-one-TypeI-SinglePanel-Restriction1-r17"};
  return convert_enum_idx(names,
                          13,
                          value,
                          "codebook_cfg_r17_s::codebook_type_c_::type1_s_::type_i_single_panel_group1_r17_s_::nr_of_"
                          "ant_ports_c_::more_than_two_s_::n1_n2_c_::types");
}

const char* codebook_cfg_r17_s::codebook_type_c_::type1_s_::type_i_single_panel_group1_r17_s_::nr_of_ant_ports_c_::
    types_opts::to_string() const
{
  static const char* names[] = {"two", "moreThanTwo"};
  return convert_enum_idx(
      names,
      2,
      value,
      "codebook_cfg_r17_s::codebook_type_c_::type1_s_::type_i_single_panel_group1_r17_s_::nr_of_ant_ports_c_::types");
}
uint8_t codebook_cfg_r17_s::codebook_type_c_::type1_s_::type_i_single_panel_group1_r17_s_::nr_of_ant_ports_c_::
    types_opts::to_number() const
{
  static const uint8_t numbers[] = {2};
  return map_enum_number(
      numbers,
      1,
      value,
      "codebook_cfg_r17_s::codebook_type_c_::type1_s_::type_i_single_panel_group1_r17_s_::nr_of_ant_ports_c_::types");
}

const char* codebook_cfg_r17_s::codebook_type_c_::type1_s_::type_i_single_panel_group2_r17_s_::nr_of_ant_ports_c_::
    more_than_two_s_::n1_n2_c_::types_opts::to_string() const
{
  static const char* names[] = {"two-one-TypeI-SinglePanel-Restriction2-r17",
                                "two-two-TypeI-SinglePanel-Restriction2-r17",
                                "four-one-TypeI-SinglePanel-Restriction2-r17",
                                "three-two-TypeI-SinglePanel-Restriction2-r17",
                                "six-one-TypeI-SinglePanel-Restriction2-r17",
                                "four-two-TypeI-SinglePanel-Restriction2-r17",
                                "eight-one-TypeI-SinglePanel-Restriction2-r17",
                                "four-three-TypeI-SinglePanel-Restriction2-r17",
                                "six-two-TypeI-SinglePanel-Restriction2-r17",
                                "twelve-one-TypeI-SinglePanel-Restriction2-r17",
                                "four-four-TypeI-SinglePanel-Restriction2-r17",
                                "eight-two-TypeI-SinglePanel-Restriction2-r17",
                                "sixteen-one-TypeI-SinglePanel-Restriction2-r17"};
  return convert_enum_idx(names,
                          13,
                          value,
                          "codebook_cfg_r17_s::codebook_type_c_::type1_s_::type_i_single_panel_group2_r17_s_::nr_of_"
                          "ant_ports_c_::more_than_two_s_::n1_n2_c_::types");
}

const char* codebook_cfg_r17_s::codebook_type_c_::type1_s_::type_i_single_panel_group2_r17_s_::nr_of_ant_ports_c_::
    types_opts::to_string() const
{
  static const char* names[] = {"two", "moreThanTwo"};
  return convert_enum_idx(
      names,
      2,
      value,
      "codebook_cfg_r17_s::codebook_type_c_::type1_s_::type_i_single_panel_group2_r17_s_::nr_of_ant_ports_c_::types");
}
uint8_t codebook_cfg_r17_s::codebook_type_c_::type1_s_::type_i_single_panel_group2_r17_s_::nr_of_ant_ports_c_::
    types_opts::to_number() const
{
  static const uint8_t numbers[] = {2};
  return map_enum_number(
      numbers,
      1,
      value,
      "codebook_cfg_r17_s::codebook_type_c_::type1_s_::type_i_single_panel_group2_r17_s_::nr_of_ant_ports_c_::types");
}

const char* codebook_cfg_r17_s::codebook_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"type1", "type2"};
  return convert_enum_idx(names, 2, value, "codebook_cfg_r17_s::codebook_type_c_::types");
}
uint8_t codebook_cfg_r17_s::codebook_type_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "codebook_cfg_r17_s::codebook_type_c_::types");
}

const char* codebook_cfg_v1730_s::codebook_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"type1"};
  return convert_enum_idx(names, 1, value, "codebook_cfg_v1730_s::codebook_type_c_::types");
}
uint8_t codebook_cfg_v1730_s::codebook_type_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "codebook_cfg_v1730_s::codebook_type_c_::types");
}

const char* port_idx_for8_ranks_c::types_opts::to_string() const
{
  static const char* names[] = {"portIndex8", "portIndex4", "portIndex2", "portIndex1"};
  return convert_enum_idx(names, 4, value, "port_idx_for8_ranks_c::types");
}
uint8_t port_idx_for8_ranks_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 4, 2, 1};
  return map_enum_number(numbers, 4, value, "port_idx_for8_ranks_c::types");
}

const char* csi_report_cfg_s::report_cfg_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"periodic", "semiPersistentOnPUCCH", "semiPersistentOnPUSCH", "aperiodic"};
  return convert_enum_idx(names, 4, value, "csi_report_cfg_s::report_cfg_type_c_::types");
}

const char* csi_report_cfg_s::report_quant_c_::types_opts::to_string() const
{
  static const char* names[] = {"none",
                                "cri-RI-PMI-CQI",
                                "cri-RI-i1",
                                "cri-RI-i1-CQI",
                                "cri-RI-CQI",
                                "cri-RSRP",
                                "ssb-Index-RSRP",
                                "cri-RI-LI-PMI-CQI"};
  return convert_enum_idx(names, 8, value, "csi_report_cfg_s::report_quant_c_::types");
}

const char* csi_report_cfg_s::report_freq_cfg_s_::csi_report_band_c_::types_opts::to_string() const
{
  static const char* names[] = {"subbands3",
                                "subbands4",
                                "subbands5",
                                "subbands6",
                                "subbands7",
                                "subbands8",
                                "subbands9",
                                "subbands10",
                                "subbands11",
                                "subbands12",
                                "subbands13",
                                "subbands14",
                                "subbands15",
                                "subbands16",
                                "subbands17",
                                "subbands18",
                                "subbands19-v1530"};
  return convert_enum_idx(names, 17, value, "csi_report_cfg_s::report_freq_cfg_s_::csi_report_band_c_::types");
}
uint8_t csi_report_cfg_s::report_freq_cfg_s_::csi_report_band_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19};
  return map_enum_number(numbers, 17, value, "csi_report_cfg_s::report_freq_cfg_s_::csi_report_band_c_::types");
}

const char* csi_report_cfg_s::group_based_beam_report_c_::types_opts::to_string() const
{
  static const char* names[] = {"enabled", "disabled"};
  return convert_enum_idx(names, 2, value, "csi_report_cfg_s::group_based_beam_report_c_::types");
}

const char* csi_report_cfg_s::report_quant_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"cri-SINR-r16", "ssb-Index-SINR-r16"};
  return convert_enum_idx(names, 2, value, "csi_report_cfg_s::report_quant_r16_c_::types");
}

const char* csi_report_cfg_s::report_quant_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {
      "cri-RSRP-Index-r17", "ssb-Index-RSRP-Index-r17", "cri-SINR-Index-r17", "ssb-Index-SINR-Index-r17"};
  return convert_enum_idx(names, 4, value, "csi_report_cfg_s::report_quant_r17_c_::types");
}

const char* csi_res_cfg_s::csi_rs_res_set_list_c_::types_opts::to_string() const
{
  static const char* names[] = {"nzp-CSI-RS-SSB", "csi-IM-ResourceSetList"};
  return convert_enum_idx(names, 2, value, "csi_res_cfg_s::csi_rs_res_set_list_c_::types");
}

const char* dl_prs_qcl_info_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"ssb-r17", "dl-PRS-r17"};
  return convert_enum_idx(names, 2, value, "dl_prs_qcl_info_r17_c::types");
}

// FrequencyInfoDL ::= SEQUENCE
SRSASN_CODE freq_info_dl_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(absolute_freq_ssb_present, 1));

  if (absolute_freq_ssb_present) {
    HANDLE_CODE(pack_integer(bref, absolute_freq_ssb, (uint32_t)0u, (uint32_t)3279165u));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, freq_band_list, 1, 8, integer_packer<uint16_t>(1, 1024)));
  HANDLE_CODE(pack_integer(bref, absolute_freq_point_a, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(pack_dyn_seq_of(bref, scs_specific_carrier_list, 1, 5));

  return SRSASN_SUCCESS;
}
SRSASN_CODE freq_info_dl_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(absolute_freq_ssb_present, 1));

  if (absolute_freq_ssb_present) {
    HANDLE_CODE(unpack_integer(absolute_freq_ssb, bref, (uint32_t)0u, (uint32_t)3279165u));
  }
  HANDLE_CODE(unpack_dyn_seq_of(freq_band_list, bref, 1, 8, integer_packer<uint16_t>(1, 1024)));
  HANDLE_CODE(unpack_integer(absolute_freq_point_a, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(unpack_dyn_seq_of(scs_specific_carrier_list, bref, 1, 5));

  return SRSASN_SUCCESS;
}
void freq_info_dl_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (absolute_freq_ssb_present) {
    j.write_int("absoluteFrequencySSB", absolute_freq_ssb);
  }
  j.start_array("frequencyBandList");
  for (const auto& e1 : freq_band_list) {
    j.write_int(e1);
  }
  j.end_array();
  j.write_int("absoluteFrequencyPointA", absolute_freq_point_a);
  j.start_array("scs-SpecificCarrierList");
  for (const auto& e1 : scs_specific_carrier_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// FrequencyInfoUL ::= SEQUENCE
SRSASN_CODE freq_info_ul_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(freq_band_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(absolute_freq_point_a_present, 1));
  HANDLE_CODE(bref.pack(add_spec_emission_present, 1));
  HANDLE_CODE(bref.pack(p_max_present, 1));
  HANDLE_CODE(bref.pack(freq_shift7p5khz_present, 1));

  if (freq_band_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, freq_band_list, 1, 8, integer_packer<uint16_t>(1, 1024)));
  }
  if (absolute_freq_point_a_present) {
    HANDLE_CODE(pack_integer(bref, absolute_freq_point_a, (uint32_t)0u, (uint32_t)3279165u));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, scs_specific_carrier_list, 1, 5));
  if (add_spec_emission_present) {
    HANDLE_CODE(pack_integer(bref, add_spec_emission, (uint8_t)0u, (uint8_t)7u));
  }
  if (p_max_present) {
    HANDLE_CODE(pack_integer(bref, p_max, (int8_t)-30, (int8_t)33));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE freq_info_ul_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool freq_band_list_present;
  HANDLE_CODE(bref.unpack(freq_band_list_present, 1));
  HANDLE_CODE(bref.unpack(absolute_freq_point_a_present, 1));
  HANDLE_CODE(bref.unpack(add_spec_emission_present, 1));
  HANDLE_CODE(bref.unpack(p_max_present, 1));
  HANDLE_CODE(bref.unpack(freq_shift7p5khz_present, 1));

  if (freq_band_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(freq_band_list, bref, 1, 8, integer_packer<uint16_t>(1, 1024)));
  }
  if (absolute_freq_point_a_present) {
    HANDLE_CODE(unpack_integer(absolute_freq_point_a, bref, (uint32_t)0u, (uint32_t)3279165u));
  }
  HANDLE_CODE(unpack_dyn_seq_of(scs_specific_carrier_list, bref, 1, 5));
  if (add_spec_emission_present) {
    HANDLE_CODE(unpack_integer(add_spec_emission, bref, (uint8_t)0u, (uint8_t)7u));
  }
  if (p_max_present) {
    HANDLE_CODE(unpack_integer(p_max, bref, (int8_t)-30, (int8_t)33));
  }

  return SRSASN_SUCCESS;
}
void freq_info_ul_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (freq_band_list.size() > 0) {
    j.start_array("frequencyBandList");
    for (const auto& e1 : freq_band_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (absolute_freq_point_a_present) {
    j.write_int("absoluteFrequencyPointA", absolute_freq_point_a);
  }
  j.start_array("scs-SpecificCarrierList");
  for (const auto& e1 : scs_specific_carrier_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (add_spec_emission_present) {
    j.write_int("additionalSpectrumEmission", add_spec_emission);
  }
  if (p_max_present) {
    j.write_int("p-Max", p_max);
  }
  if (freq_shift7p5khz_present) {
    j.write_str("frequencyShift7p5khz", "true");
  }
  j.end_obj();
}

const char* nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs15_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"n4-r17",
                                "n5-r17",
                                "n8-r17",
                                "n10-r17",
                                "n16-r17",
                                "n20-r17",
                                "n32-r17",
                                "n40-r17",
                                "n64-r17",
                                "n80-r17",
                                "n160-r17",
                                "n320-r17",
                                "n640-r17",
                                "n1280-r17",
                                "n2560-r17",
                                "n5120-r17",
                                "n10240-r17"};
  return convert_enum_idx(names, 17, value, "nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs15_r17_c_::types");
}
uint16_t nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs15_r17_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {4, 5, 8, 10, 16, 20, 32, 40, 64, 80, 160, 320, 640, 1280, 2560, 5120, 10240};
  return map_enum_number(
      numbers, 17, value, "nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs15_r17_c_::types");
}

const char* nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs30_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"n8-r17",
                                "n10-r17",
                                "n16-r17",
                                "n20-r17",
                                "n32-r17",
                                "n40-r17",
                                "n64-r17",
                                "n80-r17",
                                "n128-r17",
                                "n160-r17",
                                "n320-r17",
                                "n640-r17",
                                "n1280-r17",
                                "n2560-r17",
                                "n5120-r17",
                                "n10240-r17",
                                "n20480-r17"};
  return convert_enum_idx(names, 17, value, "nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs30_r17_c_::types");
}
uint16_t nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs30_r17_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {8, 10, 16, 20, 32, 40, 64, 80, 128, 160, 320, 640, 1280, 2560, 5120, 10240, 20480};
  return map_enum_number(
      numbers, 17, value, "nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs30_r17_c_::types");
}

const char* nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs60_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"n16-r17",
                                "n20-r17",
                                "n32-r17",
                                "n40-r17",
                                "n64-r17",
                                "n80-r17",
                                "n128-r17",
                                "n160-r17",
                                "n256-r17",
                                "n320-r17",
                                "n640-r17",
                                "n1280-r17",
                                "n2560-r17",
                                "n5120-r17",
                                "n10240-r17",
                                "n20480-r17",
                                "n40960-r17"};
  return convert_enum_idx(names, 17, value, "nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs60_r17_c_::types");
}
uint16_t nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs60_r17_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {
      16, 20, 32, 40, 64, 80, 128, 160, 256, 320, 640, 1280, 2560, 5120, 10240, 20480, 40960};
  return map_enum_number(
      numbers, 17, value, "nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs60_r17_c_::types");
}

const char* nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs120_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"n32-r17",
                                "n40-r17",
                                "n64-r17",
                                "n80-r17",
                                "n128-r17",
                                "n160-r17",
                                "n256-r17",
                                "n320-r17",
                                "n512-r17",
                                "n640-r17",
                                "n1280-r17",
                                "n2560-r17",
                                "n5120-r17",
                                "n10240-r17",
                                "n20480-r17",
                                "n40960-r17",
                                "n81920-r17"};
  return convert_enum_idx(
      names, 17, value, "nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs120_r17_c_::types");
}
uint32_t nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs120_r17_c_::types_opts::to_number() const
{
  static const uint32_t numbers[] = {
      32, 40, 64, 80, 128, 160, 256, 320, 512, 640, 1280, 2560, 5120, 10240, 20480, 40960, 81920};
  return map_enum_number(
      numbers, 17, value, "nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::scs120_r17_c_::types");
}

const char* nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::types_opts::to_string() const
{
  static const char* names[] = {"scs15-r17", "scs30-r17", "scs60-r17", "scs120-r17"};
  return convert_enum_idx(names, 4, value, "nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::types");
}
uint8_t nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {15, 30, 60, 120};
  return map_enum_number(numbers, 4, value, "nr_dl_prs_periodicity_and_res_set_slot_offset_r17_c::types");
}

const char* nr_dl_prs_res_r17_s::dl_prs_comb_size_n_and_re_offset_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"n2-r17", "n4-r17", "n6-r17", "n12-r17"};
  return convert_enum_idx(names, 4, value, "nr_dl_prs_res_r17_s::dl_prs_comb_size_n_and_re_offset_r17_c_::types");
}
uint8_t nr_dl_prs_res_r17_s::dl_prs_comb_size_n_and_re_offset_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 6, 12};
  return map_enum_number(numbers, 4, value, "nr_dl_prs_res_r17_s::dl_prs_comb_size_n_and_re_offset_r17_c_::types");
}

// DownlinkConfigCommon ::= SEQUENCE
SRSASN_CODE dl_cfg_common_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(freq_info_dl_present, 1));
  HANDLE_CODE(bref.pack(init_dl_bwp_present, 1));

  if (freq_info_dl_present) {
    HANDLE_CODE(freq_info_dl.pack(bref));
  }
  if (init_dl_bwp_present) {
    HANDLE_CODE(init_dl_bwp.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= init_dl_bwp_red_cap_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(init_dl_bwp_red_cap_r17.is_present(), 1));
      if (init_dl_bwp_red_cap_r17.is_present()) {
        HANDLE_CODE(init_dl_bwp_red_cap_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_cfg_common_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(freq_info_dl_present, 1));
  HANDLE_CODE(bref.unpack(init_dl_bwp_present, 1));

  if (freq_info_dl_present) {
    HANDLE_CODE(freq_info_dl.unpack(bref));
  }
  if (init_dl_bwp_present) {
    HANDLE_CODE(init_dl_bwp.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(init_dl_bwp_red_cap_r17, bref);
      if (init_dl_bwp_red_cap_r17.is_present()) {
        HANDLE_CODE(init_dl_bwp_red_cap_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void dl_cfg_common_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (freq_info_dl_present) {
    j.write_fieldname("frequencyInfoDL");
    freq_info_dl.to_json(j);
  }
  if (init_dl_bwp_present) {
    j.write_fieldname("initialDownlinkBWP");
    init_dl_bwp.to_json(j);
  }
  if (ext) {
    if (init_dl_bwp_red_cap_r17.is_present()) {
      j.write_fieldname("initialDownlinkBWP-RedCap-r17");
      init_dl_bwp_red_cap_r17->to_json(j);
    }
  }
  j.end_obj();
}

// HighSpeedConfig-v1700 ::= SEQUENCE
SRSASN_CODE high_speed_cfg_v1700_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(high_speed_meas_ca_scell_r17_present, 1));
  HANDLE_CODE(bref.pack(high_speed_meas_inter_freq_r17_present, 1));
  HANDLE_CODE(bref.pack(high_speed_demod_ca_scell_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE high_speed_cfg_v1700_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(high_speed_meas_ca_scell_r17_present, 1));
  HANDLE_CODE(bref.unpack(high_speed_meas_inter_freq_r17_present, 1));
  HANDLE_CODE(bref.unpack(high_speed_demod_ca_scell_r17_present, 1));

  return SRSASN_SUCCESS;
}
void high_speed_cfg_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (high_speed_meas_ca_scell_r17_present) {
    j.write_str("highSpeedMeasCA-Scell-r17", "true");
  }
  if (high_speed_meas_inter_freq_r17_present) {
    j.write_str("highSpeedMeasInterFreq-r17", "true");
  }
  if (high_speed_demod_ca_scell_r17_present) {
    j.write_str("highSpeedDemodCA-Scell-r17", "true");
  }
  j.end_obj();
}

const char* srs_carrier_switching_s::srs_tpc_pdcch_group_c_::types_opts::to_string() const
{
  static const char* names[] = {"typeA", "typeB"};
  return convert_enum_idx(names, 2, value, "srs_carrier_switching_s::srs_tpc_pdcch_group_c_::types");
}

const char* ssb_mtc_add_pci_r17_s::ssb_positions_in_burst_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"shortBitmap", "mediumBitmap", "longBitmap"};
  return convert_enum_idx(names, 3, value, "ssb_mtc_add_pci_r17_s::ssb_positions_in_burst_r17_c_::types");
}

// T-ReassemblyExt-r17 ::= ENUMERATED
const char* t_reassembly_ext_r17_opts::to_string() const
{
  static const char* names[] = {"ms210", "ms220", "ms340", "ms350", "ms550", "ms1100", "ms1650", "ms2200"};
  return convert_enum_idx(names, 8, value, "t_reassembly_ext_r17_e");
}
uint16_t t_reassembly_ext_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {210, 220, 340, 350, 550, 1100, 1650, 2200};
  return map_enum_number(numbers, 8, value, "t_reassembly_ext_r17_e");
}

// T-StatusProhibit-v1610 ::= ENUMERATED
const char* t_status_prohibit_v1610_opts::to_string() const
{
  static const char* names[] = {"ms1", "ms2", "ms3", "ms4", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "t_status_prohibit_v1610_e");
}
uint8_t t_status_prohibit_v1610_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4};
  return map_enum_number(numbers, 4, value, "t_status_prohibit_v1610_e");
}

const char* tdd_ul_dl_slot_cfg_s::symbols_c_::types_opts::to_string() const
{
  static const char* names[] = {"allDownlink", "allUplink", "explicit"};
  return convert_enum_idx(names, 3, value, "tdd_ul_dl_slot_cfg_s::symbols_c_::types");
}

const char* tdd_ul_dl_slot_cfg_iab_mt_r16_s::symbols_iab_mt_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"allDownlink-r16", "allUplink-r16", "explicit-r16", "explicit-IAB-MT-r16"};
  return convert_enum_idx(names, 4, value, "tdd_ul_dl_slot_cfg_iab_mt_r16_s::symbols_iab_mt_r16_c_::types");
}

// UplinkConfigCommon ::= SEQUENCE
SRSASN_CODE ul_cfg_common_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(freq_info_ul_present, 1));
  HANDLE_CODE(bref.pack(init_ul_bwp_present, 1));

  if (freq_info_ul_present) {
    HANDLE_CODE(freq_info_ul.pack(bref));
  }
  if (init_ul_bwp_present) {
    HANDLE_CODE(init_ul_bwp.pack(bref));
  }
  HANDLE_CODE(dummy.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_cfg_common_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(freq_info_ul_present, 1));
  HANDLE_CODE(bref.unpack(init_ul_bwp_present, 1));

  if (freq_info_ul_present) {
    HANDLE_CODE(freq_info_ul.unpack(bref));
  }
  if (init_ul_bwp_present) {
    HANDLE_CODE(init_ul_bwp.unpack(bref));
  }
  HANDLE_CODE(dummy.unpack(bref));

  return SRSASN_SUCCESS;
}
void ul_cfg_common_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (freq_info_ul_present) {
    j.write_fieldname("frequencyInfoUL");
    freq_info_ul.to_json(j);
  }
  if (init_ul_bwp_present) {
    j.write_fieldname("initialUplinkBWP");
    init_ul_bwp.to_json(j);
  }
  j.write_str("dummy", dummy.to_string());
  j.end_obj();
}

// UplinkConfigCommon-v1700 ::= SEQUENCE
SRSASN_CODE ul_cfg_common_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(init_ul_bwp_red_cap_r17_present, 1));

  if (init_ul_bwp_red_cap_r17_present) {
    HANDLE_CODE(init_ul_bwp_red_cap_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_cfg_common_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(init_ul_bwp_red_cap_r17_present, 1));

  if (init_ul_bwp_red_cap_r17_present) {
    HANDLE_CODE(init_ul_bwp_red_cap_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ul_cfg_common_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (init_ul_bwp_red_cap_r17_present) {
    j.write_fieldname("initialUplinkBWP-RedCap-r17");
    init_ul_bwp_red_cap_r17.to_json(j);
  }
  j.end_obj();
}

const char* ch_access_cfg_r16_s::energy_detection_cfg_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"maxEnergyDetectionThreshold-r16", "energyDetectionThresholdOffset-r16"};
  return convert_enum_idx(names, 2, value, "ch_access_cfg_r16_s::energy_detection_cfg_r16_c_::types");
}

const char* cross_carrier_sched_cfg_s::sched_cell_info_c_::types_opts::to_string() const
{
  static const char* names[] = {"own", "other"};
  return convert_enum_idx(names, 2, value, "cross_carrier_sched_cfg_s::sched_cell_info_c_::types");
}

// DAPS-UplinkPowerConfig-r16 ::= SEQUENCE
SRSASN_CODE daps_ul_pwr_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, p_daps_source_r16, (int8_t)-30, (int8_t)33));
  HANDLE_CODE(pack_integer(bref, p_daps_target_r16, (int8_t)-30, (int8_t)33));
  HANDLE_CODE(ul_pwr_sharing_daps_mode_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE daps_ul_pwr_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(p_daps_source_r16, bref, (int8_t)-30, (int8_t)33));
  HANDLE_CODE(unpack_integer(p_daps_target_r16, bref, (int8_t)-30, (int8_t)33));
  HANDLE_CODE(ul_pwr_sharing_daps_mode_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void daps_ul_pwr_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("p-DAPS-Source-r16", p_daps_source_r16);
  j.write_int("p-DAPS-Target-r16", p_daps_target_r16);
  j.write_str("uplinkPowerSharingDAPS-Mode-r16", ul_pwr_sharing_daps_mode_r16.to_string());
  j.end_obj();
}

const char* daps_ul_pwr_cfg_r16_s::ul_pwr_sharing_daps_mode_r16_opts::to_string() const
{
  static const char* names[] = {"semi-static-mode1", "semi-static-mode2", "dynamic"};
  return convert_enum_idx(names, 3, value, "daps_ul_pwr_cfg_r16_s::ul_pwr_sharing_daps_mode_r16_e_");
}
uint8_t daps_ul_pwr_cfg_r16_s::ul_pwr_sharing_daps_mode_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "daps_ul_pwr_cfg_r16_s::ul_pwr_sharing_daps_mode_r16_e_");
}

// DL-AM-RLC-v1610 ::= SEQUENCE
SRSASN_CODE dl_am_rlc_v1610_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(t_status_prohibit_v1610_present, 1));

  if (t_status_prohibit_v1610_present) {
    HANDLE_CODE(t_status_prohibit_v1610.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_am_rlc_v1610_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(t_status_prohibit_v1610_present, 1));

  if (t_status_prohibit_v1610_present) {
    HANDLE_CODE(t_status_prohibit_v1610.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void dl_am_rlc_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (t_status_prohibit_v1610_present) {
    j.write_str("t-StatusProhibit-v1610", t_status_prohibit_v1610.to_string());
  }
  j.end_obj();
}

// DL-AM-RLC-v1700 ::= SEQUENCE
SRSASN_CODE dl_am_rlc_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(t_reassembly_ext_r17_present, 1));

  if (t_reassembly_ext_r17_present) {
    HANDLE_CODE(t_reassembly_ext_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_am_rlc_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(t_reassembly_ext_r17_present, 1));

  if (t_reassembly_ext_r17_present) {
    HANDLE_CODE(t_reassembly_ext_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void dl_am_rlc_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (t_reassembly_ext_r17_present) {
    j.write_str("t-ReassemblyExt-r17", t_reassembly_ext_r17.to_string());
  }
  j.end_obj();
}

// DL-UM-RLC-v1700 ::= SEQUENCE
SRSASN_CODE dl_um_rlc_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(t_reassembly_ext_r17_present, 1));

  if (t_reassembly_ext_r17_present) {
    HANDLE_CODE(t_reassembly_ext_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_um_rlc_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(t_reassembly_ext_r17_present, 1));

  if (t_reassembly_ext_r17_present) {
    HANDLE_CODE(t_reassembly_ext_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void dl_um_rlc_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (t_reassembly_ext_r17_present) {
    j.write_str("t-ReassemblyExt-r17", t_reassembly_ext_r17.to_string());
  }
  j.end_obj();
}

// MPE-Config-FR2-r16 ::= SEQUENCE
SRSASN_CODE mpe_cfg_fr2_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(mpe_prohibit_timer_r16.pack(bref));
  HANDLE_CODE(mpe_thres_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mpe_cfg_fr2_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(mpe_prohibit_timer_r16.unpack(bref));
  HANDLE_CODE(mpe_thres_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void mpe_cfg_fr2_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("mpe-ProhibitTimer-r16", mpe_prohibit_timer_r16.to_string());
  j.write_str("mpe-Threshold-r16", mpe_thres_r16.to_string());
  j.end_obj();
}

const char* mpe_cfg_fr2_r16_s::mpe_prohibit_timer_r16_opts::to_string() const
{
  static const char* names[] = {"sf0", "sf10", "sf20", "sf50", "sf100", "sf200", "sf500", "sf1000"};
  return convert_enum_idx(names, 8, value, "mpe_cfg_fr2_r16_s::mpe_prohibit_timer_r16_e_");
}
uint16_t mpe_cfg_fr2_r16_s::mpe_prohibit_timer_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 10, 20, 50, 100, 200, 500, 1000};
  return map_enum_number(numbers, 8, value, "mpe_cfg_fr2_r16_s::mpe_prohibit_timer_r16_e_");
}

const char* mpe_cfg_fr2_r16_s::mpe_thres_r16_opts::to_string() const
{
  static const char* names[] = {"dB3", "dB6", "dB9", "dB12"};
  return convert_enum_idx(names, 4, value, "mpe_cfg_fr2_r16_s::mpe_thres_r16_e_");
}
uint8_t mpe_cfg_fr2_r16_s::mpe_thres_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {3, 6, 9, 12};
  return map_enum_number(numbers, 4, value, "mpe_cfg_fr2_r16_s::mpe_thres_r16_e_");
}

// MPE-Config-FR2-r17 ::= SEQUENCE
SRSASN_CODE mpe_cfg_fr2_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(mpe_prohibit_timer_r17.pack(bref));
  HANDLE_CODE(mpe_thres_r17.pack(bref));
  HANDLE_CODE(pack_integer(bref, nof_n_r17, (uint8_t)1u, (uint8_t)4u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mpe_cfg_fr2_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(mpe_prohibit_timer_r17.unpack(bref));
  HANDLE_CODE(mpe_thres_r17.unpack(bref));
  HANDLE_CODE(unpack_integer(nof_n_r17, bref, (uint8_t)1u, (uint8_t)4u));

  return SRSASN_SUCCESS;
}
void mpe_cfg_fr2_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("mpe-ProhibitTimer-r17", mpe_prohibit_timer_r17.to_string());
  j.write_str("mpe-Threshold-r17", mpe_thres_r17.to_string());
  j.write_int("numberOfN-r17", nof_n_r17);
  j.end_obj();
}

const char* mpe_cfg_fr2_r17_s::mpe_prohibit_timer_r17_opts::to_string() const
{
  static const char* names[] = {"sf0", "sf10", "sf20", "sf50", "sf100", "sf200", "sf500", "sf1000"};
  return convert_enum_idx(names, 8, value, "mpe_cfg_fr2_r17_s::mpe_prohibit_timer_r17_e_");
}
uint16_t mpe_cfg_fr2_r17_s::mpe_prohibit_timer_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 10, 20, 50, 100, 200, 500, 1000};
  return map_enum_number(numbers, 8, value, "mpe_cfg_fr2_r17_s::mpe_prohibit_timer_r17_e_");
}

const char* mpe_cfg_fr2_r17_s::mpe_thres_r17_opts::to_string() const
{
  static const char* names[] = {"dB3", "dB6", "dB9", "dB12"};
  return convert_enum_idx(names, 4, value, "mpe_cfg_fr2_r17_s::mpe_thres_r17_e_");
}
uint8_t mpe_cfg_fr2_r17_s::mpe_thres_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {3, 6, 9, 12};
  return map_enum_number(numbers, 4, value, "mpe_cfg_fr2_r17_s::mpe_thres_r17_e_");
}

const char* pdsch_harq_ack_codebook_list_r16_item_opts::to_string() const
{
  static const char* names[] = {"semiStatic", "dynamic"};
  return convert_enum_idx(names, 2, value, "pdsch_harq_ack_codebook_list_r16_item_e_");
}

// RACH-ConfigDedicated ::= SEQUENCE
SRSASN_CODE rach_cfg_ded_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cfra_present, 1));
  HANDLE_CODE(bref.pack(ra_prioritization_present, 1));

  if (cfra_present) {
    HANDLE_CODE(cfra.pack(bref));
  }
  if (ra_prioritization_present) {
    HANDLE_CODE(ra_prioritization.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ra_prioritization_two_step_r16.is_present();
    group_flags[0] |= cfra_two_step_r16.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ra_prioritization_two_step_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(cfra_two_step_r16.is_present(), 1));
      if (ra_prioritization_two_step_r16.is_present()) {
        HANDLE_CODE(ra_prioritization_two_step_r16->pack(bref));
      }
      if (cfra_two_step_r16.is_present()) {
        HANDLE_CODE(cfra_two_step_r16->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rach_cfg_ded_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(cfra_present, 1));
  HANDLE_CODE(bref.unpack(ra_prioritization_present, 1));

  if (cfra_present) {
    HANDLE_CODE(cfra.unpack(bref));
  }
  if (ra_prioritization_present) {
    HANDLE_CODE(ra_prioritization.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(ra_prioritization_two_step_r16, bref);
      unpack_presence_flag(cfra_two_step_r16, bref);
      if (ra_prioritization_two_step_r16.is_present()) {
        HANDLE_CODE(ra_prioritization_two_step_r16->unpack(bref));
      }
      if (cfra_two_step_r16.is_present()) {
        HANDLE_CODE(cfra_two_step_r16->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void rach_cfg_ded_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (cfra_present) {
    j.write_fieldname("cfra");
    cfra.to_json(j);
  }
  if (ra_prioritization_present) {
    j.write_fieldname("ra-Prioritization");
    ra_prioritization.to_json(j);
  }
  if (ext) {
    if (ra_prioritization_two_step_r16.is_present()) {
      j.write_fieldname("ra-PrioritizationTwoStep-r16");
      ra_prioritization_two_step_r16->to_json(j);
    }
    if (cfra_two_step_r16.is_present()) {
      j.write_fieldname("cfra-TwoStep-r16");
      cfra_two_step_r16->to_json(j);
    }
  }
  j.end_obj();
}

// SL-PathSwitchConfig-r17 ::= SEQUENCE
SRSASN_CODE sl_path_switch_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(target_relay_ue_id_r17.pack(bref));
  HANDLE_CODE(t420_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_path_switch_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(target_relay_ue_id_r17.unpack(bref));
  HANDLE_CODE(t420_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_path_switch_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("targetRelayUE-Identity-r17", target_relay_ue_id_r17.to_string());
  j.write_str("t420-r17", t420_r17.to_string());
  j.end_obj();
}

const char* sl_path_switch_cfg_r17_s::t420_r17_opts::to_string() const
{
  static const char* names[] = {"ms50", "ms100", "ms150", "ms200", "ms500", "ms1000", "ms2000", "ms10000"};
  return convert_enum_idx(names, 8, value, "sl_path_switch_cfg_r17_s::t420_r17_e_");
}
uint16_t sl_path_switch_cfg_r17_s::t420_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {50, 100, 150, 200, 500, 1000, 2000, 10000};
  return map_enum_number(numbers, 8, value, "sl_path_switch_cfg_r17_s::t420_r17_e_");
}

// SchedulingRequestToAddMod ::= SEQUENCE
SRSASN_CODE sched_request_to_add_mod_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sr_prohibit_timer_present, 1));

  HANDLE_CODE(pack_integer(bref, sched_request_id, (uint8_t)0u, (uint8_t)7u));
  if (sr_prohibit_timer_present) {
    HANDLE_CODE(sr_prohibit_timer.pack(bref));
  }
  HANDLE_CODE(sr_trans_max.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sched_request_to_add_mod_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sr_prohibit_timer_present, 1));

  HANDLE_CODE(unpack_integer(sched_request_id, bref, (uint8_t)0u, (uint8_t)7u));
  if (sr_prohibit_timer_present) {
    HANDLE_CODE(sr_prohibit_timer.unpack(bref));
  }
  HANDLE_CODE(sr_trans_max.unpack(bref));

  return SRSASN_SUCCESS;
}
void sched_request_to_add_mod_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("schedulingRequestId", sched_request_id);
  if (sr_prohibit_timer_present) {
    j.write_str("sr-ProhibitTimer", sr_prohibit_timer.to_string());
  }
  j.write_str("sr-TransMax", sr_trans_max.to_string());
  j.end_obj();
}

const char* sched_request_to_add_mod_s::sr_prohibit_timer_opts::to_string() const
{
  static const char* names[] = {"ms1", "ms2", "ms4", "ms8", "ms16", "ms32", "ms64", "ms128"};
  return convert_enum_idx(names, 8, value, "sched_request_to_add_mod_s::sr_prohibit_timer_e_");
}
uint8_t sched_request_to_add_mod_s::sr_prohibit_timer_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16, 32, 64, 128};
  return map_enum_number(numbers, 8, value, "sched_request_to_add_mod_s::sr_prohibit_timer_e_");
}

const char* sched_request_to_add_mod_s::sr_trans_max_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n16", "n32", "n64", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "sched_request_to_add_mod_s::sr_trans_max_e_");
}
uint8_t sched_request_to_add_mod_s::sr_trans_max_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 16, 32, 64};
  return map_enum_number(numbers, 5, value, "sched_request_to_add_mod_s::sr_trans_max_e_");
}

// SchedulingRequestToAddModExt-v1700 ::= SEQUENCE
SRSASN_CODE sched_request_to_add_mod_ext_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sr_prohibit_timer_v1700_present, 1));

  if (sr_prohibit_timer_v1700_present) {
    HANDLE_CODE(sr_prohibit_timer_v1700.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sched_request_to_add_mod_ext_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sr_prohibit_timer_v1700_present, 1));

  if (sr_prohibit_timer_v1700_present) {
    HANDLE_CODE(sr_prohibit_timer_v1700.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sched_request_to_add_mod_ext_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sr_prohibit_timer_v1700_present) {
    j.write_str("sr-ProhibitTimer-v1700", sr_prohibit_timer_v1700.to_string());
  }
  j.end_obj();
}

const char* sched_request_to_add_mod_ext_v1700_s::sr_prohibit_timer_v1700_opts::to_string() const
{
  static const char* names[] = {"ms192",
                                "ms256",
                                "ms320",
                                "ms384",
                                "ms448",
                                "ms512",
                                "ms576",
                                "ms640",
                                "ms1082",
                                "spare7",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "sched_request_to_add_mod_ext_v1700_s::sr_prohibit_timer_v1700_e_");
}
uint16_t sched_request_to_add_mod_ext_v1700_s::sr_prohibit_timer_v1700_opts::to_number() const
{
  static const uint16_t numbers[] = {192, 256, 320, 384, 448, 512, 576, 640, 1082};
  return map_enum_number(numbers, 9, value, "sched_request_to_add_mod_ext_v1700_s::sr_prohibit_timer_v1700_e_");
}

// ServingCellConfigCommon ::= SEQUENCE
SRSASN_CODE serving_cell_cfg_common_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(pci_present, 1));
  HANDLE_CODE(bref.pack(dl_cfg_common_present, 1));
  HANDLE_CODE(bref.pack(ul_cfg_common_present, 1));
  HANDLE_CODE(bref.pack(supplementary_ul_cfg_present, 1));
  HANDLE_CODE(bref.pack(n_timing_advance_offset_present, 1));
  HANDLE_CODE(bref.pack(ssb_positions_in_burst_present, 1));
  HANDLE_CODE(bref.pack(ssb_periodicity_serving_cell_present, 1));
  HANDLE_CODE(bref.pack(lte_crs_to_match_around_present, 1));
  HANDLE_CODE(bref.pack(rate_match_pattern_to_add_mod_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(rate_match_pattern_to_release_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(ssb_subcarrier_spacing_present, 1));
  HANDLE_CODE(bref.pack(tdd_ul_dl_cfg_common_present, 1));

  if (pci_present) {
    HANDLE_CODE(pack_integer(bref, pci, (uint16_t)0u, (uint16_t)1007u));
  }
  if (dl_cfg_common_present) {
    HANDLE_CODE(dl_cfg_common.pack(bref));
  }
  if (ul_cfg_common_present) {
    HANDLE_CODE(ul_cfg_common.pack(bref));
  }
  if (supplementary_ul_cfg_present) {
    HANDLE_CODE(supplementary_ul_cfg.pack(bref));
  }
  if (n_timing_advance_offset_present) {
    HANDLE_CODE(n_timing_advance_offset.pack(bref));
  }
  if (ssb_positions_in_burst_present) {
    HANDLE_CODE(ssb_positions_in_burst.pack(bref));
  }
  if (ssb_periodicity_serving_cell_present) {
    HANDLE_CODE(ssb_periodicity_serving_cell.pack(bref));
  }
  HANDLE_CODE(dmrs_type_a_position.pack(bref));
  if (lte_crs_to_match_around_present) {
    HANDLE_CODE(lte_crs_to_match_around.pack(bref));
  }
  if (rate_match_pattern_to_add_mod_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, rate_match_pattern_to_add_mod_list, 1, 4));
  }
  if (rate_match_pattern_to_release_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, rate_match_pattern_to_release_list, 1, 4, integer_packer<uint8_t>(0, 3)));
  }
  if (ssb_subcarrier_spacing_present) {
    HANDLE_CODE(ssb_subcarrier_spacing.pack(bref));
  }
  if (tdd_ul_dl_cfg_common_present) {
    HANDLE_CODE(tdd_ul_dl_cfg_common.pack(bref));
  }
  HANDLE_CODE(pack_integer(bref, ss_pbch_block_pwr, (int8_t)-60, (int8_t)50));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ch_access_mode_r16.is_present();
    group_flags[0] |= discovery_burst_win_len_r16_present;
    group_flags[0] |= ssb_position_qcl_r16_present;
    group_flags[0] |= high_speed_cfg_r16.is_present();
    group_flags[1] |= high_speed_cfg_v1700.is_present();
    group_flags[1] |= ch_access_mode2_r17_present;
    group_flags[1] |= discovery_burst_win_len_r17_present;
    group_flags[1] |= ssb_position_qcl_r17_present;
    group_flags[1] |= high_speed_cfg_fr2_r17.is_present();
    group_flags[1] |= ul_cfg_common_v1700.is_present();
    group_flags[1] |= ntn_cfg_r17.is_present();
    group_flags[2] |= feature_priorities_r17.is_present();
    group_flags[3] |= ra_ch_access_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ch_access_mode_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(discovery_burst_win_len_r16_present, 1));
      HANDLE_CODE(bref.pack(ssb_position_qcl_r16_present, 1));
      HANDLE_CODE(bref.pack(high_speed_cfg_r16.is_present(), 1));
      if (ch_access_mode_r16.is_present()) {
        HANDLE_CODE(ch_access_mode_r16->pack(bref));
      }
      if (discovery_burst_win_len_r16_present) {
        HANDLE_CODE(discovery_burst_win_len_r16.pack(bref));
      }
      if (ssb_position_qcl_r16_present) {
        HANDLE_CODE(ssb_position_qcl_r16.pack(bref));
      }
      if (high_speed_cfg_r16.is_present()) {
        HANDLE_CODE(high_speed_cfg_r16->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(high_speed_cfg_v1700.is_present(), 1));
      HANDLE_CODE(bref.pack(ch_access_mode2_r17_present, 1));
      HANDLE_CODE(bref.pack(discovery_burst_win_len_r17_present, 1));
      HANDLE_CODE(bref.pack(ssb_position_qcl_r17_present, 1));
      HANDLE_CODE(bref.pack(high_speed_cfg_fr2_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(ul_cfg_common_v1700.is_present(), 1));
      HANDLE_CODE(bref.pack(ntn_cfg_r17.is_present(), 1));
      if (high_speed_cfg_v1700.is_present()) {
        HANDLE_CODE(high_speed_cfg_v1700->pack(bref));
      }
      if (discovery_burst_win_len_r17_present) {
        HANDLE_CODE(discovery_burst_win_len_r17.pack(bref));
      }
      if (ssb_position_qcl_r17_present) {
        HANDLE_CODE(ssb_position_qcl_r17.pack(bref));
      }
      if (high_speed_cfg_fr2_r17.is_present()) {
        HANDLE_CODE(high_speed_cfg_fr2_r17->pack(bref));
      }
      if (ul_cfg_common_v1700.is_present()) {
        HANDLE_CODE(ul_cfg_common_v1700->pack(bref));
      }
      if (ntn_cfg_r17.is_present()) {
        HANDLE_CODE(ntn_cfg_r17->pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(feature_priorities_r17.is_present(), 1));
      if (feature_priorities_r17.is_present()) {
        HANDLE_CODE(bref.pack(feature_priorities_r17->red_cap_prio_r17_present, 1));
        HANDLE_CODE(bref.pack(feature_priorities_r17->slicing_prio_r17_present, 1));
        HANDLE_CODE(bref.pack(feature_priorities_r17->msg3_repeats_prio_r17_present, 1));
        HANDLE_CODE(bref.pack(feature_priorities_r17->sdt_prio_r17_present, 1));
        if (feature_priorities_r17->red_cap_prio_r17_present) {
          HANDLE_CODE(pack_integer(bref, feature_priorities_r17->red_cap_prio_r17, (uint8_t)0u, (uint8_t)7u));
        }
        if (feature_priorities_r17->slicing_prio_r17_present) {
          HANDLE_CODE(pack_integer(bref, feature_priorities_r17->slicing_prio_r17, (uint8_t)0u, (uint8_t)7u));
        }
        if (feature_priorities_r17->msg3_repeats_prio_r17_present) {
          HANDLE_CODE(pack_integer(bref, feature_priorities_r17->msg3_repeats_prio_r17, (uint8_t)0u, (uint8_t)7u));
        }
        if (feature_priorities_r17->sdt_prio_r17_present) {
          HANDLE_CODE(pack_integer(bref, feature_priorities_r17->sdt_prio_r17, (uint8_t)0u, (uint8_t)7u));
        }
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ra_ch_access_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE serving_cell_cfg_common_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(pci_present, 1));
  HANDLE_CODE(bref.unpack(dl_cfg_common_present, 1));
  HANDLE_CODE(bref.unpack(ul_cfg_common_present, 1));
  HANDLE_CODE(bref.unpack(supplementary_ul_cfg_present, 1));
  HANDLE_CODE(bref.unpack(n_timing_advance_offset_present, 1));
  HANDLE_CODE(bref.unpack(ssb_positions_in_burst_present, 1));
  HANDLE_CODE(bref.unpack(ssb_periodicity_serving_cell_present, 1));
  HANDLE_CODE(bref.unpack(lte_crs_to_match_around_present, 1));
  bool rate_match_pattern_to_add_mod_list_present;
  HANDLE_CODE(bref.unpack(rate_match_pattern_to_add_mod_list_present, 1));
  bool rate_match_pattern_to_release_list_present;
  HANDLE_CODE(bref.unpack(rate_match_pattern_to_release_list_present, 1));
  HANDLE_CODE(bref.unpack(ssb_subcarrier_spacing_present, 1));
  HANDLE_CODE(bref.unpack(tdd_ul_dl_cfg_common_present, 1));

  if (pci_present) {
    HANDLE_CODE(unpack_integer(pci, bref, (uint16_t)0u, (uint16_t)1007u));
  }
  if (dl_cfg_common_present) {
    HANDLE_CODE(dl_cfg_common.unpack(bref));
  }
  if (ul_cfg_common_present) {
    HANDLE_CODE(ul_cfg_common.unpack(bref));
  }
  if (supplementary_ul_cfg_present) {
    HANDLE_CODE(supplementary_ul_cfg.unpack(bref));
  }
  if (n_timing_advance_offset_present) {
    HANDLE_CODE(n_timing_advance_offset.unpack(bref));
  }
  if (ssb_positions_in_burst_present) {
    HANDLE_CODE(ssb_positions_in_burst.unpack(bref));
  }
  if (ssb_periodicity_serving_cell_present) {
    HANDLE_CODE(ssb_periodicity_serving_cell.unpack(bref));
  }
  HANDLE_CODE(dmrs_type_a_position.unpack(bref));
  if (lte_crs_to_match_around_present) {
    HANDLE_CODE(lte_crs_to_match_around.unpack(bref));
  }
  if (rate_match_pattern_to_add_mod_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(rate_match_pattern_to_add_mod_list, bref, 1, 4));
  }
  if (rate_match_pattern_to_release_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(rate_match_pattern_to_release_list, bref, 1, 4, integer_packer<uint8_t>(0, 3)));
  }
  if (ssb_subcarrier_spacing_present) {
    HANDLE_CODE(ssb_subcarrier_spacing.unpack(bref));
  }
  if (tdd_ul_dl_cfg_common_present) {
    HANDLE_CODE(tdd_ul_dl_cfg_common.unpack(bref));
  }
  HANDLE_CODE(unpack_integer(ss_pbch_block_pwr, bref, (int8_t)-60, (int8_t)50));

  if (ext) {
    ext_groups_unpacker_guard group_flags(4);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(ch_access_mode_r16, bref);
      HANDLE_CODE(bref.unpack(discovery_burst_win_len_r16_present, 1));
      HANDLE_CODE(bref.unpack(ssb_position_qcl_r16_present, 1));
      unpack_presence_flag(high_speed_cfg_r16, bref);
      if (ch_access_mode_r16.is_present()) {
        HANDLE_CODE(ch_access_mode_r16->unpack(bref));
      }
      if (discovery_burst_win_len_r16_present) {
        HANDLE_CODE(discovery_burst_win_len_r16.unpack(bref));
      }
      if (ssb_position_qcl_r16_present) {
        HANDLE_CODE(ssb_position_qcl_r16.unpack(bref));
      }
      if (high_speed_cfg_r16.is_present()) {
        HANDLE_CODE(high_speed_cfg_r16->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(high_speed_cfg_v1700, bref);
      HANDLE_CODE(bref.unpack(ch_access_mode2_r17_present, 1));
      HANDLE_CODE(bref.unpack(discovery_burst_win_len_r17_present, 1));
      HANDLE_CODE(bref.unpack(ssb_position_qcl_r17_present, 1));
      unpack_presence_flag(high_speed_cfg_fr2_r17, bref);
      unpack_presence_flag(ul_cfg_common_v1700, bref);
      unpack_presence_flag(ntn_cfg_r17, bref);
      if (high_speed_cfg_v1700.is_present()) {
        HANDLE_CODE(high_speed_cfg_v1700->unpack(bref));
      }
      if (discovery_burst_win_len_r17_present) {
        HANDLE_CODE(discovery_burst_win_len_r17.unpack(bref));
      }
      if (ssb_position_qcl_r17_present) {
        HANDLE_CODE(ssb_position_qcl_r17.unpack(bref));
      }
      if (high_speed_cfg_fr2_r17.is_present()) {
        HANDLE_CODE(high_speed_cfg_fr2_r17->unpack(bref));
      }
      if (ul_cfg_common_v1700.is_present()) {
        HANDLE_CODE(ul_cfg_common_v1700->unpack(bref));
      }
      if (ntn_cfg_r17.is_present()) {
        HANDLE_CODE(ntn_cfg_r17->unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(feature_priorities_r17, bref);
      if (feature_priorities_r17.is_present()) {
        HANDLE_CODE(bref.unpack(feature_priorities_r17->red_cap_prio_r17_present, 1));
        HANDLE_CODE(bref.unpack(feature_priorities_r17->slicing_prio_r17_present, 1));
        HANDLE_CODE(bref.unpack(feature_priorities_r17->msg3_repeats_prio_r17_present, 1));
        HANDLE_CODE(bref.unpack(feature_priorities_r17->sdt_prio_r17_present, 1));
        if (feature_priorities_r17->red_cap_prio_r17_present) {
          HANDLE_CODE(unpack_integer(feature_priorities_r17->red_cap_prio_r17, bref, (uint8_t)0u, (uint8_t)7u));
        }
        if (feature_priorities_r17->slicing_prio_r17_present) {
          HANDLE_CODE(unpack_integer(feature_priorities_r17->slicing_prio_r17, bref, (uint8_t)0u, (uint8_t)7u));
        }
        if (feature_priorities_r17->msg3_repeats_prio_r17_present) {
          HANDLE_CODE(unpack_integer(feature_priorities_r17->msg3_repeats_prio_r17, bref, (uint8_t)0u, (uint8_t)7u));
        }
        if (feature_priorities_r17->sdt_prio_r17_present) {
          HANDLE_CODE(unpack_integer(feature_priorities_r17->sdt_prio_r17, bref, (uint8_t)0u, (uint8_t)7u));
        }
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ra_ch_access_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void serving_cell_cfg_common_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pci_present) {
    j.write_int("physCellId", pci);
  }
  if (dl_cfg_common_present) {
    j.write_fieldname("downlinkConfigCommon");
    dl_cfg_common.to_json(j);
  }
  if (ul_cfg_common_present) {
    j.write_fieldname("uplinkConfigCommon");
    ul_cfg_common.to_json(j);
  }
  if (supplementary_ul_cfg_present) {
    j.write_fieldname("supplementaryUplinkConfig");
    supplementary_ul_cfg.to_json(j);
  }
  if (n_timing_advance_offset_present) {
    j.write_str("n-TimingAdvanceOffset", n_timing_advance_offset.to_string());
  }
  if (ssb_positions_in_burst_present) {
    j.write_fieldname("ssb-PositionsInBurst");
    ssb_positions_in_burst.to_json(j);
  }
  if (ssb_periodicity_serving_cell_present) {
    j.write_str("ssb-periodicityServingCell", ssb_periodicity_serving_cell.to_string());
  }
  j.write_str("dmrs-TypeA-Position", dmrs_type_a_position.to_string());
  if (lte_crs_to_match_around_present) {
    j.write_fieldname("lte-CRS-ToMatchAround");
    lte_crs_to_match_around.to_json(j);
  }
  if (rate_match_pattern_to_add_mod_list.size() > 0) {
    j.start_array("rateMatchPatternToAddModList");
    for (const auto& e1 : rate_match_pattern_to_add_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (rate_match_pattern_to_release_list.size() > 0) {
    j.start_array("rateMatchPatternToReleaseList");
    for (const auto& e1 : rate_match_pattern_to_release_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ssb_subcarrier_spacing_present) {
    j.write_str("ssbSubcarrierSpacing", ssb_subcarrier_spacing.to_string());
  }
  if (tdd_ul_dl_cfg_common_present) {
    j.write_fieldname("tdd-UL-DL-ConfigurationCommon");
    tdd_ul_dl_cfg_common.to_json(j);
  }
  j.write_int("ss-PBCH-BlockPower", ss_pbch_block_pwr);
  if (ext) {
    if (ch_access_mode_r16.is_present()) {
      j.write_fieldname("channelAccessMode-r16");
      ch_access_mode_r16->to_json(j);
    }
    if (discovery_burst_win_len_r16_present) {
      j.write_str("discoveryBurstWindowLength-r16", discovery_burst_win_len_r16.to_string());
    }
    if (ssb_position_qcl_r16_present) {
      j.write_str("ssb-PositionQCL-r16", ssb_position_qcl_r16.to_string());
    }
    if (high_speed_cfg_r16.is_present()) {
      j.write_fieldname("highSpeedConfig-r16");
      high_speed_cfg_r16->to_json(j);
    }
    if (high_speed_cfg_v1700.is_present()) {
      j.write_fieldname("highSpeedConfig-v1700");
      high_speed_cfg_v1700->to_json(j);
    }
    if (ch_access_mode2_r17_present) {
      j.write_str("channelAccessMode2-r17", "enabled");
    }
    if (discovery_burst_win_len_r17_present) {
      j.write_str("discoveryBurstWindowLength-r17", discovery_burst_win_len_r17.to_string());
    }
    if (ssb_position_qcl_r17_present) {
      j.write_str("ssb-PositionQCL-r17", ssb_position_qcl_r17.to_string());
    }
    if (high_speed_cfg_fr2_r17.is_present()) {
      j.write_fieldname("highSpeedConfigFR2-r17");
      high_speed_cfg_fr2_r17->to_json(j);
    }
    if (ul_cfg_common_v1700.is_present()) {
      j.write_fieldname("uplinkConfigCommon-v1700");
      ul_cfg_common_v1700->to_json(j);
    }
    if (ntn_cfg_r17.is_present()) {
      j.write_fieldname("ntn-Config-r17");
      ntn_cfg_r17->to_json(j);
    }
    if (feature_priorities_r17.is_present()) {
      j.write_fieldname("featurePriorities-r17");
      j.start_obj();
      if (feature_priorities_r17->red_cap_prio_r17_present) {
        j.write_int("redCapPriority-r17", feature_priorities_r17->red_cap_prio_r17);
      }
      if (feature_priorities_r17->slicing_prio_r17_present) {
        j.write_int("slicingPriority-r17", feature_priorities_r17->slicing_prio_r17);
      }
      if (feature_priorities_r17->msg3_repeats_prio_r17_present) {
        j.write_int("msg3-Repetitions-Priority-r17", feature_priorities_r17->msg3_repeats_prio_r17);
      }
      if (feature_priorities_r17->sdt_prio_r17_present) {
        j.write_int("sdt-Priority-r17", feature_priorities_r17->sdt_prio_r17);
      }
      j.end_obj();
    }
    if (ra_ch_access_r17_present) {
      j.write_str("ra-ChannelAccess-r17", "enabled");
    }
  }
  j.end_obj();
}

const char* serving_cell_cfg_common_s::n_timing_advance_offset_opts::to_string() const
{
  static const char* names[] = {"n0", "n25600", "n39936"};
  return convert_enum_idx(names, 3, value, "serving_cell_cfg_common_s::n_timing_advance_offset_e_");
}
uint16_t serving_cell_cfg_common_s::n_timing_advance_offset_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 25600, 39936};
  return map_enum_number(numbers, 3, value, "serving_cell_cfg_common_s::n_timing_advance_offset_e_");
}

void serving_cell_cfg_common_s::ssb_positions_in_burst_c_::destroy_()
{
  switch (type_) {
    case types::short_bitmap:
      c.destroy<fixed_bitstring<4>>();
      break;
    case types::medium_bitmap:
      c.destroy<fixed_bitstring<8>>();
      break;
    case types::long_bitmap:
      c.destroy<fixed_bitstring<64>>();
      break;
    default:
      break;
  }
}
void serving_cell_cfg_common_s::ssb_positions_in_burst_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::short_bitmap:
      c.init<fixed_bitstring<4>>();
      break;
    case types::medium_bitmap:
      c.init<fixed_bitstring<8>>();
      break;
    case types::long_bitmap:
      c.init<fixed_bitstring<64>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "serving_cell_cfg_common_s::ssb_positions_in_burst_c_");
  }
}
serving_cell_cfg_common_s::ssb_positions_in_burst_c_::ssb_positions_in_burst_c_(
    const serving_cell_cfg_common_s::ssb_positions_in_burst_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::short_bitmap:
      c.init(other.c.get<fixed_bitstring<4>>());
      break;
    case types::medium_bitmap:
      c.init(other.c.get<fixed_bitstring<8>>());
      break;
    case types::long_bitmap:
      c.init(other.c.get<fixed_bitstring<64>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "serving_cell_cfg_common_s::ssb_positions_in_burst_c_");
  }
}
serving_cell_cfg_common_s::ssb_positions_in_burst_c_& serving_cell_cfg_common_s::ssb_positions_in_burst_c_::operator=(
    const serving_cell_cfg_common_s::ssb_positions_in_burst_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::short_bitmap:
      c.set(other.c.get<fixed_bitstring<4>>());
      break;
    case types::medium_bitmap:
      c.set(other.c.get<fixed_bitstring<8>>());
      break;
    case types::long_bitmap:
      c.set(other.c.get<fixed_bitstring<64>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "serving_cell_cfg_common_s::ssb_positions_in_burst_c_");
  }

  return *this;
}
fixed_bitstring<4>& serving_cell_cfg_common_s::ssb_positions_in_burst_c_::set_short_bitmap()
{
  set(types::short_bitmap);
  return c.get<fixed_bitstring<4>>();
}
fixed_bitstring<8>& serving_cell_cfg_common_s::ssb_positions_in_burst_c_::set_medium_bitmap()
{
  set(types::medium_bitmap);
  return c.get<fixed_bitstring<8>>();
}
fixed_bitstring<64>& serving_cell_cfg_common_s::ssb_positions_in_burst_c_::set_long_bitmap()
{
  set(types::long_bitmap);
  return c.get<fixed_bitstring<64>>();
}
void serving_cell_cfg_common_s::ssb_positions_in_burst_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::short_bitmap:
      j.write_str("shortBitmap", c.get<fixed_bitstring<4>>().to_string());
      break;
    case types::medium_bitmap:
      j.write_str("mediumBitmap", c.get<fixed_bitstring<8>>().to_string());
      break;
    case types::long_bitmap:
      j.write_str("longBitmap", c.get<fixed_bitstring<64>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "serving_cell_cfg_common_s::ssb_positions_in_burst_c_");
  }
  j.end_obj();
}
SRSASN_CODE serving_cell_cfg_common_s::ssb_positions_in_burst_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::short_bitmap:
      HANDLE_CODE(c.get<fixed_bitstring<4>>().pack(bref));
      break;
    case types::medium_bitmap:
      HANDLE_CODE(c.get<fixed_bitstring<8>>().pack(bref));
      break;
    case types::long_bitmap:
      HANDLE_CODE(c.get<fixed_bitstring<64>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "serving_cell_cfg_common_s::ssb_positions_in_burst_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE serving_cell_cfg_common_s::ssb_positions_in_burst_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::short_bitmap:
      HANDLE_CODE(c.get<fixed_bitstring<4>>().unpack(bref));
      break;
    case types::medium_bitmap:
      HANDLE_CODE(c.get<fixed_bitstring<8>>().unpack(bref));
      break;
    case types::long_bitmap:
      HANDLE_CODE(c.get<fixed_bitstring<64>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "serving_cell_cfg_common_s::ssb_positions_in_burst_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* serving_cell_cfg_common_s::ssb_positions_in_burst_c_::types_opts::to_string() const
{
  static const char* names[] = {"shortBitmap", "mediumBitmap", "longBitmap"};
  return convert_enum_idx(names, 3, value, "serving_cell_cfg_common_s::ssb_positions_in_burst_c_::types");
}

const char* serving_cell_cfg_common_s::ssb_periodicity_serving_cell_opts::to_string() const
{
  static const char* names[] = {"ms5", "ms10", "ms20", "ms40", "ms80", "ms160", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "serving_cell_cfg_common_s::ssb_periodicity_serving_cell_e_");
}
uint8_t serving_cell_cfg_common_s::ssb_periodicity_serving_cell_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 10, 20, 40, 80, 160};
  return map_enum_number(numbers, 6, value, "serving_cell_cfg_common_s::ssb_periodicity_serving_cell_e_");
}

const char* serving_cell_cfg_common_s::dmrs_type_a_position_opts::to_string() const
{
  static const char* names[] = {"pos2", "pos3"};
  return convert_enum_idx(names, 2, value, "serving_cell_cfg_common_s::dmrs_type_a_position_e_");
}
uint8_t serving_cell_cfg_common_s::dmrs_type_a_position_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3};
  return map_enum_number(numbers, 2, value, "serving_cell_cfg_common_s::dmrs_type_a_position_e_");
}

void serving_cell_cfg_common_s::ch_access_mode_r16_c_::set(types::options e)
{
  type_ = e;
}
void serving_cell_cfg_common_s::ch_access_mode_r16_c_::set_dyn()
{
  set(types::dyn);
}
semi_static_ch_access_cfg_r16_s& serving_cell_cfg_common_s::ch_access_mode_r16_c_::set_semi_static()
{
  set(types::semi_static);
  return c;
}
void serving_cell_cfg_common_s::ch_access_mode_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::dyn:
      break;
    case types::semi_static:
      j.write_fieldname("semiStatic");
      c.to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "serving_cell_cfg_common_s::ch_access_mode_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE serving_cell_cfg_common_s::ch_access_mode_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::dyn:
      break;
    case types::semi_static:
      HANDLE_CODE(c.pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "serving_cell_cfg_common_s::ch_access_mode_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE serving_cell_cfg_common_s::ch_access_mode_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::dyn:
      break;
    case types::semi_static:
      HANDLE_CODE(c.unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "serving_cell_cfg_common_s::ch_access_mode_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* serving_cell_cfg_common_s::ch_access_mode_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"dynamic", "semiStatic"};
  return convert_enum_idx(names, 2, value, "serving_cell_cfg_common_s::ch_access_mode_r16_c_::types");
}

const char* serving_cell_cfg_common_s::discovery_burst_win_len_r16_opts::to_string() const
{
  static const char* names[] = {"ms0dot5", "ms1", "ms2", "ms3", "ms4", "ms5"};
  return convert_enum_idx(names, 6, value, "serving_cell_cfg_common_s::discovery_burst_win_len_r16_e_");
}
float serving_cell_cfg_common_s::discovery_burst_win_len_r16_opts::to_number() const
{
  static const float numbers[] = {0.5, 1.0, 2.0, 3.0, 4.0, 5.0};
  return map_enum_number(numbers, 6, value, "serving_cell_cfg_common_s::discovery_burst_win_len_r16_e_");
}
const char* serving_cell_cfg_common_s::discovery_burst_win_len_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0.5", "1", "2", "3", "4", "5"};
  return convert_enum_idx(number_strs, 6, value, "serving_cell_cfg_common_s::discovery_burst_win_len_r16_e_");
}

const char* serving_cell_cfg_common_s::discovery_burst_win_len_r17_opts::to_string() const
{
  static const char* names[] = {"ms0dot125", "ms0dot25", "ms0dot5", "ms0dot75", "ms1", "ms1dot25"};
  return convert_enum_idx(names, 6, value, "serving_cell_cfg_common_s::discovery_burst_win_len_r17_e_");
}
float serving_cell_cfg_common_s::discovery_burst_win_len_r17_opts::to_number() const
{
  static const float numbers[] = {0.125, 0.25, 0.5, 0.75, 1.0, 1.25};
  return map_enum_number(numbers, 6, value, "serving_cell_cfg_common_s::discovery_burst_win_len_r17_e_");
}
const char* serving_cell_cfg_common_s::discovery_burst_win_len_r17_opts::to_number_string() const
{
  static const char* number_strs[] = {"0.125", "0.25", "0.5", "0.75", "1", "1.25"};
  return convert_enum_idx(number_strs, 6, value, "serving_cell_cfg_common_s::discovery_burst_win_len_r17_e_");
}

// TAG ::= SEQUENCE
SRSASN_CODE tag_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, tag_id, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(time_align_timer.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE tag_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(tag_id, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(time_align_timer.unpack(bref));

  return SRSASN_SUCCESS;
}
void tag_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("tag-Id", tag_id);
  j.write_str("timeAlignmentTimer", time_align_timer.to_string());
  j.end_obj();
}

// DCP-Config-r16 ::= SEQUENCE
SRSASN_CODE d_cp_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ps_wake_up_r16_present, 1));
  HANDLE_CODE(bref.pack(ps_tx_periodic_l1_rsrp_r16_present, 1));
  HANDLE_CODE(bref.pack(ps_tx_other_periodic_csi_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, ps_rnti_r16, (uint32_t)0u, (uint32_t)65535u));
  HANDLE_CODE(pack_integer(bref, ps_offset_r16, (uint8_t)1u, (uint8_t)120u));
  HANDLE_CODE(pack_integer(bref, size_dci_2_6_r16, (uint8_t)1u, (uint8_t)140u));
  HANDLE_CODE(pack_integer(bref, ps_position_dci_2_6_r16, (uint8_t)0u, (uint8_t)139u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE d_cp_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ps_wake_up_r16_present, 1));
  HANDLE_CODE(bref.unpack(ps_tx_periodic_l1_rsrp_r16_present, 1));
  HANDLE_CODE(bref.unpack(ps_tx_other_periodic_csi_r16_present, 1));

  HANDLE_CODE(unpack_integer(ps_rnti_r16, bref, (uint32_t)0u, (uint32_t)65535u));
  HANDLE_CODE(unpack_integer(ps_offset_r16, bref, (uint8_t)1u, (uint8_t)120u));
  HANDLE_CODE(unpack_integer(size_dci_2_6_r16, bref, (uint8_t)1u, (uint8_t)140u));
  HANDLE_CODE(unpack_integer(ps_position_dci_2_6_r16, bref, (uint8_t)0u, (uint8_t)139u));

  return SRSASN_SUCCESS;
}
void d_cp_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("ps-RNTI-r16", ps_rnti_r16);
  j.write_int("ps-Offset-r16", ps_offset_r16);
  j.write_int("sizeDCI-2-6-r16", size_dci_2_6_r16);
  j.write_int("ps-PositionDCI-2-6-r16", ps_position_dci_2_6_r16);
  if (ps_wake_up_r16_present) {
    j.write_str("ps-WakeUp-r16", "true");
  }
  if (ps_tx_periodic_l1_rsrp_r16_present) {
    j.write_str("ps-TransmitPeriodicL1-RSRP-r16", "true");
  }
  if (ps_tx_other_periodic_csi_r16_present) {
    j.write_str("ps-TransmitOtherPeriodicCSI-r16", "true");
  }
  j.end_obj();
}

// DRX-Config ::= SEQUENCE
SRSASN_CODE drx_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(short_drx_present, 1));

  HANDLE_CODE(drx_on_dur_timer.pack(bref));
  HANDLE_CODE(drx_inactivity_timer.pack(bref));
  HANDLE_CODE(pack_integer(bref, drx_harq_rtt_timer_dl, (uint8_t)0u, (uint8_t)56u));
  HANDLE_CODE(pack_integer(bref, drx_harq_rtt_timer_ul, (uint8_t)0u, (uint8_t)56u));
  HANDLE_CODE(drx_retx_timer_dl.pack(bref));
  HANDLE_CODE(drx_retx_timer_ul.pack(bref));
  HANDLE_CODE(drx_long_cycle_start_offset.pack(bref));
  if (short_drx_present) {
    HANDLE_CODE(short_drx.drx_short_cycle.pack(bref));
    HANDLE_CODE(pack_integer(bref, short_drx.drx_short_cycle_timer, (uint8_t)1u, (uint8_t)16u));
  }
  HANDLE_CODE(pack_integer(bref, drx_slot_offset, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_cfg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(short_drx_present, 1));

  HANDLE_CODE(drx_on_dur_timer.unpack(bref));
  HANDLE_CODE(drx_inactivity_timer.unpack(bref));
  HANDLE_CODE(unpack_integer(drx_harq_rtt_timer_dl, bref, (uint8_t)0u, (uint8_t)56u));
  HANDLE_CODE(unpack_integer(drx_harq_rtt_timer_ul, bref, (uint8_t)0u, (uint8_t)56u));
  HANDLE_CODE(drx_retx_timer_dl.unpack(bref));
  HANDLE_CODE(drx_retx_timer_ul.unpack(bref));
  HANDLE_CODE(drx_long_cycle_start_offset.unpack(bref));
  if (short_drx_present) {
    HANDLE_CODE(short_drx.drx_short_cycle.unpack(bref));
    HANDLE_CODE(unpack_integer(short_drx.drx_short_cycle_timer, bref, (uint8_t)1u, (uint8_t)16u));
  }
  HANDLE_CODE(unpack_integer(drx_slot_offset, bref, (uint8_t)0u, (uint8_t)31u));

  return SRSASN_SUCCESS;
}
void drx_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("drx-onDurationTimer");
  drx_on_dur_timer.to_json(j);
  j.write_str("drx-InactivityTimer", drx_inactivity_timer.to_string());
  j.write_int("drx-HARQ-RTT-TimerDL", drx_harq_rtt_timer_dl);
  j.write_int("drx-HARQ-RTT-TimerUL", drx_harq_rtt_timer_ul);
  j.write_str("drx-RetransmissionTimerDL", drx_retx_timer_dl.to_string());
  j.write_str("drx-RetransmissionTimerUL", drx_retx_timer_ul.to_string());
  j.write_fieldname("drx-LongCycleStartOffset");
  drx_long_cycle_start_offset.to_json(j);
  if (short_drx_present) {
    j.write_fieldname("shortDRX");
    j.start_obj();
    j.write_str("drx-ShortCycle", short_drx.drx_short_cycle.to_string());
    j.write_int("drx-ShortCycleTimer", short_drx.drx_short_cycle_timer);
    j.end_obj();
  }
  j.write_int("drx-SlotOffset", drx_slot_offset);
  j.end_obj();
}

void drx_cfg_s::drx_on_dur_timer_c_::destroy_() {}
void drx_cfg_s::drx_on_dur_timer_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
drx_cfg_s::drx_on_dur_timer_c_::drx_on_dur_timer_c_(const drx_cfg_s::drx_on_dur_timer_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sub_milli_seconds:
      c.init(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.init(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_s::drx_on_dur_timer_c_");
  }
}
drx_cfg_s::drx_on_dur_timer_c_& drx_cfg_s::drx_on_dur_timer_c_::operator=(const drx_cfg_s::drx_on_dur_timer_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sub_milli_seconds:
      c.set(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.set(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_s::drx_on_dur_timer_c_");
  }

  return *this;
}
uint8_t& drx_cfg_s::drx_on_dur_timer_c_::set_sub_milli_seconds()
{
  set(types::sub_milli_seconds);
  return c.get<uint8_t>();
}
drx_cfg_s::drx_on_dur_timer_c_::milli_seconds_e_& drx_cfg_s::drx_on_dur_timer_c_::set_milli_seconds()
{
  set(types::milli_seconds);
  return c.get<milli_seconds_e_>();
}
void drx_cfg_s::drx_on_dur_timer_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sub_milli_seconds:
      j.write_int("subMilliSeconds", c.get<uint8_t>());
      break;
    case types::milli_seconds:
      j.write_str("milliSeconds", c.get<milli_seconds_e_>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_s::drx_on_dur_timer_c_");
  }
  j.end_obj();
}
SRSASN_CODE drx_cfg_s::drx_on_dur_timer_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_s::drx_on_dur_timer_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_cfg_s::drx_on_dur_timer_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_s::drx_on_dur_timer_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* drx_cfg_s::drx_on_dur_timer_c_::milli_seconds_opts::to_string() const
{
  static const char* names[] = {"ms1",    "ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms8",    "ms10",
                                "ms20",   "ms30",   "ms40",   "ms50",   "ms60",   "ms80",   "ms100",  "ms200",
                                "ms300",  "ms400",  "ms500",  "ms600",  "ms800",  "ms1000", "ms1200", "ms1600",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "drx_cfg_s::drx_on_dur_timer_c_::milli_seconds_e_");
}
uint16_t drx_cfg_s::drx_on_dur_timer_c_::milli_seconds_opts::to_number() const
{
  static const uint16_t numbers[] = {1,  2,  3,   4,   5,   6,   8,   10,  20,  30,   40,   50,
                                     60, 80, 100, 200, 300, 400, 500, 600, 800, 1000, 1200, 1600};
  return map_enum_number(numbers, 24, value, "drx_cfg_s::drx_on_dur_timer_c_::milli_seconds_e_");
}

const char* drx_cfg_s::drx_on_dur_timer_c_::types_opts::to_string() const
{
  static const char* names[] = {"subMilliSeconds", "milliSeconds"};
  return convert_enum_idx(names, 2, value, "drx_cfg_s::drx_on_dur_timer_c_::types");
}

const char* drx_cfg_s::drx_inactivity_timer_opts::to_string() const
{
  static const char* names[] = {"ms0",    "ms1",    "ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms8",
                                "ms10",   "ms20",   "ms30",   "ms40",   "ms50",   "ms60",   "ms80",   "ms100",
                                "ms200",  "ms300",  "ms500",  "ms750",  "ms1280", "ms1920", "ms2560", "spare9",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "drx_cfg_s::drx_inactivity_timer_e_");
}
uint16_t drx_cfg_s::drx_inactivity_timer_opts::to_number() const
{
  static const uint16_t numbers[] = {0,  1,  2,  3,   4,   5,   6,   8,   10,   20,   30,  40,
                                     50, 60, 80, 100, 200, 300, 500, 750, 1280, 1920, 2560};
  return map_enum_number(numbers, 23, value, "drx_cfg_s::drx_inactivity_timer_e_");
}

const char* drx_cfg_s::drx_retx_timer_dl_opts::to_string() const
{
  static const char* names[] = {"sl0",    "sl1",     "sl2",     "sl4",     "sl6",     "sl8",     "sl16",    "sl24",
                                "sl33",   "sl40",    "sl64",    "sl80",    "sl96",    "sl112",   "sl128",   "sl160",
                                "sl320",  "spare15", "spare14", "spare13", "spare12", "spare11", "spare10", "spare9",
                                "spare8", "spare7",  "spare6",  "spare5",  "spare4",  "spare3",  "spare2",  "spare1"};
  return convert_enum_idx(names, 32, value, "drx_cfg_s::drx_retx_timer_dl_e_");
}
uint16_t drx_cfg_s::drx_retx_timer_dl_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 1, 2, 4, 6, 8, 16, 24, 33, 40, 64, 80, 96, 112, 128, 160, 320};
  return map_enum_number(numbers, 17, value, "drx_cfg_s::drx_retx_timer_dl_e_");
}

const char* drx_cfg_s::drx_retx_timer_ul_opts::to_string() const
{
  static const char* names[] = {"sl0",    "sl1",     "sl2",     "sl4",     "sl6",     "sl8",     "sl16",    "sl24",
                                "sl33",   "sl40",    "sl64",    "sl80",    "sl96",    "sl112",   "sl128",   "sl160",
                                "sl320",  "spare15", "spare14", "spare13", "spare12", "spare11", "spare10", "spare9",
                                "spare8", "spare7",  "spare6",  "spare5",  "spare4",  "spare3",  "spare2",  "spare1"};
  return convert_enum_idx(names, 32, value, "drx_cfg_s::drx_retx_timer_ul_e_");
}
uint16_t drx_cfg_s::drx_retx_timer_ul_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 1, 2, 4, 6, 8, 16, 24, 33, 40, 64, 80, 96, 112, 128, 160, 320};
  return map_enum_number(numbers, 17, value, "drx_cfg_s::drx_retx_timer_ul_e_");
}

void drx_cfg_s::drx_long_cycle_start_offset_c_::destroy_() {}
void drx_cfg_s::drx_long_cycle_start_offset_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
drx_cfg_s::drx_long_cycle_start_offset_c_::drx_long_cycle_start_offset_c_(
    const drx_cfg_s::drx_long_cycle_start_offset_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ms10:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms32:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms40:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms60:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms64:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms70:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms80:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms128:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms160:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms256:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms320:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms512:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms640:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms1024:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms1280:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms2048:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms2560:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms5120:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms10240:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_s::drx_long_cycle_start_offset_c_");
  }
}
drx_cfg_s::drx_long_cycle_start_offset_c_&
drx_cfg_s::drx_long_cycle_start_offset_c_::operator=(const drx_cfg_s::drx_long_cycle_start_offset_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ms10:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms32:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms40:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms60:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms64:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms70:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms80:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms128:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms160:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms256:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms320:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms512:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms640:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms1024:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms1280:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms2048:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms2560:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms5120:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms10240:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_s::drx_long_cycle_start_offset_c_");
  }

  return *this;
}
uint8_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms10()
{
  set(types::ms10);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms20()
{
  set(types::ms20);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms32()
{
  set(types::ms32);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms40()
{
  set(types::ms40);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms60()
{
  set(types::ms60);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms64()
{
  set(types::ms64);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms70()
{
  set(types::ms70);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms80()
{
  set(types::ms80);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms128()
{
  set(types::ms128);
  return c.get<uint8_t>();
}
uint8_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms160()
{
  set(types::ms160);
  return c.get<uint8_t>();
}
uint16_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms256()
{
  set(types::ms256);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms320()
{
  set(types::ms320);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms512()
{
  set(types::ms512);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms640()
{
  set(types::ms640);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms1024()
{
  set(types::ms1024);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms1280()
{
  set(types::ms1280);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms2048()
{
  set(types::ms2048);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms2560()
{
  set(types::ms2560);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms5120()
{
  set(types::ms5120);
  return c.get<uint16_t>();
}
uint16_t& drx_cfg_s::drx_long_cycle_start_offset_c_::set_ms10240()
{
  set(types::ms10240);
  return c.get<uint16_t>();
}
void drx_cfg_s::drx_long_cycle_start_offset_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ms10:
      j.write_int("ms10", c.get<uint8_t>());
      break;
    case types::ms20:
      j.write_int("ms20", c.get<uint8_t>());
      break;
    case types::ms32:
      j.write_int("ms32", c.get<uint8_t>());
      break;
    case types::ms40:
      j.write_int("ms40", c.get<uint8_t>());
      break;
    case types::ms60:
      j.write_int("ms60", c.get<uint8_t>());
      break;
    case types::ms64:
      j.write_int("ms64", c.get<uint8_t>());
      break;
    case types::ms70:
      j.write_int("ms70", c.get<uint8_t>());
      break;
    case types::ms80:
      j.write_int("ms80", c.get<uint8_t>());
      break;
    case types::ms128:
      j.write_int("ms128", c.get<uint8_t>());
      break;
    case types::ms160:
      j.write_int("ms160", c.get<uint8_t>());
      break;
    case types::ms256:
      j.write_int("ms256", c.get<uint16_t>());
      break;
    case types::ms320:
      j.write_int("ms320", c.get<uint16_t>());
      break;
    case types::ms512:
      j.write_int("ms512", c.get<uint16_t>());
      break;
    case types::ms640:
      j.write_int("ms640", c.get<uint16_t>());
      break;
    case types::ms1024:
      j.write_int("ms1024", c.get<uint16_t>());
      break;
    case types::ms1280:
      j.write_int("ms1280", c.get<uint16_t>());
      break;
    case types::ms2048:
      j.write_int("ms2048", c.get<uint16_t>());
      break;
    case types::ms2560:
      j.write_int("ms2560", c.get<uint16_t>());
      break;
    case types::ms5120:
      j.write_int("ms5120", c.get<uint16_t>());
      break;
    case types::ms10240:
      j.write_int("ms10240", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_s::drx_long_cycle_start_offset_c_");
  }
  j.end_obj();
}
SRSASN_CODE drx_cfg_s::drx_long_cycle_start_offset_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ms10:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)9u));
      break;
    case types::ms20:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms32:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms40:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms60:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)59u));
      break;
    case types::ms64:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)63u));
      break;
    case types::ms70:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)69u));
      break;
    case types::ms80:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms128:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    case types::ms160:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms256:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u));
      break;
    case types::ms320:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms512:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)511u));
      break;
    case types::ms640:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms1024:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1023u));
      break;
    case types::ms1280:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms2048:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)2047u));
      break;
    case types::ms2560:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)2559u));
      break;
    case types::ms5120:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)5119u));
      break;
    case types::ms10240:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)10239u));
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_s::drx_long_cycle_start_offset_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_cfg_s::drx_long_cycle_start_offset_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ms10:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)9u));
      break;
    case types::ms20:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms32:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms40:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms60:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)59u));
      break;
    case types::ms64:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)63u));
      break;
    case types::ms70:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)69u));
      break;
    case types::ms80:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms128:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    case types::ms160:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms256:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u));
      break;
    case types::ms320:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms512:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)511u));
      break;
    case types::ms640:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms1024:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1023u));
      break;
    case types::ms1280:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms2048:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)2047u));
      break;
    case types::ms2560:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)2559u));
      break;
    case types::ms5120:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)5119u));
      break;
    case types::ms10240:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)10239u));
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_s::drx_long_cycle_start_offset_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* drx_cfg_s::drx_long_cycle_start_offset_c_::types_opts::to_string() const
{
  static const char* names[] = {"ms10",   "ms20",   "ms32",   "ms40",   "ms60",   "ms64",   "ms70",
                                "ms80",   "ms128",  "ms160",  "ms256",  "ms320",  "ms512",  "ms640",
                                "ms1024", "ms1280", "ms2048", "ms2560", "ms5120", "ms10240"};
  return convert_enum_idx(names, 20, value, "drx_cfg_s::drx_long_cycle_start_offset_c_::types");
}
uint16_t drx_cfg_s::drx_long_cycle_start_offset_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {10,  20,  32,  40,  60,   64,   70,   80,   128,  160,
                                     256, 320, 512, 640, 1024, 1280, 2048, 2560, 5120, 10240};
  return map_enum_number(numbers, 20, value, "drx_cfg_s::drx_long_cycle_start_offset_c_::types");
}

const char* drx_cfg_s::short_drx_s_::drx_short_cycle_opts::to_string() const
{
  static const char* names[] = {"ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms7",    "ms8",    "ms10",
                                "ms14",   "ms16",   "ms20",   "ms30",   "ms32",   "ms35",   "ms40",   "ms64",
                                "ms80",   "ms128",  "ms160",  "ms256",  "ms320",  "ms512",  "ms640",  "spare9",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "drx_cfg_s::short_drx_s_::drx_short_cycle_e_");
}
uint16_t drx_cfg_s::short_drx_s_::drx_short_cycle_opts::to_number() const
{
  static const uint16_t numbers[] = {2,  3,  4,  5,  6,  7,   8,   10,  14,  16,  20, 30,
                                     32, 35, 40, 64, 80, 128, 160, 256, 320, 512, 640};
  return map_enum_number(numbers, 23, value, "drx_cfg_s::short_drx_s_::drx_short_cycle_e_");
}

// DRX-ConfigExt-v1700 ::= SEQUENCE
SRSASN_CODE drx_cfg_ext_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, drx_harq_rtt_timer_dl_r17, (uint16_t)0u, (uint16_t)448u));
  HANDLE_CODE(pack_integer(bref, drx_harq_rtt_timer_ul_r17, (uint16_t)0u, (uint16_t)448u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_cfg_ext_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(drx_harq_rtt_timer_dl_r17, bref, (uint16_t)0u, (uint16_t)448u));
  HANDLE_CODE(unpack_integer(drx_harq_rtt_timer_ul_r17, bref, (uint16_t)0u, (uint16_t)448u));

  return SRSASN_SUCCESS;
}
void drx_cfg_ext_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("drx-HARQ-RTT-TimerDL-r17", drx_harq_rtt_timer_dl_r17);
  j.write_int("drx-HARQ-RTT-TimerUL-r17", drx_harq_rtt_timer_ul_r17);
  j.end_obj();
}

// DRX-ConfigSL-r17 ::= SEQUENCE
SRSASN_CODE drx_cfg_sl_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, drx_harq_rtt_timer_sl_r17, (uint8_t)0u, (uint8_t)56u));
  HANDLE_CODE(drx_retx_timer_sl_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_cfg_sl_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(drx_harq_rtt_timer_sl_r17, bref, (uint8_t)0u, (uint8_t)56u));
  HANDLE_CODE(drx_retx_timer_sl_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void drx_cfg_sl_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("drx-HARQ-RTT-TimerSL-r17", drx_harq_rtt_timer_sl_r17);
  j.write_str("drx-RetransmissionTimerSL-r17", drx_retx_timer_sl_r17.to_string());
  j.end_obj();
}

const char* drx_cfg_sl_r17_s::drx_retx_timer_sl_r17_opts::to_string() const
{
  static const char* names[] = {"sl0",    "sl1",     "sl2",     "sl4",     "sl6",     "sl8",     "sl16",    "sl24",
                                "sl33",   "sl40",    "sl64",    "sl80",    "sl96",    "sl112",   "sl128",   "sl160",
                                "sl320",  "spare15", "spare14", "spare13", "spare12", "spare11", "spare10", "spare9",
                                "spare8", "spare7",  "spare6",  "spare5",  "spare4",  "spare3",  "spare2",  "spare1"};
  return convert_enum_idx(names, 32, value, "drx_cfg_sl_r17_s::drx_retx_timer_sl_r17_e_");
}
uint16_t drx_cfg_sl_r17_s::drx_retx_timer_sl_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 1, 2, 4, 6, 8, 16, 24, 33, 40, 64, 80, 96, 112, 128, 160, 320};
  return map_enum_number(numbers, 17, value, "drx_cfg_sl_r17_s::drx_retx_timer_sl_r17_e_");
}

// DRX-ConfigSecondaryGroup-r16 ::= SEQUENCE
SRSASN_CODE drx_cfg_secondary_group_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(drx_on_dur_timer_r16.pack(bref));
  HANDLE_CODE(drx_inactivity_timer_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_cfg_secondary_group_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(drx_on_dur_timer_r16.unpack(bref));
  HANDLE_CODE(drx_inactivity_timer_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void drx_cfg_secondary_group_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("drx-onDurationTimer-r16");
  drx_on_dur_timer_r16.to_json(j);
  j.write_str("drx-InactivityTimer-r16", drx_inactivity_timer_r16.to_string());
  j.end_obj();
}

void drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::destroy_() {}
void drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::drx_on_dur_timer_r16_c_(
    const drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sub_milli_seconds:
      c.init(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.init(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_");
  }
}
drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_&
drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::operator=(
    const drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sub_milli_seconds:
      c.set(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.set(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_");
  }

  return *this;
}
uint8_t& drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::set_sub_milli_seconds()
{
  set(types::sub_milli_seconds);
  return c.get<uint8_t>();
}
drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::milli_seconds_e_&
drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::set_milli_seconds()
{
  set(types::milli_seconds);
  return c.get<milli_seconds_e_>();
}
void drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sub_milli_seconds:
      j.write_int("subMilliSeconds", c.get<uint8_t>());
      break;
    case types::milli_seconds:
      j.write_str("milliSeconds", c.get<milli_seconds_e_>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::milli_seconds_opts::to_string() const
{
  static const char* names[] = {"ms1",    "ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms8",    "ms10",
                                "ms20",   "ms30",   "ms40",   "ms50",   "ms60",   "ms80",   "ms100",  "ms200",
                                "ms300",  "ms400",  "ms500",  "ms600",  "ms800",  "ms1000", "ms1200", "ms1600",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::milli_seconds_e_");
}
uint16_t drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::milli_seconds_opts::to_number() const
{
  static const uint16_t numbers[] = {1,  2,  3,   4,   5,   6,   8,   10,  20,  30,   40,   50,
                                     60, 80, 100, 200, 300, 400, 500, 600, 800, 1000, 1200, 1600};
  return map_enum_number(
      numbers, 24, value, "drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::milli_seconds_e_");
}

const char* drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"subMilliSeconds", "milliSeconds"};
  return convert_enum_idx(names, 2, value, "drx_cfg_secondary_group_r16_s::drx_on_dur_timer_r16_c_::types");
}

const char* drx_cfg_secondary_group_r16_s::drx_inactivity_timer_r16_opts::to_string() const
{
  static const char* names[] = {"ms0",    "ms1",    "ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms8",
                                "ms10",   "ms20",   "ms30",   "ms40",   "ms50",   "ms60",   "ms80",   "ms100",
                                "ms200",  "ms300",  "ms500",  "ms750",  "ms1280", "ms1920", "ms2560", "spare9",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "drx_cfg_secondary_group_r16_s::drx_inactivity_timer_r16_e_");
}
uint16_t drx_cfg_secondary_group_r16_s::drx_inactivity_timer_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {0,  1,  2,  3,   4,   5,   6,   8,   10,   20,   30,  40,
                                     50, 60, 80, 100, 200, 300, 500, 750, 1280, 1920, 2560};
  return map_enum_number(numbers, 23, value, "drx_cfg_secondary_group_r16_s::drx_inactivity_timer_r16_e_");
}

// DataInactivityTimer ::= ENUMERATED
const char* data_inactivity_timer_opts::to_string() const
{
  static const char* names[] = {
      "s1", "s2", "s3", "s5", "s7", "s10", "s15", "s20", "s40", "s50", "s60", "s80", "s100", "s120", "s150", "s180"};
  return convert_enum_idx(names, 16, value, "data_inactivity_timer_e");
}
uint8_t data_inactivity_timer_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 5, 7, 10, 15, 20, 40, 50, 60, 80, 100, 120, 150, 180};
  return map_enum_number(numbers, 16, value, "data_inactivity_timer_e");
}

// DeactivatedSCG-Config-r17 ::= SEQUENCE
SRSASN_CODE deactiv_scg_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(bfd_and_rlm_r17, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE deactiv_scg_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(bfd_and_rlm_r17, 1));

  return SRSASN_SUCCESS;
}
void deactiv_scg_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_bool("bfd-and-RLM-r17", bfd_and_rlm_r17);
  j.end_obj();
}

// GoodServingCellEvaluation-r17 ::= SEQUENCE
SRSASN_CODE good_serving_cell_eval_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(offset_r17_present, 1));

  if (offset_r17_present) {
    HANDLE_CODE(offset_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE good_serving_cell_eval_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(offset_r17_present, 1));

  if (offset_r17_present) {
    HANDLE_CODE(offset_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void good_serving_cell_eval_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (offset_r17_present) {
    j.write_str("offset-r17", offset_r17.to_string());
  }
  j.end_obj();
}

const char* good_serving_cell_eval_r17_s::offset_r17_opts::to_string() const
{
  static const char* names[] = {"db2", "db4", "db6", "db8"};
  return convert_enum_idx(names, 4, value, "good_serving_cell_eval_r17_s::offset_r17_e_");
}
uint8_t good_serving_cell_eval_r17_s::offset_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 6, 8};
  return map_enum_number(numbers, 4, value, "good_serving_cell_eval_r17_s::offset_r17_e_");
}

// IntraBandCC-CombinationReqList-r17 ::= SEQUENCE
SRSASN_CODE intra_band_cc_combination_req_list_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, serv_cell_idx_list_r17, 1, 32, integer_packer<uint8_t>(0, 31)));
  HANDLE_CODE(pack_dyn_seq_of(bref, cc_combination_list_r17, 1, 128, SeqOfPacker<Packer>(1, 32, Packer())));

  return SRSASN_SUCCESS;
}
SRSASN_CODE intra_band_cc_combination_req_list_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(serv_cell_idx_list_r17, bref, 1, 32, integer_packer<uint8_t>(0, 31)));
  HANDLE_CODE(unpack_dyn_seq_of(cc_combination_list_r17, bref, 1, 128, SeqOfPacker<Packer>(1, 32, Packer())));

  return SRSASN_SUCCESS;
}
void intra_band_cc_combination_req_list_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("servCellIndexList-r17");
  for (const auto& e1 : serv_cell_idx_list_r17) {
    j.write_int(e1);
  }
  j.end_array();
  j.start_array("cc-CombinationList-r17");
  for (const auto& e1 : cc_combination_list_r17) {
    j.start_array();
    for (const auto& e2 : e1) {
      e2.to_json(j);
    }
    j.end_array();
  }
  j.end_array();
  j.end_obj();
}

// MBS-RNTI-SpecificConfig-r17 ::= SEQUENCE
SRSASN_CODE mbs_rnti_specific_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(drx_cfg_ptm_r17_present, 1));
  HANDLE_CODE(bref.pack(harq_feedback_enabler_multicast_r17_present, 1));
  HANDLE_CODE(bref.pack(harq_feedback_option_multicast_r17_present, 1));
  HANDLE_CODE(bref.pack(pdsch_aggregation_factor_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, mbs_rnti_specific_cfg_id_r17, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(group_common_rnti_r17.pack(bref));
  if (drx_cfg_ptm_r17_present) {
    HANDLE_CODE(drx_cfg_ptm_r17.pack(bref));
  }
  if (harq_feedback_enabler_multicast_r17_present) {
    HANDLE_CODE(harq_feedback_enabler_multicast_r17.pack(bref));
  }
  if (harq_feedback_option_multicast_r17_present) {
    HANDLE_CODE(harq_feedback_option_multicast_r17.pack(bref));
  }
  if (pdsch_aggregation_factor_r17_present) {
    HANDLE_CODE(pdsch_aggregation_factor_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mbs_rnti_specific_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(drx_cfg_ptm_r17_present, 1));
  HANDLE_CODE(bref.unpack(harq_feedback_enabler_multicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(harq_feedback_option_multicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_aggregation_factor_r17_present, 1));

  HANDLE_CODE(unpack_integer(mbs_rnti_specific_cfg_id_r17, bref, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(group_common_rnti_r17.unpack(bref));
  if (drx_cfg_ptm_r17_present) {
    HANDLE_CODE(drx_cfg_ptm_r17.unpack(bref));
  }
  if (harq_feedback_enabler_multicast_r17_present) {
    HANDLE_CODE(harq_feedback_enabler_multicast_r17.unpack(bref));
  }
  if (harq_feedback_option_multicast_r17_present) {
    HANDLE_CODE(harq_feedback_option_multicast_r17.unpack(bref));
  }
  if (pdsch_aggregation_factor_r17_present) {
    HANDLE_CODE(pdsch_aggregation_factor_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mbs_rnti_specific_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("mbs-RNTI-SpecificConfigId-r17", mbs_rnti_specific_cfg_id_r17);
  j.write_fieldname("groupCommon-RNTI-r17");
  group_common_rnti_r17.to_json(j);
  if (drx_cfg_ptm_r17_present) {
    j.write_fieldname("drx-ConfigPTM-r17");
    drx_cfg_ptm_r17.to_json(j);
  }
  if (harq_feedback_enabler_multicast_r17_present) {
    j.write_str("harq-FeedbackEnablerMulticast-r17", harq_feedback_enabler_multicast_r17.to_string());
  }
  if (harq_feedback_option_multicast_r17_present) {
    j.write_str("harq-FeedbackOptionMulticast-r17", harq_feedback_option_multicast_r17.to_string());
  }
  if (pdsch_aggregation_factor_r17_present) {
    j.write_str("pdsch-AggregationFactor-r17", pdsch_aggregation_factor_r17.to_string());
  }
  j.end_obj();
}

void mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_::destroy_() {}
void mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_::group_common_rnti_r17_c_(
    const mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::g_rnti:
      c.init(other.c.get<uint32_t>());
      break;
    case types::g_cs_rnti:
      c.init(other.c.get<uint32_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_");
  }
}
mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_& mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_::operator=(
    const mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::g_rnti:
      c.set(other.c.get<uint32_t>());
      break;
    case types::g_cs_rnti:
      c.set(other.c.get<uint32_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_");
  }

  return *this;
}
uint32_t& mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_::set_g_rnti()
{
  set(types::g_rnti);
  return c.get<uint32_t>();
}
uint32_t& mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_::set_g_cs_rnti()
{
  set(types::g_cs_rnti);
  return c.get<uint32_t>();
}
void mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::g_rnti:
      j.write_int("g-RNTI", c.get<uint32_t>());
      break;
    case types::g_cs_rnti:
      j.write_int("g-CS-RNTI", c.get<uint32_t>());
      break;
    default:
      log_invalid_choice_id(type_, "mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::g_rnti:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u));
      break;
    case types::g_cs_rnti:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u));
      break;
    default:
      log_invalid_choice_id(type_, "mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::g_rnti:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u));
      break;
    case types::g_cs_rnti:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u));
      break;
    default:
      log_invalid_choice_id(type_, "mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"g-RNTI", "g-CS-RNTI"};
  return convert_enum_idx(names, 2, value, "mbs_rnti_specific_cfg_r17_s::group_common_rnti_r17_c_::types");
}

const char* mbs_rnti_specific_cfg_r17_s::harq_feedback_enabler_multicast_r17_opts::to_string() const
{
  static const char* names[] = {"dci-enabler", "enabled"};
  return convert_enum_idx(names, 2, value, "mbs_rnti_specific_cfg_r17_s::harq_feedback_enabler_multicast_r17_e_");
}

const char* mbs_rnti_specific_cfg_r17_s::harq_feedback_option_multicast_r17_opts::to_string() const
{
  static const char* names[] = {"ack-nack", "nack-only"};
  return convert_enum_idx(names, 2, value, "mbs_rnti_specific_cfg_r17_s::harq_feedback_option_multicast_r17_e_");
}

const char* mbs_rnti_specific_cfg_r17_s::pdsch_aggregation_factor_r17_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n8"};
  return convert_enum_idx(names, 3, value, "mbs_rnti_specific_cfg_r17_s::pdsch_aggregation_factor_r17_e_");
}
uint8_t mbs_rnti_specific_cfg_r17_s::pdsch_aggregation_factor_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8};
  return map_enum_number(numbers, 3, value, "mbs_rnti_specific_cfg_r17_s::pdsch_aggregation_factor_r17_e_");
}

// MulticastConfig-r17 ::= SEQUENCE
SRSASN_CODE multicast_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pdsch_harq_ack_codebook_list_multicast_r17_present, 1));
  HANDLE_CODE(bref.pack(type1_codebook_generation_mode_r17_present, 1));

  if (pdsch_harq_ack_codebook_list_multicast_r17_present) {
    HANDLE_CODE(pdsch_harq_ack_codebook_list_multicast_r17.pack(bref));
  }
  if (type1_codebook_generation_mode_r17_present) {
    HANDLE_CODE(type1_codebook_generation_mode_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pdsch_harq_ack_codebook_list_multicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(type1_codebook_generation_mode_r17_present, 1));

  if (pdsch_harq_ack_codebook_list_multicast_r17_present) {
    HANDLE_CODE(pdsch_harq_ack_codebook_list_multicast_r17.unpack(bref));
  }
  if (type1_codebook_generation_mode_r17_present) {
    HANDLE_CODE(type1_codebook_generation_mode_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void multicast_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pdsch_harq_ack_codebook_list_multicast_r17_present) {
    j.write_fieldname("pdsch-HARQ-ACK-CodebookListMulticast-r17");
    pdsch_harq_ack_codebook_list_multicast_r17.to_json(j);
  }
  if (type1_codebook_generation_mode_r17_present) {
    j.write_str("type1CodebookGenerationMode-r17", type1_codebook_generation_mode_r17.to_string());
  }
  j.end_obj();
}

const char* multicast_cfg_r17_s::type1_codebook_generation_mode_r17_opts::to_string() const
{
  static const char* names[] = {"mode1", "mode2"};
  return convert_enum_idx(names, 2, value, "multicast_cfg_r17_s::type1_codebook_generation_mode_r17_e_");
}
uint8_t multicast_cfg_r17_s::type1_codebook_generation_mode_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "multicast_cfg_r17_s::type1_codebook_generation_mode_r17_e_");
}

// MulticastRLC-BearerConfig-r17 ::= SEQUENCE
SRSASN_CODE multicast_rlc_bearer_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(is_ptm_entity_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, served_mbs_radio_bearer_r17, (uint16_t)1u, (uint16_t)512u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_rlc_bearer_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(is_ptm_entity_r17_present, 1));

  HANDLE_CODE(unpack_integer(served_mbs_radio_bearer_r17, bref, (uint16_t)1u, (uint16_t)512u));

  return SRSASN_SUCCESS;
}
void multicast_rlc_bearer_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("servedMBS-RadioBearer-r17", served_mbs_radio_bearer_r17);
  if (is_ptm_entity_r17_present) {
    j.write_str("isPTM-Entity-r17", "true");
  }
  j.end_obj();
}

// PDCCH-BlindDetectionCA-CombIndicator-r16 ::= SEQUENCE
SRSASN_CODE pdcch_blind_detection_ca_comb_ind_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_ca1_r16, (uint8_t)1u, (uint8_t)15u));
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_ca2_r16, (uint8_t)1u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_blind_detection_ca_comb_ind_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca1_r16, bref, (uint8_t)1u, (uint8_t)15u));
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca2_r16, bref, (uint8_t)1u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
void pdcch_blind_detection_ca_comb_ind_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("pdcch-BlindDetectionCA1-r16", pdcch_blind_detection_ca1_r16);
  j.write_int("pdcch-BlindDetectionCA2-r16", pdcch_blind_detection_ca2_r16);
  j.end_obj();
}

// PDCCH-BlindDetectionCA-CombIndicator-r17 ::= SEQUENCE
SRSASN_CODE pdcch_blind_detection_ca_comb_ind_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pdcch_blind_detection_ca1_r17_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_ca2_r17_present, 1));

  if (pdcch_blind_detection_ca1_r17_present) {
    HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_ca1_r17, (uint8_t)1u, (uint8_t)15u));
  }
  if (pdcch_blind_detection_ca2_r17_present) {
    HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_ca2_r17, (uint8_t)1u, (uint8_t)15u));
  }
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_ca3_r17, (uint8_t)1u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_blind_detection_ca_comb_ind_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_ca1_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_ca2_r17_present, 1));

  if (pdcch_blind_detection_ca1_r17_present) {
    HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca1_r17, bref, (uint8_t)1u, (uint8_t)15u));
  }
  if (pdcch_blind_detection_ca2_r17_present) {
    HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca2_r17, bref, (uint8_t)1u, (uint8_t)15u));
  }
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca3_r17, bref, (uint8_t)1u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
void pdcch_blind_detection_ca_comb_ind_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pdcch_blind_detection_ca1_r17_present) {
    j.write_int("pdcch-BlindDetectionCA1-r17", pdcch_blind_detection_ca1_r17);
  }
  if (pdcch_blind_detection_ca2_r17_present) {
    j.write_int("pdcch-BlindDetectionCA2-r17", pdcch_blind_detection_ca2_r17);
  }
  j.write_int("pdcch-BlindDetectionCA3-r17", pdcch_blind_detection_ca3_r17);
  j.end_obj();
}

// PDSCH-HARQ-ACK-EnhType3-r17 ::= SEQUENCE
SRSASN_CODE pdsch_harq_ack_enh_type3_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(pdsch_harq_ack_enh_type3_ndi_r17_present, 1));
  HANDLE_CODE(bref.pack(pdsch_harq_ack_enh_type3_cbg_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, pdsch_harq_ack_enh_type3_idx_r17, (uint8_t)0u, (uint8_t)7u));
  HANDLE_CODE(applicable_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdsch_harq_ack_enh_type3_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(pdsch_harq_ack_enh_type3_ndi_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_harq_ack_enh_type3_cbg_r17_present, 1));

  HANDLE_CODE(unpack_integer(pdsch_harq_ack_enh_type3_idx_r17, bref, (uint8_t)0u, (uint8_t)7u));
  HANDLE_CODE(applicable_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void pdsch_harq_ack_enh_type3_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("pdsch-HARQ-ACK-EnhType3Index-r17", pdsch_harq_ack_enh_type3_idx_r17);
  j.write_fieldname("applicable-r17");
  applicable_r17.to_json(j);
  if (pdsch_harq_ack_enh_type3_ndi_r17_present) {
    j.write_str("pdsch-HARQ-ACK-EnhType3NDI-r17", "true");
  }
  if (pdsch_harq_ack_enh_type3_cbg_r17_present) {
    j.write_str("pdsch-HARQ-ACK-EnhType3CBG-r17", "true");
  }
  j.end_obj();
}

void pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_::destroy_()
{
  switch (type_) {
    case types::per_cc:
      c.destroy<per_cc_l_>();
      break;
    case types::per_harq:
      c.destroy<per_harq_l_>();
      break;
    default:
      break;
  }
}
void pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::per_cc:
      c.init<per_cc_l_>();
      break;
    case types::per_harq:
      c.init<per_harq_l_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_");
  }
}
pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_::applicable_r17_c_(
    const pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::per_cc:
      c.init(other.c.get<per_cc_l_>());
      break;
    case types::per_harq:
      c.init(other.c.get<per_harq_l_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_");
  }
}
pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_& pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_::operator=(
    const pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::per_cc:
      c.set(other.c.get<per_cc_l_>());
      break;
    case types::per_harq:
      c.set(other.c.get<per_harq_l_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_");
  }

  return *this;
}
pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_::per_cc_l_&
pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_::set_per_cc()
{
  set(types::per_cc);
  return c.get<per_cc_l_>();
}
pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_::per_harq_l_&
pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_::set_per_harq()
{
  set(types::per_harq);
  return c.get<per_harq_l_>();
}
void pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::per_cc:
      j.start_array("perCC");
      for (const auto& e1 : c.get<per_cc_l_>()) {
        j.write_int(e1);
      }
      j.end_array();
      break;
    case types::per_harq:
      j.start_array("perHARQ");
      for (const auto& e1 : c.get<per_harq_l_>()) {
        j.write_str(e1.to_string());
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::per_cc:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<per_cc_l_>(), 1, 32, integer_packer<uint8_t>(0, 1)));
      break;
    case types::per_harq:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<per_harq_l_>(), 1, 32));
      break;
    default:
      log_invalid_choice_id(type_, "pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::per_cc:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<per_cc_l_>(), bref, 1, 32, integer_packer<uint8_t>(0, 1)));
      break;
    case types::per_harq:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<per_harq_l_>(), bref, 1, 32));
      break;
    default:
      log_invalid_choice_id(type_, "pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"perCC", "perHARQ"};
  return convert_enum_idx(names, 2, value, "pdsch_harq_ack_enh_type3_r17_s::applicable_r17_c_::types");
}

// PHR-Config ::= SEQUENCE
SRSASN_CODE phr_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(phr_periodic_timer.pack(bref));
  HANDLE_CODE(phr_prohibit_timer.pack(bref));
  HANDLE_CODE(phr_tx_pwr_factor_change.pack(bref));
  HANDLE_CODE(bref.pack(multiple_phr, 1));
  HANDLE_CODE(bref.pack(dummy, 1));
  HANDLE_CODE(bref.pack(phr_type2_other_cell, 1));
  HANDLE_CODE(phr_mode_other_cg.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= mpe_report_fr2_r16.is_present();
    group_flags[1] |= mpe_report_fr2_r17.is_present();
    group_flags[1] |= two_phr_mode_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(mpe_report_fr2_r16.is_present(), 1));
      if (mpe_report_fr2_r16.is_present()) {
        HANDLE_CODE(mpe_report_fr2_r16->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(mpe_report_fr2_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(two_phr_mode_r17_present, 1));
      if (mpe_report_fr2_r17.is_present()) {
        HANDLE_CODE(mpe_report_fr2_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE phr_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(phr_periodic_timer.unpack(bref));
  HANDLE_CODE(phr_prohibit_timer.unpack(bref));
  HANDLE_CODE(phr_tx_pwr_factor_change.unpack(bref));
  HANDLE_CODE(bref.unpack(multiple_phr, 1));
  HANDLE_CODE(bref.unpack(dummy, 1));
  HANDLE_CODE(bref.unpack(phr_type2_other_cell, 1));
  HANDLE_CODE(phr_mode_other_cg.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(mpe_report_fr2_r16, bref);
      if (mpe_report_fr2_r16.is_present()) {
        HANDLE_CODE(mpe_report_fr2_r16->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(mpe_report_fr2_r17, bref);
      HANDLE_CODE(bref.unpack(two_phr_mode_r17_present, 1));
      if (mpe_report_fr2_r17.is_present()) {
        HANDLE_CODE(mpe_report_fr2_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void phr_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("phr-PeriodicTimer", phr_periodic_timer.to_string());
  j.write_str("phr-ProhibitTimer", phr_prohibit_timer.to_string());
  j.write_str("phr-Tx-PowerFactorChange", phr_tx_pwr_factor_change.to_string());
  j.write_bool("multiplePHR", multiple_phr);
  j.write_bool("dummy", dummy);
  j.write_bool("phr-Type2OtherCell", phr_type2_other_cell);
  j.write_str("phr-ModeOtherCG", phr_mode_other_cg.to_string());
  if (ext) {
    if (mpe_report_fr2_r16.is_present()) {
      j.write_fieldname("mpe-Reporting-FR2-r16");
      mpe_report_fr2_r16->to_json(j);
    }
    if (mpe_report_fr2_r17.is_present()) {
      j.write_fieldname("mpe-Reporting-FR2-r17");
      mpe_report_fr2_r17->to_json(j);
    }
    if (two_phr_mode_r17_present) {
      j.write_str("twoPHRMode-r17", "enabled");
    }
  }
  j.end_obj();
}

const char* phr_cfg_s::phr_periodic_timer_opts::to_string() const
{
  static const char* names[] = {"sf10", "sf20", "sf50", "sf100", "sf200", "sf500", "sf1000", "infinity"};
  return convert_enum_idx(names, 8, value, "phr_cfg_s::phr_periodic_timer_e_");
}
int16_t phr_cfg_s::phr_periodic_timer_opts::to_number() const
{
  static const int16_t numbers[] = {10, 20, 50, 100, 200, 500, 1000, -1};
  return map_enum_number(numbers, 8, value, "phr_cfg_s::phr_periodic_timer_e_");
}

const char* phr_cfg_s::phr_prohibit_timer_opts::to_string() const
{
  static const char* names[] = {"sf0", "sf10", "sf20", "sf50", "sf100", "sf200", "sf500", "sf1000"};
  return convert_enum_idx(names, 8, value, "phr_cfg_s::phr_prohibit_timer_e_");
}
uint16_t phr_cfg_s::phr_prohibit_timer_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 10, 20, 50, 100, 200, 500, 1000};
  return map_enum_number(numbers, 8, value, "phr_cfg_s::phr_prohibit_timer_e_");
}

const char* phr_cfg_s::phr_tx_pwr_factor_change_opts::to_string() const
{
  static const char* names[] = {"dB1", "dB3", "dB6", "infinity"};
  return convert_enum_idx(names, 4, value, "phr_cfg_s::phr_tx_pwr_factor_change_e_");
}
int8_t phr_cfg_s::phr_tx_pwr_factor_change_opts::to_number() const
{
  static const int8_t numbers[] = {1, 3, 6, -1};
  return map_enum_number(numbers, 4, value, "phr_cfg_s::phr_tx_pwr_factor_change_e_");
}

const char* phr_cfg_s::phr_mode_other_cg_opts::to_string() const
{
  static const char* names[] = {"real", "virtual"};
  return convert_enum_idx(names, 2, value, "phr_cfg_s::phr_mode_other_cg_e_");
}

// RLC-Config-v1610 ::= SEQUENCE
SRSASN_CODE rlc_cfg_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(dl_am_rlc_v1610.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rlc_cfg_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(dl_am_rlc_v1610.unpack(bref));

  return SRSASN_SUCCESS;
}
void rlc_cfg_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("dl-AM-RLC-v1610");
  dl_am_rlc_v1610.to_json(j);
  j.end_obj();
}

// RLC-Config-v1700 ::= SEQUENCE
SRSASN_CODE rlc_cfg_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(dl_am_rlc_v1700.pack(bref));
  HANDLE_CODE(dl_um_rlc_v1700.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rlc_cfg_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(dl_am_rlc_v1700.unpack(bref));
  HANDLE_CODE(dl_um_rlc_v1700.unpack(bref));

  return SRSASN_SUCCESS;
}
void rlc_cfg_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("dl-AM-RLC-v1700");
  dl_am_rlc_v1700.to_json(j);
  j.write_fieldname("dl-UM-RLC-v1700");
  dl_um_rlc_v1700.to_json(j);
  j.end_obj();
}

// RLF-TimersAndConstants ::= SEQUENCE
SRSASN_CODE rlf_timers_and_consts_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(t310.pack(bref));
  HANDLE_CODE(n310.pack(bref));
  HANDLE_CODE(n311.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= t311;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(t311.pack(bref));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rlf_timers_and_consts_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(t310.unpack(bref));
  HANDLE_CODE(n310.unpack(bref));
  HANDLE_CODE(n311.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(t311.unpack(bref));
    }
  }
  return SRSASN_SUCCESS;
}
void rlf_timers_and_consts_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("t310", t310.to_string());
  j.write_str("n310", n310.to_string());
  j.write_str("n311", n311.to_string());
  if (ext) {
    j.write_str("t311", t311.to_string());
  }
  j.end_obj();
}

const char* rlf_timers_and_consts_s::t310_opts::to_string() const
{
  static const char* names[] = {"ms0", "ms50", "ms100", "ms200", "ms500", "ms1000", "ms2000", "ms4000", "ms6000"};
  return convert_enum_idx(names, 9, value, "rlf_timers_and_consts_s::t310_e_");
}
uint16_t rlf_timers_and_consts_s::t310_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 50, 100, 200, 500, 1000, 2000, 4000, 6000};
  return map_enum_number(numbers, 9, value, "rlf_timers_and_consts_s::t310_e_");
}

const char* rlf_timers_and_consts_s::n310_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n6", "n8", "n10", "n20"};
  return convert_enum_idx(names, 8, value, "rlf_timers_and_consts_s::n310_e_");
}
uint8_t rlf_timers_and_consts_s::n310_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 6, 8, 10, 20};
  return map_enum_number(numbers, 8, value, "rlf_timers_and_consts_s::n310_e_");
}

const char* rlf_timers_and_consts_s::n311_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n5", "n6", "n8", "n10"};
  return convert_enum_idx(names, 8, value, "rlf_timers_and_consts_s::n311_e_");
}
uint8_t rlf_timers_and_consts_s::n311_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 6, 8, 10};
  return map_enum_number(numbers, 8, value, "rlf_timers_and_consts_s::n311_e_");
}

const char* rlf_timers_and_consts_s::t311_opts::to_string() const
{
  static const char* names[] = {"ms1000", "ms3000", "ms5000", "ms10000", "ms15000", "ms20000", "ms30000"};
  return convert_enum_idx(names, 7, value, "rlf_timers_and_consts_s::t311_e_");
}
uint16_t rlf_timers_and_consts_s::t311_opts::to_number() const
{
  static const uint16_t numbers[] = {1000, 3000, 5000, 10000, 15000, 20000, 30000};
  return map_enum_number(numbers, 7, value, "rlf_timers_and_consts_s::t311_e_");
}

// ReconfigurationWithSync ::= SEQUENCE
SRSASN_CODE recfg_with_sync_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sp_cell_cfg_common_present, 1));
  HANDLE_CODE(bref.pack(rach_cfg_ded_present, 1));

  if (sp_cell_cfg_common_present) {
    HANDLE_CODE(sp_cell_cfg_common.pack(bref));
  }
  HANDLE_CODE(pack_integer(bref, new_ue_id, (uint32_t)0u, (uint32_t)65535u));
  HANDLE_CODE(t304.pack(bref));
  if (rach_cfg_ded_present) {
    HANDLE_CODE(rach_cfg_ded.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= smtc.is_present();
    group_flags[1] |= daps_ul_pwr_cfg_r16.is_present();
    group_flags[2] |= sl_path_switch_cfg_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(smtc.is_present(), 1));
      if (smtc.is_present()) {
        HANDLE_CODE(smtc->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(daps_ul_pwr_cfg_r16.is_present(), 1));
      if (daps_ul_pwr_cfg_r16.is_present()) {
        HANDLE_CODE(daps_ul_pwr_cfg_r16->pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_path_switch_cfg_r17.is_present(), 1));
      if (sl_path_switch_cfg_r17.is_present()) {
        HANDLE_CODE(sl_path_switch_cfg_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE recfg_with_sync_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sp_cell_cfg_common_present, 1));
  HANDLE_CODE(bref.unpack(rach_cfg_ded_present, 1));

  if (sp_cell_cfg_common_present) {
    HANDLE_CODE(sp_cell_cfg_common.unpack(bref));
  }
  HANDLE_CODE(unpack_integer(new_ue_id, bref, (uint32_t)0u, (uint32_t)65535u));
  HANDLE_CODE(t304.unpack(bref));
  if (rach_cfg_ded_present) {
    HANDLE_CODE(rach_cfg_ded.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(3);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(smtc, bref);
      if (smtc.is_present()) {
        HANDLE_CODE(smtc->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(daps_ul_pwr_cfg_r16, bref);
      if (daps_ul_pwr_cfg_r16.is_present()) {
        HANDLE_CODE(daps_ul_pwr_cfg_r16->unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sl_path_switch_cfg_r17, bref);
      if (sl_path_switch_cfg_r17.is_present()) {
        HANDLE_CODE(sl_path_switch_cfg_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void recfg_with_sync_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sp_cell_cfg_common_present) {
    j.write_fieldname("spCellConfigCommon");
    sp_cell_cfg_common.to_json(j);
  }
  j.write_int("newUE-Identity", new_ue_id);
  j.write_str("t304", t304.to_string());
  if (rach_cfg_ded_present) {
    j.write_fieldname("rach-ConfigDedicated");
    rach_cfg_ded.to_json(j);
  }
  if (ext) {
    if (smtc.is_present()) {
      j.write_fieldname("smtc");
      smtc->to_json(j);
    }
    if (daps_ul_pwr_cfg_r16.is_present()) {
      j.write_fieldname("daps-UplinkPowerConfig-r16");
      daps_ul_pwr_cfg_r16->to_json(j);
    }
    if (sl_path_switch_cfg_r17.is_present()) {
      j.write_fieldname("sl-PathSwitchConfig-r17");
      sl_path_switch_cfg_r17->to_json(j);
    }
  }
  j.end_obj();
}

const char* recfg_with_sync_s::t304_opts::to_string() const
{
  static const char* names[] = {"ms50", "ms100", "ms150", "ms200", "ms500", "ms1000", "ms2000", "ms10000"};
  return convert_enum_idx(names, 8, value, "recfg_with_sync_s::t304_e_");
}
uint16_t recfg_with_sync_s::t304_opts::to_number() const
{
  static const uint16_t numbers[] = {50, 100, 150, 200, 500, 1000, 2000, 10000};
  return map_enum_number(numbers, 8, value, "recfg_with_sync_s::t304_e_");
}

void recfg_with_sync_s::rach_cfg_ded_c_::destroy_()
{
  switch (type_) {
    case types::ul:
      c.destroy<rach_cfg_ded_s>();
      break;
    case types::supplementary_ul:
      c.destroy<rach_cfg_ded_s>();
      break;
    default:
      break;
  }
}
void recfg_with_sync_s::rach_cfg_ded_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ul:
      c.init<rach_cfg_ded_s>();
      break;
    case types::supplementary_ul:
      c.init<rach_cfg_ded_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "recfg_with_sync_s::rach_cfg_ded_c_");
  }
}
recfg_with_sync_s::rach_cfg_ded_c_::rach_cfg_ded_c_(const recfg_with_sync_s::rach_cfg_ded_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ul:
      c.init(other.c.get<rach_cfg_ded_s>());
      break;
    case types::supplementary_ul:
      c.init(other.c.get<rach_cfg_ded_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "recfg_with_sync_s::rach_cfg_ded_c_");
  }
}
recfg_with_sync_s::rach_cfg_ded_c_&
recfg_with_sync_s::rach_cfg_ded_c_::operator=(const recfg_with_sync_s::rach_cfg_ded_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ul:
      c.set(other.c.get<rach_cfg_ded_s>());
      break;
    case types::supplementary_ul:
      c.set(other.c.get<rach_cfg_ded_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "recfg_with_sync_s::rach_cfg_ded_c_");
  }

  return *this;
}
rach_cfg_ded_s& recfg_with_sync_s::rach_cfg_ded_c_::set_ul()
{
  set(types::ul);
  return c.get<rach_cfg_ded_s>();
}
rach_cfg_ded_s& recfg_with_sync_s::rach_cfg_ded_c_::set_supplementary_ul()
{
  set(types::supplementary_ul);
  return c.get<rach_cfg_ded_s>();
}
void recfg_with_sync_s::rach_cfg_ded_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ul:
      j.write_fieldname("uplink");
      c.get<rach_cfg_ded_s>().to_json(j);
      break;
    case types::supplementary_ul:
      j.write_fieldname("supplementaryUplink");
      c.get<rach_cfg_ded_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "recfg_with_sync_s::rach_cfg_ded_c_");
  }
  j.end_obj();
}
SRSASN_CODE recfg_with_sync_s::rach_cfg_ded_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ul:
      HANDLE_CODE(c.get<rach_cfg_ded_s>().pack(bref));
      break;
    case types::supplementary_ul:
      HANDLE_CODE(c.get<rach_cfg_ded_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "recfg_with_sync_s::rach_cfg_ded_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE recfg_with_sync_s::rach_cfg_ded_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ul:
      HANDLE_CODE(c.get<rach_cfg_ded_s>().unpack(bref));
      break;
    case types::supplementary_ul:
      HANDLE_CODE(c.get<rach_cfg_ded_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "recfg_with_sync_s::rach_cfg_ded_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* recfg_with_sync_s::rach_cfg_ded_c_::types_opts::to_string() const
{
  static const char* names[] = {"uplink", "supplementaryUplink"};
  return convert_enum_idx(names, 2, value, "recfg_with_sync_s::rach_cfg_ded_c_::types");
}

// SchedulingRequestConfig ::= SEQUENCE
SRSASN_CODE sched_request_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sched_request_to_add_mod_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(sched_request_to_release_list.size() > 0, 1));

  if (sched_request_to_add_mod_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sched_request_to_add_mod_list, 1, 8));
  }
  if (sched_request_to_release_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sched_request_to_release_list, 1, 8, integer_packer<uint8_t>(0, 7)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sched_request_cfg_s::unpack(cbit_ref& bref)
{
  bool sched_request_to_add_mod_list_present;
  HANDLE_CODE(bref.unpack(sched_request_to_add_mod_list_present, 1));
  bool sched_request_to_release_list_present;
  HANDLE_CODE(bref.unpack(sched_request_to_release_list_present, 1));

  if (sched_request_to_add_mod_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sched_request_to_add_mod_list, bref, 1, 8));
  }
  if (sched_request_to_release_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sched_request_to_release_list, bref, 1, 8, integer_packer<uint8_t>(0, 7)));
  }

  return SRSASN_SUCCESS;
}
void sched_request_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sched_request_to_add_mod_list.size() > 0) {
    j.start_array("schedulingRequestToAddModList");
    for (const auto& e1 : sched_request_to_add_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sched_request_to_release_list.size() > 0) {
    j.start_array("schedulingRequestToReleaseList");
    for (const auto& e1 : sched_request_to_release_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// SchedulingRequestConfig-v1700 ::= SEQUENCE
SRSASN_CODE sched_request_cfg_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sched_request_to_add_mod_list_ext_v1700.size() > 0, 1));

  if (sched_request_to_add_mod_list_ext_v1700.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sched_request_to_add_mod_list_ext_v1700, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sched_request_cfg_v1700_s::unpack(cbit_ref& bref)
{
  bool sched_request_to_add_mod_list_ext_v1700_present;
  HANDLE_CODE(bref.unpack(sched_request_to_add_mod_list_ext_v1700_present, 1));

  if (sched_request_to_add_mod_list_ext_v1700_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sched_request_to_add_mod_list_ext_v1700, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void sched_request_cfg_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sched_request_to_add_mod_list_ext_v1700.size() > 0) {
    j.start_array("schedulingRequestToAddModListExt-v1700");
    for (const auto& e1 : sched_request_to_add_mod_list_ext_v1700) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

const char* serving_cell_cfg_s::ca_slot_offset_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"refSCS15kHz", "refSCS30KHz", "refSCS60KHz", "refSCS120KHz"};
  return convert_enum_idx(names, 4, value, "serving_cell_cfg_s::ca_slot_offset_r16_c_::types");
}
uint8_t serving_cell_cfg_s::ca_slot_offset_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {15, 30, 60, 120};
  return map_enum_number(numbers, 4, value, "serving_cell_cfg_s::ca_slot_offset_r16_c_::types");
}

// TAG-Config ::= SEQUENCE
SRSASN_CODE tag_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(tag_to_release_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(tag_to_add_mod_list.size() > 0, 1));

  if (tag_to_release_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, tag_to_release_list, 1, 4, integer_packer<uint8_t>(0, 3)));
  }
  if (tag_to_add_mod_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, tag_to_add_mod_list, 1, 4));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE tag_cfg_s::unpack(cbit_ref& bref)
{
  bool tag_to_release_list_present;
  HANDLE_CODE(bref.unpack(tag_to_release_list_present, 1));
  bool tag_to_add_mod_list_present;
  HANDLE_CODE(bref.unpack(tag_to_add_mod_list_present, 1));

  if (tag_to_release_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(tag_to_release_list, bref, 1, 4, integer_packer<uint8_t>(0, 3)));
  }
  if (tag_to_add_mod_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(tag_to_add_mod_list, bref, 1, 4));
  }

  return SRSASN_SUCCESS;
}
void tag_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (tag_to_release_list.size() > 0) {
    j.start_array("tag-ToReleaseList");
    for (const auto& e1 : tag_to_release_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (tag_to_add_mod_list.size() > 0) {
    j.start_array("tag-ToAddModList");
    for (const auto& e1 : tag_to_add_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// TAR-Config-r17 ::= SEQUENCE
SRSASN_CODE tar_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(offset_thres_ta_r17_present, 1));
  HANDLE_CODE(bref.pack(timing_advance_sr_r17_present, 1));

  if (offset_thres_ta_r17_present) {
    HANDLE_CODE(offset_thres_ta_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE tar_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(offset_thres_ta_r17_present, 1));
  HANDLE_CODE(bref.unpack(timing_advance_sr_r17_present, 1));

  if (offset_thres_ta_r17_present) {
    HANDLE_CODE(offset_thres_ta_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void tar_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (offset_thres_ta_r17_present) {
    j.write_str("offsetThresholdTA-r17", offset_thres_ta_r17.to_string());
  }
  if (timing_advance_sr_r17_present) {
    j.write_str("timingAdvanceSR-r17", "enabled");
  }
  j.end_obj();
}

const char* tar_cfg_r17_s::offset_thres_ta_r17_opts::to_string() const
{
  static const char* names[] = {"ms0dot5", "ms1",     "ms2",     "ms3",     "ms4",    "ms5",    "ms6",    "ms7",
                                "ms8",     "ms9",     "ms10",    "ms11",    "ms12",   "ms13",   "ms14",   "ms15",
                                "spare13", "spare12", "spare11", "spare10", "spare9", "spare8", "spare7", "spare6",
                                "spare5",  "spare4",  "spare3",  "spare2",  "spare1"};
  return convert_enum_idx(names, 29, value, "tar_cfg_r17_s::offset_thres_ta_r17_e_");
}
float tar_cfg_r17_s::offset_thres_ta_r17_opts::to_number() const
{
  static const float numbers[] = {0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0};
  return map_enum_number(numbers, 16, value, "tar_cfg_r17_s::offset_thres_ta_r17_e_");
}
const char* tar_cfg_r17_s::offset_thres_ta_r17_opts::to_number_string() const
{
  static const char* number_strs[] = {
      "0.5", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"};
  return convert_enum_idx(number_strs, 29, value, "tar_cfg_r17_s::offset_thres_ta_r17_e_");
}

// IAB-ResourceConfig-r17 ::= SEQUENCE
SRSASN_CODE iab_res_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(slot_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(periodicity_slot_list_r17_present, 1));
  HANDLE_CODE(bref.pack(slot_list_subcarrier_spacing_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, iab_res_cfg_id_r17, (uint32_t)0u, (uint32_t)65535u));
  if (slot_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, slot_list_r17, 1, 5120, integer_packer<uint16_t>(0, 5119)));
  }
  if (periodicity_slot_list_r17_present) {
    HANDLE_CODE(periodicity_slot_list_r17.pack(bref));
  }
  if (slot_list_subcarrier_spacing_r17_present) {
    HANDLE_CODE(slot_list_subcarrier_spacing_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_res_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool slot_list_r17_present;
  HANDLE_CODE(bref.unpack(slot_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(periodicity_slot_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(slot_list_subcarrier_spacing_r17_present, 1));

  HANDLE_CODE(unpack_integer(iab_res_cfg_id_r17, bref, (uint32_t)0u, (uint32_t)65535u));
  if (slot_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(slot_list_r17, bref, 1, 5120, integer_packer<uint16_t>(0, 5119)));
  }
  if (periodicity_slot_list_r17_present) {
    HANDLE_CODE(periodicity_slot_list_r17.unpack(bref));
  }
  if (slot_list_subcarrier_spacing_r17_present) {
    HANDLE_CODE(slot_list_subcarrier_spacing_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void iab_res_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("iab-ResourceConfigID-r17", iab_res_cfg_id_r17);
  if (slot_list_r17.size() > 0) {
    j.start_array("slotList-r17");
    for (const auto& e1 : slot_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (periodicity_slot_list_r17_present) {
    j.write_str("periodicitySlotList-r17", periodicity_slot_list_r17.to_string());
  }
  if (slot_list_subcarrier_spacing_r17_present) {
    j.write_str("slotListSubcarrierSpacing-r17", slot_list_subcarrier_spacing_r17.to_string());
  }
  j.end_obj();
}

const char* iab_res_cfg_r17_s::periodicity_slot_list_r17_opts::to_string() const
{
  static const char* names[] = {
      "ms0p5", "ms0p625", "ms1", "ms1p25", "ms2", "ms2p5", "ms5", "ms10", "ms20", "ms40", "ms80", "ms160"};
  return convert_enum_idx(names, 12, value, "iab_res_cfg_r17_s::periodicity_slot_list_r17_e_");
}

// MAC-CellGroupConfig ::= SEQUENCE
SRSASN_CODE mac_cell_group_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(drx_cfg_present, 1));
  HANDLE_CODE(bref.pack(sched_request_cfg_present, 1));
  HANDLE_CODE(bref.pack(bsr_cfg_present, 1));
  HANDLE_CODE(bref.pack(tag_cfg_present, 1));
  HANDLE_CODE(bref.pack(phr_cfg_present, 1));

  if (drx_cfg_present) {
    HANDLE_CODE(drx_cfg.pack(bref));
  }
  if (sched_request_cfg_present) {
    HANDLE_CODE(sched_request_cfg.pack(bref));
  }
  if (bsr_cfg_present) {
    HANDLE_CODE(bsr_cfg.pack(bref));
  }
  if (tag_cfg_present) {
    HANDLE_CODE(tag_cfg.pack(bref));
  }
  if (phr_cfg_present) {
    HANDLE_CODE(phr_cfg.pack(bref));
  }
  HANDLE_CODE(bref.pack(skip_ul_tx_dyn, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= csi_mask_present;
    group_flags[0] |= data_inactivity_timer.is_present();
    group_flags[1] |= use_pre_bsr_r16_present;
    group_flags[1] |= sched_request_id_lbt_scell_r16_present;
    group_flags[1] |= lch_based_prioritization_r16_present;
    group_flags[1] |= sched_request_id_bfr_scell_r16_present;
    group_flags[1] |= drx_cfg_secondary_group_r16.is_present();
    group_flags[2] |= enhanced_skip_ul_tx_dyn_r16_present;
    group_flags[2] |= enhanced_skip_ul_tx_cfg_r16_present;
    group_flags[3] |= intra_cg_prioritization_r17_present;
    group_flags[3] |= drx_cfg_sl_r17.is_present();
    group_flags[3] |= drx_cfg_ext_v1700.is_present();
    group_flags[3] |= sched_request_id_bfr_r17_present;
    group_flags[3] |= sched_request_id_bfr2_r17_present;
    group_flags[3] |= sched_request_cfg_v1700.is_present();
    group_flags[3] |= tar_cfg_r17.is_present();
    group_flags[3] |= g_rnti_cfg_to_add_mod_list_r17.is_present();
    group_flags[3] |= g_rnti_cfg_to_release_list_r17.is_present();
    group_flags[3] |= g_cs_rnti_cfg_to_add_mod_list_r17.is_present();
    group_flags[3] |= g_cs_rnti_cfg_to_release_list_r17.is_present();
    group_flags[3] |= allow_csi_srs_tx_multicast_drx_active_r17_present;
    group_flags[4] |= sched_request_id_pos_mg_request_r17_present;
    group_flags[4] |= drx_last_tx_ul_r17_present;
    group_flags[5] |= pos_mg_request_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(csi_mask_present, 1));
      HANDLE_CODE(bref.pack(data_inactivity_timer.is_present(), 1));
      if (csi_mask_present) {
        HANDLE_CODE(bref.pack(csi_mask, 1));
      }
      if (data_inactivity_timer.is_present()) {
        HANDLE_CODE(data_inactivity_timer->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(use_pre_bsr_r16_present, 1));
      HANDLE_CODE(bref.pack(sched_request_id_lbt_scell_r16_present, 1));
      HANDLE_CODE(bref.pack(lch_based_prioritization_r16_present, 1));
      HANDLE_CODE(bref.pack(sched_request_id_bfr_scell_r16_present, 1));
      HANDLE_CODE(bref.pack(drx_cfg_secondary_group_r16.is_present(), 1));
      if (sched_request_id_lbt_scell_r16_present) {
        HANDLE_CODE(pack_integer(bref, sched_request_id_lbt_scell_r16, (uint8_t)0u, (uint8_t)7u));
      }
      if (sched_request_id_bfr_scell_r16_present) {
        HANDLE_CODE(pack_integer(bref, sched_request_id_bfr_scell_r16, (uint8_t)0u, (uint8_t)7u));
      }
      if (drx_cfg_secondary_group_r16.is_present()) {
        HANDLE_CODE(drx_cfg_secondary_group_r16->pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(enhanced_skip_ul_tx_dyn_r16_present, 1));
      HANDLE_CODE(bref.pack(enhanced_skip_ul_tx_cfg_r16_present, 1));
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(intra_cg_prioritization_r17_present, 1));
      HANDLE_CODE(bref.pack(drx_cfg_sl_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(drx_cfg_ext_v1700.is_present(), 1));
      HANDLE_CODE(bref.pack(sched_request_id_bfr_r17_present, 1));
      HANDLE_CODE(bref.pack(sched_request_id_bfr2_r17_present, 1));
      HANDLE_CODE(bref.pack(sched_request_cfg_v1700.is_present(), 1));
      HANDLE_CODE(bref.pack(tar_cfg_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(g_rnti_cfg_to_add_mod_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(g_rnti_cfg_to_release_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(g_cs_rnti_cfg_to_add_mod_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(g_cs_rnti_cfg_to_release_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(allow_csi_srs_tx_multicast_drx_active_r17_present, 1));
      if (drx_cfg_sl_r17.is_present()) {
        HANDLE_CODE(drx_cfg_sl_r17->pack(bref));
      }
      if (drx_cfg_ext_v1700.is_present()) {
        HANDLE_CODE(drx_cfg_ext_v1700->pack(bref));
      }
      if (sched_request_id_bfr_r17_present) {
        HANDLE_CODE(pack_integer(bref, sched_request_id_bfr_r17, (uint8_t)0u, (uint8_t)7u));
      }
      if (sched_request_id_bfr2_r17_present) {
        HANDLE_CODE(pack_integer(bref, sched_request_id_bfr2_r17, (uint8_t)0u, (uint8_t)7u));
      }
      if (sched_request_cfg_v1700.is_present()) {
        HANDLE_CODE(sched_request_cfg_v1700->pack(bref));
      }
      if (tar_cfg_r17.is_present()) {
        HANDLE_CODE(tar_cfg_r17->pack(bref));
      }
      if (g_rnti_cfg_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *g_rnti_cfg_to_add_mod_list_r17, 1, 16));
      }
      if (g_rnti_cfg_to_release_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *g_rnti_cfg_to_release_list_r17, 1, 16, integer_packer<uint8_t>(0, 15)));
      }
      if (g_cs_rnti_cfg_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *g_cs_rnti_cfg_to_add_mod_list_r17, 1, 8));
      }
      if (g_cs_rnti_cfg_to_release_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *g_cs_rnti_cfg_to_release_list_r17, 1, 8, integer_packer<uint8_t>(0, 15)));
      }
      if (allow_csi_srs_tx_multicast_drx_active_r17_present) {
        HANDLE_CODE(bref.pack(allow_csi_srs_tx_multicast_drx_active_r17, 1));
      }
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sched_request_id_pos_mg_request_r17_present, 1));
      HANDLE_CODE(bref.pack(drx_last_tx_ul_r17_present, 1));
      if (sched_request_id_pos_mg_request_r17_present) {
        HANDLE_CODE(pack_integer(bref, sched_request_id_pos_mg_request_r17, (uint8_t)0u, (uint8_t)7u));
      }
    }
    if (group_flags[5]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(pos_mg_request_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mac_cell_group_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(drx_cfg_present, 1));
  HANDLE_CODE(bref.unpack(sched_request_cfg_present, 1));
  HANDLE_CODE(bref.unpack(bsr_cfg_present, 1));
  HANDLE_CODE(bref.unpack(tag_cfg_present, 1));
  HANDLE_CODE(bref.unpack(phr_cfg_present, 1));

  if (drx_cfg_present) {
    HANDLE_CODE(drx_cfg.unpack(bref));
  }
  if (sched_request_cfg_present) {
    HANDLE_CODE(sched_request_cfg.unpack(bref));
  }
  if (bsr_cfg_present) {
    HANDLE_CODE(bsr_cfg.unpack(bref));
  }
  if (tag_cfg_present) {
    HANDLE_CODE(tag_cfg.unpack(bref));
  }
  if (phr_cfg_present) {
    HANDLE_CODE(phr_cfg.unpack(bref));
  }
  HANDLE_CODE(bref.unpack(skip_ul_tx_dyn, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(6);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(csi_mask_present, 1));
      unpack_presence_flag(data_inactivity_timer, bref);
      if (csi_mask_present) {
        HANDLE_CODE(bref.unpack(csi_mask, 1));
      }
      if (data_inactivity_timer.is_present()) {
        HANDLE_CODE(data_inactivity_timer->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(use_pre_bsr_r16_present, 1));
      HANDLE_CODE(bref.unpack(sched_request_id_lbt_scell_r16_present, 1));
      HANDLE_CODE(bref.unpack(lch_based_prioritization_r16_present, 1));
      HANDLE_CODE(bref.unpack(sched_request_id_bfr_scell_r16_present, 1));
      unpack_presence_flag(drx_cfg_secondary_group_r16, bref);
      if (sched_request_id_lbt_scell_r16_present) {
        HANDLE_CODE(unpack_integer(sched_request_id_lbt_scell_r16, bref, (uint8_t)0u, (uint8_t)7u));
      }
      if (sched_request_id_bfr_scell_r16_present) {
        HANDLE_CODE(unpack_integer(sched_request_id_bfr_scell_r16, bref, (uint8_t)0u, (uint8_t)7u));
      }
      if (drx_cfg_secondary_group_r16.is_present()) {
        HANDLE_CODE(drx_cfg_secondary_group_r16->unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(enhanced_skip_ul_tx_dyn_r16_present, 1));
      HANDLE_CODE(bref.unpack(enhanced_skip_ul_tx_cfg_r16_present, 1));
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(intra_cg_prioritization_r17_present, 1));
      unpack_presence_flag(drx_cfg_sl_r17, bref);
      unpack_presence_flag(drx_cfg_ext_v1700, bref);
      HANDLE_CODE(bref.unpack(sched_request_id_bfr_r17_present, 1));
      HANDLE_CODE(bref.unpack(sched_request_id_bfr2_r17_present, 1));
      unpack_presence_flag(sched_request_cfg_v1700, bref);
      unpack_presence_flag(tar_cfg_r17, bref);
      unpack_presence_flag(g_rnti_cfg_to_add_mod_list_r17, bref);
      unpack_presence_flag(g_rnti_cfg_to_release_list_r17, bref);
      unpack_presence_flag(g_cs_rnti_cfg_to_add_mod_list_r17, bref);
      unpack_presence_flag(g_cs_rnti_cfg_to_release_list_r17, bref);
      HANDLE_CODE(bref.unpack(allow_csi_srs_tx_multicast_drx_active_r17_present, 1));
      if (drx_cfg_sl_r17.is_present()) {
        HANDLE_CODE(drx_cfg_sl_r17->unpack(bref));
      }
      if (drx_cfg_ext_v1700.is_present()) {
        HANDLE_CODE(drx_cfg_ext_v1700->unpack(bref));
      }
      if (sched_request_id_bfr_r17_present) {
        HANDLE_CODE(unpack_integer(sched_request_id_bfr_r17, bref, (uint8_t)0u, (uint8_t)7u));
      }
      if (sched_request_id_bfr2_r17_present) {
        HANDLE_CODE(unpack_integer(sched_request_id_bfr2_r17, bref, (uint8_t)0u, (uint8_t)7u));
      }
      if (sched_request_cfg_v1700.is_present()) {
        HANDLE_CODE(sched_request_cfg_v1700->unpack(bref));
      }
      if (tar_cfg_r17.is_present()) {
        HANDLE_CODE(tar_cfg_r17->unpack(bref));
      }
      if (g_rnti_cfg_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*g_rnti_cfg_to_add_mod_list_r17, bref, 1, 16));
      }
      if (g_rnti_cfg_to_release_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*g_rnti_cfg_to_release_list_r17, bref, 1, 16, integer_packer<uint8_t>(0, 15)));
      }
      if (g_cs_rnti_cfg_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*g_cs_rnti_cfg_to_add_mod_list_r17, bref, 1, 8));
      }
      if (g_cs_rnti_cfg_to_release_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*g_cs_rnti_cfg_to_release_list_r17, bref, 1, 8, integer_packer<uint8_t>(0, 15)));
      }
      if (allow_csi_srs_tx_multicast_drx_active_r17_present) {
        HANDLE_CODE(bref.unpack(allow_csi_srs_tx_multicast_drx_active_r17, 1));
      }
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(sched_request_id_pos_mg_request_r17_present, 1));
      HANDLE_CODE(bref.unpack(drx_last_tx_ul_r17_present, 1));
      if (sched_request_id_pos_mg_request_r17_present) {
        HANDLE_CODE(unpack_integer(sched_request_id_pos_mg_request_r17, bref, (uint8_t)0u, (uint8_t)7u));
      }
    }
    if (group_flags[5]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(pos_mg_request_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void mac_cell_group_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (drx_cfg_present) {
    j.write_fieldname("drx-Config");
    drx_cfg.to_json(j);
  }
  if (sched_request_cfg_present) {
    j.write_fieldname("schedulingRequestConfig");
    sched_request_cfg.to_json(j);
  }
  if (bsr_cfg_present) {
    j.write_fieldname("bsr-Config");
    bsr_cfg.to_json(j);
  }
  if (tag_cfg_present) {
    j.write_fieldname("tag-Config");
    tag_cfg.to_json(j);
  }
  if (phr_cfg_present) {
    j.write_fieldname("phr-Config");
    phr_cfg.to_json(j);
  }
  j.write_bool("skipUplinkTxDynamic", skip_ul_tx_dyn);
  if (ext) {
    if (csi_mask_present) {
      j.write_bool("csi-Mask", csi_mask);
    }
    if (data_inactivity_timer.is_present()) {
      j.write_fieldname("dataInactivityTimer");
      data_inactivity_timer->to_json(j);
    }
    if (use_pre_bsr_r16_present) {
      j.write_str("usePreBSR-r16", "true");
    }
    if (sched_request_id_lbt_scell_r16_present) {
      j.write_int("schedulingRequestID-LBT-SCell-r16", sched_request_id_lbt_scell_r16);
    }
    if (lch_based_prioritization_r16_present) {
      j.write_str("lch-BasedPrioritization-r16", "enabled");
    }
    if (sched_request_id_bfr_scell_r16_present) {
      j.write_int("schedulingRequestID-BFR-SCell-r16", sched_request_id_bfr_scell_r16);
    }
    if (drx_cfg_secondary_group_r16.is_present()) {
      j.write_fieldname("drx-ConfigSecondaryGroup-r16");
      drx_cfg_secondary_group_r16->to_json(j);
    }
    if (enhanced_skip_ul_tx_dyn_r16_present) {
      j.write_str("enhancedSkipUplinkTxDynamic-r16", "true");
    }
    if (enhanced_skip_ul_tx_cfg_r16_present) {
      j.write_str("enhancedSkipUplinkTxConfigured-r16", "true");
    }
    if (intra_cg_prioritization_r17_present) {
      j.write_str("intraCG-Prioritization-r17", "enabled");
    }
    if (drx_cfg_sl_r17.is_present()) {
      j.write_fieldname("drx-ConfigSL-r17");
      drx_cfg_sl_r17->to_json(j);
    }
    if (drx_cfg_ext_v1700.is_present()) {
      j.write_fieldname("drx-ConfigExt-v1700");
      drx_cfg_ext_v1700->to_json(j);
    }
    if (sched_request_id_bfr_r17_present) {
      j.write_int("schedulingRequestID-BFR-r17", sched_request_id_bfr_r17);
    }
    if (sched_request_id_bfr2_r17_present) {
      j.write_int("schedulingRequestID-BFR2-r17", sched_request_id_bfr2_r17);
    }
    if (sched_request_cfg_v1700.is_present()) {
      j.write_fieldname("schedulingRequestConfig-v1700");
      sched_request_cfg_v1700->to_json(j);
    }
    if (tar_cfg_r17.is_present()) {
      j.write_fieldname("tar-Config-r17");
      tar_cfg_r17->to_json(j);
    }
    if (g_rnti_cfg_to_add_mod_list_r17.is_present()) {
      j.start_array("g-RNTI-ConfigToAddModList-r17");
      for (const auto& e1 : *g_rnti_cfg_to_add_mod_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (g_rnti_cfg_to_release_list_r17.is_present()) {
      j.start_array("g-RNTI-ConfigToReleaseList-r17");
      for (const auto& e1 : *g_rnti_cfg_to_release_list_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (g_cs_rnti_cfg_to_add_mod_list_r17.is_present()) {
      j.start_array("g-CS-RNTI-ConfigToAddModList-r17");
      for (const auto& e1 : *g_cs_rnti_cfg_to_add_mod_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (g_cs_rnti_cfg_to_release_list_r17.is_present()) {
      j.start_array("g-CS-RNTI-ConfigToReleaseList-r17");
      for (const auto& e1 : *g_cs_rnti_cfg_to_release_list_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (allow_csi_srs_tx_multicast_drx_active_r17_present) {
      j.write_bool("allowCSI-SRS-Tx-MulticastDRX-Active-r17", allow_csi_srs_tx_multicast_drx_active_r17);
    }
    if (sched_request_id_pos_mg_request_r17_present) {
      j.write_int("schedulingRequestID-PosMG-Request-r17", sched_request_id_pos_mg_request_r17);
    }
    if (drx_last_tx_ul_r17_present) {
      j.write_str("drx-LastTransmissionUL-r17", "enabled");
    }
    if (pos_mg_request_r17_present) {
      j.write_str("posMG-Request-r17", "enabled");
    }
  }
  j.end_obj();
}

// PhysicalCellGroupConfig ::= SEQUENCE
SRSASN_CODE phys_cell_group_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(harq_ack_spatial_bundling_pucch_present, 1));
  HANDLE_CODE(bref.pack(harq_ack_spatial_bundling_pusch_present, 1));
  HANDLE_CODE(bref.pack(p_nr_fr1_present, 1));
  HANDLE_CODE(bref.pack(tpc_srs_rnti_present, 1));
  HANDLE_CODE(bref.pack(tpc_pucch_rnti_present, 1));
  HANDLE_CODE(bref.pack(tpc_pusch_rnti_present, 1));
  HANDLE_CODE(bref.pack(sp_csi_rnti_present, 1));
  HANDLE_CODE(bref.pack(cs_rnti_present, 1));

  if (p_nr_fr1_present) {
    HANDLE_CODE(pack_integer(bref, p_nr_fr1, (int8_t)-30, (int8_t)33));
  }
  HANDLE_CODE(pdsch_harq_ack_codebook.pack(bref));
  if (tpc_srs_rnti_present) {
    HANDLE_CODE(pack_integer(bref, tpc_srs_rnti, (uint32_t)0u, (uint32_t)65535u));
  }
  if (tpc_pucch_rnti_present) {
    HANDLE_CODE(pack_integer(bref, tpc_pucch_rnti, (uint32_t)0u, (uint32_t)65535u));
  }
  if (tpc_pusch_rnti_present) {
    HANDLE_CODE(pack_integer(bref, tpc_pusch_rnti, (uint32_t)0u, (uint32_t)65535u));
  }
  if (sp_csi_rnti_present) {
    HANDLE_CODE(pack_integer(bref, sp_csi_rnti, (uint32_t)0u, (uint32_t)65535u));
  }
  if (cs_rnti_present) {
    HANDLE_CODE(cs_rnti.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= mcs_c_rnti_present;
    group_flags[0] |= p_ue_fr1_present;
    group_flags[1] |= xscale_present;
    group_flags[2] |= pdcch_blind_detection.is_present();
    group_flags[3] |= dcp_cfg_r16.is_present();
    group_flags[3] |= harq_ack_spatial_bundling_pucch_secondary_pucch_group_r16_present;
    group_flags[3] |= harq_ack_spatial_bundling_pusch_secondary_pucch_group_r16_present;
    group_flags[3] |= pdsch_harq_ack_codebook_secondary_pucch_group_r16_present;
    group_flags[3] |= p_nr_fr2_r16_present;
    group_flags[3] |= p_ue_fr2_r16_present;
    group_flags[3] |= nrdc_p_cmode_fr1_r16_present;
    group_flags[3] |= nrdc_p_cmode_fr2_r16_present;
    group_flags[3] |= pdsch_harq_ack_codebook_r16_present;
    group_flags[3] |= nfi_total_dai_included_r16_present;
    group_flags[3] |= ul_total_dai_included_r16_present;
    group_flags[3] |= pdsch_harq_ack_one_shot_feedback_r16_present;
    group_flags[3] |= pdsch_harq_ack_one_shot_feedback_ndi_r16_present;
    group_flags[3] |= pdsch_harq_ack_one_shot_feedback_cbg_r16_present;
    group_flags[3] |= dl_assign_idx_dci_0_2_r16_present;
    group_flags[3] |= dl_assign_idx_dci_1_2_r16_present;
    group_flags[3] |= pdsch_harq_ack_codebook_list_r16.is_present();
    group_flags[3] |= ack_nack_feedback_mode_r16_present;
    group_flags[3] |= pdcch_blind_detection_ca_comb_ind_r16.is_present();
    group_flags[3] |= pdcch_blind_detection2_r16.is_present();
    group_flags[3] |= pdcch_blind_detection3_r16.is_present();
    group_flags[3] |= bd_factor_r_r16_present;
    group_flags[4] |= pdsch_harq_ack_enh_type3_to_add_mod_list_r17.is_present();
    group_flags[4] |= pdsch_harq_ack_enh_type3_to_release_list_r17.is_present();
    group_flags[4] |= pdsch_harq_ack_enh_type3_secondary_to_add_mod_list_r17.is_present();
    group_flags[4] |= pdsch_harq_ack_enh_type3_secondary_to_release_list_r17.is_present();
    group_flags[4] |= pdsch_harq_ack_enh_type3_dci_field_secondary_pucch_group_r17_present;
    group_flags[4] |= pdsch_harq_ack_enh_type3_dci_field_r17_present;
    group_flags[4] |= pdsch_harq_ack_retx_r17_present;
    group_flags[4] |= pdsch_harq_ack_retx_secondary_pucch_group_r17_present;
    group_flags[4] |= pucch_s_scell_r17_present;
    group_flags[4] |= pucch_s_scell_secondary_pucch_group_r17_present;
    group_flags[4] |= pucch_s_scell_dyn_r17_present;
    group_flags[4] |= pucch_s_scell_dyn_secondary_pucch_group_r17_present;
    group_flags[4] |= pucch_s_scell_pattern_r17.is_present();
    group_flags[4] |= pucch_s_scell_pattern_secondary_pucch_group_r17.is_present();
    group_flags[4] |= uci_mux_with_diff_prio_r17_present;
    group_flags[4] |= uci_mux_with_diff_prio_secondary_pucch_group_r17_present;
    group_flags[4] |= simul_pucch_pusch_r17_present;
    group_flags[4] |= simul_pucch_pusch_secondary_pucch_group_r17_present;
    group_flags[4] |= prio_low_dg_high_cg_r17_present;
    group_flags[4] |= prio_high_dg_low_cg_r17_present;
    group_flags[4] |= two_qcl_type_d_for_pdcch_repeat_r17_present;
    group_flags[4] |= multicast_cfg_r17.is_present();
    group_flags[4] |= pdcch_blind_detection_ca_comb_ind_r17.is_present();
    group_flags[5] |= simul_sr_pusch_diff_pucch_groups_r17_present;
    group_flags[6] |= intra_band_nc_prach_simul_tx_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(mcs_c_rnti_present, 1));
      HANDLE_CODE(bref.pack(p_ue_fr1_present, 1));
      if (mcs_c_rnti_present) {
        HANDLE_CODE(pack_integer(bref, mcs_c_rnti, (uint32_t)0u, (uint32_t)65535u));
      }
      if (p_ue_fr1_present) {
        HANDLE_CODE(pack_integer(bref, p_ue_fr1, (int8_t)-30, (int8_t)33));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(xscale_present, 1));
      if (xscale_present) {
        HANDLE_CODE(xscale.pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(pdcch_blind_detection.is_present(), 1));
      if (pdcch_blind_detection.is_present()) {
        HANDLE_CODE(pdcch_blind_detection->pack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(dcp_cfg_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(harq_ack_spatial_bundling_pucch_secondary_pucch_group_r16_present, 1));
      HANDLE_CODE(bref.pack(harq_ack_spatial_bundling_pusch_secondary_pucch_group_r16_present, 1));
      HANDLE_CODE(bref.pack(pdsch_harq_ack_codebook_secondary_pucch_group_r16_present, 1));
      HANDLE_CODE(bref.pack(p_nr_fr2_r16_present, 1));
      HANDLE_CODE(bref.pack(p_ue_fr2_r16_present, 1));
      HANDLE_CODE(bref.pack(nrdc_p_cmode_fr1_r16_present, 1));
      HANDLE_CODE(bref.pack(nrdc_p_cmode_fr2_r16_present, 1));
      HANDLE_CODE(bref.pack(pdsch_harq_ack_codebook_r16_present, 1));
      HANDLE_CODE(bref.pack(nfi_total_dai_included_r16_present, 1));
      HANDLE_CODE(bref.pack(ul_total_dai_included_r16_present, 1));
      HANDLE_CODE(bref.pack(pdsch_harq_ack_one_shot_feedback_r16_present, 1));
      HANDLE_CODE(bref.pack(pdsch_harq_ack_one_shot_feedback_ndi_r16_present, 1));
      HANDLE_CODE(bref.pack(pdsch_harq_ack_one_shot_feedback_cbg_r16_present, 1));
      HANDLE_CODE(bref.pack(dl_assign_idx_dci_0_2_r16_present, 1));
      HANDLE_CODE(bref.pack(dl_assign_idx_dci_1_2_r16_present, 1));
      HANDLE_CODE(bref.pack(pdsch_harq_ack_codebook_list_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(ack_nack_feedback_mode_r16_present, 1));
      HANDLE_CODE(bref.pack(pdcch_blind_detection_ca_comb_ind_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(pdcch_blind_detection2_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(pdcch_blind_detection3_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(bd_factor_r_r16_present, 1));
      if (dcp_cfg_r16.is_present()) {
        HANDLE_CODE(dcp_cfg_r16->pack(bref));
      }
      if (harq_ack_spatial_bundling_pucch_secondary_pucch_group_r16_present) {
        HANDLE_CODE(harq_ack_spatial_bundling_pucch_secondary_pucch_group_r16.pack(bref));
      }
      if (harq_ack_spatial_bundling_pusch_secondary_pucch_group_r16_present) {
        HANDLE_CODE(harq_ack_spatial_bundling_pusch_secondary_pucch_group_r16.pack(bref));
      }
      if (pdsch_harq_ack_codebook_secondary_pucch_group_r16_present) {
        HANDLE_CODE(pdsch_harq_ack_codebook_secondary_pucch_group_r16.pack(bref));
      }
      if (p_nr_fr2_r16_present) {
        HANDLE_CODE(pack_integer(bref, p_nr_fr2_r16, (int8_t)-30, (int8_t)33));
      }
      if (p_ue_fr2_r16_present) {
        HANDLE_CODE(pack_integer(bref, p_ue_fr2_r16, (int8_t)-30, (int8_t)33));
      }
      if (nrdc_p_cmode_fr1_r16_present) {
        HANDLE_CODE(nrdc_p_cmode_fr1_r16.pack(bref));
      }
      if (nrdc_p_cmode_fr2_r16_present) {
        HANDLE_CODE(nrdc_p_cmode_fr2_r16.pack(bref));
      }
      if (dl_assign_idx_dci_1_2_r16_present) {
        HANDLE_CODE(dl_assign_idx_dci_1_2_r16.pack(bref));
      }
      if (pdsch_harq_ack_codebook_list_r16.is_present()) {
        HANDLE_CODE(pdsch_harq_ack_codebook_list_r16->pack(bref));
      }
      if (ack_nack_feedback_mode_r16_present) {
        HANDLE_CODE(ack_nack_feedback_mode_r16.pack(bref));
      }
      if (pdcch_blind_detection_ca_comb_ind_r16.is_present()) {
        HANDLE_CODE(pdcch_blind_detection_ca_comb_ind_r16->pack(bref));
      }
      if (pdcch_blind_detection2_r16.is_present()) {
        HANDLE_CODE(pdcch_blind_detection2_r16->pack(bref));
      }
      if (pdcch_blind_detection3_r16.is_present()) {
        HANDLE_CODE(pdcch_blind_detection3_r16->pack(bref));
      }
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(pdsch_harq_ack_enh_type3_to_add_mod_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(pdsch_harq_ack_enh_type3_to_release_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(pdsch_harq_ack_enh_type3_secondary_to_add_mod_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(pdsch_harq_ack_enh_type3_secondary_to_release_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(pdsch_harq_ack_enh_type3_dci_field_secondary_pucch_group_r17_present, 1));
      HANDLE_CODE(bref.pack(pdsch_harq_ack_enh_type3_dci_field_r17_present, 1));
      HANDLE_CODE(bref.pack(pdsch_harq_ack_retx_r17_present, 1));
      HANDLE_CODE(bref.pack(pdsch_harq_ack_retx_secondary_pucch_group_r17_present, 1));
      HANDLE_CODE(bref.pack(pucch_s_scell_r17_present, 1));
      HANDLE_CODE(bref.pack(pucch_s_scell_secondary_pucch_group_r17_present, 1));
      HANDLE_CODE(bref.pack(pucch_s_scell_dyn_r17_present, 1));
      HANDLE_CODE(bref.pack(pucch_s_scell_dyn_secondary_pucch_group_r17_present, 1));
      HANDLE_CODE(bref.pack(pucch_s_scell_pattern_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(pucch_s_scell_pattern_secondary_pucch_group_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(uci_mux_with_diff_prio_r17_present, 1));
      HANDLE_CODE(bref.pack(uci_mux_with_diff_prio_secondary_pucch_group_r17_present, 1));
      HANDLE_CODE(bref.pack(simul_pucch_pusch_r17_present, 1));
      HANDLE_CODE(bref.pack(simul_pucch_pusch_secondary_pucch_group_r17_present, 1));
      HANDLE_CODE(bref.pack(prio_low_dg_high_cg_r17_present, 1));
      HANDLE_CODE(bref.pack(prio_high_dg_low_cg_r17_present, 1));
      HANDLE_CODE(bref.pack(two_qcl_type_d_for_pdcch_repeat_r17_present, 1));
      HANDLE_CODE(bref.pack(multicast_cfg_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(pdcch_blind_detection_ca_comb_ind_r17.is_present(), 1));
      if (pdsch_harq_ack_enh_type3_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *pdsch_harq_ack_enh_type3_to_add_mod_list_r17, 1, 8));
      }
      if (pdsch_harq_ack_enh_type3_to_release_list_r17.is_present()) {
        HANDLE_CODE(
            pack_dyn_seq_of(bref, *pdsch_harq_ack_enh_type3_to_release_list_r17, 1, 8, integer_packer<uint8_t>(0, 7)));
      }
      if (pdsch_harq_ack_enh_type3_secondary_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *pdsch_harq_ack_enh_type3_secondary_to_add_mod_list_r17, 1, 8));
      }
      if (pdsch_harq_ack_enh_type3_secondary_to_release_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(
            bref, *pdsch_harq_ack_enh_type3_secondary_to_release_list_r17, 1, 8, integer_packer<uint8_t>(0, 7)));
      }
      if (pucch_s_scell_r17_present) {
        HANDLE_CODE(pack_integer(bref, pucch_s_scell_r17, (uint8_t)1u, (uint8_t)31u));
      }
      if (pucch_s_scell_secondary_pucch_group_r17_present) {
        HANDLE_CODE(pack_integer(bref, pucch_s_scell_secondary_pucch_group_r17, (uint8_t)1u, (uint8_t)31u));
      }
      if (pucch_s_scell_pattern_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *pucch_s_scell_pattern_r17, 1, 320, integer_packer<uint8_t>(0, 1)));
      }
      if (pucch_s_scell_pattern_secondary_pucch_group_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(
            bref, *pucch_s_scell_pattern_secondary_pucch_group_r17, 1, 320, integer_packer<uint8_t>(0, 1)));
      }
      if (multicast_cfg_r17.is_present()) {
        HANDLE_CODE(multicast_cfg_r17->pack(bref));
      }
      if (pdcch_blind_detection_ca_comb_ind_r17.is_present()) {
        HANDLE_CODE(pdcch_blind_detection_ca_comb_ind_r17->pack(bref));
      }
    }
    if (group_flags[5]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(simul_sr_pusch_diff_pucch_groups_r17_present, 1));
    }
    if (group_flags[6]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(intra_band_nc_prach_simul_tx_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE phys_cell_group_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(harq_ack_spatial_bundling_pucch_present, 1));
  HANDLE_CODE(bref.unpack(harq_ack_spatial_bundling_pusch_present, 1));
  HANDLE_CODE(bref.unpack(p_nr_fr1_present, 1));
  HANDLE_CODE(bref.unpack(tpc_srs_rnti_present, 1));
  HANDLE_CODE(bref.unpack(tpc_pucch_rnti_present, 1));
  HANDLE_CODE(bref.unpack(tpc_pusch_rnti_present, 1));
  HANDLE_CODE(bref.unpack(sp_csi_rnti_present, 1));
  HANDLE_CODE(bref.unpack(cs_rnti_present, 1));

  if (p_nr_fr1_present) {
    HANDLE_CODE(unpack_integer(p_nr_fr1, bref, (int8_t)-30, (int8_t)33));
  }
  HANDLE_CODE(pdsch_harq_ack_codebook.unpack(bref));
  if (tpc_srs_rnti_present) {
    HANDLE_CODE(unpack_integer(tpc_srs_rnti, bref, (uint32_t)0u, (uint32_t)65535u));
  }
  if (tpc_pucch_rnti_present) {
    HANDLE_CODE(unpack_integer(tpc_pucch_rnti, bref, (uint32_t)0u, (uint32_t)65535u));
  }
  if (tpc_pusch_rnti_present) {
    HANDLE_CODE(unpack_integer(tpc_pusch_rnti, bref, (uint32_t)0u, (uint32_t)65535u));
  }
  if (sp_csi_rnti_present) {
    HANDLE_CODE(unpack_integer(sp_csi_rnti, bref, (uint32_t)0u, (uint32_t)65535u));
  }
  if (cs_rnti_present) {
    HANDLE_CODE(cs_rnti.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(7);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(mcs_c_rnti_present, 1));
      HANDLE_CODE(bref.unpack(p_ue_fr1_present, 1));
      if (mcs_c_rnti_present) {
        HANDLE_CODE(unpack_integer(mcs_c_rnti, bref, (uint32_t)0u, (uint32_t)65535u));
      }
      if (p_ue_fr1_present) {
        HANDLE_CODE(unpack_integer(p_ue_fr1, bref, (int8_t)-30, (int8_t)33));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(xscale_present, 1));
      if (xscale_present) {
        HANDLE_CODE(xscale.unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(pdcch_blind_detection, bref);
      if (pdcch_blind_detection.is_present()) {
        HANDLE_CODE(pdcch_blind_detection->unpack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(dcp_cfg_r16, bref);
      HANDLE_CODE(bref.unpack(harq_ack_spatial_bundling_pucch_secondary_pucch_group_r16_present, 1));
      HANDLE_CODE(bref.unpack(harq_ack_spatial_bundling_pusch_secondary_pucch_group_r16_present, 1));
      HANDLE_CODE(bref.unpack(pdsch_harq_ack_codebook_secondary_pucch_group_r16_present, 1));
      HANDLE_CODE(bref.unpack(p_nr_fr2_r16_present, 1));
      HANDLE_CODE(bref.unpack(p_ue_fr2_r16_present, 1));
      HANDLE_CODE(bref.unpack(nrdc_p_cmode_fr1_r16_present, 1));
      HANDLE_CODE(bref.unpack(nrdc_p_cmode_fr2_r16_present, 1));
      HANDLE_CODE(bref.unpack(pdsch_harq_ack_codebook_r16_present, 1));
      HANDLE_CODE(bref.unpack(nfi_total_dai_included_r16_present, 1));
      HANDLE_CODE(bref.unpack(ul_total_dai_included_r16_present, 1));
      HANDLE_CODE(bref.unpack(pdsch_harq_ack_one_shot_feedback_r16_present, 1));
      HANDLE_CODE(bref.unpack(pdsch_harq_ack_one_shot_feedback_ndi_r16_present, 1));
      HANDLE_CODE(bref.unpack(pdsch_harq_ack_one_shot_feedback_cbg_r16_present, 1));
      HANDLE_CODE(bref.unpack(dl_assign_idx_dci_0_2_r16_present, 1));
      HANDLE_CODE(bref.unpack(dl_assign_idx_dci_1_2_r16_present, 1));
      unpack_presence_flag(pdsch_harq_ack_codebook_list_r16, bref);
      HANDLE_CODE(bref.unpack(ack_nack_feedback_mode_r16_present, 1));
      unpack_presence_flag(pdcch_blind_detection_ca_comb_ind_r16, bref);
      unpack_presence_flag(pdcch_blind_detection2_r16, bref);
      unpack_presence_flag(pdcch_blind_detection3_r16, bref);
      HANDLE_CODE(bref.unpack(bd_factor_r_r16_present, 1));
      if (dcp_cfg_r16.is_present()) {
        HANDLE_CODE(dcp_cfg_r16->unpack(bref));
      }
      if (harq_ack_spatial_bundling_pucch_secondary_pucch_group_r16_present) {
        HANDLE_CODE(harq_ack_spatial_bundling_pucch_secondary_pucch_group_r16.unpack(bref));
      }
      if (harq_ack_spatial_bundling_pusch_secondary_pucch_group_r16_present) {
        HANDLE_CODE(harq_ack_spatial_bundling_pusch_secondary_pucch_group_r16.unpack(bref));
      }
      if (pdsch_harq_ack_codebook_secondary_pucch_group_r16_present) {
        HANDLE_CODE(pdsch_harq_ack_codebook_secondary_pucch_group_r16.unpack(bref));
      }
      if (p_nr_fr2_r16_present) {
        HANDLE_CODE(unpack_integer(p_nr_fr2_r16, bref, (int8_t)-30, (int8_t)33));
      }
      if (p_ue_fr2_r16_present) {
        HANDLE_CODE(unpack_integer(p_ue_fr2_r16, bref, (int8_t)-30, (int8_t)33));
      }
      if (nrdc_p_cmode_fr1_r16_present) {
        HANDLE_CODE(nrdc_p_cmode_fr1_r16.unpack(bref));
      }
      if (nrdc_p_cmode_fr2_r16_present) {
        HANDLE_CODE(nrdc_p_cmode_fr2_r16.unpack(bref));
      }
      if (dl_assign_idx_dci_1_2_r16_present) {
        HANDLE_CODE(dl_assign_idx_dci_1_2_r16.unpack(bref));
      }
      if (pdsch_harq_ack_codebook_list_r16.is_present()) {
        HANDLE_CODE(pdsch_harq_ack_codebook_list_r16->unpack(bref));
      }
      if (ack_nack_feedback_mode_r16_present) {
        HANDLE_CODE(ack_nack_feedback_mode_r16.unpack(bref));
      }
      if (pdcch_blind_detection_ca_comb_ind_r16.is_present()) {
        HANDLE_CODE(pdcch_blind_detection_ca_comb_ind_r16->unpack(bref));
      }
      if (pdcch_blind_detection2_r16.is_present()) {
        HANDLE_CODE(pdcch_blind_detection2_r16->unpack(bref));
      }
      if (pdcch_blind_detection3_r16.is_present()) {
        HANDLE_CODE(pdcch_blind_detection3_r16->unpack(bref));
      }
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(pdsch_harq_ack_enh_type3_to_add_mod_list_r17, bref);
      unpack_presence_flag(pdsch_harq_ack_enh_type3_to_release_list_r17, bref);
      unpack_presence_flag(pdsch_harq_ack_enh_type3_secondary_to_add_mod_list_r17, bref);
      unpack_presence_flag(pdsch_harq_ack_enh_type3_secondary_to_release_list_r17, bref);
      HANDLE_CODE(bref.unpack(pdsch_harq_ack_enh_type3_dci_field_secondary_pucch_group_r17_present, 1));
      HANDLE_CODE(bref.unpack(pdsch_harq_ack_enh_type3_dci_field_r17_present, 1));
      HANDLE_CODE(bref.unpack(pdsch_harq_ack_retx_r17_present, 1));
      HANDLE_CODE(bref.unpack(pdsch_harq_ack_retx_secondary_pucch_group_r17_present, 1));
      HANDLE_CODE(bref.unpack(pucch_s_scell_r17_present, 1));
      HANDLE_CODE(bref.unpack(pucch_s_scell_secondary_pucch_group_r17_present, 1));
      HANDLE_CODE(bref.unpack(pucch_s_scell_dyn_r17_present, 1));
      HANDLE_CODE(bref.unpack(pucch_s_scell_dyn_secondary_pucch_group_r17_present, 1));
      unpack_presence_flag(pucch_s_scell_pattern_r17, bref);
      unpack_presence_flag(pucch_s_scell_pattern_secondary_pucch_group_r17, bref);
      HANDLE_CODE(bref.unpack(uci_mux_with_diff_prio_r17_present, 1));
      HANDLE_CODE(bref.unpack(uci_mux_with_diff_prio_secondary_pucch_group_r17_present, 1));
      HANDLE_CODE(bref.unpack(simul_pucch_pusch_r17_present, 1));
      HANDLE_CODE(bref.unpack(simul_pucch_pusch_secondary_pucch_group_r17_present, 1));
      HANDLE_CODE(bref.unpack(prio_low_dg_high_cg_r17_present, 1));
      HANDLE_CODE(bref.unpack(prio_high_dg_low_cg_r17_present, 1));
      HANDLE_CODE(bref.unpack(two_qcl_type_d_for_pdcch_repeat_r17_present, 1));
      unpack_presence_flag(multicast_cfg_r17, bref);
      unpack_presence_flag(pdcch_blind_detection_ca_comb_ind_r17, bref);
      if (pdsch_harq_ack_enh_type3_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*pdsch_harq_ack_enh_type3_to_add_mod_list_r17, bref, 1, 8));
      }
      if (pdsch_harq_ack_enh_type3_to_release_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(
            *pdsch_harq_ack_enh_type3_to_release_list_r17, bref, 1, 8, integer_packer<uint8_t>(0, 7)));
      }
      if (pdsch_harq_ack_enh_type3_secondary_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*pdsch_harq_ack_enh_type3_secondary_to_add_mod_list_r17, bref, 1, 8));
      }
      if (pdsch_harq_ack_enh_type3_secondary_to_release_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(
            *pdsch_harq_ack_enh_type3_secondary_to_release_list_r17, bref, 1, 8, integer_packer<uint8_t>(0, 7)));
      }
      if (pucch_s_scell_r17_present) {
        HANDLE_CODE(unpack_integer(pucch_s_scell_r17, bref, (uint8_t)1u, (uint8_t)31u));
      }
      if (pucch_s_scell_secondary_pucch_group_r17_present) {
        HANDLE_CODE(unpack_integer(pucch_s_scell_secondary_pucch_group_r17, bref, (uint8_t)1u, (uint8_t)31u));
      }
      if (pucch_s_scell_pattern_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*pucch_s_scell_pattern_r17, bref, 1, 320, integer_packer<uint8_t>(0, 1)));
      }
      if (pucch_s_scell_pattern_secondary_pucch_group_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(
            *pucch_s_scell_pattern_secondary_pucch_group_r17, bref, 1, 320, integer_packer<uint8_t>(0, 1)));
      }
      if (multicast_cfg_r17.is_present()) {
        HANDLE_CODE(multicast_cfg_r17->unpack(bref));
      }
      if (pdcch_blind_detection_ca_comb_ind_r17.is_present()) {
        HANDLE_CODE(pdcch_blind_detection_ca_comb_ind_r17->unpack(bref));
      }
    }
    if (group_flags[5]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(simul_sr_pusch_diff_pucch_groups_r17_present, 1));
    }
    if (group_flags[6]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(intra_band_nc_prach_simul_tx_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void phys_cell_group_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (harq_ack_spatial_bundling_pucch_present) {
    j.write_str("harq-ACK-SpatialBundlingPUCCH", "true");
  }
  if (harq_ack_spatial_bundling_pusch_present) {
    j.write_str("harq-ACK-SpatialBundlingPUSCH", "true");
  }
  if (p_nr_fr1_present) {
    j.write_int("p-NR-FR1", p_nr_fr1);
  }
  j.write_str("pdsch-HARQ-ACK-Codebook", pdsch_harq_ack_codebook.to_string());
  if (tpc_srs_rnti_present) {
    j.write_int("tpc-SRS-RNTI", tpc_srs_rnti);
  }
  if (tpc_pucch_rnti_present) {
    j.write_int("tpc-PUCCH-RNTI", tpc_pucch_rnti);
  }
  if (tpc_pusch_rnti_present) {
    j.write_int("tpc-PUSCH-RNTI", tpc_pusch_rnti);
  }
  if (sp_csi_rnti_present) {
    j.write_int("sp-CSI-RNTI", sp_csi_rnti);
  }
  if (cs_rnti_present) {
    j.write_fieldname("cs-RNTI");
    cs_rnti.to_json(j);
  }
  if (ext) {
    if (mcs_c_rnti_present) {
      j.write_int("mcs-C-RNTI", mcs_c_rnti);
    }
    if (p_ue_fr1_present) {
      j.write_int("p-UE-FR1", p_ue_fr1);
    }
    if (xscale_present) {
      j.write_str("xScale", xscale.to_string());
    }
    if (pdcch_blind_detection.is_present()) {
      j.write_fieldname("pdcch-BlindDetection");
      pdcch_blind_detection->to_json(j);
    }
    if (dcp_cfg_r16.is_present()) {
      j.write_fieldname("dcp-Config-r16");
      dcp_cfg_r16->to_json(j);
    }
    if (harq_ack_spatial_bundling_pucch_secondary_pucch_group_r16_present) {
      j.write_str("harq-ACK-SpatialBundlingPUCCH-secondaryPUCCHgroup-r16",
                  harq_ack_spatial_bundling_pucch_secondary_pucch_group_r16.to_string());
    }
    if (harq_ack_spatial_bundling_pusch_secondary_pucch_group_r16_present) {
      j.write_str("harq-ACK-SpatialBundlingPUSCH-secondaryPUCCHgroup-r16",
                  harq_ack_spatial_bundling_pusch_secondary_pucch_group_r16.to_string());
    }
    if (pdsch_harq_ack_codebook_secondary_pucch_group_r16_present) {
      j.write_str("pdsch-HARQ-ACK-Codebook-secondaryPUCCHgroup-r16",
                  pdsch_harq_ack_codebook_secondary_pucch_group_r16.to_string());
    }
    if (p_nr_fr2_r16_present) {
      j.write_int("p-NR-FR2-r16", p_nr_fr2_r16);
    }
    if (p_ue_fr2_r16_present) {
      j.write_int("p-UE-FR2-r16", p_ue_fr2_r16);
    }
    if (nrdc_p_cmode_fr1_r16_present) {
      j.write_str("nrdc-PCmode-FR1-r16", nrdc_p_cmode_fr1_r16.to_string());
    }
    if (nrdc_p_cmode_fr2_r16_present) {
      j.write_str("nrdc-PCmode-FR2-r16", nrdc_p_cmode_fr2_r16.to_string());
    }
    if (pdsch_harq_ack_codebook_r16_present) {
      j.write_str("pdsch-HARQ-ACK-Codebook-r16", "enhancedDynamic");
    }
    if (nfi_total_dai_included_r16_present) {
      j.write_str("nfi-TotalDAI-Included-r16", "true");
    }
    if (ul_total_dai_included_r16_present) {
      j.write_str("ul-TotalDAI-Included-r16", "true");
    }
    if (pdsch_harq_ack_one_shot_feedback_r16_present) {
      j.write_str("pdsch-HARQ-ACK-OneShotFeedback-r16", "true");
    }
    if (pdsch_harq_ack_one_shot_feedback_ndi_r16_present) {
      j.write_str("pdsch-HARQ-ACK-OneShotFeedbackNDI-r16", "true");
    }
    if (pdsch_harq_ack_one_shot_feedback_cbg_r16_present) {
      j.write_str("pdsch-HARQ-ACK-OneShotFeedbackCBG-r16", "true");
    }
    if (dl_assign_idx_dci_0_2_r16_present) {
      j.write_str("downlinkAssignmentIndexDCI-0-2-r16", "enabled");
    }
    if (dl_assign_idx_dci_1_2_r16_present) {
      j.write_str("downlinkAssignmentIndexDCI-1-2-r16", dl_assign_idx_dci_1_2_r16.to_string());
    }
    if (pdsch_harq_ack_codebook_list_r16.is_present()) {
      j.write_fieldname("pdsch-HARQ-ACK-CodebookList-r16");
      pdsch_harq_ack_codebook_list_r16->to_json(j);
    }
    if (ack_nack_feedback_mode_r16_present) {
      j.write_str("ackNackFeedbackMode-r16", ack_nack_feedback_mode_r16.to_string());
    }
    if (pdcch_blind_detection_ca_comb_ind_r16.is_present()) {
      j.write_fieldname("pdcch-BlindDetectionCA-CombIndicator-r16");
      pdcch_blind_detection_ca_comb_ind_r16->to_json(j);
    }
    if (pdcch_blind_detection2_r16.is_present()) {
      j.write_fieldname("pdcch-BlindDetection2-r16");
      pdcch_blind_detection2_r16->to_json(j);
    }
    if (pdcch_blind_detection3_r16.is_present()) {
      j.write_fieldname("pdcch-BlindDetection3-r16");
      pdcch_blind_detection3_r16->to_json(j);
    }
    if (bd_factor_r_r16_present) {
      j.write_str("bdFactorR-r16", "n1");
    }
    if (pdsch_harq_ack_enh_type3_to_add_mod_list_r17.is_present()) {
      j.start_array("pdsch-HARQ-ACK-EnhType3ToAddModList-r17");
      for (const auto& e1 : *pdsch_harq_ack_enh_type3_to_add_mod_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (pdsch_harq_ack_enh_type3_to_release_list_r17.is_present()) {
      j.start_array("pdsch-HARQ-ACK-EnhType3ToReleaseList-r17");
      for (const auto& e1 : *pdsch_harq_ack_enh_type3_to_release_list_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (pdsch_harq_ack_enh_type3_secondary_to_add_mod_list_r17.is_present()) {
      j.start_array("pdsch-HARQ-ACK-EnhType3SecondaryToAddModList-r17");
      for (const auto& e1 : *pdsch_harq_ack_enh_type3_secondary_to_add_mod_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (pdsch_harq_ack_enh_type3_secondary_to_release_list_r17.is_present()) {
      j.start_array("pdsch-HARQ-ACK-EnhType3SecondaryToReleaseList-r17");
      for (const auto& e1 : *pdsch_harq_ack_enh_type3_secondary_to_release_list_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (pdsch_harq_ack_enh_type3_dci_field_secondary_pucch_group_r17_present) {
      j.write_str("pdsch-HARQ-ACK-EnhType3DCI-FieldSecondaryPUCCHgroup-r17", "enabled");
    }
    if (pdsch_harq_ack_enh_type3_dci_field_r17_present) {
      j.write_str("pdsch-HARQ-ACK-EnhType3DCI-Field-r17", "enabled");
    }
    if (pdsch_harq_ack_retx_r17_present) {
      j.write_str("pdsch-HARQ-ACK-Retx-r17", "enabled");
    }
    if (pdsch_harq_ack_retx_secondary_pucch_group_r17_present) {
      j.write_str("pdsch-HARQ-ACK-RetxSecondaryPUCCHgroup-r17", "enabled");
    }
    if (pucch_s_scell_r17_present) {
      j.write_int("pucch-sSCell-r17", pucch_s_scell_r17);
    }
    if (pucch_s_scell_secondary_pucch_group_r17_present) {
      j.write_int("pucch-sSCellSecondaryPUCCHgroup-r17", pucch_s_scell_secondary_pucch_group_r17);
    }
    if (pucch_s_scell_dyn_r17_present) {
      j.write_str("pucch-sSCellDyn-r17", "enabled");
    }
    if (pucch_s_scell_dyn_secondary_pucch_group_r17_present) {
      j.write_str("pucch-sSCellDynSecondaryPUCCHgroup-r17", "enabled");
    }
    if (pucch_s_scell_pattern_r17.is_present()) {
      j.start_array("pucch-sSCellPattern-r17");
      for (const auto& e1 : *pucch_s_scell_pattern_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (pucch_s_scell_pattern_secondary_pucch_group_r17.is_present()) {
      j.start_array("pucch-sSCellPatternSecondaryPUCCHgroup-r17");
      for (const auto& e1 : *pucch_s_scell_pattern_secondary_pucch_group_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (uci_mux_with_diff_prio_r17_present) {
      j.write_str("uci-MuxWithDiffPrio-r17", "enabled");
    }
    if (uci_mux_with_diff_prio_secondary_pucch_group_r17_present) {
      j.write_str("uci-MuxWithDiffPrioSecondaryPUCCHgroup-r17", "enabled");
    }
    if (simul_pucch_pusch_r17_present) {
      j.write_str("simultaneousPUCCH-PUSCH-r17", "enabled");
    }
    if (simul_pucch_pusch_secondary_pucch_group_r17_present) {
      j.write_str("simultaneousPUCCH-PUSCH-SecondaryPUCCHgroup-r17", "enabled");
    }
    if (prio_low_dg_high_cg_r17_present) {
      j.write_str("prioLowDG-HighCG-r17", "enabled");
    }
    if (prio_high_dg_low_cg_r17_present) {
      j.write_str("prioHighDG-LowCG-r17", "enabled");
    }
    if (two_qcl_type_d_for_pdcch_repeat_r17_present) {
      j.write_str("twoQCLTypeDforPDCCHRepetition-r17", "enabled");
    }
    if (multicast_cfg_r17.is_present()) {
      j.write_fieldname("multicastConfig-r17");
      multicast_cfg_r17->to_json(j);
    }
    if (pdcch_blind_detection_ca_comb_ind_r17.is_present()) {
      j.write_fieldname("pdcch-BlindDetectionCA-CombIndicator-r17");
      pdcch_blind_detection_ca_comb_ind_r17->to_json(j);
    }
    if (simul_sr_pusch_diff_pucch_groups_r17_present) {
      j.write_str("simultaneousSR-PUSCH-diffPUCCH-Groups-r17", "enabled");
    }
    if (intra_band_nc_prach_simul_tx_r17_present) {
      j.write_str("intraBandNC-PRACH-simulTx-r17", "enabled");
    }
  }
  j.end_obj();
}

const char* phys_cell_group_cfg_s::pdsch_harq_ack_codebook_opts::to_string() const
{
  static const char* names[] = {"semiStatic", "dynamic"};
  return convert_enum_idx(names, 2, value, "phys_cell_group_cfg_s::pdsch_harq_ack_codebook_e_");
}

const char* phys_cell_group_cfg_s::xscale_opts::to_string() const
{
  static const char* names[] = {"dB0", "dB6", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "phys_cell_group_cfg_s::xscale_e_");
}
uint8_t phys_cell_group_cfg_s::xscale_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 6};
  return map_enum_number(numbers, 2, value, "phys_cell_group_cfg_s::xscale_e_");
}

const char* phys_cell_group_cfg_s::harq_ack_spatial_bundling_pucch_secondary_pucch_group_r16_opts::to_string() const
{
  static const char* names[] = {"enabled", "disabled"};
  return convert_enum_idx(
      names, 2, value, "phys_cell_group_cfg_s::harq_ack_spatial_bundling_pucch_secondary_pucch_group_r16_e_");
}

const char* phys_cell_group_cfg_s::harq_ack_spatial_bundling_pusch_secondary_pucch_group_r16_opts::to_string() const
{
  static const char* names[] = {"enabled", "disabled"};
  return convert_enum_idx(
      names, 2, value, "phys_cell_group_cfg_s::harq_ack_spatial_bundling_pusch_secondary_pucch_group_r16_e_");
}

const char* phys_cell_group_cfg_s::pdsch_harq_ack_codebook_secondary_pucch_group_r16_opts::to_string() const
{
  static const char* names[] = {"semiStatic", "dynamic"};
  return convert_enum_idx(
      names, 2, value, "phys_cell_group_cfg_s::pdsch_harq_ack_codebook_secondary_pucch_group_r16_e_");
}

const char* phys_cell_group_cfg_s::nrdc_p_cmode_fr1_r16_opts::to_string() const
{
  static const char* names[] = {"semi-static-mode1", "semi-static-mode2", "dynamic"};
  return convert_enum_idx(names, 3, value, "phys_cell_group_cfg_s::nrdc_p_cmode_fr1_r16_e_");
}
uint8_t phys_cell_group_cfg_s::nrdc_p_cmode_fr1_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "phys_cell_group_cfg_s::nrdc_p_cmode_fr1_r16_e_");
}

const char* phys_cell_group_cfg_s::nrdc_p_cmode_fr2_r16_opts::to_string() const
{
  static const char* names[] = {"semi-static-mode1", "semi-static-mode2", "dynamic"};
  return convert_enum_idx(names, 3, value, "phys_cell_group_cfg_s::nrdc_p_cmode_fr2_r16_e_");
}
uint8_t phys_cell_group_cfg_s::nrdc_p_cmode_fr2_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "phys_cell_group_cfg_s::nrdc_p_cmode_fr2_r16_e_");
}

const char* phys_cell_group_cfg_s::dl_assign_idx_dci_1_2_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(names, 3, value, "phys_cell_group_cfg_s::dl_assign_idx_dci_1_2_r16_e_");
}
uint8_t phys_cell_group_cfg_s::dl_assign_idx_dci_1_2_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "phys_cell_group_cfg_s::dl_assign_idx_dci_1_2_r16_e_");
}

const char* phys_cell_group_cfg_s::ack_nack_feedback_mode_r16_opts::to_string() const
{
  static const char* names[] = {"joint", "separate"};
  return convert_enum_idx(names, 2, value, "phys_cell_group_cfg_s::ack_nack_feedback_mode_r16_e_");
}

// RLC-BearerConfig ::= SEQUENCE
SRSASN_CODE rlc_bearer_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(served_radio_bearer_present, 1));
  HANDLE_CODE(bref.pack(reestablish_rlc_present, 1));
  HANDLE_CODE(bref.pack(rlc_cfg_present, 1));
  HANDLE_CODE(bref.pack(mac_lc_ch_cfg_present, 1));

  HANDLE_CODE(pack_integer(bref, lc_ch_id, (uint8_t)1u, (uint8_t)32u));
  if (served_radio_bearer_present) {
    HANDLE_CODE(served_radio_bearer.pack(bref));
  }
  if (rlc_cfg_present) {
    HANDLE_CODE(rlc_cfg.pack(bref));
  }
  if (mac_lc_ch_cfg_present) {
    HANDLE_CODE(mac_lc_ch_cfg.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= rlc_cfg_v1610.is_present();
    group_flags[1] |= rlc_cfg_v1700.is_present();
    group_flags[1] |= lc_ch_id_ext_r17_present;
    group_flags[1] |= multicast_rlc_bearer_cfg_r17.is_present();
    group_flags[1] |= served_radio_bearer_srb4_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(rlc_cfg_v1610.is_present(), 1));
      if (rlc_cfg_v1610.is_present()) {
        HANDLE_CODE(rlc_cfg_v1610->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(rlc_cfg_v1700.is_present(), 1));
      HANDLE_CODE(bref.pack(lc_ch_id_ext_r17_present, 1));
      HANDLE_CODE(bref.pack(multicast_rlc_bearer_cfg_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(served_radio_bearer_srb4_r17_present, 1));
      if (rlc_cfg_v1700.is_present()) {
        HANDLE_CODE(rlc_cfg_v1700->pack(bref));
      }
      if (lc_ch_id_ext_r17_present) {
        HANDLE_CODE(pack_integer(bref, lc_ch_id_ext_r17, (uint32_t)320u, (uint32_t)65855u));
      }
      if (multicast_rlc_bearer_cfg_r17.is_present()) {
        HANDLE_CODE(multicast_rlc_bearer_cfg_r17->pack(bref));
      }
      if (served_radio_bearer_srb4_r17_present) {
        HANDLE_CODE(pack_integer(bref, served_radio_bearer_srb4_r17, (uint8_t)4u, (uint8_t)4u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rlc_bearer_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(served_radio_bearer_present, 1));
  HANDLE_CODE(bref.unpack(reestablish_rlc_present, 1));
  HANDLE_CODE(bref.unpack(rlc_cfg_present, 1));
  HANDLE_CODE(bref.unpack(mac_lc_ch_cfg_present, 1));

  HANDLE_CODE(unpack_integer(lc_ch_id, bref, (uint8_t)1u, (uint8_t)32u));
  if (served_radio_bearer_present) {
    HANDLE_CODE(served_radio_bearer.unpack(bref));
  }
  if (rlc_cfg_present) {
    HANDLE_CODE(rlc_cfg.unpack(bref));
  }
  if (mac_lc_ch_cfg_present) {
    HANDLE_CODE(mac_lc_ch_cfg.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(rlc_cfg_v1610, bref);
      if (rlc_cfg_v1610.is_present()) {
        HANDLE_CODE(rlc_cfg_v1610->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(rlc_cfg_v1700, bref);
      HANDLE_CODE(bref.unpack(lc_ch_id_ext_r17_present, 1));
      unpack_presence_flag(multicast_rlc_bearer_cfg_r17, bref);
      HANDLE_CODE(bref.unpack(served_radio_bearer_srb4_r17_present, 1));
      if (rlc_cfg_v1700.is_present()) {
        HANDLE_CODE(rlc_cfg_v1700->unpack(bref));
      }
      if (lc_ch_id_ext_r17_present) {
        HANDLE_CODE(unpack_integer(lc_ch_id_ext_r17, bref, (uint32_t)320u, (uint32_t)65855u));
      }
      if (multicast_rlc_bearer_cfg_r17.is_present()) {
        HANDLE_CODE(multicast_rlc_bearer_cfg_r17->unpack(bref));
      }
      if (served_radio_bearer_srb4_r17_present) {
        HANDLE_CODE(unpack_integer(served_radio_bearer_srb4_r17, bref, (uint8_t)4u, (uint8_t)4u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void rlc_bearer_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("logicalChannelIdentity", lc_ch_id);
  if (served_radio_bearer_present) {
    j.write_fieldname("servedRadioBearer");
    served_radio_bearer.to_json(j);
  }
  if (reestablish_rlc_present) {
    j.write_str("reestablishRLC", "true");
  }
  if (rlc_cfg_present) {
    j.write_fieldname("rlc-Config");
    rlc_cfg.to_json(j);
  }
  if (mac_lc_ch_cfg_present) {
    j.write_fieldname("mac-LogicalChannelConfig");
    mac_lc_ch_cfg.to_json(j);
  }
  if (ext) {
    if (rlc_cfg_v1610.is_present()) {
      j.write_fieldname("rlc-Config-v1610");
      rlc_cfg_v1610->to_json(j);
    }
    if (rlc_cfg_v1700.is_present()) {
      j.write_fieldname("rlc-Config-v1700");
      rlc_cfg_v1700->to_json(j);
    }
    if (lc_ch_id_ext_r17_present) {
      j.write_int("logicalChannelIdentityExt-r17", lc_ch_id_ext_r17);
    }
    if (multicast_rlc_bearer_cfg_r17.is_present()) {
      j.write_fieldname("multicastRLC-BearerConfig-r17");
      multicast_rlc_bearer_cfg_r17->to_json(j);
    }
    if (served_radio_bearer_srb4_r17_present) {
      j.write_int("servedRadioBearerSRB4-r17", served_radio_bearer_srb4_r17);
    }
  }
  j.end_obj();
}

void rlc_bearer_cfg_s::served_radio_bearer_c_::destroy_() {}
void rlc_bearer_cfg_s::served_radio_bearer_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
rlc_bearer_cfg_s::served_radio_bearer_c_::served_radio_bearer_c_(const rlc_bearer_cfg_s::served_radio_bearer_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::srb_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::drb_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlc_bearer_cfg_s::served_radio_bearer_c_");
  }
}
rlc_bearer_cfg_s::served_radio_bearer_c_&
rlc_bearer_cfg_s::served_radio_bearer_c_::operator=(const rlc_bearer_cfg_s::served_radio_bearer_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::srb_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::drb_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rlc_bearer_cfg_s::served_radio_bearer_c_");
  }

  return *this;
}
uint8_t& rlc_bearer_cfg_s::served_radio_bearer_c_::set_srb_id()
{
  set(types::srb_id);
  return c.get<uint8_t>();
}
uint8_t& rlc_bearer_cfg_s::served_radio_bearer_c_::set_drb_id()
{
  set(types::drb_id);
  return c.get<uint8_t>();
}
void rlc_bearer_cfg_s::served_radio_bearer_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::srb_id:
      j.write_int("srb-Identity", c.get<uint8_t>());
      break;
    case types::drb_id:
      j.write_int("drb-Identity", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "rlc_bearer_cfg_s::served_radio_bearer_c_");
  }
  j.end_obj();
}
SRSASN_CODE rlc_bearer_cfg_s::served_radio_bearer_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::srb_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)3u));
      break;
    case types::drb_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)32u));
      break;
    default:
      log_invalid_choice_id(type_, "rlc_bearer_cfg_s::served_radio_bearer_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rlc_bearer_cfg_s::served_radio_bearer_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::srb_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)3u));
      break;
    case types::drb_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)32u));
      break;
    default:
      log_invalid_choice_id(type_, "rlc_bearer_cfg_s::served_radio_bearer_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rlc_bearer_cfg_s::served_radio_bearer_c_::types_opts::to_string() const
{
  static const char* names[] = {"srb-Identity", "drb-Identity"};
  return convert_enum_idx(names, 2, value, "rlc_bearer_cfg_s::served_radio_bearer_c_::types");
}

// SCellConfig ::= SEQUENCE
SRSASN_CODE scell_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(scell_cfg_common_present, 1));
  HANDLE_CODE(bref.pack(scell_cfg_ded_present, 1));

  HANDLE_CODE(pack_integer(bref, scell_idx, (uint8_t)1u, (uint8_t)31u));
  if (scell_cfg_common_present) {
    HANDLE_CODE(scell_cfg_common.pack(bref));
  }
  if (scell_cfg_ded_present) {
    HANDLE_CODE(scell_cfg_ded.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= smtc.is_present();
    group_flags[1] |= scell_state_r16_present;
    group_flags[1] |= secondary_drx_group_cfg_r16_present;
    group_flags[2] |= pre_conf_gap_status_r17_present;
    group_flags[2] |= good_serving_cell_eval_bfd_r17.is_present();
    group_flags[2] |= scell_sib20_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(smtc.is_present(), 1));
      if (smtc.is_present()) {
        HANDLE_CODE(smtc->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(scell_state_r16_present, 1));
      HANDLE_CODE(bref.pack(secondary_drx_group_cfg_r16_present, 1));
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(pre_conf_gap_status_r17_present, 1));
      HANDLE_CODE(bref.pack(good_serving_cell_eval_bfd_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(scell_sib20_r17.is_present(), 1));
      if (pre_conf_gap_status_r17_present) {
        HANDLE_CODE(pre_conf_gap_status_r17.pack(bref));
      }
      if (good_serving_cell_eval_bfd_r17.is_present()) {
        HANDLE_CODE(good_serving_cell_eval_bfd_r17->pack(bref));
      }
      if (scell_sib20_r17.is_present()) {
        HANDLE_CODE(scell_sib20_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(scell_cfg_common_present, 1));
  HANDLE_CODE(bref.unpack(scell_cfg_ded_present, 1));

  HANDLE_CODE(unpack_integer(scell_idx, bref, (uint8_t)1u, (uint8_t)31u));
  if (scell_cfg_common_present) {
    HANDLE_CODE(scell_cfg_common.unpack(bref));
  }
  if (scell_cfg_ded_present) {
    HANDLE_CODE(scell_cfg_ded.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(3);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(smtc, bref);
      if (smtc.is_present()) {
        HANDLE_CODE(smtc->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(scell_state_r16_present, 1));
      HANDLE_CODE(bref.unpack(secondary_drx_group_cfg_r16_present, 1));
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(pre_conf_gap_status_r17_present, 1));
      unpack_presence_flag(good_serving_cell_eval_bfd_r17, bref);
      unpack_presence_flag(scell_sib20_r17, bref);
      if (pre_conf_gap_status_r17_present) {
        HANDLE_CODE(pre_conf_gap_status_r17.unpack(bref));
      }
      if (good_serving_cell_eval_bfd_r17.is_present()) {
        HANDLE_CODE(good_serving_cell_eval_bfd_r17->unpack(bref));
      }
      if (scell_sib20_r17.is_present()) {
        HANDLE_CODE(scell_sib20_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void scell_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sCellIndex", scell_idx);
  if (scell_cfg_common_present) {
    j.write_fieldname("sCellConfigCommon");
    scell_cfg_common.to_json(j);
  }
  if (scell_cfg_ded_present) {
    j.write_fieldname("sCellConfigDedicated");
    scell_cfg_ded.to_json(j);
  }
  if (ext) {
    if (smtc.is_present()) {
      j.write_fieldname("smtc");
      smtc->to_json(j);
    }
    if (scell_state_r16_present) {
      j.write_str("sCellState-r16", "activated");
    }
    if (secondary_drx_group_cfg_r16_present) {
      j.write_str("secondaryDRX-GroupConfig-r16", "true");
    }
    if (pre_conf_gap_status_r17_present) {
      j.write_str("preConfGapStatus-r17", pre_conf_gap_status_r17.to_string());
    }
    if (good_serving_cell_eval_bfd_r17.is_present()) {
      j.write_fieldname("goodServingCellEvaluationBFD-r17");
      good_serving_cell_eval_bfd_r17->to_json(j);
    }
    if (scell_sib20_r17.is_present()) {
      j.write_fieldname("sCellSIB20-r17");
      scell_sib20_r17->to_json(j);
    }
  }
  j.end_obj();
}

// SpCellConfig ::= SEQUENCE
SRSASN_CODE sp_cell_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(serv_cell_idx_present, 1));
  HANDLE_CODE(bref.pack(recfg_with_sync_present, 1));
  HANDLE_CODE(bref.pack(rlf_timers_and_consts_present, 1));
  HANDLE_CODE(bref.pack(rlm_in_sync_out_of_sync_thres_present, 1));
  HANDLE_CODE(bref.pack(sp_cell_cfg_ded_present, 1));

  if (serv_cell_idx_present) {
    HANDLE_CODE(pack_integer(bref, serv_cell_idx, (uint8_t)0u, (uint8_t)31u));
  }
  if (recfg_with_sync_present) {
    HANDLE_CODE(recfg_with_sync.pack(bref));
  }
  if (rlf_timers_and_consts_present) {
    HANDLE_CODE(rlf_timers_and_consts.pack(bref));
  }
  if (sp_cell_cfg_ded_present) {
    HANDLE_CODE(sp_cell_cfg_ded.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= low_mob_eval_connected_r17.is_present();
    group_flags[0] |= good_serving_cell_eval_rlm_r17.is_present();
    group_flags[0] |= good_serving_cell_eval_bfd_r17.is_present();
    group_flags[0] |= deactiv_scg_cfg_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(low_mob_eval_connected_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(good_serving_cell_eval_rlm_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(good_serving_cell_eval_bfd_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(deactiv_scg_cfg_r17.is_present(), 1));
      if (low_mob_eval_connected_r17.is_present()) {
        HANDLE_CODE(low_mob_eval_connected_r17->s_search_delta_p_connected_r17.pack(bref));
        HANDLE_CODE(low_mob_eval_connected_r17->t_search_delta_p_connected_r17.pack(bref));
      }
      if (good_serving_cell_eval_rlm_r17.is_present()) {
        HANDLE_CODE(good_serving_cell_eval_rlm_r17->pack(bref));
      }
      if (good_serving_cell_eval_bfd_r17.is_present()) {
        HANDLE_CODE(good_serving_cell_eval_bfd_r17->pack(bref));
      }
      if (deactiv_scg_cfg_r17.is_present()) {
        HANDLE_CODE(deactiv_scg_cfg_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sp_cell_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(serv_cell_idx_present, 1));
  HANDLE_CODE(bref.unpack(recfg_with_sync_present, 1));
  HANDLE_CODE(bref.unpack(rlf_timers_and_consts_present, 1));
  HANDLE_CODE(bref.unpack(rlm_in_sync_out_of_sync_thres_present, 1));
  HANDLE_CODE(bref.unpack(sp_cell_cfg_ded_present, 1));

  if (serv_cell_idx_present) {
    HANDLE_CODE(unpack_integer(serv_cell_idx, bref, (uint8_t)0u, (uint8_t)31u));
  }
  if (recfg_with_sync_present) {
    HANDLE_CODE(recfg_with_sync.unpack(bref));
  }
  if (rlf_timers_and_consts_present) {
    HANDLE_CODE(rlf_timers_and_consts.unpack(bref));
  }
  if (sp_cell_cfg_ded_present) {
    HANDLE_CODE(sp_cell_cfg_ded.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(low_mob_eval_connected_r17, bref);
      unpack_presence_flag(good_serving_cell_eval_rlm_r17, bref);
      unpack_presence_flag(good_serving_cell_eval_bfd_r17, bref);
      unpack_presence_flag(deactiv_scg_cfg_r17, bref);
      if (low_mob_eval_connected_r17.is_present()) {
        HANDLE_CODE(low_mob_eval_connected_r17->s_search_delta_p_connected_r17.unpack(bref));
        HANDLE_CODE(low_mob_eval_connected_r17->t_search_delta_p_connected_r17.unpack(bref));
      }
      if (good_serving_cell_eval_rlm_r17.is_present()) {
        HANDLE_CODE(good_serving_cell_eval_rlm_r17->unpack(bref));
      }
      if (good_serving_cell_eval_bfd_r17.is_present()) {
        HANDLE_CODE(good_serving_cell_eval_bfd_r17->unpack(bref));
      }
      if (deactiv_scg_cfg_r17.is_present()) {
        HANDLE_CODE(deactiv_scg_cfg_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sp_cell_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (serv_cell_idx_present) {
    j.write_int("servCellIndex", serv_cell_idx);
  }
  if (recfg_with_sync_present) {
    j.write_fieldname("reconfigurationWithSync");
    recfg_with_sync.to_json(j);
  }
  if (rlf_timers_and_consts_present) {
    j.write_fieldname("rlf-TimersAndConstants");
    rlf_timers_and_consts.to_json(j);
  }
  if (rlm_in_sync_out_of_sync_thres_present) {
    j.write_str("rlmInSyncOutOfSyncThreshold", "n1");
  }
  if (sp_cell_cfg_ded_present) {
    j.write_fieldname("spCellConfigDedicated");
    sp_cell_cfg_ded.to_json(j);
  }
  if (ext) {
    if (low_mob_eval_connected_r17.is_present()) {
      j.write_fieldname("lowMobilityEvaluationConnected-r17");
      j.start_obj();
      j.write_str("s-SearchDeltaP-Connected-r17",
                  low_mob_eval_connected_r17->s_search_delta_p_connected_r17.to_string());
      j.write_str("t-SearchDeltaP-Connected-r17",
                  low_mob_eval_connected_r17->t_search_delta_p_connected_r17.to_string());
      j.end_obj();
    }
    if (good_serving_cell_eval_rlm_r17.is_present()) {
      j.write_fieldname("goodServingCellEvaluationRLM-r17");
      good_serving_cell_eval_rlm_r17->to_json(j);
    }
    if (good_serving_cell_eval_bfd_r17.is_present()) {
      j.write_fieldname("goodServingCellEvaluationBFD-r17");
      good_serving_cell_eval_bfd_r17->to_json(j);
    }
    if (deactiv_scg_cfg_r17.is_present()) {
      j.write_fieldname("deactivatedSCG-Config-r17");
      deactiv_scg_cfg_r17->to_json(j);
    }
  }
  j.end_obj();
}

const char* sp_cell_cfg_s::low_mob_eval_connected_r17_s_::s_search_delta_p_connected_r17_opts::to_string() const
{
  static const char* names[] = {"dB3", "dB6", "dB9", "dB12", "dB15", "spare3", "spare2", "spare1"};
  return convert_enum_idx(
      names, 8, value, "sp_cell_cfg_s::low_mob_eval_connected_r17_s_::s_search_delta_p_connected_r17_e_");
}
uint8_t sp_cell_cfg_s::low_mob_eval_connected_r17_s_::s_search_delta_p_connected_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {3, 6, 9, 12, 15};
  return map_enum_number(
      numbers, 5, value, "sp_cell_cfg_s::low_mob_eval_connected_r17_s_::s_search_delta_p_connected_r17_e_");
}

const char* sp_cell_cfg_s::low_mob_eval_connected_r17_s_::t_search_delta_p_connected_r17_opts::to_string() const
{
  static const char* names[] = {"s5",
                                "s10",
                                "s20",
                                "s30",
                                "s60",
                                "s120",
                                "s180",
                                "s240",
                                "s300",
                                "spare7",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(
      names, 16, value, "sp_cell_cfg_s::low_mob_eval_connected_r17_s_::t_search_delta_p_connected_r17_e_");
}
uint16_t sp_cell_cfg_s::low_mob_eval_connected_r17_s_::t_search_delta_p_connected_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {5, 10, 20, 30, 60, 120, 180, 240, 300};
  return map_enum_number(
      numbers, 9, value, "sp_cell_cfg_s::low_mob_eval_connected_r17_s_::t_search_delta_p_connected_r17_e_");
}

// Uu-RelayRLC-ChannelConfig-r17 ::= SEQUENCE
SRSASN_CODE uu_relay_rlc_ch_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(uu_lc_ch_id_r17_present, 1));
  HANDLE_CODE(bref.pack(reestablish_rlc_r17_present, 1));
  HANDLE_CODE(bref.pack(rlc_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(mac_lc_ch_cfg_r17_present, 1));

  if (uu_lc_ch_id_r17_present) {
    HANDLE_CODE(pack_integer(bref, uu_lc_ch_id_r17, (uint8_t)1u, (uint8_t)32u));
  }
  HANDLE_CODE(pack_integer(bref, uu_relay_rlc_ch_id_r17, (uint8_t)1u, (uint8_t)32u));
  if (rlc_cfg_r17_present) {
    HANDLE_CODE(rlc_cfg_r17.pack(bref));
  }
  if (mac_lc_ch_cfg_r17_present) {
    HANDLE_CODE(mac_lc_ch_cfg_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE uu_relay_rlc_ch_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(uu_lc_ch_id_r17_present, 1));
  HANDLE_CODE(bref.unpack(reestablish_rlc_r17_present, 1));
  HANDLE_CODE(bref.unpack(rlc_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(mac_lc_ch_cfg_r17_present, 1));

  if (uu_lc_ch_id_r17_present) {
    HANDLE_CODE(unpack_integer(uu_lc_ch_id_r17, bref, (uint8_t)1u, (uint8_t)32u));
  }
  HANDLE_CODE(unpack_integer(uu_relay_rlc_ch_id_r17, bref, (uint8_t)1u, (uint8_t)32u));
  if (rlc_cfg_r17_present) {
    HANDLE_CODE(rlc_cfg_r17.unpack(bref));
  }
  if (mac_lc_ch_cfg_r17_present) {
    HANDLE_CODE(mac_lc_ch_cfg_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void uu_relay_rlc_ch_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (uu_lc_ch_id_r17_present) {
    j.write_int("uu-LogicalChannelIdentity-r17", uu_lc_ch_id_r17);
  }
  j.write_int("uu-RelayRLC-ChannelID-r17", uu_relay_rlc_ch_id_r17);
  if (reestablish_rlc_r17_present) {
    j.write_str("reestablishRLC-r17", "true");
  }
  if (rlc_cfg_r17_present) {
    j.write_fieldname("rlc-Config-r17");
    rlc_cfg_r17.to_json(j);
  }
  if (mac_lc_ch_cfg_r17_present) {
    j.write_fieldname("mac-LogicalChannelConfig-r17");
    mac_lc_ch_cfg_r17.to_json(j);
  }
  j.end_obj();
}

// CellGroupConfig ::= SEQUENCE
SRSASN_CODE cell_group_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(rlc_bearer_to_add_mod_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(rlc_bearer_to_release_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(mac_cell_group_cfg_present, 1));
  HANDLE_CODE(bref.pack(phys_cell_group_cfg_present, 1));
  HANDLE_CODE(bref.pack(sp_cell_cfg_present, 1));
  HANDLE_CODE(bref.pack(scell_to_add_mod_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(scell_to_release_list.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, cell_group_id, (uint8_t)0u, (uint8_t)3u));
  if (rlc_bearer_to_add_mod_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, rlc_bearer_to_add_mod_list, 1, 32));
  }
  if (rlc_bearer_to_release_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, rlc_bearer_to_release_list, 1, 32, integer_packer<uint8_t>(1, 32)));
  }
  if (mac_cell_group_cfg_present) {
    HANDLE_CODE(mac_cell_group_cfg.pack(bref));
  }
  if (phys_cell_group_cfg_present) {
    HANDLE_CODE(phys_cell_group_cfg.pack(bref));
  }
  if (sp_cell_cfg_present) {
    HANDLE_CODE(sp_cell_cfg.pack(bref));
  }
  if (scell_to_add_mod_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, scell_to_add_mod_list, 1, 31));
  }
  if (scell_to_release_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, scell_to_release_list, 1, 31, integer_packer<uint8_t>(1, 31)));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= report_ul_tx_direct_current_present;
    group_flags[1] |= bap_address_r16_present;
    group_flags[1] |= bh_rlc_ch_to_add_mod_list_r16.is_present();
    group_flags[1] |= bh_rlc_ch_to_release_list_r16.is_present();
    group_flags[1] |= f1c_transfer_path_r16_present;
    group_flags[1] |= simul_tci_upd_list1_r16.is_present();
    group_flags[1] |= simul_tci_upd_list2_r16.is_present();
    group_flags[1] |= simul_spatial_upd_list1_r16.is_present();
    group_flags[1] |= simul_spatial_upd_list2_r16.is_present();
    group_flags[1] |= ul_tx_switching_option_r16_present;
    group_flags[1] |= ul_tx_switching_pwr_boosting_r16_present;
    group_flags[2] |= report_ul_tx_direct_current_two_carrier_r16_present;
    group_flags[3] |= f1c_transfer_path_nrdc_r17_present;
    group_flags[3] |= ul_tx_switching_2_t_mode_r17_present;
    group_flags[3] |= ul_tx_switching_dual_ul_tx_state_r17_present;
    group_flags[3] |= uu_relay_rlc_ch_to_add_mod_list_r17.is_present();
    group_flags[3] |= uu_relay_rlc_ch_to_release_list_r17.is_present();
    group_flags[3] |= simul_u_tci_upd_list1_r17.is_present();
    group_flags[3] |= simul_u_tci_upd_list2_r17.is_present();
    group_flags[3] |= simul_u_tci_upd_list3_r17.is_present();
    group_flags[3] |= simul_u_tci_upd_list4_r17.is_present();
    group_flags[3] |= rlc_bearer_to_release_list_ext_r17.is_present();
    group_flags[3] |= iab_res_cfg_to_add_mod_list_r17.is_present();
    group_flags[3] |= iab_res_cfg_to_release_list_r17.is_present();
    group_flags[4] |= report_ul_tx_direct_current_more_carrier_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(report_ul_tx_direct_current_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(bap_address_r16_present, 1));
      HANDLE_CODE(bref.pack(bh_rlc_ch_to_add_mod_list_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(bh_rlc_ch_to_release_list_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(f1c_transfer_path_r16_present, 1));
      HANDLE_CODE(bref.pack(simul_tci_upd_list1_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(simul_tci_upd_list2_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(simul_spatial_upd_list1_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(simul_spatial_upd_list2_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(ul_tx_switching_option_r16_present, 1));
      HANDLE_CODE(bref.pack(ul_tx_switching_pwr_boosting_r16_present, 1));
      if (bap_address_r16_present) {
        HANDLE_CODE(bap_address_r16.pack(bref));
      }
      if (bh_rlc_ch_to_add_mod_list_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *bh_rlc_ch_to_add_mod_list_r16, 1, 65536));
      }
      if (bh_rlc_ch_to_release_list_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *bh_rlc_ch_to_release_list_r16, 1, 65536));
      }
      if (f1c_transfer_path_r16_present) {
        HANDLE_CODE(f1c_transfer_path_r16.pack(bref));
      }
      if (simul_tci_upd_list1_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *simul_tci_upd_list1_r16, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (simul_tci_upd_list2_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *simul_tci_upd_list2_r16, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (simul_spatial_upd_list1_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *simul_spatial_upd_list1_r16, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (simul_spatial_upd_list2_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *simul_spatial_upd_list2_r16, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (ul_tx_switching_option_r16_present) {
        HANDLE_CODE(ul_tx_switching_option_r16.pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(report_ul_tx_direct_current_two_carrier_r16_present, 1));
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(f1c_transfer_path_nrdc_r17_present, 1));
      HANDLE_CODE(bref.pack(ul_tx_switching_2_t_mode_r17_present, 1));
      HANDLE_CODE(bref.pack(ul_tx_switching_dual_ul_tx_state_r17_present, 1));
      HANDLE_CODE(bref.pack(uu_relay_rlc_ch_to_add_mod_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(uu_relay_rlc_ch_to_release_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(simul_u_tci_upd_list1_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(simul_u_tci_upd_list2_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(simul_u_tci_upd_list3_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(simul_u_tci_upd_list4_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(rlc_bearer_to_release_list_ext_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(iab_res_cfg_to_add_mod_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(iab_res_cfg_to_release_list_r17.is_present(), 1));
      if (f1c_transfer_path_nrdc_r17_present) {
        HANDLE_CODE(f1c_transfer_path_nrdc_r17.pack(bref));
      }
      if (ul_tx_switching_dual_ul_tx_state_r17_present) {
        HANDLE_CODE(ul_tx_switching_dual_ul_tx_state_r17.pack(bref));
      }
      if (uu_relay_rlc_ch_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *uu_relay_rlc_ch_to_add_mod_list_r17, 1, 32));
      }
      if (uu_relay_rlc_ch_to_release_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *uu_relay_rlc_ch_to_release_list_r17, 1, 32, integer_packer<uint8_t>(1, 32)));
      }
      if (simul_u_tci_upd_list1_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *simul_u_tci_upd_list1_r17, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (simul_u_tci_upd_list2_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *simul_u_tci_upd_list2_r17, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (simul_u_tci_upd_list3_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *simul_u_tci_upd_list3_r17, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (simul_u_tci_upd_list4_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *simul_u_tci_upd_list4_r17, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (rlc_bearer_to_release_list_ext_r17.is_present()) {
        HANDLE_CODE(
            pack_dyn_seq_of(bref, *rlc_bearer_to_release_list_ext_r17, 1, 32, integer_packer<uint32_t>(320, 65855)));
      }
      if (iab_res_cfg_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *iab_res_cfg_to_add_mod_list_r17, 1, 65536));
      }
      if (iab_res_cfg_to_release_list_r17.is_present()) {
        HANDLE_CODE(
            pack_dyn_seq_of(bref, *iab_res_cfg_to_release_list_r17, 1, 65536, integer_packer<uint32_t>(0, 65535)));
      }
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(report_ul_tx_direct_current_more_carrier_r17.is_present(), 1));
      if (report_ul_tx_direct_current_more_carrier_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *report_ul_tx_direct_current_more_carrier_r17, 1, 32));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cell_group_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool rlc_bearer_to_add_mod_list_present;
  HANDLE_CODE(bref.unpack(rlc_bearer_to_add_mod_list_present, 1));
  bool rlc_bearer_to_release_list_present;
  HANDLE_CODE(bref.unpack(rlc_bearer_to_release_list_present, 1));
  HANDLE_CODE(bref.unpack(mac_cell_group_cfg_present, 1));
  HANDLE_CODE(bref.unpack(phys_cell_group_cfg_present, 1));
  HANDLE_CODE(bref.unpack(sp_cell_cfg_present, 1));
  bool scell_to_add_mod_list_present;
  HANDLE_CODE(bref.unpack(scell_to_add_mod_list_present, 1));
  bool scell_to_release_list_present;
  HANDLE_CODE(bref.unpack(scell_to_release_list_present, 1));

  HANDLE_CODE(unpack_integer(cell_group_id, bref, (uint8_t)0u, (uint8_t)3u));
  if (rlc_bearer_to_add_mod_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(rlc_bearer_to_add_mod_list, bref, 1, 32));
  }
  if (rlc_bearer_to_release_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(rlc_bearer_to_release_list, bref, 1, 32, integer_packer<uint8_t>(1, 32)));
  }
  if (mac_cell_group_cfg_present) {
    HANDLE_CODE(mac_cell_group_cfg.unpack(bref));
  }
  if (phys_cell_group_cfg_present) {
    HANDLE_CODE(phys_cell_group_cfg.unpack(bref));
  }
  if (sp_cell_cfg_present) {
    HANDLE_CODE(sp_cell_cfg.unpack(bref));
  }
  if (scell_to_add_mod_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(scell_to_add_mod_list, bref, 1, 31));
  }
  if (scell_to_release_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(scell_to_release_list, bref, 1, 31, integer_packer<uint8_t>(1, 31)));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(5);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(report_ul_tx_direct_current_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(bap_address_r16_present, 1));
      unpack_presence_flag(bh_rlc_ch_to_add_mod_list_r16, bref);
      unpack_presence_flag(bh_rlc_ch_to_release_list_r16, bref);
      HANDLE_CODE(bref.unpack(f1c_transfer_path_r16_present, 1));
      unpack_presence_flag(simul_tci_upd_list1_r16, bref);
      unpack_presence_flag(simul_tci_upd_list2_r16, bref);
      unpack_presence_flag(simul_spatial_upd_list1_r16, bref);
      unpack_presence_flag(simul_spatial_upd_list2_r16, bref);
      HANDLE_CODE(bref.unpack(ul_tx_switching_option_r16_present, 1));
      HANDLE_CODE(bref.unpack(ul_tx_switching_pwr_boosting_r16_present, 1));
      if (bap_address_r16_present) {
        HANDLE_CODE(bap_address_r16.unpack(bref));
      }
      if (bh_rlc_ch_to_add_mod_list_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*bh_rlc_ch_to_add_mod_list_r16, bref, 1, 65536));
      }
      if (bh_rlc_ch_to_release_list_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*bh_rlc_ch_to_release_list_r16, bref, 1, 65536));
      }
      if (f1c_transfer_path_r16_present) {
        HANDLE_CODE(f1c_transfer_path_r16.unpack(bref));
      }
      if (simul_tci_upd_list1_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*simul_tci_upd_list1_r16, bref, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (simul_tci_upd_list2_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*simul_tci_upd_list2_r16, bref, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (simul_spatial_upd_list1_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*simul_spatial_upd_list1_r16, bref, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (simul_spatial_upd_list2_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*simul_spatial_upd_list2_r16, bref, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (ul_tx_switching_option_r16_present) {
        HANDLE_CODE(ul_tx_switching_option_r16.unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(report_ul_tx_direct_current_two_carrier_r16_present, 1));
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(f1c_transfer_path_nrdc_r17_present, 1));
      HANDLE_CODE(bref.unpack(ul_tx_switching_2_t_mode_r17_present, 1));
      HANDLE_CODE(bref.unpack(ul_tx_switching_dual_ul_tx_state_r17_present, 1));
      unpack_presence_flag(uu_relay_rlc_ch_to_add_mod_list_r17, bref);
      unpack_presence_flag(uu_relay_rlc_ch_to_release_list_r17, bref);
      unpack_presence_flag(simul_u_tci_upd_list1_r17, bref);
      unpack_presence_flag(simul_u_tci_upd_list2_r17, bref);
      unpack_presence_flag(simul_u_tci_upd_list3_r17, bref);
      unpack_presence_flag(simul_u_tci_upd_list4_r17, bref);
      unpack_presence_flag(rlc_bearer_to_release_list_ext_r17, bref);
      unpack_presence_flag(iab_res_cfg_to_add_mod_list_r17, bref);
      unpack_presence_flag(iab_res_cfg_to_release_list_r17, bref);
      if (f1c_transfer_path_nrdc_r17_present) {
        HANDLE_CODE(f1c_transfer_path_nrdc_r17.unpack(bref));
      }
      if (ul_tx_switching_dual_ul_tx_state_r17_present) {
        HANDLE_CODE(ul_tx_switching_dual_ul_tx_state_r17.unpack(bref));
      }
      if (uu_relay_rlc_ch_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*uu_relay_rlc_ch_to_add_mod_list_r17, bref, 1, 32));
      }
      if (uu_relay_rlc_ch_to_release_list_r17.is_present()) {
        HANDLE_CODE(
            unpack_dyn_seq_of(*uu_relay_rlc_ch_to_release_list_r17, bref, 1, 32, integer_packer<uint8_t>(1, 32)));
      }
      if (simul_u_tci_upd_list1_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*simul_u_tci_upd_list1_r17, bref, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (simul_u_tci_upd_list2_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*simul_u_tci_upd_list2_r17, bref, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (simul_u_tci_upd_list3_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*simul_u_tci_upd_list3_r17, bref, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (simul_u_tci_upd_list4_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*simul_u_tci_upd_list4_r17, bref, 1, 32, integer_packer<uint8_t>(0, 31)));
      }
      if (rlc_bearer_to_release_list_ext_r17.is_present()) {
        HANDLE_CODE(
            unpack_dyn_seq_of(*rlc_bearer_to_release_list_ext_r17, bref, 1, 32, integer_packer<uint32_t>(320, 65855)));
      }
      if (iab_res_cfg_to_add_mod_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*iab_res_cfg_to_add_mod_list_r17, bref, 1, 65536));
      }
      if (iab_res_cfg_to_release_list_r17.is_present()) {
        HANDLE_CODE(
            unpack_dyn_seq_of(*iab_res_cfg_to_release_list_r17, bref, 1, 65536, integer_packer<uint32_t>(0, 65535)));
      }
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(report_ul_tx_direct_current_more_carrier_r17, bref);
      if (report_ul_tx_direct_current_more_carrier_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*report_ul_tx_direct_current_more_carrier_r17, bref, 1, 32));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void cell_group_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("cellGroupId", cell_group_id);
  if (rlc_bearer_to_add_mod_list.size() > 0) {
    j.start_array("rlc-BearerToAddModList");
    for (const auto& e1 : rlc_bearer_to_add_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (rlc_bearer_to_release_list.size() > 0) {
    j.start_array("rlc-BearerToReleaseList");
    for (const auto& e1 : rlc_bearer_to_release_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (mac_cell_group_cfg_present) {
    j.write_fieldname("mac-CellGroupConfig");
    mac_cell_group_cfg.to_json(j);
  }
  if (phys_cell_group_cfg_present) {
    j.write_fieldname("physicalCellGroupConfig");
    phys_cell_group_cfg.to_json(j);
  }
  if (sp_cell_cfg_present) {
    j.write_fieldname("spCellConfig");
    sp_cell_cfg.to_json(j);
  }
  if (scell_to_add_mod_list.size() > 0) {
    j.start_array("sCellToAddModList");
    for (const auto& e1 : scell_to_add_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (scell_to_release_list.size() > 0) {
    j.start_array("sCellToReleaseList");
    for (const auto& e1 : scell_to_release_list) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ext) {
    if (report_ul_tx_direct_current_present) {
      j.write_str("reportUplinkTxDirectCurrent", "true");
    }
    if (bap_address_r16_present) {
      j.write_str("bap-Address-r16", bap_address_r16.to_string());
    }
    if (bh_rlc_ch_to_add_mod_list_r16.is_present()) {
      j.start_array("bh-RLC-ChannelToAddModList-r16");
      for (const auto& e1 : *bh_rlc_ch_to_add_mod_list_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (bh_rlc_ch_to_release_list_r16.is_present()) {
      j.start_array("bh-RLC-ChannelToReleaseList-r16");
      for (const auto& e1 : *bh_rlc_ch_to_release_list_r16) {
        j.write_str(e1.to_string());
      }
      j.end_array();
    }
    if (f1c_transfer_path_r16_present) {
      j.write_str("f1c-TransferPath-r16", f1c_transfer_path_r16.to_string());
    }
    if (simul_tci_upd_list1_r16.is_present()) {
      j.start_array("simultaneousTCI-UpdateList1-r16");
      for (const auto& e1 : *simul_tci_upd_list1_r16) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (simul_tci_upd_list2_r16.is_present()) {
      j.start_array("simultaneousTCI-UpdateList2-r16");
      for (const auto& e1 : *simul_tci_upd_list2_r16) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (simul_spatial_upd_list1_r16.is_present()) {
      j.start_array("simultaneousSpatial-UpdatedList1-r16");
      for (const auto& e1 : *simul_spatial_upd_list1_r16) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (simul_spatial_upd_list2_r16.is_present()) {
      j.start_array("simultaneousSpatial-UpdatedList2-r16");
      for (const auto& e1 : *simul_spatial_upd_list2_r16) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (ul_tx_switching_option_r16_present) {
      j.write_str("uplinkTxSwitchingOption-r16", ul_tx_switching_option_r16.to_string());
    }
    if (ul_tx_switching_pwr_boosting_r16_present) {
      j.write_str("uplinkTxSwitchingPowerBoosting-r16", "enabled");
    }
    if (report_ul_tx_direct_current_two_carrier_r16_present) {
      j.write_str("reportUplinkTxDirectCurrentTwoCarrier-r16", "true");
    }
    if (f1c_transfer_path_nrdc_r17_present) {
      j.write_str("f1c-TransferPathNRDC-r17", f1c_transfer_path_nrdc_r17.to_string());
    }
    if (ul_tx_switching_2_t_mode_r17_present) {
      j.write_str("uplinkTxSwitching-2T-Mode-r17", "enabled");
    }
    if (ul_tx_switching_dual_ul_tx_state_r17_present) {
      j.write_str("uplinkTxSwitching-DualUL-TxState-r17", ul_tx_switching_dual_ul_tx_state_r17.to_string());
    }
    if (uu_relay_rlc_ch_to_add_mod_list_r17.is_present()) {
      j.start_array("uu-RelayRLC-ChannelToAddModList-r17");
      for (const auto& e1 : *uu_relay_rlc_ch_to_add_mod_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (uu_relay_rlc_ch_to_release_list_r17.is_present()) {
      j.start_array("uu-RelayRLC-ChannelToReleaseList-r17");
      for (const auto& e1 : *uu_relay_rlc_ch_to_release_list_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (simul_u_tci_upd_list1_r17.is_present()) {
      j.start_array("simultaneousU-TCI-UpdateList1-r17");
      for (const auto& e1 : *simul_u_tci_upd_list1_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (simul_u_tci_upd_list2_r17.is_present()) {
      j.start_array("simultaneousU-TCI-UpdateList2-r17");
      for (const auto& e1 : *simul_u_tci_upd_list2_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (simul_u_tci_upd_list3_r17.is_present()) {
      j.start_array("simultaneousU-TCI-UpdateList3-r17");
      for (const auto& e1 : *simul_u_tci_upd_list3_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (simul_u_tci_upd_list4_r17.is_present()) {
      j.start_array("simultaneousU-TCI-UpdateList4-r17");
      for (const auto& e1 : *simul_u_tci_upd_list4_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (rlc_bearer_to_release_list_ext_r17.is_present()) {
      j.start_array("rlc-BearerToReleaseListExt-r17");
      for (const auto& e1 : *rlc_bearer_to_release_list_ext_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (iab_res_cfg_to_add_mod_list_r17.is_present()) {
      j.start_array("iab-ResourceConfigToAddModList-r17");
      for (const auto& e1 : *iab_res_cfg_to_add_mod_list_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (iab_res_cfg_to_release_list_r17.is_present()) {
      j.start_array("iab-ResourceConfigToReleaseList-r17");
      for (const auto& e1 : *iab_res_cfg_to_release_list_r17) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (report_ul_tx_direct_current_more_carrier_r17.is_present()) {
      j.start_array("reportUplinkTxDirectCurrentMoreCarrier-r17");
      for (const auto& e1 : *report_ul_tx_direct_current_more_carrier_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

const char* cell_group_cfg_s::f1c_transfer_path_r16_opts::to_string() const
{
  static const char* names[] = {"lte", "nr", "both"};
  return convert_enum_idx(names, 3, value, "cell_group_cfg_s::f1c_transfer_path_r16_e_");
}

const char* cell_group_cfg_s::ul_tx_switching_option_r16_opts::to_string() const
{
  static const char* names[] = {"switchedUL", "dualUL"};
  return convert_enum_idx(names, 2, value, "cell_group_cfg_s::ul_tx_switching_option_r16_e_");
}

const char* cell_group_cfg_s::f1c_transfer_path_nrdc_r17_opts::to_string() const
{
  static const char* names[] = {"mcg", "scg", "both"};
  return convert_enum_idx(names, 3, value, "cell_group_cfg_s::f1c_transfer_path_nrdc_r17_e_");
}

const char* cell_group_cfg_s::ul_tx_switching_dual_ul_tx_state_r17_opts::to_string() const
{
  static const char* names[] = {"oneT", "twoT"};
  return convert_enum_idx(names, 2, value, "cell_group_cfg_s::ul_tx_switching_dual_ul_tx_state_r17_e_");
}
uint8_t cell_group_cfg_s::ul_tx_switching_dual_ul_tx_state_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "cell_group_cfg_s::ul_tx_switching_dual_ul_tx_state_r17_e_");
}

// CellGrouping-r16 ::= SEQUENCE
SRSASN_CODE cell_grouping_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, mcg_r16, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  HANDLE_CODE(pack_dyn_seq_of(bref, scg_r16, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  HANDLE_CODE(mode_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cell_grouping_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(mcg_r16, bref, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  HANDLE_CODE(unpack_dyn_seq_of(scg_r16, bref, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  HANDLE_CODE(mode_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void cell_grouping_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("mcg-r16");
  for (const auto& e1 : mcg_r16) {
    j.write_int(e1);
  }
  j.end_array();
  j.start_array("scg-r16");
  for (const auto& e1 : scg_r16) {
    j.write_int(e1);
  }
  j.end_array();
  j.write_str("mode-r16", mode_r16.to_string());
  j.end_obj();
}

const char* cell_grouping_r16_s::mode_r16_opts::to_string() const
{
  static const char* names[] = {"sync", "async"};
  return convert_enum_idx(names, 2, value, "cell_grouping_r16_s::mode_r16_e_");
}

const char* feature_set_c::types_opts::to_string() const
{
  static const char* names[] = {"eutra", "nr"};
  return convert_enum_idx(names, 2, value, "feature_set_c::types");
}

const char* supported_bw_c::types_opts::to_string() const
{
  static const char* names[] = {"fr1", "fr2"};
  return convert_enum_idx(names, 2, value, "supported_bw_c::types");
}
uint8_t supported_bw_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "supported_bw_c::types");
}

const char* supported_bw_v1700_c::types_opts::to_string() const
{
  static const char* names[] = {"fr1-r17", "fr2-r17"};
  return convert_enum_idx(names, 2, value, "supported_bw_v1700_c::types");
}
uint8_t supported_bw_v1700_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "supported_bw_v1700_c::types");
}

const char* freq_band_info_c::types_opts::to_string() const
{
  static const char* names[] = {"bandInformationEUTRA", "bandInformationNR"};
  return convert_enum_idx(names, 2, value, "freq_band_info_c::types");
}

const char* meas_and_mob_params_common_s::concurrent_meas_gap_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"concurrentPerUE-OnlyMeasGap-r17", "concurrentPerUE-PerFRCombMeasGap-r17"};
  return convert_enum_idx(names, 2, value, "meas_and_mob_params_common_s::concurrent_meas_gap_r17_c_::types");
}

// MeasAndMobParametersMRDC-XDD-Diff-v1560 ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_mrdc_xdd_diff_v1560_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sftd_meas_pscell_nedc_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_mrdc_xdd_diff_v1560_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sftd_meas_pscell_nedc_present, 1));

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_mrdc_xdd_diff_v1560_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sftd_meas_pscell_nedc_present) {
    j.write_str("sftd-MeasPSCell-NEDC", "supported");
  }
  j.end_obj();
}

// MeasAndMobParametersMRDC-v1560 ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_mrdc_v1560_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_mrdc_xdd_diff_v1560_present, 1));

  if (meas_and_mob_params_mrdc_xdd_diff_v1560_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_xdd_diff_v1560.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_mrdc_v1560_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_mrdc_xdd_diff_v1560_present, 1));

  if (meas_and_mob_params_mrdc_xdd_diff_v1560_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_xdd_diff_v1560.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_mrdc_v1560_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_mrdc_xdd_diff_v1560_present) {
    j.write_fieldname("measAndMobParametersMRDC-XDD-Diff-v1560");
    meas_and_mob_params_mrdc_xdd_diff_v1560.to_json(j);
  }
  j.end_obj();
}

// MeasAndMobParametersMRDC-Common-v1730 ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_mrdc_common_v1730_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(independent_gap_cfg_max_cc_r17.fr1_only_r17_present, 1));
  HANDLE_CODE(bref.pack(independent_gap_cfg_max_cc_r17.fr2_only_r17_present, 1));
  HANDLE_CODE(bref.pack(independent_gap_cfg_max_cc_r17.fr1_and_fr2_r17_present, 1));
  if (independent_gap_cfg_max_cc_r17.fr1_only_r17_present) {
    HANDLE_CODE(pack_integer(bref, independent_gap_cfg_max_cc_r17.fr1_only_r17, (uint8_t)1u, (uint8_t)32u));
  }
  if (independent_gap_cfg_max_cc_r17.fr2_only_r17_present) {
    HANDLE_CODE(pack_integer(bref, independent_gap_cfg_max_cc_r17.fr2_only_r17, (uint8_t)1u, (uint8_t)32u));
  }
  if (independent_gap_cfg_max_cc_r17.fr1_and_fr2_r17_present) {
    HANDLE_CODE(pack_integer(bref, independent_gap_cfg_max_cc_r17.fr1_and_fr2_r17, (uint8_t)1u, (uint8_t)32u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_mrdc_common_v1730_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(independent_gap_cfg_max_cc_r17.fr1_only_r17_present, 1));
  HANDLE_CODE(bref.unpack(independent_gap_cfg_max_cc_r17.fr2_only_r17_present, 1));
  HANDLE_CODE(bref.unpack(independent_gap_cfg_max_cc_r17.fr1_and_fr2_r17_present, 1));
  if (independent_gap_cfg_max_cc_r17.fr1_only_r17_present) {
    HANDLE_CODE(unpack_integer(independent_gap_cfg_max_cc_r17.fr1_only_r17, bref, (uint8_t)1u, (uint8_t)32u));
  }
  if (independent_gap_cfg_max_cc_r17.fr2_only_r17_present) {
    HANDLE_CODE(unpack_integer(independent_gap_cfg_max_cc_r17.fr2_only_r17, bref, (uint8_t)1u, (uint8_t)32u));
  }
  if (independent_gap_cfg_max_cc_r17.fr1_and_fr2_r17_present) {
    HANDLE_CODE(unpack_integer(independent_gap_cfg_max_cc_r17.fr1_and_fr2_r17, bref, (uint8_t)1u, (uint8_t)32u));
  }

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_mrdc_common_v1730_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("independentGapConfig-maxCC-r17");
  j.start_obj();
  if (independent_gap_cfg_max_cc_r17.fr1_only_r17_present) {
    j.write_int("fr1-Only-r17", independent_gap_cfg_max_cc_r17.fr1_only_r17);
  }
  if (independent_gap_cfg_max_cc_r17.fr2_only_r17_present) {
    j.write_int("fr2-Only-r17", independent_gap_cfg_max_cc_r17.fr2_only_r17);
  }
  if (independent_gap_cfg_max_cc_r17.fr1_and_fr2_r17_present) {
    j.write_int("fr1-AndFR2-r17", independent_gap_cfg_max_cc_r17.fr1_and_fr2_r17);
  }
  j.end_obj();
  j.end_obj();
}

// MeasAndMobParametersMRDC-v1730 ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_mrdc_v1730_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_mrdc_common_v1730_present, 1));

  if (meas_and_mob_params_mrdc_common_v1730_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_common_v1730.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_mrdc_v1730_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_mrdc_common_v1730_present, 1));

  if (meas_and_mob_params_mrdc_common_v1730_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_common_v1730.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_mrdc_v1730_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_mrdc_common_v1730_present) {
    j.write_fieldname("measAndMobParametersMRDC-Common-v1730");
    meas_and_mob_params_mrdc_common_v1730.to_json(j);
  }
  j.end_obj();
}

// MeasResultSCG-Failure ::= SEQUENCE
SRSASN_CODE meas_result_scg_fail_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_per_mo_list, 1, 8));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= location_info_r16.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(location_info_r16.is_present(), 1));
      if (location_info_r16.is_present()) {
        HANDLE_CODE(location_info_r16->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_result_scg_fail_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_dyn_seq_of(meas_result_per_mo_list, bref, 1, 8));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(location_info_r16, bref);
      if (location_info_r16.is_present()) {
        HANDLE_CODE(location_info_r16->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void meas_result_scg_fail_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("measResultPerMOList");
  for (const auto& e1 : meas_result_per_mo_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (ext) {
    if (location_info_r16.is_present()) {
      j.write_fieldname("locationInfo-r16");
      location_info_r16->to_json(j);
    }
  }
  j.end_obj();
}

const char* phy_params_common_s::bwp_switching_multi_ccs_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"type1-r16", "type2-r16"};
  return convert_enum_idx(names, 2, value, "phy_params_common_s::bwp_switching_multi_ccs_r16_c_::types");
}
uint8_t phy_params_common_s::bwp_switching_multi_ccs_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "phy_params_common_s::bwp_switching_multi_ccs_r16_c_::types");
}

const char* phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"type1-r16", "type2-r16"};
  return convert_enum_idx(names, 2, value, "phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::types");
}
uint8_t phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::types");
}

// Phy-ParametersCommon-v16a0 ::= SEQUENCE
SRSASN_CODE phy_params_common_v16a0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(srs_periodicity_and_offset_ext_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE phy_params_common_v16a0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(srs_periodicity_and_offset_ext_r16_present, 1));

  return SRSASN_SUCCESS;
}
void phy_params_common_v16a0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (srs_periodicity_and_offset_ext_r16_present) {
    j.write_str("srs-PeriodicityAndOffsetExt-r16", "supported");
  }
  j.end_obj();
}

// Phy-Parameters-v16a0 ::= SEQUENCE
SRSASN_CODE phy_params_v16a0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(phy_params_common_v16a0_present, 1));

  if (phy_params_common_v16a0_present) {
    HANDLE_CODE(phy_params_common_v16a0.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE phy_params_v16a0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(phy_params_common_v16a0_present, 1));

  if (phy_params_common_v16a0_present) {
    HANDLE_CODE(phy_params_common_v16a0.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void phy_params_v16a0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (phy_params_common_v16a0_present) {
    j.write_fieldname("phy-ParametersCommon-v16a0");
    phy_params_common_v16a0.to_json(j);
  }
  j.end_obj();
}

// NAICS-Capability-Entry ::= SEQUENCE
SRSASN_CODE naics_cap_entry_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, nof_naics_capable_cc, (uint8_t)1u, (uint8_t)5u));
  HANDLE_CODE(nof_aggr_prb.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE naics_cap_entry_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(nof_naics_capable_cc, bref, (uint8_t)1u, (uint8_t)5u));
  HANDLE_CODE(nof_aggr_prb.unpack(bref));

  return SRSASN_SUCCESS;
}
void naics_cap_entry_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("numberOfNAICS-CapableCC", nof_naics_capable_cc);
  j.write_str("numberOfAggregatedPRB", nof_aggr_prb.to_string());
  j.end_obj();
}

const char* naics_cap_entry_s::nof_aggr_prb_opts::to_string() const
{
  static const char* names[] = {"n50",
                                "n75",
                                "n100",
                                "n125",
                                "n150",
                                "n175",
                                "n200",
                                "n225",
                                "n250",
                                "n275",
                                "n300",
                                "n350",
                                "n400",
                                "n450",
                                "n500",
                                "spare"};
  return convert_enum_idx(names, 16, value, "naics_cap_entry_s::nof_aggr_prb_e_");
}
uint16_t naics_cap_entry_s::nof_aggr_prb_opts::to_number() const
{
  static const uint16_t numbers[] = {50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 350, 400, 450, 500};
  return map_enum_number(numbers, 15, value, "naics_cap_entry_s::nof_aggr_prb_e_");
}

// Phy-ParametersMRDC ::= SEQUENCE
SRSASN_CODE phy_params_mrdc_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(naics_cap_list.size() > 0, 1));

  if (naics_cap_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, naics_cap_list, 1, 8));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sp_cell_placement.is_present();
    group_flags[1] |= tdd_pcell_ul_tx_all_ul_sf_r16_present;
    group_flags[1] |= fdd_pcell_ul_tx_all_ul_sf_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sp_cell_placement.is_present(), 1));
      if (sp_cell_placement.is_present()) {
        HANDLE_CODE(sp_cell_placement->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(tdd_pcell_ul_tx_all_ul_sf_r16_present, 1));
      HANDLE_CODE(bref.pack(fdd_pcell_ul_tx_all_ul_sf_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE phy_params_mrdc_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool naics_cap_list_present;
  HANDLE_CODE(bref.unpack(naics_cap_list_present, 1));

  if (naics_cap_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(naics_cap_list, bref, 1, 8));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sp_cell_placement, bref);
      if (sp_cell_placement.is_present()) {
        HANDLE_CODE(sp_cell_placement->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(tdd_pcell_ul_tx_all_ul_sf_r16_present, 1));
      HANDLE_CODE(bref.unpack(fdd_pcell_ul_tx_all_ul_sf_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void phy_params_mrdc_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (naics_cap_list.size() > 0) {
    j.start_array("naics-Capability-List");
    for (const auto& e1 : naics_cap_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ext) {
    if (sp_cell_placement.is_present()) {
      j.write_fieldname("spCellPlacement");
      sp_cell_placement->to_json(j);
    }
    if (tdd_pcell_ul_tx_all_ul_sf_r16_present) {
      j.write_str("tdd-PCellUL-TX-AllUL-Subframe-r16", "supported");
    }
    if (fdd_pcell_ul_tx_all_ul_sf_r16_present) {
      j.write_str("fdd-PCellUL-TX-AllUL-Subframe-r16", "supported");
    }
  }
  j.end_obj();
}

// RF-Parameters-v15g0 ::= SEQUENCE
SRSASN_CODE rf_params_v15g0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(supported_band_combination_list_v15g0.size() > 0, 1));

  if (supported_band_combination_list_v15g0.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_combination_list_v15g0, 1, 65536));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rf_params_v15g0_s::unpack(cbit_ref& bref)
{
  bool supported_band_combination_list_v15g0_present;
  HANDLE_CODE(bref.unpack(supported_band_combination_list_v15g0_present, 1));

  if (supported_band_combination_list_v15g0_present) {
    HANDLE_CODE(unpack_dyn_seq_of(supported_band_combination_list_v15g0, bref, 1, 65536));
  }

  return SRSASN_SUCCESS;
}
void rf_params_v15g0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (supported_band_combination_list_v15g0.size() > 0) {
    j.start_array("supportedBandCombinationList-v15g0");
    for (const auto& e1 : supported_band_combination_list_v15g0) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// RF-Parameters-v16a0 ::= SEQUENCE
SRSASN_CODE rf_params_v16a0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(supported_band_combination_list_v16a0.size() > 0, 1));
  HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v16a0.size() > 0, 1));

  if (supported_band_combination_list_v16a0.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_combination_list_v16a0, 1, 65536));
  }
  if (supported_band_combination_list_ul_tx_switch_v16a0.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_combination_list_ul_tx_switch_v16a0, 1, 65536));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rf_params_v16a0_s::unpack(cbit_ref& bref)
{
  bool supported_band_combination_list_v16a0_present;
  HANDLE_CODE(bref.unpack(supported_band_combination_list_v16a0_present, 1));
  bool supported_band_combination_list_ul_tx_switch_v16a0_present;
  HANDLE_CODE(bref.unpack(supported_band_combination_list_ul_tx_switch_v16a0_present, 1));

  if (supported_band_combination_list_v16a0_present) {
    HANDLE_CODE(unpack_dyn_seq_of(supported_band_combination_list_v16a0, bref, 1, 65536));
  }
  if (supported_band_combination_list_ul_tx_switch_v16a0_present) {
    HANDLE_CODE(unpack_dyn_seq_of(supported_band_combination_list_ul_tx_switch_v16a0, bref, 1, 65536));
  }

  return SRSASN_SUCCESS;
}
void rf_params_v16a0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (supported_band_combination_list_v16a0.size() > 0) {
    j.start_array("supportedBandCombinationList-v16a0");
    for (const auto& e1 : supported_band_combination_list_v16a0) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (supported_band_combination_list_ul_tx_switch_v16a0.size() > 0) {
    j.start_array("supportedBandCombinationList-UplinkTxSwitch-v16a0");
    for (const auto& e1 : supported_band_combination_list_ul_tx_switch_v16a0) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// BandNR-v16c0 ::= SEQUENCE
SRSASN_CODE band_nr_v16c0_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(pusch_repeat_type_a_v16c0_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_nr_v16c0_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(pusch_repeat_type_a_v16c0_present, 1));

  return SRSASN_SUCCESS;
}
void band_nr_v16c0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pusch_repeat_type_a_v16c0_present) {
    j.write_str("pusch-RepetitionTypeA-v16c0", "supported");
  }
  j.end_obj();
}

// RF-Parameters-v16c0 ::= SEQUENCE
SRSASN_CODE rf_params_v16c0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_list_nr_v16c0, 1, 1024));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rf_params_v16c0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(supported_band_list_nr_v16c0, bref, 1, 1024));

  return SRSASN_SUCCESS;
}
void rf_params_v16c0_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("supportedBandListNR-v16c0");
  for (const auto& e1 : supported_band_list_nr_v16c0) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// RF-ParametersMRDC ::= SEQUENCE
SRSASN_CODE rf_params_mrdc_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(supported_band_combination_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(applied_freq_band_list_filt.size() > 0, 1));

  if (supported_band_combination_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_combination_list, 1, 65536));
  }
  if (applied_freq_band_list_filt.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, applied_freq_band_list_filt, 1, 1280));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= srs_switching_time_requested_present;
    group_flags[0] |= supported_band_combination_list_v1540.is_present();
    group_flags[1] |= supported_band_combination_list_v1550.is_present();
    group_flags[2] |= supported_band_combination_list_v1560.is_present();
    group_flags[2] |= supported_band_combination_list_nedc_only.is_present();
    group_flags[3] |= supported_band_combination_list_v1570.is_present();
    group_flags[4] |= supported_band_combination_list_v1580.is_present();
    group_flags[5] |= supported_band_combination_list_v1590.is_present();
    group_flags[6] |= supported_band_combination_list_nedc_only_v15a0.is_present();
    group_flags[7] |= supported_band_combination_list_v1610.is_present();
    group_flags[7] |= supported_band_combination_list_nedc_only_v1610.is_present();
    group_flags[7] |= supported_band_combination_list_ul_tx_switch_r16.is_present();
    group_flags[8] |= supported_band_combination_list_v1630.is_present();
    group_flags[8] |= supported_band_combination_list_nedc_only_v1630.is_present();
    group_flags[8] |= supported_band_combination_list_ul_tx_switch_v1630.is_present();
    group_flags[9] |= supported_band_combination_list_v1640.is_present();
    group_flags[9] |= supported_band_combination_list_nedc_only_v1640.is_present();
    group_flags[9] |= supported_band_combination_list_ul_tx_switch_v1640.is_present();
    group_flags[10] |= supported_band_combination_list_ul_tx_switch_v1670.is_present();
    group_flags[11] |= supported_band_combination_list_v1700.is_present();
    group_flags[11] |= supported_band_combination_list_ul_tx_switch_v1700.is_present();
    group_flags[12] |= supported_band_combination_list_v1720.is_present();
    group_flags[12] |= supported_band_combination_list_nedc_only_v1720.is_present();
    group_flags[12] |= supported_band_combination_list_ul_tx_switch_v1720.is_present();
    group_flags[13] |= supported_band_combination_list_v1730.is_present();
    group_flags[13] |= supported_band_combination_list_nedc_only_v1730.is_present();
    group_flags[13] |= supported_band_combination_list_ul_tx_switch_v1730.is_present();
    group_flags[14] |= supported_band_combination_list_v1740.is_present();
    group_flags[14] |= supported_band_combination_list_nedc_only_v1740.is_present();
    group_flags[14] |= supported_band_combination_list_ul_tx_switch_v1740.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(srs_switching_time_requested_present, 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_v1540.is_present(), 1));
      if (supported_band_combination_list_v1540.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1540, 1, 65536));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1550.is_present(), 1));
      if (supported_band_combination_list_v1550.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1550, 1, 65536));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1560.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_nedc_only.is_present(), 1));
      if (supported_band_combination_list_v1560.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1560, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_nedc_only, 1, 65536));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1570.is_present(), 1));
      if (supported_band_combination_list_v1570.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1570, 1, 65536));
      }
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1580.is_present(), 1));
      if (supported_band_combination_list_v1580.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1580, 1, 65536));
      }
    }
    if (group_flags[5]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1590.is_present(), 1));
      if (supported_band_combination_list_v1590.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1590, 1, 65536));
      }
    }
    if (group_flags[6]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_nedc_only_v15a0.is_present(), 1));
      if (supported_band_combination_list_nedc_only_v15a0.is_present()) {
        HANDLE_CODE(bref.pack(
            supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1540.size() > 0, 1));
        HANDLE_CODE(bref.pack(
            supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1560.size() > 0, 1));
        HANDLE_CODE(bref.pack(
            supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1570.size() > 0, 1));
        HANDLE_CODE(bref.pack(
            supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1580.size() > 0, 1));
        HANDLE_CODE(bref.pack(
            supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1590.size() > 0, 1));
        if (supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1540.size() > 0) {
          HANDLE_CODE(pack_dyn_seq_of(
              bref, supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1540, 1, 65536));
        }
        if (supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1560.size() > 0) {
          HANDLE_CODE(pack_dyn_seq_of(
              bref, supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1560, 1, 65536));
        }
        if (supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1570.size() > 0) {
          HANDLE_CODE(pack_dyn_seq_of(
              bref, supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1570, 1, 65536));
        }
        if (supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1580.size() > 0) {
          HANDLE_CODE(pack_dyn_seq_of(
              bref, supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1580, 1, 65536));
        }
        if (supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1590.size() > 0) {
          HANDLE_CODE(pack_dyn_seq_of(
              bref, supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1590, 1, 65536));
        }
      }
    }
    if (group_flags[7]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1610.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_nedc_only_v1610.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_r16.is_present(), 1));
      if (supported_band_combination_list_v1610.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1610, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only_v1610.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_nedc_only_v1610, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_r16, 1, 65536));
      }
    }
    if (group_flags[8]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1630.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_nedc_only_v1630.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1630.is_present(), 1));
      if (supported_band_combination_list_v1630.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1630, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only_v1630.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_nedc_only_v1630, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1630.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1630, 1, 65536));
      }
    }
    if (group_flags[9]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1640.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_nedc_only_v1640.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1640.is_present(), 1));
      if (supported_band_combination_list_v1640.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1640, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only_v1640.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_nedc_only_v1640, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1640.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1640, 1, 65536));
      }
    }
    if (group_flags[10]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1670.is_present(), 1));
      if (supported_band_combination_list_ul_tx_switch_v1670.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1670, 1, 65536));
      }
    }
    if (group_flags[11]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1700.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1700.is_present(), 1));
      if (supported_band_combination_list_v1700.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1700, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1700.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1700, 1, 65536));
      }
    }
    if (group_flags[12]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1720.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_nedc_only_v1720.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1720.is_present(), 1));
      if (supported_band_combination_list_v1720.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1720, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only_v1720.is_present()) {
        HANDLE_CODE(bref.pack(
            supported_band_combination_list_nedc_only_v1720->supported_band_combination_list_v1700.size() > 0, 1));
        HANDLE_CODE(bref.pack(
            supported_band_combination_list_nedc_only_v1720->supported_band_combination_list_v1720.size() > 0, 1));
        if (supported_band_combination_list_nedc_only_v1720->supported_band_combination_list_v1700.size() > 0) {
          HANDLE_CODE(pack_dyn_seq_of(
              bref, supported_band_combination_list_nedc_only_v1720->supported_band_combination_list_v1700, 1, 65536));
        }
        if (supported_band_combination_list_nedc_only_v1720->supported_band_combination_list_v1720.size() > 0) {
          HANDLE_CODE(pack_dyn_seq_of(
              bref, supported_band_combination_list_nedc_only_v1720->supported_band_combination_list_v1720, 1, 65536));
        }
      }
      if (supported_band_combination_list_ul_tx_switch_v1720.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1720, 1, 65536));
      }
    }
    if (group_flags[13]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1730.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_nedc_only_v1730.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1730.is_present(), 1));
      if (supported_band_combination_list_v1730.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1730, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only_v1730.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_nedc_only_v1730, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1730.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1730, 1, 65536));
      }
    }
    if (group_flags[14]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1740.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_nedc_only_v1740.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1740.is_present(), 1));
      if (supported_band_combination_list_v1740.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1740, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only_v1740.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_nedc_only_v1740, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1740.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1740, 1, 65536));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rf_params_mrdc_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool supported_band_combination_list_present;
  HANDLE_CODE(bref.unpack(supported_band_combination_list_present, 1));
  bool applied_freq_band_list_filt_present;
  HANDLE_CODE(bref.unpack(applied_freq_band_list_filt_present, 1));

  if (supported_band_combination_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(supported_band_combination_list, bref, 1, 65536));
  }
  if (applied_freq_band_list_filt_present) {
    HANDLE_CODE(unpack_dyn_seq_of(applied_freq_band_list_filt, bref, 1, 1280));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(15);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(srs_switching_time_requested_present, 1));
      unpack_presence_flag(supported_band_combination_list_v1540, bref);
      if (supported_band_combination_list_v1540.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1540, bref, 1, 65536));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1550, bref);
      if (supported_band_combination_list_v1550.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1550, bref, 1, 65536));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1560, bref);
      unpack_presence_flag(supported_band_combination_list_nedc_only, bref);
      if (supported_band_combination_list_v1560.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1560, bref, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_nedc_only, bref, 1, 65536));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1570, bref);
      if (supported_band_combination_list_v1570.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1570, bref, 1, 65536));
      }
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1580, bref);
      if (supported_band_combination_list_v1580.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1580, bref, 1, 65536));
      }
    }
    if (group_flags[5]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1590, bref);
      if (supported_band_combination_list_v1590.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1590, bref, 1, 65536));
      }
    }
    if (group_flags[6]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_nedc_only_v15a0, bref);
      if (supported_band_combination_list_nedc_only_v15a0.is_present()) {
        bool supported_band_combination_list_v1540_present;
        HANDLE_CODE(bref.unpack(supported_band_combination_list_v1540_present, 1));
        bool supported_band_combination_list_v1560_present;
        HANDLE_CODE(bref.unpack(supported_band_combination_list_v1560_present, 1));
        bool supported_band_combination_list_v1570_present;
        HANDLE_CODE(bref.unpack(supported_band_combination_list_v1570_present, 1));
        bool supported_band_combination_list_v1580_present;
        HANDLE_CODE(bref.unpack(supported_band_combination_list_v1580_present, 1));
        bool supported_band_combination_list_v1590_present;
        HANDLE_CODE(bref.unpack(supported_band_combination_list_v1590_present, 1));
        if (supported_band_combination_list_v1540_present) {
          HANDLE_CODE(unpack_dyn_seq_of(
              supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1540, bref, 1, 65536));
        }
        if (supported_band_combination_list_v1560_present) {
          HANDLE_CODE(unpack_dyn_seq_of(
              supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1560, bref, 1, 65536));
        }
        if (supported_band_combination_list_v1570_present) {
          HANDLE_CODE(unpack_dyn_seq_of(
              supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1570, bref, 1, 65536));
        }
        if (supported_band_combination_list_v1580_present) {
          HANDLE_CODE(unpack_dyn_seq_of(
              supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1580, bref, 1, 65536));
        }
        if (supported_band_combination_list_v1590_present) {
          HANDLE_CODE(unpack_dyn_seq_of(
              supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1590, bref, 1, 65536));
        }
      }
    }
    if (group_flags[7]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1610, bref);
      unpack_presence_flag(supported_band_combination_list_nedc_only_v1610, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_r16, bref);
      if (supported_band_combination_list_v1610.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1610, bref, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only_v1610.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_nedc_only_v1610, bref, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_r16, bref, 1, 65536));
      }
    }
    if (group_flags[8]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1630, bref);
      unpack_presence_flag(supported_band_combination_list_nedc_only_v1630, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1630, bref);
      if (supported_band_combination_list_v1630.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1630, bref, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only_v1630.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_nedc_only_v1630, bref, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1630.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1630, bref, 1, 65536));
      }
    }
    if (group_flags[9]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1640, bref);
      unpack_presence_flag(supported_band_combination_list_nedc_only_v1640, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1640, bref);
      if (supported_band_combination_list_v1640.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1640, bref, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only_v1640.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_nedc_only_v1640, bref, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1640.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1640, bref, 1, 65536));
      }
    }
    if (group_flags[10]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1670, bref);
      if (supported_band_combination_list_ul_tx_switch_v1670.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1670, bref, 1, 65536));
      }
    }
    if (group_flags[11]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1700, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1700, bref);
      if (supported_band_combination_list_v1700.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1700, bref, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1700.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1700, bref, 1, 65536));
      }
    }
    if (group_flags[12]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1720, bref);
      unpack_presence_flag(supported_band_combination_list_nedc_only_v1720, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1720, bref);
      if (supported_band_combination_list_v1720.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1720, bref, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only_v1720.is_present()) {
        bool supported_band_combination_list_v1700_present;
        HANDLE_CODE(bref.unpack(supported_band_combination_list_v1700_present, 1));
        bool supported_band_combination_list_v1720_present;
        HANDLE_CODE(bref.unpack(supported_band_combination_list_v1720_present, 1));
        if (supported_band_combination_list_v1700_present) {
          HANDLE_CODE(unpack_dyn_seq_of(
              supported_band_combination_list_nedc_only_v1720->supported_band_combination_list_v1700, bref, 1, 65536));
        }
        if (supported_band_combination_list_v1720_present) {
          HANDLE_CODE(unpack_dyn_seq_of(
              supported_band_combination_list_nedc_only_v1720->supported_band_combination_list_v1720, bref, 1, 65536));
        }
      }
      if (supported_band_combination_list_ul_tx_switch_v1720.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1720, bref, 1, 65536));
      }
    }
    if (group_flags[13]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1730, bref);
      unpack_presence_flag(supported_band_combination_list_nedc_only_v1730, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1730, bref);
      if (supported_band_combination_list_v1730.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1730, bref, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only_v1730.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_nedc_only_v1730, bref, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1730.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1730, bref, 1, 65536));
      }
    }
    if (group_flags[14]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1740, bref);
      unpack_presence_flag(supported_band_combination_list_nedc_only_v1740, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1740, bref);
      if (supported_band_combination_list_v1740.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1740, bref, 1, 65536));
      }
      if (supported_band_combination_list_nedc_only_v1740.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_nedc_only_v1740, bref, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1740.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1740, bref, 1, 65536));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void rf_params_mrdc_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (supported_band_combination_list.size() > 0) {
    j.start_array("supportedBandCombinationList");
    for (const auto& e1 : supported_band_combination_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (applied_freq_band_list_filt.size() > 0) {
    j.start_array("appliedFreqBandListFilter");
    for (const auto& e1 : applied_freq_band_list_filt) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ext) {
    if (srs_switching_time_requested_present) {
      j.write_str("srs-SwitchingTimeRequested", "true");
    }
    if (supported_band_combination_list_v1540.is_present()) {
      j.start_array("supportedBandCombinationList-v1540");
      for (const auto& e1 : *supported_band_combination_list_v1540) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1550.is_present()) {
      j.start_array("supportedBandCombinationList-v1550");
      for (const auto& e1 : *supported_band_combination_list_v1550) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1560.is_present()) {
      j.start_array("supportedBandCombinationList-v1560");
      for (const auto& e1 : *supported_band_combination_list_v1560) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_nedc_only.is_present()) {
      j.start_array("supportedBandCombinationListNEDC-Only");
      for (const auto& e1 : *supported_band_combination_list_nedc_only) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1570.is_present()) {
      j.start_array("supportedBandCombinationList-v1570");
      for (const auto& e1 : *supported_band_combination_list_v1570) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1580.is_present()) {
      j.start_array("supportedBandCombinationList-v1580");
      for (const auto& e1 : *supported_band_combination_list_v1580) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1590.is_present()) {
      j.start_array("supportedBandCombinationList-v1590");
      for (const auto& e1 : *supported_band_combination_list_v1590) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_nedc_only_v15a0.is_present()) {
      j.write_fieldname("supportedBandCombinationListNEDC-Only-v15a0");
      j.start_obj();
      if (supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1540.size() > 0) {
        j.start_array("supportedBandCombinationList-v1540");
        for (const auto& e1 : supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1540) {
          e1.to_json(j);
        }
        j.end_array();
      }
      if (supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1560.size() > 0) {
        j.start_array("supportedBandCombinationList-v1560");
        for (const auto& e1 : supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1560) {
          e1.to_json(j);
        }
        j.end_array();
      }
      if (supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1570.size() > 0) {
        j.start_array("supportedBandCombinationList-v1570");
        for (const auto& e1 : supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1570) {
          e1.to_json(j);
        }
        j.end_array();
      }
      if (supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1580.size() > 0) {
        j.start_array("supportedBandCombinationList-v1580");
        for (const auto& e1 : supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1580) {
          e1.to_json(j);
        }
        j.end_array();
      }
      if (supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1590.size() > 0) {
        j.start_array("supportedBandCombinationList-v1590");
        for (const auto& e1 : supported_band_combination_list_nedc_only_v15a0->supported_band_combination_list_v1590) {
          e1.to_json(j);
        }
        j.end_array();
      }
      j.end_obj();
    }
    if (supported_band_combination_list_v1610.is_present()) {
      j.start_array("supportedBandCombinationList-v1610");
      for (const auto& e1 : *supported_band_combination_list_v1610) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_nedc_only_v1610.is_present()) {
      j.start_array("supportedBandCombinationListNEDC-Only-v1610");
      for (const auto& e1 : *supported_band_combination_list_nedc_only_v1610) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_r16.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-r16");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1630.is_present()) {
      j.start_array("supportedBandCombinationList-v1630");
      for (const auto& e1 : *supported_band_combination_list_v1630) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_nedc_only_v1630.is_present()) {
      j.start_array("supportedBandCombinationListNEDC-Only-v1630");
      for (const auto& e1 : *supported_band_combination_list_nedc_only_v1630) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1630.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1630");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1630) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1640.is_present()) {
      j.start_array("supportedBandCombinationList-v1640");
      for (const auto& e1 : *supported_band_combination_list_v1640) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_nedc_only_v1640.is_present()) {
      j.start_array("supportedBandCombinationListNEDC-Only-v1640");
      for (const auto& e1 : *supported_band_combination_list_nedc_only_v1640) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1640.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1640");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1640) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1670.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1670");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1670) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1700.is_present()) {
      j.start_array("supportedBandCombinationList-v1700");
      for (const auto& e1 : *supported_band_combination_list_v1700) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1700.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1700");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1700) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1720.is_present()) {
      j.start_array("supportedBandCombinationList-v1720");
      for (const auto& e1 : *supported_band_combination_list_v1720) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_nedc_only_v1720.is_present()) {
      j.write_fieldname("supportedBandCombinationListNEDC-Only-v1720");
      j.start_obj();
      if (supported_band_combination_list_nedc_only_v1720->supported_band_combination_list_v1700.size() > 0) {
        j.start_array("supportedBandCombinationList-v1700");
        for (const auto& e1 : supported_band_combination_list_nedc_only_v1720->supported_band_combination_list_v1700) {
          e1.to_json(j);
        }
        j.end_array();
      }
      if (supported_band_combination_list_nedc_only_v1720->supported_band_combination_list_v1720.size() > 0) {
        j.start_array("supportedBandCombinationList-v1720");
        for (const auto& e1 : supported_band_combination_list_nedc_only_v1720->supported_band_combination_list_v1720) {
          e1.to_json(j);
        }
        j.end_array();
      }
      j.end_obj();
    }
    if (supported_band_combination_list_ul_tx_switch_v1720.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1720");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1720) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1730.is_present()) {
      j.start_array("supportedBandCombinationList-v1730");
      for (const auto& e1 : *supported_band_combination_list_v1730) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_nedc_only_v1730.is_present()) {
      j.start_array("supportedBandCombinationListNEDC-Only-v1730");
      for (const auto& e1 : *supported_band_combination_list_nedc_only_v1730) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1730.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1730");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1730) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1740.is_present()) {
      j.start_array("supportedBandCombinationList-v1740");
      for (const auto& e1 : *supported_band_combination_list_v1740) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_nedc_only_v1740.is_present()) {
      j.start_array("supportedBandCombinationListNEDC-Only-v1740");
      for (const auto& e1 : *supported_band_combination_list_nedc_only_v1740) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1740.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1740");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1740) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

// RF-ParametersMRDC-v15g0 ::= SEQUENCE
SRSASN_CODE rf_params_mrdc_v15g0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(supported_band_combination_list_v15g0.size() > 0, 1));
  HANDLE_CODE(bref.pack(supported_band_combination_list_nedc_only_v15g0.size() > 0, 1));

  if (supported_band_combination_list_v15g0.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_combination_list_v15g0, 1, 65536));
  }
  if (supported_band_combination_list_nedc_only_v15g0.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_combination_list_nedc_only_v15g0, 1, 65536));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rf_params_mrdc_v15g0_s::unpack(cbit_ref& bref)
{
  bool supported_band_combination_list_v15g0_present;
  HANDLE_CODE(bref.unpack(supported_band_combination_list_v15g0_present, 1));
  bool supported_band_combination_list_nedc_only_v15g0_present;
  HANDLE_CODE(bref.unpack(supported_band_combination_list_nedc_only_v15g0_present, 1));

  if (supported_band_combination_list_v15g0_present) {
    HANDLE_CODE(unpack_dyn_seq_of(supported_band_combination_list_v15g0, bref, 1, 65536));
  }
  if (supported_band_combination_list_nedc_only_v15g0_present) {
    HANDLE_CODE(unpack_dyn_seq_of(supported_band_combination_list_nedc_only_v15g0, bref, 1, 65536));
  }

  return SRSASN_SUCCESS;
}
void rf_params_mrdc_v15g0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (supported_band_combination_list_v15g0.size() > 0) {
    j.start_array("supportedBandCombinationList-v15g0");
    for (const auto& e1 : supported_band_combination_list_v15g0) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (supported_band_combination_list_nedc_only_v15g0.size() > 0) {
    j.start_array("supportedBandCombinationListNEDC-Only-v15g0");
    for (const auto& e1 : supported_band_combination_list_nedc_only_v15g0) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// CG-SDT-TA-ValidationConfig-r17 ::= SEQUENCE
SRSASN_CODE cg_sdt_ta_validation_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(cg_sdt_rsrp_change_thres_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_sdt_ta_validation_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(cg_sdt_rsrp_change_thres_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void cg_sdt_ta_validation_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("cg-SDT-RSRP-ChangeThreshold-r17", cg_sdt_rsrp_change_thres_r17.to_string());
  j.end_obj();
}

const char* cg_sdt_ta_validation_cfg_r17_s::cg_sdt_rsrp_change_thres_r17_opts::to_string() const
{
  static const char* names[] = {"dB2",
                                "dB4",
                                "dB6",
                                "dB8",
                                "dB10",
                                "dB14",
                                "dB18",
                                "dB22",
                                "dB26",
                                "dB30",
                                "dB34",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "cg_sdt_ta_validation_cfg_r17_s::cg_sdt_rsrp_change_thres_r17_e_");
}
uint8_t cg_sdt_ta_validation_cfg_r17_s::cg_sdt_rsrp_change_thres_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 6, 8, 10, 14, 18, 22, 26, 30, 34};
  return map_enum_number(numbers, 11, value, "cg_sdt_ta_validation_cfg_r17_s::cg_sdt_rsrp_change_thres_r17_e_");
}

// SDT-MAC-PHY-CG-Config-r17 ::= SEQUENCE
SRSASN_CODE sdt_mac_phy_cg_cfg_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cg_sdt_cfg_lch_restrict_to_add_mod_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(cg_sdt_cfg_lch_restrict_to_release_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(cg_sdt_cfg_init_bwp_n_ul_r17_present, 1));
  HANDLE_CODE(bref.pack(cg_sdt_cfg_init_bwp_sul_r17_present, 1));
  HANDLE_CODE(bref.pack(cg_sdt_cfg_init_bwp_dl_r17_present, 1));
  HANDLE_CODE(bref.pack(cg_sdt_time_align_timer_r17_present, 1));
  HANDLE_CODE(bref.pack(cg_sdt_rsrp_thres_ssb_r17_present, 1));
  HANDLE_CODE(bref.pack(cg_sdt_ta_validation_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(cg_sdt_cs_rnti_r17_present, 1));

  if (cg_sdt_cfg_lch_restrict_to_add_mod_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cg_sdt_cfg_lch_restrict_to_add_mod_list_r17, 1, 32));
  }
  if (cg_sdt_cfg_lch_restrict_to_release_list_r17.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, cg_sdt_cfg_lch_restrict_to_release_list_r17, 1, 32, integer_packer<uint8_t>(1, 32)));
  }
  if (cg_sdt_cfg_init_bwp_n_ul_r17_present) {
    HANDLE_CODE(cg_sdt_cfg_init_bwp_n_ul_r17.pack(bref));
  }
  if (cg_sdt_cfg_init_bwp_sul_r17_present) {
    HANDLE_CODE(cg_sdt_cfg_init_bwp_sul_r17.pack(bref));
  }
  if (cg_sdt_cfg_init_bwp_dl_r17_present) {
    HANDLE_CODE(cg_sdt_cfg_init_bwp_dl_r17.pack(bref));
  }
  if (cg_sdt_time_align_timer_r17_present) {
    HANDLE_CODE(cg_sdt_time_align_timer_r17.pack(bref));
  }
  if (cg_sdt_rsrp_thres_ssb_r17_present) {
    HANDLE_CODE(pack_integer(bref, cg_sdt_rsrp_thres_ssb_r17, (uint8_t)0u, (uint8_t)127u));
  }
  if (cg_sdt_ta_validation_cfg_r17_present) {
    HANDLE_CODE(cg_sdt_ta_validation_cfg_r17.pack(bref));
  }
  if (cg_sdt_cs_rnti_r17_present) {
    HANDLE_CODE(pack_integer(bref, cg_sdt_cs_rnti_r17, (uint32_t)0u, (uint32_t)65535u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sdt_mac_phy_cg_cfg_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool cg_sdt_cfg_lch_restrict_to_add_mod_list_r17_present;
  HANDLE_CODE(bref.unpack(cg_sdt_cfg_lch_restrict_to_add_mod_list_r17_present, 1));
  bool cg_sdt_cfg_lch_restrict_to_release_list_r17_present;
  HANDLE_CODE(bref.unpack(cg_sdt_cfg_lch_restrict_to_release_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(cg_sdt_cfg_init_bwp_n_ul_r17_present, 1));
  HANDLE_CODE(bref.unpack(cg_sdt_cfg_init_bwp_sul_r17_present, 1));
  HANDLE_CODE(bref.unpack(cg_sdt_cfg_init_bwp_dl_r17_present, 1));
  HANDLE_CODE(bref.unpack(cg_sdt_time_align_timer_r17_present, 1));
  HANDLE_CODE(bref.unpack(cg_sdt_rsrp_thres_ssb_r17_present, 1));
  HANDLE_CODE(bref.unpack(cg_sdt_ta_validation_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(cg_sdt_cs_rnti_r17_present, 1));

  if (cg_sdt_cfg_lch_restrict_to_add_mod_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cg_sdt_cfg_lch_restrict_to_add_mod_list_r17, bref, 1, 32));
  }
  if (cg_sdt_cfg_lch_restrict_to_release_list_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(cg_sdt_cfg_lch_restrict_to_release_list_r17, bref, 1, 32, integer_packer<uint8_t>(1, 32)));
  }
  if (cg_sdt_cfg_init_bwp_n_ul_r17_present) {
    HANDLE_CODE(cg_sdt_cfg_init_bwp_n_ul_r17.unpack(bref));
  }
  if (cg_sdt_cfg_init_bwp_sul_r17_present) {
    HANDLE_CODE(cg_sdt_cfg_init_bwp_sul_r17.unpack(bref));
  }
  if (cg_sdt_cfg_init_bwp_dl_r17_present) {
    HANDLE_CODE(cg_sdt_cfg_init_bwp_dl_r17.unpack(bref));
  }
  if (cg_sdt_time_align_timer_r17_present) {
    HANDLE_CODE(cg_sdt_time_align_timer_r17.unpack(bref));
  }
  if (cg_sdt_rsrp_thres_ssb_r17_present) {
    HANDLE_CODE(unpack_integer(cg_sdt_rsrp_thres_ssb_r17, bref, (uint8_t)0u, (uint8_t)127u));
  }
  if (cg_sdt_ta_validation_cfg_r17_present) {
    HANDLE_CODE(cg_sdt_ta_validation_cfg_r17.unpack(bref));
  }
  if (cg_sdt_cs_rnti_r17_present) {
    HANDLE_CODE(unpack_integer(cg_sdt_cs_rnti_r17, bref, (uint32_t)0u, (uint32_t)65535u));
  }

  return SRSASN_SUCCESS;
}
void sdt_mac_phy_cg_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (cg_sdt_cfg_lch_restrict_to_add_mod_list_r17.size() > 0) {
    j.start_array("cg-SDT-ConfigLCH-RestrictionToAddModList-r17");
    for (const auto& e1 : cg_sdt_cfg_lch_restrict_to_add_mod_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (cg_sdt_cfg_lch_restrict_to_release_list_r17.size() > 0) {
    j.start_array("cg-SDT-ConfigLCH-RestrictionToReleaseList-r17");
    for (const auto& e1 : cg_sdt_cfg_lch_restrict_to_release_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (cg_sdt_cfg_init_bwp_n_ul_r17_present) {
    j.write_fieldname("cg-SDT-ConfigInitialBWP-NUL-r17");
    cg_sdt_cfg_init_bwp_n_ul_r17.to_json(j);
  }
  if (cg_sdt_cfg_init_bwp_sul_r17_present) {
    j.write_fieldname("cg-SDT-ConfigInitialBWP-SUL-r17");
    cg_sdt_cfg_init_bwp_sul_r17.to_json(j);
  }
  if (cg_sdt_cfg_init_bwp_dl_r17_present) {
    j.write_fieldname("cg-SDT-ConfigInitialBWP-DL-r17");
    cg_sdt_cfg_init_bwp_dl_r17.to_json(j);
  }
  if (cg_sdt_time_align_timer_r17_present) {
    j.write_str("cg-SDT-TimeAlignmentTimer-r17", cg_sdt_time_align_timer_r17.to_string());
  }
  if (cg_sdt_rsrp_thres_ssb_r17_present) {
    j.write_int("cg-SDT-RSRP-ThresholdSSB-r17", cg_sdt_rsrp_thres_ssb_r17);
  }
  if (cg_sdt_ta_validation_cfg_r17_present) {
    j.write_fieldname("cg-SDT-TA-ValidationConfig-r17");
    cg_sdt_ta_validation_cfg_r17.to_json(j);
  }
  if (cg_sdt_cs_rnti_r17_present) {
    j.write_int("cg-SDT-CS-RNTI-r17", cg_sdt_cs_rnti_r17);
  }
  j.end_obj();
}

// SL-BWP-DiscPoolConfigCommon-r17 ::= SEQUENCE
SRSASN_CODE sl_bwp_disc_pool_cfg_common_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_disc_rx_pool_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_disc_tx_pool_sel_r17.size() > 0, 1));

  if (sl_disc_rx_pool_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_disc_rx_pool_r17, 1, 16));
  }
  if (sl_disc_tx_pool_sel_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_disc_tx_pool_sel_r17, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_bwp_disc_pool_cfg_common_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sl_disc_rx_pool_r17_present;
  HANDLE_CODE(bref.unpack(sl_disc_rx_pool_r17_present, 1));
  bool sl_disc_tx_pool_sel_r17_present;
  HANDLE_CODE(bref.unpack(sl_disc_tx_pool_sel_r17_present, 1));

  if (sl_disc_rx_pool_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_disc_rx_pool_r17, bref, 1, 16));
  }
  if (sl_disc_tx_pool_sel_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_disc_tx_pool_sel_r17, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void sl_bwp_disc_pool_cfg_common_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_disc_rx_pool_r17.size() > 0) {
    j.start_array("sl-DiscRxPool-r17");
    for (const auto& e1 : sl_disc_rx_pool_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_disc_tx_pool_sel_r17.size() > 0) {
    j.start_array("sl-DiscTxPoolSelected-r17");
    for (const auto& e1 : sl_disc_tx_pool_sel_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// SL-BWP-PoolConfigCommon-r16 ::= SEQUENCE
SRSASN_CODE sl_bwp_pool_cfg_common_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_rx_pool_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_tx_pool_sel_normal_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_tx_pool_exceptional_r16_present, 1));

  if (sl_rx_pool_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rx_pool_r16, 1, 16));
  }
  if (sl_tx_pool_sel_normal_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_tx_pool_sel_normal_r16, 1, 8));
  }
  if (sl_tx_pool_exceptional_r16_present) {
    HANDLE_CODE(sl_tx_pool_exceptional_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_bwp_pool_cfg_common_r16_s::unpack(cbit_ref& bref)
{
  bool sl_rx_pool_r16_present;
  HANDLE_CODE(bref.unpack(sl_rx_pool_r16_present, 1));
  bool sl_tx_pool_sel_normal_r16_present;
  HANDLE_CODE(bref.unpack(sl_tx_pool_sel_normal_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_tx_pool_exceptional_r16_present, 1));

  if (sl_rx_pool_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rx_pool_r16, bref, 1, 16));
  }
  if (sl_tx_pool_sel_normal_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_tx_pool_sel_normal_r16, bref, 1, 8));
  }
  if (sl_tx_pool_exceptional_r16_present) {
    HANDLE_CODE(sl_tx_pool_exceptional_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_bwp_pool_cfg_common_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_rx_pool_r16.size() > 0) {
    j.start_array("sl-RxPool-r16");
    for (const auto& e1 : sl_rx_pool_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_tx_pool_sel_normal_r16.size() > 0) {
    j.start_array("sl-TxPoolSelectedNormal-r16");
    for (const auto& e1 : sl_tx_pool_sel_normal_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_tx_pool_exceptional_r16_present) {
    j.write_fieldname("sl-TxPoolExceptional-r16");
    sl_tx_pool_exceptional_r16.to_json(j);
  }
  j.end_obj();
}

// SL-BWP-ConfigCommon-r16 ::= SEQUENCE
SRSASN_CODE sl_bwp_cfg_common_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_bwp_generic_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_bwp_pool_cfg_common_r16_present, 1));

  if (sl_bwp_generic_r16_present) {
    HANDLE_CODE(sl_bwp_generic_r16.pack(bref));
  }
  if (sl_bwp_pool_cfg_common_r16_present) {
    HANDLE_CODE(sl_bwp_pool_cfg_common_r16.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sl_bwp_pool_cfg_common_ps_r17.is_present();
    group_flags[0] |= sl_bwp_disc_pool_cfg_common_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_bwp_pool_cfg_common_ps_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(sl_bwp_disc_pool_cfg_common_r17.is_present(), 1));
      if (sl_bwp_pool_cfg_common_ps_r17.is_present()) {
        HANDLE_CODE(sl_bwp_pool_cfg_common_ps_r17->pack(bref));
      }
      if (sl_bwp_disc_pool_cfg_common_r17.is_present()) {
        HANDLE_CODE(sl_bwp_disc_pool_cfg_common_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_bwp_cfg_common_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_bwp_generic_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_bwp_pool_cfg_common_r16_present, 1));

  if (sl_bwp_generic_r16_present) {
    HANDLE_CODE(sl_bwp_generic_r16.unpack(bref));
  }
  if (sl_bwp_pool_cfg_common_r16_present) {
    HANDLE_CODE(sl_bwp_pool_cfg_common_r16.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sl_bwp_pool_cfg_common_ps_r17, bref);
      unpack_presence_flag(sl_bwp_disc_pool_cfg_common_r17, bref);
      if (sl_bwp_pool_cfg_common_ps_r17.is_present()) {
        HANDLE_CODE(sl_bwp_pool_cfg_common_ps_r17->unpack(bref));
      }
      if (sl_bwp_disc_pool_cfg_common_r17.is_present()) {
        HANDLE_CODE(sl_bwp_disc_pool_cfg_common_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sl_bwp_cfg_common_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_bwp_generic_r16_present) {
    j.write_fieldname("sl-BWP-Generic-r16");
    sl_bwp_generic_r16.to_json(j);
  }
  if (sl_bwp_pool_cfg_common_r16_present) {
    j.write_fieldname("sl-BWP-PoolConfigCommon-r16");
    sl_bwp_pool_cfg_common_r16.to_json(j);
  }
  if (ext) {
    if (sl_bwp_pool_cfg_common_ps_r17.is_present()) {
      j.write_fieldname("sl-BWP-PoolConfigCommonPS-r17");
      sl_bwp_pool_cfg_common_ps_r17->to_json(j);
    }
    if (sl_bwp_disc_pool_cfg_common_r17.is_present()) {
      j.write_fieldname("sl-BWP-DiscPoolConfigCommon-r17");
      sl_bwp_disc_pool_cfg_common_r17->to_json(j);
    }
  }
  j.end_obj();
}

// SL-FreqConfigCommon-r16 ::= SEQUENCE
SRSASN_CODE sl_freq_cfg_common_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_absolute_freq_ssb_r16_present, 1));
  HANDLE_CODE(bref.pack(freq_shift7p5khz_sl_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_bwp_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_sync_prio_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_nb_as_sync_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_sync_cfg_list_r16.size() > 0, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, sl_scs_specific_carrier_list_r16, 1, 5));
  HANDLE_CODE(pack_integer(bref, sl_absolute_freq_point_a_r16, (uint32_t)0u, (uint32_t)3279165u));
  if (sl_absolute_freq_ssb_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_absolute_freq_ssb_r16, (uint32_t)0u, (uint32_t)3279165u));
  }
  HANDLE_CODE(pack_integer(bref, value_n_r16, (int8_t)-1, (int8_t)1));
  if (sl_bwp_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_bwp_list_r16, 1, 4));
  }
  if (sl_sync_prio_r16_present) {
    HANDLE_CODE(sl_sync_prio_r16.pack(bref));
  }
  if (sl_nb_as_sync_r16_present) {
    HANDLE_CODE(bref.pack(sl_nb_as_sync_r16, 1));
  }
  if (sl_sync_cfg_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_sync_cfg_list_r16, 1, 16));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_freq_cfg_common_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_absolute_freq_ssb_r16_present, 1));
  HANDLE_CODE(bref.unpack(freq_shift7p5khz_sl_r16_present, 1));
  bool sl_bwp_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_bwp_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_sync_prio_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_nb_as_sync_r16_present, 1));
  bool sl_sync_cfg_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_sync_cfg_list_r16_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(sl_scs_specific_carrier_list_r16, bref, 1, 5));
  HANDLE_CODE(unpack_integer(sl_absolute_freq_point_a_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  if (sl_absolute_freq_ssb_r16_present) {
    HANDLE_CODE(unpack_integer(sl_absolute_freq_ssb_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  }
  HANDLE_CODE(unpack_integer(value_n_r16, bref, (int8_t)-1, (int8_t)1));
  if (sl_bwp_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_bwp_list_r16, bref, 1, 4));
  }
  if (sl_sync_prio_r16_present) {
    HANDLE_CODE(sl_sync_prio_r16.unpack(bref));
  }
  if (sl_nb_as_sync_r16_present) {
    HANDLE_CODE(bref.unpack(sl_nb_as_sync_r16, 1));
  }
  if (sl_sync_cfg_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_sync_cfg_list_r16, bref, 1, 16));
  }

  return SRSASN_SUCCESS;
}
void sl_freq_cfg_common_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("sl-SCS-SpecificCarrierList-r16");
  for (const auto& e1 : sl_scs_specific_carrier_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_int("sl-AbsoluteFrequencyPointA-r16", sl_absolute_freq_point_a_r16);
  if (sl_absolute_freq_ssb_r16_present) {
    j.write_int("sl-AbsoluteFrequencySSB-r16", sl_absolute_freq_ssb_r16);
  }
  if (freq_shift7p5khz_sl_r16_present) {
    j.write_str("frequencyShift7p5khzSL-r16", "true");
  }
  j.write_int("valueN-r16", value_n_r16);
  if (sl_bwp_list_r16.size() > 0) {
    j.start_array("sl-BWP-List-r16");
    for (const auto& e1 : sl_bwp_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_sync_prio_r16_present) {
    j.write_str("sl-SyncPriority-r16", sl_sync_prio_r16.to_string());
  }
  if (sl_nb_as_sync_r16_present) {
    j.write_bool("sl-NbAsSync-r16", sl_nb_as_sync_r16);
  }
  if (sl_sync_cfg_list_r16.size() > 0) {
    j.start_array("sl-SyncConfigList-r16");
    for (const auto& e1 : sl_sync_cfg_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

const char* sl_freq_cfg_common_r16_s::sl_sync_prio_r16_opts::to_string() const
{
  static const char* names[] = {"gnss", "gnbEnb"};
  return convert_enum_idx(names, 2, value, "sl_freq_cfg_common_r16_s::sl_sync_prio_r16_e_");
}

// SL-MeasConfigCommon-r16 ::= SEQUENCE
SRSASN_CODE sl_meas_cfg_common_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_meas_obj_list_common_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_report_cfg_list_common_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_meas_id_list_common_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_quant_cfg_common_r16_present, 1));

  if (sl_meas_obj_list_common_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_meas_obj_list_common_r16, 1, 64));
  }
  if (sl_report_cfg_list_common_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_report_cfg_list_common_r16, 1, 64));
  }
  if (sl_meas_id_list_common_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_meas_id_list_common_r16, 1, 64));
  }
  if (sl_quant_cfg_common_r16_present) {
    HANDLE_CODE(sl_quant_cfg_common_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_meas_cfg_common_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sl_meas_obj_list_common_r16_present;
  HANDLE_CODE(bref.unpack(sl_meas_obj_list_common_r16_present, 1));
  bool sl_report_cfg_list_common_r16_present;
  HANDLE_CODE(bref.unpack(sl_report_cfg_list_common_r16_present, 1));
  bool sl_meas_id_list_common_r16_present;
  HANDLE_CODE(bref.unpack(sl_meas_id_list_common_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_quant_cfg_common_r16_present, 1));

  if (sl_meas_obj_list_common_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_meas_obj_list_common_r16, bref, 1, 64));
  }
  if (sl_report_cfg_list_common_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_report_cfg_list_common_r16, bref, 1, 64));
  }
  if (sl_meas_id_list_common_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_meas_id_list_common_r16, bref, 1, 64));
  }
  if (sl_quant_cfg_common_r16_present) {
    HANDLE_CODE(sl_quant_cfg_common_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_meas_cfg_common_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_meas_obj_list_common_r16.size() > 0) {
    j.start_array("sl-MeasObjectListCommon-r16");
    for (const auto& e1 : sl_meas_obj_list_common_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_report_cfg_list_common_r16.size() > 0) {
    j.start_array("sl-ReportConfigListCommon-r16");
    for (const auto& e1 : sl_report_cfg_list_common_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_meas_id_list_common_r16.size() > 0) {
    j.start_array("sl-MeasIdListCommon-r16");
    for (const auto& e1 : sl_meas_id_list_common_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_quant_cfg_common_r16_present) {
    j.write_fieldname("sl-QuantityConfigCommon-r16");
    sl_quant_cfg_common_r16.to_json(j);
  }
  j.end_obj();
}

// SL-ConfigCommonNR-r16 ::= SEQUENCE
SRSASN_CODE sl_cfg_common_nr_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_freq_info_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_ue_sel_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_nr_anchor_carrier_freq_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_eutra_anchor_carrier_freq_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_radio_bearer_cfg_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_rlc_bearer_cfg_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_meas_cfg_common_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_csi_acquisition_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_offset_dfn_r16_present, 1));
  HANDLE_CODE(bref.pack(t400_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_max_num_consecutive_dtx_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ssb_prio_nr_r16_present, 1));

  if (sl_freq_info_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_freq_info_list_r16, 1, 8));
  }
  if (sl_ue_sel_cfg_r16_present) {
    HANDLE_CODE(sl_ue_sel_cfg_r16.pack(bref));
  }
  if (sl_nr_anchor_carrier_freq_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_nr_anchor_carrier_freq_list_r16, 1, 8, integer_packer<uint32_t>(0, 3279165)));
  }
  if (sl_eutra_anchor_carrier_freq_list_r16.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, sl_eutra_anchor_carrier_freq_list_r16, 1, 8, integer_packer<uint32_t>(0, 262143)));
  }
  if (sl_radio_bearer_cfg_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_radio_bearer_cfg_list_r16, 1, 512));
  }
  if (sl_rlc_bearer_cfg_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rlc_bearer_cfg_list_r16, 1, 512));
  }
  if (sl_meas_cfg_common_r16_present) {
    HANDLE_CODE(sl_meas_cfg_common_r16.pack(bref));
  }
  if (sl_offset_dfn_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_offset_dfn_r16, (uint16_t)1u, (uint16_t)1000u));
  }
  if (t400_r16_present) {
    HANDLE_CODE(t400_r16.pack(bref));
  }
  if (sl_max_num_consecutive_dtx_r16_present) {
    HANDLE_CODE(sl_max_num_consecutive_dtx_r16.pack(bref));
  }
  if (sl_ssb_prio_nr_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_ssb_prio_nr_r16, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_cfg_common_nr_r16_s::unpack(cbit_ref& bref)
{
  bool sl_freq_info_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_freq_info_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ue_sel_cfg_r16_present, 1));
  bool sl_nr_anchor_carrier_freq_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_nr_anchor_carrier_freq_list_r16_present, 1));
  bool sl_eutra_anchor_carrier_freq_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_eutra_anchor_carrier_freq_list_r16_present, 1));
  bool sl_radio_bearer_cfg_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_radio_bearer_cfg_list_r16_present, 1));
  bool sl_rlc_bearer_cfg_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_rlc_bearer_cfg_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_meas_cfg_common_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_csi_acquisition_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_offset_dfn_r16_present, 1));
  HANDLE_CODE(bref.unpack(t400_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_max_num_consecutive_dtx_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ssb_prio_nr_r16_present, 1));

  if (sl_freq_info_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_freq_info_list_r16, bref, 1, 8));
  }
  if (sl_ue_sel_cfg_r16_present) {
    HANDLE_CODE(sl_ue_sel_cfg_r16.unpack(bref));
  }
  if (sl_nr_anchor_carrier_freq_list_r16_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(sl_nr_anchor_carrier_freq_list_r16, bref, 1, 8, integer_packer<uint32_t>(0, 3279165)));
  }
  if (sl_eutra_anchor_carrier_freq_list_r16_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(sl_eutra_anchor_carrier_freq_list_r16, bref, 1, 8, integer_packer<uint32_t>(0, 262143)));
  }
  if (sl_radio_bearer_cfg_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_radio_bearer_cfg_list_r16, bref, 1, 512));
  }
  if (sl_rlc_bearer_cfg_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rlc_bearer_cfg_list_r16, bref, 1, 512));
  }
  if (sl_meas_cfg_common_r16_present) {
    HANDLE_CODE(sl_meas_cfg_common_r16.unpack(bref));
  }
  if (sl_offset_dfn_r16_present) {
    HANDLE_CODE(unpack_integer(sl_offset_dfn_r16, bref, (uint16_t)1u, (uint16_t)1000u));
  }
  if (t400_r16_present) {
    HANDLE_CODE(t400_r16.unpack(bref));
  }
  if (sl_max_num_consecutive_dtx_r16_present) {
    HANDLE_CODE(sl_max_num_consecutive_dtx_r16.unpack(bref));
  }
  if (sl_ssb_prio_nr_r16_present) {
    HANDLE_CODE(unpack_integer(sl_ssb_prio_nr_r16, bref, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
void sl_cfg_common_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_freq_info_list_r16.size() > 0) {
    j.start_array("sl-FreqInfoList-r16");
    for (const auto& e1 : sl_freq_info_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_ue_sel_cfg_r16_present) {
    j.write_fieldname("sl-UE-SelectedConfig-r16");
    sl_ue_sel_cfg_r16.to_json(j);
  }
  if (sl_nr_anchor_carrier_freq_list_r16.size() > 0) {
    j.start_array("sl-NR-AnchorCarrierFreqList-r16");
    for (const auto& e1 : sl_nr_anchor_carrier_freq_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_eutra_anchor_carrier_freq_list_r16.size() > 0) {
    j.start_array("sl-EUTRA-AnchorCarrierFreqList-r16");
    for (const auto& e1 : sl_eutra_anchor_carrier_freq_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_radio_bearer_cfg_list_r16.size() > 0) {
    j.start_array("sl-RadioBearerConfigList-r16");
    for (const auto& e1 : sl_radio_bearer_cfg_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_rlc_bearer_cfg_list_r16.size() > 0) {
    j.start_array("sl-RLC-BearerConfigList-r16");
    for (const auto& e1 : sl_rlc_bearer_cfg_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_meas_cfg_common_r16_present) {
    j.write_fieldname("sl-MeasConfigCommon-r16");
    sl_meas_cfg_common_r16.to_json(j);
  }
  if (sl_csi_acquisition_r16_present) {
    j.write_str("sl-CSI-Acquisition-r16", "enabled");
  }
  if (sl_offset_dfn_r16_present) {
    j.write_int("sl-OffsetDFN-r16", sl_offset_dfn_r16);
  }
  if (t400_r16_present) {
    j.write_str("t400-r16", t400_r16.to_string());
  }
  if (sl_max_num_consecutive_dtx_r16_present) {
    j.write_str("sl-MaxNumConsecutiveDTX-r16", sl_max_num_consecutive_dtx_r16.to_string());
  }
  if (sl_ssb_prio_nr_r16_present) {
    j.write_int("sl-SSB-PriorityNR-r16", sl_ssb_prio_nr_r16);
  }
  j.end_obj();
}

const char* sl_cfg_common_nr_r16_s::t400_r16_opts::to_string() const
{
  static const char* names[] = {"ms100", "ms200", "ms300", "ms400", "ms600", "ms1000", "ms1500", "ms2000"};
  return convert_enum_idx(names, 8, value, "sl_cfg_common_nr_r16_s::t400_r16_e_");
}
uint16_t sl_cfg_common_nr_r16_s::t400_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 200, 300, 400, 600, 1000, 1500, 2000};
  return map_enum_number(numbers, 8, value, "sl_cfg_common_nr_r16_s::t400_r16_e_");
}

const char* sl_cfg_common_nr_r16_s::sl_max_num_consecutive_dtx_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n6", "n8", "n16", "n32"};
  return convert_enum_idx(names, 8, value, "sl_cfg_common_nr_r16_s::sl_max_num_consecutive_dtx_r16_e_");
}
uint8_t sl_cfg_common_nr_r16_s::sl_max_num_consecutive_dtx_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 6, 8, 16, 32};
  return map_enum_number(numbers, 8, value, "sl_cfg_common_nr_r16_s::sl_max_num_consecutive_dtx_r16_e_");
}

// SL-DiscConfigCommon-r17 ::= SEQUENCE
SRSASN_CODE sl_disc_cfg_common_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(sl_relay_ue_cfg_common_r17.pack(bref));
  HANDLE_CODE(sl_remote_ue_cfg_common_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_disc_cfg_common_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(sl_relay_ue_cfg_common_r17.unpack(bref));
  HANDLE_CODE(sl_remote_ue_cfg_common_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_disc_cfg_common_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sl-RelayUE-ConfigCommon-r17");
  sl_relay_ue_cfg_common_r17.to_json(j);
  j.write_fieldname("sl-RemoteUE-ConfigCommon-r17");
  sl_remote_ue_cfg_common_r17.to_json(j);
  j.end_obj();
}

// UE-TimersAndConstantsRemoteUE-r17 ::= SEQUENCE
SRSASN_CODE ue_timers_and_consts_remote_ue_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(t300_remote_ue_r17_present, 1));
  HANDLE_CODE(bref.pack(t301_remote_ue_r17_present, 1));
  HANDLE_CODE(bref.pack(t319_remote_ue_r17_present, 1));

  if (t300_remote_ue_r17_present) {
    HANDLE_CODE(t300_remote_ue_r17.pack(bref));
  }
  if (t301_remote_ue_r17_present) {
    HANDLE_CODE(t301_remote_ue_r17.pack(bref));
  }
  if (t319_remote_ue_r17_present) {
    HANDLE_CODE(t319_remote_ue_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_timers_and_consts_remote_ue_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(t300_remote_ue_r17_present, 1));
  HANDLE_CODE(bref.unpack(t301_remote_ue_r17_present, 1));
  HANDLE_CODE(bref.unpack(t319_remote_ue_r17_present, 1));

  if (t300_remote_ue_r17_present) {
    HANDLE_CODE(t300_remote_ue_r17.unpack(bref));
  }
  if (t301_remote_ue_r17_present) {
    HANDLE_CODE(t301_remote_ue_r17.unpack(bref));
  }
  if (t319_remote_ue_r17_present) {
    HANDLE_CODE(t319_remote_ue_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_timers_and_consts_remote_ue_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (t300_remote_ue_r17_present) {
    j.write_str("t300-RemoteUE-r17", t300_remote_ue_r17.to_string());
  }
  if (t301_remote_ue_r17_present) {
    j.write_str("t301-RemoteUE-r17", t301_remote_ue_r17.to_string());
  }
  if (t319_remote_ue_r17_present) {
    j.write_str("t319-RemoteUE-r17", t319_remote_ue_r17.to_string());
  }
  j.end_obj();
}

const char* ue_timers_and_consts_remote_ue_r17_s::t300_remote_ue_r17_opts::to_string() const
{
  static const char* names[] = {"ms100", "ms200", "ms300", "ms400", "ms600", "ms1000", "ms1500", "ms2000"};
  return convert_enum_idx(names, 8, value, "ue_timers_and_consts_remote_ue_r17_s::t300_remote_ue_r17_e_");
}
uint16_t ue_timers_and_consts_remote_ue_r17_s::t300_remote_ue_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 200, 300, 400, 600, 1000, 1500, 2000};
  return map_enum_number(numbers, 8, value, "ue_timers_and_consts_remote_ue_r17_s::t300_remote_ue_r17_e_");
}

const char* ue_timers_and_consts_remote_ue_r17_s::t301_remote_ue_r17_opts::to_string() const
{
  static const char* names[] = {"ms100", "ms200", "ms300", "ms400", "ms600", "ms1000", "ms1500", "ms2000"};
  return convert_enum_idx(names, 8, value, "ue_timers_and_consts_remote_ue_r17_s::t301_remote_ue_r17_e_");
}
uint16_t ue_timers_and_consts_remote_ue_r17_s::t301_remote_ue_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 200, 300, 400, 600, 1000, 1500, 2000};
  return map_enum_number(numbers, 8, value, "ue_timers_and_consts_remote_ue_r17_s::t301_remote_ue_r17_e_");
}

const char* ue_timers_and_consts_remote_ue_r17_s::t319_remote_ue_r17_opts::to_string() const
{
  static const char* names[] = {"ms100", "ms200", "ms300", "ms400", "ms600", "ms1000", "ms1500", "ms2000"};
  return convert_enum_idx(names, 8, value, "ue_timers_and_consts_remote_ue_r17_s::t319_remote_ue_r17_e_");
}
uint16_t ue_timers_and_consts_remote_ue_r17_s::t319_remote_ue_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 200, 300, 400, 600, 1000, 1500, 2000};
  return map_enum_number(numbers, 8, value, "ue_timers_and_consts_remote_ue_r17_s::t319_remote_ue_r17_e_");
}

// SIB12-IEs-r16 ::= SEQUENCE
SRSASN_CODE sib12_ies_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  HANDLE_CODE(sl_cfg_common_nr_r16.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sl_drx_cfg_common_gc_bc_r17.is_present();
    group_flags[0] |= sl_disc_cfg_common_r17.is_present();
    group_flags[0] |= sl_l2_u2_n_relay_r17_present;
    group_flags[0] |= sl_non_relay_discovery_r17_present;
    group_flags[0] |= sl_l3_u2_n_relay_discovery_r17_present;
    group_flags[0] |= sl_timers_and_consts_remote_ue_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_drx_cfg_common_gc_bc_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(sl_disc_cfg_common_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(sl_l2_u2_n_relay_r17_present, 1));
      HANDLE_CODE(bref.pack(sl_non_relay_discovery_r17_present, 1));
      HANDLE_CODE(bref.pack(sl_l3_u2_n_relay_discovery_r17_present, 1));
      HANDLE_CODE(bref.pack(sl_timers_and_consts_remote_ue_r17.is_present(), 1));
      if (sl_drx_cfg_common_gc_bc_r17.is_present()) {
        HANDLE_CODE(sl_drx_cfg_common_gc_bc_r17->pack(bref));
      }
      if (sl_disc_cfg_common_r17.is_present()) {
        HANDLE_CODE(sl_disc_cfg_common_r17->pack(bref));
      }
      if (sl_timers_and_consts_remote_ue_r17.is_present()) {
        HANDLE_CODE(sl_timers_and_consts_remote_ue_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sib12_ies_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  HANDLE_CODE(sl_cfg_common_nr_r16.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sl_drx_cfg_common_gc_bc_r17, bref);
      unpack_presence_flag(sl_disc_cfg_common_r17, bref);
      HANDLE_CODE(bref.unpack(sl_l2_u2_n_relay_r17_present, 1));
      HANDLE_CODE(bref.unpack(sl_non_relay_discovery_r17_present, 1));
      HANDLE_CODE(bref.unpack(sl_l3_u2_n_relay_discovery_r17_present, 1));
      unpack_presence_flag(sl_timers_and_consts_remote_ue_r17, bref);
      if (sl_drx_cfg_common_gc_bc_r17.is_present()) {
        HANDLE_CODE(sl_drx_cfg_common_gc_bc_r17->unpack(bref));
      }
      if (sl_disc_cfg_common_r17.is_present()) {
        HANDLE_CODE(sl_disc_cfg_common_r17->unpack(bref));
      }
      if (sl_timers_and_consts_remote_ue_r17.is_present()) {
        HANDLE_CODE(sl_timers_and_consts_remote_ue_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sib12_ies_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sl-ConfigCommonNR-r16");
  sl_cfg_common_nr_r16.to_json(j);
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (ext) {
    if (sl_drx_cfg_common_gc_bc_r17.is_present()) {
      j.write_fieldname("sl-DRX-ConfigCommonGC-BC-r17");
      sl_drx_cfg_common_gc_bc_r17->to_json(j);
    }
    if (sl_disc_cfg_common_r17.is_present()) {
      j.write_fieldname("sl-DiscConfigCommon-r17");
      sl_disc_cfg_common_r17->to_json(j);
    }
    if (sl_l2_u2_n_relay_r17_present) {
      j.write_str("sl-L2U2N-Relay-r17", "enabled");
    }
    if (sl_non_relay_discovery_r17_present) {
      j.write_str("sl-NonRelayDiscovery-r17", "enabled");
    }
    if (sl_l3_u2_n_relay_discovery_r17_present) {
      j.write_str("sl-L3U2N-RelayDiscovery-r17", "enabled");
    }
    if (sl_timers_and_consts_remote_ue_r17.is_present()) {
      j.write_fieldname("sl-TimersAndConstantsRemoteUE-r17");
      sl_timers_and_consts_remote_ue_r17->to_json(j);
    }
  }
  j.end_obj();
}

// TRS-ResourceSet-r17 ::= SEQUENCE
SRSASN_CODE trs_res_set_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pwr_ctrl_offset_ss_r17.pack(bref));
  HANDLE_CODE(scrambling_id_info_r17.pack(bref));
  HANDLE_CODE(pack_integer(bref, first_ofdm_symbol_in_time_domain_r17, (uint8_t)0u, (uint8_t)9u));
  HANDLE_CODE(pack_integer(bref, start_rb_r17, (uint16_t)0u, (uint16_t)274u));
  HANDLE_CODE(pack_integer(bref, nrof_rbs_r17, (uint16_t)24u, (uint16_t)276u));
  HANDLE_CODE(pack_integer(bref, ssb_idx_r17, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(periodicity_and_offset_r17.pack(bref));
  HANDLE_CODE(freq_domain_alloc_r17.pack(bref));
  HANDLE_CODE(pack_integer(bref, ind_bit_id_r17, (uint8_t)0u, (uint8_t)5u));
  HANDLE_CODE(nrof_res_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE trs_res_set_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(pwr_ctrl_offset_ss_r17.unpack(bref));
  HANDLE_CODE(scrambling_id_info_r17.unpack(bref));
  HANDLE_CODE(unpack_integer(first_ofdm_symbol_in_time_domain_r17, bref, (uint8_t)0u, (uint8_t)9u));
  HANDLE_CODE(unpack_integer(start_rb_r17, bref, (uint16_t)0u, (uint16_t)274u));
  HANDLE_CODE(unpack_integer(nrof_rbs_r17, bref, (uint16_t)24u, (uint16_t)276u));
  HANDLE_CODE(unpack_integer(ssb_idx_r17, bref, (uint8_t)0u, (uint8_t)63u));
  HANDLE_CODE(periodicity_and_offset_r17.unpack(bref));
  HANDLE_CODE(freq_domain_alloc_r17.unpack(bref));
  HANDLE_CODE(unpack_integer(ind_bit_id_r17, bref, (uint8_t)0u, (uint8_t)5u));
  HANDLE_CODE(nrof_res_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void trs_res_set_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("powerControlOffsetSS-r17", pwr_ctrl_offset_ss_r17.to_string());
  j.write_fieldname("scramblingID-Info-r17");
  scrambling_id_info_r17.to_json(j);
  j.write_int("firstOFDMSymbolInTimeDomain-r17", first_ofdm_symbol_in_time_domain_r17);
  j.write_int("startingRB-r17", start_rb_r17);
  j.write_int("nrofRBs-r17", nrof_rbs_r17);
  j.write_int("ssb-Index-r17", ssb_idx_r17);
  j.write_fieldname("periodicityAndOffset-r17");
  periodicity_and_offset_r17.to_json(j);
  j.write_str("frequencyDomainAllocation-r17", freq_domain_alloc_r17.to_string());
  j.write_int("indBitID-r17", ind_bit_id_r17);
  j.write_str("nrofResources-r17", nrof_res_r17.to_string());
  j.end_obj();
}

const char* trs_res_set_r17_s::pwr_ctrl_offset_ss_r17_opts::to_string() const
{
  static const char* names[] = {"db-3", "db0", "db3", "db6"};
  return convert_enum_idx(names, 4, value, "trs_res_set_r17_s::pwr_ctrl_offset_ss_r17_e_");
}
int8_t trs_res_set_r17_s::pwr_ctrl_offset_ss_r17_opts::to_number() const
{
  static const int8_t numbers[] = {-3, 0, 3, 6};
  return map_enum_number(numbers, 4, value, "trs_res_set_r17_s::pwr_ctrl_offset_ss_r17_e_");
}

void trs_res_set_r17_s::scrambling_id_info_r17_c_::destroy_()
{
  switch (type_) {
    case types::scrambling_id_per_res_list_with2_r17:
      c.destroy<scrambling_id_per_res_list_with2_r17_l_>();
      break;
    case types::scrambling_id_per_res_list_with4_r17:
      c.destroy<scrambling_id_per_res_list_with4_r17_l_>();
      break;
    default:
      break;
  }
}
void trs_res_set_r17_s::scrambling_id_info_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::scrambling_id_for_common_r17:
      break;
    case types::scrambling_id_per_res_list_with2_r17:
      c.init<scrambling_id_per_res_list_with2_r17_l_>();
      break;
    case types::scrambling_id_per_res_list_with4_r17:
      c.init<scrambling_id_per_res_list_with4_r17_l_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trs_res_set_r17_s::scrambling_id_info_r17_c_");
  }
}
trs_res_set_r17_s::scrambling_id_info_r17_c_::scrambling_id_info_r17_c_(
    const trs_res_set_r17_s::scrambling_id_info_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::scrambling_id_for_common_r17:
      c.init(other.c.get<uint16_t>());
      break;
    case types::scrambling_id_per_res_list_with2_r17:
      c.init(other.c.get<scrambling_id_per_res_list_with2_r17_l_>());
      break;
    case types::scrambling_id_per_res_list_with4_r17:
      c.init(other.c.get<scrambling_id_per_res_list_with4_r17_l_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trs_res_set_r17_s::scrambling_id_info_r17_c_");
  }
}
trs_res_set_r17_s::scrambling_id_info_r17_c_&
trs_res_set_r17_s::scrambling_id_info_r17_c_::operator=(const trs_res_set_r17_s::scrambling_id_info_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::scrambling_id_for_common_r17:
      c.set(other.c.get<uint16_t>());
      break;
    case types::scrambling_id_per_res_list_with2_r17:
      c.set(other.c.get<scrambling_id_per_res_list_with2_r17_l_>());
      break;
    case types::scrambling_id_per_res_list_with4_r17:
      c.set(other.c.get<scrambling_id_per_res_list_with4_r17_l_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trs_res_set_r17_s::scrambling_id_info_r17_c_");
  }

  return *this;
}
uint16_t& trs_res_set_r17_s::scrambling_id_info_r17_c_::set_scrambling_id_for_common_r17()
{
  set(types::scrambling_id_for_common_r17);
  return c.get<uint16_t>();
}
trs_res_set_r17_s::scrambling_id_info_r17_c_::scrambling_id_per_res_list_with2_r17_l_&
trs_res_set_r17_s::scrambling_id_info_r17_c_::set_scrambling_id_per_res_list_with2_r17()
{
  set(types::scrambling_id_per_res_list_with2_r17);
  return c.get<scrambling_id_per_res_list_with2_r17_l_>();
}
trs_res_set_r17_s::scrambling_id_info_r17_c_::scrambling_id_per_res_list_with4_r17_l_&
trs_res_set_r17_s::scrambling_id_info_r17_c_::set_scrambling_id_per_res_list_with4_r17()
{
  set(types::scrambling_id_per_res_list_with4_r17);
  return c.get<scrambling_id_per_res_list_with4_r17_l_>();
}
void trs_res_set_r17_s::scrambling_id_info_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::scrambling_id_for_common_r17:
      j.write_int("scramblingIDforCommon-r17", c.get<uint16_t>());
      break;
    case types::scrambling_id_per_res_list_with2_r17:
      j.start_array("scramblingIDperResourceListWith2-r17");
      for (const auto& e1 : c.get<scrambling_id_per_res_list_with2_r17_l_>()) {
        j.write_int(e1);
      }
      j.end_array();
      break;
    case types::scrambling_id_per_res_list_with4_r17:
      j.start_array("scramblingIDperResourceListWith4-r17");
      for (const auto& e1 : c.get<scrambling_id_per_res_list_with4_r17_l_>()) {
        j.write_int(e1);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "trs_res_set_r17_s::scrambling_id_info_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE trs_res_set_r17_s::scrambling_id_info_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::scrambling_id_for_common_r17:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1023u));
      break;
    case types::scrambling_id_per_res_list_with2_r17:
      HANDLE_CODE(pack_fixed_seq_of(bref,
                                    c.get<scrambling_id_per_res_list_with2_r17_l_>(),
                                    c.get<scrambling_id_per_res_list_with2_r17_l_>().size(),
                                    integer_packer<uint16_t>(0, 1023)));
      break;
    case types::scrambling_id_per_res_list_with4_r17:
      HANDLE_CODE(pack_fixed_seq_of(bref,
                                    c.get<scrambling_id_per_res_list_with4_r17_l_>(),
                                    c.get<scrambling_id_per_res_list_with4_r17_l_>().size(),
                                    integer_packer<uint16_t>(0, 1023)));
      break;
    default:
      log_invalid_choice_id(type_, "trs_res_set_r17_s::scrambling_id_info_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE trs_res_set_r17_s::scrambling_id_info_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::scrambling_id_for_common_r17:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1023u));
      break;
    case types::scrambling_id_per_res_list_with2_r17:
      HANDLE_CODE(unpack_fixed_seq_of(c.get<scrambling_id_per_res_list_with2_r17_l_>(),
                                      bref,
                                      c.get<scrambling_id_per_res_list_with2_r17_l_>().size(),
                                      integer_packer<uint16_t>(0, 1023)));
      break;
    case types::scrambling_id_per_res_list_with4_r17:
      HANDLE_CODE(unpack_fixed_seq_of(c.get<scrambling_id_per_res_list_with4_r17_l_>(),
                                      bref,
                                      c.get<scrambling_id_per_res_list_with4_r17_l_>().size(),
                                      integer_packer<uint16_t>(0, 1023)));
      break;
    default:
      log_invalid_choice_id(type_, "trs_res_set_r17_s::scrambling_id_info_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* trs_res_set_r17_s::scrambling_id_info_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {
      "scramblingIDforCommon-r17", "scramblingIDperResourceListWith2-r17", "scramblingIDperResourceListWith4-r17"};
  return convert_enum_idx(names, 3, value, "trs_res_set_r17_s::scrambling_id_info_r17_c_::types");
}
uint8_t trs_res_set_r17_s::scrambling_id_info_r17_c_::types_opts::to_number() const
{
  switch (value) {
    case scrambling_id_per_res_list_with2_r17:
      return 2;
    case scrambling_id_per_res_list_with4_r17:
      return 4;
    default:
      invalid_enum_number(value, "trs_res_set_r17_s::scrambling_id_info_r17_c_::types");
  }
  return 0;
}

void trs_res_set_r17_s::periodicity_and_offset_r17_c_::destroy_() {}
void trs_res_set_r17_s::periodicity_and_offset_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
trs_res_set_r17_s::periodicity_and_offset_r17_c_::periodicity_and_offset_r17_c_(
    const trs_res_set_r17_s::periodicity_and_offset_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::slots10:
      c.init(other.c.get<uint8_t>());
      break;
    case types::slots20:
      c.init(other.c.get<uint8_t>());
      break;
    case types::slots40:
      c.init(other.c.get<uint8_t>());
      break;
    case types::slots80:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trs_res_set_r17_s::periodicity_and_offset_r17_c_");
  }
}
trs_res_set_r17_s::periodicity_and_offset_r17_c_& trs_res_set_r17_s::periodicity_and_offset_r17_c_::operator=(
    const trs_res_set_r17_s::periodicity_and_offset_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::slots10:
      c.set(other.c.get<uint8_t>());
      break;
    case types::slots20:
      c.set(other.c.get<uint8_t>());
      break;
    case types::slots40:
      c.set(other.c.get<uint8_t>());
      break;
    case types::slots80:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trs_res_set_r17_s::periodicity_and_offset_r17_c_");
  }

  return *this;
}
uint8_t& trs_res_set_r17_s::periodicity_and_offset_r17_c_::set_slots10()
{
  set(types::slots10);
  return c.get<uint8_t>();
}
uint8_t& trs_res_set_r17_s::periodicity_and_offset_r17_c_::set_slots20()
{
  set(types::slots20);
  return c.get<uint8_t>();
}
uint8_t& trs_res_set_r17_s::periodicity_and_offset_r17_c_::set_slots40()
{
  set(types::slots40);
  return c.get<uint8_t>();
}
uint8_t& trs_res_set_r17_s::periodicity_and_offset_r17_c_::set_slots80()
{
  set(types::slots80);
  return c.get<uint8_t>();
}
void trs_res_set_r17_s::periodicity_and_offset_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::slots10:
      j.write_int("slots10", c.get<uint8_t>());
      break;
    case types::slots20:
      j.write_int("slots20", c.get<uint8_t>());
      break;
    case types::slots40:
      j.write_int("slots40", c.get<uint8_t>());
      break;
    case types::slots80:
      j.write_int("slots80", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "trs_res_set_r17_s::periodicity_and_offset_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE trs_res_set_r17_s::periodicity_and_offset_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::slots10:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)9u));
      break;
    case types::slots20:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)19u));
      break;
    case types::slots40:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)39u));
      break;
    case types::slots80:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u));
      break;
    default:
      log_invalid_choice_id(type_, "trs_res_set_r17_s::periodicity_and_offset_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE trs_res_set_r17_s::periodicity_and_offset_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::slots10:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)9u));
      break;
    case types::slots20:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)19u));
      break;
    case types::slots40:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)39u));
      break;
    case types::slots80:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u));
      break;
    default:
      log_invalid_choice_id(type_, "trs_res_set_r17_s::periodicity_and_offset_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* trs_res_set_r17_s::periodicity_and_offset_r17_c_::types_opts::to_string() const
{
  static const char* names[] = {"slots10", "slots20", "slots40", "slots80"};
  return convert_enum_idx(names, 4, value, "trs_res_set_r17_s::periodicity_and_offset_r17_c_::types");
}
uint8_t trs_res_set_r17_s::periodicity_and_offset_r17_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {10, 20, 40, 80};
  return map_enum_number(numbers, 4, value, "trs_res_set_r17_s::periodicity_and_offset_r17_c_::types");
}

const char* trs_res_set_r17_s::nrof_res_r17_opts::to_string() const
{
  static const char* names[] = {"n2", "n4"};
  return convert_enum_idx(names, 2, value, "trs_res_set_r17_s::nrof_res_r17_e_");
}
uint8_t trs_res_set_r17_s::nrof_res_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4};
  return map_enum_number(numbers, 2, value, "trs_res_set_r17_s::nrof_res_r17_e_");
}

// SIB17-IEs-r17 ::= SEQUENCE
SRSASN_CODE sib17_ies_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(validity_dur_r17_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, trs_res_set_cfg_r17, 1, 64));
  if (validity_dur_r17_present) {
    HANDLE_CODE(validity_dur_r17.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sib17_ies_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(validity_dur_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(trs_res_set_cfg_r17, bref, 1, 64));
  if (validity_dur_r17_present) {
    HANDLE_CODE(validity_dur_r17.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sib17_ies_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("trs-ResourceSetConfig-r17");
  for (const auto& e1 : trs_res_set_cfg_r17) {
    e1.to_json(j);
  }
  j.end_array();
  if (validity_dur_r17_present) {
    j.write_str("validityDuration-r17", validity_dur_r17.to_string());
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  j.end_obj();
}

const char* sib17_ies_r17_s::validity_dur_r17_opts::to_string() const
{
  static const char* names[] = {"t1",
                                "t2",
                                "t4",
                                "t8",
                                "t16",
                                "t32",
                                "t64",
                                "t128",
                                "t256",
                                "t512",
                                "infinity",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "sib17_ies_r17_s::validity_dur_r17_e_");
}
int16_t sib17_ies_r17_s::validity_dur_r17_opts::to_number() const
{
  static const int16_t numbers[] = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, -1};
  return map_enum_number(numbers, 11, value, "sib17_ies_r17_s::validity_dur_r17_e_");
}

// SL-ServingCellInfo-r17 ::= SEQUENCE
SRSASN_CODE sl_serving_cell_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, sl_pci_r17, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(pack_integer(bref, sl_carrier_freq_nr_r17, (uint32_t)0u, (uint32_t)3279165u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_serving_cell_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(sl_pci_r17, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(unpack_integer(sl_carrier_freq_nr_r17, bref, (uint32_t)0u, (uint32_t)3279165u));

  return SRSASN_SUCCESS;
}
void sl_serving_cell_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-PhysCellId-r17", sl_pci_r17);
  j.write_int("sl-CarrierFreqNR-r17", sl_carrier_freq_nr_r17);
  j.end_obj();
}

// SRS-PosConfig-r17 ::= SEQUENCE
SRSASN_CODE srs_pos_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(srs_pos_res_set_to_release_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(srs_pos_res_set_to_add_mod_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(srs_pos_res_to_release_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(srs_pos_res_to_add_mod_list_r17.size() > 0, 1));

  if (srs_pos_res_set_to_release_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, srs_pos_res_set_to_release_list_r17, 1, 16, integer_packer<uint8_t>(0, 15)));
  }
  if (srs_pos_res_set_to_add_mod_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, srs_pos_res_set_to_add_mod_list_r17, 1, 16));
  }
  if (srs_pos_res_to_release_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, srs_pos_res_to_release_list_r17, 1, 64, integer_packer<uint8_t>(0, 63)));
  }
  if (srs_pos_res_to_add_mod_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, srs_pos_res_to_add_mod_list_r17, 1, 64));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE srs_pos_cfg_r17_s::unpack(cbit_ref& bref)
{
  bool srs_pos_res_set_to_release_list_r17_present;
  HANDLE_CODE(bref.unpack(srs_pos_res_set_to_release_list_r17_present, 1));
  bool srs_pos_res_set_to_add_mod_list_r17_present;
  HANDLE_CODE(bref.unpack(srs_pos_res_set_to_add_mod_list_r17_present, 1));
  bool srs_pos_res_to_release_list_r17_present;
  HANDLE_CODE(bref.unpack(srs_pos_res_to_release_list_r17_present, 1));
  bool srs_pos_res_to_add_mod_list_r17_present;
  HANDLE_CODE(bref.unpack(srs_pos_res_to_add_mod_list_r17_present, 1));

  if (srs_pos_res_set_to_release_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(srs_pos_res_set_to_release_list_r17, bref, 1, 16, integer_packer<uint8_t>(0, 15)));
  }
  if (srs_pos_res_set_to_add_mod_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(srs_pos_res_set_to_add_mod_list_r17, bref, 1, 16));
  }
  if (srs_pos_res_to_release_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(srs_pos_res_to_release_list_r17, bref, 1, 64, integer_packer<uint8_t>(0, 63)));
  }
  if (srs_pos_res_to_add_mod_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(srs_pos_res_to_add_mod_list_r17, bref, 1, 64));
  }

  return SRSASN_SUCCESS;
}
void srs_pos_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (srs_pos_res_set_to_release_list_r17.size() > 0) {
    j.start_array("srs-PosResourceSetToReleaseList-r17");
    for (const auto& e1 : srs_pos_res_set_to_release_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (srs_pos_res_set_to_add_mod_list_r17.size() > 0) {
    j.start_array("srs-PosResourceSetToAddModList-r17");
    for (const auto& e1 : srs_pos_res_set_to_add_mod_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (srs_pos_res_to_release_list_r17.size() > 0) {
    j.start_array("srs-PosResourceToReleaseList-r17");
    for (const auto& e1 : srs_pos_res_to_release_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (srs_pos_res_to_add_mod_list_r17.size() > 0) {
    j.start_array("srs-PosResourceToAddModList-r17");
    for (const auto& e1 : srs_pos_res_to_add_mod_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// RSRP-ChangeThreshold-r17 ::= ENUMERATED
const char* rsrp_change_thres_r17_opts::to_string() const
{
  static const char* names[] = {"dB4",
                                "dB6",
                                "dB8",
                                "dB10",
                                "dB14",
                                "dB18",
                                "dB22",
                                "dB26",
                                "dB30",
                                "dB34",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "rsrp_change_thres_r17_e");
}
uint8_t rsrp_change_thres_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 6, 8, 10, 14, 18, 22, 26, 30, 34};
  return map_enum_number(numbers, 10, value, "rsrp_change_thres_r17_e");
}

// SRS-PosRRC-InactiveConfig-r17 ::= SEQUENCE
SRSASN_CODE srs_pos_rrc_inactive_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(srs_pos_cfg_n_ul_r17_present, 1));
  HANDLE_CODE(bref.pack(srs_pos_cfg_sul_r17_present, 1));
  HANDLE_CODE(bref.pack(bwp_n_ul_r17_present, 1));
  HANDLE_CODE(bref.pack(bwp_sul_r17_present, 1));
  HANDLE_CODE(bref.pack(inactive_pos_srs_time_align_timer_r17_present, 1));
  HANDLE_CODE(bref.pack(inactive_pos_srs_rsrp_change_thres_r17_present, 1));

  if (srs_pos_cfg_n_ul_r17_present) {
    HANDLE_CODE(srs_pos_cfg_n_ul_r17.pack(bref));
  }
  if (srs_pos_cfg_sul_r17_present) {
    HANDLE_CODE(srs_pos_cfg_sul_r17.pack(bref));
  }
  if (bwp_n_ul_r17_present) {
    HANDLE_CODE(bwp_n_ul_r17.pack(bref));
  }
  if (bwp_sul_r17_present) {
    HANDLE_CODE(bwp_sul_r17.pack(bref));
  }
  if (inactive_pos_srs_time_align_timer_r17_present) {
    HANDLE_CODE(inactive_pos_srs_time_align_timer_r17.pack(bref));
  }
  if (inactive_pos_srs_rsrp_change_thres_r17_present) {
    HANDLE_CODE(inactive_pos_srs_rsrp_change_thres_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE srs_pos_rrc_inactive_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(srs_pos_cfg_n_ul_r17_present, 1));
  HANDLE_CODE(bref.unpack(srs_pos_cfg_sul_r17_present, 1));
  HANDLE_CODE(bref.unpack(bwp_n_ul_r17_present, 1));
  HANDLE_CODE(bref.unpack(bwp_sul_r17_present, 1));
  HANDLE_CODE(bref.unpack(inactive_pos_srs_time_align_timer_r17_present, 1));
  HANDLE_CODE(bref.unpack(inactive_pos_srs_rsrp_change_thres_r17_present, 1));

  if (srs_pos_cfg_n_ul_r17_present) {
    HANDLE_CODE(srs_pos_cfg_n_ul_r17.unpack(bref));
  }
  if (srs_pos_cfg_sul_r17_present) {
    HANDLE_CODE(srs_pos_cfg_sul_r17.unpack(bref));
  }
  if (bwp_n_ul_r17_present) {
    HANDLE_CODE(bwp_n_ul_r17.unpack(bref));
  }
  if (bwp_sul_r17_present) {
    HANDLE_CODE(bwp_sul_r17.unpack(bref));
  }
  if (inactive_pos_srs_time_align_timer_r17_present) {
    HANDLE_CODE(inactive_pos_srs_time_align_timer_r17.unpack(bref));
  }
  if (inactive_pos_srs_rsrp_change_thres_r17_present) {
    HANDLE_CODE(inactive_pos_srs_rsrp_change_thres_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void srs_pos_rrc_inactive_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (srs_pos_cfg_n_ul_r17_present) {
    j.write_fieldname("srs-PosConfigNUL-r17");
    srs_pos_cfg_n_ul_r17.to_json(j);
  }
  if (srs_pos_cfg_sul_r17_present) {
    j.write_fieldname("srs-PosConfigSUL-r17");
    srs_pos_cfg_sul_r17.to_json(j);
  }
  if (bwp_n_ul_r17_present) {
    j.write_fieldname("bwp-NUL-r17");
    bwp_n_ul_r17.to_json(j);
  }
  if (bwp_sul_r17_present) {
    j.write_fieldname("bwp-SUL-r17");
    bwp_sul_r17.to_json(j);
  }
  if (inactive_pos_srs_time_align_timer_r17_present) {
    j.write_str("inactivePosSRS-TimeAlignmentTimer-r17", inactive_pos_srs_time_align_timer_r17.to_string());
  }
  if (inactive_pos_srs_rsrp_change_thres_r17_present) {
    j.write_str("inactivePosSRS-RSRP-ChangeThreshold-r17", inactive_pos_srs_rsrp_change_thres_r17.to_string());
  }
  j.end_obj();
}

// UE-CapabilityRequestFilterCommon ::= SEQUENCE
SRSASN_CODE ue_cap_request_filt_common_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(mrdc_request_present, 1));

  if (mrdc_request_present) {
    HANDLE_CODE(bref.pack(mrdc_request.omit_en_dc_present, 1));
    HANDLE_CODE(bref.pack(mrdc_request.include_nr_dc_present, 1));
    HANDLE_CODE(bref.pack(mrdc_request.include_ne_dc_present, 1));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= codebook_type_request_r16.is_present();
    group_flags[0] |= ul_tx_switch_request_r16_present;
    group_flags[1] |= requested_cell_grouping_r16.is_present();
    group_flags[2] |= fallback_group_five_request_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(codebook_type_request_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(ul_tx_switch_request_r16_present, 1));
      if (codebook_type_request_r16.is_present()) {
        HANDLE_CODE(bref.pack(codebook_type_request_r16->type1_single_panel_r16_present, 1));
        HANDLE_CODE(bref.pack(codebook_type_request_r16->type1_multi_panel_r16_present, 1));
        HANDLE_CODE(bref.pack(codebook_type_request_r16->type2_r16_present, 1));
        HANDLE_CODE(bref.pack(codebook_type_request_r16->type2_port_sel_r16_present, 1));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(requested_cell_grouping_r16.is_present(), 1));
      if (requested_cell_grouping_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *requested_cell_grouping_r16, 1, 32));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(fallback_group_five_request_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_request_filt_common_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(mrdc_request_present, 1));

  if (mrdc_request_present) {
    HANDLE_CODE(bref.unpack(mrdc_request.omit_en_dc_present, 1));
    HANDLE_CODE(bref.unpack(mrdc_request.include_nr_dc_present, 1));
    HANDLE_CODE(bref.unpack(mrdc_request.include_ne_dc_present, 1));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(3);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(codebook_type_request_r16, bref);
      HANDLE_CODE(bref.unpack(ul_tx_switch_request_r16_present, 1));
      if (codebook_type_request_r16.is_present()) {
        HANDLE_CODE(bref.unpack(codebook_type_request_r16->type1_single_panel_r16_present, 1));
        HANDLE_CODE(bref.unpack(codebook_type_request_r16->type1_multi_panel_r16_present, 1));
        HANDLE_CODE(bref.unpack(codebook_type_request_r16->type2_r16_present, 1));
        HANDLE_CODE(bref.unpack(codebook_type_request_r16->type2_port_sel_r16_present, 1));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(requested_cell_grouping_r16, bref);
      if (requested_cell_grouping_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*requested_cell_grouping_r16, bref, 1, 32));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(fallback_group_five_request_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void ue_cap_request_filt_common_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mrdc_request_present) {
    j.write_fieldname("mrdc-Request");
    j.start_obj();
    if (mrdc_request.omit_en_dc_present) {
      j.write_str("omitEN-DC", "true");
    }
    if (mrdc_request.include_nr_dc_present) {
      j.write_str("includeNR-DC", "true");
    }
    if (mrdc_request.include_ne_dc_present) {
      j.write_str("includeNE-DC", "true");
    }
    j.end_obj();
  }
  if (ext) {
    if (codebook_type_request_r16.is_present()) {
      j.write_fieldname("codebookTypeRequest-r16");
      j.start_obj();
      if (codebook_type_request_r16->type1_single_panel_r16_present) {
        j.write_str("type1-SinglePanel-r16", "true");
      }
      if (codebook_type_request_r16->type1_multi_panel_r16_present) {
        j.write_str("type1-MultiPanel-r16", "true");
      }
      if (codebook_type_request_r16->type2_r16_present) {
        j.write_str("type2-r16", "true");
      }
      if (codebook_type_request_r16->type2_port_sel_r16_present) {
        j.write_str("type2-PortSelection-r16", "true");
      }
      j.end_obj();
    }
    if (ul_tx_switch_request_r16_present) {
      j.write_str("uplinkTxSwitchRequest-r16", "true");
    }
    if (requested_cell_grouping_r16.is_present()) {
      j.start_array("requestedCellGrouping-r16");
      for (const auto& e1 : *requested_cell_grouping_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (fallback_group_five_request_r17_present) {
      j.write_str("fallbackGroupFiveRequest-r17", "true");
    }
  }
  j.end_obj();
}

// UE-CapabilityRequestFilterNR-v1710 ::= SEQUENCE
SRSASN_CODE ue_cap_request_filt_nr_v1710_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sidelink_request_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_request_filt_nr_v1710_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sidelink_request_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
void ue_cap_request_filt_nr_v1710_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sidelink_request_r17_present) {
    j.write_str("sidelinkRequest-r17", "true");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// UE-CapabilityRequestFilterNR-v1540 ::= SEQUENCE
SRSASN_CODE ue_cap_request_filt_nr_v1540_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(srs_switching_time_request_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_request_filt_nr_v1540_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(srs_switching_time_request_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_cap_request_filt_nr_v1540_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (srs_switching_time_request_present) {
    j.write_str("srs-SwitchingTimeRequest", "true");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-CapabilityRequestFilterNR ::= SEQUENCE
SRSASN_CODE ue_cap_request_filt_nr_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(freq_band_list_filt.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (freq_band_list_filt.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, freq_band_list_filt, 1, 1280));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_request_filt_nr_s::unpack(cbit_ref& bref)
{
  bool freq_band_list_filt_present;
  HANDLE_CODE(bref.unpack(freq_band_list_filt_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (freq_band_list_filt_present) {
    HANDLE_CODE(unpack_dyn_seq_of(freq_band_list_filt, bref, 1, 1280));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_cap_request_filt_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (freq_band_list_filt.size() > 0) {
    j.start_array("frequencyBandListFilter");
    for (const auto& e1 : freq_band_list_filt) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-MRDC-Capability-v1730 ::= SEQUENCE
SRSASN_CODE ue_mrdc_cap_v1730_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_mrdc_v1730_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (meas_and_mob_params_mrdc_v1730_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_v1730.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_mrdc_cap_v1730_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_mrdc_v1730_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (meas_and_mob_params_mrdc_v1730_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_v1730.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_mrdc_cap_v1730_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_mrdc_v1730_present) {
    j.write_fieldname("measAndMobParametersMRDC-v1730");
    meas_and_mob_params_mrdc_v1730.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// GeneralParametersMRDC-v1610 ::= SEQUENCE
SRSASN_CODE general_params_mrdc_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(f1c_over_eutra_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE general_params_mrdc_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(f1c_over_eutra_r16_present, 1));

  return SRSASN_SUCCESS;
}
void general_params_mrdc_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (f1c_over_eutra_r16_present) {
    j.write_str("f1c-OverEUTRA-r16", "supported");
  }
  j.end_obj();
}

// PDCP-ParametersMRDC-v1610 ::= SEQUENCE
SRSASN_CODE pdcp_params_mrdc_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(scg_drb_nr_iab_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcp_params_mrdc_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(scg_drb_nr_iab_r16_present, 1));

  return SRSASN_SUCCESS;
}
void pdcp_params_mrdc_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (scg_drb_nr_iab_r16_present) {
    j.write_str("scg-DRB-NR-IAB-r16", "supported");
  }
  j.end_obj();
}

// UE-MRDC-Capability-v1700 ::= SEQUENCE
SRSASN_CODE ue_mrdc_cap_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(meas_and_mob_params_mrdc_v1700.pack(bref));
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_mrdc_cap_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(meas_and_mob_params_mrdc_v1700.unpack(bref));
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_mrdc_cap_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("measAndMobParametersMRDC-v1700");
  meas_and_mob_params_mrdc_v1700.to_json(j);
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-MRDC-Capability-v1610 ::= SEQUENCE
SRSASN_CODE ue_mrdc_cap_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_mrdc_v1610_present, 1));
  HANDLE_CODE(bref.pack(general_params_mrdc_v1610_present, 1));
  HANDLE_CODE(bref.pack(pdcp_params_mrdc_v1610_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (meas_and_mob_params_mrdc_v1610_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_v1610.pack(bref));
  }
  if (general_params_mrdc_v1610_present) {
    HANDLE_CODE(general_params_mrdc_v1610.pack(bref));
  }
  if (pdcp_params_mrdc_v1610_present) {
    HANDLE_CODE(pdcp_params_mrdc_v1610.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_mrdc_cap_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_mrdc_v1610_present, 1));
  HANDLE_CODE(bref.unpack(general_params_mrdc_v1610_present, 1));
  HANDLE_CODE(bref.unpack(pdcp_params_mrdc_v1610_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (meas_and_mob_params_mrdc_v1610_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_v1610.unpack(bref));
  }
  if (general_params_mrdc_v1610_present) {
    HANDLE_CODE(general_params_mrdc_v1610.unpack(bref));
  }
  if (pdcp_params_mrdc_v1610_present) {
    HANDLE_CODE(pdcp_params_mrdc_v1610.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_mrdc_cap_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_mrdc_v1610_present) {
    j.write_fieldname("measAndMobParametersMRDC-v1610");
    meas_and_mob_params_mrdc_v1610.to_json(j);
  }
  if (general_params_mrdc_v1610_present) {
    j.write_fieldname("generalParametersMRDC-v1610");
    general_params_mrdc_v1610.to_json(j);
  }
  if (pdcp_params_mrdc_v1610_present) {
    j.write_fieldname("pdcp-ParametersMRDC-v1610");
    pdcp_params_mrdc_v1610.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-MRDC-CapabilityAddXDD-Mode-v1560 ::= SEQUENCE
SRSASN_CODE ue_mrdc_cap_add_xdd_mode_v1560_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_mrdc_xdd_diff_v1560_present, 1));

  if (meas_and_mob_params_mrdc_xdd_diff_v1560_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_xdd_diff_v1560.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_mrdc_cap_add_xdd_mode_v1560_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_mrdc_xdd_diff_v1560_present, 1));

  if (meas_and_mob_params_mrdc_xdd_diff_v1560_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_xdd_diff_v1560.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_mrdc_cap_add_xdd_mode_v1560_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_mrdc_xdd_diff_v1560_present) {
    j.write_fieldname("measAndMobParametersMRDC-XDD-Diff-v1560");
    meas_and_mob_params_mrdc_xdd_diff_v1560.to_json(j);
  }
  j.end_obj();
}

// PDCP-ParametersMRDC ::= SEQUENCE
SRSASN_CODE pdcp_params_mrdc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pdcp_dupl_split_srb_present, 1));
  HANDLE_CODE(bref.pack(pdcp_dupl_split_drb_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcp_params_mrdc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pdcp_dupl_split_srb_present, 1));
  HANDLE_CODE(bref.unpack(pdcp_dupl_split_drb_present, 1));

  return SRSASN_SUCCESS;
}
void pdcp_params_mrdc_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pdcp_dupl_split_srb_present) {
    j.write_str("pdcp-DuplicationSplitSRB", "supported");
  }
  if (pdcp_dupl_split_drb_present) {
    j.write_str("pdcp-DuplicationSplitDRB", "supported");
  }
  j.end_obj();
}

// UE-MRDC-Capability-v1560 ::= SEQUENCE
SRSASN_CODE ue_mrdc_cap_v1560_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rx_filts.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_and_mob_params_mrdc_v1560_present, 1));
  HANDLE_CODE(bref.pack(fdd_add_ue_mrdc_cap_v1560_present, 1));
  HANDLE_CODE(bref.pack(tdd_add_ue_mrdc_cap_v1560_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (rx_filts.size() > 0) {
    HANDLE_CODE(rx_filts.pack(bref));
  }
  if (meas_and_mob_params_mrdc_v1560_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_v1560.pack(bref));
  }
  if (fdd_add_ue_mrdc_cap_v1560_present) {
    HANDLE_CODE(fdd_add_ue_mrdc_cap_v1560.pack(bref));
  }
  if (tdd_add_ue_mrdc_cap_v1560_present) {
    HANDLE_CODE(tdd_add_ue_mrdc_cap_v1560.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_mrdc_cap_v1560_s::unpack(cbit_ref& bref)
{
  bool rx_filts_present;
  HANDLE_CODE(bref.unpack(rx_filts_present, 1));
  HANDLE_CODE(bref.unpack(meas_and_mob_params_mrdc_v1560_present, 1));
  HANDLE_CODE(bref.unpack(fdd_add_ue_mrdc_cap_v1560_present, 1));
  HANDLE_CODE(bref.unpack(tdd_add_ue_mrdc_cap_v1560_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (rx_filts_present) {
    HANDLE_CODE(rx_filts.unpack(bref));
  }
  if (meas_and_mob_params_mrdc_v1560_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_v1560.unpack(bref));
  }
  if (fdd_add_ue_mrdc_cap_v1560_present) {
    HANDLE_CODE(fdd_add_ue_mrdc_cap_v1560.unpack(bref));
  }
  if (tdd_add_ue_mrdc_cap_v1560_present) {
    HANDLE_CODE(tdd_add_ue_mrdc_cap_v1560.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_mrdc_cap_v1560_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rx_filts.size() > 0) {
    j.write_str("receivedFilters", rx_filts.to_string());
  }
  if (meas_and_mob_params_mrdc_v1560_present) {
    j.write_fieldname("measAndMobParametersMRDC-v1560");
    meas_and_mob_params_mrdc_v1560.to_json(j);
  }
  if (fdd_add_ue_mrdc_cap_v1560_present) {
    j.write_fieldname("fdd-Add-UE-MRDC-Capabilities-v1560");
    fdd_add_ue_mrdc_cap_v1560.to_json(j);
  }
  if (tdd_add_ue_mrdc_cap_v1560_present) {
    j.write_fieldname("tdd-Add-UE-MRDC-Capabilities-v1560");
    tdd_add_ue_mrdc_cap_v1560.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-MRDC-Capability ::= SEQUENCE
SRSASN_CODE ue_mrdc_cap_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_mrdc_present, 1));
  HANDLE_CODE(bref.pack(phy_params_mrdc_v1530_present, 1));
  HANDLE_CODE(bref.pack(general_params_mrdc_present, 1));
  HANDLE_CODE(bref.pack(fdd_add_ue_mrdc_cap_present, 1));
  HANDLE_CODE(bref.pack(tdd_add_ue_mrdc_cap_present, 1));
  HANDLE_CODE(bref.pack(fr1_add_ue_mrdc_cap_present, 1));
  HANDLE_CODE(bref.pack(fr2_add_ue_mrdc_cap_present, 1));
  HANDLE_CODE(bref.pack(feature_set_combinations.size() > 0, 1));
  HANDLE_CODE(bref.pack(pdcp_params_mrdc_v1530_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (meas_and_mob_params_mrdc_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc.pack(bref));
  }
  if (phy_params_mrdc_v1530_present) {
    HANDLE_CODE(phy_params_mrdc_v1530.pack(bref));
  }
  HANDLE_CODE(rf_params_mrdc.pack(bref));
  if (general_params_mrdc_present) {
    HANDLE_CODE(general_params_mrdc.pack(bref));
  }
  if (fdd_add_ue_mrdc_cap_present) {
    HANDLE_CODE(fdd_add_ue_mrdc_cap.pack(bref));
  }
  if (tdd_add_ue_mrdc_cap_present) {
    HANDLE_CODE(tdd_add_ue_mrdc_cap.pack(bref));
  }
  if (fr1_add_ue_mrdc_cap_present) {
    HANDLE_CODE(fr1_add_ue_mrdc_cap.pack(bref));
  }
  if (fr2_add_ue_mrdc_cap_present) {
    HANDLE_CODE(fr2_add_ue_mrdc_cap.pack(bref));
  }
  if (feature_set_combinations.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref,
                                feature_set_combinations,
                                1,
                                1024,
                                SeqOfPacker<SeqOfPacker<Packer>>(1, 32, SeqOfPacker<Packer>(1, 128, Packer()))));
  }
  if (pdcp_params_mrdc_v1530_present) {
    HANDLE_CODE(pdcp_params_mrdc_v1530.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_mrdc_cap_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_mrdc_present, 1));
  HANDLE_CODE(bref.unpack(phy_params_mrdc_v1530_present, 1));
  HANDLE_CODE(bref.unpack(general_params_mrdc_present, 1));
  HANDLE_CODE(bref.unpack(fdd_add_ue_mrdc_cap_present, 1));
  HANDLE_CODE(bref.unpack(tdd_add_ue_mrdc_cap_present, 1));
  HANDLE_CODE(bref.unpack(fr1_add_ue_mrdc_cap_present, 1));
  HANDLE_CODE(bref.unpack(fr2_add_ue_mrdc_cap_present, 1));
  bool feature_set_combinations_present;
  HANDLE_CODE(bref.unpack(feature_set_combinations_present, 1));
  HANDLE_CODE(bref.unpack(pdcp_params_mrdc_v1530_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (meas_and_mob_params_mrdc_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc.unpack(bref));
  }
  if (phy_params_mrdc_v1530_present) {
    HANDLE_CODE(phy_params_mrdc_v1530.unpack(bref));
  }
  HANDLE_CODE(rf_params_mrdc.unpack(bref));
  if (general_params_mrdc_present) {
    HANDLE_CODE(general_params_mrdc.unpack(bref));
  }
  if (fdd_add_ue_mrdc_cap_present) {
    HANDLE_CODE(fdd_add_ue_mrdc_cap.unpack(bref));
  }
  if (tdd_add_ue_mrdc_cap_present) {
    HANDLE_CODE(tdd_add_ue_mrdc_cap.unpack(bref));
  }
  if (fr1_add_ue_mrdc_cap_present) {
    HANDLE_CODE(fr1_add_ue_mrdc_cap.unpack(bref));
  }
  if (fr2_add_ue_mrdc_cap_present) {
    HANDLE_CODE(fr2_add_ue_mrdc_cap.unpack(bref));
  }
  if (feature_set_combinations_present) {
    HANDLE_CODE(unpack_dyn_seq_of(feature_set_combinations,
                                  bref,
                                  1,
                                  1024,
                                  SeqOfPacker<SeqOfPacker<Packer>>(1, 32, SeqOfPacker<Packer>(1, 128, Packer()))));
  }
  if (pdcp_params_mrdc_v1530_present) {
    HANDLE_CODE(pdcp_params_mrdc_v1530.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_mrdc_cap_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_mrdc_present) {
    j.write_fieldname("measAndMobParametersMRDC");
    meas_and_mob_params_mrdc.to_json(j);
  }
  if (phy_params_mrdc_v1530_present) {
    j.write_fieldname("phy-ParametersMRDC-v1530");
    phy_params_mrdc_v1530.to_json(j);
  }
  j.write_fieldname("rf-ParametersMRDC");
  rf_params_mrdc.to_json(j);
  if (general_params_mrdc_present) {
    j.write_fieldname("generalParametersMRDC");
    general_params_mrdc.to_json(j);
  }
  if (fdd_add_ue_mrdc_cap_present) {
    j.write_fieldname("fdd-Add-UE-MRDC-Capabilities");
    fdd_add_ue_mrdc_cap.to_json(j);
  }
  if (tdd_add_ue_mrdc_cap_present) {
    j.write_fieldname("tdd-Add-UE-MRDC-Capabilities");
    tdd_add_ue_mrdc_cap.to_json(j);
  }
  if (fr1_add_ue_mrdc_cap_present) {
    j.write_fieldname("fr1-Add-UE-MRDC-Capabilities");
    fr1_add_ue_mrdc_cap.to_json(j);
  }
  if (fr2_add_ue_mrdc_cap_present) {
    j.write_fieldname("fr2-Add-UE-MRDC-Capabilities");
    fr2_add_ue_mrdc_cap.to_json(j);
  }
  if (feature_set_combinations.size() > 0) {
    j.start_array("featureSetCombinations");
    for (const auto& e1 : feature_set_combinations) {
      j.start_array();
      for (const auto& e2 : e1) {
        j.start_array();
        for (const auto& e3 : e2) {
          e3.to_json(j);
        }
        j.end_array();
      }
      j.end_array();
    }
    j.end_array();
  }
  if (pdcp_params_mrdc_v1530_present) {
    j.write_fieldname("pdcp-ParametersMRDC-v1530");
    pdcp_params_mrdc_v1530.to_json(j);
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-MRDC-Capability-v15g0 ::= SEQUENCE
SRSASN_CODE ue_mrdc_cap_v15g0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rf_params_mrdc_v15g0_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (rf_params_mrdc_v15g0_present) {
    HANDLE_CODE(rf_params_mrdc_v15g0.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_mrdc_cap_v15g0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(rf_params_mrdc_v15g0_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (rf_params_mrdc_v15g0_present) {
    HANDLE_CODE(rf_params_mrdc_v15g0.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_mrdc_cap_v15g0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rf_params_mrdc_v15g0_present) {
    j.write_fieldname("rf-ParametersMRDC-v15g0");
    rf_params_mrdc_v15g0.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

const char* high_speed_params_v1650_c::types_opts::to_string() const
{
  static const char* names[] = {"intraNR-MeasurementEnhancement-r16", "interRAT-MeasurementEnhancement-r16"};
  return convert_enum_idx(names, 2, value, "high_speed_params_v1650_c::types");
}

// UE-NR-Capability-v16c0 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v16c0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rf_params_v16c0_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (rf_params_v16c0_present) {
    HANDLE_CODE(rf_params_v16c0.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v16c0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(rf_params_v16c0_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (rf_params_v16c0_present) {
    HANDLE_CODE(rf_params_v16c0.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v16c0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rf_params_v16c0_present) {
    j.write_fieldname("rf-Parameters-v16c0");
    rf_params_v16c0.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// UE-NR-Capability-v16a0 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v16a0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(phy_params_v16a0_present, 1));
  HANDLE_CODE(bref.pack(rf_params_v16a0_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (phy_params_v16a0_present) {
    HANDLE_CODE(phy_params_v16a0.pack(bref));
  }
  if (rf_params_v16a0_present) {
    HANDLE_CODE(rf_params_v16a0.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v16a0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(phy_params_v16a0_present, 1));
  HANDLE_CODE(bref.unpack(rf_params_v16a0_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (phy_params_v16a0_present) {
    HANDLE_CODE(phy_params_v16a0.unpack(bref));
  }
  if (rf_params_v16a0_present) {
    HANDLE_CODE(rf_params_v16a0.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v16a0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (phy_params_v16a0_present) {
    j.write_fieldname("phy-Parameters-v16a0");
    phy_params_v16a0.to_json(j);
  }
  if (rf_params_v16a0_present) {
    j.write_fieldname("rf-Parameters-v16a0");
    rf_params_v16a0.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-NR-Capability-v15j0 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v15j0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v15j0_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v15j0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// NRDC-Parameters-v15c0 ::= SEQUENCE
SRSASN_CODE nrdc_params_v15c0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pdcp_dupl_split_srb_present, 1));
  HANDLE_CODE(bref.pack(pdcp_dupl_split_drb_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE nrdc_params_v15c0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pdcp_dupl_split_srb_present, 1));
  HANDLE_CODE(bref.unpack(pdcp_dupl_split_drb_present, 1));

  return SRSASN_SUCCESS;
}
void nrdc_params_v15c0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pdcp_dupl_split_srb_present) {
    j.write_str("pdcp-DuplicationSplitSRB", "supported");
  }
  if (pdcp_dupl_split_drb_present) {
    j.write_str("pdcp-DuplicationSplitDRB", "supported");
  }
  j.end_obj();
}

// UE-NR-Capability-v15g0 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v15g0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rf_params_v15g0_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (rf_params_v15g0_present) {
    HANDLE_CODE(rf_params_v15g0.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v15g0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(rf_params_v15g0_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (rf_params_v15g0_present) {
    HANDLE_CODE(rf_params_v15g0.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v15g0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rf_params_v15g0_present) {
    j.write_fieldname("rf-Parameters-v15g0");
    rf_params_v15g0.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-NR-Capability-v15c0 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v15c0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(nrdc_params_v15c0_present, 1));
  HANDLE_CODE(bref.pack(partial_fr2_fallback_rx_req_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (nrdc_params_v15c0_present) {
    HANDLE_CODE(nrdc_params_v15c0.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v15c0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(nrdc_params_v15c0_present, 1));
  HANDLE_CODE(bref.unpack(partial_fr2_fallback_rx_req_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (nrdc_params_v15c0_present) {
    HANDLE_CODE(nrdc_params_v15c0.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v15c0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (nrdc_params_v15c0_present) {
    j.write_fieldname("nrdc-Parameters-v15c0");
    nrdc_params_v15c0.to_json(j);
  }
  if (partial_fr2_fallback_rx_req_present) {
    j.write_str("partialFR2-FallbackRX-Req", "true");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UECapabilityEnquiry-v1610-IEs ::= SEQUENCE
SRSASN_CODE ue_cap_enquiry_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rrc_seg_allowed_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_enquiry_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(rrc_seg_allowed_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
void ue_cap_enquiry_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rrc_seg_allowed_r16_present) {
    j.write_str("rrc-SegAllowed-r16", "enabled");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// UECapabilityEnquiry-v1560-IEs ::= SEQUENCE
SRSASN_CODE ue_cap_enquiry_v1560_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cap_request_filt_common_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (cap_request_filt_common_present) {
    HANDLE_CODE(cap_request_filt_common.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_enquiry_v1560_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(cap_request_filt_common_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (cap_request_filt_common_present) {
    HANDLE_CODE(cap_request_filt_common.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_cap_enquiry_v1560_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (cap_request_filt_common_present) {
    j.write_fieldname("capabilityRequestFilterCommon");
    cap_request_filt_common.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// AS-Config ::= SEQUENCE
SRSASN_CODE as_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(rrc_recfg.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= source_rb_sn_cfg.size() > 0;
    group_flags[0] |= source_scg_nr_cfg.size() > 0;
    group_flags[0] |= source_scg_eutra_cfg.size() > 0;
    group_flags[1] |= source_scg_cfg_present;
    group_flags[2] |= sdt_cfg_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(source_rb_sn_cfg.size() > 0, 1));
      HANDLE_CODE(bref.pack(source_scg_nr_cfg.size() > 0, 1));
      HANDLE_CODE(bref.pack(source_scg_eutra_cfg.size() > 0, 1));
      if (source_rb_sn_cfg.size() > 0) {
        HANDLE_CODE(source_rb_sn_cfg.pack(bref));
      }
      if (source_scg_nr_cfg.size() > 0) {
        HANDLE_CODE(source_scg_nr_cfg.pack(bref));
      }
      if (source_scg_eutra_cfg.size() > 0) {
        HANDLE_CODE(source_scg_eutra_cfg.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(source_scg_cfg_present, 1));
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sdt_cfg_r17.is_present(), 1));
      if (sdt_cfg_r17.is_present()) {
        HANDLE_CODE(sdt_cfg_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE as_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(rrc_recfg.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(3);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      bool source_rb_sn_cfg_present;
      HANDLE_CODE(bref.unpack(source_rb_sn_cfg_present, 1));
      bool source_scg_nr_cfg_present;
      HANDLE_CODE(bref.unpack(source_scg_nr_cfg_present, 1));
      bool source_scg_eutra_cfg_present;
      HANDLE_CODE(bref.unpack(source_scg_eutra_cfg_present, 1));
      if (source_rb_sn_cfg_present) {
        HANDLE_CODE(source_rb_sn_cfg.unpack(bref));
      }
      if (source_scg_nr_cfg_present) {
        HANDLE_CODE(source_scg_nr_cfg.unpack(bref));
      }
      if (source_scg_eutra_cfg_present) {
        HANDLE_CODE(source_scg_eutra_cfg.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(source_scg_cfg_present, 1));
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sdt_cfg_r17, bref);
      if (sdt_cfg_r17.is_present()) {
        HANDLE_CODE(sdt_cfg_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void as_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("rrcReconfiguration", rrc_recfg.to_string());
  if (ext) {
    if (source_rb_sn_cfg.size() > 0) {
      j.write_str("sourceRB-SN-Config", source_rb_sn_cfg.to_string());
    }
    if (source_scg_nr_cfg.size() > 0) {
      j.write_str("sourceSCG-NR-Config", source_scg_nr_cfg.to_string());
    }
    if (source_scg_eutra_cfg.size() > 0) {
      j.write_str("sourceSCG-EUTRA-Config", source_scg_eutra_cfg.to_string());
    }
    if (source_scg_cfg_present) {
      j.write_str("sourceSCG-Configured", "true");
    }
    if (sdt_cfg_r17.is_present()) {
      j.write_fieldname("sdt-Config-r17");
      sdt_cfg_r17->to_json(j);
    }
  }
  j.end_obj();
}

// BandCombinationInfo ::= SEQUENCE
SRSASN_CODE band_combination_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, band_combination_idx, (uint32_t)1u, (uint32_t)65536u));
  HANDLE_CODE(pack_dyn_seq_of(bref, allowed_feature_sets_list, 1, 128, integer_packer<uint8_t>(1, 128)));

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(band_combination_idx, bref, (uint32_t)1u, (uint32_t)65536u));
  HANDLE_CODE(unpack_dyn_seq_of(allowed_feature_sets_list, bref, 1, 128, integer_packer<uint8_t>(1, 128)));

  return SRSASN_SUCCESS;
}
void band_combination_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("bandCombinationIndex", band_combination_idx);
  j.start_array("allowedFeatureSetsList");
  for (const auto& e1 : allowed_feature_sets_list) {
    j.write_int(e1);
  }
  j.end_array();
  j.end_obj();
}

// ReestabNCellInfo ::= SEQUENCE
SRSASN_CODE reestab_ncell_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(cell_id.pack(bref));
  HANDLE_CODE(key_g_node_b_star.pack(bref));
  HANDLE_CODE(short_mac_i.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE reestab_ncell_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(cell_id.unpack(bref));
  HANDLE_CODE(key_g_node_b_star.unpack(bref));
  HANDLE_CODE(short_mac_i.unpack(bref));

  return SRSASN_SUCCESS;
}
void reestab_ncell_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("cellIdentity", cell_id.to_string());
  j.write_str("key-gNodeB-Star", key_g_node_b_star.to_string());
  j.write_str("shortMAC-I", short_mac_i.to_string());
  j.end_obj();
}

// T-Offset-r16 ::= ENUMERATED
const char* t_offset_r16_opts::to_string() const
{
  static const char* names[] = {"ms0dot5", "ms0dot75", "ms1", "ms1dot5", "ms2", "ms2dot5", "ms3", "spare1"};
  return convert_enum_idx(names, 8, value, "t_offset_r16_e");
}
float t_offset_r16_opts::to_number() const
{
  static const float numbers[] = {0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0};
  return map_enum_number(numbers, 7, value, "t_offset_r16_e");
}
const char* t_offset_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {"0.5", "0.75", "1", "1.5", "2", "2.5", "3"};
  return convert_enum_idx(number_strs, 8, value, "t_offset_r16_e");
}

// BandCombinationInfoSN ::= SEQUENCE
SRSASN_CODE band_combination_info_sn_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, band_combination_idx, (uint32_t)1u, (uint32_t)65536u));
  HANDLE_CODE(pack_integer(bref, requested_feature_sets, (uint8_t)1u, (uint8_t)128u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_info_sn_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(band_combination_idx, bref, (uint32_t)1u, (uint32_t)65536u));
  HANDLE_CODE(unpack_integer(requested_feature_sets, bref, (uint8_t)1u, (uint8_t)128u));

  return SRSASN_SUCCESS;
}
void band_combination_info_sn_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("bandCombinationIndex", band_combination_idx);
  j.write_int("requestedFeatureSets", requested_feature_sets);
  j.end_obj();
}

// ConfigRestrictInfoDAPS-r16 ::= SEQUENCE
SRSASN_CODE cfg_restrict_info_daps_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pwr_coordination_r16_present, 1));

  if (pwr_coordination_r16_present) {
    HANDLE_CODE(pack_integer(bref, pwr_coordination_r16.p_daps_source_r16, (int8_t)-30, (int8_t)33));
    HANDLE_CODE(pack_integer(bref, pwr_coordination_r16.p_daps_target_r16, (int8_t)-30, (int8_t)33));
    HANDLE_CODE(pwr_coordination_r16.ul_pwr_sharing_daps_mode_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cfg_restrict_info_daps_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pwr_coordination_r16_present, 1));

  if (pwr_coordination_r16_present) {
    HANDLE_CODE(unpack_integer(pwr_coordination_r16.p_daps_source_r16, bref, (int8_t)-30, (int8_t)33));
    HANDLE_CODE(unpack_integer(pwr_coordination_r16.p_daps_target_r16, bref, (int8_t)-30, (int8_t)33));
    HANDLE_CODE(pwr_coordination_r16.ul_pwr_sharing_daps_mode_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cfg_restrict_info_daps_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pwr_coordination_r16_present) {
    j.write_fieldname("powerCoordination-r16");
    j.start_obj();
    j.write_int("p-DAPS-Source-r16", pwr_coordination_r16.p_daps_source_r16);
    j.write_int("p-DAPS-Target-r16", pwr_coordination_r16.p_daps_target_r16);
    j.write_str("uplinkPowerSharingDAPS-Mode-r16", pwr_coordination_r16.ul_pwr_sharing_daps_mode_r16.to_string());
    j.end_obj();
  }
  j.end_obj();
}

const char* cfg_restrict_info_daps_r16_s::pwr_coordination_r16_s_::ul_pwr_sharing_daps_mode_r16_opts::to_string() const
{
  static const char* names[] = {"semi-static-mode1", "semi-static-mode2", "dynamic"};
  return convert_enum_idx(
      names, 3, value, "cfg_restrict_info_daps_r16_s::pwr_coordination_r16_s_::ul_pwr_sharing_daps_mode_r16_e_");
}
uint8_t cfg_restrict_info_daps_r16_s::pwr_coordination_r16_s_::ul_pwr_sharing_daps_mode_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers, 2, value, "cfg_restrict_info_daps_r16_s::pwr_coordination_r16_s_::ul_pwr_sharing_daps_mode_r16_e_");
}

// ConfigRestrictInfoDAPS-v1640 ::= SEQUENCE
SRSASN_CODE cfg_restrict_info_daps_v1640_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, source_feature_set_per_dl_cc_r16, (uint16_t)1u, (uint16_t)1024u));
  HANDLE_CODE(pack_integer(bref, source_feature_set_per_ul_cc_r16, (uint16_t)1u, (uint16_t)1024u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cfg_restrict_info_daps_v1640_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(source_feature_set_per_dl_cc_r16, bref, (uint16_t)1u, (uint16_t)1024u));
  HANDLE_CODE(unpack_integer(source_feature_set_per_ul_cc_r16, bref, (uint16_t)1u, (uint16_t)1024u));

  return SRSASN_SUCCESS;
}
void cfg_restrict_info_daps_v1640_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sourceFeatureSetPerDownlinkCC-r16", source_feature_set_per_dl_cc_r16);
  j.write_int("sourceFeatureSetPerUplinkCC-r16", source_feature_set_per_ul_cc_r16);
  j.end_obj();
}

// ConfigRestrictInfoSCG ::= SEQUENCE
SRSASN_CODE cfg_restrict_info_scg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(allowed_bc_list_mrdc.size() > 0, 1));
  HANDLE_CODE(bref.pack(pwr_coordination_fr1_present, 1));
  HANDLE_CODE(bref.pack(serv_cell_idx_range_scg_present, 1));
  HANDLE_CODE(bref.pack(max_meas_freqs_scg_present, 1));
  HANDLE_CODE(bref.pack(dummy_present, 1));

  if (allowed_bc_list_mrdc.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, allowed_bc_list_mrdc, 1, 65536));
  }
  if (pwr_coordination_fr1_present) {
    HANDLE_CODE(bref.pack(pwr_coordination_fr1.p_max_nr_fr1_present, 1));
    HANDLE_CODE(bref.pack(pwr_coordination_fr1.p_max_eutra_present, 1));
    HANDLE_CODE(bref.pack(pwr_coordination_fr1.p_max_ue_fr1_present, 1));
    if (pwr_coordination_fr1.p_max_nr_fr1_present) {
      HANDLE_CODE(pack_integer(bref, pwr_coordination_fr1.p_max_nr_fr1, (int8_t)-30, (int8_t)33));
    }
    if (pwr_coordination_fr1.p_max_eutra_present) {
      HANDLE_CODE(pack_integer(bref, pwr_coordination_fr1.p_max_eutra, (int8_t)-30, (int8_t)33));
    }
    if (pwr_coordination_fr1.p_max_ue_fr1_present) {
      HANDLE_CODE(pack_integer(bref, pwr_coordination_fr1.p_max_ue_fr1, (int8_t)-30, (int8_t)33));
    }
  }
  if (serv_cell_idx_range_scg_present) {
    HANDLE_CODE(pack_integer(bref, serv_cell_idx_range_scg.low_bound, (uint8_t)0u, (uint8_t)31u));
    HANDLE_CODE(pack_integer(bref, serv_cell_idx_range_scg.up_bound, (uint8_t)0u, (uint8_t)31u));
  }
  if (max_meas_freqs_scg_present) {
    HANDLE_CODE(pack_integer(bref, max_meas_freqs_scg, (uint8_t)1u, (uint8_t)32u));
  }
  if (dummy_present) {
    HANDLE_CODE(pack_integer(bref, dummy, (uint8_t)1u, (uint8_t)62u));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sel_band_entries_mn_list.is_present();
    group_flags[0] |= pdcch_blind_detection_scg_present;
    group_flags[0] |= max_num_rohc_context_sessions_sn_present;
    group_flags[1] |= max_intra_freq_meas_identities_scg_present;
    group_flags[1] |= max_inter_freq_meas_identities_scg_present;
    group_flags[2] |= p_max_nr_fr1_mcg_r16_present;
    group_flags[2] |= pwr_coordination_fr2_r16.is_present();
    group_flags[2] |= nrdc_pc_mode_fr1_r16_present;
    group_flags[2] |= nrdc_pc_mode_fr2_r16_present;
    group_flags[2] |= max_meas_srs_res_scg_r16_present;
    group_flags[2] |= max_meas_cli_res_scg_r16_present;
    group_flags[2] |= max_num_ehc_contexts_sn_r16_present;
    group_flags[2] |= allowed_reduced_cfg_for_overheat_r16.is_present();
    group_flags[2] |= max_toffset_r16_present;
    group_flags[3] |= allowed_reduced_cfg_for_overheat_r17.is_present();
    group_flags[3] |= max_num_udc_drb_r17_present;
    group_flags[3] |= max_num_cp_cc_andidates_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sel_band_entries_mn_list.is_present(), 1));
      HANDLE_CODE(bref.pack(pdcch_blind_detection_scg_present, 1));
      HANDLE_CODE(bref.pack(max_num_rohc_context_sessions_sn_present, 1));
      if (sel_band_entries_mn_list.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref,
                                    *sel_band_entries_mn_list,
                                    1,
                                    65536,
                                    SeqOfPacker<integer_packer<uint8_t>>(1, 32, integer_packer<uint8_t>(0, 32))));
      }
      if (pdcch_blind_detection_scg_present) {
        HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_scg, (uint8_t)1u, (uint8_t)15u));
      }
      if (max_num_rohc_context_sessions_sn_present) {
        HANDLE_CODE(pack_integer(bref, max_num_rohc_context_sessions_sn, (uint16_t)0u, (uint16_t)16384u));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(max_intra_freq_meas_identities_scg_present, 1));
      HANDLE_CODE(bref.pack(max_inter_freq_meas_identities_scg_present, 1));
      if (max_intra_freq_meas_identities_scg_present) {
        HANDLE_CODE(pack_integer(bref, max_intra_freq_meas_identities_scg, (uint8_t)1u, (uint8_t)62u));
      }
      if (max_inter_freq_meas_identities_scg_present) {
        HANDLE_CODE(pack_integer(bref, max_inter_freq_meas_identities_scg, (uint8_t)1u, (uint8_t)62u));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(p_max_nr_fr1_mcg_r16_present, 1));
      HANDLE_CODE(bref.pack(pwr_coordination_fr2_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(nrdc_pc_mode_fr1_r16_present, 1));
      HANDLE_CODE(bref.pack(nrdc_pc_mode_fr2_r16_present, 1));
      HANDLE_CODE(bref.pack(max_meas_srs_res_scg_r16_present, 1));
      HANDLE_CODE(bref.pack(max_meas_cli_res_scg_r16_present, 1));
      HANDLE_CODE(bref.pack(max_num_ehc_contexts_sn_r16_present, 1));
      HANDLE_CODE(bref.pack(allowed_reduced_cfg_for_overheat_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(max_toffset_r16_present, 1));
      if (p_max_nr_fr1_mcg_r16_present) {
        HANDLE_CODE(pack_integer(bref, p_max_nr_fr1_mcg_r16, (int8_t)-30, (int8_t)33));
      }
      if (pwr_coordination_fr2_r16.is_present()) {
        HANDLE_CODE(bref.pack(pwr_coordination_fr2_r16->p_max_nr_fr2_mcg_r16_present, 1));
        HANDLE_CODE(bref.pack(pwr_coordination_fr2_r16->p_max_nr_fr2_scg_r16_present, 1));
        HANDLE_CODE(bref.pack(pwr_coordination_fr2_r16->p_max_ue_fr2_r16_present, 1));
        if (pwr_coordination_fr2_r16->p_max_nr_fr2_mcg_r16_present) {
          HANDLE_CODE(pack_integer(bref, pwr_coordination_fr2_r16->p_max_nr_fr2_mcg_r16, (int8_t)-30, (int8_t)33));
        }
        if (pwr_coordination_fr2_r16->p_max_nr_fr2_scg_r16_present) {
          HANDLE_CODE(pack_integer(bref, pwr_coordination_fr2_r16->p_max_nr_fr2_scg_r16, (int8_t)-30, (int8_t)33));
        }
        if (pwr_coordination_fr2_r16->p_max_ue_fr2_r16_present) {
          HANDLE_CODE(pack_integer(bref, pwr_coordination_fr2_r16->p_max_ue_fr2_r16, (int8_t)-30, (int8_t)33));
        }
      }
      if (nrdc_pc_mode_fr1_r16_present) {
        HANDLE_CODE(nrdc_pc_mode_fr1_r16.pack(bref));
      }
      if (nrdc_pc_mode_fr2_r16_present) {
        HANDLE_CODE(nrdc_pc_mode_fr2_r16.pack(bref));
      }
      if (max_meas_srs_res_scg_r16_present) {
        HANDLE_CODE(pack_integer(bref, max_meas_srs_res_scg_r16, (uint8_t)0u, (uint8_t)32u));
      }
      if (max_meas_cli_res_scg_r16_present) {
        HANDLE_CODE(pack_integer(bref, max_meas_cli_res_scg_r16, (uint8_t)0u, (uint8_t)64u));
      }
      if (max_num_ehc_contexts_sn_r16_present) {
        HANDLE_CODE(pack_integer(bref, max_num_ehc_contexts_sn_r16, (uint32_t)0u, (uint32_t)65536u));
      }
      if (allowed_reduced_cfg_for_overheat_r16.is_present()) {
        HANDLE_CODE(allowed_reduced_cfg_for_overheat_r16->pack(bref));
      }
      if (max_toffset_r16_present) {
        HANDLE_CODE(max_toffset_r16.pack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(allowed_reduced_cfg_for_overheat_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(max_num_udc_drb_r17_present, 1));
      HANDLE_CODE(bref.pack(max_num_cp_cc_andidates_r17_present, 1));
      if (allowed_reduced_cfg_for_overheat_r17.is_present()) {
        HANDLE_CODE(allowed_reduced_cfg_for_overheat_r17->pack(bref));
      }
      if (max_num_udc_drb_r17_present) {
        HANDLE_CODE(pack_integer(bref, max_num_udc_drb_r17, (uint8_t)0u, (uint8_t)2u));
      }
      if (max_num_cp_cc_andidates_r17_present) {
        HANDLE_CODE(pack_integer(bref, max_num_cp_cc_andidates_r17, (uint8_t)0u, (uint8_t)7u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cfg_restrict_info_scg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool allowed_bc_list_mrdc_present;
  HANDLE_CODE(bref.unpack(allowed_bc_list_mrdc_present, 1));
  HANDLE_CODE(bref.unpack(pwr_coordination_fr1_present, 1));
  HANDLE_CODE(bref.unpack(serv_cell_idx_range_scg_present, 1));
  HANDLE_CODE(bref.unpack(max_meas_freqs_scg_present, 1));
  HANDLE_CODE(bref.unpack(dummy_present, 1));

  if (allowed_bc_list_mrdc_present) {
    HANDLE_CODE(unpack_dyn_seq_of(allowed_bc_list_mrdc, bref, 1, 65536));
  }
  if (pwr_coordination_fr1_present) {
    HANDLE_CODE(bref.unpack(pwr_coordination_fr1.p_max_nr_fr1_present, 1));
    HANDLE_CODE(bref.unpack(pwr_coordination_fr1.p_max_eutra_present, 1));
    HANDLE_CODE(bref.unpack(pwr_coordination_fr1.p_max_ue_fr1_present, 1));
    if (pwr_coordination_fr1.p_max_nr_fr1_present) {
      HANDLE_CODE(unpack_integer(pwr_coordination_fr1.p_max_nr_fr1, bref, (int8_t)-30, (int8_t)33));
    }
    if (pwr_coordination_fr1.p_max_eutra_present) {
      HANDLE_CODE(unpack_integer(pwr_coordination_fr1.p_max_eutra, bref, (int8_t)-30, (int8_t)33));
    }
    if (pwr_coordination_fr1.p_max_ue_fr1_present) {
      HANDLE_CODE(unpack_integer(pwr_coordination_fr1.p_max_ue_fr1, bref, (int8_t)-30, (int8_t)33));
    }
  }
  if (serv_cell_idx_range_scg_present) {
    HANDLE_CODE(unpack_integer(serv_cell_idx_range_scg.low_bound, bref, (uint8_t)0u, (uint8_t)31u));
    HANDLE_CODE(unpack_integer(serv_cell_idx_range_scg.up_bound, bref, (uint8_t)0u, (uint8_t)31u));
  }
  if (max_meas_freqs_scg_present) {
    HANDLE_CODE(unpack_integer(max_meas_freqs_scg, bref, (uint8_t)1u, (uint8_t)32u));
  }
  if (dummy_present) {
    HANDLE_CODE(unpack_integer(dummy, bref, (uint8_t)1u, (uint8_t)62u));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(4);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sel_band_entries_mn_list, bref);
      HANDLE_CODE(bref.unpack(pdcch_blind_detection_scg_present, 1));
      HANDLE_CODE(bref.unpack(max_num_rohc_context_sessions_sn_present, 1));
      if (sel_band_entries_mn_list.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*sel_band_entries_mn_list,
                                      bref,
                                      1,
                                      65536,
                                      SeqOfPacker<integer_packer<uint8_t>>(1, 32, integer_packer<uint8_t>(0, 32))));
      }
      if (pdcch_blind_detection_scg_present) {
        HANDLE_CODE(unpack_integer(pdcch_blind_detection_scg, bref, (uint8_t)1u, (uint8_t)15u));
      }
      if (max_num_rohc_context_sessions_sn_present) {
        HANDLE_CODE(unpack_integer(max_num_rohc_context_sessions_sn, bref, (uint16_t)0u, (uint16_t)16384u));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(max_intra_freq_meas_identities_scg_present, 1));
      HANDLE_CODE(bref.unpack(max_inter_freq_meas_identities_scg_present, 1));
      if (max_intra_freq_meas_identities_scg_present) {
        HANDLE_CODE(unpack_integer(max_intra_freq_meas_identities_scg, bref, (uint8_t)1u, (uint8_t)62u));
      }
      if (max_inter_freq_meas_identities_scg_present) {
        HANDLE_CODE(unpack_integer(max_inter_freq_meas_identities_scg, bref, (uint8_t)1u, (uint8_t)62u));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(p_max_nr_fr1_mcg_r16_present, 1));
      unpack_presence_flag(pwr_coordination_fr2_r16, bref);
      HANDLE_CODE(bref.unpack(nrdc_pc_mode_fr1_r16_present, 1));
      HANDLE_CODE(bref.unpack(nrdc_pc_mode_fr2_r16_present, 1));
      HANDLE_CODE(bref.unpack(max_meas_srs_res_scg_r16_present, 1));
      HANDLE_CODE(bref.unpack(max_meas_cli_res_scg_r16_present, 1));
      HANDLE_CODE(bref.unpack(max_num_ehc_contexts_sn_r16_present, 1));
      unpack_presence_flag(allowed_reduced_cfg_for_overheat_r16, bref);
      HANDLE_CODE(bref.unpack(max_toffset_r16_present, 1));
      if (p_max_nr_fr1_mcg_r16_present) {
        HANDLE_CODE(unpack_integer(p_max_nr_fr1_mcg_r16, bref, (int8_t)-30, (int8_t)33));
      }
      if (pwr_coordination_fr2_r16.is_present()) {
        HANDLE_CODE(bref.unpack(pwr_coordination_fr2_r16->p_max_nr_fr2_mcg_r16_present, 1));
        HANDLE_CODE(bref.unpack(pwr_coordination_fr2_r16->p_max_nr_fr2_scg_r16_present, 1));
        HANDLE_CODE(bref.unpack(pwr_coordination_fr2_r16->p_max_ue_fr2_r16_present, 1));
        if (pwr_coordination_fr2_r16->p_max_nr_fr2_mcg_r16_present) {
          HANDLE_CODE(unpack_integer(pwr_coordination_fr2_r16->p_max_nr_fr2_mcg_r16, bref, (int8_t)-30, (int8_t)33));
        }
        if (pwr_coordination_fr2_r16->p_max_nr_fr2_scg_r16_present) {
          HANDLE_CODE(unpack_integer(pwr_coordination_fr2_r16->p_max_nr_fr2_scg_r16, bref, (int8_t)-30, (int8_t)33));
        }
        if (pwr_coordination_fr2_r16->p_max_ue_fr2_r16_present) {
          HANDLE_CODE(unpack_integer(pwr_coordination_fr2_r16->p_max_ue_fr2_r16, bref, (int8_t)-30, (int8_t)33));
        }
      }
      if (nrdc_pc_mode_fr1_r16_present) {
        HANDLE_CODE(nrdc_pc_mode_fr1_r16.unpack(bref));
      }
      if (nrdc_pc_mode_fr2_r16_present) {
        HANDLE_CODE(nrdc_pc_mode_fr2_r16.unpack(bref));
      }
      if (max_meas_srs_res_scg_r16_present) {
        HANDLE_CODE(unpack_integer(max_meas_srs_res_scg_r16, bref, (uint8_t)0u, (uint8_t)32u));
      }
      if (max_meas_cli_res_scg_r16_present) {
        HANDLE_CODE(unpack_integer(max_meas_cli_res_scg_r16, bref, (uint8_t)0u, (uint8_t)64u));
      }
      if (max_num_ehc_contexts_sn_r16_present) {
        HANDLE_CODE(unpack_integer(max_num_ehc_contexts_sn_r16, bref, (uint32_t)0u, (uint32_t)65536u));
      }
      if (allowed_reduced_cfg_for_overheat_r16.is_present()) {
        HANDLE_CODE(allowed_reduced_cfg_for_overheat_r16->unpack(bref));
      }
      if (max_toffset_r16_present) {
        HANDLE_CODE(max_toffset_r16.unpack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(allowed_reduced_cfg_for_overheat_r17, bref);
      HANDLE_CODE(bref.unpack(max_num_udc_drb_r17_present, 1));
      HANDLE_CODE(bref.unpack(max_num_cp_cc_andidates_r17_present, 1));
      if (allowed_reduced_cfg_for_overheat_r17.is_present()) {
        HANDLE_CODE(allowed_reduced_cfg_for_overheat_r17->unpack(bref));
      }
      if (max_num_udc_drb_r17_present) {
        HANDLE_CODE(unpack_integer(max_num_udc_drb_r17, bref, (uint8_t)0u, (uint8_t)2u));
      }
      if (max_num_cp_cc_andidates_r17_present) {
        HANDLE_CODE(unpack_integer(max_num_cp_cc_andidates_r17, bref, (uint8_t)0u, (uint8_t)7u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void cfg_restrict_info_scg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (allowed_bc_list_mrdc.size() > 0) {
    j.start_array("allowedBC-ListMRDC");
    for (const auto& e1 : allowed_bc_list_mrdc) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (pwr_coordination_fr1_present) {
    j.write_fieldname("powerCoordination-FR1");
    j.start_obj();
    if (pwr_coordination_fr1.p_max_nr_fr1_present) {
      j.write_int("p-maxNR-FR1", pwr_coordination_fr1.p_max_nr_fr1);
    }
    if (pwr_coordination_fr1.p_max_eutra_present) {
      j.write_int("p-maxEUTRA", pwr_coordination_fr1.p_max_eutra);
    }
    if (pwr_coordination_fr1.p_max_ue_fr1_present) {
      j.write_int("p-maxUE-FR1", pwr_coordination_fr1.p_max_ue_fr1);
    }
    j.end_obj();
  }
  if (serv_cell_idx_range_scg_present) {
    j.write_fieldname("servCellIndexRangeSCG");
    j.start_obj();
    j.write_int("lowBound", serv_cell_idx_range_scg.low_bound);
    j.write_int("upBound", serv_cell_idx_range_scg.up_bound);
    j.end_obj();
  }
  if (max_meas_freqs_scg_present) {
    j.write_int("maxMeasFreqsSCG", max_meas_freqs_scg);
  }
  if (dummy_present) {
    j.write_int("dummy", dummy);
  }
  if (ext) {
    if (sel_band_entries_mn_list.is_present()) {
      j.start_array("selectedBandEntriesMNList");
      for (const auto& e1 : *sel_band_entries_mn_list) {
        j.start_array();
        for (const auto& e2 : e1) {
          j.write_int(e2);
        }
        j.end_array();
      }
      j.end_array();
    }
    if (pdcch_blind_detection_scg_present) {
      j.write_int("pdcch-BlindDetectionSCG", pdcch_blind_detection_scg);
    }
    if (max_num_rohc_context_sessions_sn_present) {
      j.write_int("maxNumberROHC-ContextSessionsSN", max_num_rohc_context_sessions_sn);
    }
    if (max_intra_freq_meas_identities_scg_present) {
      j.write_int("maxIntraFreqMeasIdentitiesSCG", max_intra_freq_meas_identities_scg);
    }
    if (max_inter_freq_meas_identities_scg_present) {
      j.write_int("maxInterFreqMeasIdentitiesSCG", max_inter_freq_meas_identities_scg);
    }
    if (p_max_nr_fr1_mcg_r16_present) {
      j.write_int("p-maxNR-FR1-MCG-r16", p_max_nr_fr1_mcg_r16);
    }
    if (pwr_coordination_fr2_r16.is_present()) {
      j.write_fieldname("powerCoordination-FR2-r16");
      j.start_obj();
      if (pwr_coordination_fr2_r16->p_max_nr_fr2_mcg_r16_present) {
        j.write_int("p-maxNR-FR2-MCG-r16", pwr_coordination_fr2_r16->p_max_nr_fr2_mcg_r16);
      }
      if (pwr_coordination_fr2_r16->p_max_nr_fr2_scg_r16_present) {
        j.write_int("p-maxNR-FR2-SCG-r16", pwr_coordination_fr2_r16->p_max_nr_fr2_scg_r16);
      }
      if (pwr_coordination_fr2_r16->p_max_ue_fr2_r16_present) {
        j.write_int("p-maxUE-FR2-r16", pwr_coordination_fr2_r16->p_max_ue_fr2_r16);
      }
      j.end_obj();
    }
    if (nrdc_pc_mode_fr1_r16_present) {
      j.write_str("nrdc-PC-mode-FR1-r16", nrdc_pc_mode_fr1_r16.to_string());
    }
    if (nrdc_pc_mode_fr2_r16_present) {
      j.write_str("nrdc-PC-mode-FR2-r16", nrdc_pc_mode_fr2_r16.to_string());
    }
    if (max_meas_srs_res_scg_r16_present) {
      j.write_int("maxMeasSRS-ResourceSCG-r16", max_meas_srs_res_scg_r16);
    }
    if (max_meas_cli_res_scg_r16_present) {
      j.write_int("maxMeasCLI-ResourceSCG-r16", max_meas_cli_res_scg_r16);
    }
    if (max_num_ehc_contexts_sn_r16_present) {
      j.write_int("maxNumberEHC-ContextsSN-r16", max_num_ehc_contexts_sn_r16);
    }
    if (allowed_reduced_cfg_for_overheat_r16.is_present()) {
      j.write_fieldname("allowedReducedConfigForOverheating-r16");
      allowed_reduced_cfg_for_overheat_r16->to_json(j);
    }
    if (max_toffset_r16_present) {
      j.write_str("maxToffset-r16", max_toffset_r16.to_string());
    }
    if (allowed_reduced_cfg_for_overheat_r17.is_present()) {
      j.write_fieldname("allowedReducedConfigForOverheating-r17");
      allowed_reduced_cfg_for_overheat_r17->to_json(j);
    }
    if (max_num_udc_drb_r17_present) {
      j.write_int("maxNumberUDC-DRB-r17", max_num_udc_drb_r17);
    }
    if (max_num_cp_cc_andidates_r17_present) {
      j.write_int("maxNumberCPCCandidates-r17", max_num_cp_cc_andidates_r17);
    }
  }
  j.end_obj();
}

const char* cfg_restrict_info_scg_s::nrdc_pc_mode_fr1_r16_opts::to_string() const
{
  static const char* names[] = {"semi-static-mode1", "semi-static-mode2", "dynamic"};
  return convert_enum_idx(names, 3, value, "cfg_restrict_info_scg_s::nrdc_pc_mode_fr1_r16_e_");
}
uint8_t cfg_restrict_info_scg_s::nrdc_pc_mode_fr1_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "cfg_restrict_info_scg_s::nrdc_pc_mode_fr1_r16_e_");
}

const char* cfg_restrict_info_scg_s::nrdc_pc_mode_fr2_r16_opts::to_string() const
{
  static const char* names[] = {"semi-static-mode1", "semi-static-mode2", "dynamic"};
  return convert_enum_idx(names, 3, value, "cfg_restrict_info_scg_s::nrdc_pc_mode_fr2_r16_e_");
}
uint8_t cfg_restrict_info_scg_s::nrdc_pc_mode_fr2_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "cfg_restrict_info_scg_s::nrdc_pc_mode_fr2_r16_e_");
}

// ReestablishmentInfo ::= SEQUENCE
SRSASN_CODE reest_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(add_reestab_info_list.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, source_pci, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(target_cell_short_mac_i.pack(bref));
  if (add_reestab_info_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, add_reestab_info_list, 1, 32));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE reest_info_s::unpack(cbit_ref& bref)
{
  bool add_reestab_info_list_present;
  HANDLE_CODE(bref.unpack(add_reestab_info_list_present, 1));

  HANDLE_CODE(unpack_integer(source_pci, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(target_cell_short_mac_i.unpack(bref));
  if (add_reestab_info_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(add_reestab_info_list, bref, 1, 32));
  }

  return SRSASN_SUCCESS;
}
void reest_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sourcePhysCellId", source_pci);
  j.write_str("targetCellShortMAC-I", target_cell_short_mac_i.to_string());
  if (add_reestab_info_list.size() > 0) {
    j.start_array("additionalReestabInfoList");
    for (const auto& e1 : add_reestab_info_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// AS-Context ::= SEQUENCE
SRSASN_CODE as_context_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(reest_info_present, 1));
  HANDLE_CODE(bref.pack(cfg_restrict_info_present, 1));

  if (reest_info_present) {
    HANDLE_CODE(reest_info.pack(bref));
  }
  if (cfg_restrict_info_present) {
    HANDLE_CODE(cfg_restrict_info.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ran_notif_area_info.is_present();
    group_flags[1] |= ue_assist_info.size() > 0;
    group_flags[2] |= sel_band_combination_sn.is_present();
    group_flags[3] |= cfg_restrict_info_daps_r16.is_present();
    group_flags[3] |= sidelink_ue_info_nr_r16.size() > 0;
    group_flags[3] |= sidelink_ue_info_eutra_r16.size() > 0;
    group_flags[3] |= ue_assist_info_eutra_r16.size() > 0;
    group_flags[3] |= ue_assist_info_scg_r16.size() > 0;
    group_flags[3] |= need_for_gaps_info_nr_r16.is_present();
    group_flags[4] |= cfg_restrict_info_daps_v1640.is_present();
    group_flags[5] |= need_for_gap_ncsg_info_nr_r17.is_present();
    group_flags[5] |= need_for_gap_ncsg_info_eutra_r17.is_present();
    group_flags[5] |= mbs_interest_ind_r17.size() > 0;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ran_notif_area_info.is_present(), 1));
      if (ran_notif_area_info.is_present()) {
        HANDLE_CODE(ran_notif_area_info->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ue_assist_info.size() > 0, 1));
      if (ue_assist_info.size() > 0) {
        HANDLE_CODE(ue_assist_info.pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sel_band_combination_sn.is_present(), 1));
      if (sel_band_combination_sn.is_present()) {
        HANDLE_CODE(sel_band_combination_sn->pack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(cfg_restrict_info_daps_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(sidelink_ue_info_nr_r16.size() > 0, 1));
      HANDLE_CODE(bref.pack(sidelink_ue_info_eutra_r16.size() > 0, 1));
      HANDLE_CODE(bref.pack(ue_assist_info_eutra_r16.size() > 0, 1));
      HANDLE_CODE(bref.pack(ue_assist_info_scg_r16.size() > 0, 1));
      HANDLE_CODE(bref.pack(need_for_gaps_info_nr_r16.is_present(), 1));
      if (cfg_restrict_info_daps_r16.is_present()) {
        HANDLE_CODE(cfg_restrict_info_daps_r16->pack(bref));
      }
      if (sidelink_ue_info_nr_r16.size() > 0) {
        HANDLE_CODE(sidelink_ue_info_nr_r16.pack(bref));
      }
      if (sidelink_ue_info_eutra_r16.size() > 0) {
        HANDLE_CODE(sidelink_ue_info_eutra_r16.pack(bref));
      }
      if (ue_assist_info_eutra_r16.size() > 0) {
        HANDLE_CODE(ue_assist_info_eutra_r16.pack(bref));
      }
      if (ue_assist_info_scg_r16.size() > 0) {
        HANDLE_CODE(ue_assist_info_scg_r16.pack(bref));
      }
      if (need_for_gaps_info_nr_r16.is_present()) {
        HANDLE_CODE(need_for_gaps_info_nr_r16->pack(bref));
      }
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(cfg_restrict_info_daps_v1640.is_present(), 1));
      if (cfg_restrict_info_daps_v1640.is_present()) {
        HANDLE_CODE(cfg_restrict_info_daps_v1640->pack(bref));
      }
    }
    if (group_flags[5]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(need_for_gap_ncsg_info_nr_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(need_for_gap_ncsg_info_eutra_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(mbs_interest_ind_r17.size() > 0, 1));
      if (need_for_gap_ncsg_info_nr_r17.is_present()) {
        HANDLE_CODE(need_for_gap_ncsg_info_nr_r17->pack(bref));
      }
      if (need_for_gap_ncsg_info_eutra_r17.is_present()) {
        HANDLE_CODE(need_for_gap_ncsg_info_eutra_r17->pack(bref));
      }
      if (mbs_interest_ind_r17.size() > 0) {
        HANDLE_CODE(mbs_interest_ind_r17.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE as_context_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(reest_info_present, 1));
  HANDLE_CODE(bref.unpack(cfg_restrict_info_present, 1));

  if (reest_info_present) {
    HANDLE_CODE(reest_info.unpack(bref));
  }
  if (cfg_restrict_info_present) {
    HANDLE_CODE(cfg_restrict_info.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(6);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(ran_notif_area_info, bref);
      if (ran_notif_area_info.is_present()) {
        HANDLE_CODE(ran_notif_area_info->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      bool ue_assist_info_present;
      HANDLE_CODE(bref.unpack(ue_assist_info_present, 1));
      if (ue_assist_info_present) {
        HANDLE_CODE(ue_assist_info.unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sel_band_combination_sn, bref);
      if (sel_band_combination_sn.is_present()) {
        HANDLE_CODE(sel_band_combination_sn->unpack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(cfg_restrict_info_daps_r16, bref);
      bool sidelink_ue_info_nr_r16_present;
      HANDLE_CODE(bref.unpack(sidelink_ue_info_nr_r16_present, 1));
      bool sidelink_ue_info_eutra_r16_present;
      HANDLE_CODE(bref.unpack(sidelink_ue_info_eutra_r16_present, 1));
      bool ue_assist_info_eutra_r16_present;
      HANDLE_CODE(bref.unpack(ue_assist_info_eutra_r16_present, 1));
      bool ue_assist_info_scg_r16_present;
      HANDLE_CODE(bref.unpack(ue_assist_info_scg_r16_present, 1));
      unpack_presence_flag(need_for_gaps_info_nr_r16, bref);
      if (cfg_restrict_info_daps_r16.is_present()) {
        HANDLE_CODE(cfg_restrict_info_daps_r16->unpack(bref));
      }
      if (sidelink_ue_info_nr_r16_present) {
        HANDLE_CODE(sidelink_ue_info_nr_r16.unpack(bref));
      }
      if (sidelink_ue_info_eutra_r16_present) {
        HANDLE_CODE(sidelink_ue_info_eutra_r16.unpack(bref));
      }
      if (ue_assist_info_eutra_r16_present) {
        HANDLE_CODE(ue_assist_info_eutra_r16.unpack(bref));
      }
      if (ue_assist_info_scg_r16_present) {
        HANDLE_CODE(ue_assist_info_scg_r16.unpack(bref));
      }
      if (need_for_gaps_info_nr_r16.is_present()) {
        HANDLE_CODE(need_for_gaps_info_nr_r16->unpack(bref));
      }
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(cfg_restrict_info_daps_v1640, bref);
      if (cfg_restrict_info_daps_v1640.is_present()) {
        HANDLE_CODE(cfg_restrict_info_daps_v1640->unpack(bref));
      }
    }
    if (group_flags[5]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(need_for_gap_ncsg_info_nr_r17, bref);
      unpack_presence_flag(need_for_gap_ncsg_info_eutra_r17, bref);
      bool mbs_interest_ind_r17_present;
      HANDLE_CODE(bref.unpack(mbs_interest_ind_r17_present, 1));
      if (need_for_gap_ncsg_info_nr_r17.is_present()) {
        HANDLE_CODE(need_for_gap_ncsg_info_nr_r17->unpack(bref));
      }
      if (need_for_gap_ncsg_info_eutra_r17.is_present()) {
        HANDLE_CODE(need_for_gap_ncsg_info_eutra_r17->unpack(bref));
      }
      if (mbs_interest_ind_r17_present) {
        HANDLE_CODE(mbs_interest_ind_r17.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void as_context_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (reest_info_present) {
    j.write_fieldname("reestablishmentInfo");
    reest_info.to_json(j);
  }
  if (cfg_restrict_info_present) {
    j.write_fieldname("configRestrictInfo");
    cfg_restrict_info.to_json(j);
  }
  if (ext) {
    if (ran_notif_area_info.is_present()) {
      j.write_fieldname("ran-NotificationAreaInfo");
      ran_notif_area_info->to_json(j);
    }
    if (ue_assist_info.size() > 0) {
      j.write_str("ueAssistanceInformation", ue_assist_info.to_string());
    }
    if (sel_band_combination_sn.is_present()) {
      j.write_fieldname("selectedBandCombinationSN");
      sel_band_combination_sn->to_json(j);
    }
    if (cfg_restrict_info_daps_r16.is_present()) {
      j.write_fieldname("configRestrictInfoDAPS-r16");
      cfg_restrict_info_daps_r16->to_json(j);
    }
    if (sidelink_ue_info_nr_r16.size() > 0) {
      j.write_str("sidelinkUEInformationNR-r16", sidelink_ue_info_nr_r16.to_string());
    }
    if (sidelink_ue_info_eutra_r16.size() > 0) {
      j.write_str("sidelinkUEInformationEUTRA-r16", sidelink_ue_info_eutra_r16.to_string());
    }
    if (ue_assist_info_eutra_r16.size() > 0) {
      j.write_str("ueAssistanceInformationEUTRA-r16", ue_assist_info_eutra_r16.to_string());
    }
    if (ue_assist_info_scg_r16.size() > 0) {
      j.write_str("ueAssistanceInformationSCG-r16", ue_assist_info_scg_r16.to_string());
    }
    if (need_for_gaps_info_nr_r16.is_present()) {
      j.write_fieldname("needForGapsInfoNR-r16");
      need_for_gaps_info_nr_r16->to_json(j);
    }
    if (cfg_restrict_info_daps_v1640.is_present()) {
      j.write_fieldname("configRestrictInfoDAPS-v1640");
      cfg_restrict_info_daps_v1640->to_json(j);
    }
    if (need_for_gap_ncsg_info_nr_r17.is_present()) {
      j.write_fieldname("needForGapNCSG-InfoNR-r17");
      need_for_gap_ncsg_info_nr_r17->to_json(j);
    }
    if (need_for_gap_ncsg_info_eutra_r17.is_present()) {
      j.write_fieldname("needForGapNCSG-InfoEUTRA-r17");
      need_for_gap_ncsg_info_eutra_r17->to_json(j);
    }
    if (mbs_interest_ind_r17.size() > 0) {
      j.write_str("mbsInterestIndication-r17", mbs_interest_ind_r17.to_string());
    }
  }
  j.end_obj();
}

// VictimSystemType ::= SEQUENCE
SRSASN_CODE victim_sys_type_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(gps_present, 1));
  HANDLE_CODE(bref.pack(glonass_present, 1));
  HANDLE_CODE(bref.pack(bds_present, 1));
  HANDLE_CODE(bref.pack(galileo_present, 1));
  HANDLE_CODE(bref.pack(wlan_present, 1));
  HANDLE_CODE(bref.pack(bluetooth_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE victim_sys_type_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(gps_present, 1));
  HANDLE_CODE(bref.unpack(glonass_present, 1));
  HANDLE_CODE(bref.unpack(bds_present, 1));
  HANDLE_CODE(bref.unpack(galileo_present, 1));
  HANDLE_CODE(bref.unpack(wlan_present, 1));
  HANDLE_CODE(bref.unpack(bluetooth_present, 1));

  return SRSASN_SUCCESS;
}
void victim_sys_type_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (gps_present) {
    j.write_str("gps", "true");
  }
  if (glonass_present) {
    j.write_str("glonass", "true");
  }
  if (bds_present) {
    j.write_str("bds", "true");
  }
  if (galileo_present) {
    j.write_str("galileo", "true");
  }
  if (wlan_present) {
    j.write_str("wlan", "true");
  }
  if (bluetooth_present) {
    j.write_str("bluetooth", "true");
  }
  j.end_obj();
}

// AffectedCarrierFreqCombInfoMRDC ::= SEQUENCE
SRSASN_CODE affected_carrier_freq_comb_info_mrdc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(affected_carrier_freq_comb_mrdc_present, 1));

  HANDLE_CODE(victim_sys_type.pack(bref));
  HANDLE_CODE(interference_direction_mrdc.pack(bref));
  if (affected_carrier_freq_comb_mrdc_present) {
    HANDLE_CODE(bref.pack(affected_carrier_freq_comb_mrdc.affected_carrier_freq_comb_eutra.size() > 0, 1));
    if (affected_carrier_freq_comb_mrdc.affected_carrier_freq_comb_eutra.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(bref,
                                  affected_carrier_freq_comb_mrdc.affected_carrier_freq_comb_eutra,
                                  1,
                                  32,
                                  integer_packer<uint32_t>(0, 262143)));
    }
    HANDLE_CODE(pack_dyn_seq_of(bref,
                                affected_carrier_freq_comb_mrdc.affected_carrier_freq_comb_nr,
                                1,
                                32,
                                integer_packer<uint32_t>(0, 3279165)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE affected_carrier_freq_comb_info_mrdc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(affected_carrier_freq_comb_mrdc_present, 1));

  HANDLE_CODE(victim_sys_type.unpack(bref));
  HANDLE_CODE(interference_direction_mrdc.unpack(bref));
  if (affected_carrier_freq_comb_mrdc_present) {
    bool affected_carrier_freq_comb_eutra_present;
    HANDLE_CODE(bref.unpack(affected_carrier_freq_comb_eutra_present, 1));
    if (affected_carrier_freq_comb_eutra_present) {
      HANDLE_CODE(unpack_dyn_seq_of(affected_carrier_freq_comb_mrdc.affected_carrier_freq_comb_eutra,
                                    bref,
                                    1,
                                    32,
                                    integer_packer<uint32_t>(0, 262143)));
    }
    HANDLE_CODE(unpack_dyn_seq_of(affected_carrier_freq_comb_mrdc.affected_carrier_freq_comb_nr,
                                  bref,
                                  1,
                                  32,
                                  integer_packer<uint32_t>(0, 3279165)));
  }

  return SRSASN_SUCCESS;
}
void affected_carrier_freq_comb_info_mrdc_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("victimSystemType");
  victim_sys_type.to_json(j);
  j.write_str("interferenceDirectionMRDC", interference_direction_mrdc.to_string());
  if (affected_carrier_freq_comb_mrdc_present) {
    j.write_fieldname("affectedCarrierFreqCombMRDC");
    j.start_obj();
    if (affected_carrier_freq_comb_mrdc.affected_carrier_freq_comb_eutra.size() > 0) {
      j.start_array("affectedCarrierFreqCombEUTRA");
      for (const auto& e1 : affected_carrier_freq_comb_mrdc.affected_carrier_freq_comb_eutra) {
        j.write_int(e1);
      }
      j.end_array();
    }
    j.start_array("affectedCarrierFreqCombNR");
    for (const auto& e1 : affected_carrier_freq_comb_mrdc.affected_carrier_freq_comb_nr) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  j.end_obj();
}

const char* affected_carrier_freq_comb_info_mrdc_s::interference_direction_mrdc_opts::to_string() const
{
  static const char* names[] = {"eutra-nr", "nr", "other", "utra-nr-other", "nr-other", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "affected_carrier_freq_comb_info_mrdc_s::interference_direction_mrdc_e_");
}

// BandParametersSidelink-v1710 ::= SEQUENCE
SRSASN_CODE band_params_sidelink_v1710_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(tx_iuc_scheme1_mode2_sidelink_r17_present, 1));
  HANDLE_CODE(bref.pack(tx_iuc_scheme2_mode2_sidelink_r17_present, 1));

  if (tx_iuc_scheme2_mode2_sidelink_r17_present) {
    HANDLE_CODE(tx_iuc_scheme2_mode2_sidelink_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_sidelink_v1710_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(tx_iuc_scheme1_mode2_sidelink_r17_present, 1));
  HANDLE_CODE(bref.unpack(tx_iuc_scheme2_mode2_sidelink_r17_present, 1));

  if (tx_iuc_scheme2_mode2_sidelink_r17_present) {
    HANDLE_CODE(tx_iuc_scheme2_mode2_sidelink_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_params_sidelink_v1710_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (tx_iuc_scheme1_mode2_sidelink_r17_present) {
    j.write_str("tx-IUC-Scheme1-Mode2Sidelink-r17", "supported");
  }
  if (tx_iuc_scheme2_mode2_sidelink_r17_present) {
    j.write_str("tx-IUC-Scheme2-Mode2Sidelink-r17", tx_iuc_scheme2_mode2_sidelink_r17.to_string());
  }
  j.end_obj();
}

const char* band_params_sidelink_v1710_s::tx_iuc_scheme2_mode2_sidelink_r17_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n16"};
  return convert_enum_idx(names, 3, value, "band_params_sidelink_v1710_s::tx_iuc_scheme2_mode2_sidelink_r17_e_");
}
uint8_t band_params_sidelink_v1710_s::tx_iuc_scheme2_mode2_sidelink_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 16};
  return map_enum_number(numbers, 3, value, "band_params_sidelink_v1710_s::tx_iuc_scheme2_mode2_sidelink_r17_e_");
}

// BandSidelinkPC5-r16 ::= SEQUENCE
SRSASN_CODE band_sidelink_pc5_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_reception_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_tx_256_qam_r16_present, 1));
  HANDLE_CODE(bref.pack(low_se_64_qam_mcs_table_sidelink_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, freq_band_sidelink_r16, (uint16_t)1u, (uint16_t)1024u));
  if (sl_reception_r16_present) {
    HANDLE_CODE(bref.pack(sl_reception_r16.scs_cp_pattern_rx_sidelink_r16_present, 1));
    HANDLE_CODE(bref.pack(sl_reception_r16.extended_cp_rx_sidelink_r16_present, 1));
    HANDLE_CODE(sl_reception_r16.harq_rx_process_sidelink_r16.pack(bref));
    HANDLE_CODE(sl_reception_r16.pscch_rx_sidelink_r16.pack(bref));
    if (sl_reception_r16.scs_cp_pattern_rx_sidelink_r16_present) {
      HANDLE_CODE(sl_reception_r16.scs_cp_pattern_rx_sidelink_r16.pack(bref));
    }
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= csi_report_sidelink_r16.is_present();
    group_flags[0] |= rank_two_reception_r16_present;
    group_flags[0] |= sl_open_loop_pc_rsrp_report_sidelink_r16_present;
    group_flags[0] |= sl_rx_256_qam_r16_present;
    group_flags[1] |= rx_iuc_scheme1_preferred_mode2_sidelink_r17_present;
    group_flags[1] |= rx_iuc_scheme1_non_preferred_mode2_sidelink_r17_present;
    group_flags[1] |= rx_iuc_scheme2_mode2_sidelink_r17_present;
    group_flags[1] |= rx_iuc_scheme1_sci_r17_present;
    group_flags[1] |= rx_iuc_scheme1_sci_explicit_req_r17_present;
    group_flags[1] |= scheme2_conflict_determination_rsrp_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(csi_report_sidelink_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(rank_two_reception_r16_present, 1));
      HANDLE_CODE(bref.pack(sl_open_loop_pc_rsrp_report_sidelink_r16_present, 1));
      HANDLE_CODE(bref.pack(sl_rx_256_qam_r16_present, 1));
      if (csi_report_sidelink_r16.is_present()) {
        HANDLE_CODE(csi_report_sidelink_r16->csi_rs_ports_sidelink_r16.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(rx_iuc_scheme1_preferred_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.pack(rx_iuc_scheme1_non_preferred_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.pack(rx_iuc_scheme2_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.pack(rx_iuc_scheme1_sci_r17_present, 1));
      HANDLE_CODE(bref.pack(rx_iuc_scheme1_sci_explicit_req_r17_present, 1));
      HANDLE_CODE(bref.pack(scheme2_conflict_determination_rsrp_r17_present, 1));
      if (rx_iuc_scheme2_mode2_sidelink_r17_present) {
        HANDLE_CODE(rx_iuc_scheme2_mode2_sidelink_r17.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_sidelink_pc5_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_reception_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_tx_256_qam_r16_present, 1));
  HANDLE_CODE(bref.unpack(low_se_64_qam_mcs_table_sidelink_r16_present, 1));

  HANDLE_CODE(unpack_integer(freq_band_sidelink_r16, bref, (uint16_t)1u, (uint16_t)1024u));
  if (sl_reception_r16_present) {
    HANDLE_CODE(bref.unpack(sl_reception_r16.scs_cp_pattern_rx_sidelink_r16_present, 1));
    HANDLE_CODE(bref.unpack(sl_reception_r16.extended_cp_rx_sidelink_r16_present, 1));
    HANDLE_CODE(sl_reception_r16.harq_rx_process_sidelink_r16.unpack(bref));
    HANDLE_CODE(sl_reception_r16.pscch_rx_sidelink_r16.unpack(bref));
    if (sl_reception_r16.scs_cp_pattern_rx_sidelink_r16_present) {
      HANDLE_CODE(sl_reception_r16.scs_cp_pattern_rx_sidelink_r16.unpack(bref));
    }
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(csi_report_sidelink_r16, bref);
      HANDLE_CODE(bref.unpack(rank_two_reception_r16_present, 1));
      HANDLE_CODE(bref.unpack(sl_open_loop_pc_rsrp_report_sidelink_r16_present, 1));
      HANDLE_CODE(bref.unpack(sl_rx_256_qam_r16_present, 1));
      if (csi_report_sidelink_r16.is_present()) {
        HANDLE_CODE(csi_report_sidelink_r16->csi_rs_ports_sidelink_r16.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(rx_iuc_scheme1_preferred_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.unpack(rx_iuc_scheme1_non_preferred_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.unpack(rx_iuc_scheme2_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.unpack(rx_iuc_scheme1_sci_r17_present, 1));
      HANDLE_CODE(bref.unpack(rx_iuc_scheme1_sci_explicit_req_r17_present, 1));
      HANDLE_CODE(bref.unpack(scheme2_conflict_determination_rsrp_r17_present, 1));
      if (rx_iuc_scheme2_mode2_sidelink_r17_present) {
        HANDLE_CODE(rx_iuc_scheme2_mode2_sidelink_r17.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void band_sidelink_pc5_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("freqBandSidelink-r16", freq_band_sidelink_r16);
  if (sl_reception_r16_present) {
    j.write_fieldname("sl-Reception-r16");
    j.start_obj();
    j.write_str("harq-RxProcessSidelink-r16", sl_reception_r16.harq_rx_process_sidelink_r16.to_string());
    j.write_str("pscch-RxSidelink-r16", sl_reception_r16.pscch_rx_sidelink_r16.to_string());
    if (sl_reception_r16.scs_cp_pattern_rx_sidelink_r16_present) {
      j.write_fieldname("scs-CP-PatternRxSidelink-r16");
      sl_reception_r16.scs_cp_pattern_rx_sidelink_r16.to_json(j);
    }
    if (sl_reception_r16.extended_cp_rx_sidelink_r16_present) {
      j.write_str("extendedCP-RxSidelink-r16", "supported");
    }
    j.end_obj();
  }
  if (sl_tx_256_qam_r16_present) {
    j.write_str("sl-Tx-256QAM-r16", "supported");
  }
  if (low_se_64_qam_mcs_table_sidelink_r16_present) {
    j.write_str("lowSE-64QAM-MCS-TableSidelink-r16", "supported");
  }
  if (ext) {
    if (csi_report_sidelink_r16.is_present()) {
      j.write_fieldname("csi-ReportSidelink-r16");
      j.start_obj();
      j.write_str("csi-RS-PortsSidelink-r16", csi_report_sidelink_r16->csi_rs_ports_sidelink_r16.to_string());
      j.end_obj();
    }
    if (rank_two_reception_r16_present) {
      j.write_str("rankTwoReception-r16", "supported");
    }
    if (sl_open_loop_pc_rsrp_report_sidelink_r16_present) {
      j.write_str("sl-openLoopPC-RSRP-ReportSidelink-r16", "supported");
    }
    if (sl_rx_256_qam_r16_present) {
      j.write_str("sl-Rx-256QAM-r16", "supported");
    }
    if (rx_iuc_scheme1_preferred_mode2_sidelink_r17_present) {
      j.write_str("rx-IUC-Scheme1-PreferredMode2Sidelink-r17", "supported");
    }
    if (rx_iuc_scheme1_non_preferred_mode2_sidelink_r17_present) {
      j.write_str("rx-IUC-Scheme1-NonPreferredMode2Sidelink-r17", "supported");
    }
    if (rx_iuc_scheme2_mode2_sidelink_r17_present) {
      j.write_str("rx-IUC-Scheme2-Mode2Sidelink-r17", rx_iuc_scheme2_mode2_sidelink_r17.to_string());
    }
    if (rx_iuc_scheme1_sci_r17_present) {
      j.write_str("rx-IUC-Scheme1-SCI-r17", "supported");
    }
    if (rx_iuc_scheme1_sci_explicit_req_r17_present) {
      j.write_str("rx-IUC-Scheme1-SCI-ExplicitReq-r17", "supported");
    }
    if (scheme2_conflict_determination_rsrp_r17_present) {
      j.write_str("scheme2-ConflictDeterminationRSRP-r17", "supported");
    }
  }
  j.end_obj();
}

const char* band_sidelink_pc5_r16_s::sl_reception_r16_s_::harq_rx_process_sidelink_r16_opts::to_string() const
{
  static const char* names[] = {"n16", "n24", "n32", "n64"};
  return convert_enum_idx(
      names, 4, value, "band_sidelink_pc5_r16_s::sl_reception_r16_s_::harq_rx_process_sidelink_r16_e_");
}
uint8_t band_sidelink_pc5_r16_s::sl_reception_r16_s_::harq_rx_process_sidelink_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {16, 24, 32, 64};
  return map_enum_number(
      numbers, 4, value, "band_sidelink_pc5_r16_s::sl_reception_r16_s_::harq_rx_process_sidelink_r16_e_");
}

const char* band_sidelink_pc5_r16_s::sl_reception_r16_s_::pscch_rx_sidelink_r16_opts::to_string() const
{
  static const char* names[] = {"value1", "value2"};
  return convert_enum_idx(names, 2, value, "band_sidelink_pc5_r16_s::sl_reception_r16_s_::pscch_rx_sidelink_r16_e_");
}
uint8_t band_sidelink_pc5_r16_s::sl_reception_r16_s_::pscch_rx_sidelink_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "band_sidelink_pc5_r16_s::sl_reception_r16_s_::pscch_rx_sidelink_r16_e_");
}

void band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::destroy_()
{
  switch (type_) {
    case types::fr1_r16:
      c.destroy<fr1_r16_s_>();
      break;
    case types::fr2_r16:
      c.destroy<fr2_r16_s_>();
      break;
    default:
      break;
  }
}
void band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fr1_r16:
      c.init<fr1_r16_s_>();
      break;
    case types::fr2_r16:
      c.init<fr2_r16_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_");
  }
}
band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::scs_cp_pattern_rx_sidelink_r16_c_(
    const band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1_r16:
      c.init(other.c.get<fr1_r16_s_>());
      break;
    case types::fr2_r16:
      c.init(other.c.get<fr2_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_");
  }
}
band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_&
band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::operator=(
    const band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1_r16:
      c.set(other.c.get<fr1_r16_s_>());
      break;
    case types::fr2_r16:
      c.set(other.c.get<fr2_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_");
  }

  return *this;
}
band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::fr1_r16_s_&
band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::set_fr1_r16()
{
  set(types::fr1_r16);
  return c.get<fr1_r16_s_>();
}
band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::fr2_r16_s_&
band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::set_fr2_r16()
{
  set(types::fr2_r16);
  return c.get<fr2_r16_s_>();
}
void band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1_r16:
      j.write_fieldname("fr1-r16");
      j.start_obj();
      if (c.get<fr1_r16_s_>().scs_15k_hz_r16_present) {
        j.write_str("scs-15kHz-r16", c.get<fr1_r16_s_>().scs_15k_hz_r16.to_string());
      }
      if (c.get<fr1_r16_s_>().scs_30k_hz_r16_present) {
        j.write_str("scs-30kHz-r16", c.get<fr1_r16_s_>().scs_30k_hz_r16.to_string());
      }
      if (c.get<fr1_r16_s_>().scs_60k_hz_r16_present) {
        j.write_str("scs-60kHz-r16", c.get<fr1_r16_s_>().scs_60k_hz_r16.to_string());
      }
      j.end_obj();
      break;
    case types::fr2_r16:
      j.write_fieldname("fr2-r16");
      j.start_obj();
      if (c.get<fr2_r16_s_>().scs_60k_hz_r16_present) {
        j.write_str("scs-60kHz-r16", c.get<fr2_r16_s_>().scs_60k_hz_r16.to_string());
      }
      if (c.get<fr2_r16_s_>().scs_120k_hz_r16_present) {
        j.write_str("scs-120kHz-r16", c.get<fr2_r16_s_>().scs_120k_hz_r16.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1_r16:
      HANDLE_CODE(bref.pack(c.get<fr1_r16_s_>().scs_15k_hz_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_r16_s_>().scs_30k_hz_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_r16_s_>().scs_60k_hz_r16_present, 1));
      if (c.get<fr1_r16_s_>().scs_15k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_15k_hz_r16.pack(bref));
      }
      if (c.get<fr1_r16_s_>().scs_30k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_30k_hz_r16.pack(bref));
      }
      if (c.get<fr1_r16_s_>().scs_60k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_60k_hz_r16.pack(bref));
      }
      break;
    case types::fr2_r16:
      HANDLE_CODE(bref.pack(c.get<fr2_r16_s_>().scs_60k_hz_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr2_r16_s_>().scs_120k_hz_r16_present, 1));
      if (c.get<fr2_r16_s_>().scs_60k_hz_r16_present) {
        HANDLE_CODE(c.get<fr2_r16_s_>().scs_60k_hz_r16.pack(bref));
      }
      if (c.get<fr2_r16_s_>().scs_120k_hz_r16_present) {
        HANDLE_CODE(c.get<fr2_r16_s_>().scs_120k_hz_r16.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1_r16:
      HANDLE_CODE(bref.unpack(c.get<fr1_r16_s_>().scs_15k_hz_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_r16_s_>().scs_30k_hz_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_r16_s_>().scs_60k_hz_r16_present, 1));
      if (c.get<fr1_r16_s_>().scs_15k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_15k_hz_r16.unpack(bref));
      }
      if (c.get<fr1_r16_s_>().scs_30k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_30k_hz_r16.unpack(bref));
      }
      if (c.get<fr1_r16_s_>().scs_60k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_60k_hz_r16.unpack(bref));
      }
      break;
    case types::fr2_r16:
      HANDLE_CODE(bref.unpack(c.get<fr2_r16_s_>().scs_60k_hz_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr2_r16_s_>().scs_120k_hz_r16_present, 1));
      if (c.get<fr2_r16_s_>().scs_60k_hz_r16_present) {
        HANDLE_CODE(c.get<fr2_r16_s_>().scs_60k_hz_r16.unpack(bref));
      }
      if (c.get<fr2_r16_s_>().scs_120k_hz_r16_present) {
        HANDLE_CODE(c.get<fr2_r16_s_>().scs_120k_hz_r16.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char*
band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"fr1-r16", "fr2-r16"};
  return convert_enum_idx(
      names, 2, value, "band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::types");
}
uint8_t band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers, 2, value, "band_sidelink_pc5_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::types");
}

const char* band_sidelink_pc5_r16_s::csi_report_sidelink_r16_s_::csi_rs_ports_sidelink_r16_opts::to_string() const
{
  static const char* names[] = {"p1", "p2"};
  return convert_enum_idx(
      names, 2, value, "band_sidelink_pc5_r16_s::csi_report_sidelink_r16_s_::csi_rs_ports_sidelink_r16_e_");
}
uint8_t band_sidelink_pc5_r16_s::csi_report_sidelink_r16_s_::csi_rs_ports_sidelink_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers, 2, value, "band_sidelink_pc5_r16_s::csi_report_sidelink_r16_s_::csi_rs_ports_sidelink_r16_e_");
}

const char* band_sidelink_pc5_r16_s::rx_iuc_scheme2_mode2_sidelink_r17_opts::to_string() const
{
  static const char* names[] = {"n5", "n15", "n25", "n32", "n35", "n45", "n50", "n64"};
  return convert_enum_idx(names, 8, value, "band_sidelink_pc5_r16_s::rx_iuc_scheme2_mode2_sidelink_r17_e_");
}
uint8_t band_sidelink_pc5_r16_s::rx_iuc_scheme2_mode2_sidelink_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 15, 25, 32, 35, 45, 50, 64};
  return map_enum_number(numbers, 8, value, "band_sidelink_pc5_r16_s::rx_iuc_scheme2_mode2_sidelink_r17_e_");
}

// CG-CandidateInfoId-r17 ::= SEQUENCE
SRSASN_CODE cg_candidate_info_id_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, ssb_freq_r17, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(pack_integer(bref, pci_r17, (uint16_t)0u, (uint16_t)1007u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_candidate_info_id_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(ssb_freq_r17, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(unpack_integer(pci_r17, bref, (uint16_t)0u, (uint16_t)1007u));

  return SRSASN_SUCCESS;
}
void cg_candidate_info_id_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("ssbFrequency-r17", ssb_freq_r17);
  j.write_int("physCellId-r17", pci_r17);
  j.end_obj();
}

// CG-CandidateInfo-r17 ::= SEQUENCE
SRSASN_CODE cg_candidate_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(cg_candidate_info_id_r17.pack(bref));
  HANDLE_CODE(candidate_cg_cfg_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_candidate_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(cg_candidate_info_id_r17.unpack(bref));
  HANDLE_CODE(candidate_cg_cfg_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void cg_candidate_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("cg-CandidateInfoId-r17");
  cg_candidate_info_id_r17.to_json(j);
  j.write_str("candidateCG-Config-r17", candidate_cg_cfg_r17.to_string());
  j.end_obj();
}

// CG-CandidateList-r17-IEs ::= SEQUENCE
SRSASN_CODE cg_candidate_list_r17_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cg_candidate_to_add_mod_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(cg_candidate_to_release_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (cg_candidate_to_add_mod_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cg_candidate_to_add_mod_list_r17, 1, 8));
  }
  if (cg_candidate_to_release_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cg_candidate_to_release_list_r17, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_candidate_list_r17_ies_s::unpack(cbit_ref& bref)
{
  bool cg_candidate_to_add_mod_list_r17_present;
  HANDLE_CODE(bref.unpack(cg_candidate_to_add_mod_list_r17_present, 1));
  bool cg_candidate_to_release_list_r17_present;
  HANDLE_CODE(bref.unpack(cg_candidate_to_release_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (cg_candidate_to_add_mod_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cg_candidate_to_add_mod_list_r17, bref, 1, 8));
  }
  if (cg_candidate_to_release_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cg_candidate_to_release_list_r17, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void cg_candidate_list_r17_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (cg_candidate_to_add_mod_list_r17.size() > 0) {
    j.start_array("cg-CandidateToAddModList-r17");
    for (const auto& e1 : cg_candidate_to_add_mod_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (cg_candidate_to_release_list_r17.size() > 0) {
    j.start_array("cg-CandidateToReleaseList-r17");
    for (const auto& e1 : cg_candidate_to_release_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// CG-CandidateList ::= SEQUENCE
SRSASN_CODE cg_candidate_list_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_candidate_list_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void cg_candidate_list_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void cg_candidate_list_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
cg_candidate_list_s::crit_exts_c_::c1_c_& cg_candidate_list_s::crit_exts_c_::set_c1()
{
  set(types::c1);
  return c;
}
void cg_candidate_list_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void cg_candidate_list_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "cg_candidate_list_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE cg_candidate_list_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "cg_candidate_list_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_candidate_list_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "cg_candidate_list_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void cg_candidate_list_s::crit_exts_c_::c1_c_::set(types::options e)
{
  type_ = e;
}
cg_candidate_list_r17_ies_s& cg_candidate_list_s::crit_exts_c_::c1_c_::set_cg_candidate_list_r17()
{
  set(types::cg_candidate_list_r17);
  return c;
}
void cg_candidate_list_s::crit_exts_c_::c1_c_::set_spare3()
{
  set(types::spare3);
}
void cg_candidate_list_s::crit_exts_c_::c1_c_::set_spare2()
{
  set(types::spare2);
}
void cg_candidate_list_s::crit_exts_c_::c1_c_::set_spare1()
{
  set(types::spare1);
}
void cg_candidate_list_s::crit_exts_c_::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cg_candidate_list_r17:
      j.write_fieldname("cg-CandidateList-r17");
      c.to_json(j);
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "cg_candidate_list_s::crit_exts_c_::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE cg_candidate_list_s::crit_exts_c_::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cg_candidate_list_r17:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "cg_candidate_list_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_candidate_list_s::crit_exts_c_::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cg_candidate_list_r17:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "cg_candidate_list_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cg_candidate_list_s::crit_exts_c_::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"cg-CandidateList-r17", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "cg_candidate_list_s::crit_exts_c_::c1_c_::types");
}

const char* cg_candidate_list_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"c1", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "cg_candidate_list_s::crit_exts_c_::types");
}
uint8_t cg_candidate_list_s::crit_exts_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "cg_candidate_list_s::crit_exts_c_::types");
}

// CandidateCell-r17 ::= SEQUENCE
SRSASN_CODE candidate_cell_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cond_execution_cond_scg_r17.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, pci_r17, (uint16_t)0u, (uint16_t)1007u));
  if (cond_execution_cond_scg_r17.size() > 0) {
    HANDLE_CODE(cond_execution_cond_scg_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE candidate_cell_r17_s::unpack(cbit_ref& bref)
{
  bool cond_execution_cond_scg_r17_present;
  HANDLE_CODE(bref.unpack(cond_execution_cond_scg_r17_present, 1));

  HANDLE_CODE(unpack_integer(pci_r17, bref, (uint16_t)0u, (uint16_t)1007u));
  if (cond_execution_cond_scg_r17_present) {
    HANDLE_CODE(cond_execution_cond_scg_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void candidate_cell_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("physCellId-r17", pci_r17);
  if (cond_execution_cond_scg_r17.size() > 0) {
    j.write_str("condExecutionCondSCG-r17", cond_execution_cond_scg_r17.to_string());
  }
  j.end_obj();
}

// CandidateCellInfo-r17 ::= SEQUENCE
SRSASN_CODE candidate_cell_info_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, ssb_freq_r17, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(pack_dyn_seq_of(bref, candidate_list_r17, 1, 8));

  return SRSASN_SUCCESS;
}
SRSASN_CODE candidate_cell_info_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(ssb_freq_r17, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(unpack_dyn_seq_of(candidate_list_r17, bref, 1, 8));

  return SRSASN_SUCCESS;
}
void candidate_cell_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("ssbFrequency-r17", ssb_freq_r17);
  j.start_array("candidateList-r17");
  for (const auto& e1 : candidate_list_r17) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// FrequencyConfig-NR-r16 ::= SEQUENCE
SRSASN_CODE freq_cfg_nr_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, freq_band_ind_nr_r16, (uint16_t)1u, (uint16_t)1024u));
  HANDLE_CODE(pack_integer(bref, carrier_center_freq_nr_r16, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(pack_integer(bref, carrier_bw_nr_r16, (uint16_t)1u, (uint16_t)275u));
  HANDLE_CODE(subcarrier_spacing_nr_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE freq_cfg_nr_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(freq_band_ind_nr_r16, bref, (uint16_t)1u, (uint16_t)1024u));
  HANDLE_CODE(unpack_integer(carrier_center_freq_nr_r16, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(unpack_integer(carrier_bw_nr_r16, bref, (uint16_t)1u, (uint16_t)275u));
  HANDLE_CODE(subcarrier_spacing_nr_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void freq_cfg_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("freqBandIndicatorNR-r16", freq_band_ind_nr_r16);
  j.write_int("carrierCenterFreq-NR-r16", carrier_center_freq_nr_r16);
  j.write_int("carrierBandwidth-NR-r16", carrier_bw_nr_r16);
  j.write_str("subcarrierSpacing-NR-r16", subcarrier_spacing_nr_r16.to_string());
  j.end_obj();
}

// TransmissionBandwidth-EUTRA-r16 ::= ENUMERATED
const char* tx_bw_eutra_r16_opts::to_string() const
{
  static const char* names[] = {"rb6", "rb15", "rb25", "rb50", "rb75", "rb100"};
  return convert_enum_idx(names, 6, value, "tx_bw_eutra_r16_e");
}
uint8_t tx_bw_eutra_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {6, 15, 25, 50, 75, 100};
  return map_enum_number(numbers, 6, value, "tx_bw_eutra_r16_e");
}

// CG-Config-v1730-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_v1730_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fr1_carriers_scg_r17_present, 1));
  HANDLE_CODE(bref.pack(fr2_carriers_scg_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (fr1_carriers_scg_r17_present) {
    HANDLE_CODE(pack_integer(bref, fr1_carriers_scg_r17, (uint8_t)1u, (uint8_t)32u));
  }
  if (fr2_carriers_scg_r17_present) {
    HANDLE_CODE(pack_integer(bref, fr2_carriers_scg_r17, (uint8_t)1u, (uint8_t)32u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_v1730_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(fr1_carriers_scg_r17_present, 1));
  HANDLE_CODE(bref.unpack(fr2_carriers_scg_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (fr1_carriers_scg_r17_present) {
    HANDLE_CODE(unpack_integer(fr1_carriers_scg_r17, bref, (uint8_t)1u, (uint8_t)32u));
  }
  if (fr2_carriers_scg_r17_present) {
    HANDLE_CODE(unpack_integer(fr2_carriers_scg_r17, bref, (uint8_t)1u, (uint8_t)32u));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_v1730_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (fr1_carriers_scg_r17_present) {
    j.write_int("fr1-Carriers-SCG-r17", fr1_carriers_scg_r17);
  }
  if (fr2_carriers_scg_r17_present) {
    j.write_int("fr2-Carriers-SCG-r17", fr2_carriers_scg_r17);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// ServCellInfoXCG-EUTRA-r16 ::= SEQUENCE
SRSASN_CODE serv_cell_info_xcg_eutra_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(dl_carrier_freq_eutra_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_carrier_freq_eutra_r16_present, 1));
  HANDLE_CODE(bref.pack(tx_bw_eutra_r16_present, 1));

  if (dl_carrier_freq_eutra_r16_present) {
    HANDLE_CODE(pack_integer(bref, dl_carrier_freq_eutra_r16, (uint32_t)0u, (uint32_t)262143u));
  }
  if (ul_carrier_freq_eutra_r16_present) {
    HANDLE_CODE(pack_integer(bref, ul_carrier_freq_eutra_r16, (uint32_t)0u, (uint32_t)262143u));
  }
  if (tx_bw_eutra_r16_present) {
    HANDLE_CODE(tx_bw_eutra_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE serv_cell_info_xcg_eutra_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(dl_carrier_freq_eutra_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_carrier_freq_eutra_r16_present, 1));
  HANDLE_CODE(bref.unpack(tx_bw_eutra_r16_present, 1));

  if (dl_carrier_freq_eutra_r16_present) {
    HANDLE_CODE(unpack_integer(dl_carrier_freq_eutra_r16, bref, (uint32_t)0u, (uint32_t)262143u));
  }
  if (ul_carrier_freq_eutra_r16_present) {
    HANDLE_CODE(unpack_integer(ul_carrier_freq_eutra_r16, bref, (uint32_t)0u, (uint32_t)262143u));
  }
  if (tx_bw_eutra_r16_present) {
    HANDLE_CODE(tx_bw_eutra_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void serv_cell_info_xcg_eutra_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dl_carrier_freq_eutra_r16_present) {
    j.write_int("dl-CarrierFreq-EUTRA-r16", dl_carrier_freq_eutra_r16);
  }
  if (ul_carrier_freq_eutra_r16_present) {
    j.write_int("ul-CarrierFreq-EUTRA-r16", ul_carrier_freq_eutra_r16);
  }
  if (tx_bw_eutra_r16_present) {
    j.write_str("transmissionBandwidth-EUTRA-r16", tx_bw_eutra_r16.to_string());
  }
  j.end_obj();
}

// ServCellInfoXCG-NR-r16 ::= SEQUENCE
SRSASN_CODE serv_cell_info_xcg_nr_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(dl_freq_info_nr_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_freq_info_nr_r16_present, 1));

  if (dl_freq_info_nr_r16_present) {
    HANDLE_CODE(dl_freq_info_nr_r16.pack(bref));
  }
  if (ul_freq_info_nr_r16_present) {
    HANDLE_CODE(ul_freq_info_nr_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE serv_cell_info_xcg_nr_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(dl_freq_info_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_freq_info_nr_r16_present, 1));

  if (dl_freq_info_nr_r16_present) {
    HANDLE_CODE(dl_freq_info_nr_r16.unpack(bref));
  }
  if (ul_freq_info_nr_r16_present) {
    HANDLE_CODE(ul_freq_info_nr_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void serv_cell_info_xcg_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dl_freq_info_nr_r16_present) {
    j.write_fieldname("dl-FreqInfo-NR-r16");
    dl_freq_info_nr_r16.to_json(j);
  }
  if (ul_freq_info_nr_r16_present) {
    j.write_fieldname("ul-FreqInfo-NR-r16");
    ul_freq_info_nr_r16.to_json(j);
  }
  j.end_obj();
}

// CG-Config-v1700-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(candidate_cell_info_list_cp_c_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(two_phr_mode_scg_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (candidate_cell_info_list_cp_c_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, candidate_cell_info_list_cp_c_r17, 1, 8));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_v1700_ies_s::unpack(cbit_ref& bref)
{
  bool candidate_cell_info_list_cp_c_r17_present;
  HANDLE_CODE(bref.unpack(candidate_cell_info_list_cp_c_r17_present, 1));
  HANDLE_CODE(bref.unpack(two_phr_mode_scg_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (candidate_cell_info_list_cp_c_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(candidate_cell_info_list_cp_c_r17, bref, 1, 8));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (candidate_cell_info_list_cp_c_r17.size() > 0) {
    j.start_array("candidateCellInfoListCPC-r17");
    for (const auto& e1 : candidate_cell_info_list_cp_c_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (two_phr_mode_scg_r17_present) {
    j.write_str("twoPHRModeSCG-r17", "enabled");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// CG-Config-v1640-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_v1640_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(serv_cell_info_list_scg_nr_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(serv_cell_info_list_scg_eutra_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (serv_cell_info_list_scg_nr_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, serv_cell_info_list_scg_nr_r16, 1, 32));
  }
  if (serv_cell_info_list_scg_eutra_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, serv_cell_info_list_scg_eutra_r16, 1, 32));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_v1640_ies_s::unpack(cbit_ref& bref)
{
  bool serv_cell_info_list_scg_nr_r16_present;
  HANDLE_CODE(bref.unpack(serv_cell_info_list_scg_nr_r16_present, 1));
  bool serv_cell_info_list_scg_eutra_r16_present;
  HANDLE_CODE(bref.unpack(serv_cell_info_list_scg_eutra_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (serv_cell_info_list_scg_nr_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(serv_cell_info_list_scg_nr_r16, bref, 1, 32));
  }
  if (serv_cell_info_list_scg_eutra_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(serv_cell_info_list_scg_eutra_r16, bref, 1, 32));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_v1640_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (serv_cell_info_list_scg_nr_r16.size() > 0) {
    j.start_array("servCellInfoListSCG-NR-r16");
    for (const auto& e1 : serv_cell_info_list_scg_nr_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (serv_cell_info_list_scg_eutra_r16.size() > 0) {
    j.start_array("servCellInfoListSCG-EUTRA-r16");
    for (const auto& e1 : serv_cell_info_list_scg_eutra_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// CG-Config-v1630-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_v1630_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sel_toffset_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (sel_toffset_r16_present) {
    HANDLE_CODE(sel_toffset_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_v1630_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sel_toffset_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (sel_toffset_r16_present) {
    HANDLE_CODE(sel_toffset_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_v1630_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sel_toffset_r16_present) {
    j.write_str("selectedToffset-r16", sel_toffset_r16.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// CG-Config-v1620-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_v1620_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ue_assist_info_scg_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ue_assist_info_scg_r16.size() > 0) {
    HANDLE_CODE(ue_assist_info_scg_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_v1620_ies_s::unpack(cbit_ref& bref)
{
  bool ue_assist_info_scg_r16_present;
  HANDLE_CODE(bref.unpack(ue_assist_info_scg_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ue_assist_info_scg_r16_present) {
    HANDLE_CODE(ue_assist_info_scg_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_v1620_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ue_assist_info_scg_r16.size() > 0) {
    j.write_str("ueAssistanceInformationSCG-r16", ue_assist_info_scg_r16.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// DRX-Info2 ::= SEQUENCE
SRSASN_CODE drx_info2_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(drx_on_dur_timer.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_info2_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(drx_on_dur_timer.unpack(bref));

  return SRSASN_SUCCESS;
}
void drx_info2_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("drx-onDurationTimer");
  drx_on_dur_timer.to_json(j);
  j.end_obj();
}

void drx_info2_s::drx_on_dur_timer_c_::destroy_() {}
void drx_info2_s::drx_on_dur_timer_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
drx_info2_s::drx_on_dur_timer_c_::drx_on_dur_timer_c_(const drx_info2_s::drx_on_dur_timer_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sub_milli_seconds:
      c.init(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.init(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_info2_s::drx_on_dur_timer_c_");
  }
}
drx_info2_s::drx_on_dur_timer_c_&
drx_info2_s::drx_on_dur_timer_c_::operator=(const drx_info2_s::drx_on_dur_timer_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sub_milli_seconds:
      c.set(other.c.get<uint8_t>());
      break;
    case types::milli_seconds:
      c.set(other.c.get<milli_seconds_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_info2_s::drx_on_dur_timer_c_");
  }

  return *this;
}
uint8_t& drx_info2_s::drx_on_dur_timer_c_::set_sub_milli_seconds()
{
  set(types::sub_milli_seconds);
  return c.get<uint8_t>();
}
drx_info2_s::drx_on_dur_timer_c_::milli_seconds_e_& drx_info2_s::drx_on_dur_timer_c_::set_milli_seconds()
{
  set(types::milli_seconds);
  return c.get<milli_seconds_e_>();
}
void drx_info2_s::drx_on_dur_timer_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sub_milli_seconds:
      j.write_int("subMilliSeconds", c.get<uint8_t>());
      break;
    case types::milli_seconds:
      j.write_str("milliSeconds", c.get<milli_seconds_e_>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "drx_info2_s::drx_on_dur_timer_c_");
  }
  j.end_obj();
}
SRSASN_CODE drx_info2_s::drx_on_dur_timer_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drx_info2_s::drx_on_dur_timer_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_info2_s::drx_on_dur_timer_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sub_milli_seconds:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)31u));
      break;
    case types::milli_seconds:
      HANDLE_CODE(c.get<milli_seconds_e_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drx_info2_s::drx_on_dur_timer_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* drx_info2_s::drx_on_dur_timer_c_::milli_seconds_opts::to_string() const
{
  static const char* names[] = {"ms1",    "ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms8",    "ms10",
                                "ms20",   "ms30",   "ms40",   "ms50",   "ms60",   "ms80",   "ms100",  "ms200",
                                "ms300",  "ms400",  "ms500",  "ms600",  "ms800",  "ms1000", "ms1200", "ms1600",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "drx_info2_s::drx_on_dur_timer_c_::milli_seconds_e_");
}
uint16_t drx_info2_s::drx_on_dur_timer_c_::milli_seconds_opts::to_number() const
{
  static const uint16_t numbers[] = {1,  2,  3,   4,   5,   6,   8,   10,  20,  30,   40,   50,
                                     60, 80, 100, 200, 300, 400, 500, 600, 800, 1000, 1200, 1600};
  return map_enum_number(numbers, 24, value, "drx_info2_s::drx_on_dur_timer_c_::milli_seconds_e_");
}

const char* drx_info2_s::drx_on_dur_timer_c_::types_opts::to_string() const
{
  static const char* names[] = {"subMilliSeconds", "milliSeconds"};
  return convert_enum_idx(names, 2, value, "drx_info2_s::drx_on_dur_timer_c_::types");
}

// CG-Config-v1610-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(drx_info_scg2_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (drx_info_scg2_present) {
    HANDLE_CODE(drx_info_scg2.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(drx_info_scg2_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (drx_info_scg2_present) {
    HANDLE_CODE(drx_info_scg2.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (drx_info_scg2_present) {
    j.write_fieldname("drx-InfoSCG2");
    drx_info_scg2.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// PH-UplinkCarrierSCG ::= SEQUENCE
SRSASN_CODE ph_ul_carrier_scg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(ph_type1or3.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ph_ul_carrier_scg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(ph_type1or3.unpack(bref));

  return SRSASN_SUCCESS;
}
void ph_ul_carrier_scg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("ph-Type1or3", ph_type1or3.to_string());
  j.end_obj();
}

const char* ph_ul_carrier_scg_s::ph_type1or3_opts::to_string() const
{
  static const char* names[] = {"type1", "type3"};
  return convert_enum_idx(names, 2, value, "ph_ul_carrier_scg_s::ph_type1or3_e_");
}
uint8_t ph_ul_carrier_scg_s::ph_type1or3_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 3};
  return map_enum_number(numbers, 2, value, "ph_ul_carrier_scg_s::ph_type1or3_e_");
}

// CG-Config-v1590-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_v1590_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(scell_frequencies_sn_nr.size() > 0, 1));
  HANDLE_CODE(bref.pack(scell_frequencies_sn_eutra.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (scell_frequencies_sn_nr.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, scell_frequencies_sn_nr, 1, 31, integer_packer<uint32_t>(0, 3279165)));
  }
  if (scell_frequencies_sn_eutra.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, scell_frequencies_sn_eutra, 1, 31, integer_packer<uint32_t>(0, 262143)));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_v1590_ies_s::unpack(cbit_ref& bref)
{
  bool scell_frequencies_sn_nr_present;
  HANDLE_CODE(bref.unpack(scell_frequencies_sn_nr_present, 1));
  bool scell_frequencies_sn_eutra_present;
  HANDLE_CODE(bref.unpack(scell_frequencies_sn_eutra_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (scell_frequencies_sn_nr_present) {
    HANDLE_CODE(unpack_dyn_seq_of(scell_frequencies_sn_nr, bref, 1, 31, integer_packer<uint32_t>(0, 3279165)));
  }
  if (scell_frequencies_sn_eutra_present) {
    HANDLE_CODE(unpack_dyn_seq_of(scell_frequencies_sn_eutra, bref, 1, 31, integer_packer<uint32_t>(0, 262143)));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_v1590_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (scell_frequencies_sn_nr.size() > 0) {
    j.start_array("scellFrequenciesSN-NR");
    for (const auto& e1 : scell_frequencies_sn_nr) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (scell_frequencies_sn_eutra.size() > 0) {
    j.start_array("scellFrequenciesSN-EUTRA");
    for (const auto& e1 : scell_frequencies_sn_eutra) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// PH-InfoSCG ::= SEQUENCE
SRSASN_CODE ph_info_scg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ph_supplementary_ul_present, 1));

  HANDLE_CODE(pack_integer(bref, serv_cell_idx, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(ph_ul.pack(bref));
  if (ph_supplementary_ul_present) {
    HANDLE_CODE(ph_supplementary_ul.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= two_srs_pusch_repeat_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(two_srs_pusch_repeat_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ph_info_scg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ph_supplementary_ul_present, 1));

  HANDLE_CODE(unpack_integer(serv_cell_idx, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(ph_ul.unpack(bref));
  if (ph_supplementary_ul_present) {
    HANDLE_CODE(ph_supplementary_ul.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(two_srs_pusch_repeat_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void ph_info_scg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("servCellIndex", serv_cell_idx);
  j.write_fieldname("ph-Uplink");
  ph_ul.to_json(j);
  if (ph_supplementary_ul_present) {
    j.write_fieldname("ph-SupplementaryUplink");
    ph_supplementary_ul.to_json(j);
  }
  if (ext) {
    if (two_srs_pusch_repeat_r17_present) {
      j.write_str("twoSRS-PUSCH-Repetition-r17", "enabled");
    }
  }
  j.end_obj();
}

// CG-Config-v1560-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_v1560_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pscell_freq_eutra_present, 1));
  HANDLE_CODE(bref.pack(scg_cell_group_cfg_eutra.size() > 0, 1));
  HANDLE_CODE(bref.pack(candidate_cell_info_list_sn_eutra.size() > 0, 1));
  HANDLE_CODE(bref.pack(candidate_serving_freq_list_eutra.size() > 0, 1));
  HANDLE_CODE(bref.pack(need_for_gaps_present, 1));
  HANDLE_CODE(bref.pack(drx_cfg_scg_present, 1));
  HANDLE_CODE(bref.pack(report_cgi_request_eutra_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (pscell_freq_eutra_present) {
    HANDLE_CODE(pack_integer(bref, pscell_freq_eutra, (uint32_t)0u, (uint32_t)262143u));
  }
  if (scg_cell_group_cfg_eutra.size() > 0) {
    HANDLE_CODE(scg_cell_group_cfg_eutra.pack(bref));
  }
  if (candidate_cell_info_list_sn_eutra.size() > 0) {
    HANDLE_CODE(candidate_cell_info_list_sn_eutra.pack(bref));
  }
  if (candidate_serving_freq_list_eutra.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, candidate_serving_freq_list_eutra, 1, 32, integer_packer<uint32_t>(0, 262143)));
  }
  if (drx_cfg_scg_present) {
    HANDLE_CODE(drx_cfg_scg.pack(bref));
  }
  if (report_cgi_request_eutra_present) {
    HANDLE_CODE(bref.pack(report_cgi_request_eutra.requested_cell_info_eutra_present, 1));
    if (report_cgi_request_eutra.requested_cell_info_eutra_present) {
      HANDLE_CODE(pack_integer(
          bref, report_cgi_request_eutra.requested_cell_info_eutra.eutra_freq, (uint32_t)0u, (uint32_t)262143u));
      HANDLE_CODE(pack_integer(bref,
                               report_cgi_request_eutra.requested_cell_info_eutra.cell_for_which_to_report_cgi_eutra,
                               (uint16_t)0u,
                               (uint16_t)503u));
    }
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_v1560_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pscell_freq_eutra_present, 1));
  bool scg_cell_group_cfg_eutra_present;
  HANDLE_CODE(bref.unpack(scg_cell_group_cfg_eutra_present, 1));
  bool candidate_cell_info_list_sn_eutra_present;
  HANDLE_CODE(bref.unpack(candidate_cell_info_list_sn_eutra_present, 1));
  bool candidate_serving_freq_list_eutra_present;
  HANDLE_CODE(bref.unpack(candidate_serving_freq_list_eutra_present, 1));
  HANDLE_CODE(bref.unpack(need_for_gaps_present, 1));
  HANDLE_CODE(bref.unpack(drx_cfg_scg_present, 1));
  HANDLE_CODE(bref.unpack(report_cgi_request_eutra_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (pscell_freq_eutra_present) {
    HANDLE_CODE(unpack_integer(pscell_freq_eutra, bref, (uint32_t)0u, (uint32_t)262143u));
  }
  if (scg_cell_group_cfg_eutra_present) {
    HANDLE_CODE(scg_cell_group_cfg_eutra.unpack(bref));
  }
  if (candidate_cell_info_list_sn_eutra_present) {
    HANDLE_CODE(candidate_cell_info_list_sn_eutra.unpack(bref));
  }
  if (candidate_serving_freq_list_eutra_present) {
    HANDLE_CODE(unpack_dyn_seq_of(candidate_serving_freq_list_eutra, bref, 1, 32, integer_packer<uint32_t>(0, 262143)));
  }
  if (drx_cfg_scg_present) {
    HANDLE_CODE(drx_cfg_scg.unpack(bref));
  }
  if (report_cgi_request_eutra_present) {
    HANDLE_CODE(bref.unpack(report_cgi_request_eutra.requested_cell_info_eutra_present, 1));
    if (report_cgi_request_eutra.requested_cell_info_eutra_present) {
      HANDLE_CODE(unpack_integer(
          report_cgi_request_eutra.requested_cell_info_eutra.eutra_freq, bref, (uint32_t)0u, (uint32_t)262143u));
      HANDLE_CODE(unpack_integer(report_cgi_request_eutra.requested_cell_info_eutra.cell_for_which_to_report_cgi_eutra,
                                 bref,
                                 (uint16_t)0u,
                                 (uint16_t)503u));
    }
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_v1560_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pscell_freq_eutra_present) {
    j.write_int("pSCellFrequencyEUTRA", pscell_freq_eutra);
  }
  if (scg_cell_group_cfg_eutra.size() > 0) {
    j.write_str("scg-CellGroupConfigEUTRA", scg_cell_group_cfg_eutra.to_string());
  }
  if (candidate_cell_info_list_sn_eutra.size() > 0) {
    j.write_str("candidateCellInfoListSN-EUTRA", candidate_cell_info_list_sn_eutra.to_string());
  }
  if (candidate_serving_freq_list_eutra.size() > 0) {
    j.start_array("candidateServingFreqListEUTRA");
    for (const auto& e1 : candidate_serving_freq_list_eutra) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (need_for_gaps_present) {
    j.write_str("needForGaps", "true");
  }
  if (drx_cfg_scg_present) {
    j.write_fieldname("drx-ConfigSCG");
    drx_cfg_scg.to_json(j);
  }
  if (report_cgi_request_eutra_present) {
    j.write_fieldname("reportCGI-RequestEUTRA");
    j.start_obj();
    if (report_cgi_request_eutra.requested_cell_info_eutra_present) {
      j.write_fieldname("requestedCellInfoEUTRA");
      j.start_obj();
      j.write_int("eutraFrequency", report_cgi_request_eutra.requested_cell_info_eutra.eutra_freq);
      j.write_int("cellForWhichToReportCGI-EUTRA",
                  report_cgi_request_eutra.requested_cell_info_eutra.cell_for_which_to_report_cgi_eutra);
      j.end_obj();
    }
    j.end_obj();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// FR-Info ::= SEQUENCE
SRSASN_CODE fr_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, serv_cell_idx, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(fr_type.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE fr_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(serv_cell_idx, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(fr_type.unpack(bref));

  return SRSASN_SUCCESS;
}
void fr_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("servCellIndex", serv_cell_idx);
  j.write_str("fr-Type", fr_type.to_string());
  j.end_obj();
}

const char* fr_info_s::fr_type_opts::to_string() const
{
  static const char* names[] = {"fr1", "fr2"};
  return convert_enum_idx(names, 2, value, "fr_info_s::fr_type_e_");
}
uint8_t fr_info_s::fr_type_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "fr_info_s::fr_type_e_");
}

// NR-FreqInfo ::= SEQUENCE
SRSASN_CODE nr_freq_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(measured_freq_present, 1));

  if (measured_freq_present) {
    HANDLE_CODE(pack_integer(bref, measured_freq, (uint32_t)0u, (uint32_t)3279165u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE nr_freq_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(measured_freq_present, 1));

  if (measured_freq_present) {
    HANDLE_CODE(unpack_integer(measured_freq, bref, (uint32_t)0u, (uint32_t)3279165u));
  }

  return SRSASN_SUCCESS;
}
void nr_freq_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (measured_freq_present) {
    j.write_int("measuredFrequency", measured_freq);
  }
  j.end_obj();
}

// CG-Config-v1540-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_v1540_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pscell_freq_present, 1));
  HANDLE_CODE(bref.pack(report_cgi_request_nr_present, 1));
  HANDLE_CODE(bref.pack(ph_info_scg.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (pscell_freq_present) {
    HANDLE_CODE(pack_integer(bref, pscell_freq, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (report_cgi_request_nr_present) {
    HANDLE_CODE(bref.pack(report_cgi_request_nr.requested_cell_info_present, 1));
    if (report_cgi_request_nr.requested_cell_info_present) {
      HANDLE_CODE(
          pack_integer(bref, report_cgi_request_nr.requested_cell_info.ssb_freq, (uint32_t)0u, (uint32_t)3279165u));
      HANDLE_CODE(pack_integer(
          bref, report_cgi_request_nr.requested_cell_info.cell_for_which_to_report_cgi, (uint16_t)0u, (uint16_t)1007u));
    }
  }
  if (ph_info_scg.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ph_info_scg, 1, 32));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_v1540_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pscell_freq_present, 1));
  HANDLE_CODE(bref.unpack(report_cgi_request_nr_present, 1));
  bool ph_info_scg_present;
  HANDLE_CODE(bref.unpack(ph_info_scg_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (pscell_freq_present) {
    HANDLE_CODE(unpack_integer(pscell_freq, bref, (uint32_t)0u, (uint32_t)3279165u));
  }
  if (report_cgi_request_nr_present) {
    HANDLE_CODE(bref.unpack(report_cgi_request_nr.requested_cell_info_present, 1));
    if (report_cgi_request_nr.requested_cell_info_present) {
      HANDLE_CODE(
          unpack_integer(report_cgi_request_nr.requested_cell_info.ssb_freq, bref, (uint32_t)0u, (uint32_t)3279165u));
      HANDLE_CODE(unpack_integer(
          report_cgi_request_nr.requested_cell_info.cell_for_which_to_report_cgi, bref, (uint16_t)0u, (uint16_t)1007u));
    }
  }
  if (ph_info_scg_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ph_info_scg, bref, 1, 32));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_v1540_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pscell_freq_present) {
    j.write_int("pSCellFrequency", pscell_freq);
  }
  if (report_cgi_request_nr_present) {
    j.write_fieldname("reportCGI-RequestNR");
    j.start_obj();
    if (report_cgi_request_nr.requested_cell_info_present) {
      j.write_fieldname("requestedCellInfo");
      j.start_obj();
      j.write_int("ssbFrequency", report_cgi_request_nr.requested_cell_info.ssb_freq);
      j.write_int("cellForWhichToReportCGI", report_cgi_request_nr.requested_cell_info.cell_for_which_to_report_cgi);
      j.end_obj();
    }
    j.end_obj();
  }
  if (ph_info_scg.size() > 0) {
    j.start_array("ph-InfoSCG");
    for (const auto& e1 : ph_info_scg) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// ConfigRestrictModReqSCG ::= SEQUENCE
SRSASN_CODE cfg_restrict_mod_req_scg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(requested_bc_mrdc_present, 1));
  HANDLE_CODE(bref.pack(requested_p_max_fr1_present, 1));

  if (requested_bc_mrdc_present) {
    HANDLE_CODE(requested_bc_mrdc.pack(bref));
  }
  if (requested_p_max_fr1_present) {
    HANDLE_CODE(pack_integer(bref, requested_p_max_fr1, (int8_t)-30, (int8_t)33));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= requested_pdcch_blind_detection_scg_present;
    group_flags[0] |= requested_p_max_eutra_present;
    group_flags[1] |= requested_p_max_fr2_r16_present;
    group_flags[1] |= requested_max_inter_freq_meas_id_scg_r16_present;
    group_flags[1] |= requested_max_intra_freq_meas_id_scg_r16_present;
    group_flags[1] |= requested_toffset_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(requested_pdcch_blind_detection_scg_present, 1));
      HANDLE_CODE(bref.pack(requested_p_max_eutra_present, 1));
      if (requested_pdcch_blind_detection_scg_present) {
        HANDLE_CODE(pack_integer(bref, requested_pdcch_blind_detection_scg, (uint8_t)1u, (uint8_t)15u));
      }
      if (requested_p_max_eutra_present) {
        HANDLE_CODE(pack_integer(bref, requested_p_max_eutra, (int8_t)-30, (int8_t)33));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(requested_p_max_fr2_r16_present, 1));
      HANDLE_CODE(bref.pack(requested_max_inter_freq_meas_id_scg_r16_present, 1));
      HANDLE_CODE(bref.pack(requested_max_intra_freq_meas_id_scg_r16_present, 1));
      HANDLE_CODE(bref.pack(requested_toffset_r16_present, 1));
      if (requested_p_max_fr2_r16_present) {
        HANDLE_CODE(pack_integer(bref, requested_p_max_fr2_r16, (int8_t)-30, (int8_t)33));
      }
      if (requested_max_inter_freq_meas_id_scg_r16_present) {
        HANDLE_CODE(pack_integer(bref, requested_max_inter_freq_meas_id_scg_r16, (uint8_t)1u, (uint8_t)62u));
      }
      if (requested_max_intra_freq_meas_id_scg_r16_present) {
        HANDLE_CODE(pack_integer(bref, requested_max_intra_freq_meas_id_scg_r16, (uint8_t)1u, (uint8_t)62u));
      }
      if (requested_toffset_r16_present) {
        HANDLE_CODE(requested_toffset_r16.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cfg_restrict_mod_req_scg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(requested_bc_mrdc_present, 1));
  HANDLE_CODE(bref.unpack(requested_p_max_fr1_present, 1));

  if (requested_bc_mrdc_present) {
    HANDLE_CODE(requested_bc_mrdc.unpack(bref));
  }
  if (requested_p_max_fr1_present) {
    HANDLE_CODE(unpack_integer(requested_p_max_fr1, bref, (int8_t)-30, (int8_t)33));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(requested_pdcch_blind_detection_scg_present, 1));
      HANDLE_CODE(bref.unpack(requested_p_max_eutra_present, 1));
      if (requested_pdcch_blind_detection_scg_present) {
        HANDLE_CODE(unpack_integer(requested_pdcch_blind_detection_scg, bref, (uint8_t)1u, (uint8_t)15u));
      }
      if (requested_p_max_eutra_present) {
        HANDLE_CODE(unpack_integer(requested_p_max_eutra, bref, (int8_t)-30, (int8_t)33));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(requested_p_max_fr2_r16_present, 1));
      HANDLE_CODE(bref.unpack(requested_max_inter_freq_meas_id_scg_r16_present, 1));
      HANDLE_CODE(bref.unpack(requested_max_intra_freq_meas_id_scg_r16_present, 1));
      HANDLE_CODE(bref.unpack(requested_toffset_r16_present, 1));
      if (requested_p_max_fr2_r16_present) {
        HANDLE_CODE(unpack_integer(requested_p_max_fr2_r16, bref, (int8_t)-30, (int8_t)33));
      }
      if (requested_max_inter_freq_meas_id_scg_r16_present) {
        HANDLE_CODE(unpack_integer(requested_max_inter_freq_meas_id_scg_r16, bref, (uint8_t)1u, (uint8_t)62u));
      }
      if (requested_max_intra_freq_meas_id_scg_r16_present) {
        HANDLE_CODE(unpack_integer(requested_max_intra_freq_meas_id_scg_r16, bref, (uint8_t)1u, (uint8_t)62u));
      }
      if (requested_toffset_r16_present) {
        HANDLE_CODE(requested_toffset_r16.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void cfg_restrict_mod_req_scg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (requested_bc_mrdc_present) {
    j.write_fieldname("requestedBC-MRDC");
    requested_bc_mrdc.to_json(j);
  }
  if (requested_p_max_fr1_present) {
    j.write_int("requestedP-MaxFR1", requested_p_max_fr1);
  }
  if (ext) {
    if (requested_pdcch_blind_detection_scg_present) {
      j.write_int("requestedPDCCH-BlindDetectionSCG", requested_pdcch_blind_detection_scg);
    }
    if (requested_p_max_eutra_present) {
      j.write_int("requestedP-MaxEUTRA", requested_p_max_eutra);
    }
    if (requested_p_max_fr2_r16_present) {
      j.write_int("requestedP-MaxFR2-r16", requested_p_max_fr2_r16);
    }
    if (requested_max_inter_freq_meas_id_scg_r16_present) {
      j.write_int("requestedMaxInterFreqMeasIdSCG-r16", requested_max_inter_freq_meas_id_scg_r16);
    }
    if (requested_max_intra_freq_meas_id_scg_r16_present) {
      j.write_int("requestedMaxIntraFreqMeasIdSCG-r16", requested_max_intra_freq_meas_id_scg_r16);
    }
    if (requested_toffset_r16_present) {
      j.write_str("requestedToffset-r16", requested_toffset_r16.to_string());
    }
  }
  j.end_obj();
}

// DRX-Info ::= SEQUENCE
SRSASN_CODE drx_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(short_drx_present, 1));

  HANDLE_CODE(drx_long_cycle_start_offset.pack(bref));
  if (short_drx_present) {
    HANDLE_CODE(short_drx.drx_short_cycle.pack(bref));
    HANDLE_CODE(pack_integer(bref, short_drx.drx_short_cycle_timer, (uint8_t)1u, (uint8_t)16u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(short_drx_present, 1));

  HANDLE_CODE(drx_long_cycle_start_offset.unpack(bref));
  if (short_drx_present) {
    HANDLE_CODE(short_drx.drx_short_cycle.unpack(bref));
    HANDLE_CODE(unpack_integer(short_drx.drx_short_cycle_timer, bref, (uint8_t)1u, (uint8_t)16u));
  }

  return SRSASN_SUCCESS;
}
void drx_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("drx-LongCycleStartOffset");
  drx_long_cycle_start_offset.to_json(j);
  if (short_drx_present) {
    j.write_fieldname("shortDRX");
    j.start_obj();
    j.write_str("drx-ShortCycle", short_drx.drx_short_cycle.to_string());
    j.write_int("drx-ShortCycleTimer", short_drx.drx_short_cycle_timer);
    j.end_obj();
  }
  j.end_obj();
}

void drx_info_s::drx_long_cycle_start_offset_c_::destroy_() {}
void drx_info_s::drx_long_cycle_start_offset_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
drx_info_s::drx_long_cycle_start_offset_c_::drx_long_cycle_start_offset_c_(
    const drx_info_s::drx_long_cycle_start_offset_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ms10:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms32:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms40:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms60:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms64:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms70:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms80:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms128:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms160:
      c.init(other.c.get<uint8_t>());
      break;
    case types::ms256:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms320:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms512:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms640:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms1024:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms1280:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms2048:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms2560:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms5120:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ms10240:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_info_s::drx_long_cycle_start_offset_c_");
  }
}
drx_info_s::drx_long_cycle_start_offset_c_&
drx_info_s::drx_long_cycle_start_offset_c_::operator=(const drx_info_s::drx_long_cycle_start_offset_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ms10:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms20:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms32:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms40:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms60:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms64:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms70:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms80:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms128:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms160:
      c.set(other.c.get<uint8_t>());
      break;
    case types::ms256:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms320:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms512:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms640:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms1024:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms1280:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms2048:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms2560:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms5120:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ms10240:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drx_info_s::drx_long_cycle_start_offset_c_");
  }

  return *this;
}
uint8_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms10()
{
  set(types::ms10);
  return c.get<uint8_t>();
}
uint8_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms20()
{
  set(types::ms20);
  return c.get<uint8_t>();
}
uint8_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms32()
{
  set(types::ms32);
  return c.get<uint8_t>();
}
uint8_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms40()
{
  set(types::ms40);
  return c.get<uint8_t>();
}
uint8_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms60()
{
  set(types::ms60);
  return c.get<uint8_t>();
}
uint8_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms64()
{
  set(types::ms64);
  return c.get<uint8_t>();
}
uint8_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms70()
{
  set(types::ms70);
  return c.get<uint8_t>();
}
uint8_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms80()
{
  set(types::ms80);
  return c.get<uint8_t>();
}
uint8_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms128()
{
  set(types::ms128);
  return c.get<uint8_t>();
}
uint8_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms160()
{
  set(types::ms160);
  return c.get<uint8_t>();
}
uint16_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms256()
{
  set(types::ms256);
  return c.get<uint16_t>();
}
uint16_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms320()
{
  set(types::ms320);
  return c.get<uint16_t>();
}
uint16_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms512()
{
  set(types::ms512);
  return c.get<uint16_t>();
}
uint16_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms640()
{
  set(types::ms640);
  return c.get<uint16_t>();
}
uint16_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms1024()
{
  set(types::ms1024);
  return c.get<uint16_t>();
}
uint16_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms1280()
{
  set(types::ms1280);
  return c.get<uint16_t>();
}
uint16_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms2048()
{
  set(types::ms2048);
  return c.get<uint16_t>();
}
uint16_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms2560()
{
  set(types::ms2560);
  return c.get<uint16_t>();
}
uint16_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms5120()
{
  set(types::ms5120);
  return c.get<uint16_t>();
}
uint16_t& drx_info_s::drx_long_cycle_start_offset_c_::set_ms10240()
{
  set(types::ms10240);
  return c.get<uint16_t>();
}
void drx_info_s::drx_long_cycle_start_offset_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ms10:
      j.write_int("ms10", c.get<uint8_t>());
      break;
    case types::ms20:
      j.write_int("ms20", c.get<uint8_t>());
      break;
    case types::ms32:
      j.write_int("ms32", c.get<uint8_t>());
      break;
    case types::ms40:
      j.write_int("ms40", c.get<uint8_t>());
      break;
    case types::ms60:
      j.write_int("ms60", c.get<uint8_t>());
      break;
    case types::ms64:
      j.write_int("ms64", c.get<uint8_t>());
      break;
    case types::ms70:
      j.write_int("ms70", c.get<uint8_t>());
      break;
    case types::ms80:
      j.write_int("ms80", c.get<uint8_t>());
      break;
    case types::ms128:
      j.write_int("ms128", c.get<uint8_t>());
      break;
    case types::ms160:
      j.write_int("ms160", c.get<uint8_t>());
      break;
    case types::ms256:
      j.write_int("ms256", c.get<uint16_t>());
      break;
    case types::ms320:
      j.write_int("ms320", c.get<uint16_t>());
      break;
    case types::ms512:
      j.write_int("ms512", c.get<uint16_t>());
      break;
    case types::ms640:
      j.write_int("ms640", c.get<uint16_t>());
      break;
    case types::ms1024:
      j.write_int("ms1024", c.get<uint16_t>());
      break;
    case types::ms1280:
      j.write_int("ms1280", c.get<uint16_t>());
      break;
    case types::ms2048:
      j.write_int("ms2048", c.get<uint16_t>());
      break;
    case types::ms2560:
      j.write_int("ms2560", c.get<uint16_t>());
      break;
    case types::ms5120:
      j.write_int("ms5120", c.get<uint16_t>());
      break;
    case types::ms10240:
      j.write_int("ms10240", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "drx_info_s::drx_long_cycle_start_offset_c_");
  }
  j.end_obj();
}
SRSASN_CODE drx_info_s::drx_long_cycle_start_offset_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ms10:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)9u));
      break;
    case types::ms20:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms32:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms40:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms60:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)59u));
      break;
    case types::ms64:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)63u));
      break;
    case types::ms70:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)69u));
      break;
    case types::ms80:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms128:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    case types::ms160:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms256:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u));
      break;
    case types::ms320:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms512:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)511u));
      break;
    case types::ms640:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms1024:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1023u));
      break;
    case types::ms1280:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms2048:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)2047u));
      break;
    case types::ms2560:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)2559u));
      break;
    case types::ms5120:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)5119u));
      break;
    case types::ms10240:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)10239u));
      break;
    default:
      log_invalid_choice_id(type_, "drx_info_s::drx_long_cycle_start_offset_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_info_s::drx_long_cycle_start_offset_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ms10:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)9u));
      break;
    case types::ms20:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)19u));
      break;
    case types::ms32:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)31u));
      break;
    case types::ms40:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)39u));
      break;
    case types::ms60:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)59u));
      break;
    case types::ms64:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)63u));
      break;
    case types::ms70:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)69u));
      break;
    case types::ms80:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u));
      break;
    case types::ms128:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    case types::ms160:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)159u));
      break;
    case types::ms256:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u));
      break;
    case types::ms320:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)319u));
      break;
    case types::ms512:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)511u));
      break;
    case types::ms640:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)639u));
      break;
    case types::ms1024:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1023u));
      break;
    case types::ms1280:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1279u));
      break;
    case types::ms2048:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)2047u));
      break;
    case types::ms2560:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)2559u));
      break;
    case types::ms5120:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)5119u));
      break;
    case types::ms10240:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)10239u));
      break;
    default:
      log_invalid_choice_id(type_, "drx_info_s::drx_long_cycle_start_offset_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* drx_info_s::drx_long_cycle_start_offset_c_::types_opts::to_string() const
{
  static const char* names[] = {"ms10",   "ms20",   "ms32",   "ms40",   "ms60",   "ms64",   "ms70",
                                "ms80",   "ms128",  "ms160",  "ms256",  "ms320",  "ms512",  "ms640",
                                "ms1024", "ms1280", "ms2048", "ms2560", "ms5120", "ms10240"};
  return convert_enum_idx(names, 20, value, "drx_info_s::drx_long_cycle_start_offset_c_::types");
}
uint16_t drx_info_s::drx_long_cycle_start_offset_c_::types_opts::to_number() const
{
  static const uint16_t numbers[] = {10,  20,  32,  40,  60,   64,   70,   80,   128,  160,
                                     256, 320, 512, 640, 1024, 1280, 2048, 2560, 5120, 10240};
  return map_enum_number(numbers, 20, value, "drx_info_s::drx_long_cycle_start_offset_c_::types");
}

const char* drx_info_s::short_drx_s_::drx_short_cycle_opts::to_string() const
{
  static const char* names[] = {"ms2",    "ms3",    "ms4",    "ms5",    "ms6",    "ms7",    "ms8",    "ms10",
                                "ms14",   "ms16",   "ms20",   "ms30",   "ms32",   "ms35",   "ms40",   "ms64",
                                "ms80",   "ms128",  "ms160",  "ms256",  "ms320",  "ms512",  "ms640",  "spare9",
                                "spare8", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 32, value, "drx_info_s::short_drx_s_::drx_short_cycle_e_");
}
uint16_t drx_info_s::short_drx_s_::drx_short_cycle_opts::to_number() const
{
  static const uint16_t numbers[] = {2,  3,  4,  5,  6,  7,   8,   10,  14,  16,  20, 30,
                                     32, 35, 40, 64, 80, 128, 160, 256, 320, 512, 640};
  return map_enum_number(numbers, 23, value, "drx_info_s::short_drx_s_::drx_short_cycle_e_");
}

// MeasConfigSN ::= SEQUENCE
SRSASN_CODE meas_cfg_sn_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(measured_frequencies_sn.size() > 0, 1));

  if (measured_frequencies_sn.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, measured_frequencies_sn, 1, 32));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_cfg_sn_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool measured_frequencies_sn_present;
  HANDLE_CODE(bref.unpack(measured_frequencies_sn_present, 1));

  if (measured_frequencies_sn_present) {
    HANDLE_CODE(unpack_dyn_seq_of(measured_frequencies_sn, bref, 1, 32));
  }

  return SRSASN_SUCCESS;
}
void meas_cfg_sn_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (measured_frequencies_sn.size() > 0) {
    j.start_array("measuredFrequenciesSN");
    for (const auto& e1 : measured_frequencies_sn) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// CG-Config-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(scg_cell_group_cfg.size() > 0, 1));
  HANDLE_CODE(bref.pack(scg_rb_cfg.size() > 0, 1));
  HANDLE_CODE(bref.pack(cfg_restrict_mod_req_present, 1));
  HANDLE_CODE(bref.pack(drx_info_scg_present, 1));
  HANDLE_CODE(bref.pack(candidate_cell_info_list_sn.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_cfg_sn_present, 1));
  HANDLE_CODE(bref.pack(sel_band_combination_present, 1));
  HANDLE_CODE(bref.pack(fr_info_list_scg.size() > 0, 1));
  HANDLE_CODE(bref.pack(candidate_serving_freq_list_nr.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (scg_cell_group_cfg.size() > 0) {
    HANDLE_CODE(scg_cell_group_cfg.pack(bref));
  }
  if (scg_rb_cfg.size() > 0) {
    HANDLE_CODE(scg_rb_cfg.pack(bref));
  }
  if (cfg_restrict_mod_req_present) {
    HANDLE_CODE(cfg_restrict_mod_req.pack(bref));
  }
  if (drx_info_scg_present) {
    HANDLE_CODE(drx_info_scg.pack(bref));
  }
  if (candidate_cell_info_list_sn.size() > 0) {
    HANDLE_CODE(candidate_cell_info_list_sn.pack(bref));
  }
  if (meas_cfg_sn_present) {
    HANDLE_CODE(meas_cfg_sn.pack(bref));
  }
  if (sel_band_combination_present) {
    HANDLE_CODE(sel_band_combination.pack(bref));
  }
  if (fr_info_list_scg.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, fr_info_list_scg, 1, 31));
  }
  if (candidate_serving_freq_list_nr.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, candidate_serving_freq_list_nr, 1, 32, integer_packer<uint32_t>(0, 3279165)));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_ies_s::unpack(cbit_ref& bref)
{
  bool scg_cell_group_cfg_present;
  HANDLE_CODE(bref.unpack(scg_cell_group_cfg_present, 1));
  bool scg_rb_cfg_present;
  HANDLE_CODE(bref.unpack(scg_rb_cfg_present, 1));
  HANDLE_CODE(bref.unpack(cfg_restrict_mod_req_present, 1));
  HANDLE_CODE(bref.unpack(drx_info_scg_present, 1));
  bool candidate_cell_info_list_sn_present;
  HANDLE_CODE(bref.unpack(candidate_cell_info_list_sn_present, 1));
  HANDLE_CODE(bref.unpack(meas_cfg_sn_present, 1));
  HANDLE_CODE(bref.unpack(sel_band_combination_present, 1));
  bool fr_info_list_scg_present;
  HANDLE_CODE(bref.unpack(fr_info_list_scg_present, 1));
  bool candidate_serving_freq_list_nr_present;
  HANDLE_CODE(bref.unpack(candidate_serving_freq_list_nr_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (scg_cell_group_cfg_present) {
    HANDLE_CODE(scg_cell_group_cfg.unpack(bref));
  }
  if (scg_rb_cfg_present) {
    HANDLE_CODE(scg_rb_cfg.unpack(bref));
  }
  if (cfg_restrict_mod_req_present) {
    HANDLE_CODE(cfg_restrict_mod_req.unpack(bref));
  }
  if (drx_info_scg_present) {
    HANDLE_CODE(drx_info_scg.unpack(bref));
  }
  if (candidate_cell_info_list_sn_present) {
    HANDLE_CODE(candidate_cell_info_list_sn.unpack(bref));
  }
  if (meas_cfg_sn_present) {
    HANDLE_CODE(meas_cfg_sn.unpack(bref));
  }
  if (sel_band_combination_present) {
    HANDLE_CODE(sel_band_combination.unpack(bref));
  }
  if (fr_info_list_scg_present) {
    HANDLE_CODE(unpack_dyn_seq_of(fr_info_list_scg, bref, 1, 31));
  }
  if (candidate_serving_freq_list_nr_present) {
    HANDLE_CODE(unpack_dyn_seq_of(candidate_serving_freq_list_nr, bref, 1, 32, integer_packer<uint32_t>(0, 3279165)));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (scg_cell_group_cfg.size() > 0) {
    j.write_str("scg-CellGroupConfig", scg_cell_group_cfg.to_string());
  }
  if (scg_rb_cfg.size() > 0) {
    j.write_str("scg-RB-Config", scg_rb_cfg.to_string());
  }
  if (cfg_restrict_mod_req_present) {
    j.write_fieldname("configRestrictModReq");
    cfg_restrict_mod_req.to_json(j);
  }
  if (drx_info_scg_present) {
    j.write_fieldname("drx-InfoSCG");
    drx_info_scg.to_json(j);
  }
  if (candidate_cell_info_list_sn.size() > 0) {
    j.write_str("candidateCellInfoListSN", candidate_cell_info_list_sn.to_string());
  }
  if (meas_cfg_sn_present) {
    j.write_fieldname("measConfigSN");
    meas_cfg_sn.to_json(j);
  }
  if (sel_band_combination_present) {
    j.write_fieldname("selectedBandCombination");
    sel_band_combination.to_json(j);
  }
  if (fr_info_list_scg.size() > 0) {
    j.start_array("fr-InfoListSCG");
    for (const auto& e1 : fr_info_list_scg) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (candidate_serving_freq_list_nr.size() > 0) {
    j.start_array("candidateServingFreqListNR");
    for (const auto& e1 : candidate_serving_freq_list_nr) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// CG-Config ::= SEQUENCE
SRSASN_CODE cg_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void cg_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void cg_cfg_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
cg_cfg_s::crit_exts_c_::c1_c_& cg_cfg_s::crit_exts_c_::set_c1()
{
  set(types::c1);
  return c;
}
void cg_cfg_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void cg_cfg_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "cg_cfg_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE cg_cfg_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "cg_cfg_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "cg_cfg_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void cg_cfg_s::crit_exts_c_::c1_c_::set(types::options e)
{
  type_ = e;
}
cg_cfg_ies_s& cg_cfg_s::crit_exts_c_::c1_c_::set_cg_cfg()
{
  set(types::cg_cfg);
  return c;
}
void cg_cfg_s::crit_exts_c_::c1_c_::set_spare3()
{
  set(types::spare3);
}
void cg_cfg_s::crit_exts_c_::c1_c_::set_spare2()
{
  set(types::spare2);
}
void cg_cfg_s::crit_exts_c_::c1_c_::set_spare1()
{
  set(types::spare1);
}
void cg_cfg_s::crit_exts_c_::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cg_cfg:
      j.write_fieldname("cg-Config");
      c.to_json(j);
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "cg_cfg_s::crit_exts_c_::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE cg_cfg_s::crit_exts_c_::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cg_cfg:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "cg_cfg_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_s::crit_exts_c_::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cg_cfg:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "cg_cfg_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cg_cfg_s::crit_exts_c_::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"cg-Config", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "cg_cfg_s::crit_exts_c_::c1_c_::types");
}

const char* cg_cfg_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"c1", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "cg_cfg_s::crit_exts_c_::types");
}
uint8_t cg_cfg_s::crit_exts_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "cg_cfg_s::crit_exts_c_::types");
}

// CandidateCellCPC-r17 ::= SEQUENCE
SRSASN_CODE candidate_cell_cp_c_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, ssb_freq_r17, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(pack_dyn_seq_of(bref, candidate_cell_list_r17, 1, 8, integer_packer<uint16_t>(0, 1007)));

  return SRSASN_SUCCESS;
}
SRSASN_CODE candidate_cell_cp_c_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(ssb_freq_r17, bref, (uint32_t)0u, (uint32_t)3279165u));
  HANDLE_CODE(unpack_dyn_seq_of(candidate_cell_list_r17, bref, 1, 8, integer_packer<uint16_t>(0, 1007)));

  return SRSASN_SUCCESS;
}
void candidate_cell_cp_c_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("ssbFrequency-r17", ssb_freq_r17);
  j.start_array("candidateCellList-r17");
  for (const auto& e1 : candidate_cell_list_r17) {
    j.write_int(e1);
  }
  j.end_array();
  j.end_obj();
}

// CG-ConfigInfo-v1730-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_info_v1730_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fr1_carriers_mcg_r17_present, 1));
  HANDLE_CODE(bref.pack(fr2_carriers_mcg_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (fr1_carriers_mcg_r17_present) {
    HANDLE_CODE(pack_integer(bref, fr1_carriers_mcg_r17, (uint8_t)1u, (uint8_t)32u));
  }
  if (fr2_carriers_mcg_r17_present) {
    HANDLE_CODE(pack_integer(bref, fr2_carriers_mcg_r17, (uint8_t)1u, (uint8_t)32u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_info_v1730_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(fr1_carriers_mcg_r17_present, 1));
  HANDLE_CODE(bref.unpack(fr2_carriers_mcg_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (fr1_carriers_mcg_r17_present) {
    HANDLE_CODE(unpack_integer(fr1_carriers_mcg_r17, bref, (uint8_t)1u, (uint8_t)32u));
  }
  if (fr2_carriers_mcg_r17_present) {
    HANDLE_CODE(unpack_integer(fr2_carriers_mcg_r17, bref, (uint8_t)1u, (uint8_t)32u));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_info_v1730_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (fr1_carriers_mcg_r17_present) {
    j.write_int("fr1-Carriers-MCG-r17", fr1_carriers_mcg_r17);
  }
  if (fr2_carriers_mcg_r17_present) {
    j.write_int("fr2-Carriers-MCG-r17", fr2_carriers_mcg_r17);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// CG-ConfigInfo-v1700-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_info_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(candidate_cell_list_cp_c_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(two_phr_mode_mcg_r17_present, 1));
  HANDLE_CODE(bref.pack(low_mob_eval_connected_in_pcell_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (candidate_cell_list_cp_c_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, candidate_cell_list_cp_c_r17, 1, 8));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_info_v1700_ies_s::unpack(cbit_ref& bref)
{
  bool candidate_cell_list_cp_c_r17_present;
  HANDLE_CODE(bref.unpack(candidate_cell_list_cp_c_r17_present, 1));
  HANDLE_CODE(bref.unpack(two_phr_mode_mcg_r17_present, 1));
  HANDLE_CODE(bref.unpack(low_mob_eval_connected_in_pcell_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (candidate_cell_list_cp_c_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(candidate_cell_list_cp_c_r17, bref, 1, 8));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_info_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (candidate_cell_list_cp_c_r17.size() > 0) {
    j.start_array("candidateCellListCPC-r17");
    for (const auto& e1 : candidate_cell_list_cp_c_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (two_phr_mode_mcg_r17_present) {
    j.write_str("twoPHRModeMCG-r17", "enabled");
  }
  if (low_mob_eval_connected_in_pcell_r17_present) {
    j.write_str("lowMobilityEvaluationConnectedInPCell-r17", "enabled");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// CG-ConfigInfo-v1640-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_info_v1640_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(serv_cell_info_list_mcg_nr_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(serv_cell_info_list_mcg_eutra_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (serv_cell_info_list_mcg_nr_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, serv_cell_info_list_mcg_nr_r16, 1, 32));
  }
  if (serv_cell_info_list_mcg_eutra_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, serv_cell_info_list_mcg_eutra_r16, 1, 32));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_info_v1640_ies_s::unpack(cbit_ref& bref)
{
  bool serv_cell_info_list_mcg_nr_r16_present;
  HANDLE_CODE(bref.unpack(serv_cell_info_list_mcg_nr_r16_present, 1));
  bool serv_cell_info_list_mcg_eutra_r16_present;
  HANDLE_CODE(bref.unpack(serv_cell_info_list_mcg_eutra_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (serv_cell_info_list_mcg_nr_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(serv_cell_info_list_mcg_nr_r16, bref, 1, 32));
  }
  if (serv_cell_info_list_mcg_eutra_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(serv_cell_info_list_mcg_eutra_r16, bref, 1, 32));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_info_v1640_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (serv_cell_info_list_mcg_nr_r16.size() > 0) {
    j.start_array("servCellInfoListMCG-NR-r16");
    for (const auto& e1 : serv_cell_info_list_mcg_nr_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (serv_cell_info_list_mcg_eutra_r16.size() > 0) {
    j.start_array("servCellInfoListMCG-EUTRA-r16");
    for (const auto& e1 : serv_cell_info_list_mcg_eutra_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// CG-ConfigInfo-v1620-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_info_v1620_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ue_assist_info_source_scg_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ue_assist_info_source_scg_r16.size() > 0) {
    HANDLE_CODE(ue_assist_info_source_scg_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_info_v1620_ies_s::unpack(cbit_ref& bref)
{
  bool ue_assist_info_source_scg_r16_present;
  HANDLE_CODE(bref.unpack(ue_assist_info_source_scg_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ue_assist_info_source_scg_r16_present) {
    HANDLE_CODE(ue_assist_info_source_scg_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_info_v1620_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ue_assist_info_source_scg_r16.size() > 0) {
    j.write_str("ueAssistanceInformationSourceSCG-r16", ue_assist_info_source_scg_r16.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// CG-ConfigInfo-v1610-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_info_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(drx_info_mcg2_present, 1));
  HANDLE_CODE(bref.pack(aligned_drx_ind_present, 1));
  HANDLE_CODE(bref.pack(scg_fail_info_r16_present, 1));
  HANDLE_CODE(bref.pack(dummy1_present, 1));
  HANDLE_CODE(bref.pack(sidelink_ue_info_nr_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sidelink_ue_info_eutra_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (drx_info_mcg2_present) {
    HANDLE_CODE(drx_info_mcg2.pack(bref));
  }
  if (scg_fail_info_r16_present) {
    HANDLE_CODE(scg_fail_info_r16.fail_type_r16.pack(bref));
    HANDLE_CODE(scg_fail_info_r16.meas_result_scg_r16.pack(bref));
  }
  if (dummy1_present) {
    HANDLE_CODE(dummy1.fail_type_eutra_r16.pack(bref));
    HANDLE_CODE(dummy1.meas_result_scg_eutra_r16.pack(bref));
  }
  if (sidelink_ue_info_nr_r16.size() > 0) {
    HANDLE_CODE(sidelink_ue_info_nr_r16.pack(bref));
  }
  if (sidelink_ue_info_eutra_r16.size() > 0) {
    HANDLE_CODE(sidelink_ue_info_eutra_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_info_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(drx_info_mcg2_present, 1));
  HANDLE_CODE(bref.unpack(aligned_drx_ind_present, 1));
  HANDLE_CODE(bref.unpack(scg_fail_info_r16_present, 1));
  HANDLE_CODE(bref.unpack(dummy1_present, 1));
  bool sidelink_ue_info_nr_r16_present;
  HANDLE_CODE(bref.unpack(sidelink_ue_info_nr_r16_present, 1));
  bool sidelink_ue_info_eutra_r16_present;
  HANDLE_CODE(bref.unpack(sidelink_ue_info_eutra_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (drx_info_mcg2_present) {
    HANDLE_CODE(drx_info_mcg2.unpack(bref));
  }
  if (scg_fail_info_r16_present) {
    HANDLE_CODE(scg_fail_info_r16.fail_type_r16.unpack(bref));
    HANDLE_CODE(scg_fail_info_r16.meas_result_scg_r16.unpack(bref));
  }
  if (dummy1_present) {
    HANDLE_CODE(dummy1.fail_type_eutra_r16.unpack(bref));
    HANDLE_CODE(dummy1.meas_result_scg_eutra_r16.unpack(bref));
  }
  if (sidelink_ue_info_nr_r16_present) {
    HANDLE_CODE(sidelink_ue_info_nr_r16.unpack(bref));
  }
  if (sidelink_ue_info_eutra_r16_present) {
    HANDLE_CODE(sidelink_ue_info_eutra_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_info_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (drx_info_mcg2_present) {
    j.write_fieldname("drx-InfoMCG2");
    drx_info_mcg2.to_json(j);
  }
  if (aligned_drx_ind_present) {
    j.write_str("alignedDRX-Indication", "true");
  }
  if (scg_fail_info_r16_present) {
    j.write_fieldname("scgFailureInfo-r16");
    j.start_obj();
    j.write_str("failureType-r16", scg_fail_info_r16.fail_type_r16.to_string());
    j.write_str("measResultSCG-r16", scg_fail_info_r16.meas_result_scg_r16.to_string());
    j.end_obj();
  }
  if (dummy1_present) {
    j.write_fieldname("dummy1");
    j.start_obj();
    j.write_str("failureTypeEUTRA-r16", dummy1.fail_type_eutra_r16.to_string());
    j.write_str("measResultSCG-EUTRA-r16", dummy1.meas_result_scg_eutra_r16.to_string());
    j.end_obj();
  }
  if (sidelink_ue_info_nr_r16.size() > 0) {
    j.write_str("sidelinkUEInformationNR-r16", sidelink_ue_info_nr_r16.to_string());
  }
  if (sidelink_ue_info_eutra_r16.size() > 0) {
    j.write_str("sidelinkUEInformationEUTRA-r16", sidelink_ue_info_eutra_r16.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

const char* cg_cfg_info_v1610_ies_s::scg_fail_info_r16_s_::fail_type_r16_opts::to_string() const
{
  static const char* names[] = {"scg-lbtFailure-r16",
                                "beamFailureRecoveryFailure-r16",
                                "t312-Expiry-r16",
                                "bh-RLF-r16",
                                "beamFailure-r17",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 8, value, "cg_cfg_info_v1610_ies_s::scg_fail_info_r16_s_::fail_type_r16_e_");
}
uint16_t cg_cfg_info_v1610_ies_s::scg_fail_info_r16_s_::fail_type_r16_opts::to_number() const
{
  if (value == t312_expiry_r16) {
    return 312;
  }
  invalid_enum_number(value, "cg_cfg_info_v1610_ies_s::scg_fail_info_r16_s_::fail_type_r16_e_");
  return 0;
}

const char* cg_cfg_info_v1610_ies_s::dummy1_s_::fail_type_eutra_r16_opts::to_string() const
{
  static const char* names[] = {"scg-lbtFailure-r16",
                                "beamFailureRecoveryFailure-r16",
                                "t312-Expiry-r16",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 8, value, "cg_cfg_info_v1610_ies_s::dummy1_s_::fail_type_eutra_r16_e_");
}
uint16_t cg_cfg_info_v1610_ies_s::dummy1_s_::fail_type_eutra_r16_opts::to_number() const
{
  if (value == t312_expiry_r16) {
    return 312;
  }
  invalid_enum_number(value, "cg_cfg_info_v1610_ies_s::dummy1_s_::fail_type_eutra_r16_e_");
  return 0;
}

// CG-ConfigInfo-v1590-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_info_v1590_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(serv_frequencies_mn_nr.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (serv_frequencies_mn_nr.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, serv_frequencies_mn_nr, 1, 31, integer_packer<uint32_t>(0, 3279165)));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_info_v1590_ies_s::unpack(cbit_ref& bref)
{
  bool serv_frequencies_mn_nr_present;
  HANDLE_CODE(bref.unpack(serv_frequencies_mn_nr_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (serv_frequencies_mn_nr_present) {
    HANDLE_CODE(unpack_dyn_seq_of(serv_frequencies_mn_nr, bref, 1, 31, integer_packer<uint32_t>(0, 3279165)));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_info_v1590_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (serv_frequencies_mn_nr.size() > 0) {
    j.start_array("servFrequenciesMN-NR");
    for (const auto& e1 : serv_frequencies_mn_nr) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// PH-UplinkCarrierMCG ::= SEQUENCE
SRSASN_CODE ph_ul_carrier_mcg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(ph_type1or3.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ph_ul_carrier_mcg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(ph_type1or3.unpack(bref));

  return SRSASN_SUCCESS;
}
void ph_ul_carrier_mcg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("ph-Type1or3", ph_type1or3.to_string());
  j.end_obj();
}

const char* ph_ul_carrier_mcg_s::ph_type1or3_opts::to_string() const
{
  static const char* names[] = {"type1", "type3"};
  return convert_enum_idx(names, 2, value, "ph_ul_carrier_mcg_s::ph_type1or3_e_");
}
uint8_t ph_ul_carrier_mcg_s::ph_type1or3_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 3};
  return map_enum_number(numbers, 2, value, "ph_ul_carrier_mcg_s::ph_type1or3_e_");
}

// CG-ConfigInfo-v1570-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_info_v1570_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sftd_freq_list_nr.size() > 0, 1));
  HANDLE_CODE(bref.pack(sftd_freq_list_eutra.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (sftd_freq_list_nr.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sftd_freq_list_nr, 1, 3, integer_packer<uint32_t>(0, 3279165)));
  }
  if (sftd_freq_list_eutra.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sftd_freq_list_eutra, 1, 3, integer_packer<uint32_t>(0, 262143)));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_info_v1570_ies_s::unpack(cbit_ref& bref)
{
  bool sftd_freq_list_nr_present;
  HANDLE_CODE(bref.unpack(sftd_freq_list_nr_present, 1));
  bool sftd_freq_list_eutra_present;
  HANDLE_CODE(bref.unpack(sftd_freq_list_eutra_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (sftd_freq_list_nr_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sftd_freq_list_nr, bref, 1, 3, integer_packer<uint32_t>(0, 3279165)));
  }
  if (sftd_freq_list_eutra_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sftd_freq_list_eutra, bref, 1, 3, integer_packer<uint32_t>(0, 262143)));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_info_v1570_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sftd_freq_list_nr.size() > 0) {
    j.start_array("sftdFrequencyList-NR");
    for (const auto& e1 : sftd_freq_list_nr) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sftd_freq_list_eutra.size() > 0) {
    j.start_array("sftdFrequencyList-EUTRA");
    for (const auto& e1 : sftd_freq_list_eutra) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// PH-InfoMCG ::= SEQUENCE
SRSASN_CODE ph_info_mcg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ph_supplementary_ul_present, 1));

  HANDLE_CODE(pack_integer(bref, serv_cell_idx, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(ph_ul.pack(bref));
  if (ph_supplementary_ul_present) {
    HANDLE_CODE(ph_supplementary_ul.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= two_srs_pusch_repeat_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(two_srs_pusch_repeat_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ph_info_mcg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ph_supplementary_ul_present, 1));

  HANDLE_CODE(unpack_integer(serv_cell_idx, bref, (uint8_t)0u, (uint8_t)31u));
  HANDLE_CODE(ph_ul.unpack(bref));
  if (ph_supplementary_ul_present) {
    HANDLE_CODE(ph_supplementary_ul.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(two_srs_pusch_repeat_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void ph_info_mcg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("servCellIndex", serv_cell_idx);
  j.write_fieldname("ph-Uplink");
  ph_ul.to_json(j);
  if (ph_supplementary_ul_present) {
    j.write_fieldname("ph-SupplementaryUplink");
    ph_supplementary_ul.to_json(j);
  }
  if (ext) {
    if (two_srs_pusch_repeat_r17_present) {
      j.write_str("twoSRS-PUSCH-Repetition-r17", "enabled");
    }
  }
  j.end_obj();
}

// CG-ConfigInfo-v1560-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_info_v1560_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(candidate_cell_info_list_mn_eutra.size() > 0, 1));
  HANDLE_CODE(bref.pack(candidate_cell_info_list_sn_eutra.size() > 0, 1));
  HANDLE_CODE(bref.pack(source_cfg_scg_eutra.size() > 0, 1));
  HANDLE_CODE(bref.pack(scg_fail_info_eutra_present, 1));
  HANDLE_CODE(bref.pack(drx_cfg_mcg_present, 1));
  HANDLE_CODE(bref.pack(meas_result_report_cgi_eutra_present, 1));
  HANDLE_CODE(bref.pack(meas_result_cell_list_sftd_eutra.size() > 0, 1));
  HANDLE_CODE(bref.pack(fr_info_list_mcg.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (candidate_cell_info_list_mn_eutra.size() > 0) {
    HANDLE_CODE(candidate_cell_info_list_mn_eutra.pack(bref));
  }
  if (candidate_cell_info_list_sn_eutra.size() > 0) {
    HANDLE_CODE(candidate_cell_info_list_sn_eutra.pack(bref));
  }
  if (source_cfg_scg_eutra.size() > 0) {
    HANDLE_CODE(source_cfg_scg_eutra.pack(bref));
  }
  if (scg_fail_info_eutra_present) {
    HANDLE_CODE(scg_fail_info_eutra.fail_type_eutra.pack(bref));
    HANDLE_CODE(scg_fail_info_eutra.meas_result_scg_eutra.pack(bref));
  }
  if (drx_cfg_mcg_present) {
    HANDLE_CODE(drx_cfg_mcg.pack(bref));
  }
  if (meas_result_report_cgi_eutra_present) {
    HANDLE_CODE(pack_integer(bref, meas_result_report_cgi_eutra.eutra_freq, (uint32_t)0u, (uint32_t)262143u));
    HANDLE_CODE(pack_integer(
        bref, meas_result_report_cgi_eutra.cell_for_which_to_report_cgi_eutra, (uint16_t)0u, (uint16_t)503u));
    HANDLE_CODE(meas_result_report_cgi_eutra.cgi_info_eutra.pack(bref));
  }
  if (meas_result_cell_list_sftd_eutra.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_cell_list_sftd_eutra, 1, 3));
  }
  if (fr_info_list_mcg.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, fr_info_list_mcg, 1, 31));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_info_v1560_ies_s::unpack(cbit_ref& bref)
{
  bool candidate_cell_info_list_mn_eutra_present;
  HANDLE_CODE(bref.unpack(candidate_cell_info_list_mn_eutra_present, 1));
  bool candidate_cell_info_list_sn_eutra_present;
  HANDLE_CODE(bref.unpack(candidate_cell_info_list_sn_eutra_present, 1));
  bool source_cfg_scg_eutra_present;
  HANDLE_CODE(bref.unpack(source_cfg_scg_eutra_present, 1));
  HANDLE_CODE(bref.unpack(scg_fail_info_eutra_present, 1));
  HANDLE_CODE(bref.unpack(drx_cfg_mcg_present, 1));
  HANDLE_CODE(bref.unpack(meas_result_report_cgi_eutra_present, 1));
  bool meas_result_cell_list_sftd_eutra_present;
  HANDLE_CODE(bref.unpack(meas_result_cell_list_sftd_eutra_present, 1));
  bool fr_info_list_mcg_present;
  HANDLE_CODE(bref.unpack(fr_info_list_mcg_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (candidate_cell_info_list_mn_eutra_present) {
    HANDLE_CODE(candidate_cell_info_list_mn_eutra.unpack(bref));
  }
  if (candidate_cell_info_list_sn_eutra_present) {
    HANDLE_CODE(candidate_cell_info_list_sn_eutra.unpack(bref));
  }
  if (source_cfg_scg_eutra_present) {
    HANDLE_CODE(source_cfg_scg_eutra.unpack(bref));
  }
  if (scg_fail_info_eutra_present) {
    HANDLE_CODE(scg_fail_info_eutra.fail_type_eutra.unpack(bref));
    HANDLE_CODE(scg_fail_info_eutra.meas_result_scg_eutra.unpack(bref));
  }
  if (drx_cfg_mcg_present) {
    HANDLE_CODE(drx_cfg_mcg.unpack(bref));
  }
  if (meas_result_report_cgi_eutra_present) {
    HANDLE_CODE(unpack_integer(meas_result_report_cgi_eutra.eutra_freq, bref, (uint32_t)0u, (uint32_t)262143u));
    HANDLE_CODE(unpack_integer(
        meas_result_report_cgi_eutra.cell_for_which_to_report_cgi_eutra, bref, (uint16_t)0u, (uint16_t)503u));
    HANDLE_CODE(meas_result_report_cgi_eutra.cgi_info_eutra.unpack(bref));
  }
  if (meas_result_cell_list_sftd_eutra_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_cell_list_sftd_eutra, bref, 1, 3));
  }
  if (fr_info_list_mcg_present) {
    HANDLE_CODE(unpack_dyn_seq_of(fr_info_list_mcg, bref, 1, 31));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_info_v1560_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (candidate_cell_info_list_mn_eutra.size() > 0) {
    j.write_str("candidateCellInfoListMN-EUTRA", candidate_cell_info_list_mn_eutra.to_string());
  }
  if (candidate_cell_info_list_sn_eutra.size() > 0) {
    j.write_str("candidateCellInfoListSN-EUTRA", candidate_cell_info_list_sn_eutra.to_string());
  }
  if (source_cfg_scg_eutra.size() > 0) {
    j.write_str("sourceConfigSCG-EUTRA", source_cfg_scg_eutra.to_string());
  }
  if (scg_fail_info_eutra_present) {
    j.write_fieldname("scgFailureInfoEUTRA");
    j.start_obj();
    j.write_str("failureTypeEUTRA", scg_fail_info_eutra.fail_type_eutra.to_string());
    j.write_str("measResultSCG-EUTRA", scg_fail_info_eutra.meas_result_scg_eutra.to_string());
    j.end_obj();
  }
  if (drx_cfg_mcg_present) {
    j.write_fieldname("drx-ConfigMCG");
    drx_cfg_mcg.to_json(j);
  }
  if (meas_result_report_cgi_eutra_present) {
    j.write_fieldname("measResultReportCGI-EUTRA");
    j.start_obj();
    j.write_int("eutraFrequency", meas_result_report_cgi_eutra.eutra_freq);
    j.write_int("cellForWhichToReportCGI-EUTRA", meas_result_report_cgi_eutra.cell_for_which_to_report_cgi_eutra);
    j.write_fieldname("cgi-InfoEUTRA");
    meas_result_report_cgi_eutra.cgi_info_eutra.to_json(j);
    j.end_obj();
  }
  if (meas_result_cell_list_sftd_eutra.size() > 0) {
    j.start_array("measResultCellListSFTD-EUTRA");
    for (const auto& e1 : meas_result_cell_list_sftd_eutra) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (fr_info_list_mcg.size() > 0) {
    j.start_array("fr-InfoListMCG");
    for (const auto& e1 : fr_info_list_mcg) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

const char* cg_cfg_info_v1560_ies_s::scg_fail_info_eutra_s_::fail_type_eutra_opts::to_string() const
{
  static const char* names[] = {"t313-Expiry", "randomAccessProblem", "rlc-MaxNumRetx", "scg-ChangeFailure"};
  return convert_enum_idx(names, 4, value, "cg_cfg_info_v1560_ies_s::scg_fail_info_eutra_s_::fail_type_eutra_e_");
}
uint16_t cg_cfg_info_v1560_ies_s::scg_fail_info_eutra_s_::fail_type_eutra_opts::to_number() const
{
  static const uint16_t numbers[] = {313};
  return map_enum_number(numbers, 1, value, "cg_cfg_info_v1560_ies_s::scg_fail_info_eutra_s_::fail_type_eutra_e_");
}

// CG-ConfigInfo-v1540-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_info_v1540_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ph_info_mcg.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_result_report_cgi_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ph_info_mcg.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ph_info_mcg, 1, 32));
  }
  if (meas_result_report_cgi_present) {
    HANDLE_CODE(pack_integer(bref, meas_result_report_cgi.ssb_freq, (uint32_t)0u, (uint32_t)3279165u));
    HANDLE_CODE(pack_integer(bref, meas_result_report_cgi.cell_for_which_to_report_cgi, (uint16_t)0u, (uint16_t)1007u));
    HANDLE_CODE(meas_result_report_cgi.cgi_info.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_info_v1540_ies_s::unpack(cbit_ref& bref)
{
  bool ph_info_mcg_present;
  HANDLE_CODE(bref.unpack(ph_info_mcg_present, 1));
  HANDLE_CODE(bref.unpack(meas_result_report_cgi_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ph_info_mcg_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ph_info_mcg, bref, 1, 32));
  }
  if (meas_result_report_cgi_present) {
    HANDLE_CODE(unpack_integer(meas_result_report_cgi.ssb_freq, bref, (uint32_t)0u, (uint32_t)3279165u));
    HANDLE_CODE(
        unpack_integer(meas_result_report_cgi.cell_for_which_to_report_cgi, bref, (uint16_t)0u, (uint16_t)1007u));
    HANDLE_CODE(meas_result_report_cgi.cgi_info.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_info_v1540_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ph_info_mcg.size() > 0) {
    j.start_array("ph-InfoMCG");
    for (const auto& e1 : ph_info_mcg) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_result_report_cgi_present) {
    j.write_fieldname("measResultReportCGI");
    j.start_obj();
    j.write_int("ssbFrequency", meas_result_report_cgi.ssb_freq);
    j.write_int("cellForWhichToReportCGI", meas_result_report_cgi.cell_for_which_to_report_cgi);
    j.write_fieldname("cgi-Info");
    meas_result_report_cgi.cgi_info.to_json(j);
    j.end_obj();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// MRDC-AssistanceInfo ::= SEQUENCE
SRSASN_CODE mrdc_assist_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_dyn_seq_of(bref, affected_carrier_freq_comb_info_list_mrdc, 1, 128));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= overheat_assist_scg_r16.size() > 0;
    group_flags[1] |= overheat_assist_scg_fr2_2_r17.size() > 0;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(overheat_assist_scg_r16.size() > 0, 1));
      if (overheat_assist_scg_r16.size() > 0) {
        HANDLE_CODE(overheat_assist_scg_r16.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(overheat_assist_scg_fr2_2_r17.size() > 0, 1));
      if (overheat_assist_scg_fr2_2_r17.size() > 0) {
        HANDLE_CODE(overheat_assist_scg_fr2_2_r17.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mrdc_assist_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_dyn_seq_of(affected_carrier_freq_comb_info_list_mrdc, bref, 1, 128));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      bool overheat_assist_scg_r16_present;
      HANDLE_CODE(bref.unpack(overheat_assist_scg_r16_present, 1));
      if (overheat_assist_scg_r16_present) {
        HANDLE_CODE(overheat_assist_scg_r16.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      bool overheat_assist_scg_fr2_2_r17_present;
      HANDLE_CODE(bref.unpack(overheat_assist_scg_fr2_2_r17_present, 1));
      if (overheat_assist_scg_fr2_2_r17_present) {
        HANDLE_CODE(overheat_assist_scg_fr2_2_r17.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void mrdc_assist_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("affectedCarrierFreqCombInfoListMRDC");
  for (const auto& e1 : affected_carrier_freq_comb_info_list_mrdc) {
    e1.to_json(j);
  }
  j.end_array();
  if (ext) {
    if (overheat_assist_scg_r16.size() > 0) {
      j.write_str("overheatingAssistanceSCG-r16", overheat_assist_scg_r16.to_string());
    }
    if (overheat_assist_scg_fr2_2_r17.size() > 0) {
      j.write_str("overheatingAssistanceSCG-FR2-2-r17", overheat_assist_scg_fr2_2_r17.to_string());
    }
  }
  j.end_obj();
}

// MeasConfigMN ::= SEQUENCE
SRSASN_CODE meas_cfg_mn_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(measured_frequencies_mn.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_gap_cfg_present, 1));
  HANDLE_CODE(bref.pack(gap_purpose_present, 1));

  if (measured_frequencies_mn.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, measured_frequencies_mn, 1, 32));
  }
  if (meas_gap_cfg_present) {
    HANDLE_CODE(meas_gap_cfg.pack(bref));
  }
  if (gap_purpose_present) {
    HANDLE_CODE(gap_purpose.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= meas_gap_cfg_fr2.is_present();
    group_flags[1] |= inter_freq_no_gap_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(meas_gap_cfg_fr2.is_present(), 1));
      if (meas_gap_cfg_fr2.is_present()) {
        HANDLE_CODE(meas_gap_cfg_fr2->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(inter_freq_no_gap_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_cfg_mn_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool measured_frequencies_mn_present;
  HANDLE_CODE(bref.unpack(measured_frequencies_mn_present, 1));
  HANDLE_CODE(bref.unpack(meas_gap_cfg_present, 1));
  HANDLE_CODE(bref.unpack(gap_purpose_present, 1));

  if (measured_frequencies_mn_present) {
    HANDLE_CODE(unpack_dyn_seq_of(measured_frequencies_mn, bref, 1, 32));
  }
  if (meas_gap_cfg_present) {
    HANDLE_CODE(meas_gap_cfg.unpack(bref));
  }
  if (gap_purpose_present) {
    HANDLE_CODE(gap_purpose.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(meas_gap_cfg_fr2, bref);
      if (meas_gap_cfg_fr2.is_present()) {
        HANDLE_CODE(meas_gap_cfg_fr2->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(inter_freq_no_gap_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void meas_cfg_mn_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (measured_frequencies_mn.size() > 0) {
    j.start_array("measuredFrequenciesMN");
    for (const auto& e1 : measured_frequencies_mn) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_gap_cfg_present) {
    j.write_fieldname("measGapConfig");
    meas_gap_cfg.to_json(j);
  }
  if (gap_purpose_present) {
    j.write_str("gapPurpose", gap_purpose.to_string());
  }
  if (ext) {
    if (meas_gap_cfg_fr2.is_present()) {
      j.write_fieldname("measGapConfigFR2");
      meas_gap_cfg_fr2->to_json(j);
    }
    if (inter_freq_no_gap_r16_present) {
      j.write_str("interFreqNoGap-r16", "true");
    }
  }
  j.end_obj();
}

const char* meas_cfg_mn_s::gap_purpose_opts::to_string() const
{
  static const char* names[] = {"perUE", "perFR1"};
  return convert_enum_idx(names, 2, value, "meas_cfg_mn_s::gap_purpose_e_");
}
uint8_t meas_cfg_mn_s::gap_purpose_opts::to_number() const
{
  if (value == per_fr1) {
    return 1;
  }
  invalid_enum_number(value, "meas_cfg_mn_s::gap_purpose_e_");
  return 0;
}

// CG-ConfigInfo-IEs ::= SEQUENCE
SRSASN_CODE cg_cfg_info_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ue_cap_info.size() > 0, 1));
  HANDLE_CODE(bref.pack(candidate_cell_info_list_mn.size() > 0, 1));
  HANDLE_CODE(bref.pack(candidate_cell_info_list_sn.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_result_cell_list_sftd_nr.size() > 0, 1));
  HANDLE_CODE(bref.pack(scg_fail_info_present, 1));
  HANDLE_CODE(bref.pack(cfg_restrict_info_present, 1));
  HANDLE_CODE(bref.pack(drx_info_mcg_present, 1));
  HANDLE_CODE(bref.pack(meas_cfg_mn_present, 1));
  HANDLE_CODE(bref.pack(source_cfg_scg.size() > 0, 1));
  HANDLE_CODE(bref.pack(scg_rb_cfg.size() > 0, 1));
  HANDLE_CODE(bref.pack(mcg_rb_cfg.size() > 0, 1));
  HANDLE_CODE(bref.pack(mrdc_assist_info_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ue_cap_info.size() > 0) {
    HANDLE_CODE(ue_cap_info.pack(bref));
  }
  if (candidate_cell_info_list_mn.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, candidate_cell_info_list_mn, 1, 8));
  }
  if (candidate_cell_info_list_sn.size() > 0) {
    HANDLE_CODE(candidate_cell_info_list_sn.pack(bref));
  }
  if (meas_result_cell_list_sftd_nr.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_result_cell_list_sftd_nr, 1, 3));
  }
  if (scg_fail_info_present) {
    HANDLE_CODE(scg_fail_info.fail_type.pack(bref));
    HANDLE_CODE(scg_fail_info.meas_result_scg.pack(bref));
  }
  if (cfg_restrict_info_present) {
    HANDLE_CODE(cfg_restrict_info.pack(bref));
  }
  if (drx_info_mcg_present) {
    HANDLE_CODE(drx_info_mcg.pack(bref));
  }
  if (meas_cfg_mn_present) {
    HANDLE_CODE(meas_cfg_mn.pack(bref));
  }
  if (source_cfg_scg.size() > 0) {
    HANDLE_CODE(source_cfg_scg.pack(bref));
  }
  if (scg_rb_cfg.size() > 0) {
    HANDLE_CODE(scg_rb_cfg.pack(bref));
  }
  if (mcg_rb_cfg.size() > 0) {
    HANDLE_CODE(mcg_rb_cfg.pack(bref));
  }
  if (mrdc_assist_info_present) {
    HANDLE_CODE(mrdc_assist_info.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_info_ies_s::unpack(cbit_ref& bref)
{
  bool ue_cap_info_present;
  HANDLE_CODE(bref.unpack(ue_cap_info_present, 1));
  bool candidate_cell_info_list_mn_present;
  HANDLE_CODE(bref.unpack(candidate_cell_info_list_mn_present, 1));
  bool candidate_cell_info_list_sn_present;
  HANDLE_CODE(bref.unpack(candidate_cell_info_list_sn_present, 1));
  bool meas_result_cell_list_sftd_nr_present;
  HANDLE_CODE(bref.unpack(meas_result_cell_list_sftd_nr_present, 1));
  HANDLE_CODE(bref.unpack(scg_fail_info_present, 1));
  HANDLE_CODE(bref.unpack(cfg_restrict_info_present, 1));
  HANDLE_CODE(bref.unpack(drx_info_mcg_present, 1));
  HANDLE_CODE(bref.unpack(meas_cfg_mn_present, 1));
  bool source_cfg_scg_present;
  HANDLE_CODE(bref.unpack(source_cfg_scg_present, 1));
  bool scg_rb_cfg_present;
  HANDLE_CODE(bref.unpack(scg_rb_cfg_present, 1));
  bool mcg_rb_cfg_present;
  HANDLE_CODE(bref.unpack(mcg_rb_cfg_present, 1));
  HANDLE_CODE(bref.unpack(mrdc_assist_info_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ue_cap_info_present) {
    HANDLE_CODE(ue_cap_info.unpack(bref));
  }
  if (candidate_cell_info_list_mn_present) {
    HANDLE_CODE(unpack_dyn_seq_of(candidate_cell_info_list_mn, bref, 1, 8));
  }
  if (candidate_cell_info_list_sn_present) {
    HANDLE_CODE(candidate_cell_info_list_sn.unpack(bref));
  }
  if (meas_result_cell_list_sftd_nr_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_result_cell_list_sftd_nr, bref, 1, 3));
  }
  if (scg_fail_info_present) {
    HANDLE_CODE(scg_fail_info.fail_type.unpack(bref));
    HANDLE_CODE(scg_fail_info.meas_result_scg.unpack(bref));
  }
  if (cfg_restrict_info_present) {
    HANDLE_CODE(cfg_restrict_info.unpack(bref));
  }
  if (drx_info_mcg_present) {
    HANDLE_CODE(drx_info_mcg.unpack(bref));
  }
  if (meas_cfg_mn_present) {
    HANDLE_CODE(meas_cfg_mn.unpack(bref));
  }
  if (source_cfg_scg_present) {
    HANDLE_CODE(source_cfg_scg.unpack(bref));
  }
  if (scg_rb_cfg_present) {
    HANDLE_CODE(scg_rb_cfg.unpack(bref));
  }
  if (mcg_rb_cfg_present) {
    HANDLE_CODE(mcg_rb_cfg.unpack(bref));
  }
  if (mrdc_assist_info_present) {
    HANDLE_CODE(mrdc_assist_info.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cg_cfg_info_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ue_cap_info.size() > 0) {
    j.write_str("ue-CapabilityInfo", ue_cap_info.to_string());
  }
  if (candidate_cell_info_list_mn.size() > 0) {
    j.start_array("candidateCellInfoListMN");
    for (const auto& e1 : candidate_cell_info_list_mn) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (candidate_cell_info_list_sn.size() > 0) {
    j.write_str("candidateCellInfoListSN", candidate_cell_info_list_sn.to_string());
  }
  if (meas_result_cell_list_sftd_nr.size() > 0) {
    j.start_array("measResultCellListSFTD-NR");
    for (const auto& e1 : meas_result_cell_list_sftd_nr) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (scg_fail_info_present) {
    j.write_fieldname("scgFailureInfo");
    j.start_obj();
    j.write_str("failureType", scg_fail_info.fail_type.to_string());
    j.write_str("measResultSCG", scg_fail_info.meas_result_scg.to_string());
    j.end_obj();
  }
  if (cfg_restrict_info_present) {
    j.write_fieldname("configRestrictInfo");
    cfg_restrict_info.to_json(j);
  }
  if (drx_info_mcg_present) {
    j.write_fieldname("drx-InfoMCG");
    drx_info_mcg.to_json(j);
  }
  if (meas_cfg_mn_present) {
    j.write_fieldname("measConfigMN");
    meas_cfg_mn.to_json(j);
  }
  if (source_cfg_scg.size() > 0) {
    j.write_str("sourceConfigSCG", source_cfg_scg.to_string());
  }
  if (scg_rb_cfg.size() > 0) {
    j.write_str("scg-RB-Config", scg_rb_cfg.to_string());
  }
  if (mcg_rb_cfg.size() > 0) {
    j.write_str("mcg-RB-Config", mcg_rb_cfg.to_string());
  }
  if (mrdc_assist_info_present) {
    j.write_fieldname("mrdc-AssistanceInfo");
    mrdc_assist_info.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

const char* cg_cfg_info_ies_s::scg_fail_info_s_::fail_type_opts::to_string() const
{
  static const char* names[] = {"t310-Expiry",
                                "randomAccessProblem",
                                "rlc-MaxNumRetx",
                                "synchReconfigFailure-SCG",
                                "scg-reconfigFailure",
                                "srb3-IntegrityFailure"};
  return convert_enum_idx(names, 6, value, "cg_cfg_info_ies_s::scg_fail_info_s_::fail_type_e_");
}
uint16_t cg_cfg_info_ies_s::scg_fail_info_s_::fail_type_opts::to_number() const
{
  switch (value) {
    case t310_expiry:
      return 310;
    case srb3_integrity_fail:
      return 3;
    default:
      invalid_enum_number(value, "cg_cfg_info_ies_s::scg_fail_info_s_::fail_type_e_");
  }
  return 0;
}

// CG-ConfigInfo ::= SEQUENCE
SRSASN_CODE cg_cfg_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void cg_cfg_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void cg_cfg_info_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
cg_cfg_info_s::crit_exts_c_::c1_c_& cg_cfg_info_s::crit_exts_c_::set_c1()
{
  set(types::c1);
  return c;
}
void cg_cfg_info_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void cg_cfg_info_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "cg_cfg_info_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE cg_cfg_info_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "cg_cfg_info_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_info_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "cg_cfg_info_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void cg_cfg_info_s::crit_exts_c_::c1_c_::set(types::options e)
{
  type_ = e;
}
cg_cfg_info_ies_s& cg_cfg_info_s::crit_exts_c_::c1_c_::set_cg_cfg_info()
{
  set(types::cg_cfg_info);
  return c;
}
void cg_cfg_info_s::crit_exts_c_::c1_c_::set_spare3()
{
  set(types::spare3);
}
void cg_cfg_info_s::crit_exts_c_::c1_c_::set_spare2()
{
  set(types::spare2);
}
void cg_cfg_info_s::crit_exts_c_::c1_c_::set_spare1()
{
  set(types::spare1);
}
void cg_cfg_info_s::crit_exts_c_::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::cg_cfg_info:
      j.write_fieldname("cg-ConfigInfo");
      c.to_json(j);
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "cg_cfg_info_s::crit_exts_c_::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE cg_cfg_info_s::crit_exts_c_::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::cg_cfg_info:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "cg_cfg_info_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cg_cfg_info_s::crit_exts_c_::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::cg_cfg_info:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "cg_cfg_info_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cg_cfg_info_s::crit_exts_c_::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"cg-ConfigInfo", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "cg_cfg_info_s::crit_exts_c_::c1_c_::types");
}

const char* cg_cfg_info_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"c1", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "cg_cfg_info_s::crit_exts_c_::types");
}
uint8_t cg_cfg_info_s::crit_exts_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "cg_cfg_info_s::crit_exts_c_::types");
}

// CLI-TriggeredList-r16 ::= CHOICE
void cli_triggered_list_r16_c::destroy_()
{
  switch (type_) {
    case types::srs_rsrp_triggered_list_r16:
      c.destroy<srs_rsrp_triggered_list_r16_l>();
      break;
    case types::cli_rssi_triggered_list_r16:
      c.destroy<cli_rssi_triggered_list_r16_l>();
      break;
    default:
      break;
  }
}
void cli_triggered_list_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::srs_rsrp_triggered_list_r16:
      c.init<srs_rsrp_triggered_list_r16_l>();
      break;
    case types::cli_rssi_triggered_list_r16:
      c.init<cli_rssi_triggered_list_r16_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cli_triggered_list_r16_c");
  }
}
cli_triggered_list_r16_c::cli_triggered_list_r16_c(const cli_triggered_list_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::srs_rsrp_triggered_list_r16:
      c.init(other.c.get<srs_rsrp_triggered_list_r16_l>());
      break;
    case types::cli_rssi_triggered_list_r16:
      c.init(other.c.get<cli_rssi_triggered_list_r16_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cli_triggered_list_r16_c");
  }
}
cli_triggered_list_r16_c& cli_triggered_list_r16_c::operator=(const cli_triggered_list_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::srs_rsrp_triggered_list_r16:
      c.set(other.c.get<srs_rsrp_triggered_list_r16_l>());
      break;
    case types::cli_rssi_triggered_list_r16:
      c.set(other.c.get<cli_rssi_triggered_list_r16_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cli_triggered_list_r16_c");
  }

  return *this;
}
srs_rsrp_triggered_list_r16_l& cli_triggered_list_r16_c::set_srs_rsrp_triggered_list_r16()
{
  set(types::srs_rsrp_triggered_list_r16);
  return c.get<srs_rsrp_triggered_list_r16_l>();
}
cli_rssi_triggered_list_r16_l& cli_triggered_list_r16_c::set_cli_rssi_triggered_list_r16()
{
  set(types::cli_rssi_triggered_list_r16);
  return c.get<cli_rssi_triggered_list_r16_l>();
}
void cli_triggered_list_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::srs_rsrp_triggered_list_r16:
      j.start_array("srs-RSRP-TriggeredList-r16");
      for (const auto& e1 : c.get<srs_rsrp_triggered_list_r16_l>()) {
        j.write_int(e1);
      }
      j.end_array();
      break;
    case types::cli_rssi_triggered_list_r16:
      j.start_array("cli-RSSI-TriggeredList-r16");
      for (const auto& e1 : c.get<cli_rssi_triggered_list_r16_l>()) {
        j.write_int(e1);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "cli_triggered_list_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE cli_triggered_list_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::srs_rsrp_triggered_list_r16:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srs_rsrp_triggered_list_r16_l>(), 1, 32, integer_packer<uint8_t>(0, 63)));
      break;
    case types::cli_rssi_triggered_list_r16:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cli_rssi_triggered_list_r16_l>(), 1, 64, integer_packer<uint8_t>(0, 63)));
      break;
    default:
      log_invalid_choice_id(type_, "cli_triggered_list_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cli_triggered_list_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::srs_rsrp_triggered_list_r16:
      HANDLE_CODE(
          unpack_dyn_seq_of(c.get<srs_rsrp_triggered_list_r16_l>(), bref, 1, 32, integer_packer<uint8_t>(0, 63)));
      break;
    case types::cli_rssi_triggered_list_r16:
      HANDLE_CODE(
          unpack_dyn_seq_of(c.get<cli_rssi_triggered_list_r16_l>(), bref, 1, 64, integer_packer<uint8_t>(0, 63)));
      break;
    default:
      log_invalid_choice_id(type_, "cli_triggered_list_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cli_triggered_list_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"srs-RSRP-TriggeredList-r16", "cli-RSSI-TriggeredList-r16"};
  return convert_enum_idx(names, 2, value, "cli_triggered_list_r16_c::types");
}

void cells_triggered_list_item_c_::destroy_() {}
void cells_triggered_list_item_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
cells_triggered_list_item_c_::cells_triggered_list_item_c_(const cells_triggered_list_item_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::pci:
      c.init(other.c.get<uint16_t>());
      break;
    case types::pci_eutra:
      c.init(other.c.get<uint16_t>());
      break;
    case types::pci_utra_fdd_r16:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cells_triggered_list_item_c_");
  }
}
cells_triggered_list_item_c_& cells_triggered_list_item_c_::operator=(const cells_triggered_list_item_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::pci:
      c.set(other.c.get<uint16_t>());
      break;
    case types::pci_eutra:
      c.set(other.c.get<uint16_t>());
      break;
    case types::pci_utra_fdd_r16:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cells_triggered_list_item_c_");
  }

  return *this;
}
uint16_t& cells_triggered_list_item_c_::set_pci()
{
  set(types::pci);
  return c.get<uint16_t>();
}
uint16_t& cells_triggered_list_item_c_::set_pci_eutra()
{
  set(types::pci_eutra);
  return c.get<uint16_t>();
}
uint16_t& cells_triggered_list_item_c_::set_pci_utra_fdd_r16()
{
  set(types::pci_utra_fdd_r16);
  return c.get<uint16_t>();
}
void cells_triggered_list_item_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::pci:
      j.write_int("physCellId", c.get<uint16_t>());
      break;
    case types::pci_eutra:
      j.write_int("physCellIdEUTRA", c.get<uint16_t>());
      break;
    case types::pci_utra_fdd_r16:
      j.write_int("physCellIdUTRA-FDD-r16", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "cells_triggered_list_item_c_");
  }
  j.end_obj();
}
SRSASN_CODE cells_triggered_list_item_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::pci:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1007u));
      break;
    case types::pci_eutra:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)503u));
      break;
    case types::pci_utra_fdd_r16:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)511u));
      break;
    default:
      log_invalid_choice_id(type_, "cells_triggered_list_item_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_triggered_list_item_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::pci:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1007u));
      break;
    case types::pci_eutra:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)503u));
      break;
    case types::pci_utra_fdd_r16:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)511u));
      break;
    default:
      log_invalid_choice_id(type_, "cells_triggered_list_item_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cells_triggered_list_item_c_::types_opts::to_string() const
{
  static const char* names[] = {"physCellId", "physCellIdEUTRA", "physCellIdUTRA-FDD-r16"};
  return convert_enum_idx(names, 3, value, "cells_triggered_list_item_c_::types");
}

// HandoverCommand-IEs ::= SEQUENCE
SRSASN_CODE ho_cmd_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(ho_cmd_msg.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ho_cmd_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(ho_cmd_msg.unpack(bref));

  return SRSASN_SUCCESS;
}
void ho_cmd_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("handoverCommandMessage", ho_cmd_msg.to_string());
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// HandoverCommand ::= SEQUENCE
SRSASN_CODE ho_cmd_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ho_cmd_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ho_cmd_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ho_cmd_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ho_cmd_s::crit_exts_c_::c1_c_& ho_cmd_s::crit_exts_c_::set_c1()
{
  set(types::c1);
  return c;
}
void ho_cmd_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ho_cmd_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ho_cmd_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ho_cmd_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ho_cmd_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ho_cmd_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ho_cmd_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void ho_cmd_s::crit_exts_c_::c1_c_::set(types::options e)
{
  type_ = e;
}
ho_cmd_ies_s& ho_cmd_s::crit_exts_c_::c1_c_::set_ho_cmd()
{
  set(types::ho_cmd);
  return c;
}
void ho_cmd_s::crit_exts_c_::c1_c_::set_spare3()
{
  set(types::spare3);
}
void ho_cmd_s::crit_exts_c_::c1_c_::set_spare2()
{
  set(types::spare2);
}
void ho_cmd_s::crit_exts_c_::c1_c_::set_spare1()
{
  set(types::spare1);
}
void ho_cmd_s::crit_exts_c_::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ho_cmd:
      j.write_fieldname("handoverCommand");
      c.to_json(j);
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ho_cmd_s::crit_exts_c_::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE ho_cmd_s::crit_exts_c_::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ho_cmd:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ho_cmd_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ho_cmd_s::crit_exts_c_::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ho_cmd:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ho_cmd_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ho_cmd_s::crit_exts_c_::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"handoverCommand", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "ho_cmd_s::crit_exts_c_::c1_c_::types");
}

const char* ho_cmd_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"c1", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ho_cmd_s::crit_exts_c_::types");
}
uint8_t ho_cmd_s::crit_exts_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "ho_cmd_s::crit_exts_c_::types");
}

// RRM-Config ::= SEQUENCE
SRSASN_CODE rrm_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ue_inactive_time_present, 1));
  HANDLE_CODE(bref.pack(candidate_cell_info_list.size() > 0, 1));

  if (ue_inactive_time_present) {
    HANDLE_CODE(ue_inactive_time.pack(bref));
  }
  if (candidate_cell_info_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, candidate_cell_info_list, 1, 8));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= candidate_cell_info_list_sn_eutra.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(candidate_cell_info_list_sn_eutra.is_present(), 1));
      if (candidate_cell_info_list_sn_eutra.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *candidate_cell_info_list_sn_eutra, 1, 32));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrm_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ue_inactive_time_present, 1));
  bool candidate_cell_info_list_present;
  HANDLE_CODE(bref.unpack(candidate_cell_info_list_present, 1));

  if (ue_inactive_time_present) {
    HANDLE_CODE(ue_inactive_time.unpack(bref));
  }
  if (candidate_cell_info_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(candidate_cell_info_list, bref, 1, 8));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(candidate_cell_info_list_sn_eutra, bref);
      if (candidate_cell_info_list_sn_eutra.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*candidate_cell_info_list_sn_eutra, bref, 1, 32));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void rrm_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ue_inactive_time_present) {
    j.write_str("ue-InactiveTime", ue_inactive_time.to_string());
  }
  if (candidate_cell_info_list.size() > 0) {
    j.start_array("candidateCellInfoList");
    for (const auto& e1 : candidate_cell_info_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ext) {
    if (candidate_cell_info_list_sn_eutra.is_present()) {
      j.start_array("candidateCellInfoListSN-EUTRA");
      for (const auto& e1 : *candidate_cell_info_list_sn_eutra) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

const char* rrm_cfg_s::ue_inactive_time_opts::to_string() const
{
  static const char* names[] = {
      "s1",    "s2",       "s3",    "s5",           "s7",      "s10",   "s15",     "s20",      "s25",     "s30",
      "s40",   "s50",      "min1",  "min1s20",      "min1s40", "min2",  "min2s30", "min3",     "min3s30", "min4",
      "min5",  "min6",     "min7",  "min8",         "min9",    "min10", "min12",   "min14",    "min17",   "min20",
      "min24", "min28",    "min33", "min38",        "min44",   "min50", "hr1",     "hr1min30", "hr2",     "hr2min30",
      "hr3",   "hr3min30", "hr4",   "hr5",          "hr6",     "hr8",   "hr10",    "hr13",     "hr16",    "hr20",
      "day1",  "day1hr12", "day2",  "day2hr12",     "day3",    "day4",  "day5",    "day7",     "day10",   "day14",
      "day19", "day24",    "day30", "dayMoreThan30"};
  return convert_enum_idx(names, 64, value, "rrm_cfg_s::ue_inactive_time_e_");
}

// HandoverPreparationInformation-IEs ::= SEQUENCE
SRSASN_CODE ho_prep_info_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(source_cfg_present, 1));
  HANDLE_CODE(bref.pack(rrm_cfg_present, 1));
  HANDLE_CODE(bref.pack(as_context_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, ue_cap_rat_list, 0, 8));
  if (source_cfg_present) {
    HANDLE_CODE(source_cfg.pack(bref));
  }
  if (rrm_cfg_present) {
    HANDLE_CODE(rrm_cfg.pack(bref));
  }
  if (as_context_present) {
    HANDLE_CODE(as_context.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ho_prep_info_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(source_cfg_present, 1));
  HANDLE_CODE(bref.unpack(rrm_cfg_present, 1));
  HANDLE_CODE(bref.unpack(as_context_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(ue_cap_rat_list, bref, 0, 8));
  if (source_cfg_present) {
    HANDLE_CODE(source_cfg.unpack(bref));
  }
  if (rrm_cfg_present) {
    HANDLE_CODE(rrm_cfg.unpack(bref));
  }
  if (as_context_present) {
    HANDLE_CODE(as_context.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ho_prep_info_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("ue-CapabilityRAT-List");
  for (const auto& e1 : ue_cap_rat_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (source_cfg_present) {
    j.write_fieldname("sourceConfig");
    source_cfg.to_json(j);
  }
  if (rrm_cfg_present) {
    j.write_fieldname("rrm-Config");
    rrm_cfg.to_json(j);
  }
  if (as_context_present) {
    j.write_fieldname("as-Context");
    as_context.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// HandoverPreparationInformation ::= SEQUENCE
SRSASN_CODE ho_prep_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ho_prep_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ho_prep_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ho_prep_info_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ho_prep_info_s::crit_exts_c_::c1_c_& ho_prep_info_s::crit_exts_c_::set_c1()
{
  set(types::c1);
  return c;
}
void ho_prep_info_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ho_prep_info_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ho_prep_info_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ho_prep_info_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ho_prep_info_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ho_prep_info_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ho_prep_info_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void ho_prep_info_s::crit_exts_c_::c1_c_::set(types::options e)
{
  type_ = e;
}
ho_prep_info_ies_s& ho_prep_info_s::crit_exts_c_::c1_c_::set_ho_prep_info()
{
  set(types::ho_prep_info);
  return c;
}
void ho_prep_info_s::crit_exts_c_::c1_c_::set_spare3()
{
  set(types::spare3);
}
void ho_prep_info_s::crit_exts_c_::c1_c_::set_spare2()
{
  set(types::spare2);
}
void ho_prep_info_s::crit_exts_c_::c1_c_::set_spare1()
{
  set(types::spare1);
}
void ho_prep_info_s::crit_exts_c_::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ho_prep_info:
      j.write_fieldname("handoverPreparationInformation");
      c.to_json(j);
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ho_prep_info_s::crit_exts_c_::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE ho_prep_info_s::crit_exts_c_::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ho_prep_info:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ho_prep_info_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ho_prep_info_s::crit_exts_c_::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ho_prep_info:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ho_prep_info_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ho_prep_info_s::crit_exts_c_::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"handoverPreparationInformation", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "ho_prep_info_s::crit_exts_c_::c1_c_::types");
}

const char* ho_prep_info_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"c1", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ho_prep_info_s::crit_exts_c_::types");
}
uint8_t ho_prep_info_s::crit_exts_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "ho_prep_info_s::crit_exts_c_::types");
}

// MeasTiming ::= SEQUENCE
SRSASN_CODE meas_timing_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(freq_and_timing_present, 1));

  if (freq_and_timing_present) {
    HANDLE_CODE(bref.pack(freq_and_timing.ss_rssi_meas_present, 1));
    HANDLE_CODE(pack_integer(bref, freq_and_timing.carrier_freq, (uint32_t)0u, (uint32_t)3279165u));
    HANDLE_CODE(freq_and_timing.ssb_subcarrier_spacing.pack(bref));
    HANDLE_CODE(freq_and_timing.ssb_meas_timing_cfg.pack(bref));
    if (freq_and_timing.ss_rssi_meas_present) {
      HANDLE_CODE(freq_and_timing.ss_rssi_meas.pack(bref));
    }
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ssb_to_measure.is_present();
    group_flags[0] |= pci_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ssb_to_measure.is_present(), 1));
      HANDLE_CODE(bref.pack(pci_present, 1));
      if (ssb_to_measure.is_present()) {
        HANDLE_CODE(ssb_to_measure->pack(bref));
      }
      if (pci_present) {
        HANDLE_CODE(pack_integer(bref, pci, (uint16_t)0u, (uint16_t)1007u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_timing_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(freq_and_timing_present, 1));

  if (freq_and_timing_present) {
    HANDLE_CODE(bref.unpack(freq_and_timing.ss_rssi_meas_present, 1));
    HANDLE_CODE(unpack_integer(freq_and_timing.carrier_freq, bref, (uint32_t)0u, (uint32_t)3279165u));
    HANDLE_CODE(freq_and_timing.ssb_subcarrier_spacing.unpack(bref));
    HANDLE_CODE(freq_and_timing.ssb_meas_timing_cfg.unpack(bref));
    if (freq_and_timing.ss_rssi_meas_present) {
      HANDLE_CODE(freq_and_timing.ss_rssi_meas.unpack(bref));
    }
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(ssb_to_measure, bref);
      HANDLE_CODE(bref.unpack(pci_present, 1));
      if (ssb_to_measure.is_present()) {
        HANDLE_CODE(ssb_to_measure->unpack(bref));
      }
      if (pci_present) {
        HANDLE_CODE(unpack_integer(pci, bref, (uint16_t)0u, (uint16_t)1007u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void meas_timing_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (freq_and_timing_present) {
    j.write_fieldname("frequencyAndTiming");
    j.start_obj();
    j.write_int("carrierFreq", freq_and_timing.carrier_freq);
    j.write_str("ssbSubcarrierSpacing", freq_and_timing.ssb_subcarrier_spacing.to_string());
    j.write_fieldname("ssb-MeasurementTimingConfiguration");
    freq_and_timing.ssb_meas_timing_cfg.to_json(j);
    if (freq_and_timing.ss_rssi_meas_present) {
      j.write_fieldname("ss-RSSI-Measurement");
      freq_and_timing.ss_rssi_meas.to_json(j);
    }
    j.end_obj();
  }
  if (ext) {
    if (ssb_to_measure.is_present()) {
      j.write_fieldname("ssb-ToMeasure");
      ssb_to_measure->to_json(j);
    }
    if (pci_present) {
      j.write_int("physCellId", pci);
    }
  }
  j.end_obj();
}

// SL-MeasQuantityResult-r16 ::= SEQUENCE
SRSASN_CODE sl_meas_quant_result_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_rsrp_r16_present, 1));

  if (sl_rsrp_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_rsrp_r16, (uint8_t)0u, (uint8_t)127u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_meas_quant_result_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_rsrp_r16_present, 1));

  if (sl_rsrp_r16_present) {
    HANDLE_CODE(unpack_integer(sl_rsrp_r16, bref, (uint8_t)0u, (uint8_t)127u));
  }

  return SRSASN_SUCCESS;
}
void sl_meas_quant_result_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_rsrp_r16_present) {
    j.write_int("sl-RSRP-r16", sl_rsrp_r16);
  }
  j.end_obj();
}

// SL-MeasResult-r16 ::= SEQUENCE
SRSASN_CODE sl_meas_result_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_result_dmrs_r16_present, 1));

  if (sl_result_dmrs_r16_present) {
    HANDLE_CODE(sl_result_dmrs_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_meas_result_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_result_dmrs_r16_present, 1));

  if (sl_result_dmrs_r16_present) {
    HANDLE_CODE(sl_result_dmrs_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_meas_result_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_result_dmrs_r16_present) {
    j.write_fieldname("sl-ResultDMRS-r16");
    sl_result_dmrs_r16.to_json(j);
  }
  j.end_obj();
}

// SL-MeasResults-r16 ::= SEQUENCE
SRSASN_CODE sl_meas_results_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, sl_meas_id_r16, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(sl_meas_result_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_meas_results_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(sl_meas_id_r16, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(sl_meas_result_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_meas_results_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-MeasId-r16", sl_meas_id_r16);
  j.write_fieldname("sl-MeasResult-r16");
  sl_meas_result_r16.to_json(j);
  j.end_obj();
}

// MeasurementReportSidelink-r16-IEs ::= SEQUENCE
SRSASN_CODE meas_report_sidelink_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(sl_meas_results_r16.pack(bref));
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_report_sidelink_r16_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(sl_meas_results_r16.unpack(bref));
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_report_sidelink_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sl-measResults-r16");
  sl_meas_results_r16.to_json(j);
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// MeasurementReportSidelink ::= SEQUENCE
SRSASN_CODE meas_report_sidelink_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_report_sidelink_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void meas_report_sidelink_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void meas_report_sidelink_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
meas_report_sidelink_r16_ies_s& meas_report_sidelink_s::crit_exts_c_::set_meas_report_sidelink_r16()
{
  set(types::meas_report_sidelink_r16);
  return c;
}
void meas_report_sidelink_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void meas_report_sidelink_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::meas_report_sidelink_r16:
      j.write_fieldname("measurementReportSidelink-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "meas_report_sidelink_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE meas_report_sidelink_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::meas_report_sidelink_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "meas_report_sidelink_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_report_sidelink_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::meas_report_sidelink_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "meas_report_sidelink_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* meas_report_sidelink_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"measurementReportSidelink-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "meas_report_sidelink_s::crit_exts_c_::types");
}

// MeasurementTimingConfiguration-v1610-IEs ::= SEQUENCE
SRSASN_CODE meas_timing_cfg_v1610_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(csi_rs_cfg_r16.csi_rs_subcarrier_spacing_r16.pack(bref));
  HANDLE_CODE(csi_rs_cfg_r16.csi_rs_cell_mob_r16.pack(bref));
  HANDLE_CODE(pack_integer(bref, csi_rs_cfg_r16.ref_ssb_freq_r16, (uint32_t)0u, (uint32_t)3279165u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_timing_cfg_v1610_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(csi_rs_cfg_r16.csi_rs_subcarrier_spacing_r16.unpack(bref));
  HANDLE_CODE(csi_rs_cfg_r16.csi_rs_cell_mob_r16.unpack(bref));
  HANDLE_CODE(unpack_integer(csi_rs_cfg_r16.ref_ssb_freq_r16, bref, (uint32_t)0u, (uint32_t)3279165u));

  return SRSASN_SUCCESS;
}
void meas_timing_cfg_v1610_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("csi-RS-Config-r16");
  j.start_obj();
  j.write_str("csi-RS-SubcarrierSpacing-r16", csi_rs_cfg_r16.csi_rs_subcarrier_spacing_r16.to_string());
  j.write_fieldname("csi-RS-CellMobility-r16");
  csi_rs_cfg_r16.csi_rs_cell_mob_r16.to_json(j);
  j.write_int("refSSBFreq-r16", csi_rs_cfg_r16.ref_ssb_freq_r16);
  j.end_obj();
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// MeasurementTimingConfiguration-v1550-IEs ::= SEQUENCE
SRSASN_CODE meas_timing_cfg_v1550_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(bref.pack(camp_on_first_ssb, 1));
  HANDLE_CODE(bref.pack(ps_cell_only_on_first_ssb, 1));
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_timing_cfg_v1550_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(bref.unpack(camp_on_first_ssb, 1));
  HANDLE_CODE(bref.unpack(ps_cell_only_on_first_ssb, 1));
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_timing_cfg_v1550_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_bool("campOnFirstSSB", camp_on_first_ssb);
  j.write_bool("psCellOnlyOnFirstSSB", ps_cell_only_on_first_ssb);
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// MeasurementTimingConfiguration-IEs ::= SEQUENCE
SRSASN_CODE meas_timing_cfg_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_timing.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (meas_timing.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_timing, 1, 32));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_timing_cfg_ies_s::unpack(cbit_ref& bref)
{
  bool meas_timing_present;
  HANDLE_CODE(bref.unpack(meas_timing_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (meas_timing_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_timing, bref, 1, 32));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_timing_cfg_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_timing.size() > 0) {
    j.start_array("measTiming");
    for (const auto& e1 : meas_timing) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// MeasurementTimingConfiguration ::= SEQUENCE
SRSASN_CODE meas_timing_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_timing_cfg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void meas_timing_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void meas_timing_cfg_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
meas_timing_cfg_s::crit_exts_c_::c1_c_& meas_timing_cfg_s::crit_exts_c_::set_c1()
{
  set(types::c1);
  return c;
}
void meas_timing_cfg_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void meas_timing_cfg_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "meas_timing_cfg_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE meas_timing_cfg_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "meas_timing_cfg_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_timing_cfg_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "meas_timing_cfg_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void meas_timing_cfg_s::crit_exts_c_::c1_c_::set(types::options e)
{
  type_ = e;
}
meas_timing_cfg_ies_s& meas_timing_cfg_s::crit_exts_c_::c1_c_::set_meas_timing_conf()
{
  set(types::meas_timing_conf);
  return c;
}
void meas_timing_cfg_s::crit_exts_c_::c1_c_::set_spare3()
{
  set(types::spare3);
}
void meas_timing_cfg_s::crit_exts_c_::c1_c_::set_spare2()
{
  set(types::spare2);
}
void meas_timing_cfg_s::crit_exts_c_::c1_c_::set_spare1()
{
  set(types::spare1);
}
void meas_timing_cfg_s::crit_exts_c_::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::meas_timing_conf:
      j.write_fieldname("measTimingConf");
      c.to_json(j);
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "meas_timing_cfg_s::crit_exts_c_::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE meas_timing_cfg_s::crit_exts_c_::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::meas_timing_conf:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "meas_timing_cfg_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_timing_cfg_s::crit_exts_c_::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::meas_timing_conf:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "meas_timing_cfg_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* meas_timing_cfg_s::crit_exts_c_::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"measTimingConf", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 4, value, "meas_timing_cfg_s::crit_exts_c_::c1_c_::types");
}

const char* meas_timing_cfg_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"c1", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "meas_timing_cfg_s::crit_exts_c_::types");
}
uint8_t meas_timing_cfg_s::crit_exts_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "meas_timing_cfg_s::crit_exts_c_::types");
}

// NotificationMessageSidelink-r17-IEs ::= SEQUENCE
SRSASN_CODE notif_msg_sidelink_r17_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ind_type_r17_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ind_type_r17_present) {
    HANDLE_CODE(ind_type_r17.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE notif_msg_sidelink_r17_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ind_type_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ind_type_r17_present) {
    HANDLE_CODE(ind_type_r17.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void notif_msg_sidelink_r17_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ind_type_r17_present) {
    j.write_str("indicationType-r17", ind_type_r17.to_string());
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

const char* notif_msg_sidelink_r17_ies_s::ind_type_r17_opts::to_string() const
{
  static const char* names[] = {"relayUE-Uu-RLF", "relayUE-HO", "relayUE-CellReselection", "relayUE-Uu-RRC-Failure"};
  return convert_enum_idx(names, 4, value, "notif_msg_sidelink_r17_ies_s::ind_type_r17_e_");
}

// NotificationMessageSidelink-r17 ::= SEQUENCE
SRSASN_CODE notif_msg_sidelink_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE notif_msg_sidelink_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void notif_msg_sidelink_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void notif_msg_sidelink_r17_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
notif_msg_sidelink_r17_ies_s& notif_msg_sidelink_r17_s::crit_exts_c_::set_notif_msg_sidelink_r17()
{
  set(types::notif_msg_sidelink_r17);
  return c;
}
void notif_msg_sidelink_r17_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void notif_msg_sidelink_r17_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::notif_msg_sidelink_r17:
      j.write_fieldname("notificationMessageSidelink-r17");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "notif_msg_sidelink_r17_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE notif_msg_sidelink_r17_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::notif_msg_sidelink_r17:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "notif_msg_sidelink_r17_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE notif_msg_sidelink_r17_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::notif_msg_sidelink_r17:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "notif_msg_sidelink_r17_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* notif_msg_sidelink_r17_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"notificationMessageSidelink-r17", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "notif_msg_sidelink_r17_s::crit_exts_c_::types");
}

// RRCReconfigurationCompleteSidelink-v1720-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_complete_sidelink_v1720_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_drx_cfg_reject_v1720_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_sidelink_v1720_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_drx_cfg_reject_v1720_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  return SRSASN_SUCCESS;
}
void rrc_recfg_complete_sidelink_v1720_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_drx_cfg_reject_v1720_present) {
    j.write_str("sl-DRX-ConfigReject-v1720", "true");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// RRCReconfigurationCompleteSidelink-v1710-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_complete_sidelink_v1710_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_sidelink_v1710_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_complete_sidelink_v1710_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("dummy", "true");
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCReconfigurationCompleteSidelink-r16-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_complete_sidelink_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_sidelink_r16_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_complete_sidelink_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCReconfigurationCompleteSidelink ::= SEQUENCE
SRSASN_CODE rrc_recfg_complete_sidelink_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id_r16, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_sidelink_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id_r16, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_recfg_complete_sidelink_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier-r16", rrc_transaction_id_r16);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_recfg_complete_sidelink_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
rrc_recfg_complete_sidelink_r16_ies_s&
rrc_recfg_complete_sidelink_s::crit_exts_c_::set_rrc_recfg_complete_sidelink_r16()
{
  set(types::rrc_recfg_complete_sidelink_r16);
  return c;
}
void rrc_recfg_complete_sidelink_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_recfg_complete_sidelink_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_recfg_complete_sidelink_r16:
      j.write_fieldname("rrcReconfigurationCompleteSidelink-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_complete_sidelink_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_recfg_complete_sidelink_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_recfg_complete_sidelink_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_complete_sidelink_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_complete_sidelink_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_recfg_complete_sidelink_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_complete_sidelink_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_recfg_complete_sidelink_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcReconfigurationCompleteSidelink-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_recfg_complete_sidelink_s::crit_exts_c_::types");
}

// RRCReconfigurationFailureSidelink-r16-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_fail_sidelink_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_fail_sidelink_r16_ies_s::unpack(cbit_ref& bref)
{
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_fail_sidelink_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// RRCReconfigurationFailureSidelink ::= SEQUENCE
SRSASN_CODE rrc_recfg_fail_sidelink_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id_r16, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_fail_sidelink_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id_r16, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_recfg_fail_sidelink_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier-r16", rrc_transaction_id_r16);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_recfg_fail_sidelink_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
rrc_recfg_fail_sidelink_r16_ies_s& rrc_recfg_fail_sidelink_s::crit_exts_c_::set_rrc_recfg_fail_sidelink_r16()
{
  set(types::rrc_recfg_fail_sidelink_r16);
  return c;
}
void rrc_recfg_fail_sidelink_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_recfg_fail_sidelink_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_recfg_fail_sidelink_r16:
      j.write_fieldname("rrcReconfigurationFailureSidelink-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_fail_sidelink_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_recfg_fail_sidelink_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_recfg_fail_sidelink_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_fail_sidelink_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_fail_sidelink_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_recfg_fail_sidelink_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_fail_sidelink_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_recfg_fail_sidelink_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcReconfigurationFailureSidelink-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_recfg_fail_sidelink_s::crit_exts_c_::types");
}

// SL-LogicalChannelConfigPC5-r16 ::= SEQUENCE
SRSASN_CODE sl_lc_ch_cfg_pc5_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_integer(bref, sl_lc_ch_id_r16, (uint8_t)1u, (uint8_t)32u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_lc_ch_cfg_pc5_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_integer(sl_lc_ch_id_r16, bref, (uint8_t)1u, (uint8_t)32u));

  return SRSASN_SUCCESS;
}
void sl_lc_ch_cfg_pc5_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-LogicalChannelIdentity-r16", sl_lc_ch_id_r16);
  j.end_obj();
}

// SL-RLC-ConfigPC5-r16 ::= CHOICE
void sl_rlc_cfg_pc5_r16_c::destroy_()
{
  switch (type_) {
    case types::sl_am_rlc_r16:
      c.destroy<sl_am_rlc_r16_s_>();
      break;
    case types::sl_um_bi_dir_rlc_r16:
      c.destroy<sl_um_bi_dir_rlc_r16_s_>();
      break;
    case types::sl_um_uni_dir_rlc_r16:
      c.destroy<sl_um_uni_dir_rlc_r16_s_>();
      break;
    default:
      break;
  }
}
void sl_rlc_cfg_pc5_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::sl_am_rlc_r16:
      c.init<sl_am_rlc_r16_s_>();
      break;
    case types::sl_um_bi_dir_rlc_r16:
      c.init<sl_um_bi_dir_rlc_r16_s_>();
      break;
    case types::sl_um_uni_dir_rlc_r16:
      c.init<sl_um_uni_dir_rlc_r16_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_rlc_cfg_pc5_r16_c");
  }
}
sl_rlc_cfg_pc5_r16_c::sl_rlc_cfg_pc5_r16_c(const sl_rlc_cfg_pc5_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sl_am_rlc_r16:
      c.init(other.c.get<sl_am_rlc_r16_s_>());
      break;
    case types::sl_um_bi_dir_rlc_r16:
      c.init(other.c.get<sl_um_bi_dir_rlc_r16_s_>());
      break;
    case types::sl_um_uni_dir_rlc_r16:
      c.init(other.c.get<sl_um_uni_dir_rlc_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_rlc_cfg_pc5_r16_c");
  }
}
sl_rlc_cfg_pc5_r16_c& sl_rlc_cfg_pc5_r16_c::operator=(const sl_rlc_cfg_pc5_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sl_am_rlc_r16:
      c.set(other.c.get<sl_am_rlc_r16_s_>());
      break;
    case types::sl_um_bi_dir_rlc_r16:
      c.set(other.c.get<sl_um_bi_dir_rlc_r16_s_>());
      break;
    case types::sl_um_uni_dir_rlc_r16:
      c.set(other.c.get<sl_um_uni_dir_rlc_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_rlc_cfg_pc5_r16_c");
  }

  return *this;
}
sl_rlc_cfg_pc5_r16_c::sl_am_rlc_r16_s_& sl_rlc_cfg_pc5_r16_c::set_sl_am_rlc_r16()
{
  set(types::sl_am_rlc_r16);
  return c.get<sl_am_rlc_r16_s_>();
}
sl_rlc_cfg_pc5_r16_c::sl_um_bi_dir_rlc_r16_s_& sl_rlc_cfg_pc5_r16_c::set_sl_um_bi_dir_rlc_r16()
{
  set(types::sl_um_bi_dir_rlc_r16);
  return c.get<sl_um_bi_dir_rlc_r16_s_>();
}
sl_rlc_cfg_pc5_r16_c::sl_um_uni_dir_rlc_r16_s_& sl_rlc_cfg_pc5_r16_c::set_sl_um_uni_dir_rlc_r16()
{
  set(types::sl_um_uni_dir_rlc_r16);
  return c.get<sl_um_uni_dir_rlc_r16_s_>();
}
void sl_rlc_cfg_pc5_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sl_am_rlc_r16:
      j.write_fieldname("sl-AM-RLC-r16");
      j.start_obj();
      if (c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16_present) {
        j.write_str("sl-SN-FieldLengthAM-r16", c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16.to_string());
      }
      j.end_obj();
      break;
    case types::sl_um_bi_dir_rlc_r16:
      j.write_fieldname("sl-UM-Bi-Directional-RLC-r16");
      j.start_obj();
      if (c.get<sl_um_bi_dir_rlc_r16_s_>().sl_sn_field_len_um_r16_present) {
        j.write_str("sl-SN-FieldLengthUM-r16", c.get<sl_um_bi_dir_rlc_r16_s_>().sl_sn_field_len_um_r16.to_string());
      }
      j.end_obj();
      break;
    case types::sl_um_uni_dir_rlc_r16:
      j.write_fieldname("sl-UM-Uni-Directional-RLC-r16");
      j.start_obj();
      if (c.get<sl_um_uni_dir_rlc_r16_s_>().sl_sn_field_len_um_r16_present) {
        j.write_str("sl-SN-FieldLengthUM-r16", c.get<sl_um_uni_dir_rlc_r16_s_>().sl_sn_field_len_um_r16.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "sl_rlc_cfg_pc5_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE sl_rlc_cfg_pc5_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sl_am_rlc_r16:
      bref.pack(c.get<sl_am_rlc_r16_s_>().ext, 1);
      HANDLE_CODE(bref.pack(c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16_present, 1));
      if (c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16_present) {
        HANDLE_CODE(c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16.pack(bref));
      }
      break;
    case types::sl_um_bi_dir_rlc_r16:
      bref.pack(c.get<sl_um_bi_dir_rlc_r16_s_>().ext, 1);
      HANDLE_CODE(bref.pack(c.get<sl_um_bi_dir_rlc_r16_s_>().sl_sn_field_len_um_r16_present, 1));
      if (c.get<sl_um_bi_dir_rlc_r16_s_>().sl_sn_field_len_um_r16_present) {
        HANDLE_CODE(c.get<sl_um_bi_dir_rlc_r16_s_>().sl_sn_field_len_um_r16.pack(bref));
      }
      break;
    case types::sl_um_uni_dir_rlc_r16:
      bref.pack(c.get<sl_um_uni_dir_rlc_r16_s_>().ext, 1);
      HANDLE_CODE(bref.pack(c.get<sl_um_uni_dir_rlc_r16_s_>().sl_sn_field_len_um_r16_present, 1));
      if (c.get<sl_um_uni_dir_rlc_r16_s_>().sl_sn_field_len_um_r16_present) {
        HANDLE_CODE(c.get<sl_um_uni_dir_rlc_r16_s_>().sl_sn_field_len_um_r16.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "sl_rlc_cfg_pc5_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_rlc_cfg_pc5_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sl_am_rlc_r16:
      bref.unpack(c.get<sl_am_rlc_r16_s_>().ext, 1);
      HANDLE_CODE(bref.unpack(c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16_present, 1));
      if (c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16_present) {
        HANDLE_CODE(c.get<sl_am_rlc_r16_s_>().sl_sn_field_len_am_r16.unpack(bref));
      }
      break;
    case types::sl_um_bi_dir_rlc_r16:
      bref.unpack(c.get<sl_um_bi_dir_rlc_r16_s_>().ext, 1);
      HANDLE_CODE(bref.unpack(c.get<sl_um_bi_dir_rlc_r16_s_>().sl_sn_field_len_um_r16_present, 1));
      if (c.get<sl_um_bi_dir_rlc_r16_s_>().sl_sn_field_len_um_r16_present) {
        HANDLE_CODE(c.get<sl_um_bi_dir_rlc_r16_s_>().sl_sn_field_len_um_r16.unpack(bref));
      }
      break;
    case types::sl_um_uni_dir_rlc_r16:
      bref.unpack(c.get<sl_um_uni_dir_rlc_r16_s_>().ext, 1);
      HANDLE_CODE(bref.unpack(c.get<sl_um_uni_dir_rlc_r16_s_>().sl_sn_field_len_um_r16_present, 1));
      if (c.get<sl_um_uni_dir_rlc_r16_s_>().sl_sn_field_len_um_r16_present) {
        HANDLE_CODE(c.get<sl_um_uni_dir_rlc_r16_s_>().sl_sn_field_len_um_r16.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "sl_rlc_cfg_pc5_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_rlc_cfg_pc5_r16_c::types_opts::to_string() const
{
  static const char* names[] = {"sl-AM-RLC-r16", "sl-UM-Bi-Directional-RLC-r16", "sl-UM-Uni-Directional-RLC-r16"};
  return convert_enum_idx(names, 3, value, "sl_rlc_cfg_pc5_r16_c::types");
}

// SL-PDCP-ConfigPC5-r16 ::= SEQUENCE
SRSASN_CODE sl_pdcp_cfg_pc5_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_pdcp_sn_size_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_out_of_order_delivery_r16_present, 1));

  if (sl_pdcp_sn_size_r16_present) {
    HANDLE_CODE(sl_pdcp_sn_size_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_pdcp_cfg_pc5_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_pdcp_sn_size_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_out_of_order_delivery_r16_present, 1));

  if (sl_pdcp_sn_size_r16_present) {
    HANDLE_CODE(sl_pdcp_sn_size_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_pdcp_cfg_pc5_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_pdcp_sn_size_r16_present) {
    j.write_str("sl-PDCP-SN-Size-r16", sl_pdcp_sn_size_r16.to_string());
  }
  if (sl_out_of_order_delivery_r16_present) {
    j.write_str("sl-OutOfOrderDelivery-r16", "true");
  }
  j.end_obj();
}

const char* sl_pdcp_cfg_pc5_r16_s::sl_pdcp_sn_size_r16_opts::to_string() const
{
  static const char* names[] = {"len12bits", "len18bits"};
  return convert_enum_idx(names, 2, value, "sl_pdcp_cfg_pc5_r16_s::sl_pdcp_sn_size_r16_e_");
}
uint8_t sl_pdcp_cfg_pc5_r16_s::sl_pdcp_sn_size_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {12, 18};
  return map_enum_number(numbers, 2, value, "sl_pdcp_cfg_pc5_r16_s::sl_pdcp_sn_size_r16_e_");
}

// SL-RLC-ChannelConfigPC5-r17 ::= SEQUENCE
SRSASN_CODE sl_rlc_ch_cfg_pc5_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_rlc_cfg_pc5_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_mac_lc_ch_cfg_pc5_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, sl_rlc_ch_id_pc5_r17, (uint16_t)1u, (uint16_t)512u));
  if (sl_rlc_cfg_pc5_r17_present) {
    HANDLE_CODE(sl_rlc_cfg_pc5_r17.pack(bref));
  }
  if (sl_mac_lc_ch_cfg_pc5_r17_present) {
    HANDLE_CODE(sl_mac_lc_ch_cfg_pc5_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_rlc_ch_cfg_pc5_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_rlc_cfg_pc5_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_mac_lc_ch_cfg_pc5_r17_present, 1));

  HANDLE_CODE(unpack_integer(sl_rlc_ch_id_pc5_r17, bref, (uint16_t)1u, (uint16_t)512u));
  if (sl_rlc_cfg_pc5_r17_present) {
    HANDLE_CODE(sl_rlc_cfg_pc5_r17.unpack(bref));
  }
  if (sl_mac_lc_ch_cfg_pc5_r17_present) {
    HANDLE_CODE(sl_mac_lc_ch_cfg_pc5_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_rlc_ch_cfg_pc5_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-RLC-ChannelID-PC5-r17", sl_rlc_ch_id_pc5_r17);
  if (sl_rlc_cfg_pc5_r17_present) {
    j.write_fieldname("sl-RLC-ConfigPC5-r17");
    sl_rlc_cfg_pc5_r17.to_json(j);
  }
  if (sl_mac_lc_ch_cfg_pc5_r17_present) {
    j.write_fieldname("sl-MAC-LogicalChannelConfigPC5-r17");
    sl_mac_lc_ch_cfg_pc5_r17.to_json(j);
  }
  j.end_obj();
}

// SL-SDAP-ConfigPC5-r16 ::= SEQUENCE
SRSASN_CODE sl_sdap_cfg_pc5_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_mapped_qos_flows_to_add_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_mapped_qos_flows_to_release_list_r16.size() > 0, 1));

  if (sl_mapped_qos_flows_to_add_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_mapped_qos_flows_to_add_list_r16, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (sl_mapped_qos_flows_to_release_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_mapped_qos_flows_to_release_list_r16, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  HANDLE_CODE(sl_sdap_hdr_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_sdap_cfg_pc5_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sl_mapped_qos_flows_to_add_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_mapped_qos_flows_to_add_list_r16_present, 1));
  bool sl_mapped_qos_flows_to_release_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_mapped_qos_flows_to_release_list_r16_present, 1));

  if (sl_mapped_qos_flows_to_add_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_mapped_qos_flows_to_add_list_r16, bref, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  if (sl_mapped_qos_flows_to_release_list_r16_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(sl_mapped_qos_flows_to_release_list_r16, bref, 1, 64, integer_packer<uint8_t>(1, 64)));
  }
  HANDLE_CODE(sl_sdap_hdr_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_sdap_cfg_pc5_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_mapped_qos_flows_to_add_list_r16.size() > 0) {
    j.start_array("sl-MappedQoS-FlowsToAddList-r16");
    for (const auto& e1 : sl_mapped_qos_flows_to_add_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_mapped_qos_flows_to_release_list_r16.size() > 0) {
    j.start_array("sl-MappedQoS-FlowsToReleaseList-r16");
    for (const auto& e1 : sl_mapped_qos_flows_to_release_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.write_str("sl-SDAP-Header-r16", sl_sdap_hdr_r16.to_string());
  j.end_obj();
}

const char* sl_sdap_cfg_pc5_r16_s::sl_sdap_hdr_r16_opts::to_string() const
{
  static const char* names[] = {"present", "absent"};
  return convert_enum_idx(names, 2, value, "sl_sdap_cfg_pc5_r16_s::sl_sdap_hdr_r16_e_");
}

// RRCReconfigurationSidelink-v1700-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_sidelink_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_drx_cfg_uc_pc5_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_latency_bound_iuc_report_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_rlc_ch_to_release_list_pc5_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_rlc_ch_to_add_mod_list_pc5_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (sl_drx_cfg_uc_pc5_r17_present) {
    HANDLE_CODE(sl_drx_cfg_uc_pc5_r17.pack(bref));
  }
  if (sl_latency_bound_iuc_report_r17_present) {
    HANDLE_CODE(sl_latency_bound_iuc_report_r17.pack(bref));
  }
  if (sl_rlc_ch_to_release_list_pc5_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rlc_ch_to_release_list_pc5_r17, 1, 512, integer_packer<uint16_t>(1, 512)));
  }
  if (sl_rlc_ch_to_add_mod_list_pc5_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rlc_ch_to_add_mod_list_pc5_r17, 1, 512));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_sidelink_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_drx_cfg_uc_pc5_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_latency_bound_iuc_report_r17_present, 1));
  bool sl_rlc_ch_to_release_list_pc5_r17_present;
  HANDLE_CODE(bref.unpack(sl_rlc_ch_to_release_list_pc5_r17_present, 1));
  bool sl_rlc_ch_to_add_mod_list_pc5_r17_present;
  HANDLE_CODE(bref.unpack(sl_rlc_ch_to_add_mod_list_pc5_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (sl_drx_cfg_uc_pc5_r17_present) {
    HANDLE_CODE(sl_drx_cfg_uc_pc5_r17.unpack(bref));
  }
  if (sl_latency_bound_iuc_report_r17_present) {
    HANDLE_CODE(sl_latency_bound_iuc_report_r17.unpack(bref));
  }
  if (sl_rlc_ch_to_release_list_pc5_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rlc_ch_to_release_list_pc5_r17, bref, 1, 512, integer_packer<uint16_t>(1, 512)));
  }
  if (sl_rlc_ch_to_add_mod_list_pc5_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rlc_ch_to_add_mod_list_pc5_r17, bref, 1, 512));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_sidelink_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_drx_cfg_uc_pc5_r17_present) {
    j.write_fieldname("sl-DRX-ConfigUC-PC5-r17");
    sl_drx_cfg_uc_pc5_r17.to_json(j);
  }
  if (sl_latency_bound_iuc_report_r17_present) {
    j.write_fieldname("sl-LatencyBoundIUC-Report-r17");
    sl_latency_bound_iuc_report_r17.to_json(j);
  }
  if (sl_rlc_ch_to_release_list_pc5_r17.size() > 0) {
    j.start_array("sl-RLC-ChannelToReleaseListPC5-r17");
    for (const auto& e1 : sl_rlc_ch_to_release_list_pc5_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_rlc_ch_to_add_mod_list_pc5_r17.size() > 0) {
    j.start_array("sl-RLC-ChannelToAddModListPC5-r17");
    for (const auto& e1 : sl_rlc_ch_to_add_mod_list_pc5_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// SL-CSI-RS-Config-r16 ::= SEQUENCE
SRSASN_CODE sl_csi_rs_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_csi_rs_freq_alloc_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_csi_rs_first_symbol_r16_present, 1));

  if (sl_csi_rs_freq_alloc_r16_present) {
    HANDLE_CODE(sl_csi_rs_freq_alloc_r16.pack(bref));
  }
  if (sl_csi_rs_first_symbol_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_csi_rs_first_symbol_r16, (uint8_t)3u, (uint8_t)12u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_csi_rs_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_csi_rs_freq_alloc_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_csi_rs_first_symbol_r16_present, 1));

  if (sl_csi_rs_freq_alloc_r16_present) {
    HANDLE_CODE(sl_csi_rs_freq_alloc_r16.unpack(bref));
  }
  if (sl_csi_rs_first_symbol_r16_present) {
    HANDLE_CODE(unpack_integer(sl_csi_rs_first_symbol_r16, bref, (uint8_t)3u, (uint8_t)12u));
  }

  return SRSASN_SUCCESS;
}
void sl_csi_rs_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_csi_rs_freq_alloc_r16_present) {
    j.write_fieldname("sl-CSI-RS-FreqAllocation-r16");
    sl_csi_rs_freq_alloc_r16.to_json(j);
  }
  if (sl_csi_rs_first_symbol_r16_present) {
    j.write_int("sl-CSI-RS-FirstSymbol-r16", sl_csi_rs_first_symbol_r16);
  }
  j.end_obj();
}

void sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_::destroy_()
{
  switch (type_) {
    case types::sl_one_ant_port_r16:
      c.destroy<fixed_bitstring<12>>();
      break;
    case types::sl_two_ant_port_r16:
      c.destroy<fixed_bitstring<6>>();
      break;
    default:
      break;
  }
}
void sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::sl_one_ant_port_r16:
      c.init<fixed_bitstring<12>>();
      break;
    case types::sl_two_ant_port_r16:
      c.init<fixed_bitstring<6>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_");
  }
}
sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_::sl_csi_rs_freq_alloc_r16_c_(
    const sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::sl_one_ant_port_r16:
      c.init(other.c.get<fixed_bitstring<12>>());
      break;
    case types::sl_two_ant_port_r16:
      c.init(other.c.get<fixed_bitstring<6>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_");
  }
}
sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_& sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_::operator=(
    const sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::sl_one_ant_port_r16:
      c.set(other.c.get<fixed_bitstring<12>>());
      break;
    case types::sl_two_ant_port_r16:
      c.set(other.c.get<fixed_bitstring<6>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_");
  }

  return *this;
}
fixed_bitstring<12>& sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_::set_sl_one_ant_port_r16()
{
  set(types::sl_one_ant_port_r16);
  return c.get<fixed_bitstring<12>>();
}
fixed_bitstring<6>& sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_::set_sl_two_ant_port_r16()
{
  set(types::sl_two_ant_port_r16);
  return c.get<fixed_bitstring<6>>();
}
void sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::sl_one_ant_port_r16:
      j.write_str("sl-OneAntennaPort-r16", c.get<fixed_bitstring<12>>().to_string());
      break;
    case types::sl_two_ant_port_r16:
      j.write_str("sl-TwoAntennaPort-r16", c.get<fixed_bitstring<6>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::sl_one_ant_port_r16:
      HANDLE_CODE(c.get<fixed_bitstring<12>>().pack(bref));
      break;
    case types::sl_two_ant_port_r16:
      HANDLE_CODE(c.get<fixed_bitstring<6>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::sl_one_ant_port_r16:
      HANDLE_CODE(c.get<fixed_bitstring<12>>().unpack(bref));
      break;
    case types::sl_two_ant_port_r16:
      HANDLE_CODE(c.get<fixed_bitstring<6>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_::types_opts::to_string() const
{
  static const char* names[] = {"sl-OneAntennaPort-r16", "sl-TwoAntennaPort-r16"};
  return convert_enum_idx(names, 2, value, "sl_csi_rs_cfg_r16_s::sl_csi_rs_freq_alloc_r16_c_::types");
}

// SLRB-Config-r16 ::= SEQUENCE
SRSASN_CODE slrb_cfg_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_sdap_cfg_pc5_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_pdcp_cfg_pc5_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_rlc_cfg_pc5_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_mac_lc_ch_cfg_pc5_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, slrb_pc5_cfg_idx_r16, (uint16_t)1u, (uint16_t)512u));
  if (sl_sdap_cfg_pc5_r16_present) {
    HANDLE_CODE(sl_sdap_cfg_pc5_r16.pack(bref));
  }
  if (sl_pdcp_cfg_pc5_r16_present) {
    HANDLE_CODE(sl_pdcp_cfg_pc5_r16.pack(bref));
  }
  if (sl_rlc_cfg_pc5_r16_present) {
    HANDLE_CODE(sl_rlc_cfg_pc5_r16.pack(bref));
  }
  if (sl_mac_lc_ch_cfg_pc5_r16_present) {
    HANDLE_CODE(sl_mac_lc_ch_cfg_pc5_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE slrb_cfg_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_sdap_cfg_pc5_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_pdcp_cfg_pc5_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_rlc_cfg_pc5_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_mac_lc_ch_cfg_pc5_r16_present, 1));

  HANDLE_CODE(unpack_integer(slrb_pc5_cfg_idx_r16, bref, (uint16_t)1u, (uint16_t)512u));
  if (sl_sdap_cfg_pc5_r16_present) {
    HANDLE_CODE(sl_sdap_cfg_pc5_r16.unpack(bref));
  }
  if (sl_pdcp_cfg_pc5_r16_present) {
    HANDLE_CODE(sl_pdcp_cfg_pc5_r16.unpack(bref));
  }
  if (sl_rlc_cfg_pc5_r16_present) {
    HANDLE_CODE(sl_rlc_cfg_pc5_r16.unpack(bref));
  }
  if (sl_mac_lc_ch_cfg_pc5_r16_present) {
    HANDLE_CODE(sl_mac_lc_ch_cfg_pc5_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void slrb_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("slrb-PC5-ConfigIndex-r16", slrb_pc5_cfg_idx_r16);
  if (sl_sdap_cfg_pc5_r16_present) {
    j.write_fieldname("sl-SDAP-ConfigPC5-r16");
    sl_sdap_cfg_pc5_r16.to_json(j);
  }
  if (sl_pdcp_cfg_pc5_r16_present) {
    j.write_fieldname("sl-PDCP-ConfigPC5-r16");
    sl_pdcp_cfg_pc5_r16.to_json(j);
  }
  if (sl_rlc_cfg_pc5_r16_present) {
    j.write_fieldname("sl-RLC-ConfigPC5-r16");
    sl_rlc_cfg_pc5_r16.to_json(j);
  }
  if (sl_mac_lc_ch_cfg_pc5_r16_present) {
    j.write_fieldname("sl-MAC-LogicalChannelConfigPC5-r16");
    sl_mac_lc_ch_cfg_pc5_r16.to_json(j);
  }
  j.end_obj();
}

// RRCReconfigurationSidelink-r16-IEs ::= SEQUENCE
SRSASN_CODE rrc_recfg_sidelink_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(slrb_cfg_to_add_mod_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(slrb_cfg_to_release_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_meas_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_csi_rs_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_reset_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_latency_bound_csi_report_r16_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (slrb_cfg_to_add_mod_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, slrb_cfg_to_add_mod_list_r16, 1, 512));
  }
  if (slrb_cfg_to_release_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, slrb_cfg_to_release_list_r16, 1, 512, integer_packer<uint16_t>(1, 512)));
  }
  if (sl_meas_cfg_r16_present) {
    HANDLE_CODE(sl_meas_cfg_r16.pack(bref));
  }
  if (sl_csi_rs_cfg_r16_present) {
    HANDLE_CODE(sl_csi_rs_cfg_r16.pack(bref));
  }
  if (sl_latency_bound_csi_report_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_latency_bound_csi_report_r16, (uint8_t)3u, (uint8_t)160u));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_sidelink_r16_ies_s::unpack(cbit_ref& bref)
{
  bool slrb_cfg_to_add_mod_list_r16_present;
  HANDLE_CODE(bref.unpack(slrb_cfg_to_add_mod_list_r16_present, 1));
  bool slrb_cfg_to_release_list_r16_present;
  HANDLE_CODE(bref.unpack(slrb_cfg_to_release_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_meas_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_csi_rs_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_reset_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_latency_bound_csi_report_r16_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (slrb_cfg_to_add_mod_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(slrb_cfg_to_add_mod_list_r16, bref, 1, 512));
  }
  if (slrb_cfg_to_release_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(slrb_cfg_to_release_list_r16, bref, 1, 512, integer_packer<uint16_t>(1, 512)));
  }
  if (sl_meas_cfg_r16_present) {
    HANDLE_CODE(sl_meas_cfg_r16.unpack(bref));
  }
  if (sl_csi_rs_cfg_r16_present) {
    HANDLE_CODE(sl_csi_rs_cfg_r16.unpack(bref));
  }
  if (sl_latency_bound_csi_report_r16_present) {
    HANDLE_CODE(unpack_integer(sl_latency_bound_csi_report_r16, bref, (uint8_t)3u, (uint8_t)160u));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_recfg_sidelink_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (slrb_cfg_to_add_mod_list_r16.size() > 0) {
    j.start_array("slrb-ConfigToAddModList-r16");
    for (const auto& e1 : slrb_cfg_to_add_mod_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (slrb_cfg_to_release_list_r16.size() > 0) {
    j.start_array("slrb-ConfigToReleaseList-r16");
    for (const auto& e1 : slrb_cfg_to_release_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_meas_cfg_r16_present) {
    j.write_fieldname("sl-MeasConfig-r16");
    sl_meas_cfg_r16.to_json(j);
  }
  if (sl_csi_rs_cfg_r16_present) {
    j.write_fieldname("sl-CSI-RS-Config-r16");
    sl_csi_rs_cfg_r16.to_json(j);
  }
  if (sl_reset_cfg_r16_present) {
    j.write_str("sl-ResetConfig-r16", "true");
  }
  if (sl_latency_bound_csi_report_r16_present) {
    j.write_int("sl-LatencyBoundCSI-Report-r16", sl_latency_bound_csi_report_r16);
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// RRCReconfigurationSidelink ::= SEQUENCE
SRSASN_CODE rrc_recfg_sidelink_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id_r16, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_sidelink_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id_r16, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void rrc_recfg_sidelink_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier-r16", rrc_transaction_id_r16);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void rrc_recfg_sidelink_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
rrc_recfg_sidelink_r16_ies_s& rrc_recfg_sidelink_s::crit_exts_c_::set_rrc_recfg_sidelink_r16()
{
  set(types::rrc_recfg_sidelink_r16);
  return c;
}
void rrc_recfg_sidelink_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void rrc_recfg_sidelink_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::rrc_recfg_sidelink_r16:
      j.write_fieldname("rrcReconfigurationSidelink-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_sidelink_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE rrc_recfg_sidelink_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::rrc_recfg_sidelink_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_sidelink_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_recfg_sidelink_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::rrc_recfg_sidelink_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_recfg_sidelink_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_recfg_sidelink_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"rrcReconfigurationSidelink-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "rrc_recfg_sidelink_s::crit_exts_c_::types");
}

// SL-SIB-ReqInfo-r17 ::= ENUMERATED
const char* sl_sib_req_info_r17_opts::to_string() const
{
  static const char* names[] = {
      "sib1",       "sib2",       "sib3",       "sib4",       "sib5",       "sib6",        "sib7",        "sib8",
      "sib9",       "sib10",      "sib11",      "sib12",      "sib13",      "sib14",       "sib15",       "sib16",
      "sib17",      "sib18",      "sib19",      "sib20",      "sib21",      "sibNotReq11", "sibNotReq10", "sibNotReq9",
      "sibNotReq8", "sibNotReq7", "sibNotReq6", "sibNotReq5", "sibNotReq4", "sibNotReq3",  "sibNotReq2",  "sibNotReq1"};
  return convert_enum_idx(names, 32, value, "sl_sib_req_info_r17_e");
}

// SL-PagingInfo-RemoteUE-r17 ::= SEQUENCE
SRSASN_CODE sl_paging_info_remote_ue_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_paging_cycle_remote_ue_r17_present, 1));

  HANDLE_CODE(sl_paging_id_remote_ue_r17.pack(bref));
  if (sl_paging_cycle_remote_ue_r17_present) {
    HANDLE_CODE(sl_paging_cycle_remote_ue_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_paging_info_remote_ue_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_paging_cycle_remote_ue_r17_present, 1));

  HANDLE_CODE(sl_paging_id_remote_ue_r17.unpack(bref));
  if (sl_paging_cycle_remote_ue_r17_present) {
    HANDLE_CODE(sl_paging_cycle_remote_ue_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_paging_info_remote_ue_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sl-PagingIdentityRemoteUE-r17");
  sl_paging_id_remote_ue_r17.to_json(j);
  if (sl_paging_cycle_remote_ue_r17_present) {
    j.write_str("sl-PagingCycleRemoteUE-r17", sl_paging_cycle_remote_ue_r17.to_string());
  }
  j.end_obj();
}

// RemoteUEInformationSidelink-r17-IEs ::= SEQUENCE
SRSASN_CODE remote_ue_info_sidelink_r17_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_requested_sib_list_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_paging_info_remote_ue_r17_present, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (sl_requested_sib_list_r17_present) {
    HANDLE_CODE(sl_requested_sib_list_r17.pack(bref));
  }
  if (sl_paging_info_remote_ue_r17_present) {
    HANDLE_CODE(sl_paging_info_remote_ue_r17.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE remote_ue_info_sidelink_r17_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_requested_sib_list_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_paging_info_remote_ue_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (sl_requested_sib_list_r17_present) {
    HANDLE_CODE(sl_requested_sib_list_r17.unpack(bref));
  }
  if (sl_paging_info_remote_ue_r17_present) {
    HANDLE_CODE(sl_paging_info_remote_ue_r17.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void remote_ue_info_sidelink_r17_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_requested_sib_list_r17_present) {
    j.write_fieldname("sl-RequestedSIB-List-r17");
    sl_requested_sib_list_r17.to_json(j);
  }
  if (sl_paging_info_remote_ue_r17_present) {
    j.write_fieldname("sl-PagingInfo-RemoteUE-r17");
    sl_paging_info_remote_ue_r17.to_json(j);
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// RemoteUEInformationSidelink-r17 ::= SEQUENCE
SRSASN_CODE remote_ue_info_sidelink_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE remote_ue_info_sidelink_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void remote_ue_info_sidelink_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void remote_ue_info_sidelink_r17_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
remote_ue_info_sidelink_r17_ies_s& remote_ue_info_sidelink_r17_s::crit_exts_c_::set_remote_ue_info_sidelink_r17()
{
  set(types::remote_ue_info_sidelink_r17);
  return c;
}
void remote_ue_info_sidelink_r17_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void remote_ue_info_sidelink_r17_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::remote_ue_info_sidelink_r17:
      j.write_fieldname("remoteUEInformationSidelink-r17");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "remote_ue_info_sidelink_r17_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE remote_ue_info_sidelink_r17_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::remote_ue_info_sidelink_r17:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "remote_ue_info_sidelink_r17_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE remote_ue_info_sidelink_r17_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::remote_ue_info_sidelink_r17:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "remote_ue_info_sidelink_r17_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* remote_ue_info_sidelink_r17_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"remoteUEInformationSidelink-r17", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "remote_ue_info_sidelink_r17_s::crit_exts_c_::types");
}

// MasterInformationBlockSidelink ::= SEQUENCE
SRSASN_CODE mib_sidelink_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(sl_tdd_cfg_r16.pack(bref));
  HANDLE_CODE(bref.pack(in_coverage_r16, 1));
  HANDLE_CODE(direct_frame_num_r16.pack(bref));
  HANDLE_CODE(slot_idx_r16.pack(bref));
  HANDLE_CODE(reserved_bits_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mib_sidelink_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(sl_tdd_cfg_r16.unpack(bref));
  HANDLE_CODE(bref.unpack(in_coverage_r16, 1));
  HANDLE_CODE(direct_frame_num_r16.unpack(bref));
  HANDLE_CODE(slot_idx_r16.unpack(bref));
  HANDLE_CODE(reserved_bits_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void mib_sidelink_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sl-TDD-Config-r16", sl_tdd_cfg_r16.to_string());
  j.write_bool("inCoverage-r16", in_coverage_r16);
  j.write_str("directFrameNumber-r16", direct_frame_num_r16.to_string());
  j.write_str("slotIndex-r16", slot_idx_r16.to_string());
  j.write_str("reservedBits-r16", reserved_bits_r16.to_string());
  j.end_obj();
}

// SBCCH-SL-BCH-MessageType ::= CHOICE
void sbcch_sl_bch_msg_type_c::set(types::options e)
{
  type_ = e;
}
sbcch_sl_bch_msg_type_c::c1_c_& sbcch_sl_bch_msg_type_c::set_c1()
{
  set(types::c1);
  return c;
}
void sbcch_sl_bch_msg_type_c::set_msg_class_ext()
{
  set(types::msg_class_ext);
}
void sbcch_sl_bch_msg_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "sbcch_sl_bch_msg_type_c");
  }
  j.end_obj();
}
SRSASN_CODE sbcch_sl_bch_msg_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "sbcch_sl_bch_msg_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sbcch_sl_bch_msg_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::msg_class_ext:
      break;
    default:
      log_invalid_choice_id(type_, "sbcch_sl_bch_msg_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void sbcch_sl_bch_msg_type_c::c1_c_::set(types::options e)
{
  type_ = e;
}
mib_sidelink_s& sbcch_sl_bch_msg_type_c::c1_c_::set_mib_sidelink()
{
  set(types::mib_sidelink);
  return c;
}
void sbcch_sl_bch_msg_type_c::c1_c_::set_spare1()
{
  set(types::spare1);
}
void sbcch_sl_bch_msg_type_c::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::mib_sidelink:
      j.write_fieldname("masterInformationBlockSidelink");
      c.to_json(j);
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "sbcch_sl_bch_msg_type_c::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE sbcch_sl_bch_msg_type_c::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::mib_sidelink:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "sbcch_sl_bch_msg_type_c::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sbcch_sl_bch_msg_type_c::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::mib_sidelink:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "sbcch_sl_bch_msg_type_c::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sbcch_sl_bch_msg_type_c::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"masterInformationBlockSidelink", "spare1"};
  return convert_enum_idx(names, 2, value, "sbcch_sl_bch_msg_type_c::c1_c_::types");
}

const char* sbcch_sl_bch_msg_type_c::types_opts::to_string() const
{
  static const char* names[] = {"c1", "messageClassExtension"};
  return convert_enum_idx(names, 2, value, "sbcch_sl_bch_msg_type_c::types");
}
uint8_t sbcch_sl_bch_msg_type_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "sbcch_sl_bch_msg_type_c::types");
}

// SBCCH-SL-BCH-Message ::= SEQUENCE
SRSASN_CODE sbcch_sl_bch_msg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(msg.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE sbcch_sl_bch_msg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(msg.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void sbcch_sl_bch_msg_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("SBCCH-SL-BCH-Message");
  j.write_fieldname("message");
  msg.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

// MAC-ParametersSidelink-r17 ::= SEQUENCE
SRSASN_CODE mac_params_sidelink_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(drx_on_sidelink_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mac_params_sidelink_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(drx_on_sidelink_r17_present, 1));

  return SRSASN_SUCCESS;
}
void mac_params_sidelink_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (drx_on_sidelink_r17_present) {
    j.write_str("drx-OnSidelink-r17", "supported");
  }
  j.end_obj();
}

// AccessStratumReleaseSidelink-r16 ::= ENUMERATED
const char* access_stratum_release_sidelink_r16_opts::to_string() const
{
  static const char* names[] = {"rel16", "rel17", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "access_stratum_release_sidelink_r16_e");
}
uint8_t access_stratum_release_sidelink_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {16, 17};
  return map_enum_number(numbers, 2, value, "access_stratum_release_sidelink_r16_e");
}

// PDCP-ParametersSidelink-r16 ::= SEQUENCE
SRSASN_CODE pdcp_params_sidelink_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(out_of_order_delivery_sidelink_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcp_params_sidelink_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(out_of_order_delivery_sidelink_r16_present, 1));

  return SRSASN_SUCCESS;
}
void pdcp_params_sidelink_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (out_of_order_delivery_sidelink_r16_present) {
    j.write_str("outOfOrderDeliverySidelink-r16", "supported");
  }
  j.end_obj();
}

// UECapabilityInformationSidelink-v1700-IEs ::= SEQUENCE
SRSASN_CODE ue_cap_info_sidelink_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mac_params_sidelink_r17_present, 1));
  HANDLE_CODE(bref.pack(supported_band_combination_list_sidelink_nr_v1710.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (mac_params_sidelink_r17_present) {
    HANDLE_CODE(mac_params_sidelink_r17.pack(bref));
  }
  if (supported_band_combination_list_sidelink_nr_v1710.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(
        bref, supported_band_combination_list_sidelink_nr_v1710, 1, 65536, SeqOfPacker<Packer>(1, 32, Packer())));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_info_sidelink_v1700_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(mac_params_sidelink_r17_present, 1));
  bool supported_band_combination_list_sidelink_nr_v1710_present;
  HANDLE_CODE(bref.unpack(supported_band_combination_list_sidelink_nr_v1710_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (mac_params_sidelink_r17_present) {
    HANDLE_CODE(mac_params_sidelink_r17.unpack(bref));
  }
  if (supported_band_combination_list_sidelink_nr_v1710_present) {
    HANDLE_CODE(unpack_dyn_seq_of(
        supported_band_combination_list_sidelink_nr_v1710, bref, 1, 65536, SeqOfPacker<Packer>(1, 32, Packer())));
  }

  return SRSASN_SUCCESS;
}
void ue_cap_info_sidelink_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mac_params_sidelink_r17_present) {
    j.write_fieldname("mac-ParametersSidelink-r17");
    mac_params_sidelink_r17.to_json(j);
  }
  if (supported_band_combination_list_sidelink_nr_v1710.size() > 0) {
    j.start_array("supportedBandCombinationListSidelinkNR-v1710");
    for (const auto& e1 : supported_band_combination_list_sidelink_nr_v1710) {
      j.start_array();
      for (const auto& e2 : e1) {
        e2.to_json(j);
      }
      j.end_array();
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// UEAssistanceInformationSidelink-r17-IEs ::= SEQUENCE
SRSASN_CODE ue_assist_info_sidelink_r17_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_preferred_drx_cfg_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (sl_preferred_drx_cfg_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_preferred_drx_cfg_list_r17, 1, 4));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_assist_info_sidelink_r17_ies_s::unpack(cbit_ref& bref)
{
  bool sl_preferred_drx_cfg_list_r17_present;
  HANDLE_CODE(bref.unpack(sl_preferred_drx_cfg_list_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (sl_preferred_drx_cfg_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_preferred_drx_cfg_list_r17, bref, 1, 4));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_assist_info_sidelink_r17_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_preferred_drx_cfg_list_r17.size() > 0) {
    j.start_array("sl-PreferredDRX-ConfigList-r17");
    for (const auto& e1 : sl_preferred_drx_cfg_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// UECapabilityEnquirySidelink-r16-IEs ::= SEQUENCE
SRSASN_CODE ue_cap_enquiry_sidelink_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(freq_band_list_filt_sidelink_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ue_cap_info_sidelink_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (freq_band_list_filt_sidelink_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, freq_band_list_filt_sidelink_r16, 1, 1280));
  }
  if (ue_cap_info_sidelink_r16.size() > 0) {
    HANDLE_CODE(ue_cap_info_sidelink_r16.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_enquiry_sidelink_r16_ies_s::unpack(cbit_ref& bref)
{
  bool freq_band_list_filt_sidelink_r16_present;
  HANDLE_CODE(bref.unpack(freq_band_list_filt_sidelink_r16_present, 1));
  bool ue_cap_info_sidelink_r16_present;
  HANDLE_CODE(bref.unpack(ue_cap_info_sidelink_r16_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (freq_band_list_filt_sidelink_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(freq_band_list_filt_sidelink_r16, bref, 1, 1280));
  }
  if (ue_cap_info_sidelink_r16_present) {
    HANDLE_CODE(ue_cap_info_sidelink_r16.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_cap_enquiry_sidelink_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (freq_band_list_filt_sidelink_r16.size() > 0) {
    j.start_array("frequencyBandListFilterSidelink-r16");
    for (const auto& e1 : freq_band_list_filt_sidelink_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ue_cap_info_sidelink_r16.size() > 0) {
    j.write_str("ue-CapabilityInformationSidelink-r16", ue_cap_info_sidelink_r16.to_string());
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// UECapabilityInformationSidelink-r16-IEs ::= SEQUENCE
SRSASN_CODE ue_cap_info_sidelink_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pdcp_params_sidelink_r16_present, 1));
  HANDLE_CODE(bref.pack(rlc_params_sidelink_r16_present, 1));
  HANDLE_CODE(bref.pack(supported_band_combination_list_sidelink_nr_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(supported_band_list_sidelink_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(applied_freq_band_list_filt_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(access_stratum_release_sidelink_r16.pack(bref));
  if (pdcp_params_sidelink_r16_present) {
    HANDLE_CODE(pdcp_params_sidelink_r16.pack(bref));
  }
  if (rlc_params_sidelink_r16_present) {
    HANDLE_CODE(rlc_params_sidelink_r16.pack(bref));
  }
  if (supported_band_combination_list_sidelink_nr_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(
        bref, supported_band_combination_list_sidelink_nr_r16, 1, 65536, SeqOfPacker<Packer>(1, 32, Packer())));
  }
  if (supported_band_list_sidelink_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_list_sidelink_r16, 1, 1024));
  }
  if (applied_freq_band_list_filt_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, applied_freq_band_list_filt_r16, 1, 1280));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_info_sidelink_r16_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pdcp_params_sidelink_r16_present, 1));
  HANDLE_CODE(bref.unpack(rlc_params_sidelink_r16_present, 1));
  bool supported_band_combination_list_sidelink_nr_r16_present;
  HANDLE_CODE(bref.unpack(supported_band_combination_list_sidelink_nr_r16_present, 1));
  bool supported_band_list_sidelink_r16_present;
  HANDLE_CODE(bref.unpack(supported_band_list_sidelink_r16_present, 1));
  bool applied_freq_band_list_filt_r16_present;
  HANDLE_CODE(bref.unpack(applied_freq_band_list_filt_r16_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(access_stratum_release_sidelink_r16.unpack(bref));
  if (pdcp_params_sidelink_r16_present) {
    HANDLE_CODE(pdcp_params_sidelink_r16.unpack(bref));
  }
  if (rlc_params_sidelink_r16_present) {
    HANDLE_CODE(rlc_params_sidelink_r16.unpack(bref));
  }
  if (supported_band_combination_list_sidelink_nr_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(
        supported_band_combination_list_sidelink_nr_r16, bref, 1, 65536, SeqOfPacker<Packer>(1, 32, Packer())));
  }
  if (supported_band_list_sidelink_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(supported_band_list_sidelink_r16, bref, 1, 1024));
  }
  if (applied_freq_band_list_filt_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(applied_freq_band_list_filt_r16, bref, 1, 1280));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_cap_info_sidelink_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("accessStratumReleaseSidelink-r16", access_stratum_release_sidelink_r16.to_string());
  if (pdcp_params_sidelink_r16_present) {
    j.write_fieldname("pdcp-ParametersSidelink-r16");
    pdcp_params_sidelink_r16.to_json(j);
  }
  if (rlc_params_sidelink_r16_present) {
    j.write_fieldname("rlc-ParametersSidelink-r16");
    rlc_params_sidelink_r16.to_json(j);
  }
  if (supported_band_combination_list_sidelink_nr_r16.size() > 0) {
    j.start_array("supportedBandCombinationListSidelinkNR-r16");
    for (const auto& e1 : supported_band_combination_list_sidelink_nr_r16) {
      j.start_array();
      for (const auto& e2 : e1) {
        e2.to_json(j);
      }
      j.end_array();
    }
    j.end_array();
  }
  if (supported_band_list_sidelink_r16.size() > 0) {
    j.start_array("supportedBandListSidelink-r16");
    for (const auto& e1 : supported_band_list_sidelink_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (applied_freq_band_list_filt_r16.size() > 0) {
    j.start_array("appliedFreqBandListFilter-r16");
    for (const auto& e1 : applied_freq_band_list_filt_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UuMessageTransferSidelink-r17-IEs ::= SEQUENCE
SRSASN_CODE uu_msg_transfer_sidelink_r17_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_paging_delivery_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_sib1_delivery_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_sys_info_delivery_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (sl_paging_delivery_r17.size() > 0) {
    HANDLE_CODE(sl_paging_delivery_r17.pack(bref));
  }
  if (sl_sib1_delivery_r17.size() > 0) {
    HANDLE_CODE(sl_sib1_delivery_r17.pack(bref));
  }
  if (sl_sys_info_delivery_r17.size() > 0) {
    HANDLE_CODE(sl_sys_info_delivery_r17.pack(bref));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE uu_msg_transfer_sidelink_r17_ies_s::unpack(cbit_ref& bref)
{
  bool sl_paging_delivery_r17_present;
  HANDLE_CODE(bref.unpack(sl_paging_delivery_r17_present, 1));
  bool sl_sib1_delivery_r17_present;
  HANDLE_CODE(bref.unpack(sl_sib1_delivery_r17_present, 1));
  bool sl_sys_info_delivery_r17_present;
  HANDLE_CODE(bref.unpack(sl_sys_info_delivery_r17_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (sl_paging_delivery_r17_present) {
    HANDLE_CODE(sl_paging_delivery_r17.unpack(bref));
  }
  if (sl_sib1_delivery_r17_present) {
    HANDLE_CODE(sl_sib1_delivery_r17.unpack(bref));
  }
  if (sl_sys_info_delivery_r17_present) {
    HANDLE_CODE(sl_sys_info_delivery_r17.unpack(bref));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void uu_msg_transfer_sidelink_r17_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_paging_delivery_r17.size() > 0) {
    j.write_str("sl-PagingDelivery-r17", sl_paging_delivery_r17.to_string());
  }
  if (sl_sib1_delivery_r17.size() > 0) {
    j.write_str("sl-SIB1-Delivery-r17", sl_sib1_delivery_r17.to_string());
  }
  if (sl_sys_info_delivery_r17.size() > 0) {
    j.write_str("sl-SystemInformationDelivery-r17", sl_sys_info_delivery_r17.to_string());
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// UEAssistanceInformationSidelink-r17 ::= SEQUENCE
SRSASN_CODE ue_assist_info_sidelink_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_assist_info_sidelink_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_assist_info_sidelink_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ue_assist_info_sidelink_r17_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ue_assist_info_sidelink_r17_ies_s& ue_assist_info_sidelink_r17_s::crit_exts_c_::set_ue_assist_info_sidelink_r17()
{
  set(types::ue_assist_info_sidelink_r17);
  return c;
}
void ue_assist_info_sidelink_r17_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ue_assist_info_sidelink_r17_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_assist_info_sidelink_r17:
      j.write_fieldname("ueAssistanceInformationSidelink-r17");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_assist_info_sidelink_r17_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ue_assist_info_sidelink_r17_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ue_assist_info_sidelink_r17:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_assist_info_sidelink_r17_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_assist_info_sidelink_r17_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ue_assist_info_sidelink_r17:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_assist_info_sidelink_r17_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_assist_info_sidelink_r17_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"ueAssistanceInformationSidelink-r17", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ue_assist_info_sidelink_r17_s::crit_exts_c_::types");
}

// UECapabilityEnquirySidelink ::= SEQUENCE
SRSASN_CODE ue_cap_enquiry_sidelink_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id_r16, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_enquiry_sidelink_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id_r16, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_cap_enquiry_sidelink_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier-r16", rrc_transaction_id_r16);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ue_cap_enquiry_sidelink_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ue_cap_enquiry_sidelink_r16_ies_s& ue_cap_enquiry_sidelink_s::crit_exts_c_::set_ue_cap_enquiry_sidelink_r16()
{
  set(types::ue_cap_enquiry_sidelink_r16);
  return c;
}
void ue_cap_enquiry_sidelink_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ue_cap_enquiry_sidelink_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_cap_enquiry_sidelink_r16:
      j.write_fieldname("ueCapabilityEnquirySidelink-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_cap_enquiry_sidelink_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ue_cap_enquiry_sidelink_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ue_cap_enquiry_sidelink_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_cap_enquiry_sidelink_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_enquiry_sidelink_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ue_cap_enquiry_sidelink_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_cap_enquiry_sidelink_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_cap_enquiry_sidelink_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"ueCapabilityEnquirySidelink-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ue_cap_enquiry_sidelink_s::crit_exts_c_::types");
}

// UECapabilityInformationSidelink ::= SEQUENCE
SRSASN_CODE ue_cap_info_sidelink_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, rrc_transaction_id_r16, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_info_sidelink_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(rrc_transaction_id_r16, bref, (uint8_t)0u, (uint8_t)3u));
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_cap_info_sidelink_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rrc-TransactionIdentifier-r16", rrc_transaction_id_r16);
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ue_cap_info_sidelink_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ue_cap_info_sidelink_r16_ies_s& ue_cap_info_sidelink_s::crit_exts_c_::set_ue_cap_info_sidelink_r16()
{
  set(types::ue_cap_info_sidelink_r16);
  return c;
}
void ue_cap_info_sidelink_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ue_cap_info_sidelink_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_cap_info_sidelink_r16:
      j.write_fieldname("ueCapabilityInformationSidelink-r16");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_cap_info_sidelink_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ue_cap_info_sidelink_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ue_cap_info_sidelink_r16:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_cap_info_sidelink_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_cap_info_sidelink_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ue_cap_info_sidelink_r16:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_cap_info_sidelink_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_cap_info_sidelink_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"ueCapabilityInformationSidelink-r16", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ue_cap_info_sidelink_s::crit_exts_c_::types");
}

// UuMessageTransferSidelink-r17 ::= SEQUENCE
SRSASN_CODE uu_msg_transfer_sidelink_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE uu_msg_transfer_sidelink_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void uu_msg_transfer_sidelink_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void uu_msg_transfer_sidelink_r17_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
uu_msg_transfer_sidelink_r17_ies_s& uu_msg_transfer_sidelink_r17_s::crit_exts_c_::set_uu_msg_transfer_sidelink_r17()
{
  set(types::uu_msg_transfer_sidelink_r17);
  return c;
}
void uu_msg_transfer_sidelink_r17_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void uu_msg_transfer_sidelink_r17_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::uu_msg_transfer_sidelink_r17:
      j.write_fieldname("uuMessageTransferSidelink-r17");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "uu_msg_transfer_sidelink_r17_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE uu_msg_transfer_sidelink_r17_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::uu_msg_transfer_sidelink_r17:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "uu_msg_transfer_sidelink_r17_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE uu_msg_transfer_sidelink_r17_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::uu_msg_transfer_sidelink_r17:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "uu_msg_transfer_sidelink_r17_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* uu_msg_transfer_sidelink_r17_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"uuMessageTransferSidelink-r17", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "uu_msg_transfer_sidelink_r17_s::crit_exts_c_::types");
}

// SCCH-MessageType ::= CHOICE
void s_cch_msg_type_c::destroy_()
{
  switch (type_) {
    case types::c1:
      c.destroy<c1_c_>();
      break;
    case types::msg_class_ext:
      c.destroy<msg_class_ext_c_>();
      break;
    default:
      break;
  }
}
void s_cch_msg_type_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::c1:
      c.init<c1_c_>();
      break;
    case types::msg_class_ext:
      c.init<msg_class_ext_c_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c");
  }
}
s_cch_msg_type_c::s_cch_msg_type_c(const s_cch_msg_type_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::c1:
      c.init(other.c.get<c1_c_>());
      break;
    case types::msg_class_ext:
      c.init(other.c.get<msg_class_ext_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c");
  }
}
s_cch_msg_type_c& s_cch_msg_type_c::operator=(const s_cch_msg_type_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::c1:
      c.set(other.c.get<c1_c_>());
      break;
    case types::msg_class_ext:
      c.set(other.c.get<msg_class_ext_c_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c");
  }

  return *this;
}
s_cch_msg_type_c::c1_c_& s_cch_msg_type_c::set_c1()
{
  set(types::c1);
  return c.get<c1_c_>();
}
s_cch_msg_type_c::msg_class_ext_c_& s_cch_msg_type_c::set_msg_class_ext()
{
  set(types::msg_class_ext);
  return c.get<msg_class_ext_c_>();
}
void s_cch_msg_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.get<c1_c_>().to_json(j);
      break;
    case types::msg_class_ext:
      j.write_fieldname("messageClassExtension");
      c.get<msg_class_ext_c_>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c");
  }
  j.end_obj();
}
SRSASN_CODE s_cch_msg_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.get<c1_c_>().pack(bref));
      break;
    case types::msg_class_ext:
      HANDLE_CODE(c.get<msg_class_ext_c_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE s_cch_msg_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.get<c1_c_>().unpack(bref));
      break;
    case types::msg_class_ext:
      HANDLE_CODE(c.get<msg_class_ext_c_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void s_cch_msg_type_c::c1_c_::destroy_()
{
  switch (type_) {
    case types::meas_report_sidelink:
      c.destroy<meas_report_sidelink_s>();
      break;
    case types::rrc_recfg_sidelink:
      c.destroy<rrc_recfg_sidelink_s>();
      break;
    case types::rrc_recfg_complete_sidelink:
      c.destroy<rrc_recfg_complete_sidelink_s>();
      break;
    case types::rrc_recfg_fail_sidelink:
      c.destroy<rrc_recfg_fail_sidelink_s>();
      break;
    case types::ue_cap_enquiry_sidelink:
      c.destroy<ue_cap_enquiry_sidelink_s>();
      break;
    case types::ue_cap_info_sidelink:
      c.destroy<ue_cap_info_sidelink_s>();
      break;
    case types::uu_msg_transfer_sidelink_r17:
      c.destroy<uu_msg_transfer_sidelink_r17_s>();
      break;
    case types::remote_ue_info_sidelink_r17:
      c.destroy<remote_ue_info_sidelink_r17_s>();
      break;
    default:
      break;
  }
}
void s_cch_msg_type_c::c1_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::meas_report_sidelink:
      c.init<meas_report_sidelink_s>();
      break;
    case types::rrc_recfg_sidelink:
      c.init<rrc_recfg_sidelink_s>();
      break;
    case types::rrc_recfg_complete_sidelink:
      c.init<rrc_recfg_complete_sidelink_s>();
      break;
    case types::rrc_recfg_fail_sidelink:
      c.init<rrc_recfg_fail_sidelink_s>();
      break;
    case types::ue_cap_enquiry_sidelink:
      c.init<ue_cap_enquiry_sidelink_s>();
      break;
    case types::ue_cap_info_sidelink:
      c.init<ue_cap_info_sidelink_s>();
      break;
    case types::uu_msg_transfer_sidelink_r17:
      c.init<uu_msg_transfer_sidelink_r17_s>();
      break;
    case types::remote_ue_info_sidelink_r17:
      c.init<remote_ue_info_sidelink_r17_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::c1_c_");
  }
}
s_cch_msg_type_c::c1_c_::c1_c_(const s_cch_msg_type_c::c1_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::meas_report_sidelink:
      c.init(other.c.get<meas_report_sidelink_s>());
      break;
    case types::rrc_recfg_sidelink:
      c.init(other.c.get<rrc_recfg_sidelink_s>());
      break;
    case types::rrc_recfg_complete_sidelink:
      c.init(other.c.get<rrc_recfg_complete_sidelink_s>());
      break;
    case types::rrc_recfg_fail_sidelink:
      c.init(other.c.get<rrc_recfg_fail_sidelink_s>());
      break;
    case types::ue_cap_enquiry_sidelink:
      c.init(other.c.get<ue_cap_enquiry_sidelink_s>());
      break;
    case types::ue_cap_info_sidelink:
      c.init(other.c.get<ue_cap_info_sidelink_s>());
      break;
    case types::uu_msg_transfer_sidelink_r17:
      c.init(other.c.get<uu_msg_transfer_sidelink_r17_s>());
      break;
    case types::remote_ue_info_sidelink_r17:
      c.init(other.c.get<remote_ue_info_sidelink_r17_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::c1_c_");
  }
}
s_cch_msg_type_c::c1_c_& s_cch_msg_type_c::c1_c_::operator=(const s_cch_msg_type_c::c1_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::meas_report_sidelink:
      c.set(other.c.get<meas_report_sidelink_s>());
      break;
    case types::rrc_recfg_sidelink:
      c.set(other.c.get<rrc_recfg_sidelink_s>());
      break;
    case types::rrc_recfg_complete_sidelink:
      c.set(other.c.get<rrc_recfg_complete_sidelink_s>());
      break;
    case types::rrc_recfg_fail_sidelink:
      c.set(other.c.get<rrc_recfg_fail_sidelink_s>());
      break;
    case types::ue_cap_enquiry_sidelink:
      c.set(other.c.get<ue_cap_enquiry_sidelink_s>());
      break;
    case types::ue_cap_info_sidelink:
      c.set(other.c.get<ue_cap_info_sidelink_s>());
      break;
    case types::uu_msg_transfer_sidelink_r17:
      c.set(other.c.get<uu_msg_transfer_sidelink_r17_s>());
      break;
    case types::remote_ue_info_sidelink_r17:
      c.set(other.c.get<remote_ue_info_sidelink_r17_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::c1_c_");
  }

  return *this;
}
meas_report_sidelink_s& s_cch_msg_type_c::c1_c_::set_meas_report_sidelink()
{
  set(types::meas_report_sidelink);
  return c.get<meas_report_sidelink_s>();
}
rrc_recfg_sidelink_s& s_cch_msg_type_c::c1_c_::set_rrc_recfg_sidelink()
{
  set(types::rrc_recfg_sidelink);
  return c.get<rrc_recfg_sidelink_s>();
}
rrc_recfg_complete_sidelink_s& s_cch_msg_type_c::c1_c_::set_rrc_recfg_complete_sidelink()
{
  set(types::rrc_recfg_complete_sidelink);
  return c.get<rrc_recfg_complete_sidelink_s>();
}
rrc_recfg_fail_sidelink_s& s_cch_msg_type_c::c1_c_::set_rrc_recfg_fail_sidelink()
{
  set(types::rrc_recfg_fail_sidelink);
  return c.get<rrc_recfg_fail_sidelink_s>();
}
ue_cap_enquiry_sidelink_s& s_cch_msg_type_c::c1_c_::set_ue_cap_enquiry_sidelink()
{
  set(types::ue_cap_enquiry_sidelink);
  return c.get<ue_cap_enquiry_sidelink_s>();
}
ue_cap_info_sidelink_s& s_cch_msg_type_c::c1_c_::set_ue_cap_info_sidelink()
{
  set(types::ue_cap_info_sidelink);
  return c.get<ue_cap_info_sidelink_s>();
}
uu_msg_transfer_sidelink_r17_s& s_cch_msg_type_c::c1_c_::set_uu_msg_transfer_sidelink_r17()
{
  set(types::uu_msg_transfer_sidelink_r17);
  return c.get<uu_msg_transfer_sidelink_r17_s>();
}
remote_ue_info_sidelink_r17_s& s_cch_msg_type_c::c1_c_::set_remote_ue_info_sidelink_r17()
{
  set(types::remote_ue_info_sidelink_r17);
  return c.get<remote_ue_info_sidelink_r17_s>();
}
void s_cch_msg_type_c::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::meas_report_sidelink:
      j.write_fieldname("measurementReportSidelink");
      c.get<meas_report_sidelink_s>().to_json(j);
      break;
    case types::rrc_recfg_sidelink:
      j.write_fieldname("rrcReconfigurationSidelink");
      c.get<rrc_recfg_sidelink_s>().to_json(j);
      break;
    case types::rrc_recfg_complete_sidelink:
      j.write_fieldname("rrcReconfigurationCompleteSidelink");
      c.get<rrc_recfg_complete_sidelink_s>().to_json(j);
      break;
    case types::rrc_recfg_fail_sidelink:
      j.write_fieldname("rrcReconfigurationFailureSidelink");
      c.get<rrc_recfg_fail_sidelink_s>().to_json(j);
      break;
    case types::ue_cap_enquiry_sidelink:
      j.write_fieldname("ueCapabilityEnquirySidelink");
      c.get<ue_cap_enquiry_sidelink_s>().to_json(j);
      break;
    case types::ue_cap_info_sidelink:
      j.write_fieldname("ueCapabilityInformationSidelink");
      c.get<ue_cap_info_sidelink_s>().to_json(j);
      break;
    case types::uu_msg_transfer_sidelink_r17:
      j.write_fieldname("uuMessageTransferSidelink-r17");
      c.get<uu_msg_transfer_sidelink_r17_s>().to_json(j);
      break;
    case types::remote_ue_info_sidelink_r17:
      j.write_fieldname("remoteUEInformationSidelink-r17");
      c.get<remote_ue_info_sidelink_r17_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE s_cch_msg_type_c::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::meas_report_sidelink:
      HANDLE_CODE(c.get<meas_report_sidelink_s>().pack(bref));
      break;
    case types::rrc_recfg_sidelink:
      HANDLE_CODE(c.get<rrc_recfg_sidelink_s>().pack(bref));
      break;
    case types::rrc_recfg_complete_sidelink:
      HANDLE_CODE(c.get<rrc_recfg_complete_sidelink_s>().pack(bref));
      break;
    case types::rrc_recfg_fail_sidelink:
      HANDLE_CODE(c.get<rrc_recfg_fail_sidelink_s>().pack(bref));
      break;
    case types::ue_cap_enquiry_sidelink:
      HANDLE_CODE(c.get<ue_cap_enquiry_sidelink_s>().pack(bref));
      break;
    case types::ue_cap_info_sidelink:
      HANDLE_CODE(c.get<ue_cap_info_sidelink_s>().pack(bref));
      break;
    case types::uu_msg_transfer_sidelink_r17:
      HANDLE_CODE(c.get<uu_msg_transfer_sidelink_r17_s>().pack(bref));
      break;
    case types::remote_ue_info_sidelink_r17:
      HANDLE_CODE(c.get<remote_ue_info_sidelink_r17_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE s_cch_msg_type_c::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::meas_report_sidelink:
      HANDLE_CODE(c.get<meas_report_sidelink_s>().unpack(bref));
      break;
    case types::rrc_recfg_sidelink:
      HANDLE_CODE(c.get<rrc_recfg_sidelink_s>().unpack(bref));
      break;
    case types::rrc_recfg_complete_sidelink:
      HANDLE_CODE(c.get<rrc_recfg_complete_sidelink_s>().unpack(bref));
      break;
    case types::rrc_recfg_fail_sidelink:
      HANDLE_CODE(c.get<rrc_recfg_fail_sidelink_s>().unpack(bref));
      break;
    case types::ue_cap_enquiry_sidelink:
      HANDLE_CODE(c.get<ue_cap_enquiry_sidelink_s>().unpack(bref));
      break;
    case types::ue_cap_info_sidelink:
      HANDLE_CODE(c.get<ue_cap_info_sidelink_s>().unpack(bref));
      break;
    case types::uu_msg_transfer_sidelink_r17:
      HANDLE_CODE(c.get<uu_msg_transfer_sidelink_r17_s>().unpack(bref));
      break;
    case types::remote_ue_info_sidelink_r17:
      HANDLE_CODE(c.get<remote_ue_info_sidelink_r17_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* s_cch_msg_type_c::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {"measurementReportSidelink",
                                "rrcReconfigurationSidelink",
                                "rrcReconfigurationCompleteSidelink",
                                "rrcReconfigurationFailureSidelink",
                                "ueCapabilityEnquirySidelink",
                                "ueCapabilityInformationSidelink",
                                "uuMessageTransferSidelink-r17",
                                "remoteUEInformationSidelink-r17"};
  return convert_enum_idx(names, 8, value, "s_cch_msg_type_c::c1_c_::types");
}

void s_cch_msg_type_c::msg_class_ext_c_::set(types::options e)
{
  type_ = e;
}
s_cch_msg_type_c::msg_class_ext_c_::c2_c_& s_cch_msg_type_c::msg_class_ext_c_::set_c2()
{
  set(types::c2);
  return c;
}
void s_cch_msg_type_c::msg_class_ext_c_::set_msg_class_ext_future_r17()
{
  set(types::msg_class_ext_future_r17);
}
void s_cch_msg_type_c::msg_class_ext_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c2:
      j.write_fieldname("c2");
      c.to_json(j);
      break;
    case types::msg_class_ext_future_r17:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::msg_class_ext_c_");
  }
  j.end_obj();
}
SRSASN_CODE s_cch_msg_type_c::msg_class_ext_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c2:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::msg_class_ext_future_r17:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::msg_class_ext_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE s_cch_msg_type_c::msg_class_ext_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c2:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::msg_class_ext_future_r17:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::msg_class_ext_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void s_cch_msg_type_c::msg_class_ext_c_::c2_c_::destroy_()
{
  switch (type_) {
    case types::notif_msg_sidelink_r17:
      c.destroy<notif_msg_sidelink_r17_s>();
      break;
    case types::ue_assist_info_sidelink_r17:
      c.destroy<ue_assist_info_sidelink_r17_s>();
      break;
    default:
      break;
  }
}
void s_cch_msg_type_c::msg_class_ext_c_::c2_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::notif_msg_sidelink_r17:
      c.init<notif_msg_sidelink_r17_s>();
      break;
    case types::ue_assist_info_sidelink_r17:
      c.init<ue_assist_info_sidelink_r17_s>();
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::msg_class_ext_c_::c2_c_");
  }
}
s_cch_msg_type_c::msg_class_ext_c_::c2_c_::c2_c_(const s_cch_msg_type_c::msg_class_ext_c_::c2_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::notif_msg_sidelink_r17:
      c.init(other.c.get<notif_msg_sidelink_r17_s>());
      break;
    case types::ue_assist_info_sidelink_r17:
      c.init(other.c.get<ue_assist_info_sidelink_r17_s>());
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::msg_class_ext_c_::c2_c_");
  }
}
s_cch_msg_type_c::msg_class_ext_c_::c2_c_&
s_cch_msg_type_c::msg_class_ext_c_::c2_c_::operator=(const s_cch_msg_type_c::msg_class_ext_c_::c2_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::notif_msg_sidelink_r17:
      c.set(other.c.get<notif_msg_sidelink_r17_s>());
      break;
    case types::ue_assist_info_sidelink_r17:
      c.set(other.c.get<ue_assist_info_sidelink_r17_s>());
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::msg_class_ext_c_::c2_c_");
  }

  return *this;
}
notif_msg_sidelink_r17_s& s_cch_msg_type_c::msg_class_ext_c_::c2_c_::set_notif_msg_sidelink_r17()
{
  set(types::notif_msg_sidelink_r17);
  return c.get<notif_msg_sidelink_r17_s>();
}
ue_assist_info_sidelink_r17_s& s_cch_msg_type_c::msg_class_ext_c_::c2_c_::set_ue_assist_info_sidelink_r17()
{
  set(types::ue_assist_info_sidelink_r17);
  return c.get<ue_assist_info_sidelink_r17_s>();
}
void s_cch_msg_type_c::msg_class_ext_c_::c2_c_::set_spare6()
{
  set(types::spare6);
}
void s_cch_msg_type_c::msg_class_ext_c_::c2_c_::set_spare5()
{
  set(types::spare5);
}
void s_cch_msg_type_c::msg_class_ext_c_::c2_c_::set_spare4()
{
  set(types::spare4);
}
void s_cch_msg_type_c::msg_class_ext_c_::c2_c_::set_spare3()
{
  set(types::spare3);
}
void s_cch_msg_type_c::msg_class_ext_c_::c2_c_::set_spare2()
{
  set(types::spare2);
}
void s_cch_msg_type_c::msg_class_ext_c_::c2_c_::set_spare1()
{
  set(types::spare1);
}
void s_cch_msg_type_c::msg_class_ext_c_::c2_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::notif_msg_sidelink_r17:
      j.write_fieldname("notificationMessageSidelink-r17");
      c.get<notif_msg_sidelink_r17_s>().to_json(j);
      break;
    case types::ue_assist_info_sidelink_r17:
      j.write_fieldname("ueAssistanceInformationSidelink-r17");
      c.get<ue_assist_info_sidelink_r17_s>().to_json(j);
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::msg_class_ext_c_::c2_c_");
  }
  j.end_obj();
}
SRSASN_CODE s_cch_msg_type_c::msg_class_ext_c_::c2_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::notif_msg_sidelink_r17:
      HANDLE_CODE(c.get<notif_msg_sidelink_r17_s>().pack(bref));
      break;
    case types::ue_assist_info_sidelink_r17:
      HANDLE_CODE(c.get<ue_assist_info_sidelink_r17_s>().pack(bref));
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::msg_class_ext_c_::c2_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE s_cch_msg_type_c::msg_class_ext_c_::c2_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::notif_msg_sidelink_r17:
      HANDLE_CODE(c.get<notif_msg_sidelink_r17_s>().unpack(bref));
      break;
    case types::ue_assist_info_sidelink_r17:
      HANDLE_CODE(c.get<ue_assist_info_sidelink_r17_s>().unpack(bref));
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "s_cch_msg_type_c::msg_class_ext_c_::c2_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* s_cch_msg_type_c::msg_class_ext_c_::c2_c_::types_opts::to_string() const
{
  static const char* names[] = {"notificationMessageSidelink-r17",
                                "ueAssistanceInformationSidelink-r17",
                                "spare6",
                                "spare5",
                                "spare4",
                                "spare3",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 8, value, "s_cch_msg_type_c::msg_class_ext_c_::c2_c_::types");
}

const char* s_cch_msg_type_c::msg_class_ext_c_::types_opts::to_string() const
{
  static const char* names[] = {"c2", "messageClassExtensionFuture-r17"};
  return convert_enum_idx(names, 2, value, "s_cch_msg_type_c::msg_class_ext_c_::types");
}
uint8_t s_cch_msg_type_c::msg_class_ext_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {2};
  return map_enum_number(numbers, 1, value, "s_cch_msg_type_c::msg_class_ext_c_::types");
}

const char* s_cch_msg_type_c::types_opts::to_string() const
{
  static const char* names[] = {"c1", "messageClassExtension"};
  return convert_enum_idx(names, 2, value, "s_cch_msg_type_c::types");
}
uint8_t s_cch_msg_type_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "s_cch_msg_type_c::types");
}

// SCCH-Message ::= SEQUENCE
SRSASN_CODE s_cch_msg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(msg.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE s_cch_msg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(msg.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void s_cch_msg_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("SCCH-Message");
  j.write_fieldname("message");
  msg.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

// SL-AccessInfo-L2U2N-r17 ::= SEQUENCE
SRSASN_CODE sl_access_info_l2_u2_n_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(cell_access_related_info_r17.pack(bref));
  HANDLE_CODE(sl_serving_cell_info_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_access_info_l2_u2_n_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(cell_access_related_info_r17.unpack(bref));
  HANDLE_CODE(sl_serving_cell_info_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_access_info_l2_u2_n_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("cellAccessRelatedInfo-r17");
  cell_access_related_info_r17.to_json(j);
  j.write_fieldname("sl-ServingCellInfo-r17");
  sl_serving_cell_info_r17.to_json(j);
  j.end_obj();
}

// SL-MeasResultRelay-r17 ::= SEQUENCE
SRSASN_CODE sl_meas_result_relay_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(cell_id_r17.pack(bref));
  HANDLE_CODE(sl_relay_ue_id_r17.pack(bref));
  HANDLE_CODE(sl_meas_result_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_meas_result_relay_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(cell_id_r17.unpack(bref));
  HANDLE_CODE(sl_relay_ue_id_r17.unpack(bref));
  HANDLE_CODE(sl_meas_result_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_meas_result_relay_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("cellIdentity-r17");
  cell_id_r17.to_json(j);
  j.write_str("sl-RelayUE-Identity-r17", sl_relay_ue_id_r17.to_string());
  j.write_fieldname("sl-MeasResult-r17");
  sl_meas_result_r17.to_json(j);
  j.end_obj();
}

// SL-PreconfigGeneral-r16 ::= SEQUENCE
SRSASN_CODE sl_precfg_general_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_tdd_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(reserved_bits_r16_present, 1));

  if (sl_tdd_cfg_r16_present) {
    HANDLE_CODE(sl_tdd_cfg_r16.pack(bref));
  }
  if (reserved_bits_r16_present) {
    HANDLE_CODE(reserved_bits_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_precfg_general_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_tdd_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(reserved_bits_r16_present, 1));

  if (sl_tdd_cfg_r16_present) {
    HANDLE_CODE(sl_tdd_cfg_r16.unpack(bref));
  }
  if (reserved_bits_r16_present) {
    HANDLE_CODE(reserved_bits_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sl_precfg_general_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_tdd_cfg_r16_present) {
    j.write_fieldname("sl-TDD-Configuration-r16");
    sl_tdd_cfg_r16.to_json(j);
  }
  if (reserved_bits_r16_present) {
    j.write_str("reservedBits-r16", reserved_bits_r16.to_string());
  }
  j.end_obj();
}

// SL-TxProfile-r17 ::= ENUMERATED
const char* sl_tx_profile_r17_opts::to_string() const
{
  static const char* names[] = {
      "drx-Compatible", "drx-Incompatible", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "sl_tx_profile_r17_e");
}

// SL-RoHC-Profiles-r16 ::= SEQUENCE
SRSASN_CODE sl_ro_hc_profiles_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(profile0x0001_r16, 1));
  HANDLE_CODE(bref.pack(profile0x0002_r16, 1));
  HANDLE_CODE(bref.pack(profile0x0003_r16, 1));
  HANDLE_CODE(bref.pack(profile0x0004_r16, 1));
  HANDLE_CODE(bref.pack(profile0x0006_r16, 1));
  HANDLE_CODE(bref.pack(profile0x0101_r16, 1));
  HANDLE_CODE(bref.pack(profile0x0102_r16, 1));
  HANDLE_CODE(bref.pack(profile0x0103_r16, 1));
  HANDLE_CODE(bref.pack(profile0x0104_r16, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_ro_hc_profiles_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(profile0x0001_r16, 1));
  HANDLE_CODE(bref.unpack(profile0x0002_r16, 1));
  HANDLE_CODE(bref.unpack(profile0x0003_r16, 1));
  HANDLE_CODE(bref.unpack(profile0x0004_r16, 1));
  HANDLE_CODE(bref.unpack(profile0x0006_r16, 1));
  HANDLE_CODE(bref.unpack(profile0x0101_r16, 1));
  HANDLE_CODE(bref.unpack(profile0x0102_r16, 1));
  HANDLE_CODE(bref.unpack(profile0x0103_r16, 1));
  HANDLE_CODE(bref.unpack(profile0x0104_r16, 1));

  return SRSASN_SUCCESS;
}
void sl_ro_hc_profiles_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_bool("profile0x0001-r16", profile0x0001_r16);
  j.write_bool("profile0x0002-r16", profile0x0002_r16);
  j.write_bool("profile0x0003-r16", profile0x0003_r16);
  j.write_bool("profile0x0004-r16", profile0x0004_r16);
  j.write_bool("profile0x0006-r16", profile0x0006_r16);
  j.write_bool("profile0x0101-r16", profile0x0101_r16);
  j.write_bool("profile0x0102-r16", profile0x0102_r16);
  j.write_bool("profile0x0103-r16", profile0x0103_r16);
  j.write_bool("profile0x0104-r16", profile0x0104_r16);
  j.end_obj();
}

// SidelinkPreconfigNR-r16 ::= SEQUENCE
SRSASN_CODE sidelink_precfg_nr_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_precfg_freq_info_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_precfg_nr_anchor_carrier_freq_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_precfg_eutra_anchor_carrier_freq_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_radio_bearer_pre_cfg_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_rlc_bearer_pre_cfg_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_meas_pre_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_offset_dfn_r16_present, 1));
  HANDLE_CODE(bref.pack(t400_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_max_num_consecutive_dtx_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ssb_prio_nr_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_precfg_general_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ue_sel_pre_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_csi_acquisition_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_ro_hc_profiles_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_max_c_id_r16_present, 1));

  if (sl_precfg_freq_info_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_precfg_freq_info_list_r16, 1, 8));
  }
  if (sl_precfg_nr_anchor_carrier_freq_list_r16.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, sl_precfg_nr_anchor_carrier_freq_list_r16, 1, 8, integer_packer<uint32_t>(0, 3279165)));
  }
  if (sl_precfg_eutra_anchor_carrier_freq_list_r16.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, sl_precfg_eutra_anchor_carrier_freq_list_r16, 1, 8, integer_packer<uint32_t>(0, 262143)));
  }
  if (sl_radio_bearer_pre_cfg_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_radio_bearer_pre_cfg_list_r16, 1, 512));
  }
  if (sl_rlc_bearer_pre_cfg_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_rlc_bearer_pre_cfg_list_r16, 1, 512));
  }
  if (sl_meas_pre_cfg_r16_present) {
    HANDLE_CODE(sl_meas_pre_cfg_r16.pack(bref));
  }
  if (sl_offset_dfn_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_offset_dfn_r16, (uint16_t)1u, (uint16_t)1000u));
  }
  if (t400_r16_present) {
    HANDLE_CODE(t400_r16.pack(bref));
  }
  if (sl_max_num_consecutive_dtx_r16_present) {
    HANDLE_CODE(sl_max_num_consecutive_dtx_r16.pack(bref));
  }
  if (sl_ssb_prio_nr_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_ssb_prio_nr_r16, (uint8_t)1u, (uint8_t)8u));
  }
  if (sl_precfg_general_r16_present) {
    HANDLE_CODE(sl_precfg_general_r16.pack(bref));
  }
  if (sl_ue_sel_pre_cfg_r16_present) {
    HANDLE_CODE(sl_ue_sel_pre_cfg_r16.pack(bref));
  }
  if (sl_ro_hc_profiles_r16_present) {
    HANDLE_CODE(sl_ro_hc_profiles_r16.pack(bref));
  }
  if (sl_max_c_id_r16_present) {
    HANDLE_CODE(pack_integer(bref, sl_max_c_id_r16, (uint16_t)1u, (uint16_t)16383u));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sl_drx_pre_cfg_gc_bc_r17.is_present();
    group_flags[0] |= sl_tx_profile_list_r17.is_present();
    group_flags[0] |= sl_precfg_disc_cfg_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_drx_pre_cfg_gc_bc_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(sl_tx_profile_list_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(sl_precfg_disc_cfg_r17.is_present(), 1));
      if (sl_drx_pre_cfg_gc_bc_r17.is_present()) {
        HANDLE_CODE(sl_drx_pre_cfg_gc_bc_r17->pack(bref));
      }
      if (sl_tx_profile_list_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *sl_tx_profile_list_r17, 1, 256));
      }
      if (sl_precfg_disc_cfg_r17.is_present()) {
        HANDLE_CODE(sl_precfg_disc_cfg_r17->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sidelink_precfg_nr_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sl_precfg_freq_info_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_precfg_freq_info_list_r16_present, 1));
  bool sl_precfg_nr_anchor_carrier_freq_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_precfg_nr_anchor_carrier_freq_list_r16_present, 1));
  bool sl_precfg_eutra_anchor_carrier_freq_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_precfg_eutra_anchor_carrier_freq_list_r16_present, 1));
  bool sl_radio_bearer_pre_cfg_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_radio_bearer_pre_cfg_list_r16_present, 1));
  bool sl_rlc_bearer_pre_cfg_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_rlc_bearer_pre_cfg_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_meas_pre_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_offset_dfn_r16_present, 1));
  HANDLE_CODE(bref.unpack(t400_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_max_num_consecutive_dtx_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ssb_prio_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_precfg_general_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ue_sel_pre_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_csi_acquisition_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_ro_hc_profiles_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_max_c_id_r16_present, 1));

  if (sl_precfg_freq_info_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_precfg_freq_info_list_r16, bref, 1, 8));
  }
  if (sl_precfg_nr_anchor_carrier_freq_list_r16_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(sl_precfg_nr_anchor_carrier_freq_list_r16, bref, 1, 8, integer_packer<uint32_t>(0, 3279165)));
  }
  if (sl_precfg_eutra_anchor_carrier_freq_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(
        sl_precfg_eutra_anchor_carrier_freq_list_r16, bref, 1, 8, integer_packer<uint32_t>(0, 262143)));
  }
  if (sl_radio_bearer_pre_cfg_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_radio_bearer_pre_cfg_list_r16, bref, 1, 512));
  }
  if (sl_rlc_bearer_pre_cfg_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_rlc_bearer_pre_cfg_list_r16, bref, 1, 512));
  }
  if (sl_meas_pre_cfg_r16_present) {
    HANDLE_CODE(sl_meas_pre_cfg_r16.unpack(bref));
  }
  if (sl_offset_dfn_r16_present) {
    HANDLE_CODE(unpack_integer(sl_offset_dfn_r16, bref, (uint16_t)1u, (uint16_t)1000u));
  }
  if (t400_r16_present) {
    HANDLE_CODE(t400_r16.unpack(bref));
  }
  if (sl_max_num_consecutive_dtx_r16_present) {
    HANDLE_CODE(sl_max_num_consecutive_dtx_r16.unpack(bref));
  }
  if (sl_ssb_prio_nr_r16_present) {
    HANDLE_CODE(unpack_integer(sl_ssb_prio_nr_r16, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (sl_precfg_general_r16_present) {
    HANDLE_CODE(sl_precfg_general_r16.unpack(bref));
  }
  if (sl_ue_sel_pre_cfg_r16_present) {
    HANDLE_CODE(sl_ue_sel_pre_cfg_r16.unpack(bref));
  }
  if (sl_ro_hc_profiles_r16_present) {
    HANDLE_CODE(sl_ro_hc_profiles_r16.unpack(bref));
  }
  if (sl_max_c_id_r16_present) {
    HANDLE_CODE(unpack_integer(sl_max_c_id_r16, bref, (uint16_t)1u, (uint16_t)16383u));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sl_drx_pre_cfg_gc_bc_r17, bref);
      unpack_presence_flag(sl_tx_profile_list_r17, bref);
      unpack_presence_flag(sl_precfg_disc_cfg_r17, bref);
      if (sl_drx_pre_cfg_gc_bc_r17.is_present()) {
        HANDLE_CODE(sl_drx_pre_cfg_gc_bc_r17->unpack(bref));
      }
      if (sl_tx_profile_list_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*sl_tx_profile_list_r17, bref, 1, 256));
      }
      if (sl_precfg_disc_cfg_r17.is_present()) {
        HANDLE_CODE(sl_precfg_disc_cfg_r17->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void sidelink_precfg_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_precfg_freq_info_list_r16.size() > 0) {
    j.start_array("sl-PreconfigFreqInfoList-r16");
    for (const auto& e1 : sl_precfg_freq_info_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_precfg_nr_anchor_carrier_freq_list_r16.size() > 0) {
    j.start_array("sl-PreconfigNR-AnchorCarrierFreqList-r16");
    for (const auto& e1 : sl_precfg_nr_anchor_carrier_freq_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_precfg_eutra_anchor_carrier_freq_list_r16.size() > 0) {
    j.start_array("sl-PreconfigEUTRA-AnchorCarrierFreqList-r16");
    for (const auto& e1 : sl_precfg_eutra_anchor_carrier_freq_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (sl_radio_bearer_pre_cfg_list_r16.size() > 0) {
    j.start_array("sl-RadioBearerPreConfigList-r16");
    for (const auto& e1 : sl_radio_bearer_pre_cfg_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_rlc_bearer_pre_cfg_list_r16.size() > 0) {
    j.start_array("sl-RLC-BearerPreConfigList-r16");
    for (const auto& e1 : sl_rlc_bearer_pre_cfg_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_meas_pre_cfg_r16_present) {
    j.write_fieldname("sl-MeasPreConfig-r16");
    sl_meas_pre_cfg_r16.to_json(j);
  }
  if (sl_offset_dfn_r16_present) {
    j.write_int("sl-OffsetDFN-r16", sl_offset_dfn_r16);
  }
  if (t400_r16_present) {
    j.write_str("t400-r16", t400_r16.to_string());
  }
  if (sl_max_num_consecutive_dtx_r16_present) {
    j.write_str("sl-MaxNumConsecutiveDTX-r16", sl_max_num_consecutive_dtx_r16.to_string());
  }
  if (sl_ssb_prio_nr_r16_present) {
    j.write_int("sl-SSB-PriorityNR-r16", sl_ssb_prio_nr_r16);
  }
  if (sl_precfg_general_r16_present) {
    j.write_fieldname("sl-PreconfigGeneral-r16");
    sl_precfg_general_r16.to_json(j);
  }
  if (sl_ue_sel_pre_cfg_r16_present) {
    j.write_fieldname("sl-UE-SelectedPreConfig-r16");
    sl_ue_sel_pre_cfg_r16.to_json(j);
  }
  if (sl_csi_acquisition_r16_present) {
    j.write_str("sl-CSI-Acquisition-r16", "enabled");
  }
  if (sl_ro_hc_profiles_r16_present) {
    j.write_fieldname("sl-RoHC-Profiles-r16");
    sl_ro_hc_profiles_r16.to_json(j);
  }
  if (sl_max_c_id_r16_present) {
    j.write_int("sl-MaxCID-r16", sl_max_c_id_r16);
  }
  if (ext) {
    if (sl_drx_pre_cfg_gc_bc_r17.is_present()) {
      j.write_fieldname("sl-DRX-PreConfigGC-BC-r17");
      sl_drx_pre_cfg_gc_bc_r17->to_json(j);
    }
    if (sl_tx_profile_list_r17.is_present()) {
      j.start_array("sl-TxProfileList-r17");
      for (const auto& e1 : *sl_tx_profile_list_r17) {
        j.write_str(e1.to_string());
      }
      j.end_array();
    }
    if (sl_precfg_disc_cfg_r17.is_present()) {
      j.write_fieldname("sl-PreconfigDiscConfig-r17");
      sl_precfg_disc_cfg_r17->to_json(j);
    }
  }
  j.end_obj();
}

const char* sidelink_precfg_nr_r16_s::t400_r16_opts::to_string() const
{
  static const char* names[] = {"ms100", "ms200", "ms300", "ms400", "ms600", "ms1000", "ms1500", "ms2000"};
  return convert_enum_idx(names, 8, value, "sidelink_precfg_nr_r16_s::t400_r16_e_");
}
uint16_t sidelink_precfg_nr_r16_s::t400_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 200, 300, 400, 600, 1000, 1500, 2000};
  return map_enum_number(numbers, 8, value, "sidelink_precfg_nr_r16_s::t400_r16_e_");
}

const char* sidelink_precfg_nr_r16_s::sl_max_num_consecutive_dtx_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n6", "n8", "n16", "n32"};
  return convert_enum_idx(names, 8, value, "sidelink_precfg_nr_r16_s::sl_max_num_consecutive_dtx_r16_e_");
}
uint8_t sidelink_precfg_nr_r16_s::sl_max_num_consecutive_dtx_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 6, 8, 16, 32};
  return map_enum_number(numbers, 8, value, "sidelink_precfg_nr_r16_s::sl_max_num_consecutive_dtx_r16_e_");
}

// SL-PreconfigurationNR-r16 ::= SEQUENCE
SRSASN_CODE sl_precfg_nr_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(sidelink_precfg_nr_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sl_precfg_nr_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(sidelink_precfg_nr_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void sl_precfg_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sidelinkPreconfigNR-r16");
  sidelink_precfg_nr_r16.to_json(j);
  j.end_obj();
}

// UERadioAccessCapabilityInformation-IEs ::= SEQUENCE
SRSASN_CODE ue_radio_access_cap_info_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(ue_radio_access_cap_info.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_radio_access_cap_info_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(ue_radio_access_cap_info.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_radio_access_cap_info_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("ue-RadioAccessCapabilityInfo", ue_radio_access_cap_info.to_string());
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// UERadioAccessCapabilityInformation ::= SEQUENCE
SRSASN_CODE ue_radio_access_cap_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_radio_access_cap_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_radio_access_cap_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ue_radio_access_cap_info_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ue_radio_access_cap_info_s::crit_exts_c_::c1_c_& ue_radio_access_cap_info_s::crit_exts_c_::set_c1()
{
  set(types::c1);
  return c;
}
void ue_radio_access_cap_info_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ue_radio_access_cap_info_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_radio_access_cap_info_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ue_radio_access_cap_info_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_radio_access_cap_info_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_radio_access_cap_info_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_radio_access_cap_info_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::set(types::options e)
{
  type_ = e;
}
ue_radio_access_cap_info_ies_s& ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::set_ue_radio_access_cap_info()
{
  set(types::ue_radio_access_cap_info);
  return c;
}
void ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::set_spare7()
{
  set(types::spare7);
}
void ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::set_spare6()
{
  set(types::spare6);
}
void ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::set_spare5()
{
  set(types::spare5);
}
void ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::set_spare4()
{
  set(types::spare4);
}
void ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::set_spare3()
{
  set(types::spare3);
}
void ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::set_spare2()
{
  set(types::spare2);
}
void ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::set_spare1()
{
  set(types::spare1);
}
void ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_radio_access_cap_info:
      j.write_fieldname("ueRadioAccessCapabilityInformation");
      c.to_json(j);
      break;
    case types::spare7:
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ue_radio_access_cap_info_s::crit_exts_c_::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ue_radio_access_cap_info:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare7:
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ue_radio_access_cap_info_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ue_radio_access_cap_info:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare7:
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ue_radio_access_cap_info_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {
      "ueRadioAccessCapabilityInformation", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "ue_radio_access_cap_info_s::crit_exts_c_::c1_c_::types");
}

const char* ue_radio_access_cap_info_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"c1", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ue_radio_access_cap_info_s::crit_exts_c_::types");
}
uint8_t ue_radio_access_cap_info_s::crit_exts_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "ue_radio_access_cap_info_s::crit_exts_c_::types");
}

// UERadioPagingInformation-v1700-IEs ::= SEQUENCE
SRSASN_CODE ue_radio_paging_info_v1700_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ue_radio_paging_info_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(inactive_state_po_determination_r17_present, 1));
  HANDLE_CODE(bref.pack(nof_rx_red_cap_r17_present, 1));
  HANDLE_CODE(bref.pack(half_duplex_fdd_type_a_red_cap_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (ue_radio_paging_info_r17.size() > 0) {
    HANDLE_CODE(ue_radio_paging_info_r17.pack(bref));
  }
  if (nof_rx_red_cap_r17_present) {
    HANDLE_CODE(nof_rx_red_cap_r17.pack(bref));
  }
  if (half_duplex_fdd_type_a_red_cap_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, half_duplex_fdd_type_a_red_cap_r17, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_radio_paging_info_v1700_ies_s::unpack(cbit_ref& bref)
{
  bool ue_radio_paging_info_r17_present;
  HANDLE_CODE(bref.unpack(ue_radio_paging_info_r17_present, 1));
  HANDLE_CODE(bref.unpack(inactive_state_po_determination_r17_present, 1));
  HANDLE_CODE(bref.unpack(nof_rx_red_cap_r17_present, 1));
  bool half_duplex_fdd_type_a_red_cap_r17_present;
  HANDLE_CODE(bref.unpack(half_duplex_fdd_type_a_red_cap_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (ue_radio_paging_info_r17_present) {
    HANDLE_CODE(ue_radio_paging_info_r17.unpack(bref));
  }
  if (nof_rx_red_cap_r17_present) {
    HANDLE_CODE(nof_rx_red_cap_r17.unpack(bref));
  }
  if (half_duplex_fdd_type_a_red_cap_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(half_duplex_fdd_type_a_red_cap_r17, bref, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  }

  return SRSASN_SUCCESS;
}
void ue_radio_paging_info_v1700_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ue_radio_paging_info_r17.size() > 0) {
    j.write_str("ue-RadioPagingInfo-r17", ue_radio_paging_info_r17.to_string());
  }
  if (inactive_state_po_determination_r17_present) {
    j.write_str("inactiveStatePO-Determination-r17", "supported");
  }
  if (nof_rx_red_cap_r17_present) {
    j.write_str("numberOfRxRedCap-r17", nof_rx_red_cap_r17.to_string());
  }
  if (half_duplex_fdd_type_a_red_cap_r17.size() > 0) {
    j.start_array("halfDuplexFDD-TypeA-RedCap-r17");
    for (const auto& e1 : half_duplex_fdd_type_a_red_cap_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

const char* ue_radio_paging_info_v1700_ies_s::nof_rx_red_cap_r17_opts::to_string() const
{
  static const char* names[] = {"one", "two"};
  return convert_enum_idx(names, 2, value, "ue_radio_paging_info_v1700_ies_s::nof_rx_red_cap_r17_e_");
}
uint8_t ue_radio_paging_info_v1700_ies_s::nof_rx_red_cap_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "ue_radio_paging_info_v1700_ies_s::nof_rx_red_cap_r17_e_");
}

// UERadioPagingInformation-v15e0-IEs ::= SEQUENCE
SRSASN_CODE ue_radio_paging_info_v15e0_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(dl_sched_offset_pdsch_type_a_fdd_fr1_present, 1));
  HANDLE_CODE(bref.pack(dl_sched_offset_pdsch_type_a_tdd_fr1_present, 1));
  HANDLE_CODE(bref.pack(dl_sched_offset_pdsch_type_a_tdd_fr2_present, 1));
  HANDLE_CODE(bref.pack(dl_sched_offset_pdsch_type_b_fdd_fr1_present, 1));
  HANDLE_CODE(bref.pack(dl_sched_offset_pdsch_type_b_tdd_fr1_present, 1));
  HANDLE_CODE(bref.pack(dl_sched_offset_pdsch_type_b_tdd_fr2_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_radio_paging_info_v15e0_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(dl_sched_offset_pdsch_type_a_fdd_fr1_present, 1));
  HANDLE_CODE(bref.unpack(dl_sched_offset_pdsch_type_a_tdd_fr1_present, 1));
  HANDLE_CODE(bref.unpack(dl_sched_offset_pdsch_type_a_tdd_fr2_present, 1));
  HANDLE_CODE(bref.unpack(dl_sched_offset_pdsch_type_b_fdd_fr1_present, 1));
  HANDLE_CODE(bref.unpack(dl_sched_offset_pdsch_type_b_tdd_fr1_present, 1));
  HANDLE_CODE(bref.unpack(dl_sched_offset_pdsch_type_b_tdd_fr2_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_radio_paging_info_v15e0_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dl_sched_offset_pdsch_type_a_fdd_fr1_present) {
    j.write_str("dl-SchedulingOffset-PDSCH-TypeA-FDD-FR1", "supported");
  }
  if (dl_sched_offset_pdsch_type_a_tdd_fr1_present) {
    j.write_str("dl-SchedulingOffset-PDSCH-TypeA-TDD-FR1", "supported");
  }
  if (dl_sched_offset_pdsch_type_a_tdd_fr2_present) {
    j.write_str("dl-SchedulingOffset-PDSCH-TypeA-TDD-FR2", "supported");
  }
  if (dl_sched_offset_pdsch_type_b_fdd_fr1_present) {
    j.write_str("dl-SchedulingOffset-PDSCH-TypeB-FDD-FR1", "supported");
  }
  if (dl_sched_offset_pdsch_type_b_tdd_fr1_present) {
    j.write_str("dl-SchedulingOffset-PDSCH-TypeB-TDD-FR1", "supported");
  }
  if (dl_sched_offset_pdsch_type_b_tdd_fr2_present) {
    j.write_str("dl-SchedulingOffset-PDSCH-TypeB-TDD-FR2", "supported");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UERadioPagingInformation-IEs ::= SEQUENCE
SRSASN_CODE ue_radio_paging_info_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(supported_band_list_nr_for_paging.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (supported_band_list_nr_for_paging.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_list_nr_for_paging, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_radio_paging_info_ies_s::unpack(cbit_ref& bref)
{
  bool supported_band_list_nr_for_paging_present;
  HANDLE_CODE(bref.unpack(supported_band_list_nr_for_paging_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (supported_band_list_nr_for_paging_present) {
    HANDLE_CODE(unpack_dyn_seq_of(supported_band_list_nr_for_paging, bref, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_radio_paging_info_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (supported_band_list_nr_for_paging.size() > 0) {
    j.start_array("supportedBandListNRForPaging");
    for (const auto& e1 : supported_band_list_nr_for_paging) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UERadioPagingInformation ::= SEQUENCE
SRSASN_CODE ue_radio_paging_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(crit_exts.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_radio_paging_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(crit_exts.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_radio_paging_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("criticalExtensions");
  crit_exts.to_json(j);
  j.end_obj();
}

void ue_radio_paging_info_s::crit_exts_c_::set(types::options e)
{
  type_ = e;
}
ue_radio_paging_info_s::crit_exts_c_::c1_c_& ue_radio_paging_info_s::crit_exts_c_::set_c1()
{
  set(types::c1);
  return c;
}
void ue_radio_paging_info_s::crit_exts_c_::set_crit_exts_future()
{
  set(types::crit_exts_future);
}
void ue_radio_paging_info_s::crit_exts_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::c1:
      j.write_fieldname("c1");
      c.to_json(j);
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_radio_paging_info_s::crit_exts_c_");
  }
  j.end_obj();
}
SRSASN_CODE ue_radio_paging_info_s::crit_exts_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_radio_paging_info_s::crit_exts_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_radio_paging_info_s::crit_exts_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::c1:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::crit_exts_future:
      break;
    default:
      log_invalid_choice_id(type_, "ue_radio_paging_info_s::crit_exts_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void ue_radio_paging_info_s::crit_exts_c_::c1_c_::set(types::options e)
{
  type_ = e;
}
ue_radio_paging_info_ies_s& ue_radio_paging_info_s::crit_exts_c_::c1_c_::set_ue_radio_paging_info()
{
  set(types::ue_radio_paging_info);
  return c;
}
void ue_radio_paging_info_s::crit_exts_c_::c1_c_::set_spare7()
{
  set(types::spare7);
}
void ue_radio_paging_info_s::crit_exts_c_::c1_c_::set_spare6()
{
  set(types::spare6);
}
void ue_radio_paging_info_s::crit_exts_c_::c1_c_::set_spare5()
{
  set(types::spare5);
}
void ue_radio_paging_info_s::crit_exts_c_::c1_c_::set_spare4()
{
  set(types::spare4);
}
void ue_radio_paging_info_s::crit_exts_c_::c1_c_::set_spare3()
{
  set(types::spare3);
}
void ue_radio_paging_info_s::crit_exts_c_::c1_c_::set_spare2()
{
  set(types::spare2);
}
void ue_radio_paging_info_s::crit_exts_c_::c1_c_::set_spare1()
{
  set(types::spare1);
}
void ue_radio_paging_info_s::crit_exts_c_::c1_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_radio_paging_info:
      j.write_fieldname("ueRadioPagingInformation");
      c.to_json(j);
      break;
    case types::spare7:
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ue_radio_paging_info_s::crit_exts_c_::c1_c_");
  }
  j.end_obj();
}
SRSASN_CODE ue_radio_paging_info_s::crit_exts_c_::c1_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ue_radio_paging_info:
      HANDLE_CODE(c.pack(bref));
      break;
    case types::spare7:
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ue_radio_paging_info_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_radio_paging_info_s::crit_exts_c_::c1_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ue_radio_paging_info:
      HANDLE_CODE(c.unpack(bref));
      break;
    case types::spare7:
      break;
    case types::spare6:
      break;
    case types::spare5:
      break;
    case types::spare4:
      break;
    case types::spare3:
      break;
    case types::spare2:
      break;
    case types::spare1:
      break;
    default:
      log_invalid_choice_id(type_, "ue_radio_paging_info_s::crit_exts_c_::c1_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_radio_paging_info_s::crit_exts_c_::c1_c_::types_opts::to_string() const
{
  static const char* names[] = {
      "ueRadioPagingInformation", "spare7", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "ue_radio_paging_info_s::crit_exts_c_::c1_c_::types");
}

const char* ue_radio_paging_info_s::crit_exts_c_::types_opts::to_string() const
{
  static const char* names[] = {"c1", "criticalExtensionsFuture"};
  return convert_enum_idx(names, 2, value, "ue_radio_paging_info_s::crit_exts_c_::types");
}
uint8_t ue_radio_paging_info_s::crit_exts_c_::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "ue_radio_paging_info_s::crit_exts_c_::types");
}

// VarConditionalReconfig ::= SEQUENCE
SRSASN_CODE var_conditional_recfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cond_recfg_list.size() > 0, 1));

  if (cond_recfg_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cond_recfg_list, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_conditional_recfg_s::unpack(cbit_ref& bref)
{
  bool cond_recfg_list_present;
  HANDLE_CODE(bref.unpack(cond_recfg_list_present, 1));

  if (cond_recfg_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cond_recfg_list, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void var_conditional_recfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (cond_recfg_list.size() > 0) {
    j.start_array("condReconfigList");
    for (const auto& e1 : cond_recfg_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// VarConnEstFailReport-r16 ::= SEQUENCE
SRSASN_CODE var_conn_est_fail_report_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(conn_est_fail_report_r16.pack(bref));
  HANDLE_CODE(plmn_id_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_conn_est_fail_report_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(conn_est_fail_report_r16.unpack(bref));
  HANDLE_CODE(plmn_id_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void var_conn_est_fail_report_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("connEstFailReport-r16");
  conn_est_fail_report_r16.to_json(j);
  j.write_fieldname("plmn-Identity-r16");
  plmn_id_r16.to_json(j);
  j.end_obj();
}

// VarConnEstFailReportList-r17 ::= SEQUENCE
SRSASN_CODE var_conn_est_fail_report_list_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, conn_est_fail_report_list_r17, 1, 4));

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_conn_est_fail_report_list_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(conn_est_fail_report_list_r17, bref, 1, 4));

  return SRSASN_SUCCESS;
}
void var_conn_est_fail_report_list_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("connEstFailReportList-r17");
  for (const auto& e1 : conn_est_fail_report_list_r17) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// VarLogMeasConfig-r16-IEs ::= SEQUENCE
SRSASN_CODE var_log_meas_cfg_r16_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(area_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(bt_name_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(wlan_name_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sensor_name_list_r16_present, 1));
  HANDLE_CODE(bref.pack(early_meas_ind_r17_present, 1));
  HANDLE_CODE(bref.pack(area_cfg_v1700_present, 1));

  if (area_cfg_r16_present) {
    HANDLE_CODE(area_cfg_r16.pack(bref));
  }
  if (bt_name_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, bt_name_list_r16, 1, 4));
  }
  if (wlan_name_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, wlan_name_list_r16, 1, 4));
  }
  if (sensor_name_list_r16_present) {
    HANDLE_CODE(sensor_name_list_r16.pack(bref));
  }
  HANDLE_CODE(logging_dur_r16.pack(bref));
  HANDLE_CODE(report_type.pack(bref));
  if (area_cfg_v1700_present) {
    HANDLE_CODE(area_cfg_v1700.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_log_meas_cfg_r16_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(area_cfg_r16_present, 1));
  bool bt_name_list_r16_present;
  HANDLE_CODE(bref.unpack(bt_name_list_r16_present, 1));
  bool wlan_name_list_r16_present;
  HANDLE_CODE(bref.unpack(wlan_name_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sensor_name_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(early_meas_ind_r17_present, 1));
  HANDLE_CODE(bref.unpack(area_cfg_v1700_present, 1));

  if (area_cfg_r16_present) {
    HANDLE_CODE(area_cfg_r16.unpack(bref));
  }
  if (bt_name_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(bt_name_list_r16, bref, 1, 4));
  }
  if (wlan_name_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(wlan_name_list_r16, bref, 1, 4));
  }
  if (sensor_name_list_r16_present) {
    HANDLE_CODE(sensor_name_list_r16.unpack(bref));
  }
  HANDLE_CODE(logging_dur_r16.unpack(bref));
  HANDLE_CODE(report_type.unpack(bref));
  if (area_cfg_v1700_present) {
    HANDLE_CODE(area_cfg_v1700.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void var_log_meas_cfg_r16_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (area_cfg_r16_present) {
    j.write_fieldname("areaConfiguration-r16");
    area_cfg_r16.to_json(j);
  }
  if (bt_name_list_r16.size() > 0) {
    j.start_array("bt-NameList-r16");
    for (const auto& e1 : bt_name_list_r16) {
      j.write_str(e1.to_string());
    }
    j.end_array();
  }
  if (wlan_name_list_r16.size() > 0) {
    j.start_array("wlan-NameList-r16");
    for (const auto& e1 : wlan_name_list_r16) {
      j.write_str(e1.to_string());
    }
    j.end_array();
  }
  if (sensor_name_list_r16_present) {
    j.write_fieldname("sensor-NameList-r16");
    sensor_name_list_r16.to_json(j);
  }
  j.write_str("loggingDuration-r16", logging_dur_r16.to_string());
  j.write_fieldname("reportType");
  report_type.to_json(j);
  if (early_meas_ind_r17_present) {
    j.write_str("earlyMeasIndication-r17", "true");
  }
  if (area_cfg_v1700_present) {
    j.write_fieldname("areaConfiguration-v1700");
    area_cfg_v1700.to_json(j);
  }
  j.end_obj();
}

void var_log_meas_cfg_r16_ies_s::report_type_c_::destroy_()
{
  switch (type_) {
    case types::periodical:
      c.destroy<logged_periodical_report_cfg_r16_s>();
      break;
    case types::event_triggered:
      c.destroy<logged_event_trigger_cfg_r16_s>();
      break;
    default:
      break;
  }
}
void var_log_meas_cfg_r16_ies_s::report_type_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::periodical:
      c.init<logged_periodical_report_cfg_r16_s>();
      break;
    case types::event_triggered:
      c.init<logged_event_trigger_cfg_r16_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "var_log_meas_cfg_r16_ies_s::report_type_c_");
  }
}
var_log_meas_cfg_r16_ies_s::report_type_c_::report_type_c_(const var_log_meas_cfg_r16_ies_s::report_type_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::periodical:
      c.init(other.c.get<logged_periodical_report_cfg_r16_s>());
      break;
    case types::event_triggered:
      c.init(other.c.get<logged_event_trigger_cfg_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "var_log_meas_cfg_r16_ies_s::report_type_c_");
  }
}
var_log_meas_cfg_r16_ies_s::report_type_c_&
var_log_meas_cfg_r16_ies_s::report_type_c_::operator=(const var_log_meas_cfg_r16_ies_s::report_type_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::periodical:
      c.set(other.c.get<logged_periodical_report_cfg_r16_s>());
      break;
    case types::event_triggered:
      c.set(other.c.get<logged_event_trigger_cfg_r16_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "var_log_meas_cfg_r16_ies_s::report_type_c_");
  }

  return *this;
}
logged_periodical_report_cfg_r16_s& var_log_meas_cfg_r16_ies_s::report_type_c_::set_periodical()
{
  set(types::periodical);
  return c.get<logged_periodical_report_cfg_r16_s>();
}
logged_event_trigger_cfg_r16_s& var_log_meas_cfg_r16_ies_s::report_type_c_::set_event_triggered()
{
  set(types::event_triggered);
  return c.get<logged_event_trigger_cfg_r16_s>();
}
void var_log_meas_cfg_r16_ies_s::report_type_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::periodical:
      j.write_fieldname("periodical");
      c.get<logged_periodical_report_cfg_r16_s>().to_json(j);
      break;
    case types::event_triggered:
      j.write_fieldname("eventTriggered");
      c.get<logged_event_trigger_cfg_r16_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "var_log_meas_cfg_r16_ies_s::report_type_c_");
  }
  j.end_obj();
}
SRSASN_CODE var_log_meas_cfg_r16_ies_s::report_type_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::periodical:
      HANDLE_CODE(c.get<logged_periodical_report_cfg_r16_s>().pack(bref));
      break;
    case types::event_triggered:
      HANDLE_CODE(c.get<logged_event_trigger_cfg_r16_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "var_log_meas_cfg_r16_ies_s::report_type_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE var_log_meas_cfg_r16_ies_s::report_type_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::periodical:
      HANDLE_CODE(c.get<logged_periodical_report_cfg_r16_s>().unpack(bref));
      break;
    case types::event_triggered:
      HANDLE_CODE(c.get<logged_event_trigger_cfg_r16_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "var_log_meas_cfg_r16_ies_s::report_type_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* var_log_meas_cfg_r16_ies_s::report_type_c_::types_opts::to_string() const
{
  static const char* names[] = {"periodical", "eventTriggered"};
  return convert_enum_idx(names, 2, value, "var_log_meas_cfg_r16_ies_s::report_type_c_::types");
}

// VarLogMeasReport-r16 ::= SEQUENCE
SRSASN_CODE var_log_meas_report_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(absolute_time_info_r16.pack(bref));
  HANDLE_CODE(trace_ref_r16.pack(bref));
  HANDLE_CODE(trace_recording_session_ref_r16.pack(bref));
  HANDLE_CODE(tce_id_r16.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, log_meas_info_list_r16, 1, 520));
  HANDLE_CODE(pack_dyn_seq_of(bref, plmn_id_list_r16, 1, 16));

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_log_meas_report_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(absolute_time_info_r16.unpack(bref));
  HANDLE_CODE(trace_ref_r16.unpack(bref));
  HANDLE_CODE(trace_recording_session_ref_r16.unpack(bref));
  HANDLE_CODE(tce_id_r16.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(log_meas_info_list_r16, bref, 1, 520));
  HANDLE_CODE(unpack_dyn_seq_of(plmn_id_list_r16, bref, 1, 16));

  return SRSASN_SUCCESS;
}
void var_log_meas_report_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("absoluteTimeInfo-r16", absolute_time_info_r16.to_string());
  j.write_fieldname("traceReference-r16");
  trace_ref_r16.to_json(j);
  j.write_str("traceRecordingSessionRef-r16", trace_recording_session_ref_r16.to_string());
  j.write_str("tce-Id-r16", tce_id_r16.to_string());
  j.start_array("logMeasInfoList-r16");
  for (const auto& e1 : log_meas_info_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.start_array("plmn-IdentityList-r16");
  for (const auto& e1 : plmn_id_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_str("sigLoggedMeasType-r17", "true");
  j.end_obj();
}

// VarMeasConfig ::= SEQUENCE
SRSASN_CODE var_meas_cfg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_id_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_obj_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(report_cfg_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(quant_cfg_present, 1));
  HANDLE_CODE(bref.pack(s_measure_cfg_present, 1));

  if (meas_id_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_id_list, 1, 64));
  }
  if (meas_obj_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_obj_list, 1, 64));
  }
  if (report_cfg_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, report_cfg_list, 1, 64));
  }
  if (quant_cfg_present) {
    HANDLE_CODE(quant_cfg.pack(bref));
  }
  if (s_measure_cfg_present) {
    HANDLE_CODE(s_measure_cfg.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_meas_cfg_s::unpack(cbit_ref& bref)
{
  bool meas_id_list_present;
  HANDLE_CODE(bref.unpack(meas_id_list_present, 1));
  bool meas_obj_list_present;
  HANDLE_CODE(bref.unpack(meas_obj_list_present, 1));
  bool report_cfg_list_present;
  HANDLE_CODE(bref.unpack(report_cfg_list_present, 1));
  HANDLE_CODE(bref.unpack(quant_cfg_present, 1));
  HANDLE_CODE(bref.unpack(s_measure_cfg_present, 1));

  if (meas_id_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_id_list, bref, 1, 64));
  }
  if (meas_obj_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_obj_list, bref, 1, 64));
  }
  if (report_cfg_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(report_cfg_list, bref, 1, 64));
  }
  if (quant_cfg_present) {
    HANDLE_CODE(quant_cfg.unpack(bref));
  }
  if (s_measure_cfg_present) {
    HANDLE_CODE(s_measure_cfg.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void var_meas_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_id_list.size() > 0) {
    j.start_array("measIdList");
    for (const auto& e1 : meas_id_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_obj_list.size() > 0) {
    j.start_array("measObjectList");
    for (const auto& e1 : meas_obj_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (report_cfg_list.size() > 0) {
    j.start_array("reportConfigList");
    for (const auto& e1 : report_cfg_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (quant_cfg_present) {
    j.write_fieldname("quantityConfig");
    quant_cfg.to_json(j);
  }
  if (s_measure_cfg_present) {
    j.write_fieldname("s-MeasureConfig");
    s_measure_cfg.to_json(j);
  }
  j.end_obj();
}

void var_meas_cfg_s::s_measure_cfg_c_::destroy_() {}
void var_meas_cfg_s::s_measure_cfg_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
var_meas_cfg_s::s_measure_cfg_c_::s_measure_cfg_c_(const var_meas_cfg_s::s_measure_cfg_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ssb_rsrp:
      c.init(other.c.get<uint8_t>());
      break;
    case types::csi_rsrp:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "var_meas_cfg_s::s_measure_cfg_c_");
  }
}
var_meas_cfg_s::s_measure_cfg_c_&
var_meas_cfg_s::s_measure_cfg_c_::operator=(const var_meas_cfg_s::s_measure_cfg_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ssb_rsrp:
      c.set(other.c.get<uint8_t>());
      break;
    case types::csi_rsrp:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "var_meas_cfg_s::s_measure_cfg_c_");
  }

  return *this;
}
uint8_t& var_meas_cfg_s::s_measure_cfg_c_::set_ssb_rsrp()
{
  set(types::ssb_rsrp);
  return c.get<uint8_t>();
}
uint8_t& var_meas_cfg_s::s_measure_cfg_c_::set_csi_rsrp()
{
  set(types::csi_rsrp);
  return c.get<uint8_t>();
}
void var_meas_cfg_s::s_measure_cfg_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ssb_rsrp:
      j.write_int("ssb-RSRP", c.get<uint8_t>());
      break;
    case types::csi_rsrp:
      j.write_int("csi-RSRP", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "var_meas_cfg_s::s_measure_cfg_c_");
  }
  j.end_obj();
}
SRSASN_CODE var_meas_cfg_s::s_measure_cfg_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ssb_rsrp:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    case types::csi_rsrp:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)127u));
      break;
    default:
      log_invalid_choice_id(type_, "var_meas_cfg_s::s_measure_cfg_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE var_meas_cfg_s::s_measure_cfg_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ssb_rsrp:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    case types::csi_rsrp:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)127u));
      break;
    default:
      log_invalid_choice_id(type_, "var_meas_cfg_s::s_measure_cfg_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* var_meas_cfg_s::s_measure_cfg_c_::types_opts::to_string() const
{
  static const char* names[] = {"ssb-RSRP", "csi-RSRP"};
  return convert_enum_idx(names, 2, value, "var_meas_cfg_s::s_measure_cfg_c_::types");
}

// VarMeasConfigSL-r16 ::= SEQUENCE
SRSASN_CODE var_meas_cfg_sl_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_meas_id_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_meas_obj_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_report_cfg_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_quant_cfg_r16_present, 1));

  if (sl_meas_id_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_meas_id_list_r16, 1, 64));
  }
  if (sl_meas_obj_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_meas_obj_list_r16, 1, 64));
  }
  if (sl_report_cfg_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_report_cfg_list_r16, 1, 64));
  }
  if (sl_quant_cfg_r16_present) {
    HANDLE_CODE(sl_quant_cfg_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_meas_cfg_sl_r16_s::unpack(cbit_ref& bref)
{
  bool sl_meas_id_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_meas_id_list_r16_present, 1));
  bool sl_meas_obj_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_meas_obj_list_r16_present, 1));
  bool sl_report_cfg_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_report_cfg_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_quant_cfg_r16_present, 1));

  if (sl_meas_id_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_meas_id_list_r16, bref, 1, 64));
  }
  if (sl_meas_obj_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_meas_obj_list_r16, bref, 1, 64));
  }
  if (sl_report_cfg_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_report_cfg_list_r16, bref, 1, 64));
  }
  if (sl_quant_cfg_r16_present) {
    HANDLE_CODE(sl_quant_cfg_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void var_meas_cfg_sl_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_meas_id_list_r16.size() > 0) {
    j.start_array("sl-MeasIdList-r16");
    for (const auto& e1 : sl_meas_id_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_meas_obj_list_r16.size() > 0) {
    j.start_array("sl-MeasObjectList-r16");
    for (const auto& e1 : sl_meas_obj_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_report_cfg_list_r16.size() > 0) {
    j.start_array("sl-reportConfigList-r16");
    for (const auto& e1 : sl_report_cfg_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (sl_quant_cfg_r16_present) {
    j.write_fieldname("sl-QuantityConfig-r16");
    sl_quant_cfg_r16.to_json(j);
  }
  j.end_obj();
}

// VarMeasIdleConfig-r16 ::= SEQUENCE
SRSASN_CODE var_meas_idle_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_idle_carrier_list_nr_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_idle_carrier_list_eutra_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(validity_area_list_r16.size() > 0, 1));

  if (meas_idle_carrier_list_nr_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_idle_carrier_list_nr_r16, 1, 8));
  }
  if (meas_idle_carrier_list_eutra_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, meas_idle_carrier_list_eutra_r16, 1, 8));
  }
  HANDLE_CODE(meas_idle_dur_r16.pack(bref));
  if (validity_area_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, validity_area_list_r16, 1, 8));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_meas_idle_cfg_r16_s::unpack(cbit_ref& bref)
{
  bool meas_idle_carrier_list_nr_r16_present;
  HANDLE_CODE(bref.unpack(meas_idle_carrier_list_nr_r16_present, 1));
  bool meas_idle_carrier_list_eutra_r16_present;
  HANDLE_CODE(bref.unpack(meas_idle_carrier_list_eutra_r16_present, 1));
  bool validity_area_list_r16_present;
  HANDLE_CODE(bref.unpack(validity_area_list_r16_present, 1));

  if (meas_idle_carrier_list_nr_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_idle_carrier_list_nr_r16, bref, 1, 8));
  }
  if (meas_idle_carrier_list_eutra_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(meas_idle_carrier_list_eutra_r16, bref, 1, 8));
  }
  HANDLE_CODE(meas_idle_dur_r16.unpack(bref));
  if (validity_area_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(validity_area_list_r16, bref, 1, 8));
  }

  return SRSASN_SUCCESS;
}
void var_meas_idle_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_idle_carrier_list_nr_r16.size() > 0) {
    j.start_array("measIdleCarrierListNR-r16");
    for (const auto& e1 : meas_idle_carrier_list_nr_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_idle_carrier_list_eutra_r16.size() > 0) {
    j.start_array("measIdleCarrierListEUTRA-r16");
    for (const auto& e1 : meas_idle_carrier_list_eutra_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_str("measIdleDuration-r16", meas_idle_dur_r16.to_string());
  if (validity_area_list_r16.size() > 0) {
    j.start_array("validityAreaList-r16");
    for (const auto& e1 : validity_area_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

const char* var_meas_idle_cfg_r16_s::meas_idle_dur_r16_opts::to_string() const
{
  static const char* names[] = {"sec10", "sec30", "sec60", "sec120", "sec180", "sec240", "sec300", "spare"};
  return convert_enum_idx(names, 8, value, "var_meas_idle_cfg_r16_s::meas_idle_dur_r16_e_");
}
uint16_t var_meas_idle_cfg_r16_s::meas_idle_dur_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {10, 30, 60, 120, 180, 240, 300};
  return map_enum_number(numbers, 7, value, "var_meas_idle_cfg_r16_s::meas_idle_dur_r16_e_");
}

// VarMeasIdleReport-r16 ::= SEQUENCE
SRSASN_CODE var_meas_idle_report_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_report_idle_nr_r16_present, 1));
  HANDLE_CODE(bref.pack(meas_report_idle_eutra_r16_present, 1));

  if (meas_report_idle_nr_r16_present) {
    HANDLE_CODE(meas_report_idle_nr_r16.pack(bref));
  }
  if (meas_report_idle_eutra_r16_present) {
    HANDLE_CODE(meas_report_idle_eutra_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_meas_idle_report_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_report_idle_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(meas_report_idle_eutra_r16_present, 1));

  if (meas_report_idle_nr_r16_present) {
    HANDLE_CODE(meas_report_idle_nr_r16.unpack(bref));
  }
  if (meas_report_idle_eutra_r16_present) {
    HANDLE_CODE(meas_report_idle_eutra_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void var_meas_idle_report_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_report_idle_nr_r16_present) {
    j.write_fieldname("measReportIdleNR-r16");
    meas_report_idle_nr_r16.to_json(j);
  }
  if (meas_report_idle_eutra_r16_present) {
    j.write_fieldname("measReportIdleEUTRA-r16");
    meas_report_idle_eutra_r16.to_json(j);
  }
  j.end_obj();
}

// VarMeasReport ::= SEQUENCE
SRSASN_CODE var_meas_report_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cells_triggered_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(cli_triggered_list_r16_present, 1));
  HANDLE_CODE(bref.pack(tx_pool_meas_to_add_mod_list_nr_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(relays_triggered_list_r17.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, meas_id, (uint8_t)1u, (uint8_t)64u));
  if (cells_triggered_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_triggered_list, 1, 32));
  }
  HANDLE_CODE(pack_unconstrained_integer(bref, nof_reports_sent));
  if (cli_triggered_list_r16_present) {
    HANDLE_CODE(cli_triggered_list_r16.pack(bref));
  }
  if (tx_pool_meas_to_add_mod_list_nr_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, tx_pool_meas_to_add_mod_list_nr_r16, 1, 8, integer_packer<uint8_t>(1, 16)));
  }
  if (relays_triggered_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, relays_triggered_list_r17, 1, 32));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_meas_report_s::unpack(cbit_ref& bref)
{
  bool cells_triggered_list_present;
  HANDLE_CODE(bref.unpack(cells_triggered_list_present, 1));
  HANDLE_CODE(bref.unpack(cli_triggered_list_r16_present, 1));
  bool tx_pool_meas_to_add_mod_list_nr_r16_present;
  HANDLE_CODE(bref.unpack(tx_pool_meas_to_add_mod_list_nr_r16_present, 1));
  bool relays_triggered_list_r17_present;
  HANDLE_CODE(bref.unpack(relays_triggered_list_r17_present, 1));

  HANDLE_CODE(unpack_integer(meas_id, bref, (uint8_t)1u, (uint8_t)64u));
  if (cells_triggered_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(cells_triggered_list, bref, 1, 32));
  }
  HANDLE_CODE(unpack_unconstrained_integer(nof_reports_sent, bref));
  if (cli_triggered_list_r16_present) {
    HANDLE_CODE(cli_triggered_list_r16.unpack(bref));
  }
  if (tx_pool_meas_to_add_mod_list_nr_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(tx_pool_meas_to_add_mod_list_nr_r16, bref, 1, 8, integer_packer<uint8_t>(1, 16)));
  }
  if (relays_triggered_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(relays_triggered_list_r17, bref, 1, 32));
  }

  return SRSASN_SUCCESS;
}
void var_meas_report_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("measId", meas_id);
  if (cells_triggered_list.size() > 0) {
    j.start_array("cellsTriggeredList");
    for (const auto& e1 : cells_triggered_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_int("numberOfReportsSent", nof_reports_sent);
  if (cli_triggered_list_r16_present) {
    j.write_fieldname("cli-TriggeredList-r16");
    cli_triggered_list_r16.to_json(j);
  }
  if (tx_pool_meas_to_add_mod_list_nr_r16.size() > 0) {
    j.start_array("tx-PoolMeasToAddModListNR-r16");
    for (const auto& e1 : tx_pool_meas_to_add_mod_list_nr_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (relays_triggered_list_r17.size() > 0) {
    j.start_array("relaysTriggeredList-r17");
    for (const auto& e1 : relays_triggered_list_r17) {
      j.write_str(e1.to_string());
    }
    j.end_array();
  }
  j.end_obj();
}

// VarMeasReportSL-r16 ::= SEQUENCE
SRSASN_CODE var_meas_report_sl_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_freq_triggered_list_r16.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, sl_meas_id_r16, (uint8_t)1u, (uint8_t)64u));
  if (sl_freq_triggered_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, sl_freq_triggered_list_r16, 1, 8, integer_packer<uint32_t>(0, 3279165)));
  }
  HANDLE_CODE(pack_unconstrained_integer(bref, sl_nof_reports_sent_r16));

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_meas_report_sl_r16_s::unpack(cbit_ref& bref)
{
  bool sl_freq_triggered_list_r16_present;
  HANDLE_CODE(bref.unpack(sl_freq_triggered_list_r16_present, 1));

  HANDLE_CODE(unpack_integer(sl_meas_id_r16, bref, (uint8_t)1u, (uint8_t)64u));
  if (sl_freq_triggered_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(sl_freq_triggered_list_r16, bref, 1, 8, integer_packer<uint32_t>(0, 3279165)));
  }
  HANDLE_CODE(unpack_unconstrained_integer(sl_nof_reports_sent_r16, bref));

  return SRSASN_SUCCESS;
}
void var_meas_report_sl_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sl-MeasId-r16", sl_meas_id_r16);
  if (sl_freq_triggered_list_r16.size() > 0) {
    j.start_array("sl-FrequencyTriggeredList-r16");
    for (const auto& e1 : sl_freq_triggered_list_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.write_int("sl-NumberOfReportsSent-r16", sl_nof_reports_sent_r16);
  j.end_obj();
}

// VarMobilityHistoryReport-r17 ::= SEQUENCE
SRSASN_CODE var_mob_history_report_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(visited_pscell_info_list_report_r17.size() > 0, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, visited_cell_info_list_r16, 1, 16));
  if (visited_pscell_info_list_report_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, visited_pscell_info_list_report_r17, 1, 16));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_mob_history_report_r17_s::unpack(cbit_ref& bref)
{
  bool visited_pscell_info_list_report_r17_present;
  HANDLE_CODE(bref.unpack(visited_pscell_info_list_report_r17_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(visited_cell_info_list_r16, bref, 1, 16));
  if (visited_pscell_info_list_report_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(visited_pscell_info_list_report_r17, bref, 1, 16));
  }

  return SRSASN_SUCCESS;
}
void var_mob_history_report_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("visitedCellInfoList-r16");
  for (const auto& e1 : visited_cell_info_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  if (visited_pscell_info_list_report_r17.size() > 0) {
    j.start_array("visitedPSCellInfoListReport-r17");
    for (const auto& e1 : visited_pscell_info_list_report_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// VarRA-Report-r16 ::= SEQUENCE
SRSASN_CODE var_ra_report_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, ra_report_list_r16, 1, 8));
  HANDLE_CODE(pack_dyn_seq_of(bref, plmn_id_list_r16, 1, 12));

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_ra_report_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(ra_report_list_r16, bref, 1, 8));
  HANDLE_CODE(unpack_dyn_seq_of(plmn_id_list_r16, bref, 1, 12));

  return SRSASN_SUCCESS;
}
void var_ra_report_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("ra-ReportList-r16");
  for (const auto& e1 : ra_report_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.start_array("plmn-IdentityList-r16");
  for (const auto& e1 : plmn_id_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// VarRLF-Report-r16 ::= SEQUENCE
SRSASN_CODE var_rlf_report_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(rlf_report_r16.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, plmn_id_list_r16, 1, 16));

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_rlf_report_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(rlf_report_r16.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(plmn_id_list_r16, bref, 1, 16));

  return SRSASN_SUCCESS;
}
void var_rlf_report_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("rlf-Report-r16");
  rlf_report_r16.to_json(j);
  j.start_array("plmn-IdentityList-r16");
  for (const auto& e1 : plmn_id_list_r16) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// VarResumeMAC-Input ::= SEQUENCE
SRSASN_CODE var_resume_mac_input_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, source_pci, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(target_cell_id.pack(bref));
  HANDLE_CODE(pack_integer(bref, source_c_rnti, (uint32_t)0u, (uint32_t)65535u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_resume_mac_input_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(source_pci, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(target_cell_id.unpack(bref));
  HANDLE_CODE(unpack_integer(source_c_rnti, bref, (uint32_t)0u, (uint32_t)65535u));

  return SRSASN_SUCCESS;
}
void var_resume_mac_input_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sourcePhysCellId", source_pci);
  j.write_str("targetCellIdentity", target_cell_id.to_string());
  j.write_int("source-c-RNTI", source_c_rnti);
  j.end_obj();
}

// VarShortMAC-Input ::= SEQUENCE
SRSASN_CODE var_short_mac_input_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, source_pci, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(target_cell_id.pack(bref));
  HANDLE_CODE(pack_integer(bref, source_c_rnti, (uint32_t)0u, (uint32_t)65535u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_short_mac_input_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(source_pci, bref, (uint16_t)0u, (uint16_t)1007u));
  HANDLE_CODE(target_cell_id.unpack(bref));
  HANDLE_CODE(unpack_integer(source_c_rnti, bref, (uint32_t)0u, (uint32_t)65535u));

  return SRSASN_SUCCESS;
}
void var_short_mac_input_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sourcePhysCellId", source_pci);
  j.write_str("targetCellIdentity", target_cell_id.to_string());
  j.write_int("source-c-RNTI", source_c_rnti);
  j.end_obj();
}

// VarSuccessHO-Report-r17-IEs ::= SEQUENCE
SRSASN_CODE var_success_ho_report_r17_ies_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(success_ho_report_r17.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, plmn_id_list_r17, 1, 16));

  return SRSASN_SUCCESS;
}
SRSASN_CODE var_success_ho_report_r17_ies_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(success_ho_report_r17.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(plmn_id_list_r17, bref, 1, 16));

  return SRSASN_SUCCESS;
}
void var_success_ho_report_r17_ies_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("successHO-Report-r17");
  success_ho_report_r17.to_json(j);
  j.start_array("plmn-IdentityList-r17");
  for (const auto& e1 : plmn_id_list_r17) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}
